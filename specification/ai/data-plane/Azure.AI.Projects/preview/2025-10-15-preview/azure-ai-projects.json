{
  "swagger": "2.0",
  "info": {
    "title": "Azure AI",
    "version": "2025-10-15-preview",
    "x-typespec-generated": [
      {
        "emitter": "@azure-tools/typespec-autorest"
      }
    ]
  },
  "schemes": [
    "https"
  ],
  "x-ms-parameterized-host": {
    "hostTemplate": "{endpoint}",
    "useSchemePrefix": false,
    "parameters": [
      {
        "name": "endpoint",
        "in": "path",
        "description": "Project endpoint. In the form \"https://your-ai-services-account-name.services.ai.azure.com/api/projects/_project\"\nif your Foundry Hub has only one Project, or to use the default Project in your Hub. Or in the form \n\"https://your-ai-services-account-name.services.ai.azure.com/api/projects/your-project-name\" if you want to explicitly\nspecify the Foundry Project name.",
        "required": true,
        "type": "string",
        "format": "uri",
        "x-ms-skip-url-encoding": true
      }
    ]
  },
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "security": [
    {
      "OAuth2Auth": [
        "https://ai.azure.com/.default"
      ]
    }
  ],
  "securityDefinitions": {
    "OAuth2Auth": {
      "type": "oauth2",
      "flow": "implicit",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/v2.0/authorize",
      "scopes": {
        "https://ai.azure.com/.default": ""
      }
    }
  },
  "tags": [
    {
      "name": "Evals"
    }
  ],
  "paths": {
    "/connections": {
      "get": {
        "operationId": "Connections_List",
        "description": "List all connections in the project, without populating connection credentials",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "connectionType",
            "in": "query",
            "description": "List connections of this specific type",
            "required": false,
            "type": "string",
            "enum": [
              "AzureOpenAI",
              "AzureBlob",
              "AzureStorageAccount",
              "CognitiveSearch",
              "CosmosDB",
              "ApiKey",
              "AppConfig",
              "AppInsights",
              "CustomKeys"
            ],
            "x-ms-enum": {
              "name": "ConnectionType",
              "modelAsString": true,
              "values": [
                {
                  "name": "AzureOpenAI",
                  "value": "AzureOpenAI",
                  "description": "Azure OpenAI Service"
                },
                {
                  "name": "AzureBlobStorage",
                  "value": "AzureBlob",
                  "description": "Azure Blob Storage, with specified container"
                },
                {
                  "name": "AzureStorageAccount",
                  "value": "AzureStorageAccount",
                  "description": "Azure Blob Storage, with container not specified (used by Agents)"
                },
                {
                  "name": "AzureAISearch",
                  "value": "CognitiveSearch",
                  "description": "Azure AI Search"
                },
                {
                  "name": "CosmosDB",
                  "value": "CosmosDB",
                  "description": "CosmosDB"
                },
                {
                  "name": "APIKey",
                  "value": "ApiKey",
                  "description": "Generic connection that uses API Key authentication"
                },
                {
                  "name": "ApplicationConfiguration",
                  "value": "AppConfig",
                  "description": "Application Configuration"
                },
                {
                  "name": "ApplicationInsights",
                  "value": "AppInsights",
                  "description": "Application Insights"
                },
                {
                  "name": "Custom",
                  "value": "CustomKeys",
                  "description": "Custom Keys"
                }
              ]
            }
          },
          {
            "name": "defaultConnection",
            "in": "query",
            "description": "List connections that are default connections",
            "required": false,
            "type": "boolean"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedConnection"
            },
            "headers": {
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Connections_List_MaximumSet": {
            "$ref": "./examples/Connections_List_MaximumSet_Gen.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/connections/{name}": {
      "get": {
        "operationId": "Connections_Get",
        "description": "Get a connection by name, without populating connection credentials",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The friendly name of the connection, provided by the user.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Connection"
            },
            "headers": {
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Connections_Get_MaximumSet": {
            "$ref": "./examples/Connections_Get_MaximumSet_Gen.json"
          }
        }
      }
    },
    "/connections/{name}/getConnectionWithCredentials": {
      "post": {
        "operationId": "Connections_GetWithCredentials",
        "description": "Get a connection by name, with its connection credentials",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The friendly name of the connection, provided by the user.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Connection"
            },
            "headers": {
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Connections_GetWithCredentials_MaximumSet": {
            "$ref": "./examples/Connections_GetWithCredentials_MaximumSet_Gen.json"
          }
        }
      }
    },
    "/datasets": {
      "get": {
        "operationId": "Datasets_ListLatest",
        "description": "List the latest version of each DatasetVersion",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedDatasetVersion"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Datasets_ListLatest_MaximumSet": {
            "$ref": "./examples/Datasets_ListLatest_MaximumSet_Gen.json"
          },
          "Datasets_ListLatest_MinimumSet": {
            "$ref": "./examples/Datasets_ListLatest_MinimumSet_Gen.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/datasets/{name}/versions": {
      "get": {
        "operationId": "Datasets_ListVersions",
        "description": "List all versions of the given DatasetVersion",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedDatasetVersion"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Datasets_ListVersions_MaximumSet": {
            "$ref": "./examples/Datasets_ListVersions_MaximumSet_Gen.json"
          },
          "Datasets_ListVersions_MinimumSet": {
            "$ref": "./examples/Datasets_ListVersions_MinimumSet_Gen.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/datasets/{name}/versions/{version}": {
      "get": {
        "operationId": "Datasets_GetVersion",
        "description": "Get the specific version of the DatasetVersion. The service returns 404 Not Found error if the DatasetVersion does not exist.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the resource",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The specific version id of the DatasetVersion to retrieve.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/DatasetVersion"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Datasets_GetVersion_MaximumSet": {
            "$ref": "./examples/Datasets_GetVersion_MaximumSet_Gen.json"
          },
          "Datasets_GetVersion_MinimumSet": {
            "$ref": "./examples/Datasets_GetVersion_MinimumSet_Gen.json"
          }
        }
      },
      "patch": {
        "operationId": "Datasets_CreateOrUpdateVersion",
        "description": "Create a new or update an existing DatasetVersion with the given version id",
        "consumes": [
          "application/merge-patch+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the resource",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The specific version id of the DatasetVersion to create or update.",
            "required": true,
            "type": "string"
          },
          {
            "name": "datasetVersion",
            "in": "body",
            "description": "The DatasetVersion to create or update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DatasetVersion"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/DatasetVersion"
            }
          },
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "schema": {
              "$ref": "#/definitions/DatasetVersion"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Datasets_CreateOrUpdateVersion_MaximumSet": {
            "$ref": "./examples/Datasets_CreateOrUpdateVersion_MaximumSet_Gen.json"
          },
          "Datasets_CreateOrUpdateVersion_MinimumSet": {
            "$ref": "./examples/Datasets_CreateOrUpdateVersion_MinimumSet_Gen.json"
          }
        }
      },
      "delete": {
        "operationId": "Datasets_DeleteVersion",
        "description": "Delete the specific version of the DatasetVersion. The service returns 204 No Content if the DatasetVersion was deleted successfully or if the DatasetVersion does not exist.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the resource",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The version of the DatasetVersion to delete.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Datasets_DeleteVersion_MaximumSet": {
            "$ref": "./examples/Datasets_DeleteVersion_MaximumSet_Gen.json"
          },
          "Datasets_DeleteVersion_MinimumSet": {
            "$ref": "./examples/Datasets_DeleteVersion_MinimumSet_Gen.json"
          }
        }
      }
    },
    "/datasets/{name}/versions/{version}/credentials": {
      "post": {
        "operationId": "Datasets_GetCredentials",
        "description": "Get the SAS credential to access the storage account associated with a Dataset version.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the resource",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The specific version id of the DatasetVersion to operate on.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/AssetCredentialResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Datasets_GetCredentials_MaximumSet": {
            "$ref": "./examples/Datasets_GetCredentials_MaximumSet_Gen.json"
          },
          "Datasets_GetCredentials_MinimumSet": {
            "$ref": "./examples/Datasets_GetCredentials_MinimumSet_Gen.json"
          }
        }
      }
    },
    "/datasets/{name}/versions/{version}/startPendingUpload": {
      "post": {
        "operationId": "Datasets_StartPendingUploadVersion",
        "description": "Start a new or get an existing pending upload of a dataset for a specific version.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the resource",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The specific version id of the DatasetVersion to operate on.",
            "required": true,
            "type": "string"
          },
          {
            "name": "pendingUploadRequest",
            "in": "body",
            "description": "The pending upload request parameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PendingUploadRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PendingUploadResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Datasets_StartPendingUploadVersion_MaximumSet": {
            "$ref": "./examples/Datasets_StartPendingUploadVersion_MaximumSet_Gen.json"
          },
          "Datasets_StartPendingUploadVersion_MinimumSet": {
            "$ref": "./examples/Datasets_StartPendingUploadVersion_MinimumSet_Gen.json"
          }
        }
      }
    },
    "/deployments": {
      "get": {
        "operationId": "Deployments_List",
        "description": "List all deployed models in the project",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "modelPublisher",
            "in": "query",
            "description": "Model publisher to filter models by",
            "required": false,
            "type": "string"
          },
          {
            "name": "modelName",
            "in": "query",
            "description": "Model name (the publisher specific name) to filter models by",
            "required": false,
            "type": "string"
          },
          {
            "name": "deploymentType",
            "in": "query",
            "description": "Type of deployment to filter list by",
            "required": false,
            "type": "string",
            "enum": [
              "ModelDeployment"
            ],
            "x-ms-enum": {
              "name": "DeploymentType",
              "modelAsString": true,
              "values": [
                {
                  "name": "ModelDeployment",
                  "value": "ModelDeployment",
                  "description": "Model deployment"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedDeployment"
            },
            "headers": {
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Deployments_List_MaximumSet": {
            "$ref": "./examples/Deployments_List_MaximumSet_Gen.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/deployments/{name}": {
      "get": {
        "operationId": "Deployments_Get",
        "description": "Get a deployed model.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the deployment",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Deployment"
            },
            "headers": {
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Deployments_Get_MaximumSet": {
            "$ref": "./examples/Deployments_Get_MaximumSet_Gen.json"
          }
        }
      }
    },
    "/evaluations/runs": {
      "get": {
        "operationId": "Evaluations_List",
        "description": "List evaluation runs",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedEvaluation"
            },
            "headers": {
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Evaluations_List_MaximumSet": {
            "$ref": "./examples/Evaluations_List_MaximumSet_Gen.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/evaluations/runs/{name}": {
      "get": {
        "operationId": "Evaluations_Get",
        "description": "Get an evaluation run by name.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Identifier of the evaluation.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Evaluation"
            },
            "headers": {
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Evaluations_Get_MaximumSet": {
            "$ref": "./examples/Evaluations_Get_MaximumSet_Gen.json"
          }
        }
      },
      "delete": {
        "operationId": "Evaluations_Delete",
        "description": "Delete an evaluation run by name",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Identifier of the evaluation.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. ",
            "headers": {
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Evaluations_Delete_MaximumSet": {
            "$ref": "./examples/Evaluations_Delete_MaximumSet_Gen.json"
          }
        }
      }
    },
    "/evaluations/runs/{name}:cancel": {
      "post": {
        "operationId": "Evaluations_Cancel",
        "description": "Cancel an evaluation run by name",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Identifier of the evaluation.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. ",
            "headers": {
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Evaluations_Cancel_MaximumSet": {
            "$ref": "./examples/Evaluations_Cancel_MaximumSet_Gen.json"
          }
        }
      }
    },
    "/evaluations/runs:run": {
      "post": {
        "operationId": "Evaluations_Create",
        "description": "Creates an evaluation run.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "evaluation",
            "in": "body",
            "description": "Evaluation to be run",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Evaluation"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "schema": {
              "$ref": "#/definitions/Evaluation"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Evaluations_Create_MaximumSet": {
            "$ref": "./examples/Evaluations_Create_MaximumSet_Gen.json"
          },
          "Evaluations_Create_MinimumSet": {
            "$ref": "./examples/Evaluations_Create_MinimumSet_Gen.json"
          }
        }
      }
    },
    "/evaluations/runs:runAgent": {
      "post": {
        "operationId": "Evaluations_CreateAgentEvaluation",
        "description": "Creates an agent evaluation run.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "evaluation",
            "in": "body",
            "description": "Agent evaluation to be run",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AgentEvaluationRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "schema": {
              "$ref": "#/definitions/AgentEvaluation"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Evaluations_CreateAgentEvaluation_MaximumSet": {
            "$ref": "./examples/Evaluations_CreateAgentEvaluation_MaximumSet_Gen.json"
          },
          "Evaluations_CreateAgentEvaluation_MinimumSet": {
            "$ref": "./examples/Evaluations_CreateAgentEvaluation_MinimumSet_Gen.json"
          }
        }
      }
    },
    "/indexes": {
      "get": {
        "operationId": "Indexes_ListLatest",
        "description": "List the latest version of each Index",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedIndex"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Indexes_ListLatest_MaximumSet": {
            "$ref": "./examples/Indexes_ListLatest_MaximumSet_Gen.json"
          },
          "Indexes_ListLatest_MinimumSet": {
            "$ref": "./examples/Indexes_ListLatest_MinimumSet_Gen.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/indexes/{name}/versions": {
      "get": {
        "operationId": "Indexes_ListVersions",
        "description": "List all versions of the given Index",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedIndex"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Indexes_ListVersions_MaximumSet": {
            "$ref": "./examples/Indexes_ListVersions_MaximumSet_Gen.json"
          },
          "Indexes_ListVersions_MinimumSet": {
            "$ref": "./examples/Indexes_ListVersions_MinimumSet_Gen.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/indexes/{name}/versions/{version}": {
      "get": {
        "operationId": "Indexes_GetVersion",
        "description": "Get the specific version of the Index. The service returns 404 Not Found error if the Index does not exist.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the resource",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The specific version id of the Index to retrieve.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Index"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Indexes_GetVersion_MaximumSet": {
            "$ref": "./examples/Indexes_GetVersion_MaximumSet_Gen.json"
          },
          "Indexes_GetVersion_MinimumSet": {
            "$ref": "./examples/Indexes_GetVersion_MinimumSet_Gen.json"
          }
        }
      },
      "patch": {
        "operationId": "Indexes_CreateOrUpdateVersion",
        "description": "Create a new or update an existing Index with the given version id",
        "consumes": [
          "application/merge-patch+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the resource",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The specific version id of the Index to create or update.",
            "required": true,
            "type": "string"
          },
          {
            "name": "index",
            "in": "body",
            "description": "The Index to create or update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Index"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Index"
            }
          },
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "schema": {
              "$ref": "#/definitions/Index"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Indexes_CreateOrUpdateVersion_MaximumSet": {
            "$ref": "./examples/Indexes_CreateOrUpdateVersion_MaximumSet_Gen.json"
          },
          "Indexes_CreateOrUpdateVersion_MinimumSet": {
            "$ref": "./examples/Indexes_CreateOrUpdateVersion_MinimumSet_Gen.json"
          }
        }
      },
      "delete": {
        "operationId": "Indexes_DeleteVersion",
        "description": "Delete the specific version of the Index. The service returns 204 No Content if the Index was deleted successfully or if the Index does not exist.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the resource",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The version of the Index to delete.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Indexes_DeleteVersion_MaximumSet": {
            "$ref": "./examples/Indexes_DeleteVersion_MaximumSet_Gen.json"
          },
          "Indexes_DeleteVersion_MinimumSet": {
            "$ref": "./examples/Indexes_DeleteVersion_MinimumSet_Gen.json"
          }
        }
      }
    },
    "/openai/evals": {
      "get": {
        "operationId": "listEvals",
        "tags": [
          "Evals"
        ],
        "summary": "List evaluations for a project.",
        "parameters": [
          {
            "name": "after",
            "in": "query",
            "description": "Identifier for the last eval from the previous pagination request.",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "A limit on the number of evals to be returned in a single pagination response.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 20
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order for evals by timestamp. Use `asc` for ascending order or\n`desc` for descending order.",
            "required": false,
            "type": "string",
            "default": "asc",
            "enum": [
              "asc",
              "desc"
            ],
            "x-ms-enum": {
              "modelAsString": false
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Evals can be ordered by creation time or last updated time. Use\n`created_at` for creation time or `updated_at` for last updated\ntime.",
            "required": false,
            "type": "string",
            "default": "created_at",
            "enum": [
              "created_at",
              "updated_at"
            ],
            "x-ms-enum": {
              "modelAsString": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/OpenAI.EvalList"
            }
          }
        }
      },
      "post": {
        "operationId": "createEval",
        "tags": [
          "Evals"
        ],
        "description": "Create the structure of an evaluation that can be used to test a model's\nperformance.\n\nAn evaluation is a set of testing criteria and a datasource. After\ncreating an evaluation, you can run it on different models and model\nparameters. We support several types of graders and datasources.\n\nFor more information, see the [Evals guide](/docs/guides/evals).",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OpenAI.CreateEvalRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "schema": {
              "$ref": "#/definitions/OpenAI.Eval"
            }
          },
          "400": {
            "description": "The server could not understand the request due to invalid syntax.",
            "schema": {
              "$ref": "#/definitions/OpenAI.Error"
            },
            "x-ms-error-response": true
          }
        }
      }
    },
    "/openai/evals/{eval_id}": {
      "get": {
        "operationId": "getEval",
        "tags": [
          "Evals"
        ],
        "summary": "Retrieve an evaluation by its ID.",
        "parameters": [
          {
            "name": "eval_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/OpenAI.Eval"
            }
          },
          "400": {
            "description": "The server could not understand the request due to invalid syntax.",
            "schema": {
              "$ref": "#/definitions/OpenAI.Error"
            },
            "x-ms-error-response": true
          }
        }
      },
      "post": {
        "operationId": "updateEval",
        "tags": [
          "Evals"
        ],
        "description": "Update select, mutable properties of a specified evaluation.",
        "parameters": [
          {
            "name": "eval_id",
            "in": "path",
            "description": "The ID of the evaluation to update.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "metadata": {
                  "$ref": "#/definitions/OpenAI.MetadataPropertyForRequest"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/OpenAI.Eval"
            }
          },
          "400": {
            "description": "The server could not understand the request due to invalid syntax.",
            "schema": {
              "$ref": "#/definitions/OpenAI.Error"
            },
            "x-ms-error-response": true
          }
        }
      },
      "delete": {
        "operationId": "deleteEval",
        "tags": [
          "Evals"
        ],
        "description": "Delete a specified evaluation.",
        "parameters": [
          {
            "name": "eval_id",
            "in": "path",
            "description": "The ID of the evaluation to delete.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "object",
              "properties": {
                "object": {
                  "type": "string",
                  "enum": [
                    "eval.deleted"
                  ],
                  "x-ms-enum": {
                    "modelAsString": false
                  }
                },
                "deleted": {
                  "type": "boolean"
                },
                "eval_id": {
                  "type": "string"
                }
              },
              "required": [
                "object",
                "deleted",
                "eval_id"
              ]
            }
          },
          "400": {
            "description": "The server could not understand the request due to invalid syntax.",
            "schema": {
              "$ref": "#/definitions/OpenAI.Error"
            },
            "x-ms-error-response": true
          }
        }
      }
    },
    "/openai/evals/{eval_id}/runs": {
      "get": {
        "operationId": "getEvalRuns",
        "tags": [
          "Evals"
        ],
        "summary": "",
        "description": "Retrieve a list of runs for a specified evaluation.",
        "parameters": [
          {
            "name": "eval_id",
            "in": "path",
            "description": "The ID of the evaluation to retrieve runs for.",
            "required": true,
            "type": "string"
          },
          {
            "name": "after",
            "in": "query",
            "description": "Identifier for the last run from the previous pagination request.",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "A limit on the number of runs to be returned in a single pagination response.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 20
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order for runs by timestamp. Use `asc` for ascending order or `desc` for descending order.",
            "required": false,
            "type": "string",
            "default": "asc",
            "enum": [
              "asc",
              "desc"
            ],
            "x-ms-enum": {
              "modelAsString": false
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter runs by their status. Possible values are `queued`, `in_progress`, `completed`, `canceled`, and `failed`.",
            "required": false,
            "type": "string",
            "enum": [
              "queued",
              "in_progress",
              "completed",
              "canceled",
              "failed"
            ],
            "x-ms-enum": {
              "modelAsString": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/OpenAI.EvalRunList"
            }
          },
          "400": {
            "description": "The server could not understand the request due to invalid syntax.",
            "schema": {
              "$ref": "#/definitions/OpenAI.Error"
            },
            "x-ms-error-response": true
          }
        }
      },
      "post": {
        "operationId": "createEvalRun",
        "tags": [
          "Evals"
        ],
        "description": "Create a new evaluation run, beginning the grading process.",
        "parameters": [
          {
            "name": "eval_id",
            "in": "path",
            "description": "The ID of the evaluation to run.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OpenAI.CreateEvalRunRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "schema": {
              "$ref": "#/definitions/OpenAI.EvalRun"
            }
          },
          "400": {
            "description": "The server could not understand the request due to invalid syntax.",
            "schema": {
              "$ref": "#/definitions/OpenAI.Error"
            },
            "x-ms-error-response": true
          }
        }
      }
    },
    "/openai/evals/{eval_id}/runs/{run_id}": {
      "get": {
        "operationId": "getEvalRun",
        "tags": [
          "Evals"
        ],
        "description": "Retrieve a specific evaluation run by its ID.",
        "parameters": [
          {
            "name": "eval_id",
            "in": "path",
            "description": "The ID of the evaluation the run belongs to.",
            "required": true,
            "type": "string"
          },
          {
            "name": "run_id",
            "in": "path",
            "description": "The ID of the evaluation run to retrieve.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/OpenAI.EvalRun"
            }
          },
          "400": {
            "description": "The server could not understand the request due to invalid syntax.",
            "schema": {
              "$ref": "#/definitions/OpenAI.Error"
            },
            "x-ms-error-response": true
          }
        }
      },
      "post": {
        "operationId": "cancelEvalRun",
        "tags": [
          "Evals"
        ],
        "description": "Cancel a specific evaluation run by its ID.",
        "parameters": [
          {
            "name": "eval_id",
            "in": "path",
            "description": "The ID of the evaluation the run belongs to.",
            "required": true,
            "type": "string"
          },
          {
            "name": "run_id",
            "in": "path",
            "description": "The ID of the evaluation run to cancel.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/OpenAI.EvalRun"
            }
          },
          "400": {
            "description": "The server could not understand the request due to invalid syntax.",
            "schema": {
              "$ref": "#/definitions/OpenAI.Error"
            },
            "x-ms-error-response": true
          }
        }
      },
      "delete": {
        "operationId": "deleteEvalRun",
        "tags": [
          "Evals"
        ],
        "description": "Delete a specific evaluation run by its ID.",
        "parameters": [
          {
            "name": "eval_id",
            "in": "path",
            "description": "The ID of the evaluation the run belongs to.",
            "required": true,
            "type": "string"
          },
          {
            "name": "run_id",
            "in": "path",
            "description": "The ID of the evaluation run to delete.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "object",
              "properties": {
                "object": {
                  "type": "string",
                  "enum": [
                    "eval_run.deleted"
                  ],
                  "x-ms-enum": {
                    "modelAsString": false
                  }
                },
                "deleted": {
                  "type": "boolean"
                },
                "eval_run_id": {
                  "type": "string"
                }
              },
              "required": [
                "object",
                "deleted",
                "eval_run_id"
              ]
            }
          },
          "404": {
            "description": "The server cannot find the requested resource.",
            "schema": {
              "$ref": "#/definitions/OpenAI.Error"
            },
            "x-ms-error-response": true
          }
        }
      }
    },
    "/openai/evals/{eval_id}/runs/{run_id}/output_items": {
      "get": {
        "operationId": "getEvalRunOutputItems",
        "tags": [
          "Evals"
        ],
        "description": "Get a list of output items for a specified evaluation run.",
        "parameters": [
          {
            "name": "eval_id",
            "in": "path",
            "description": "The ID of the evaluation the run belongs to.",
            "required": true,
            "type": "string"
          },
          {
            "name": "run_id",
            "in": "path",
            "description": "The ID of the evaluation run to retrieve output items for.",
            "required": true,
            "type": "string"
          },
          {
            "name": "after",
            "in": "query",
            "description": "Identifier for the last output item from the previous pagination request.",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "A limit on the number of output items to be returned in a single pagination response.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 20
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter output items by their status. Possible values are `fail` and `pass`.",
            "required": false,
            "type": "string",
            "enum": [
              "fail",
              "pass"
            ],
            "x-ms-enum": {
              "modelAsString": false
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order for output items by timestamp. Use `asc` for ascending order or `desc` for descending order.",
            "required": false,
            "type": "string",
            "default": "asc",
            "enum": [
              "asc",
              "desc"
            ],
            "x-ms-enum": {
              "modelAsString": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/OpenAI.EvalRunOutputItemList"
            }
          },
          "400": {
            "description": "The server could not understand the request due to invalid syntax.",
            "schema": {
              "$ref": "#/definitions/OpenAI.Error"
            },
            "x-ms-error-response": true
          }
        }
      }
    },
    "/openai/evals/{eval_id}/runs/{run_id}/output_items/{output_item_id}": {
      "get": {
        "operationId": "getEvalRunOutputItem",
        "tags": [
          "Evals"
        ],
        "description": "Retrieve a specific output item from an evaluation run by its ID.",
        "parameters": [
          {
            "name": "eval_id",
            "in": "path",
            "description": "The ID of the evaluation the run belongs to.",
            "required": true,
            "type": "string"
          },
          {
            "name": "run_id",
            "in": "path",
            "description": "The ID of the evaluation run the output item belongs to.",
            "required": true,
            "type": "string"
          },
          {
            "name": "output_item_id",
            "in": "path",
            "description": "The ID of the output item to retrieve.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/OpenAI.EvalRunOutputItem"
            }
          }
        }
      }
    },
    "/redTeams/runs": {
      "get": {
        "operationId": "RedTeams_List",
        "description": "List a redteam by name.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedRedTeam"
            },
            "headers": {
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "RedTeams_List_MaximumSet": {
            "$ref": "./examples/RedTeams_List_MaximumSet_Gen.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/redTeams/runs/{name}": {
      "get": {
        "operationId": "RedTeams_Get",
        "description": "Get a redteam by name.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Identifier of the red team run.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/RedTeam"
            },
            "headers": {
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "RedTeams_Get_MaximumSet": {
            "$ref": "./examples/RedTeams_Get_MaximumSet_Gen.json"
          }
        }
      }
    },
    "/redTeams/runs:run": {
      "post": {
        "operationId": "RedTeams_Create",
        "description": "Creates a redteam run.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "RedTeam",
            "in": "body",
            "description": "Redteam to be run",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RedTeam"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "schema": {
              "$ref": "#/definitions/RedTeam"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "RedTeams_Create_MaximumSet": {
            "$ref": "./examples/RedTeams_Create_MaximumSet_Gen.json"
          },
          "RedTeams_Create_MinimumSet": {
            "$ref": "./examples/RedTeams_Create_MinimumSet_Gen.json"
          }
        }
      }
    }
  },
  "definitions": {
    "AgentEvaluation": {
      "type": "object",
      "description": "Evaluation response for agent evaluation run.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier of the agent evaluation run."
        },
        "status": {
          "type": "string",
          "description": "Status of the agent evaluation. Options: Running, Completed, Failed."
        },
        "error": {
          "type": "string",
          "description": "The reason of the request failure for the long running process, if applicable."
        },
        "result": {
          "type": "array",
          "description": "The agent evaluation result.",
          "items": {
            "$ref": "#/definitions/AgentEvaluationResult"
          }
        }
      },
      "required": [
        "id",
        "status"
      ]
    },
    "AgentEvaluationRedactionConfiguration": {
      "type": "object",
      "description": "The redaction configuration will allow the user to control what is redacted.",
      "properties": {
        "redactScoreProperties": {
          "type": "boolean",
          "description": "Redact score properties. If not specified, the default is to redact in production."
        }
      }
    },
    "AgentEvaluationRequest": {
      "type": "object",
      "description": "Evaluation request for agent run.",
      "properties": {
        "runId": {
          "type": "string",
          "description": "Identifier of the agent run."
        },
        "threadId": {
          "type": "string",
          "description": "Identifier of the agent thread. This field is mandatory currently, but it will be optional in the future."
        },
        "evaluators": {
          "type": "object",
          "description": "Evaluators to be used for the evaluation.",
          "additionalProperties": {
            "$ref": "#/definitions/EvaluatorConfiguration"
          }
        },
        "samplingConfiguration": {
          "$ref": "#/definitions/AgentEvaluationSamplingConfiguration",
          "description": "Sampling configuration for the evaluation."
        },
        "redactionConfiguration": {
          "$ref": "#/definitions/AgentEvaluationRedactionConfiguration",
          "description": "Redaction configuration for the evaluation."
        },
        "appInsightsConnectionString": {
          "type": "string",
          "description": "Pass the AppInsights connection string to the agent evaluation for the evaluation results and the errors logs."
        }
      },
      "required": [
        "runId",
        "evaluators",
        "appInsightsConnectionString"
      ]
    },
    "AgentEvaluationResult": {
      "type": "object",
      "description": "Result for the agent evaluation evaluator run.",
      "properties": {
        "evaluator": {
          "type": "string",
          "description": "Evaluator's name. This is the name of the evaluator that was used to evaluate the agent's completion."
        },
        "evaluatorId": {
          "type": "string",
          "description": "Identifier of the evaluator."
        },
        "score": {
          "type": "number",
          "format": "float",
          "description": "Score of the given evaluator. No restriction on range."
        },
        "status": {
          "type": "string",
          "description": "Status of the evaluator result. Options: Running, Completed, Failed, NotApplicable."
        },
        "reason": {
          "type": "string",
          "description": "Reasoning for the evaluation result."
        },
        "version": {
          "type": "string",
          "description": "Version of the evaluator that was used to evaluate the agent's completion."
        },
        "threadId": {
          "type": "string",
          "description": "The unique identifier of the thread."
        },
        "runId": {
          "type": "string",
          "description": "The unique identifier of the run."
        },
        "error": {
          "type": "string",
          "description": "A string explaining why there was an error, if applicable."
        },
        "additionalDetails": {
          "type": "object",
          "description": "Additional properties relevant to the evaluator. These will differ between evaluators.",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "evaluator",
        "evaluatorId",
        "score",
        "status",
        "runId"
      ]
    },
    "AgentEvaluationSamplingConfiguration": {
      "type": "object",
      "description": "Definition for sampling strategy.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the sampling strategy."
        },
        "samplingPercent": {
          "type": "number",
          "format": "float",
          "description": "Percentage of sampling per hour (0-100)."
        },
        "maxRequestRate": {
          "type": "number",
          "format": "float",
          "description": "Maximum request rate per hour (0 to 1000)."
        }
      },
      "required": [
        "name",
        "samplingPercent",
        "maxRequestRate"
      ]
    },
    "ApiKeyCredentials": {
      "type": "object",
      "description": "API Key Credential definition",
      "properties": {
        "key": {
          "type": "string",
          "description": "API Key",
          "readOnly": true,
          "x-ms-client-name": "apiKey"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/BaseCredentials"
        }
      ],
      "x-ms-discriminator-value": "ApiKey"
    },
    "AssetCredentialResponse": {
      "type": "object",
      "description": "Represents a reference to a blob for consumption",
      "properties": {
        "blobReference": {
          "$ref": "#/definitions/BlobReference",
          "description": "Credential info to access the storage account."
        }
      },
      "required": [
        "blobReference"
      ]
    },
    "AssistantMessage": {
      "type": "object",
      "description": "A message generated by the assistant in response to previous messages.",
      "properties": {
        "content": {
          "type": "string",
          "description": "Response content generated by the assistant."
        }
      },
      "required": [
        "content"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        }
      ],
      "x-ms-discriminator-value": "assistant"
    },
    "AttackStrategy": {
      "type": "string",
      "description": "Strategies for attacks.",
      "enum": [
        "easy",
        "moderate",
        "difficult",
        "ascii_art",
        "ascii_smuggler",
        "atbash",
        "base64",
        "binary",
        "caesar",
        "character_space",
        "jailbreak",
        "ansii_attack",
        "character_swap",
        "suffix_append",
        "string_join",
        "unicode_confusable",
        "unicode_substitution",
        "diacritic",
        "flip",
        "leetspeak",
        "rot13",
        "morse",
        "url",
        "baseline"
      ],
      "x-ms-enum": {
        "name": "AttackStrategy",
        "modelAsString": true,
        "values": [
          {
            "name": "Easy",
            "value": "easy",
            "description": "Represents a default set of easy complexity attacks. Easy complexity attacks require less effort, such as translation of a prompt into some encoding, and does not require any Large Language Model to convert or orchestrate."
          },
          {
            "name": "Moderate",
            "value": "moderate",
            "description": "Represents a default set of moderate complexity attacks. Moderate complexity attacks require having access to resources such as another generative AI model."
          },
          {
            "name": "Difficult",
            "value": "difficult",
            "description": "Represents a default set of difficult complexity attacks. Difficult complexity attacks include attacks that require access to significant resources and effort to execute an attack such as knowledge of search-based algorithms in addition to a generative AI model."
          },
          {
            "name": "AsciiArt",
            "value": "ascii_art",
            "description": "Generates visual art using ASCII characters, often used for creative or obfuscation purposes."
          },
          {
            "name": "AsciiSmuggler",
            "value": "ascii_smuggler",
            "description": "Conceals data within ASCII characters, making it harder to detect."
          },
          {
            "name": "Atbash",
            "value": "atbash",
            "description": "Implements the Atbash cipher, a simple substitution cipher where each letter is mapped to its reverse."
          },
          {
            "name": "Base64",
            "value": "base64",
            "description": "Encodes binary data into a text format using Base64, commonly used for data transmission."
          },
          {
            "name": "Binary",
            "value": "binary",
            "description": "Converts text into binary code, representing data in a series of 0s and 1s."
          },
          {
            "name": "Caesar",
            "value": "caesar",
            "description": "Applies the Caesar cipher, a substitution cipher that shifts characters by a fixed number of positions."
          },
          {
            "name": "CharacterSpace",
            "value": "character_space",
            "description": "Alters text by adding spaces between characters, often used for obfuscation."
          },
          {
            "name": "Jailbreak",
            "value": "jailbreak",
            "description": "Injects specially crafted prompts to bypass AI safeguards, known as User Injected Prompt Attacks (UPIA)."
          },
          {
            "name": "AnsiiAttack",
            "value": "ansii_attack",
            "description": "Utilizes ANSI escape sequences to manipulate text appearance and behavior."
          },
          {
            "name": "CharacterSwap",
            "value": "character_swap",
            "description": "Swaps characters within text to create variations or obfuscate the original content."
          },
          {
            "name": "SuffixAppend",
            "value": "suffix_append",
            "description": "Appends an adversarial suffix to the prompt."
          },
          {
            "name": "StringJoin",
            "value": "string_join",
            "description": "Joins multiple strings together, often used for concatenation or obfuscation."
          },
          {
            "name": "UnicodeConfusable",
            "value": "unicode_confusable",
            "description": "Uses Unicode characters that look similar to standard characters, creating visual confusion."
          },
          {
            "name": "UnicodeSubstitution",
            "value": "unicode_substitution",
            "description": "Substitutes standard characters with Unicode equivalents, often for obfuscation."
          },
          {
            "name": "Diacritic",
            "value": "diacritic",
            "description": "Adds diacritical marks to characters, changing their appearance and sometimes their meaning."
          },
          {
            "name": "Flip",
            "value": "flip",
            "description": "Flips characters from front to back, creating a mirrored effect."
          },
          {
            "name": "Leetspeak",
            "value": "leetspeak",
            "description": "Transforms text into Leetspeak, a form of encoding that replaces letters with similar-looking numbers or symbols."
          },
          {
            "name": "ROT13",
            "value": "rot13",
            "description": "Applies the ROT13 cipher, a simple substitution cipher that shifts characters by 13 positions."
          },
          {
            "name": "Morse",
            "value": "morse",
            "description": "Encodes text into Morse code, using dots and dashes to represent characters."
          },
          {
            "name": "Url",
            "value": "url",
            "description": "Encodes text into URL format."
          },
          {
            "name": "Baseline",
            "value": "baseline",
            "description": "Represents the baseline direct adversarial probing, which is used by attack strategies as the attack objective."
          }
        ]
      }
    },
    "Azure.Core.Foundations.Error": {
      "type": "object",
      "description": "The error object.",
      "properties": {
        "code": {
          "type": "string",
          "description": "One of a server-defined set of error codes."
        },
        "message": {
          "type": "string",
          "description": "A human-readable representation of the error."
        },
        "target": {
          "type": "string",
          "description": "The target of the error."
        },
        "details": {
          "type": "array",
          "description": "An array of details about specific errors that led to this reported error.",
          "items": {
            "$ref": "#/definitions/Azure.Core.Foundations.Error"
          }
        },
        "innererror": {
          "$ref": "#/definitions/Azure.Core.Foundations.InnerError",
          "description": "An object containing more specific information than the current object about the error."
        }
      },
      "required": [
        "code",
        "message"
      ]
    },
    "Azure.Core.Foundations.ErrorResponse": {
      "type": "object",
      "description": "A response containing error details.",
      "properties": {
        "error": {
          "$ref": "#/definitions/Azure.Core.Foundations.Error",
          "description": "The error object."
        }
      },
      "required": [
        "error"
      ]
    },
    "Azure.Core.Foundations.InnerError": {
      "type": "object",
      "description": "An object containing more specific information about the error. As per Azure REST API guidelines - https://aka.ms/AzureRestApiGuidelines#handling-errors.",
      "properties": {
        "code": {
          "type": "string",
          "description": "One of a server-defined set of error codes."
        },
        "innererror": {
          "$ref": "#/definitions/Azure.Core.Foundations.InnerError",
          "description": "Inner error."
        }
      }
    },
    "AzureAIEvaluator": {
      "type": "object",
      "title": "AzureAIEvaluator",
      "properties": {
        "type": {
          "type": "string",
          "description": "The object type, which is always `label_model`.",
          "enum": [
            "azure_ai_evaluator"
          ],
          "x-ms-enum": {
            "modelAsString": false
          },
          "x-stainless-const": true
        },
        "evaluator_name": {
          "type": "string",
          "description": "The name of the evaluator."
        },
        "version": {
          "type": "string",
          "description": "Optional version of the evaluator."
        }
      },
      "required": [
        "type",
        "evaluator_name"
      ]
    },
    "AzureAISearchIndex": {
      "type": "object",
      "description": "Azure AI Search Index Definition",
      "properties": {
        "connectionName": {
          "type": "string",
          "description": "Name of connection to Azure AI Search",
          "x-ms-mutability": [
            "create"
          ]
        },
        "indexName": {
          "type": "string",
          "description": "Name of index in Azure AI Search resource to attach",
          "x-ms-mutability": [
            "create"
          ]
        },
        "fieldMapping": {
          "$ref": "#/definitions/FieldMapping",
          "description": "Field mapping configuration",
          "x-ms-mutability": [
            "create"
          ]
        }
      },
      "required": [
        "connectionName",
        "indexName"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Index"
        }
      ],
      "x-ms-discriminator-value": "AzureSearch"
    },
    "AzureOpenAIModelConfiguration": {
      "type": "object",
      "description": "Azure OpenAI model configuration. The API version would be selected by the service for querying the model.",
      "properties": {
        "modelDeploymentName": {
          "type": "string",
          "description": "Deployment name for AOAI model. Example: gpt-4o if in AIServices or connection based `connection_name/deployment_name` (e.g. `my-aoai-connection/gpt-4o`)."
        }
      },
      "required": [
        "modelDeploymentName"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/TargetConfig"
        }
      ],
      "x-ms-discriminator-value": "AzureOpenAIModel"
    },
    "BaseCredentials": {
      "type": "object",
      "description": "A base class for connection credentials",
      "properties": {
        "type": {
          "$ref": "#/definitions/CredentialType",
          "description": "The type of credential used by the connection",
          "readOnly": true
        }
      },
      "discriminator": "type",
      "required": [
        "type"
      ]
    },
    "BlobReference": {
      "type": "object",
      "description": "Blob reference details.",
      "properties": {
        "blobUri": {
          "type": "string",
          "description": "Blob URI path for client to upload data. Example: https://blob.windows.core.net/Container/Path"
        },
        "storageAccountArmId": {
          "type": "string",
          "description": "ARM ID of the storage account to use."
        },
        "credential": {
          "$ref": "#/definitions/SasCredential",
          "description": "Credential info to access the storage account."
        }
      },
      "required": [
        "blobUri",
        "storageAccountArmId",
        "credential"
      ]
    },
    "Connection": {
      "type": "object",
      "description": "Response from the list and get connections operations",
      "properties": {
        "name": {
          "type": "string",
          "description": "The friendly name of the connection, provided by the user.",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "description": "A unique identifier for the connection, generated by the service",
          "readOnly": true
        },
        "type": {
          "$ref": "#/definitions/ConnectionType",
          "description": "Category of the connection",
          "readOnly": true
        },
        "target": {
          "type": "string",
          "description": "The connection URL to be used for this service",
          "readOnly": true
        },
        "isDefault": {
          "type": "boolean",
          "description": "Whether the connection is tagged as the default connection of its type",
          "readOnly": true
        },
        "credentials": {
          "$ref": "#/definitions/BaseCredentials",
          "description": "The credentials used by the connection",
          "readOnly": true
        },
        "metadata": {
          "type": "object",
          "description": "Metadata of the connection",
          "additionalProperties": {
            "type": "string"
          },
          "readOnly": true
        }
      },
      "required": [
        "name",
        "id",
        "type",
        "target",
        "isDefault",
        "credentials",
        "metadata"
      ]
    },
    "ConnectionType": {
      "type": "string",
      "description": "The Type (or category) of the connection",
      "enum": [
        "AzureOpenAI",
        "AzureBlob",
        "AzureStorageAccount",
        "CognitiveSearch",
        "CosmosDB",
        "ApiKey",
        "AppConfig",
        "AppInsights",
        "CustomKeys"
      ],
      "x-ms-enum": {
        "name": "ConnectionType",
        "modelAsString": true,
        "values": [
          {
            "name": "AzureOpenAI",
            "value": "AzureOpenAI",
            "description": "Azure OpenAI Service"
          },
          {
            "name": "AzureBlobStorage",
            "value": "AzureBlob",
            "description": "Azure Blob Storage, with specified container"
          },
          {
            "name": "AzureStorageAccount",
            "value": "AzureStorageAccount",
            "description": "Azure Blob Storage, with container not specified (used by Agents)"
          },
          {
            "name": "AzureAISearch",
            "value": "CognitiveSearch",
            "description": "Azure AI Search"
          },
          {
            "name": "CosmosDB",
            "value": "CosmosDB",
            "description": "CosmosDB"
          },
          {
            "name": "APIKey",
            "value": "ApiKey",
            "description": "Generic connection that uses API Key authentication"
          },
          {
            "name": "ApplicationConfiguration",
            "value": "AppConfig",
            "description": "Application Configuration"
          },
          {
            "name": "ApplicationInsights",
            "value": "AppInsights",
            "description": "Application Insights"
          },
          {
            "name": "Custom",
            "value": "CustomKeys",
            "description": "Custom Keys"
          }
        ]
      }
    },
    "CosmosDBIndex": {
      "type": "object",
      "description": "CosmosDB Vector Store Index Definition",
      "properties": {
        "connectionName": {
          "type": "string",
          "description": "Name of connection to CosmosDB",
          "x-ms-mutability": [
            "create"
          ]
        },
        "databaseName": {
          "type": "string",
          "description": "Name of the CosmosDB Database",
          "x-ms-mutability": [
            "create"
          ]
        },
        "containerName": {
          "type": "string",
          "description": "Name of CosmosDB Container",
          "x-ms-mutability": [
            "create"
          ]
        },
        "embeddingConfiguration": {
          "$ref": "#/definitions/EmbeddingConfiguration",
          "description": "Embedding model configuration",
          "x-ms-mutability": [
            "create"
          ]
        },
        "fieldMapping": {
          "$ref": "#/definitions/FieldMapping",
          "description": "Field mapping configuration",
          "x-ms-mutability": [
            "create"
          ]
        }
      },
      "required": [
        "connectionName",
        "databaseName",
        "containerName",
        "embeddingConfiguration",
        "fieldMapping"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Index"
        }
      ],
      "x-ms-discriminator-value": "CosmosDBNoSqlVectorStore"
    },
    "CredentialType": {
      "type": "string",
      "description": "The credential type used by the connection",
      "enum": [
        "ApiKey",
        "AAD",
        "SAS",
        "CustomKeys",
        "None"
      ],
      "x-ms-enum": {
        "name": "CredentialType",
        "modelAsString": true,
        "values": [
          {
            "name": "apiKey",
            "value": "ApiKey",
            "description": "API Key credential"
          },
          {
            "name": "entraId",
            "value": "AAD",
            "description": "Entra ID credential (formerly known as AAD)"
          },
          {
            "name": "SAS",
            "value": "SAS",
            "description": "Shared Access Signature (SAS) credential"
          },
          {
            "name": "custom",
            "value": "CustomKeys",
            "description": "Custom credential"
          },
          {
            "name": "None",
            "value": "None",
            "description": "No credential"
          }
        ]
      }
    },
    "CustomCredential": {
      "type": "object",
      "description": "Custom credential definition",
      "properties": {
        "keys": {
          "type": "object",
          "description": "The credential type",
          "additionalProperties": {
            "type": "string"
          },
          "readOnly": true
        }
      },
      "required": [
        "keys"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/BaseCredentials"
        }
      ],
      "x-ms-discriminator-value": "CustomKeys"
    },
    "DatasetType": {
      "type": "string",
      "description": "Enum to determine the type of data.",
      "enum": [
        "uri_file",
        "uri_folder"
      ],
      "x-ms-enum": {
        "name": "DatasetType",
        "modelAsString": true,
        "values": [
          {
            "name": "uri_file",
            "value": "uri_file",
            "description": "URI file."
          },
          {
            "name": "uri_folder",
            "value": "uri_folder",
            "description": "URI folder."
          }
        ]
      }
    },
    "DatasetVersion": {
      "type": "object",
      "description": "DatasetVersion Definition",
      "properties": {
        "dataUri": {
          "type": "string",
          "description": "URI of the data. Example: https://go.microsoft.com/fwlink/?linkid=2202330",
          "minLength": 1,
          "pattern": "[a-zA-Z0-9_]",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "type": {
          "$ref": "#/definitions/DatasetType",
          "description": "Dataset type"
        },
        "isReference": {
          "type": "boolean",
          "description": "Indicates if the dataset holds a reference to the storage, or the dataset manages storage itself. If true, the underlying data will not be deleted when the dataset version is deleted",
          "readOnly": true
        },
        "connectionName": {
          "type": "string",
          "description": "The Azure Storage Account connection name. Required if startPendingUploadVersion was not called before creating the Dataset",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "id": {
          "type": "string",
          "description": "Asset ID, a unique identifier for the asset",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the resource",
          "readOnly": true
        },
        "version": {
          "type": "string",
          "description": "The version of the resource",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "description": "The asset description text.",
          "x-ms-mutability": [
            "update",
            "create"
          ]
        },
        "tags": {
          "type": "object",
          "description": "Tag dictionary. Tags can be added, removed, and updated.",
          "additionalProperties": {
            "type": "string"
          },
          "x-ms-mutability": [
            "update",
            "create"
          ]
        }
      },
      "discriminator": "type",
      "required": [
        "dataUri",
        "type",
        "name",
        "version"
      ]
    },
    "Deployment": {
      "type": "object",
      "description": "Model Deployment Definition",
      "properties": {
        "type": {
          "$ref": "#/definitions/DeploymentType",
          "description": "The type of the deployment"
        },
        "name": {
          "type": "string",
          "description": "Name of the deployment",
          "readOnly": true
        }
      },
      "discriminator": "type",
      "required": [
        "type",
        "name"
      ]
    },
    "DeploymentType": {
      "type": "string",
      "enum": [
        "ModelDeployment"
      ],
      "x-ms-enum": {
        "name": "DeploymentType",
        "modelAsString": true,
        "values": [
          {
            "name": "ModelDeployment",
            "value": "ModelDeployment",
            "description": "Model deployment"
          }
        ]
      }
    },
    "DeveloperMessage": {
      "type": "object",
      "description": "A message authored by a developer to guide the model during evaluation.",
      "properties": {
        "content": {
          "type": "string",
          "description": "Content provided by a developer to guide model behavior in an evaluation context."
        }
      },
      "required": [
        "content"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        }
      ],
      "x-ms-discriminator-value": "developer"
    },
    "EmbeddingConfiguration": {
      "type": "object",
      "description": "Embedding configuration class",
      "properties": {
        "modelDeploymentName": {
          "type": "string",
          "description": "Deployment name of embedding model. It can point to a model deployment either in the parent AIServices or a connection.",
          "x-ms-mutability": [
            "create"
          ]
        },
        "embeddingField": {
          "type": "string",
          "description": "Embedding field",
          "x-ms-mutability": [
            "create"
          ]
        }
      },
      "required": [
        "modelDeploymentName",
        "embeddingField"
      ]
    },
    "EntraIDCredentials": {
      "type": "object",
      "description": "Entra ID credential definition",
      "allOf": [
        {
          "$ref": "#/definitions/BaseCredentials"
        }
      ],
      "x-ms-discriminator-value": "AAD"
    },
    "EvalGraderParams": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/GraderType"
        }
      },
      "discriminator": "type",
      "required": [
        "type"
      ]
    },
    "EvalGraderResource": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/GraderType"
        }
      },
      "discriminator": "type",
      "required": [
        "type"
      ]
    },
    "EvalsErrorNotFoundResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "x-nullable": true
        },
        "message": {
          "type": "string"
        },
        "param": {
          "type": "string",
          "x-nullable": true
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "code",
        "message",
        "param",
        "type"
      ]
    },
    "EvalsErrorResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "x-nullable": true
        },
        "message": {
          "type": "string"
        },
        "param": {
          "type": "string",
          "x-nullable": true
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "code",
        "message",
        "param",
        "type"
      ]
    },
    "Evaluation": {
      "type": "object",
      "description": "Evaluation Definition",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier of the evaluation.",
          "readOnly": true,
          "x-ms-client-name": "name"
        },
        "data": {
          "$ref": "#/definitions/InputData",
          "description": "Data for evaluation."
        },
        "displayName": {
          "type": "string",
          "description": "Display Name for evaluation. It helps to find the evaluation easily in AI Foundry. It does not need to be unique."
        },
        "description": {
          "type": "string",
          "description": "Description of the evaluation. It can be used to store additional information about the evaluation and is mutable."
        },
        "status": {
          "type": "string",
          "description": "Status of the evaluation. It is set by service and is read-only.",
          "readOnly": true
        },
        "tags": {
          "type": "object",
          "description": "Evaluation's tags. Unlike properties, tags are fully mutable.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "type": "object",
          "description": "Evaluation's properties. Unlike tags, properties are add-only. Once added, a property cannot be removed.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "evaluators": {
          "type": "object",
          "description": "Evaluators to be used for the evaluation.",
          "additionalProperties": {
            "$ref": "#/definitions/EvaluatorConfiguration"
          }
        },
        "target": {
          "$ref": "#/definitions/EvaluationTarget",
          "description": "Specifies the type and configuration of the entity used for this evaluation."
        }
      },
      "required": [
        "id",
        "data",
        "evaluators"
      ]
    },
    "EvaluationTarget": {
      "type": "object",
      "description": "Abstract base model for defining evaluation targets.",
      "properties": {
        "type": {
          "$ref": "#/definitions/EvaluationTargetType",
          "description": "Discriminator that defines the type of the evaluation target."
        }
      },
      "discriminator": "type",
      "required": [
        "type"
      ]
    },
    "EvaluationTargetType": {
      "type": "string",
      "description": "Allowed types of evaluation targets.",
      "enum": [
        "modelResponseGeneration"
      ],
      "x-ms-enum": {
        "name": "EvaluationTargetType",
        "modelAsString": true,
        "values": [
          {
            "name": "modelResponseGeneration",
            "value": "modelResponseGeneration",
            "description": "Evaluation target that uses a model for response generation."
          }
        ]
      }
    },
    "EvaluatorConfiguration": {
      "type": "object",
      "description": "Evaluator Configuration",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier of the evaluator."
        },
        "initParams": {
          "type": "object",
          "description": "Initialization parameters of the evaluator.",
          "additionalProperties": {}
        },
        "dataMapping": {
          "type": "object",
          "description": "Data parameters of the evaluator.",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "id"
      ]
    },
    "FieldMapping": {
      "type": "object",
      "description": "Field mapping configuration class",
      "properties": {
        "contentFields": {
          "type": "array",
          "description": "List of fields with text content",
          "items": {
            "type": "string"
          },
          "x-ms-mutability": [
            "create"
          ]
        },
        "filepathField": {
          "type": "string",
          "description": "Path of file to be used as a source of text content",
          "x-ms-mutability": [
            "create"
          ]
        },
        "titleField": {
          "type": "string",
          "description": "Field containing the title of the document",
          "x-ms-mutability": [
            "create"
          ]
        },
        "urlField": {
          "type": "string",
          "description": "Field containing the url of the document",
          "x-ms-mutability": [
            "create"
          ]
        },
        "vectorFields": {
          "type": "array",
          "description": "List of fields with vector content",
          "items": {
            "type": "string"
          },
          "x-ms-mutability": [
            "create"
          ]
        },
        "metadataFields": {
          "type": "array",
          "description": "List of fields with metadata content",
          "items": {
            "type": "string"
          },
          "x-ms-mutability": [
            "create"
          ]
        }
      },
      "required": [
        "contentFields"
      ]
    },
    "FileDatasetVersion": {
      "type": "object",
      "description": "FileDatasetVersion Definition",
      "allOf": [
        {
          "$ref": "#/definitions/DatasetVersion"
        }
      ],
      "x-ms-discriminator-value": "uri_file"
    },
    "FolderDatasetVersion": {
      "type": "object",
      "description": "FileDatasetVersion Definition",
      "allOf": [
        {
          "$ref": "#/definitions/DatasetVersion"
        }
      ],
      "x-ms-discriminator-value": "uri_folder"
    },
    "GraderType": {
      "type": "string",
      "enum": [
        "string_check",
        "text_similarity",
        "score_model",
        "label_model",
        "python",
        "multi",
        "azure_ai_evaluator"
      ],
      "x-ms-enum": {
        "name": "GraderType",
        "modelAsString": false,
        "values": [
          {
            "name": "string_check",
            "value": "string_check"
          },
          {
            "name": "text_similarity",
            "value": "text_similarity"
          },
          {
            "name": "score_model",
            "value": "score_model"
          },
          {
            "name": "label_model",
            "value": "label_model"
          },
          {
            "name": "python",
            "value": "python"
          },
          {
            "name": "multi",
            "value": "multi"
          },
          {
            "name": "azure_ai_evaluator",
            "value": "azure_ai_evaluator",
            "description": "Foundry evaluator type"
          }
        ]
      }
    },
    "Index": {
      "type": "object",
      "description": "Index resource Definition",
      "properties": {
        "type": {
          "$ref": "#/definitions/IndexType",
          "description": "Type of index"
        },
        "id": {
          "type": "string",
          "description": "Asset ID, a unique identifier for the asset",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the resource",
          "readOnly": true
        },
        "version": {
          "type": "string",
          "description": "The version of the resource",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "description": "The asset description text.",
          "x-ms-mutability": [
            "update",
            "create"
          ]
        },
        "tags": {
          "type": "object",
          "description": "Tag dictionary. Tags can be added, removed, and updated.",
          "additionalProperties": {
            "type": "string"
          },
          "x-ms-mutability": [
            "update",
            "create"
          ]
        }
      },
      "discriminator": "type",
      "required": [
        "type",
        "name",
        "version"
      ]
    },
    "IndexType": {
      "type": "string",
      "enum": [
        "AzureSearch",
        "CosmosDBNoSqlVectorStore",
        "ManagedAzureSearch"
      ],
      "x-ms-enum": {
        "name": "IndexType",
        "modelAsString": true,
        "values": [
          {
            "name": "azureSearch",
            "value": "AzureSearch",
            "description": "Azure search"
          },
          {
            "name": "cosmosDB",
            "value": "CosmosDBNoSqlVectorStore",
            "description": "CosmosDB"
          },
          {
            "name": "managedAzureSearch",
            "value": "ManagedAzureSearch",
            "description": "Managed Azure Search"
          }
        ]
      }
    },
    "InputData": {
      "type": "object",
      "description": "Abstract data class.",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of the data"
        }
      },
      "discriminator": "type",
      "required": [
        "type"
      ]
    },
    "InputDataset": {
      "type": "object",
      "description": "Dataset as source for evaluation.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Evaluation input data"
        }
      },
      "required": [
        "id"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/InputData"
        }
      ],
      "x-ms-discriminator-value": "dataset"
    },
    "ManagedAzureAISearchIndex": {
      "type": "object",
      "description": "Managed Azure AI Search Index Definition",
      "properties": {
        "vectorStoreId": {
          "type": "string",
          "description": "Vector store id of managed index",
          "x-ms-mutability": [
            "create"
          ]
        }
      },
      "required": [
        "vectorStoreId"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Index"
        }
      ],
      "x-ms-discriminator-value": "ManagedAzureSearch"
    },
    "Message": {
      "type": "object",
      "description": "Abstract base model representing a single message in a conversation.",
      "properties": {
        "role": {
          "type": "string",
          "description": "The role of the message author. Known values: 'system', 'assistant', 'developer', 'user'.",
          "enum": [
            "system",
            "assistant",
            "developer",
            "user"
          ],
          "x-ms-enum": {
            "modelAsString": true
          }
        }
      },
      "discriminator": "role",
      "required": [
        "role"
      ]
    },
    "ModelDeployment": {
      "type": "object",
      "description": "Model Deployment Definition",
      "properties": {
        "modelName": {
          "type": "string",
          "description": "Publisher-specific name of the deployed model",
          "readOnly": true
        },
        "modelVersion": {
          "type": "string",
          "description": "Publisher-specific version of the deployed model",
          "readOnly": true
        },
        "modelPublisher": {
          "type": "string",
          "description": "Name of the deployed model's publisher",
          "readOnly": true
        },
        "capabilities": {
          "type": "object",
          "description": "Capabilities of deployed model",
          "additionalProperties": {
            "type": "string"
          },
          "readOnly": true
        },
        "sku": {
          "$ref": "#/definitions/Sku",
          "description": "Sku of the model deployment",
          "readOnly": true
        },
        "connectionName": {
          "type": "string",
          "description": "Name of the connection the deployment comes from",
          "readOnly": true
        }
      },
      "required": [
        "modelName",
        "modelVersion",
        "modelPublisher",
        "capabilities",
        "sku"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Deployment"
        }
      ],
      "x-ms-discriminator-value": "ModelDeployment"
    },
    "NoAuthenticationCredentials": {
      "type": "object",
      "description": "Credentials that do not require authentication",
      "allOf": [
        {
          "$ref": "#/definitions/BaseCredentials"
        }
      ],
      "x-ms-discriminator-value": "None"
    },
    "OpenAI.ApproximateLocation": {
      "type": "object",
      "properties": {
        "country": {
          "type": "string",
          "x-nullable": true
        },
        "region": {
          "type": "string",
          "x-nullable": true
        },
        "city": {
          "type": "string",
          "x-nullable": true
        },
        "timezone": {
          "type": "string",
          "x-nullable": true
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/OpenAI.Location"
        }
      ],
      "x-ms-discriminator-value": "approximate"
    },
    "OpenAI.ChatCompletionTool": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the tool. Currently, only `function` is supported.",
          "enum": [
            "function"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        },
        "function": {
          "$ref": "#/definitions/OpenAI.FunctionObject"
        }
      },
      "required": [
        "type",
        "function"
      ]
    },
    "OpenAI.CodeInterpreterTool": {
      "type": "object",
      "description": "A tool that runs Python code to help generate a response to a prompt.",
      "properties": {
        "container": {
          "description": "The code interpreter container. Can be a container ID or an object that\nspecifies uploaded file IDs to make available to your code."
        }
      },
      "required": [
        "container"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/OpenAI.Tool"
        }
      ],
      "x-ms-discriminator-value": "code_interpreter"
    },
    "OpenAI.ComputerUsePreviewTool": {
      "type": "object",
      "description": "A tool that controls a virtual computer. Learn more about the [computer tool](https://platform.openai.com/docs/guides/tools-computer-use).",
      "properties": {
        "environment": {
          "type": "string",
          "description": "The type of computer environment to control.",
          "enum": [
            "windows",
            "mac",
            "linux",
            "ubuntu",
            "browser"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        },
        "display_width": {
          "type": "integer",
          "format": "int32",
          "description": "The width of the computer display."
        },
        "display_height": {
          "type": "integer",
          "format": "int32",
          "description": "The height of the computer display."
        }
      },
      "required": [
        "environment",
        "display_width",
        "display_height"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/OpenAI.Tool"
        }
      ],
      "x-ms-discriminator-value": "computer_use_preview"
    },
    "OpenAI.CreateEvalItem": {},
    "OpenAI.CreateEvalRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the evaluation."
        },
        "metadata": {
          "type": "object",
          "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard.\n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.",
          "additionalProperties": {
            "type": "string"
          },
          "x-oaiTypeLabel": "map"
        },
        "data_source_config": {
          "$ref": "#/definitions/OpenAI.EvalDataSourceConfigParams",
          "description": "The configuration for the data source used for the evaluation runs. Dictates the schema of the data used in the evaluation."
        },
        "testing_criteria": {
          "type": "array",
          "description": "A list of graders for all eval runs in this group. Graders can reference variables in the data source using double curly braces notation, like `{{item.variable_name}}`. To reference the model's output, use the `sample` namespace (ie, `{{sample.output_text}}`).",
          "items": {
            "$ref": "#/definitions/OpenAI.EvalGraderParams"
          }
        }
      },
      "required": [
        "data_source_config",
        "testing_criteria"
      ]
    },
    "OpenAI.CreateEvalRunRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the run."
        },
        "metadata": {
          "type": "object",
          "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard.\n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.",
          "additionalProperties": {
            "type": "string"
          },
          "x-oaiTypeLabel": "map"
        },
        "data_source": {
          "$ref": "#/definitions/OpenAI.EvalRunDataSourceParams",
          "description": "Details about the run's data source."
        }
      },
      "required": [
        "data_source"
      ]
    },
    "OpenAI.Error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "x-nullable": true
        },
        "message": {
          "type": "string"
        },
        "param": {
          "type": "string",
          "x-nullable": true
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "code",
        "message",
        "param",
        "type"
      ]
    },
    "OpenAI.Eval": {
      "type": "object",
      "description": "An Eval object with a data source config and testing criteria.\nAn Eval represents a task to be done for your LLM integration.\nLike:\n- Improve the quality of my chatbot\n- See how well my chatbot handles customer support\n- Check if o4-mini is better at my usecase than gpt-4o",
      "properties": {
        "object": {
          "type": "string",
          "description": "The object type.",
          "default": "eval",
          "enum": [
            "eval"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        },
        "id": {
          "type": "string",
          "description": "Unique identifier for the evaluation."
        },
        "name": {
          "type": "string",
          "description": "The name of the evaluation."
        },
        "data_source_config": {
          "$ref": "#/definitions/OpenAI.EvalDataSourceConfigResource",
          "description": "Configuration of data sources used in runs of the evaluation."
        },
        "testing_criteria": {
          "type": "array",
          "description": "A list of testing criteria.",
          "default": null,
          "x-nullable": true,
          "items": {
            "$ref": "#/definitions/OpenAI.EvalGraderResource"
          }
        },
        "created_at": {
          "type": "integer",
          "format": "unixtime",
          "description": "The Unix timestamp (in seconds) for when the eval was created."
        },
        "metadata": {
          "type": "object",
          "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard.\n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.",
          "x-nullable": true,
          "additionalProperties": {
            "type": "string"
          },
          "x-oaiTypeLabel": "map"
        }
      },
      "required": [
        "object",
        "id",
        "name",
        "data_source_config",
        "testing_criteria",
        "created_at",
        "metadata"
      ]
    },
    "OpenAI.EvalApiError": {
      "type": "object",
      "description": "An object representing an error response from the Eval API.",
      "properties": {
        "code": {
          "type": "string",
          "description": "The error code."
        },
        "message": {
          "type": "string",
          "description": "The error message."
        }
      },
      "required": [
        "code",
        "message"
      ]
    },
    "OpenAI.EvalCompletionsRunDataSourceParams": {
      "type": "object",
      "description": "A CompletionsRunDataSource object describing a model sampling configuration.",
      "properties": {
        "input_messages": {
          "description": "Used when sampling from a model. Dictates the structure of the messages passed into the model. Can either be a reference to a prebuilt trajectory (ie, `item.input_trajectory`), or a template with variable references to the `item` namespace."
        },
        "sampling_params": {
          "type": "object",
          "properties": {
            "temperature": {
              "type": "number",
              "format": "float",
              "description": "A higher temperature increases randomness in the outputs.",
              "default": 1
            },
            "max_completion_tokens": {
              "type": "integer",
              "format": "int32",
              "description": "The maximum number of tokens in the generated output."
            },
            "top_p": {
              "type": "number",
              "format": "float",
              "description": "An alternative to temperature for nucleus sampling; 1.0 includes all tokens.",
              "default": 1
            },
            "seed": {
              "type": "integer",
              "format": "int32",
              "description": "A seed value to initialize the randomness, during sampling.",
              "default": 42
            },
            "response_format": {
              "$ref": "#/definitions/OpenAI.ResponseTextFormatConfiguration",
              "description": "An object specifying the format that the model must output.\n\nSetting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables\nStructured Outputs which ensures the model will match your supplied JSON\nschema. Learn more in the [Structured Outputs\nguide](/docs/guides/structured-outputs).\n\nSetting to `{ \"type\": \"json_object\" }` enables the older JSON mode, which\nensures the message the model generates is valid JSON. Using `json_schema`\nis preferred for models that support it."
            },
            "tools": {
              "type": "array",
              "description": "A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.",
              "items": {
                "$ref": "#/definitions/OpenAI.ChatCompletionTool"
              }
            }
          }
        },
        "model": {
          "type": "string",
          "description": "The name of the model to use for generating completions (e.g. \"o3-mini\")."
        },
        "source": {
          "description": "Determines what populates the `item` namespace in this run's data source."
        }
      },
      "required": [
        "source"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/OpenAI.EvalRunDataSourceParams"
        }
      ],
      "x-ms-discriminator-value": "completions"
    },
    "OpenAI.EvalCustomDataSourceConfigParams": {
      "type": "object",
      "description": "A CustomDataSourceConfig object that defines the schema for the data source used for the evaluation runs.\nThis schema is used to define the shape of the data that will be:\n- Used to define your testing criteria and\n- What data is required when creating a run",
      "properties": {
        "item_schema": {
          "type": "object",
          "description": "The json schema for each row in the data source.",
          "additionalProperties": {}
        },
        "include_sample_schema": {
          "type": "boolean",
          "description": "Whether the eval should expect you to populate the sample namespace (ie, by generating responses off of your data source)",
          "default": false
        }
      },
      "required": [
        "item_schema"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/OpenAI.EvalDataSourceConfigParams"
        }
      ],
      "x-ms-discriminator-value": "custom"
    },
    "OpenAI.EvalCustomDataSourceConfigResource": {
      "type": "object",
      "description": "A CustomDataSourceConfig which specifies the schema of your `item` and optionally `sample` namespaces.\nThe response schema defines the shape of the data that will be:\n- Used to define your testing criteria and\n- What data is required when creating a run",
      "properties": {
        "schema": {
          "type": "object",
          "description": "The json schema for the run data source items.\nLearn how to build JSON schemas [here](https://json-schema.org/).",
          "additionalProperties": {}
        }
      },
      "required": [
        "schema"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/OpenAI.EvalDataSourceConfigResource"
        }
      ],
      "x-ms-discriminator-value": "custom"
    },
    "OpenAI.EvalDataSourceConfigParams": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/OpenAI.EvalDataSourceConfigType"
        }
      },
      "discriminator": "type",
      "required": [
        "type"
      ]
    },
    "OpenAI.EvalDataSourceConfigResource": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/OpenAI.EvalDataSourceConfigType"
        }
      },
      "discriminator": "type",
      "required": [
        "type"
      ]
    },
    "OpenAI.EvalDataSourceConfigType": {
      "type": "string",
      "enum": [
        "custom",
        "logs",
        "stored_completions"
      ],
      "x-ms-enum": {
        "name": "EvalDataSourceConfigType",
        "modelAsString": false,
        "values": [
          {
            "name": "custom",
            "value": "custom"
          },
          {
            "name": "logs",
            "value": "logs"
          },
          {
            "name": "stored_completions",
            "value": "stored_completions"
          }
        ]
      }
    },
    "OpenAI.EvalGraderLabelModelParams": {
      "type": "object",
      "description": "A LabelModelGrader object which uses a model to assign labels to each item\nin the evaluation.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the grader."
        },
        "model": {
          "type": "string",
          "description": "The model to use for the evaluation. Must support structured outputs."
        },
        "input": {
          "type": "array",
          "description": "A list of chat messages forming the prompt or context. May include variable references to the `item` namespace, ie {{item.name}}.",
          "items": {
            "$ref": "#/definitions/OpenAI.CreateEvalItem"
          }
        },
        "labels": {
          "type": "array",
          "description": "The labels to classify to each item in the evaluation.",
          "items": {
            "type": "string"
          }
        },
        "passing_labels": {
          "type": "array",
          "description": "The labels that indicate a passing result. Must be a subset of labels.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "name",
        "model",
        "input",
        "labels",
        "passing_labels"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/OpenAI.EvalGraderParams"
        }
      ],
      "x-ms-discriminator-value": "label_model"
    },
    "OpenAI.EvalGraderLabelModelResource": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the grader."
        },
        "model": {
          "type": "string",
          "description": "The model to use for the evaluation. Must support structured outputs."
        },
        "input": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OpenAI.EvalItem"
          }
        },
        "labels": {
          "type": "array",
          "description": "The labels to assign to each item in the evaluation.",
          "items": {
            "type": "string"
          }
        },
        "passing_labels": {
          "type": "array",
          "description": "The labels that indicate a passing result. Must be a subset of labels.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "name",
        "model",
        "input",
        "labels",
        "passing_labels"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/OpenAI.EvalGraderResource"
        }
      ],
      "x-ms-discriminator-value": "label_model"
    },
    "OpenAI.EvalGraderParams": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/OpenAI.GraderType"
        }
      },
      "discriminator": "type",
      "required": [
        "type"
      ]
    },
    "OpenAI.EvalGraderPythonParams": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the grader."
        },
        "source": {
          "type": "string",
          "description": "The source code of the python script."
        },
        "image_tag": {
          "type": "string",
          "description": "The image tag to use for the python script."
        },
        "pass_threshold": {
          "type": "number",
          "format": "float",
          "description": "The threshold for the score."
        }
      },
      "required": [
        "name",
        "source"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/OpenAI.EvalGraderParams"
        }
      ],
      "x-ms-discriminator-value": "python"
    },
    "OpenAI.EvalGraderPythonResource": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the grader."
        },
        "source": {
          "type": "string",
          "description": "The source code of the python script."
        },
        "image_tag": {
          "type": "string",
          "description": "The image tag to use for the python script."
        },
        "pass_threshold": {
          "type": "number",
          "format": "float",
          "description": "The threshold for the score."
        }
      },
      "required": [
        "name",
        "source"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/OpenAI.EvalGraderResource"
        }
      ],
      "x-ms-discriminator-value": "python"
    },
    "OpenAI.EvalGraderResource": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/OpenAI.GraderType"
        }
      },
      "discriminator": "type",
      "required": [
        "type"
      ]
    },
    "OpenAI.EvalGraderScoreModelParams": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the grader."
        },
        "model": {
          "type": "string",
          "description": "The model to use for the evaluation."
        },
        "sampling_params": {
          "description": "The sampling parameters for the model."
        },
        "input": {
          "type": "array",
          "description": "The input text. This may include template strings.",
          "items": {
            "$ref": "#/definitions/OpenAI.EvalItem"
          }
        },
        "range": {
          "type": "array",
          "description": "The range of the score. Defaults to `[0, 1]`.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "pass_threshold": {
          "type": "number",
          "format": "float",
          "description": "The threshold for the score."
        }
      },
      "required": [
        "name",
        "model",
        "input"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/OpenAI.EvalGraderParams"
        }
      ],
      "x-ms-discriminator-value": "score_model"
    },
    "OpenAI.EvalGraderScoreModelResource": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the grader."
        },
        "model": {
          "type": "string",
          "description": "The model to use for the evaluation."
        },
        "sampling_params": {
          "description": "The sampling parameters for the model."
        },
        "input": {
          "type": "array",
          "description": "The input text. This may include template strings.",
          "items": {
            "$ref": "#/definitions/OpenAI.EvalItem"
          }
        },
        "range": {
          "type": "array",
          "description": "The range of the score. Defaults to `[0, 1]`.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "pass_threshold": {
          "type": "number",
          "format": "float",
          "description": "The threshold for the score."
        }
      },
      "required": [
        "name",
        "model",
        "input"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/OpenAI.EvalGraderResource"
        }
      ],
      "x-ms-discriminator-value": "score_model"
    },
    "OpenAI.EvalGraderStringCheckParams": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the grader."
        },
        "input": {
          "type": "string",
          "description": "The input text. This may include template strings."
        },
        "reference": {
          "type": "string",
          "description": "The reference text. This may include template strings."
        },
        "operation": {
          "type": "string",
          "description": "The string check operation to perform. One of `eq`, `ne`, `like`, or `ilike`.",
          "enum": [
            "eq",
            "ne",
            "like",
            "ilike"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        }
      },
      "required": [
        "name",
        "input",
        "reference",
        "operation"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/OpenAI.EvalGraderParams"
        }
      ],
      "x-ms-discriminator-value": "string_check"
    },
    "OpenAI.EvalGraderTextSimilarityParams": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the grader."
        },
        "input": {
          "type": "string",
          "description": "The text being graded."
        },
        "reference": {
          "type": "string",
          "description": "The text being graded against."
        },
        "evaluation_metric": {
          "type": "string",
          "description": "The evaluation metric to use. One of `fuzzy_match`, `bleu`, `gleu`, `meteor`, `rouge_1`, `rouge_2`, `rouge_3`, `rouge_4`, `rouge_5`, or `rouge_l`.",
          "enum": [
            "fuzzy_match",
            "bleu",
            "gleu",
            "meteor",
            "rouge_1",
            "rouge_2",
            "rouge_3",
            "rouge_4",
            "rouge_5",
            "rouge_l"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        },
        "pass_threshold": {
          "type": "number",
          "format": "float",
          "description": "The threshold for the score."
        }
      },
      "required": [
        "name",
        "input",
        "reference",
        "evaluation_metric",
        "pass_threshold"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/OpenAI.EvalGraderParams"
        }
      ],
      "x-ms-discriminator-value": "text_similarity"
    },
    "OpenAI.EvalGraderTextSimilarityResource": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the grader."
        },
        "input": {
          "type": "string",
          "description": "The text being graded."
        },
        "reference": {
          "type": "string",
          "description": "The text being graded against."
        },
        "evaluation_metric": {
          "type": "string",
          "description": "The evaluation metric to use. One of `fuzzy_match`, `bleu`, `gleu`, `meteor`, `rouge_1`, `rouge_2`, `rouge_3`, `rouge_4`, `rouge_5`, or `rouge_l`.",
          "enum": [
            "fuzzy_match",
            "bleu",
            "gleu",
            "meteor",
            "rouge_1",
            "rouge_2",
            "rouge_3",
            "rouge_4",
            "rouge_5",
            "rouge_l"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        },
        "pass_threshold": {
          "type": "number",
          "format": "float",
          "description": "The threshold for the score."
        }
      },
      "required": [
        "name",
        "input",
        "reference",
        "evaluation_metric",
        "pass_threshold"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/OpenAI.EvalGraderResource"
        }
      ],
      "x-ms-discriminator-value": "text_similarity"
    },
    "OpenAI.EvalItem": {
      "type": "object",
      "description": "A message input to the model with a role indicating instruction following\nhierarchy. Instructions given with the `developer` or `system` role take\nprecedence over instructions given with the `user` role. Messages with the\n`assistant` role are presumed to have been generated by the model in previous\ninteractions.",
      "properties": {
        "role": {
          "type": "string",
          "description": "The role of the message input. One of `user`, `assistant`, `system`, or\n`developer`.",
          "enum": [
            "user",
            "assistant",
            "system",
            "developer"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        },
        "content": {
          "description": "Text inputs to the model - can contain template strings."
        },
        "type": {
          "type": "string",
          "description": "The type of the message input. Always `message`.",
          "enum": [
            "message"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        }
      },
      "required": [
        "role",
        "content"
      ]
    },
    "OpenAI.EvalJsonlRunDataSourceParams": {
      "type": "object",
      "description": "A JsonlRunDataSource object with that specifies a JSONL file that matches the eval",
      "properties": {
        "source": {
          "description": "Determines what populates the `item` namespace in the data source."
        }
      },
      "required": [
        "source"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/OpenAI.EvalRunDataSourceParams"
        }
      ],
      "x-ms-discriminator-value": "jsonl"
    },
    "OpenAI.EvalList": {
      "type": "object",
      "description": "An object representing a list of evals.",
      "properties": {
        "object": {
          "type": "string",
          "description": "The type of this object. It is always set to \"list\".",
          "default": "list",
          "enum": [
            "list"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        },
        "data": {
          "type": "array",
          "description": "An array of eval objects.",
          "items": {
            "$ref": "#/definitions/OpenAI.Eval"
          }
        },
        "first_id": {
          "type": "string",
          "description": "The identifier of the first eval in the data array."
        },
        "last_id": {
          "type": "string",
          "description": "The identifier of the last eval in the data array."
        },
        "has_more": {
          "type": "boolean",
          "description": "Indicates whether there are more evals available."
        }
      },
      "required": [
        "object",
        "data",
        "first_id",
        "last_id",
        "has_more"
      ]
    },
    "OpenAI.EvalLogsDataSourceConfigParams": {
      "type": "object",
      "description": "A data source config which specifies the metadata property of your logs query.\nThis is usually metadata like `usecase=chatbot` or `prompt-version=v2`, etc.",
      "properties": {
        "metadata": {
          "type": "object",
          "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard.\n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.",
          "additionalProperties": {
            "type": "string"
          },
          "x-oaiTypeLabel": "map"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/OpenAI.EvalDataSourceConfigParams"
        }
      ],
      "x-ms-discriminator-value": "logs"
    },
    "OpenAI.EvalLogsDataSourceConfigResource": {
      "type": "object",
      "description": "A LogsDataSourceConfig which specifies the metadata property of your logs query.\nThis is usually metadata like `usecase=chatbot` or `prompt-version=v2`, etc.\nThe schema returned by this data source config is used to defined what variables are available in your evals.\n`item` and `sample` are both defined when using this data source config.",
      "properties": {
        "metadata": {
          "type": "object",
          "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard.\n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.",
          "x-nullable": true,
          "additionalProperties": {
            "type": "string"
          },
          "x-oaiTypeLabel": "map"
        },
        "schema": {
          "type": "object",
          "description": "The json schema for the run data source items.\nLearn how to build JSON schemas [here](https://json-schema.org/).",
          "additionalProperties": {}
        }
      },
      "required": [
        "metadata",
        "schema"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/OpenAI.EvalDataSourceConfigResource"
        }
      ],
      "x-ms-discriminator-value": "logs"
    },
    "OpenAI.EvalResponsesRunDataSourceParams": {
      "type": "object",
      "description": "A ResponsesRunDataSource object describing a model sampling configuration.",
      "properties": {
        "input_messages": {
          "description": "Used when sampling from a model. Dictates the structure of the messages passed into the model. Can either be a reference to a prebuilt trajectory (ie, `item.input_trajectory`), or a template with variable references to the `item` namespace."
        },
        "sampling_params": {
          "type": "object",
          "properties": {
            "temperature": {
              "type": "number",
              "format": "float",
              "description": "A higher temperature increases randomness in the outputs.",
              "default": 1
            },
            "max_completion_tokens": {
              "type": "integer",
              "format": "int32",
              "description": "The maximum number of tokens in the generated output."
            },
            "top_p": {
              "type": "number",
              "format": "float",
              "description": "An alternative to temperature for nucleus sampling; 1.0 includes all tokens.",
              "default": 1
            },
            "seed": {
              "type": "integer",
              "format": "int32",
              "description": "A seed value to initialize the randomness, during sampling.",
              "default": 42
            },
            "tools": {
              "type": "array",
              "description": "An array of tools the model may call while generating a response. You\ncan specify which tool to use by setting the `tool_choice` parameter.\n\nThe two categories of tools you can provide the model are:\n\n- **Built-in tools**: Tools that are provided by OpenAI that extend the\n  model's capabilities, like [web search](/docs/guides/tools-web-search)\n  or [file search](/docs/guides/tools-file-search). Learn more about\n  [built-in tools](/docs/guides/tools).\n- **Function calls (custom tools)**: Functions that are defined by you,\n  enabling the model to call your own code. Learn more about\n  [function calling](/docs/guides/function-calling).",
              "items": {
                "$ref": "#/definitions/OpenAI.Tool"
              }
            },
            "text": {
              "type": "object",
              "description": "Configuration options for a text response from the model. Can be plain\ntext or structured JSON data. Learn more:\n- [Text inputs and outputs](/docs/guides/text)\n- [Structured Outputs](/docs/guides/structured-outputs)",
              "properties": {
                "format": {
                  "$ref": "#/definitions/OpenAI.ResponseTextFormatConfiguration"
                }
              }
            }
          }
        },
        "model": {
          "type": "string",
          "description": "The name of the model to use for generating completions (e.g. \"o3-mini\")."
        },
        "source": {
          "description": "Determines what populates the `item` namespace in this run's data source."
        }
      },
      "required": [
        "source"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/OpenAI.EvalRunDataSourceParams"
        }
      ],
      "x-ms-discriminator-value": "responses"
    },
    "OpenAI.EvalRun": {
      "type": "object",
      "description": "A schema representing an evaluation run.",
      "properties": {
        "object": {
          "type": "string",
          "description": "The type of the object. Always \"eval.run\".",
          "default": "eval.run",
          "enum": [
            "eval.run"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        },
        "id": {
          "type": "string",
          "description": "Unique identifier for the evaluation run."
        },
        "eval_id": {
          "type": "string",
          "description": "The identifier of the associated evaluation."
        },
        "status": {
          "type": "string",
          "description": "The status of the evaluation run."
        },
        "model": {
          "type": "string",
          "description": "The model that is evaluated, if applicable."
        },
        "name": {
          "type": "string",
          "description": "The name of the evaluation run."
        },
        "created_at": {
          "type": "integer",
          "format": "unixtime",
          "description": "Unix timestamp (in seconds) when the evaluation run was created."
        },
        "report_url": {
          "type": "string",
          "description": "The URL to the rendered evaluation run report on the UI dashboard."
        },
        "result_counts": {
          "type": "object",
          "description": "Counters summarizing the outcomes of the evaluation run.",
          "properties": {
            "total": {
              "type": "integer",
              "format": "int32",
              "description": "Total number of executed output items."
            },
            "errored": {
              "type": "integer",
              "format": "int32",
              "description": "Number of output items that resulted in an error."
            },
            "failed": {
              "type": "integer",
              "format": "int32",
              "description": "Number of output items that failed to pass the evaluation."
            },
            "passed": {
              "type": "integer",
              "format": "int32",
              "description": "Number of output items that passed the evaluation."
            }
          },
          "required": [
            "total",
            "errored",
            "failed",
            "passed"
          ]
        },
        "per_model_usage": {
          "type": "array",
          "description": "Usage statistics for each model during the evaluation run.",
          "items": {
            "type": "object",
            "properties": {
              "model_name": {
                "type": "string",
                "description": "The name of the model."
              },
              "invocation_count": {
                "type": "integer",
                "format": "int32",
                "description": "The number of invocations."
              },
              "prompt_tokens": {
                "type": "integer",
                "format": "int32",
                "description": "The number of prompt tokens used."
              },
              "completion_tokens": {
                "type": "integer",
                "format": "int32",
                "description": "The number of completion tokens generated."
              },
              "total_tokens": {
                "type": "integer",
                "format": "int32",
                "description": "The total number of tokens used."
              },
              "cached_tokens": {
                "type": "integer",
                "format": "int32",
                "description": "The number of tokens retrieved from cache."
              }
            },
            "required": [
              "model_name",
              "invocation_count",
              "prompt_tokens",
              "completion_tokens",
              "total_tokens",
              "cached_tokens"
            ]
          }
        },
        "per_testing_criteria_results": {
          "type": "array",
          "description": "Results per testing criteria applied during the evaluation run.",
          "items": {
            "type": "object",
            "properties": {
              "testing_criteria": {
                "type": "string",
                "description": "A description of the testing criteria."
              },
              "passed": {
                "type": "integer",
                "format": "int32",
                "description": "Number of tests passed for this criteria."
              },
              "failed": {
                "type": "integer",
                "format": "int32",
                "description": "Number of tests failed for this criteria."
              }
            },
            "required": [
              "testing_criteria",
              "passed",
              "failed"
            ]
          }
        },
        "data_source": {
          "$ref": "#/definitions/OpenAI.EvalRunDataSourceResource",
          "description": "Information about the run's data source."
        },
        "metadata": {
          "type": "object",
          "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard.\n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.",
          "x-nullable": true,
          "additionalProperties": {
            "type": "string"
          },
          "x-oaiTypeLabel": "map"
        },
        "error": {
          "$ref": "#/definitions/OpenAI.EvalApiError"
        }
      },
      "required": [
        "object",
        "id",
        "eval_id",
        "status",
        "model",
        "name",
        "created_at",
        "report_url",
        "result_counts",
        "per_model_usage",
        "per_testing_criteria_results",
        "data_source",
        "metadata",
        "error"
      ]
    },
    "OpenAI.EvalRunDataSourceCompletionsResource": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "completions"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        }
      },
      "required": [
        "type"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/OpenAI.EvalRunDataSourceResource"
        }
      ]
    },
    "OpenAI.EvalRunDataSourceJsonlResource": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "jsonl"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        }
      },
      "required": [
        "type"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/OpenAI.EvalRunDataSourceResource"
        }
      ]
    },
    "OpenAI.EvalRunDataSourceParams": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/OpenAI.EvalRunDataSourceType"
        }
      },
      "discriminator": "type",
      "required": [
        "type"
      ]
    },
    "OpenAI.EvalRunDataSourceResource": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/OpenAI.EvalRunDataSourceType"
        }
      },
      "required": [
        "type"
      ]
    },
    "OpenAI.EvalRunDataSourceResponsesResource": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "responses"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        }
      },
      "required": [
        "type"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/OpenAI.EvalRunDataSourceResource"
        }
      ]
    },
    "OpenAI.EvalRunDataSourceType": {
      "type": "string",
      "enum": [
        "jsonl",
        "completions",
        "responses"
      ],
      "x-ms-enum": {
        "name": "EvalRunDataSourceType",
        "modelAsString": false,
        "values": [
          {
            "name": "jsonl",
            "value": "jsonl"
          },
          {
            "name": "completions",
            "value": "completions"
          },
          {
            "name": "responses",
            "value": "responses"
          }
        ]
      }
    },
    "OpenAI.EvalRunList": {
      "type": "object",
      "description": "An object representing a list of runs for an evaluation.",
      "properties": {
        "object": {
          "type": "string",
          "description": "The type of this object. It is always set to \"list\".",
          "default": "list",
          "enum": [
            "list"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        },
        "data": {
          "type": "array",
          "description": "An array of eval run objects.",
          "items": {
            "$ref": "#/definitions/OpenAI.EvalRun"
          }
        },
        "first_id": {
          "type": "string",
          "description": "The identifier of the first eval run in the data array."
        },
        "last_id": {
          "type": "string",
          "description": "The identifier of the last eval run in the data array."
        },
        "has_more": {
          "type": "boolean",
          "description": "Indicates whether there are more evals available."
        }
      },
      "required": [
        "object",
        "data",
        "first_id",
        "last_id",
        "has_more"
      ]
    },
    "OpenAI.EvalRunOutputItem": {
      "type": "object",
      "description": "A schema representing an evaluation run output item.",
      "properties": {
        "object": {
          "type": "string",
          "description": "The type of the object. Always \"eval.run.output_item\".",
          "default": "eval.run.output_item",
          "enum": [
            "eval.run.output_item"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        },
        "id": {
          "type": "string",
          "description": "Unique identifier for the evaluation run output item."
        },
        "run_id": {
          "type": "string",
          "description": "The identifier of the evaluation run associated with this output item."
        },
        "eval_id": {
          "type": "string",
          "description": "The identifier of the evaluation group."
        },
        "created_at": {
          "type": "integer",
          "format": "unixtime",
          "description": "Unix timestamp (in seconds) when the evaluation run was created."
        },
        "status": {
          "type": "string",
          "description": "The status of the evaluation run."
        },
        "datasource_item_id": {
          "type": "integer",
          "format": "int32",
          "description": "The identifier for the data source item."
        },
        "datasource_item": {
          "type": "object",
          "description": "Details of the input data source item.",
          "additionalProperties": {}
        },
        "results": {
          "type": "array",
          "description": "A list of results from the evaluation run.",
          "items": {
            "type": "object",
            "additionalProperties": {}
          }
        },
        "sample": {
          "type": "object",
          "description": "A sample containing the input and output of the evaluation run.",
          "properties": {
            "input": {
              "type": "array",
              "description": "An array of input messages.",
              "items": {
                "type": "object",
                "properties": {
                  "role": {
                    "type": "string",
                    "description": "The role of the message sender (e.g., system, user, developer)."
                  },
                  "content": {
                    "type": "string",
                    "description": "The content of the message."
                  }
                },
                "required": [
                  "role",
                  "content"
                ]
              }
            },
            "output": {
              "type": "array",
              "description": "An array of output messages.",
              "items": {
                "type": "object",
                "properties": {
                  "role": {
                    "type": "string",
                    "description": "The role of the message (e.g. \"system\", \"assistant\", \"user\")."
                  },
                  "content": {
                    "type": "string",
                    "description": "The content of the message."
                  }
                }
              }
            },
            "finish_reason": {
              "type": "string",
              "description": "The reason why the sample generation was finished."
            },
            "model": {
              "type": "string",
              "description": "The model used for generating the sample."
            },
            "usage": {
              "type": "object",
              "description": "Token usage details for the sample.",
              "properties": {
                "total_tokens": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The total number of tokens used."
                },
                "completion_tokens": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The number of completion tokens generated."
                },
                "prompt_tokens": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The number of prompt tokens used."
                },
                "cached_tokens": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The number of tokens retrieved from cache."
                }
              },
              "required": [
                "total_tokens",
                "completion_tokens",
                "prompt_tokens",
                "cached_tokens"
              ]
            },
            "error": {
              "$ref": "#/definitions/OpenAI.EvalApiError"
            },
            "temperature": {
              "type": "number",
              "format": "float",
              "description": "The sampling temperature used."
            },
            "max_completion_tokens": {
              "type": "integer",
              "format": "int32",
              "description": "The maximum number of tokens allowed for completion."
            },
            "top_p": {
              "type": "number",
              "format": "float",
              "description": "The top_p value used for sampling."
            },
            "seed": {
              "type": "integer",
              "format": "int32",
              "description": "The seed used for generating the sample."
            }
          },
          "required": [
            "input",
            "output",
            "finish_reason",
            "model",
            "usage",
            "error",
            "temperature",
            "max_completion_tokens",
            "top_p",
            "seed"
          ]
        }
      },
      "required": [
        "object",
        "id",
        "run_id",
        "eval_id",
        "created_at",
        "status",
        "datasource_item_id",
        "datasource_item",
        "results",
        "sample"
      ]
    },
    "OpenAI.EvalRunOutputItemList": {
      "type": "object",
      "description": "An object representing a list of output items for an evaluation run.",
      "properties": {
        "object": {
          "type": "string",
          "description": "The type of this object. It is always set to \"list\".",
          "default": "list",
          "enum": [
            "list"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        },
        "data": {
          "type": "array",
          "description": "An array of eval run output item objects.",
          "items": {
            "$ref": "#/definitions/OpenAI.EvalRunOutputItem"
          }
        },
        "first_id": {
          "type": "string",
          "description": "The identifier of the first eval run output item in the data array."
        },
        "last_id": {
          "type": "string",
          "description": "The identifier of the last eval run output item in the data array."
        },
        "has_more": {
          "type": "boolean",
          "description": "Indicates whether there are more eval run output items available."
        }
      },
      "required": [
        "object",
        "data",
        "first_id",
        "last_id",
        "has_more"
      ]
    },
    "OpenAI.EvalStoredCompletionsDataSourceConfigParams": {
      "type": "object",
      "description": "Deprecated in favor of LogsDataSourceConfig.",
      "properties": {
        "metadata": {
          "type": "object",
          "description": "Metadata filters for the stored completions data source.",
          "additionalProperties": {}
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/OpenAI.EvalDataSourceConfigParams"
        }
      ],
      "x-ms-discriminator-value": "stored_completions"
    },
    "OpenAI.EvalStoredCompletionsDataSourceConfigResource": {
      "type": "object",
      "description": "Deprecated in favor of LogsDataSourceConfig.",
      "properties": {
        "metadata": {
          "type": "object",
          "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard.\n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.",
          "x-nullable": true,
          "additionalProperties": {
            "type": "string"
          },
          "x-oaiTypeLabel": "map"
        },
        "schema": {
          "type": "object",
          "description": "The json schema for the run data source items.\nLearn how to build JSON schemas [here](https://json-schema.org/).",
          "additionalProperties": {}
        }
      },
      "required": [
        "metadata",
        "schema"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/OpenAI.EvalDataSourceConfigResource"
        }
      ],
      "x-ms-discriminator-value": "stored_completions"
    },
    "OpenAI.FileSearchTool": {
      "type": "object",
      "description": "A tool that searches for relevant content from uploaded files. Learn more about the [file search tool](https://platform.openai.com/docs/guides/tools-file-search).",
      "properties": {
        "vector_store_ids": {
          "type": "array",
          "description": "The IDs of the vector stores to search.",
          "items": {
            "type": "string"
          }
        },
        "max_num_results": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of results to return. This number should be between 1 and 50 inclusive."
        },
        "ranking_options": {
          "$ref": "#/definitions/OpenAI.RankingOptions",
          "description": "Ranking options for search."
        },
        "filters": {
          "$ref": "#/definitions/OpenAI.Filters",
          "description": "A filter to apply.",
          "x-nullable": true
        }
      },
      "required": [
        "vector_store_ids"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/OpenAI.Tool"
        }
      ],
      "x-ms-discriminator-value": "file_search"
    },
    "OpenAI.Filters": {},
    "OpenAI.FunctionObject": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "A description of what the function does, used by the model to choose when and how to call the function."
        },
        "name": {
          "type": "string",
          "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."
        },
        "parameters": {
          "description": "The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.\n\nOmitting `parameters` defines a function with an empty parameter list."
        },
        "strict": {
          "type": "boolean",
          "description": "Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Learn more about Structured Outputs in the [function calling guide](docs/guides/function-calling).",
          "default": false,
          "x-nullable": true
        }
      },
      "required": [
        "name"
      ]
    },
    "OpenAI.FunctionTool": {
      "type": "object",
      "description": "Defines a function in your own code the model can choose to call. Learn more about [function calling](https://platform.openai.com/docs/guides/function-calling).",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the function to call."
        },
        "description": {
          "type": "string",
          "description": "A description of the function. Used by the model to determine whether or not to call the function.",
          "x-nullable": true
        },
        "parameters": {
          "description": "A JSON schema object describing the parameters of the function.",
          "x-nullable": true
        },
        "strict": {
          "type": "boolean",
          "description": "Whether to enforce strict parameter validation. Default `true`.",
          "x-nullable": true
        }
      },
      "required": [
        "name",
        "parameters",
        "strict"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/OpenAI.Tool"
        }
      ],
      "x-ms-discriminator-value": "function"
    },
    "OpenAI.GraderType": {
      "type": "string",
      "enum": [
        "string_check",
        "text_similarity",
        "score_model",
        "label_model",
        "python",
        "multi"
      ],
      "x-ms-enum": {
        "name": "GraderType",
        "modelAsString": false,
        "values": [
          {
            "name": "string_check",
            "value": "string_check"
          },
          {
            "name": "text_similarity",
            "value": "text_similarity"
          },
          {
            "name": "score_model",
            "value": "score_model"
          },
          {
            "name": "label_model",
            "value": "label_model"
          },
          {
            "name": "python",
            "value": "python"
          },
          {
            "name": "multi",
            "value": "multi"
          }
        ]
      }
    },
    "OpenAI.ImageGenTool": {
      "type": "object",
      "description": "A tool that generates images using a model like `gpt-image-1`.",
      "properties": {
        "model": {
          "type": "string",
          "description": "The image generation model to use. Default: `gpt-image-1`.",
          "default": "gpt-image-1",
          "enum": [
            "gpt-image-1"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        },
        "quality": {
          "type": "string",
          "description": "The quality of the generated image. One of `low`, `medium`, `high`,\nor `auto`. Default: `auto`.",
          "default": "auto",
          "enum": [
            "low",
            "medium",
            "high",
            "auto"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        },
        "size": {
          "type": "string",
          "description": "The size of the generated image. One of `1024x1024`, `1024x1536`,\n`1536x1024`, or `auto`. Default: `auto`.",
          "default": "auto",
          "enum": [
            "1024x1024",
            "1024x1536",
            "1536x1024",
            "auto"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        },
        "output_format": {
          "type": "string",
          "description": "The output format of the generated image. One of `png`, `webp`, or\n`jpeg`. Default: `png`.",
          "default": "png",
          "enum": [
            "png",
            "webp",
            "jpeg"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        },
        "output_compression": {
          "type": "integer",
          "format": "int32",
          "description": "Compression level for the output image. Default: 100.",
          "default": 100,
          "minimum": 0,
          "maximum": 100
        },
        "moderation": {
          "type": "string",
          "description": "Moderation level for the generated image. Default: `auto`.",
          "default": "auto",
          "enum": [
            "auto",
            "low"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        },
        "background": {
          "type": "string",
          "description": "Background type for the generated image. One of `transparent`,\n`opaque`, or `auto`. Default: `auto`.",
          "default": "auto",
          "enum": [
            "transparent",
            "opaque",
            "auto"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        },
        "input_image_mask": {
          "type": "object",
          "description": "Optional mask for inpainting. Contains `image_url`\n(string, optional) and `file_id` (string, optional).",
          "properties": {
            "image_url": {
              "type": "string",
              "description": "Base64-encoded mask image."
            },
            "file_id": {
              "type": "string",
              "description": "File ID for the mask image."
            }
          }
        },
        "partial_images": {
          "type": "integer",
          "format": "int32",
          "description": "Number of partial images to generate in streaming mode, from 0 (default value) to 3.",
          "default": 0,
          "minimum": 0,
          "maximum": 3
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/OpenAI.Tool"
        }
      ],
      "x-ms-discriminator-value": "image_generation"
    },
    "OpenAI.LocalShellTool": {
      "type": "object",
      "description": "A tool that allows the model to execute shell commands in a local environment.",
      "allOf": [
        {
          "$ref": "#/definitions/OpenAI.Tool"
        }
      ],
      "x-ms-discriminator-value": "local_shell"
    },
    "OpenAI.Location": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/OpenAI.LocationType"
        }
      },
      "discriminator": "type",
      "required": [
        "type"
      ]
    },
    "OpenAI.LocationType": {
      "type": "string",
      "enum": [
        "approximate"
      ],
      "x-ms-enum": {
        "name": "LocationType",
        "modelAsString": true,
        "values": [
          {
            "name": "approximate",
            "value": "approximate"
          }
        ]
      }
    },
    "OpenAI.MCPTool": {
      "type": "object",
      "description": "Give the model access to additional tools via remote Model Context Protocol\n(MCP) servers. [Learn more about MCP](/docs/guides/tools-remote-mcp).",
      "properties": {
        "server_label": {
          "type": "string",
          "description": "A label for this MCP server, used to identify it in tool calls."
        },
        "server_url": {
          "type": "string",
          "description": "The URL for the MCP server."
        },
        "headers": {
          "type": "object",
          "description": "Optional HTTP headers to send to the MCP server. Use for authentication\nor other purposes.",
          "x-nullable": true,
          "additionalProperties": {
            "type": "string"
          }
        },
        "allowed_tools": {
          "description": "List of allowed tool names or a filter object."
        },
        "require_approval": {
          "description": "Specify which of the MCP server's tools require approval.",
          "default": "always"
        }
      },
      "required": [
        "server_label",
        "server_url"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/OpenAI.Tool"
        }
      ],
      "x-ms-discriminator-value": "mcp"
    },
    "OpenAI.MetadataPropertyForRequest": {
      "type": "object",
      "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard.\n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.",
      "properties": {
        "metadata": {
          "type": "object",
          "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard.\n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.",
          "additionalProperties": {
            "type": "string"
          },
          "x-oaiTypeLabel": "map"
        }
      }
    },
    "OpenAI.RankingOptions": {
      "type": "object",
      "properties": {
        "ranker": {
          "type": "string",
          "description": "The ranker to use for the file search.",
          "enum": [
            "auto",
            "default-2024-11-15"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        },
        "score_threshold": {
          "type": "number",
          "format": "float",
          "description": "The score threshold for the file search, a number between 0 and 1. Numbers closer to 1 will attempt to return only the most relevant results, but may return fewer results."
        }
      }
    },
    "OpenAI.ResponseFormatJsonSchemaSchema": {
      "type": "object",
      "description": "The schema for the response format, described as a JSON Schema object.\nLearn how to build JSON schemas [here](https://json-schema.org/).",
      "additionalProperties": {}
    },
    "OpenAI.ResponseTextFormatConfiguration": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/OpenAI.ResponseTextFormatConfigurationType"
        }
      },
      "discriminator": "type",
      "required": [
        "type"
      ]
    },
    "OpenAI.ResponseTextFormatConfigurationJsonObject": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/OpenAI.ResponseTextFormatConfiguration"
        }
      ],
      "x-ms-discriminator-value": "json_object"
    },
    "OpenAI.ResponseTextFormatConfigurationJsonSchema": {
      "type": "object",
      "description": "JSON Schema response format. Used to generate structured JSON responses.\nLearn more about [Structured Outputs](/docs/guides/structured-outputs).",
      "properties": {
        "description": {
          "type": "string",
          "description": "A description of what the response format is for, used by the model to\ndetermine how to respond in the format."
        },
        "name": {
          "type": "string",
          "description": "The name of the response format. Must be a-z, A-Z, 0-9, or contain\nunderscores and dashes, with a maximum length of 64."
        },
        "schema": {
          "$ref": "#/definitions/OpenAI.ResponseFormatJsonSchemaSchema"
        },
        "strict": {
          "type": "boolean",
          "description": "Whether to enable strict schema adherence when generating the output.\nIf set to true, the model will always follow the exact schema defined\nin the `schema` field. Only a subset of JSON Schema is supported when\n`strict` is `true`. To learn more, read the [Structured Outputs\nguide](/docs/guides/structured-outputs).",
          "default": false,
          "x-nullable": true
        }
      },
      "required": [
        "name",
        "schema"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/OpenAI.ResponseTextFormatConfiguration"
        }
      ],
      "x-ms-discriminator-value": "json_schema"
    },
    "OpenAI.ResponseTextFormatConfigurationText": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/OpenAI.ResponseTextFormatConfiguration"
        }
      ],
      "x-ms-discriminator-value": "text"
    },
    "OpenAI.ResponseTextFormatConfigurationType": {
      "type": "string",
      "description": "An object specifying the format that the model must output.\n\nConfiguring `{ \"type\": \"json_schema\" }` enables Structured Outputs,\nwhich ensures the model will match your supplied JSON schema. Learn more in the\n[Structured Outputs guide](/docs/guides/structured-outputs).\n\nThe default format is `{ \"type\": \"text\" }` with no additional options.\n\n**Not recommended for gpt-4o and newer models:**\n\nSetting to `{ \"type\": \"json_object\" }` enables the older JSON mode, which\nensures the message the model generates is valid JSON. Using `json_schema`\nis preferred for models that support it.",
      "enum": [
        "text",
        "json_schema",
        "json_object"
      ],
      "x-ms-enum": {
        "name": "ResponseTextFormatConfigurationType",
        "modelAsString": true,
        "values": [
          {
            "name": "text",
            "value": "text"
          },
          {
            "name": "json_schema",
            "value": "json_schema"
          },
          {
            "name": "json_object",
            "value": "json_object"
          }
        ]
      }
    },
    "OpenAI.Tool": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/OpenAI.ToolType"
        }
      },
      "discriminator": "type",
      "required": [
        "type"
      ]
    },
    "OpenAI.ToolType": {
      "type": "string",
      "description": "A tool that can be used to generate a response.",
      "enum": [
        "file_search",
        "function",
        "computer_use_preview",
        "web_search_preview",
        "mcp",
        "code_interpreter",
        "image_generation",
        "local_shell"
      ],
      "x-ms-enum": {
        "name": "ToolType",
        "modelAsString": true,
        "values": [
          {
            "name": "file_search",
            "value": "file_search"
          },
          {
            "name": "function",
            "value": "function"
          },
          {
            "name": "computer_use_preview",
            "value": "computer_use_preview"
          },
          {
            "name": "web_search_preview",
            "value": "web_search_preview"
          },
          {
            "name": "mcp",
            "value": "mcp"
          },
          {
            "name": "code_interpreter",
            "value": "code_interpreter"
          },
          {
            "name": "image_generation",
            "value": "image_generation"
          },
          {
            "name": "local_shell",
            "value": "local_shell"
          }
        ]
      }
    },
    "OpenAI.WebSearchPreviewTool": {
      "type": "object",
      "description": "This tool searches the web for relevant results to use in a response. Learn more about the [web search tool](https://platform.openai.com/docs/guides/tools-web-search).",
      "properties": {
        "user_location": {
          "$ref": "#/definitions/OpenAI.Location",
          "description": "The user's location.",
          "x-nullable": true
        },
        "search_context_size": {
          "type": "string",
          "description": "High level guidance for the amount of context window space to use for the search. One of `low`, `medium`, or `high`. `medium` is the default.",
          "enum": [
            "low",
            "medium",
            "high"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/OpenAI.Tool"
        }
      ],
      "x-ms-discriminator-value": "web_search_preview"
    },
    "PagedConnection": {
      "type": "object",
      "description": "Paged collection of Connection items",
      "properties": {
        "value": {
          "type": "array",
          "description": "The Connection items on this page",
          "items": {
            "$ref": "#/definitions/Connection"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "PagedDatasetVersion": {
      "type": "object",
      "description": "Paged collection of DatasetVersion items",
      "properties": {
        "value": {
          "type": "array",
          "description": "The DatasetVersion items on this page",
          "items": {
            "$ref": "#/definitions/DatasetVersion"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "PagedDeployment": {
      "type": "object",
      "description": "Paged collection of Deployment items",
      "properties": {
        "value": {
          "type": "array",
          "description": "The Deployment items on this page",
          "items": {
            "$ref": "#/definitions/Deployment"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "PagedEvaluation": {
      "type": "object",
      "description": "Paged collection of Evaluation items",
      "properties": {
        "value": {
          "type": "array",
          "description": "The Evaluation items on this page",
          "items": {
            "$ref": "#/definitions/Evaluation"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "PagedIndex": {
      "type": "object",
      "description": "Paged collection of Index items",
      "properties": {
        "value": {
          "type": "array",
          "description": "The Index items on this page",
          "items": {
            "$ref": "#/definitions/Index"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "PagedRedTeam": {
      "type": "object",
      "description": "Paged collection of RedTeam items",
      "properties": {
        "value": {
          "type": "array",
          "description": "The RedTeam items on this page",
          "items": {
            "$ref": "#/definitions/RedTeam"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "PendingUploadCredentialType": {
      "type": "string",
      "description": "The type of credential used to access the storage account.",
      "enum": [
        "SAS"
      ],
      "x-ms-enum": {
        "name": "PendingUploadCredentialType",
        "modelAsString": true,
        "values": [
          {
            "name": "sas",
            "value": "SAS",
            "description": "SAS credential type."
          }
        ]
      }
    },
    "PendingUploadRequest": {
      "type": "object",
      "description": "Represents a request for a pending upload.",
      "properties": {
        "pendingUploadId": {
          "type": "string",
          "description": "If PendingUploadId is not provided, a random GUID will be used."
        },
        "connectionName": {
          "type": "string",
          "description": "Azure Storage Account connection name to use for generating temporary SAS token"
        },
        "pendingUploadType": {
          "type": "string",
          "description": "BlobReference is the only supported type.",
          "enum": [
            "BlobReference"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        }
      },
      "required": [
        "pendingUploadType"
      ]
    },
    "PendingUploadResponse": {
      "type": "object",
      "description": "Represents the response for a pending upload request",
      "properties": {
        "blobReference": {
          "$ref": "#/definitions/BlobReference",
          "description": "Container-level read, write, list SAS."
        },
        "pendingUploadId": {
          "type": "string",
          "description": "ID for this upload request."
        },
        "version": {
          "type": "string",
          "description": "Version of asset to be created if user did not specify version when initially creating upload"
        },
        "pendingUploadType": {
          "type": "string",
          "description": "BlobReference is the only supported type",
          "enum": [
            "BlobReference"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        }
      },
      "required": [
        "blobReference",
        "pendingUploadId",
        "pendingUploadType"
      ]
    },
    "PendingUploadType": {
      "type": "string",
      "description": "The type of pending upload.",
      "enum": [
        "None",
        "BlobReference"
      ],
      "x-ms-enum": {
        "name": "PendingUploadType",
        "modelAsString": true,
        "values": [
          {
            "name": "none",
            "value": "None",
            "description": "No pending upload."
          },
          {
            "name": "BlobReference",
            "value": "BlobReference",
            "description": "Blob Reference is the only supported type."
          }
        ]
      }
    },
    "RedTeam": {
      "type": "object",
      "description": "Red team details.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier of the red team run.",
          "readOnly": true,
          "x-ms-client-name": "name"
        },
        "displayName": {
          "type": "string",
          "description": "Name of the red-team run."
        },
        "numTurns": {
          "type": "integer",
          "format": "int32",
          "description": "Number of simulation rounds."
        },
        "attackStrategies": {
          "type": "array",
          "description": "List of attack strategies or nested lists of attack strategies.",
          "items": {
            "$ref": "#/definitions/AttackStrategy"
          }
        },
        "simulationOnly": {
          "type": "boolean",
          "description": "Simulation-only or Simulation + Evaluation. Default false, if true the scan outputs conversation not evaluation result.",
          "default": false
        },
        "riskCategories": {
          "type": "array",
          "description": "List of risk categories to generate attack objectives for.",
          "items": {
            "$ref": "#/definitions/RiskCategory"
          }
        },
        "applicationScenario": {
          "type": "string",
          "description": "Application scenario for the red team operation, to generate scenario specific attacks."
        },
        "tags": {
          "type": "object",
          "description": "Red team's tags. Unlike properties, tags are fully mutable.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "type": "object",
          "description": "Red team's properties. Unlike tags, properties are add-only. Once added, a property cannot be removed.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "status": {
          "type": "string",
          "description": "Status of the red-team. It is set by service and is read-only.",
          "readOnly": true
        },
        "target": {
          "$ref": "#/definitions/TargetConfig",
          "description": "Target configuration for the red-team run."
        }
      },
      "required": [
        "id",
        "target"
      ]
    },
    "RiskCategory": {
      "type": "string",
      "description": "Risk category for the attack objective.",
      "enum": [
        "HateUnfairness",
        "Violence",
        "Sexual",
        "SelfHarm"
      ],
      "x-ms-enum": {
        "name": "RiskCategory",
        "modelAsString": true,
        "values": [
          {
            "name": "HateUnfairness",
            "value": "HateUnfairness",
            "description": "Represents content related to hate or unfairness."
          },
          {
            "name": "Violence",
            "value": "Violence",
            "description": "Represents content related to violence."
          },
          {
            "name": "Sexual",
            "value": "Sexual",
            "description": "Represents content of a sexual nature."
          },
          {
            "name": "SelfHarm",
            "value": "SelfHarm",
            "description": "Represents content related to self-harm."
          }
        ]
      }
    },
    "SASCredentials": {
      "type": "object",
      "description": "Shared Access Signature (SAS) credential definition",
      "properties": {
        "SAS": {
          "type": "string",
          "description": "SAS token",
          "readOnly": true,
          "x-ms-client-name": "sasToken"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/BaseCredentials"
        }
      ],
      "x-ms-discriminator-value": "SAS"
    },
    "SasCredential": {
      "type": "object",
      "description": "SAS Credential definition",
      "properties": {
        "sasUri": {
          "type": "string",
          "description": "SAS uri",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "Type of credential",
          "enum": [
            "SAS"
          ],
          "x-ms-enum": {
            "modelAsString": false
          },
          "readOnly": true
        }
      },
      "required": [
        "sasUri",
        "type"
      ]
    },
    "Sku": {
      "type": "object",
      "description": "Sku information",
      "properties": {
        "capacity": {
          "type": "integer",
          "format": "int64",
          "description": "Sku capacity"
        },
        "family": {
          "type": "string",
          "description": "Sku family"
        },
        "name": {
          "type": "string",
          "description": "Sku name"
        },
        "size": {
          "type": "string",
          "description": "Sku size"
        },
        "tier": {
          "type": "string",
          "description": "Sku tier"
        }
      },
      "required": [
        "capacity",
        "family",
        "name",
        "size",
        "tier"
      ]
    },
    "SystemMessage": {
      "type": "object",
      "description": "A message authored by the system to guide model behavior.",
      "properties": {
        "content": {
          "type": "string",
          "description": "Plain text instructions provided by the system to steer model behavior."
        }
      },
      "required": [
        "content"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        }
      ],
      "x-ms-discriminator-value": "system"
    },
    "TargetConfig": {
      "type": "object",
      "description": "Abstract class for target configuration.",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of the model configuration."
        }
      },
      "discriminator": "type",
      "required": [
        "type"
      ]
    },
    "UserMessage": {
      "type": "object",
      "description": "A message authored by the end user as input to the model.",
      "properties": {
        "content": {
          "type": "string",
          "description": "Input content or question provided by the end user."
        }
      },
      "required": [
        "content"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        }
      ],
      "x-ms-discriminator-value": "user"
    },
    "modelResponseGenerationTarget": {
      "type": "object",
      "description": "Evaluation target for generating responses using a given model and dataset.",
      "properties": {
        "baseMessages": {
          "type": "array",
          "description": "A list of messages comprising the conversation so far.",
          "items": {
            "$ref": "#/definitions/Message"
          }
        },
        "modelDeploymentName": {
          "type": "string",
          "description": "The model deployment to be evaluated. Accepts either the deployment name alone or with the connection name as '{connectionName}/modelDeploymentName'."
        },
        "modelParams": {
          "type": "object",
          "description": "Optional parameters passed to the model for evaluation.",
          "additionalProperties": {}
        }
      },
      "required": [
        "baseMessages",
        "modelDeploymentName",
        "modelParams"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/EvaluationTarget"
        }
      ],
      "x-ms-discriminator-value": "modelResponseGeneration"
    }
  },
  "parameters": {
    "Azure.Core.ClientRequestIdHeader": {
      "name": "x-ms-client-request-id",
      "in": "header",
      "description": "An opaque, globally-unique, client-generated string identifier for the request.",
      "required": false,
      "type": "string",
      "format": "uuid",
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "clientRequestId"
    },
    "Azure.Core.Foundations.ApiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "description": "The API version to use for this operation.",
      "required": true,
      "type": "string",
      "minLength": 1,
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "apiVersion"
    }
  }
}
