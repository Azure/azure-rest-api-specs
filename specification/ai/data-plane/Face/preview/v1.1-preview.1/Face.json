{
  "swagger": "2.0",
  "info": {
    "title": "Azure AI Face API",
    "version": "v1.1-preview.1",
    "x-typespec-generated": [
      {
        "emitter": "@azure-tools/typespec-autorest"
      }
    ]
  },
  "schemes": [
    "https"
  ],
  "x-ms-parameterized-host": {
    "hostTemplate": "{endpoint}/face/{apiVersion}",
    "useSchemePrefix": false,
    "parameters": [
      {
        "name": "endpoint",
        "in": "path",
        "description": "Supported Cognitive Services endpoints (protocol and hostname, for example:\nhttps://{resource-name}.cognitiveservices.azure.com).",
        "required": true,
        "type": "string",
        "format": "uri",
        "x-ms-skip-url-encoding": true
      },
      {
        "name": "apiVersion",
        "in": "path",
        "description": "API Version",
        "required": true,
        "type": "string",
        "enum": [
          "v1.1-preview.1"
        ],
        "x-ms-enum": {
          "name": "Versions",
          "modelAsString": true,
          "values": [
            {
              "name": "v1_1_preview_1",
              "value": "v1.1-preview.1",
              "description": "v1.1-preview.1"
            }
          ]
        }
      }
    ]
  },
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "security": [
    {
      "KeyAuth": []
    },
    {
      "AADToken": [
        "https://cognitiveservices.azure.com/.default"
      ]
    }
  ],
  "securityDefinitions": {
    "AADToken": {
      "type": "oauth2",
      "description": "The Azure Active Directory OAuth2 Flow",
      "flow": "accessCode",
      "authorizationUrl": "https://api.example.com/oauth2/authorize",
      "scopes": {
        "https://cognitiveservices.azure.com/.default": ""
      },
      "tokenUrl": "https://api.example.com/oauth2/token"
    },
    "KeyAuth": {
      "type": "apiKey",
      "description": "The secret key for your Azure AI Face subscription.",
      "name": "Ocp-Apim-Subscription-Key",
      "in": "header"
    }
  },
  "tags": [],
  "paths": {
    "/detect": {
      "post": {
        "operationId": "FaceDetectionOperations_DetectFromUrl",
        "summary": "Detect human faces in an image, return face rectangles, and optionally with faceIds, landmarks, and attributes.",
        "description": "> [!IMPORTANT]\n> To mitigate potential misuse that can subject people to stereotyping, discrimination, or unfair denial of services, we are retiring Face API attributes that predict emotion, gender, age, smile, facial hair, hair, and makeup. Read more about this decision https://azure.microsoft.com/blog/responsible-ai-investments-and-safeguards-for-facial-recognition/.\n\n*\n  * No image will be stored. Only the extracted face feature(s) will be stored on server. The faceId is an identifier of the face feature and will be used in \"Identify\", \"Verify\", and \"Find Similar\". The stored face features will expire and be deleted at the time specified by faceIdTimeToLive after the original detection call.\n  * Optional parameters include faceId, landmarks, and attributes. Attributes include headPose, glasses, occlusion, accessories, blur, exposure, noise, mask, and qualityForRecognition. Some of the results returned for specific attributes may not be highly accurate.\n  * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.\n  * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.\n  * Up to 100 faces can be returned for an image. Faces are ranked by face rectangle size from large to small.\n  * For optimal results when querying \"Identify\", \"Verify\", and \"Find Similar\" ('returnFaceId' is true), please use faces that are: frontal, clear, and with a minimum size of 200x200 pixels (100 pixels between eyes).\n  * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer to https://learn.microsoft.com/azure/ai-services/computer-vision/how-to/specify-detection-model\n    * 'detection_02': Face attributes and landmarks are disabled if you choose this detection model.\n    * 'detection_03': Face attributes (mask, blur, and headPose) and landmarks are supported if you choose this detection model.\n  * Different 'recognitionModel' values are provided. If follow-up operations like \"Verify\", \"Identify\", \"Find Similar\" are needed, please specify the recognition model with 'recognitionModel' parameter. The default value for 'recognitionModel' is 'recognition_01', if latest model needed, please explicitly specify the model you need in this parameter. Once specified, the detected faceIds will be associated with the specified recognition model. More details, please refer to https://learn.microsoft.com/azure/ai-services/computer-vision/how-to/specify-recognition-model.",
        "parameters": [
          {
            "name": "detectionModel",
            "in": "query",
            "description": "The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel' values include 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'.",
            "required": false,
            "type": "string",
            "default": "detection_01",
            "enum": [
              "detection_01",
              "detection_02",
              "detection_03"
            ],
            "x-ms-enum": {
              "name": "DetectionModel",
              "modelAsString": true,
              "values": [
                {
                  "name": "detection_01",
                  "value": "detection_01",
                  "description": "The default detection model. Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected."
                },
                {
                  "name": "detection_02",
                  "value": "detection_02",
                  "description": "Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces."
                },
                {
                  "name": "detection_03",
                  "value": "detection_03",
                  "description": "Detection model released in 2021 February with improved accuracy especially on small faces."
                }
              ]
            }
          },
          {
            "name": "recognitionModel",
            "in": "query",
            "description": "The 'recognitionModel' associated with the detected faceIds. Supported 'recognitionModel' values include 'recognition_01', 'recognition_02', 'recognition_03' or 'recognition_04'. The default value is 'recognition_01'. 'recognition_04' is recommended since its accuracy is improved on faces wearing masks compared with 'recognition_03', and its overall accuracy is improved compared with 'recognition_01' and 'recognition_02'.",
            "required": false,
            "type": "string",
            "default": "recognition_01",
            "enum": [
              "recognition_01",
              "recognition_02",
              "recognition_03",
              "recognition_04"
            ],
            "x-ms-enum": {
              "name": "RecognitionModel",
              "modelAsString": true,
              "values": [
                {
                  "name": "recognition_01",
                  "value": "recognition_01",
                  "description": "The default recognition model for \"Detect\". All those faceIds created before 2019 March are bonded with this recognition model."
                },
                {
                  "name": "recognition_02",
                  "value": "recognition_02",
                  "description": "Recognition model released in 2019 March."
                },
                {
                  "name": "recognition_03",
                  "value": "recognition_03",
                  "description": "Recognition model released in 2020 May."
                },
                {
                  "name": "recognition_04",
                  "value": "recognition_04",
                  "description": "Recognition model released in 2021 February. It's recommended to use this recognition model for better recognition accuracy."
                }
              ]
            }
          },
          {
            "name": "returnFaceId",
            "in": "query",
            "description": "Return faceIds of the detected faces or not. The default value is true.",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "returnFaceAttributes",
            "in": "query",
            "description": "Analyze and return the one or more specified face attributes in the comma-separated string like 'returnFaceAttributes=headPose,glasses'. Face attribute analysis has additional computational and time cost.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "headPose",
                "glasses",
                "occlusion",
                "accessories",
                "blur",
                "exposure",
                "noise",
                "mask",
                "qualityForRecognition",
                "age",
                "smile",
                "facialHair",
                "hair"
              ],
              "x-ms-enum": {
                "name": "FaceAttributeType",
                "modelAsString": true,
                "values": [
                  {
                    "name": "headPose",
                    "value": "headPose",
                    "description": "3-D roll/yaw/pitch angles for face direction."
                  },
                  {
                    "name": "glasses",
                    "value": "glasses",
                    "description": "Glasses type. Values include 'NoGlasses', 'ReadingGlasses', 'Sunglasses', 'SwimmingGoggles'."
                  },
                  {
                    "name": "occlusion",
                    "value": "occlusion",
                    "description": "Whether each facial area is occluded, including forehead, eyes and mouth."
                  },
                  {
                    "name": "accessories",
                    "value": "accessories",
                    "description": "Accessories around face, including 'headwear', 'glasses' and 'mask'. Empty array means no accessories detected. Note this is after a face is detected. Large mask could result in no face to be detected."
                  },
                  {
                    "name": "blur",
                    "value": "blur",
                    "description": "Face is blurry or not. Level returns 'Low', 'Medium' or 'High'. Value returns a number between [0,1], the larger the blurrier."
                  },
                  {
                    "name": "exposure",
                    "value": "exposure",
                    "description": "Face exposure level. Level returns 'GoodExposure', 'OverExposure' or 'UnderExposure'."
                  },
                  {
                    "name": "noise",
                    "value": "noise",
                    "description": "Noise level of face pixels. Level returns 'Low', 'Medium' and 'High'. Value returns a number between [0,1], the larger the noisier"
                  },
                  {
                    "name": "mask",
                    "value": "mask",
                    "description": "Whether each face is wearing a mask. Mask type returns 'noMask', 'faceMask', 'otherMaskOrOcclusion', or 'uncertain'. Value returns a boolean 'noseAndMouthCovered' indicating whether nose and mouth are covered."
                  },
                  {
                    "name": "qualityForRecognition",
                    "value": "qualityForRecognition",
                    "description": "The overall image quality regarding whether the image being used in the detection is of sufficient quality to attempt face recognition on. The value is an informal rating of low, medium, or high. Only 'high' quality images are recommended for person enrollment and quality at or above 'medium' is recommended for identification scenarios. The attribute is only available when using recognition models recognition_03 or recognition_04."
                  },
                  {
                    "name": "age",
                    "value": "age",
                    "description": "Age in years."
                  },
                  {
                    "name": "smile",
                    "value": "smile",
                    "description": "Smile intensity, a number between [0,1]."
                  },
                  {
                    "name": "facialHair",
                    "value": "facialHair",
                    "description": "Properties describing facial hair attributes."
                  },
                  {
                    "name": "hair",
                    "value": "hair",
                    "description": "Properties describing hair attributes."
                  }
                ]
              }
            },
            "collectionFormat": "csv"
          },
          {
            "name": "returnFaceLandmarks",
            "in": "query",
            "description": "Return face landmarks of the detected faces or not. The default value is false.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "returnRecognitionModel",
            "in": "query",
            "description": "Return 'recognitionModel' or not. The default value is false. This is only applicable when returnFaceId = true.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "faceIdTimeToLive",
            "in": "query",
            "description": "The number of seconds for the face ID being cached. Supported range from 60 seconds up to 86400 seconds. The default value is 86400 (24 hours).",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 86400,
            "minimum": 60,
            "maximum": 86400
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string",
                  "format": "uri",
                  "description": "URL of input image."
                }
              },
              "required": [
                "url"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an array of face entries ranked by face rectangle size in descending order. An empty response indicates no faces detected.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FaceDetectionResult"
              },
              "x-ms-identifiers": []
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Detect with Image URL": {
            "$ref": "./examples/DetectFromUrl.json"
          }
        }
      }
    },
    "/detectLiveness/singleModal/sessions": {
      "get": {
        "operationId": "LivenessSessionOperations_GetLivenessSessions",
        "summary": "Lists sessions for /detectLiveness/SingleModal.",
        "description": "List sessions from the last sessionId greater than the 'start'.\n\nThe result should be ordered by sessionId in ascending order.",
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "List resources greater than the \"start\". It contains no more than 64 characters. Default is empty.",
            "required": false,
            "type": "string"
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items to list, ranging in [1, 1000]. Default is 1000.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 1000,
            "minimum": 1,
            "maximum": 1000
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LivenessSessionItem"
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Get LivenessSessions": {
            "$ref": "./examples/LivenessSessionOperations_GetLivenessSessions.json"
          }
        }
      },
      "post": {
        "operationId": "LivenessSessionOperations_CreateLivenessSession",
        "summary": "Create a new detect liveness session.",
        "description": "A session is best for client device scenarios where developers want to authorize a client device to perform only a liveness detection without granting full access to their resource. Created sessions have a limited life span and only authorize clients to perform the desired action before access is expired.\n\nPermissions includes...\n>\n*\n  * Ability to call /detectLiveness/singleModal for up to 3 retries.\n  * A token lifetime of 10 minutes.\n\n> [!NOTE]\n> Client access can be revoked by deleting the session using the Delete Liveness Session operation. To retrieve a result, use the Get Liveness Session. To audit the individual requests that a client has made to your resource, use the List Liveness Session Audit Entries.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateLivenessSessionContent"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call create a session for a client device and provide an authorization token for use by the client application for a limited purpose and time.",
            "schema": {
              "$ref": "#/definitions/CreateLivenessSessionResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Create Liveness Session": {
            "$ref": "./examples/LivenessSessionOperations_CreateLivenessSession.json"
          }
        }
      }
    },
    "/detectLiveness/singleModal/sessions/{sessionId}": {
      "get": {
        "operationId": "LivenessSessionOperations_GetLivenessSessionResult",
        "description": "Get session result of detectLiveness/singleModal call.",
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "description": "The unique ID to reference this session.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/LivenessSession"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Get LivenessSession Result": {
            "$ref": "./examples/LivenessSessionOperations_GetLivenessSessionResult.json"
          }
        }
      },
      "delete": {
        "operationId": "LivenessSessionOperations_DeleteLivenessSession",
        "summary": "Delete all session related information for matching the specified session id.",
        "description": "> [!NOTE]\n> Deleting a session deactivates the Session Auth Token by blocking future API calls made with that Auth Token. While this can be used to remove any access for that token, those requests will still count towards overall resource rate limits. It's best to leverage TokenTTL to limit length of tokens in the case that it is misused.",
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "description": "The unique ID to reference this session.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Delete Liveness Session": {
            "$ref": "./examples/LivenessSessionOperations_DeleteLivenessSession.json"
          }
        }
      }
    },
    "/detectLiveness/singleModal/sessions/{sessionId}/audit": {
      "get": {
        "operationId": "LivenessSessionOperations_GetLivenessSessionAuditEntries",
        "description": "Gets session requests and response body for the session.",
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "description": "The unique ID to reference this session.",
            "required": true,
            "type": "string"
          },
          {
            "name": "start",
            "in": "query",
            "description": "List resources greater than the \"start\". It contains no more than 64 characters. Default is empty.",
            "required": false,
            "type": "string"
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items to list, ranging in [1, 1000]. Default is 1000.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 1000,
            "minimum": 1,
            "maximum": 1000
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LivenessSessionAuditEntry"
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Get LivenessSession Audit Entries": {
            "$ref": "./examples/LivenessSessionOperations_GetLivenessSessionAuditEntries.json"
          }
        }
      }
    },
    "/detectLivenessWithVerify/singleModal/sessions": {
      "get": {
        "operationId": "LivenessSessionOperations_GetLivenessWithVerifySessions",
        "summary": "Lists sessions for /detectLivenessWithVerify/SingleModal.",
        "description": "List sessions from the last sessionId greater than the \"start\".\n\nThe result should be ordered by sessionId in ascending order.",
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "List resources greater than the \"start\". It contains no more than 64 characters. Default is empty.",
            "required": false,
            "type": "string"
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items to list, ranging in [1, 1000]. Default is 1000.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 1000,
            "minimum": 1,
            "maximum": 1000
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LivenessSessionItem"
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Get LivenessWithVerify Sessions": {
            "$ref": "./examples/LivenessSessionOperations_GetLivenessWithVerifySessions.json"
          }
        }
      },
      "post": {
        "operationId": "LivenessSessionOperations_CreateLivenessWithVerifySessionWithVerifyImage",
        "summary": "Create a new liveness session with verify. Provide the verify image during session creation.",
        "description": "A session is best for client device scenarios where developers want to authorize a client device to perform only a liveness detection without granting full access to their resource. Created sessions have a limited life span and only authorize clients to perform the desired action before access is expired.\n\nPermissions includes...\n>\n*\n  * Ability to call /detectLivenessWithVerify/singleModal for up to 3 retries.\n  * A token lifetime of 10 minutes.\n\n> [!NOTE]\n>\n> *\n>   * Client access can be revoked by deleting the session using the Delete Liveness With Verify Session operation.\n>   * To retrieve a result, use the Get Liveness With Verify Session.\n>   * To audit the individual requests that a client has made to your resource, use the List Liveness With Verify Session Audit Entries.\n\nRecommended Option: VerifyImage is provided during session creation.",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/CreateLivenessWithVerifySessionContent.Parameters"
          },
          {
            "$ref": "#/parameters/CreateLivenessWithVerifySessionContent.VerifyImage"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call create a session for a client device and provide an authorization token for use by the client application for a limited purpose and time.",
            "schema": {
              "$ref": "#/definitions/CreateLivenessWithVerifySessionResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Create LivenessWithVerify Session with VerifyImage": {
            "$ref": "./examples/LivenessSessionOperations_CreateLivenessWithVerifySessionWithVerifyImage.json"
          }
        }
      }
    },
    "/detectLivenessWithVerify/singleModal/sessions/{sessionId}": {
      "get": {
        "operationId": "LivenessSessionOperations_GetLivenessWithVerifySessionResult",
        "description": "Get session result of detectLivenessWithVerify/singleModal call.",
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "description": "The unique ID to reference this session.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/LivenessWithVerifySession"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Get LivenessWithVerify Session Result": {
            "$ref": "./examples/LivenessSessionOperations_GetLivenessWithVerifySessionResult.json"
          }
        }
      },
      "delete": {
        "operationId": "LivenessSessionOperations_DeleteLivenessWithVerifySession",
        "summary": "Delete all session related information for matching the specified session id.",
        "description": "> [!NOTE]\n> Deleting a session deactivates the Session Auth Token by blocking future API calls made with that Auth Token. While this can be used to remove any access for that token, those requests will still count towards overall resource rate limits. It's best to leverage TokenTTL to limit length of tokens in the case that it is misused.",
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "description": "The unique ID to reference this session.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Delete LivenessWithVerify Session": {
            "$ref": "./examples/LivenessSessionOperations_DeleteLivenessWithVerifySession.json"
          }
        }
      }
    },
    "/detectLivenessWithVerify/singleModal/sessions/{sessionId}/audit": {
      "get": {
        "operationId": "LivenessSessionOperations_GetLivenessWithVerifySessionAuditEntries",
        "description": "Gets session requests and response body for the session.",
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "description": "The unique ID to reference this session.",
            "required": true,
            "type": "string"
          },
          {
            "name": "start",
            "in": "query",
            "description": "List resources greater than the \"start\". It contains no more than 64 characters. Default is empty.",
            "required": false,
            "type": "string"
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items to list, ranging in [1, 1000]. Default is 1000.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 1000,
            "minimum": 1,
            "maximum": 1000
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LivenessSessionAuditEntry"
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Get LivenessWithVerify Session Audit Entries": {
            "$ref": "./examples/LivenessSessionOperations_GetLivenessWithVerifySessionAuditEntries.json"
          }
        }
      }
    },
    "/dynamicpersongroups": {
      "get": {
        "operationId": "PersonDirectoryOperations_GetDynamicPersonGroups",
        "summary": "List all existing Dynamic Person Groups by dynamicPersonGroupId along with name and userData.",
        "description": "Dynamic Person Groups are stored in alphabetical order of dynamicPersonGroupId.\n>\n*\n  * \"start\" parameter (string, optional) specifies an ID value from which returned entries will have larger IDs based on string comparison. Setting \"start\" to an empty value indicates that entries should be returned starting from the first item.\n  * \"top\" parameter (int, optional) determines the maximum number of entries to be returned, with a limit of up to 1000 entries per call. To retrieve additional entries beyond this limit, specify \"start\" with the personId of the last entry returned in the current call.\n\n> [!TIP]\n>\n> * For example, there are total 5 items with their IDs: \"itemId1\", ..., \"itemId5\".\n>   * \"start=&top=\" will return all 5 items.\n>   * \"start=&top=2\" will return \"itemId1\", \"itemId2\".\n>   * \"start=itemId2&top=3\" will return \"itemId3\", \"itemId4\", \"itemId5\".",
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "List resources greater than the \"start\". It contains no more than 64 characters. Default is empty.",
            "required": false,
            "type": "string"
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items to list, ranging in [1, 1000]. Default is 1000.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 1000,
            "minimum": 1,
            "maximum": 1000
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an array of Dynamic Person Groups and their information (dynamicPersonGroupId, name and userData).",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DynamicPersonGroup"
              },
              "x-ms-identifiers": []
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Get DynamicPersonGroups": {
            "$ref": "./examples/PersonDirectoryOperations_GetDynamicPersonGroups.json"
          }
        }
      }
    },
    "/dynamicpersongroups/{dynamicPersonGroupId}": {
      "get": {
        "operationId": "PersonDirectoryOperations_GetDynamicPersonGroup",
        "summary": "Retrieve the information of a Dynamic Person Group, including its name and userData.",
        "description": "This API returns Dynamic Person Group information only, use Person Directory \"Get Dynamic Person Group Persons\" instead to retrieve person information under the Dynamic Person Group.",
        "parameters": [
          {
            "name": "dynamicPersonGroupId",
            "in": "path",
            "description": "ID of the dynamic person group.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-z0-9-_]+$"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the Dynamic Person Group's information.",
            "schema": {
              "$ref": "#/definitions/DynamicPersonGroup"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Get DynamicPersonGroup": {
            "$ref": "./examples/PersonDirectoryOperations_GetDynamicPersonGroup.json"
          }
        }
      },
      "put": {
        "operationId": "PersonDirectoryOperations_CreateDynamicPersonGroupWithPerson",
        "summary": "Creates a new Dynamic Person Group with specified dynamicPersonGroupId, name, and user-provided userData.",
        "description": "A Dynamic Person Group is a container that references Person Directory \"Create Person\". After creation, use Person Directory \"Update Dynamic Person Group\" to add/remove persons to/from the Dynamic Person Group.\n\nDynamic Person Group and user data will be stored on server until Person Directory \"Delete Dynamic Person Group\" is called. Use \"Identify From Dynamic Person Group\" with the dynamicPersonGroupId parameter to identify against persons.\n\nNo image will be stored. Only the person's extracted face feature(s) and userData will be stored on server until Person Directory \"Delete Person\" or \"Delete Person Face\" is called.\n\n'recognitionModel' does not need to be specified with Dynamic Person Groups. Dynamic Person Groups are references to Person Directory \"Create Person\" and therefore work with most all 'recognitionModels'. The faceId's provided during \"Identify\" determine the 'recognitionModel' used.",
        "parameters": [
          {
            "name": "dynamicPersonGroupId",
            "in": "path",
            "description": "ID of the dynamic person group.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-z0-9-_]+$"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "User defined name, maximum length is 128.",
                  "minLength": 1,
                  "maxLength": 128
                },
                "userData": {
                  "type": "string",
                  "description": "Optional user defined data. Length should not exceed 16K.",
                  "maxLength": 16384
                },
                "addPersonIds": {
                  "type": "array",
                  "description": "Array of personIds created by Person Directory \"Create Person\" to be added.",
                  "minItems": 1,
                  "items": {
                    "$ref": "#/definitions/Azure.Core.uuid"
                  }
                }
              },
              "required": [
                "name",
                "addPersonIds"
              ]
            }
          }
        ],
        "responses": {
          "202": {
            "description": "A successful call returns an empty response body. The service has accepted the request and will start processing soon. The client can query the operation status and result using the URL specified in the 'Operation-Location' response header. The URL expires in 48 hours. The URL provides the status of when Person Directory \"Get Dynamic Person Group References\" will return the changes made in this request.",
            "headers": {
              "operation-Location": {
                "type": "string",
                "format": "uri",
                "description": "The location of an instance of OperationResult"
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Create DynamicPersonGroup": {
            "$ref": "./examples/PersonDirectoryOperations_CreateDynamicPersonGroupWithPerson.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "patch": {
        "operationId": "PersonDirectoryOperations_UpdateDynamicPersonGroupWithPersonChanges",
        "summary": "Update the name or userData of an existing Dynamic Person Group, and manage its members by adding or removing persons.",
        "description": "The properties keep unchanged if they are not in request body.",
        "parameters": [
          {
            "name": "dynamicPersonGroupId",
            "in": "path",
            "description": "ID of the dynamic person group.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-z0-9-_]+$"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "User defined name, maximum length is 128.",
                  "minLength": 1,
                  "maxLength": 128
                },
                "userData": {
                  "type": "string",
                  "description": "Optional user defined data. Length should not exceed 16K.",
                  "maxLength": 16384
                },
                "addPersonIds": {
                  "type": "array",
                  "description": "Array of personIds created by Person Directory \"Create Person\" to be added.",
                  "items": {
                    "$ref": "#/definitions/Azure.Core.uuid"
                  }
                },
                "removePersonIds": {
                  "type": "array",
                  "description": "Array of personIds created by Person Directory \"Create Person\" to be removed.",
                  "items": {
                    "$ref": "#/definitions/Azure.Core.uuid"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "A successful call returns an empty response body. The service has accepted the request and will start processing soon. The client can query the operation status and result using the URL specified in the 'Operation-Location' response header. The URL expires in 48 hours. The URL provides the status of when Person Directory \"Get Dynamic Person Group References\" will return the changes made in this request.",
            "headers": {
              "operation-Location": {
                "type": "string",
                "format": "uri",
                "description": "The location of an instance of OperationResult"
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Update DynamicPersonGroup": {
            "$ref": "./examples/PersonDirectoryOperations_UpdateDynamicPersonGroupWithPersonChanges.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "delete": {
        "operationId": "PersonDirectoryOperations_DeleteDynamicPersonGroup",
        "summary": "Deletes an existing Dynamic Person Group with specified dynamicPersonGroupId.",
        "description": "Deleting this Dynamic Person Group only delete the references to persons data. To delete actual person see Person Directory \"Delete Person\".",
        "parameters": [
          {
            "name": "dynamicPersonGroupId",
            "in": "path",
            "description": "ID of the dynamic person group.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-z0-9-_]+$"
          }
        ],
        "responses": {
          "202": {
            "description": "A successful call returns an empty response body. The service has accepted the request and will start processing soon. The client can query the operation status and result using the URL specified in the 'Operation-Location' response header. The URL expires in 48 hours. The URL provides the status of when Person Directory \"Get Dynamic Person Group References\" will return the changes made in this request.",
            "headers": {
              "operation-Location": {
                "type": "string",
                "format": "uri",
                "description": "The location of an instance of OperationResult"
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Delete DynamicPersonGroup": {
            "$ref": "./examples/PersonDirectoryOperations_DeleteDynamicPersonGroup.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/dynamicpersongroups/{dynamicPersonGroupId}/persons": {
      "get": {
        "operationId": "PersonDirectoryOperations_GetDynamicPersonGroupPersons",
        "summary": "List all persons in the specified Dynamic Person Group.",
        "description": "Persons are stored in alphabetical order of personId created in Person Directory \"Create Person\".\n>\n*\n  * \"start\" parameter (string, optional) specifies an ID value from which returned entries will have larger IDs based on string comparison. Setting \"start\" to an empty value indicates that entries should be returned starting from the first item.\n  * \"top\" parameter (int, optional) determines the maximum number of entries to be returned, with a limit of up to 1000 entries per call. To retrieve additional entries beyond this limit, specify \"start\" with the personId of the last entry returned in the current call.\n\n> [!TIP]\n>\n> * For example, there are total 5 items with their IDs: \"itemId1\", ..., \"itemId5\".\n>   * \"start=&top=\" will return all 5 items.\n>   * \"start=&top=2\" will return \"itemId1\", \"itemId2\".\n>   * \"start=itemId2&top=3\" will return \"itemId3\", \"itemId4\", \"itemId5\".",
        "parameters": [
          {
            "name": "dynamicPersonGroupId",
            "in": "path",
            "description": "ID of the dynamic person group.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-z0-9-_]+$"
          },
          {
            "name": "start",
            "in": "query",
            "description": "List resources greater than the \"start\". It contains no more than 64 characters. Default is empty.",
            "required": false,
            "type": "string"
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items to list, ranging in [1, 1000]. Default is 1000.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 1000,
            "minimum": 1,
            "maximum": 1000
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an array of person information in the Person Directory.",
            "schema": {
              "$ref": "#/definitions/ListPersonResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Get DynamicPersonGroup Persons": {
            "$ref": "./examples/PersonDirectoryOperations_GetDynamicPersonGroupPersons.json"
          }
        }
      }
    },
    "/facelists": {
      "get": {
        "operationId": "FaceListOperations_GetFaceLists",
        "description": "List Face Lists' faceListId, name, userData and recognitionModel.\n\nTo get face information inside Face List use \"Get Face List\".",
        "parameters": [
          {
            "name": "returnRecognitionModel",
            "in": "query",
            "description": "Return 'recognitionModel' or not. The default value is false.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an array of Face Lists.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FaceListItem"
              },
              "x-ms-identifiers": []
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Get FaceLists": {
            "$ref": "./examples/FaceListOperations_GetFaceLists.json"
          }
        }
      }
    },
    "/facelists/{faceListId}": {
      "get": {
        "operationId": "FaceListOperations_GetFaceList",
        "description": "Retrieve a Face List's faceListId, name, userData, recognitionModel and faces in the Face List.",
        "parameters": [
          {
            "name": "faceListId",
            "in": "path",
            "description": "Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-z0-9-_]+$"
          },
          {
            "name": "returnRecognitionModel",
            "in": "query",
            "description": "Return 'recognitionModel' or not. The default value is false.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the Face List's information.",
            "schema": {
              "$ref": "#/definitions/FaceList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Get FaceList": {
            "$ref": "./examples/FaceListOperations_GetFaceList.json"
          }
        }
      },
      "put": {
        "operationId": "FaceListOperations_CreateFaceList",
        "summary": "Create an empty Face List with user-specified faceListId, name, an optional userData and recognitionModel.",
        "description": "Up to 64 Face Lists are allowed in one subscription.\n\nFace List is a list of faces, up to 1,000 faces, and used by \"Find Similar From Face List\".\n\nAfter creation, user should use \"Add Face List Face\" to import the faces. No image will be stored. Only the extracted face feature(s) will be stored on server until \"Delete Face List\" is called.\n\n\"Find Similar\" is used for scenario like finding celebrity-like faces, similar face filtering, or as a light way face identification. But if the actual use is to identify person, please use Person Group / Large Person Group and \"Identify\".\n\nPlease consider Large Face List when the face number is large. It can support up to 1,000,000 faces.",
        "parameters": [
          {
            "name": "faceListId",
            "in": "path",
            "description": "Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-z0-9-_]+$"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "User defined name, maximum length is 128.",
                  "minLength": 1,
                  "maxLength": 128
                },
                "userData": {
                  "type": "string",
                  "description": "Optional user defined data. Length should not exceed 16K.",
                  "maxLength": 16384
                },
                "recognitionModel": {
                  "type": "string",
                  "description": "The 'recognitionModel' associated with this face list. Supported 'recognitionModel' values include 'recognition_01', 'recognition_02, 'recognition_03', and 'recognition_04'. The default value is 'recognition_01'. 'recognition_04' is recommended since its accuracy is improved on faces wearing masks compared with 'recognition_03', and its overall accuracy is improved compared with 'recognition_01' and 'recognition_02'.",
                  "default": "recognition_01",
                  "enum": [
                    "recognition_01",
                    "recognition_02",
                    "recognition_03",
                    "recognition_04"
                  ],
                  "x-ms-enum": {
                    "name": "RecognitionModel",
                    "modelAsString": true,
                    "values": [
                      {
                        "name": "recognition_01",
                        "value": "recognition_01",
                        "description": "The default recognition model for \"Detect\". All those faceIds created before 2019 March are bonded with this recognition model."
                      },
                      {
                        "name": "recognition_02",
                        "value": "recognition_02",
                        "description": "Recognition model released in 2019 March."
                      },
                      {
                        "name": "recognition_03",
                        "value": "recognition_03",
                        "description": "Recognition model released in 2020 May."
                      },
                      {
                        "name": "recognition_04",
                        "value": "recognition_04",
                        "description": "Recognition model released in 2021 February. It's recommended to use this recognition model for better recognition accuracy."
                      }
                    ]
                  }
                }
              },
              "required": [
                "name"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Create FaceList": {
            "$ref": "./examples/FaceListOperations_CreateFaceList.json"
          }
        }
      },
      "patch": {
        "operationId": "FaceListOperations_UpdateFaceList",
        "description": "Update information of a Face List, including name and userData.",
        "parameters": [
          {
            "name": "faceListId",
            "in": "path",
            "description": "Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-z0-9-_]+$"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "User defined name, maximum length is 128.",
                  "minLength": 1,
                  "maxLength": 128
                },
                "userData": {
                  "type": "string",
                  "description": "Optional user defined data. Length should not exceed 16K.",
                  "maxLength": 16384
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Update FaceList": {
            "$ref": "./examples/FaceListOperations_UpdateFaceList.json"
          }
        }
      },
      "delete": {
        "operationId": "FaceListOperations_DeleteFaceList",
        "description": "Delete a specified Face List.",
        "parameters": [
          {
            "name": "faceListId",
            "in": "path",
            "description": "Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-z0-9-_]+$"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Delete FaceList": {
            "$ref": "./examples/FaceListOperations_DeleteFaceList.json"
          }
        }
      }
    },
    "/facelists/{faceListId}/persistedfaces": {
      "post": {
        "operationId": "FaceListOperations_AddFaceListFaceFromUrl",
        "summary": "Add a face to a specified Face List, up to 1,000 faces.",
        "description": "To deal with an image containing multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted face feature(s) will be stored on server until \"Delete Face List Face\" or \"Delete Face List\" is called.\n\nNote that persistedFaceId is different from faceId generated by \"Detect\".\n>\n*\n  * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.\n  * Each person entry can hold up to 248 faces.\n  * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.\n  * \"targetFace\" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided \"targetFace\" rectangle is not returned from \"Detect\", there's no guarantee to detect and add the face successfully.\n  * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures.\n  * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.\n  * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer to https://learn.microsoft.com/azure/ai-services/computer-vision/how-to/specify-detection-model",
        "parameters": [
          {
            "name": "faceListId",
            "in": "path",
            "description": "Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-z0-9-_]+$"
          },
          {
            "name": "targetFace",
            "in": "query",
            "description": "A face rectangle to specify the target face to be added to a person, in the format of 'targetFace=left,top,width,height'.",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "csv",
            "minItems": 4,
            "maxItems": 4
          },
          {
            "name": "detectionModel",
            "in": "query",
            "description": "The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel' values include 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'.",
            "required": false,
            "type": "string",
            "default": "detection_01",
            "enum": [
              "detection_01",
              "detection_02",
              "detection_03"
            ],
            "x-ms-enum": {
              "name": "DetectionModel",
              "modelAsString": true,
              "values": [
                {
                  "name": "detection_01",
                  "value": "detection_01",
                  "description": "The default detection model. Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected."
                },
                {
                  "name": "detection_02",
                  "value": "detection_02",
                  "description": "Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces."
                },
                {
                  "name": "detection_03",
                  "value": "detection_03",
                  "description": "Detection model released in 2021 February with improved accuracy especially on small faces."
                }
              ]
            }
          },
          {
            "name": "userData",
            "in": "query",
            "description": "User-provided data attached to the face. The size limit is 1K.",
            "required": false,
            "type": "string",
            "maxLength": 1024
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string",
                  "format": "uri",
                  "description": "URL of input image."
                }
              },
              "required": [
                "url"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns a new persistedFaceId.",
            "schema": {
              "$ref": "#/definitions/AddFaceResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Add Face to FaceList from Url": {
            "$ref": "./examples/FaceListOperations_AddFaceListFaceFromUrl.json"
          }
        }
      }
    },
    "/facelists/{faceListId}/persistedfaces/{persistedFaceId}": {
      "delete": {
        "operationId": "FaceListOperations_DeleteFaceListFace",
        "summary": "Delete a face from a Face List by specified faceListId and persistedFaceId.",
        "description": "Adding/deleting faces to/from a same Face List are processed sequentially and to/from different Face Lists are in parallel.",
        "parameters": [
          {
            "name": "faceListId",
            "in": "path",
            "description": "Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-z0-9-_]+$"
          },
          {
            "name": "persistedFaceId",
            "in": "path",
            "description": "Face ID of the face.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Delete Face from FaceList": {
            "$ref": "./examples/FaceListOperations_DeleteFaceListFace.json"
          }
        }
      }
    },
    "/findsimilars": {
      "post": {
        "operationId": "FaceRecognitionOperations_FindSimilar",
        "summary": "Given query face's faceId, to search the similar-looking faces from a faceId array. A faceId array contains the faces created by Detect.",
        "description": "Depending on the input the returned similar faces list contains faceIds or persistedFaceIds ranked by similarity.\n\nFind similar has two working modes, \"matchPerson\" and \"matchFace\". \"matchPerson\" is the default mode that it tries to find faces of the same person as possible by using internal same-person thresholds. It is useful to find a known person's other photos. Note that an empty list will be returned if no faces pass the internal thresholds. \"matchFace\" mode ignores same-person thresholds and returns ranked similar faces anyway, even the similarity is low. It can be used in the cases like searching celebrity-looking faces.\n\nThe 'recognitionModel' associated with the query faceId should be the same as the 'recognitionModel' used by the target faceId array.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "faceId": {
                  "$ref": "#/definitions/Azure.Core.uuid",
                  "description": "faceId of the query face. User needs to call \"Detect\" first to get a valid faceId. Note that this faceId is not persisted and will expire 24 hours after the detection call."
                },
                "maxNumOfCandidatesReturned": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The number of top similar faces returned. The valid range is [1, 1000]. Default value is 20.",
                  "default": 20,
                  "minimum": 1,
                  "maximum": 1000
                },
                "mode": {
                  "type": "string",
                  "description": "Similar face searching mode. It can be 'matchPerson' or 'matchFace'. Default value is 'matchPerson'.",
                  "default": "matchPerson",
                  "enum": [
                    "matchPerson",
                    "matchFace"
                  ],
                  "x-ms-enum": {
                    "name": "FindSimilarMatchMode",
                    "modelAsString": true,
                    "values": [
                      {
                        "name": "matchPerson",
                        "value": "matchPerson",
                        "description": "Match person."
                      },
                      {
                        "name": "matchFace",
                        "value": "matchFace",
                        "description": "Match face."
                      }
                    ]
                  }
                },
                "faceIds": {
                  "type": "array",
                  "description": "An array of candidate faceIds. All of them are created by \"Detect\" and the faceIds will expire 24 hours after the detection call. The number of faceIds is limited to 1000.",
                  "items": {
                    "$ref": "#/definitions/Azure.Core.uuid"
                  }
                }
              },
              "required": [
                "faceId",
                "faceIds"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an array of the most similar faces represented in faceId if the input parameter is faceIds or persistedFaceId if the input parameter is faceListId or largeFaceListId.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FindSimilarResult"
              },
              "x-ms-identifiers": []
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Find Similar among Face IDs": {
            "$ref": "./examples/FaceRecognitionOperations_FindSimilar.json"
          }
        }
      }
    },
    "/group": {
      "post": {
        "operationId": "FaceRecognitionOperations_Group",
        "summary": "Divide candidate faces into groups based on face similarity.",
        "description": ">\n*\n  * The output is one or more disjointed face groups and a messyGroup. A face group contains faces that have similar looking, often of the same person. Face groups are ranked by group size, i.e. number of faces. Notice that faces belonging to a same person might be split into several groups in the result.\n  * MessyGroup is a special face group containing faces that cannot find any similar counterpart face from original faces. The messyGroup will not appear in the result if all faces found their counterparts.\n  * Group API needs at least 2 candidate faces and 1000 at most. We suggest to try \"Verify Face To Face\" when you only have 2 candidate faces.\n  * The 'recognitionModel' associated with the query faces' faceIds should be the same.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "faceIds": {
                  "type": "array",
                  "description": "Array of candidate faceIds created by \"Detect\". The maximum is 1000 faces.",
                  "items": {
                    "$ref": "#/definitions/Azure.Core.uuid"
                  }
                }
              },
              "required": [
                "faceIds"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns one or more groups of similar faces (rank by group size) and a messyGroup.",
            "schema": {
              "$ref": "#/definitions/GroupingResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Group Face IDs": {
            "$ref": "./examples/FaceRecognitionOperations_Group.json"
          }
        }
      }
    },
    "/identify": {
      "post": {
        "operationId": "FaceRecognitionOperations_IdentifyFromPersonGroup",
        "summary": "1-to-many identification to find the closest matches of the specific query person face from a Person Group.",
        "description": "For each face in the faceIds array, Face Identify will compute similarities between the query face and all the faces in the Person Group (given by personGroupId), and return candidate person(s) for that face ranked by similarity confidence. The Person Group should be trained to make it ready for identification. See more in \"Train Person Group\".\n> [!NOTE]\n>\n> *\n>   * The algorithm allows more than one face to be identified independently at the same request, but no more than 10 faces.\n>   * Each person could have more than one face, but no more than 248 faces.\n>   * Higher face image quality means better identification precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.\n>   * Number of candidates returned is restricted by maxNumOfCandidatesReturned and confidenceThreshold. If no person is identified, the returned candidates will be an empty array.\n>   * Try \"Find Similar\" when you need to find similar faces from a Face List/Large Face List instead of a Person Group.\n>   * The 'recognitionModel' associated with the query faces' faceIds should be the same as the 'recognitionModel' used by the target Person Group.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "faceIds": {
                  "type": "array",
                  "description": "Array of query faces faceIds, created by the \"Detect\". Each of the faces are identified independently. The valid number of faceIds is between [1, 10].",
                  "minItems": 1,
                  "maxItems": 10,
                  "items": {
                    "$ref": "#/definitions/Azure.Core.uuid"
                  }
                },
                "personGroupId": {
                  "type": "string",
                  "description": "personGroupId of the target Person Group, created by \"Create Person Group\". Parameter personGroupId and largePersonGroupId should not be provided at the same time."
                },
                "maxNumOfCandidatesReturned": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The range of maxNumOfCandidatesReturned is between 1 and 100. Default value is 10.",
                  "default": 10,
                  "minimum": 1,
                  "maximum": 100
                },
                "confidenceThreshold": {
                  "type": "number",
                  "format": "float",
                  "description": "Customized identification confidence threshold, in the range of [0, 1]. Advanced user can tweak this value to override default internal threshold for better precision on their scenario data. Note there is no guarantee of this threshold value working on other data and after algorithm updates.",
                  "minimum": 0,
                  "maximum": 1
                }
              },
              "required": [
                "faceIds",
                "personGroupId"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the identified candidate person(s) for each query face.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/IdentificationResult"
              },
              "x-ms-identifiers": []
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Identify from PersonGroup": {
            "$ref": "./examples/FaceRecognitionOperations_IdentifyFromPersonGroup.json"
          }
        }
      }
    },
    "/largefacelists": {
      "get": {
        "operationId": "FaceListOperations_GetLargeFaceLists",
        "summary": "List Large Face Lists' information of largeFaceListId, name, userData and recognitionModel.",
        "description": "To get face information inside largeFaceList use \"Get Large Face List Face\".\n\nLarge Face Lists are stored in alphabetical order of largeFaceListId.\n>\n*\n  * \"start\" parameter (string, optional) specifies an ID value from which returned entries will have larger IDs based on string comparison. Setting \"start\" to an empty value indicates that entries should be returned starting from the first item.\n  * \"top\" parameter (int, optional) determines the maximum number of entries to be returned, with a limit of up to 1000 entries per call. To retrieve additional entries beyond this limit, specify \"start\" with the personId of the last entry returned in the current call.\n\n> [!TIP]\n>\n> * For example, there are total 5 items with their IDs: \"itemId1\", ..., \"itemId5\".\n>   * \"start=&top=\" will return all 5 items.\n>   * \"start=&top=2\" will return \"itemId1\", \"itemId2\".\n>   * \"start=itemId2&top=3\" will return \"itemId3\", \"itemId4\", \"itemId5\".",
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "List resources greater than the \"start\". It contains no more than 64 characters. Default is empty.",
            "required": false,
            "type": "string"
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items to list, ranging in [1, 1000]. Default is 1000.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 1000,
            "minimum": 1,
            "maximum": 1000
          },
          {
            "name": "returnRecognitionModel",
            "in": "query",
            "description": "Return 'recognitionModel' or not. The default value is false.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an array of Large Face Lists and their information (largeFaceListId, name and userData).",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LargeFaceList"
              },
              "x-ms-identifiers": []
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Get LargeFaceLists": {
            "$ref": "./examples/FaceListOperations_GetLargeFaceLists.json"
          }
        }
      }
    },
    "/largefacelists/{largeFaceListId}": {
      "get": {
        "operationId": "FaceListOperations_GetLargeFaceList",
        "description": "Retrieve a Large Face List's largeFaceListId, name, userData and recognitionModel.",
        "parameters": [
          {
            "name": "largeFaceListId",
            "in": "path",
            "description": "Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-z0-9-_]+$"
          },
          {
            "name": "returnRecognitionModel",
            "in": "query",
            "description": "Return 'recognitionModel' or not. The default value is false.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the Large Face List's information.",
            "schema": {
              "$ref": "#/definitions/LargeFaceList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Get LargeFaceList": {
            "$ref": "./examples/FaceListOperations_GetLargeFaceList.json"
          }
        }
      },
      "put": {
        "operationId": "FaceListOperations_CreateLargeFaceList",
        "summary": "Create an empty Large Face List with user-specified largeFaceListId, name, an optional userData and recognitionModel.",
        "description": "Large Face List is a list of faces, up to 1,000,000 faces, and used by \"Find Similar From Large Face List\".\n\nAfter creation, user should use Add Large Face List Face to import the faces and Train Large Face List to make it ready for \"Find Similar\". No image will be stored. Only the extracted face feature(s) will be stored on server until Delete Large Face List is called.\n\n\"Find Similar\" is used for scenario like finding celebrity-like faces, similar face filtering, or as a light way face identification. But if the actual use is to identify person, please use Person Group / Large Person Group and \"Identify\".\n\n> [!NOTE]\n>\n> *\n>   * Free-tier subscription quota: 64 Large Face Lists.\n>   * S0-tier subscription quota: 1,000,000 Large Face Lists.",
        "parameters": [
          {
            "name": "largeFaceListId",
            "in": "path",
            "description": "Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-z0-9-_]+$"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "User defined name, maximum length is 128.",
                  "minLength": 1,
                  "maxLength": 128
                },
                "userData": {
                  "type": "string",
                  "description": "Optional user defined data. Length should not exceed 16K.",
                  "maxLength": 16384
                },
                "recognitionModel": {
                  "type": "string",
                  "description": "The 'recognitionModel' associated with this face list. Supported 'recognitionModel' values include 'recognition_01', 'recognition_02, 'recognition_03', and 'recognition_04'. The default value is 'recognition_01'. 'recognition_04' is recommended since its accuracy is improved on faces wearing masks compared with 'recognition_03', and its overall accuracy is improved compared with 'recognition_01' and 'recognition_02'.",
                  "default": "recognition_01",
                  "enum": [
                    "recognition_01",
                    "recognition_02",
                    "recognition_03",
                    "recognition_04"
                  ],
                  "x-ms-enum": {
                    "name": "RecognitionModel",
                    "modelAsString": true,
                    "values": [
                      {
                        "name": "recognition_01",
                        "value": "recognition_01",
                        "description": "The default recognition model for \"Detect\". All those faceIds created before 2019 March are bonded with this recognition model."
                      },
                      {
                        "name": "recognition_02",
                        "value": "recognition_02",
                        "description": "Recognition model released in 2019 March."
                      },
                      {
                        "name": "recognition_03",
                        "value": "recognition_03",
                        "description": "Recognition model released in 2020 May."
                      },
                      {
                        "name": "recognition_04",
                        "value": "recognition_04",
                        "description": "Recognition model released in 2021 February. It's recommended to use this recognition model for better recognition accuracy."
                      }
                    ]
                  }
                }
              },
              "required": [
                "name"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Create LargeFaceList": {
            "$ref": "./examples/FaceListOperations_CreateLargeFaceList.json"
          }
        }
      },
      "patch": {
        "operationId": "FaceListOperations_UpdateLargeFaceList",
        "description": "Update information of a Large Face List, including name and userData.",
        "parameters": [
          {
            "name": "largeFaceListId",
            "in": "path",
            "description": "Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-z0-9-_]+$"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "User defined name, maximum length is 128.",
                  "minLength": 1,
                  "maxLength": 128
                },
                "userData": {
                  "type": "string",
                  "description": "Optional user defined data. Length should not exceed 16K.",
                  "maxLength": 16384
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Update LargeFaceList": {
            "$ref": "./examples/FaceListOperations_UpdateLargeFaceList.json"
          }
        }
      },
      "delete": {
        "operationId": "FaceListOperations_DeleteLargeFaceList",
        "summary": "Delete a face from a Large Face List by specified largeFaceListId and persistedFaceId.",
        "description": "Adding/deleting faces to/from a same Large Face List are processed sequentially and to/from different Large Face Lists are in parallel.",
        "parameters": [
          {
            "name": "largeFaceListId",
            "in": "path",
            "description": "Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-z0-9-_]+$"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Delete LargeFaceList": {
            "$ref": "./examples/FaceListOperations_DeleteLargeFaceList.json"
          }
        }
      }
    },
    "/largefacelists/{largeFaceListId}/persistedfaces": {
      "get": {
        "operationId": "FaceListOperations_GetLargeFaceListFaces",
        "summary": "List faces' persistedFaceId and userData in a specified Large Face List.",
        "description": "Faces are stored in alphabetical order of persistedFaceId created in \"Add Large Face List Face\".\n>\n*\n  * \"start\" parameter (string, optional) specifies an ID value from which returned entries will have larger IDs based on string comparison. Setting \"start\" to an empty value indicates that entries should be returned starting from the first item.\n  * \"top\" parameter (int, optional) determines the maximum number of entries to be returned, with a limit of up to 1000 entries per call. To retrieve additional entries beyond this limit, specify \"start\" with the personId of the last entry returned in the current call.\n\n> [!TIP]\n>\n> * For example, there are total 5 items with their IDs: \"itemId1\", ..., \"itemId5\".\n>   * \"start=&top=\" will return all 5 items.\n>   * \"start=&top=2\" will return \"itemId1\", \"itemId2\".\n>   * \"start=itemId2&top=3\" will return \"itemId3\", \"itemId4\", \"itemId5\".",
        "parameters": [
          {
            "name": "largeFaceListId",
            "in": "path",
            "description": "Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-z0-9-_]+$"
          },
          {
            "name": "start",
            "in": "query",
            "description": "List resources greater than the \"start\". It contains no more than 64 characters. Default is empty.",
            "required": false,
            "type": "string"
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items to list, ranging in [1, 1000]. Default is 1000.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 1000,
            "minimum": 1,
            "maximum": 1000
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an array of persisted faces and their information (persistedFaceId and userData).",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LargeFaceListFace"
              },
              "x-ms-identifiers": []
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Get Faces from LargeFaceList": {
            "$ref": "./examples/FaceListOperations_GetLargeFaceListFaces.json"
          }
        }
      },
      "post": {
        "operationId": "FaceListOperations_AddLargeFaceListFaceFromUrl",
        "summary": "Add a face to a specified Large Face List, up to 1,000,000 faces.",
        "description": "To deal with an image containing multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted face feature(s) will be stored on server until \"Delete Large Face List Face\" or \"Delete Large Face List\" is called.\n\nNote that persistedFaceId is different from faceId generated by \"Detect\".\n>\n*\n  * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.\n  * Each person entry can hold up to 248 faces.\n  * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.\n  * \"targetFace\" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided \"targetFace\" rectangle is not returned from \"Detect\", there's no guarantee to detect and add the face successfully.\n  * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures.\n  * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.\n  * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer to https://learn.microsoft.com/azure/ai-services/computer-vision/how-to/specify-detection-model\n\n> [!NOTE]\n>\n> *\n>   * Free-tier subscription quota: 1,000 faces per Large Face List.\n>   * S0-tier subscription quota: 1,000,000 faces per Large Face List.",
        "parameters": [
          {
            "name": "largeFaceListId",
            "in": "path",
            "description": "Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-z0-9-_]+$"
          },
          {
            "name": "targetFace",
            "in": "query",
            "description": "A face rectangle to specify the target face to be added to a person, in the format of 'targetFace=left,top,width,height'.",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "csv",
            "minItems": 4,
            "maxItems": 4
          },
          {
            "name": "detectionModel",
            "in": "query",
            "description": "The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel' values include 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'.",
            "required": false,
            "type": "string",
            "default": "detection_01",
            "enum": [
              "detection_01",
              "detection_02",
              "detection_03"
            ],
            "x-ms-enum": {
              "name": "DetectionModel",
              "modelAsString": true,
              "values": [
                {
                  "name": "detection_01",
                  "value": "detection_01",
                  "description": "The default detection model. Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected."
                },
                {
                  "name": "detection_02",
                  "value": "detection_02",
                  "description": "Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces."
                },
                {
                  "name": "detection_03",
                  "value": "detection_03",
                  "description": "Detection model released in 2021 February with improved accuracy especially on small faces."
                }
              ]
            }
          },
          {
            "name": "userData",
            "in": "query",
            "description": "User-provided data attached to the face. The size limit is 1K.",
            "required": false,
            "type": "string",
            "maxLength": 1024
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string",
                  "format": "uri",
                  "description": "URL of input image."
                }
              },
              "required": [
                "url"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns a new persistedFaceId.",
            "schema": {
              "$ref": "#/definitions/AddFaceResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Add Face to LargeFaceList from Url": {
            "$ref": "./examples/FaceListOperations_AddLargeFaceListFaceFromUrl.json"
          }
        }
      }
    },
    "/largefacelists/{largeFaceListId}/persistedfaces/{persistedFaceId}": {
      "get": {
        "operationId": "FaceListOperations_GetLargeFaceListFace",
        "description": "Retrieve persisted face in Large Face List by largeFaceListId and persistedFaceId.",
        "parameters": [
          {
            "name": "largeFaceListId",
            "in": "path",
            "description": "Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-z0-9-_]+$"
          },
          {
            "name": "persistedFaceId",
            "in": "path",
            "description": "Face ID of the face.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns target persisted face's information (persistedFaceId and userData).",
            "schema": {
              "$ref": "#/definitions/LargeFaceListFace"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Get Face from LargeFaceList": {
            "$ref": "./examples/FaceListOperations_GetLargeFaceListFace.json"
          }
        }
      },
      "patch": {
        "operationId": "FaceListOperations_UpdateLargeFaceListFace",
        "description": "Update a specified face's userData field in a Large Face List by its persistedFaceId.",
        "parameters": [
          {
            "name": "largeFaceListId",
            "in": "path",
            "description": "Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-z0-9-_]+$"
          },
          {
            "name": "persistedFaceId",
            "in": "path",
            "description": "Face ID of the face.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userData": {
                  "type": "string",
                  "description": "User-provided data attached to the face. The length limit is 1K.",
                  "maxLength": 1024
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Update Face in LargeFaceList": {
            "$ref": "./examples/FaceListOperations_UpdateLargeFaceListFace.json"
          }
        }
      },
      "delete": {
        "operationId": "FaceListOperations_DeleteLargeFaceListFace",
        "description": "Delete a face from a Large Face List by specified largeFaceListId and persistedFaceId.",
        "parameters": [
          {
            "name": "largeFaceListId",
            "in": "path",
            "description": "Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-z0-9-_]+$"
          },
          {
            "name": "persistedFaceId",
            "in": "path",
            "description": "Face ID of the face.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Delete Face From LargeFaceList": {
            "$ref": "./examples/FaceListOperations_DeleteLargeFaceListFace.json"
          }
        }
      }
    },
    "/largefacelists/{largeFaceListId}/train": {
      "post": {
        "operationId": "FaceListOperations_TrainLargeFaceList",
        "summary": "Submit a Large Face List training task.",
        "description": "\nTraining is a crucial step that only a trained Large Face List can be used by \"Find Similar From Large Face List\".\n\nThe training task is an asynchronous task. Training time depends on the number of face entries in a Large Face List. It could be in seconds, or up to half an hour for 1,000,000 faces. To check training completion, please use \"Get Large Face List Training Status\".",
        "parameters": [
          {
            "name": "largeFaceListId",
            "in": "path",
            "description": "Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-z0-9-_]+$"
          }
        ],
        "responses": {
          "202": {
            "description": "A successful call returns an empty response body.",
            "headers": {
              "operation-Location": {
                "type": "string",
                "format": "uri",
                "description": "The location of an instance of TrainingResult"
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Train LargeFaceList": {
            "$ref": "./examples/FaceListOperations_TrainLargeFaceList.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/largefacelists/{largeFaceListId}/training": {
      "get": {
        "operationId": "FaceListOperations_GetLargeFaceListTrainingStatus",
        "description": "To check the Large Face List training status completed or still ongoing. Large Face List training is an asynchronous operation triggered by \"Train Large Face List\".\n\nTraining time depends on the number of face entries in a Large Face List. It could be in seconds, or up to half an hour for 1,000,000 faces.",
        "parameters": [
          {
            "name": "largeFaceListId",
            "in": "path",
            "description": "Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-z0-9-_]+$"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the Large Face List's training status.",
            "schema": {
              "$ref": "#/definitions/TrainingResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Get Training Status of LargeFaceList": {
            "$ref": "./examples/FaceListOperations_GetLargeFaceListTrainingStatus.json"
          }
        }
      }
    },
    "/largepersongroups": {
      "get": {
        "operationId": "PersonGroupOperations_GetLargePersonGroups",
        "summary": "List all existing Large Person Groups' largePersonGroupId, name, userData and recognitionModel.",
        "description": "Large Person Groups are stored in alphabetical order of largePersonGroupId.\n>\n*\n  * \"start\" parameter (string, optional) specifies an ID value from which returned entries will have larger IDs based on string comparison. Setting \"start\" to an empty value indicates that entries should be returned starting from the first item.\n  * \"top\" parameter (int, optional) determines the maximum number of entries to be returned, with a limit of up to 1000 entries per call. To retrieve additional entries beyond this limit, specify \"start\" with the personId of the last entry returned in the current call.\n\n> [!TIP]\n>\n> * For example, there are total 5 items with their IDs: \"itemId1\", ..., \"itemId5\".\n>   * \"start=&top=\" will return all 5 items.\n>   * \"start=&top=2\" will return \"itemId1\", \"itemId2\".\n>   * \"start=itemId2&top=3\" will return \"itemId3\", \"itemId4\", \"itemId5\".",
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "List resources greater than the \"start\". It contains no more than 64 characters. Default is empty.",
            "required": false,
            "type": "string"
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items to list, ranging in [1, 1000]. Default is 1000.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 1000,
            "minimum": 1,
            "maximum": 1000
          },
          {
            "name": "returnRecognitionModel",
            "in": "query",
            "description": "Return 'recognitionModel' or not. The default value is false.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an array of Large Person Groups and their information (largePersonGroupId, name and userData).",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LargePersonGroup"
              },
              "x-ms-identifiers": []
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Get LargePersonGroups": {
            "$ref": "./examples/PersonGroupOperations_GetLargePersonGroups.json"
          }
        }
      }
    },
    "/largepersongroups/{largePersonGroupId}": {
      "get": {
        "operationId": "PersonGroupOperations_GetLargePersonGroup",
        "description": "Retrieve the information of a Large Person Group, including its name, userData and recognitionModel. This API returns Large Person Group information only, use \"Get Large Person Group Persons\" instead to retrieve person information under the Large Person Group.",
        "parameters": [
          {
            "name": "largePersonGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-z0-9-_]+$"
          },
          {
            "name": "returnRecognitionModel",
            "in": "query",
            "description": "Return 'recognitionModel' or not. The default value is false.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the Large Person Group's information.",
            "schema": {
              "$ref": "#/definitions/LargePersonGroup"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Get LargePersonGroup": {
            "$ref": "./examples/PersonGroupOperations_GetLargePersonGroup.json"
          }
        }
      },
      "put": {
        "operationId": "PersonGroupOperations_CreateLargePersonGroup",
        "summary": "Create a new Large Person Group with user-specified largePersonGroupId, name, an optional userData and recognitionModel.",
        "description": "A Large Person Group is a container holding the uploaded person data, including the face recognition features. It can hold up to 1,000,000 entities.\n\nAfter creation, use \"Create Large Person Group Person\" to add person into the group, and call \"Train Large Person Group\" to get this group ready for \"Identify From Large Person Group\".\n\nNo image will be stored. Only the person's extracted face feature(s) and userData will be stored on server until \"Delete Large Person Group Person\" or \"Delete Large Person Group\" is called.\n\n'recognitionModel' should be specified to associate with this Large Person Group. The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly specify the model you need in this parameter. New faces that are added to an existing Large Person Group will use the recognition model that's already associated with the collection. Existing face feature(s) in a Large Person Group can't be updated to features extracted by another version of recognition model.\n\n> [!NOTE]\n>\n> *\n>   * Free-tier subscription quota: 1,000 Large Person Groups.\n>   * S0-tier subscription quota: 1,000,000 Large Person Groups.",
        "parameters": [
          {
            "name": "largePersonGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-z0-9-_]+$"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "User defined name, maximum length is 128.",
                  "minLength": 1,
                  "maxLength": 128
                },
                "userData": {
                  "type": "string",
                  "description": "Optional user defined data. Length should not exceed 16K.",
                  "maxLength": 16384
                },
                "recognitionModel": {
                  "type": "string",
                  "description": "The 'recognitionModel' associated with this face list. Supported 'recognitionModel' values include 'recognition_01', 'recognition_02, 'recognition_03', and 'recognition_04'. The default value is 'recognition_01'. 'recognition_04' is recommended since its accuracy is improved on faces wearing masks compared with 'recognition_03', and its overall accuracy is improved compared with 'recognition_01' and 'recognition_02'.",
                  "default": "recognition_01",
                  "enum": [
                    "recognition_01",
                    "recognition_02",
                    "recognition_03",
                    "recognition_04"
                  ],
                  "x-ms-enum": {
                    "name": "RecognitionModel",
                    "modelAsString": true,
                    "values": [
                      {
                        "name": "recognition_01",
                        "value": "recognition_01",
                        "description": "The default recognition model for \"Detect\". All those faceIds created before 2019 March are bonded with this recognition model."
                      },
                      {
                        "name": "recognition_02",
                        "value": "recognition_02",
                        "description": "Recognition model released in 2019 March."
                      },
                      {
                        "name": "recognition_03",
                        "value": "recognition_03",
                        "description": "Recognition model released in 2020 May."
                      },
                      {
                        "name": "recognition_04",
                        "value": "recognition_04",
                        "description": "Recognition model released in 2021 February. It's recommended to use this recognition model for better recognition accuracy."
                      }
                    ]
                  }
                }
              },
              "required": [
                "name"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Create LargePersonGroup": {
            "$ref": "./examples/PersonGroupOperations_CreateLargePersonGroup.json"
          }
        }
      },
      "patch": {
        "operationId": "PersonGroupOperations_UpdateLargePersonGroup",
        "description": "Update an existing Large Person Group's name and userData. The properties keep unchanged if they are not in request body.",
        "parameters": [
          {
            "name": "largePersonGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-z0-9-_]+$"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "User defined name, maximum length is 128.",
                  "minLength": 1,
                  "maxLength": 128
                },
                "userData": {
                  "type": "string",
                  "description": "Optional user defined data. Length should not exceed 16K.",
                  "maxLength": 16384
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Update LargePersonGroup": {
            "$ref": "./examples/PersonGroupOperations_UpdateLargePersonGroup.json"
          }
        }
      },
      "delete": {
        "operationId": "PersonGroupOperations_DeleteLargePersonGroup",
        "description": "Delete an existing Large Person Group with specified personGroupId. Persisted data in this Large Person Group will be deleted.",
        "parameters": [
          {
            "name": "largePersonGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-z0-9-_]+$"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Delete LargePersonGroup": {
            "$ref": "./examples/PersonGroupOperations_DeleteLargePersonGroup.json"
          }
        }
      }
    },
    "/largepersongroups/{largePersonGroupId}/persons": {
      "get": {
        "operationId": "PersonGroupOperations_GetLargePersonGroupPersons",
        "summary": "List all persons' information in the specified Large Person Group, including personId, name, userData and persistedFaceIds of registered person faces.",
        "description": "Persons are stored in alphabetical order of personId created in \"Create Large Person Group Person\".\n>\n*\n  * \"start\" parameter (string, optional) specifies an ID value from which returned entries will have larger IDs based on string comparison. Setting \"start\" to an empty value indicates that entries should be returned starting from the first item.\n  * \"top\" parameter (int, optional) determines the maximum number of entries to be returned, with a limit of up to 1000 entries per call. To retrieve additional entries beyond this limit, specify \"start\" with the personId of the last entry returned in the current call.\n\n> [!TIP]\n>\n> * For example, there are total 5 items with their IDs: \"itemId1\", ..., \"itemId5\".\n>   * \"start=&top=\" will return all 5 items.\n>   * \"start=&top=2\" will return \"itemId1\", \"itemId2\".\n>   * \"start=itemId2&top=3\" will return \"itemId3\", \"itemId4\", \"itemId5\".",
        "parameters": [
          {
            "name": "largePersonGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-z0-9-_]+$"
          },
          {
            "name": "start",
            "in": "query",
            "description": "List resources greater than the \"start\". It contains no more than 64 characters. Default is empty.",
            "required": false,
            "type": "string"
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items to list, ranging in [1, 1000]. Default is 1000.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 1000,
            "minimum": 1,
            "maximum": 1000
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an array of person information that belong to the Large Person Group.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LargePersonGroupPerson"
              },
              "x-ms-identifiers": []
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Get Persons from LargePersonGroup": {
            "$ref": "./examples/PersonGroupOperations_GetLargePersonGroupPersons.json"
          }
        }
      },
      "post": {
        "operationId": "PersonGroupOperations_CreateLargePersonGroupPerson",
        "summary": "Create a new person in a specified Large Person Group. To add face to this person, please call \"Add Large Person Group Person Face\".",
        "description": "> [!NOTE]\n>\n> *\n>   * Free-tier subscription quota:\n>     * 1,000 persons in all Large Person Groups.\n>   * S0-tier subscription quota:\n>     * 1,000,000 persons per Large Person Group.\n>     * 1,000,000 Large Person Groups.\n>     * 1,000,000,000 persons in all Large Person Groups. ",
        "parameters": [
          {
            "name": "largePersonGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-z0-9-_]+$"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "User defined name, maximum length is 128.",
                  "minLength": 1,
                  "maxLength": 128
                },
                "userData": {
                  "type": "string",
                  "description": "Optional user defined data. Length should not exceed 16K.",
                  "maxLength": 16384
                }
              },
              "required": [
                "name"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns a new personId created.",
            "schema": {
              "$ref": "#/definitions/CreatePersonResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Create Person in LargePersonGroup": {
            "$ref": "./examples/PersonGroupOperations_CreateLargePersonGroupPerson.json"
          }
        }
      }
    },
    "/largepersongroups/{largePersonGroupId}/persons/{personId}": {
      "get": {
        "operationId": "PersonGroupOperations_GetLargePersonGroupPerson",
        "description": "Retrieve a person's name and userData, and the persisted faceIds representing the registered person face feature(s).",
        "parameters": [
          {
            "name": "largePersonGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-z0-9-_]+$"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "ID of the person.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the person's information.",
            "schema": {
              "$ref": "#/definitions/LargePersonGroupPerson"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Get Person from LargePersonGroup": {
            "$ref": "./examples/PersonGroupOperations_GetLargePersonGroupPerson.json"
          }
        }
      },
      "patch": {
        "operationId": "PersonGroupOperations_UpdateLargePersonGroupPerson",
        "description": "Update name or userData of a person.",
        "parameters": [
          {
            "name": "largePersonGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-z0-9-_]+$"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "ID of the person.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "User defined name, maximum length is 128.",
                  "minLength": 1,
                  "maxLength": 128
                },
                "userData": {
                  "type": "string",
                  "description": "Optional user defined data. Length should not exceed 16K.",
                  "maxLength": 16384
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Update Person in LargePersonGroup": {
            "$ref": "./examples/PersonGroupOperations_UpdateLargePersonGroupPerson.json"
          }
        }
      },
      "delete": {
        "operationId": "PersonGroupOperations_DeleteLargePersonGroupPerson",
        "description": "Delete an existing person from a Large Person Group. The persistedFaceId, userData, person name and face feature(s) in the person entry will all be deleted.",
        "parameters": [
          {
            "name": "largePersonGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-z0-9-_]+$"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "ID of the person.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Delete Person from LargePersonGroup": {
            "$ref": "./examples/PersonGroupOperations_DeleteLargePersonGroupPerson.json"
          }
        }
      }
    },
    "/largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces": {
      "post": {
        "operationId": "PersonGroupOperations_AddLargePersonGroupPersonFaceFromUrl",
        "summary": "Add a face to a person into a Large Person Group for face identification or verification.",
        "description": "To deal with an image containing multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted face feature(s) will be stored on server until \"Delete Large Person Group Person Face\", \"Delete Large Person Group Person\" or \"Delete Large Person Group\" is called.\n\nNote that persistedFaceId is different from faceId generated by \"Detect\".\n>\n*\n  * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.\n  * Each person entry can hold up to 248 faces.\n  * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.\n  * \"targetFace\" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided \"targetFace\" rectangle is not returned from \"Detect\", there's no guarantee to detect and add the face successfully.\n  * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures.\n  * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.\n  * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer to https://learn.microsoft.com/azure/ai-services/computer-vision/how-to/specify-detection-model",
        "parameters": [
          {
            "name": "largePersonGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-z0-9-_]+$"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "ID of the person.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "targetFace",
            "in": "query",
            "description": "A face rectangle to specify the target face to be added to a person, in the format of 'targetFace=left,top,width,height'.",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "csv",
            "minItems": 4,
            "maxItems": 4
          },
          {
            "name": "detectionModel",
            "in": "query",
            "description": "The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel' values include 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'.",
            "required": false,
            "type": "string",
            "default": "detection_01",
            "enum": [
              "detection_01",
              "detection_02",
              "detection_03"
            ],
            "x-ms-enum": {
              "name": "DetectionModel",
              "modelAsString": true,
              "values": [
                {
                  "name": "detection_01",
                  "value": "detection_01",
                  "description": "The default detection model. Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected."
                },
                {
                  "name": "detection_02",
                  "value": "detection_02",
                  "description": "Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces."
                },
                {
                  "name": "detection_03",
                  "value": "detection_03",
                  "description": "Detection model released in 2021 February with improved accuracy especially on small faces."
                }
              ]
            }
          },
          {
            "name": "userData",
            "in": "query",
            "description": "User-provided data attached to the face. The size limit is 1K.",
            "required": false,
            "type": "string",
            "maxLength": 1024
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string",
                  "format": "uri",
                  "description": "URL of input image."
                }
              },
              "required": [
                "url"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns a new persistedFaceId.",
            "schema": {
              "$ref": "#/definitions/AddFaceResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Add Face in LargePersonGroup Person from Url": {
            "$ref": "./examples/PersonGroupOperations_AddLargePersonGroupPersonFaceFromUrl.json"
          }
        }
      }
    },
    "/largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces/{persistedFaceId}": {
      "get": {
        "operationId": "PersonGroupOperations_GetLargePersonGroupPersonFace",
        "description": "Retrieve person face information. The persisted person face is specified by its largePersonGroupId, personId and persistedFaceId.",
        "parameters": [
          {
            "name": "largePersonGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-z0-9-_]+$"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "ID of the person.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "persistedFaceId",
            "in": "path",
            "description": "Face ID of the face.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns target persisted face's information (persistedFaceId and userData).",
            "schema": {
              "$ref": "#/definitions/LargePersonGroupPersonFace"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Get Face from LargePersonGroup Person": {
            "$ref": "./examples/PersonGroupOperations_GetLargePersonGroupPersonFace.json"
          }
        }
      },
      "patch": {
        "operationId": "PersonGroupOperations_UpdateLargePersonGroupPersonFace",
        "description": "Update a person persisted face's userData field.",
        "parameters": [
          {
            "name": "largePersonGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-z0-9-_]+$"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "ID of the person.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "persistedFaceId",
            "in": "path",
            "description": "Face ID of the face.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userData": {
                  "type": "string",
                  "description": "User-provided data attached to the face. The length limit is 1K.",
                  "maxLength": 1024
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Update Face in LargePersonGroup Person": {
            "$ref": "./examples/PersonGroupOperations_UpdateLargePersonGroupPersonFace.json"
          }
        }
      },
      "delete": {
        "operationId": "PersonGroupOperations_DeleteLargePersonGroupPersonFace",
        "summary": "Delete a face from a person in a Large Person Group by specified largePersonGroupId, personId and persistedFaceId.",
        "description": "Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from different persons are processed in parallel.",
        "parameters": [
          {
            "name": "largePersonGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-z0-9-_]+$"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "ID of the person.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "persistedFaceId",
            "in": "path",
            "description": "Face ID of the face.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Delete Face from LargePersonGroup Person": {
            "$ref": "./examples/PersonGroupOperations_DeleteLargePersonGroupPersonFace.json"
          }
        }
      }
    },
    "/largepersongroups/{largePersonGroupId}/train": {
      "post": {
        "operationId": "PersonGroupOperations_TrainLargePersonGroup",
        "summary": "Submit a Large Person Group training task. Training is a crucial step that only a trained Large Person Group can be used by \"Identify From Large Person Group\".",
        "description": "The training task is an asynchronous task. Training time depends on the number of person entries, and their faces in a Large Person Group. It could be in several seconds, or up to half a hour for 1,000,000 persons. To check training status, please use \"Get Large Person Group Training Status\".",
        "parameters": [
          {
            "name": "largePersonGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-z0-9-_]+$"
          }
        ],
        "responses": {
          "202": {
            "description": "A successful call returns an empty response body.",
            "headers": {
              "operation-Location": {
                "type": "string",
                "format": "uri",
                "description": "The location of an instance of TrainingResult"
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Train LargePersonGroup": {
            "$ref": "./examples/PersonGroupOperations_TrainLargePersonGroup.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/largepersongroups/{largePersonGroupId}/training": {
      "get": {
        "operationId": "PersonGroupOperations_GetLargePersonGroupTrainingStatus",
        "summary": "To check Large Person Group training status completed or still ongoing. Large Person Group training is an asynchronous operation triggered by \"Train Large Person Group\" API.",
        "description": "Training time depends on the number of person entries, and their faces in a Large Person Group. It could be in seconds, or up to half an hour for 1,000,000 persons.",
        "parameters": [
          {
            "name": "largePersonGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-z0-9-_]+$"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the Large Person Group's training status.",
            "schema": {
              "$ref": "#/definitions/TrainingResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Get Training Status of LargePersonGroup": {
            "$ref": "./examples/PersonGroupOperations_GetLargePersonGroupTrainingStatus.json"
          }
        }
      }
    },
    "/operations/{operationId}": {
      "get": {
        "operationId": "GetOperationResult",
        "description": "Get status of a long running operation.",
        "parameters": [
          {
            "name": "operationId",
            "in": "path",
            "description": "Operation ID of the operation.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the long running operation status.",
            "schema": {
              "$ref": "#/definitions/OperationResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Get Face Operation Status": {
            "$ref": "./examples/GetOperationResult.json"
          }
        }
      }
    },
    "/persongroups": {
      "get": {
        "operationId": "PersonGroupOperations_GetPersonGroups",
        "summary": "List Person Groups' personGroupId, name, userData and recognitionModel.",
        "description": "Person Groups are stored in alphabetical order of personGroupId.\n>\n*\n  * \"start\" parameter (string, optional) specifies an ID value from which returned entries will have larger IDs based on string comparison. Setting \"start\" to an empty value indicates that entries should be returned starting from the first item.\n  * \"top\" parameter (int, optional) determines the maximum number of entries to be returned, with a limit of up to 1000 entries per call. To retrieve additional entries beyond this limit, specify \"start\" with the personId of the last entry returned in the current call.\n\n> [!TIP]\n>\n> * For example, there are total 5 items with their IDs: \"itemId1\", ..., \"itemId5\".\n>   * \"start=&top=\" will return all 5 items.\n>   * \"start=&top=2\" will return \"itemId1\", \"itemId2\".\n>   * \"start=itemId2&top=3\" will return \"itemId3\", \"itemId4\", \"itemId5\".",
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "List resources greater than the \"start\". It contains no more than 64 characters. Default is empty.",
            "required": false,
            "type": "string"
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items to list, ranging in [1, 1000]. Default is 1000.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 1000,
            "minimum": 1,
            "maximum": 1000
          },
          {
            "name": "returnRecognitionModel",
            "in": "query",
            "description": "Return 'recognitionModel' or not. The default value is false.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an array of Person Groups and their information (personGroupId, name and userData).",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PersonGroup"
              },
              "x-ms-identifiers": []
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Get PersonGroups": {
            "$ref": "./examples/PersonGroupOperations_GetPersonGroups.json"
          }
        }
      }
    },
    "/persongroups/{personGroupId}": {
      "get": {
        "operationId": "PersonGroupOperations_GetPersonGroup",
        "description": "Retrieve Person Group name, userData and recognitionModel. To get person information under this personGroup, use \"Get Person Group Persons\".",
        "parameters": [
          {
            "name": "personGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-z0-9-_]+$"
          },
          {
            "name": "returnRecognitionModel",
            "in": "query",
            "description": "Return 'recognitionModel' or not. The default value is false.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the Person Group's information.",
            "schema": {
              "$ref": "#/definitions/PersonGroup"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Get PersonGroup": {
            "$ref": "./examples/PersonGroupOperations_GetPersonGroup.json"
          }
        }
      },
      "put": {
        "operationId": "PersonGroupOperations_CreatePersonGroup",
        "summary": "Create a new Person Group with specified personGroupId, name, user-provided userData and recognitionModel.",
        "description": "A Person Group is a container holding the uploaded person data, including face recognition features.\n\nAfter creation, use \"Create Person Group Person\" to add persons into the group, and then call \"Train Person Group\" to get this group ready for \"Identify From Person Group\".\n\nNo image will be stored. Only the person's extracted face feature(s) and userData will be stored on server until \"Delete Person Group Person\" or \"Delete Person Group\" is called.\n\n'recognitionModel' should be specified to associate with this Person Group. The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly specify the model you need in this parameter. New faces that are added to an existing Person Group will use the recognition model that's already associated with the collection. Existing face feature(s) in a Person Group can't be updated to features extracted by another version of recognition model.\n\n> [!NOTE]\n>\n> *\n>   * Free-tier subscription quota: 1,000 Person Groups. Each holds up to 1,000 persons.\n>   * S0-tier subscription quota: 1,000,000 Person Groups. Each holds up to 10,000 persons.\n>   * to handle larger scale face identification problem, please consider using Large Person Group.",
        "parameters": [
          {
            "name": "personGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-z0-9-_]+$"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "User defined name, maximum length is 128.",
                  "minLength": 1,
                  "maxLength": 128
                },
                "userData": {
                  "type": "string",
                  "description": "Optional user defined data. Length should not exceed 16K.",
                  "maxLength": 16384
                },
                "recognitionModel": {
                  "type": "string",
                  "description": "The 'recognitionModel' associated with this face list. Supported 'recognitionModel' values include 'recognition_01', 'recognition_02, 'recognition_03', and 'recognition_04'. The default value is 'recognition_01'. 'recognition_04' is recommended since its accuracy is improved on faces wearing masks compared with 'recognition_03', and its overall accuracy is improved compared with 'recognition_01' and 'recognition_02'.",
                  "default": "recognition_01",
                  "enum": [
                    "recognition_01",
                    "recognition_02",
                    "recognition_03",
                    "recognition_04"
                  ],
                  "x-ms-enum": {
                    "name": "RecognitionModel",
                    "modelAsString": true,
                    "values": [
                      {
                        "name": "recognition_01",
                        "value": "recognition_01",
                        "description": "The default recognition model for \"Detect\". All those faceIds created before 2019 March are bonded with this recognition model."
                      },
                      {
                        "name": "recognition_02",
                        "value": "recognition_02",
                        "description": "Recognition model released in 2019 March."
                      },
                      {
                        "name": "recognition_03",
                        "value": "recognition_03",
                        "description": "Recognition model released in 2020 May."
                      },
                      {
                        "name": "recognition_04",
                        "value": "recognition_04",
                        "description": "Recognition model released in 2021 February. It's recommended to use this recognition model for better recognition accuracy."
                      }
                    ]
                  }
                }
              },
              "required": [
                "name"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Create PersonGroup": {
            "$ref": "./examples/PersonGroupOperations_CreatePersonGroup.json"
          }
        }
      },
      "patch": {
        "operationId": "PersonGroupOperations_UpdatePersonGroup",
        "description": "Update an existing Person Group's name and userData. The properties keep unchanged if they are not in request body.",
        "parameters": [
          {
            "name": "personGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-z0-9-_]+$"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "User defined name, maximum length is 128.",
                  "minLength": 1,
                  "maxLength": 128
                },
                "userData": {
                  "type": "string",
                  "description": "Optional user defined data. Length should not exceed 16K.",
                  "maxLength": 16384
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Update PersonGroup": {
            "$ref": "./examples/PersonGroupOperations_UpdatePersonGroup.json"
          }
        }
      },
      "delete": {
        "operationId": "PersonGroupOperations_DeletePersonGroup",
        "description": "Delete an existing Person Group with specified personGroupId. Persisted data in this Person Group will be deleted.",
        "parameters": [
          {
            "name": "personGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-z0-9-_]+$"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Delete PersonGroup": {
            "$ref": "./examples/PersonGroupOperations_DeletePersonGroup.json"
          }
        }
      }
    },
    "/persongroups/{personGroupId}/persons": {
      "get": {
        "operationId": "PersonGroupOperations_GetPersonGroupPersons",
        "summary": "List all persons' information in the specified Person Group, including personId, name, userData and persistedFaceIds of registered person faces.",
        "description": "Persons are stored in alphabetical order of personId created in \"Create Person Group Person\".\n>\n*\n  * \"start\" parameter (string, optional) specifies an ID value from which returned entries will have larger IDs based on string comparison. Setting \"start\" to an empty value indicates that entries should be returned starting from the first item.\n  * \"top\" parameter (int, optional) determines the maximum number of entries to be returned, with a limit of up to 1000 entries per call. To retrieve additional entries beyond this limit, specify \"start\" with the personId of the last entry returned in the current call.\n\n> [!TIP]\n>\n> * For example, there are total 5 items with their IDs: \"itemId1\", ..., \"itemId5\".\n>   * \"start=&top=\" will return all 5 items.\n>   * \"start=&top=2\" will return \"itemId1\", \"itemId2\".\n>   * \"start=itemId2&top=3\" will return \"itemId3\", \"itemId4\", \"itemId5\".",
        "parameters": [
          {
            "name": "personGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-z0-9-_]+$"
          },
          {
            "name": "start",
            "in": "query",
            "description": "List resources greater than the \"start\". It contains no more than 64 characters. Default is empty.",
            "required": false,
            "type": "string"
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items to list, ranging in [1, 1000]. Default is 1000.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 1000,
            "minimum": 1,
            "maximum": 1000
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an array of person information that belong to the Person Group.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PersonGroupPerson"
              },
              "x-ms-identifiers": []
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Get Persons from PersonGroup": {
            "$ref": "./examples/PersonGroupOperations_GetPersonGroupPersons.json"
          }
        }
      },
      "post": {
        "operationId": "PersonGroupOperations_CreatePersonGroupPerson",
        "summary": "Create a new person in a specified Person Group. To add face to this person, please call \"Add Person Group Person Face\".",
        "description": "> [!NOTE]\n>\n> *\n>   * Free-tier subscription quota:\n>     * 1,000 persons in all Person Groups.\n>   * S0-tier subscription quota:\n>     * 10,000 persons per Person Group.\n>     * 1,000,000 Person Groups.\n>     * 100,000,000 persons in all Person Groups.",
        "parameters": [
          {
            "name": "personGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-z0-9-_]+$"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "User defined name, maximum length is 128.",
                  "minLength": 1,
                  "maxLength": 128
                },
                "userData": {
                  "type": "string",
                  "description": "Optional user defined data. Length should not exceed 16K.",
                  "maxLength": 16384
                }
              },
              "required": [
                "name"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns a new personId created.",
            "schema": {
              "$ref": "#/definitions/CreatePersonResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Create Person in PersonGroup": {
            "$ref": "./examples/PersonGroupOperations_CreatePersonGroupPerson.json"
          }
        }
      }
    },
    "/persongroups/{personGroupId}/persons/{personId}": {
      "get": {
        "operationId": "PersonGroupOperations_GetPersonGroupPerson",
        "description": "Retrieve a person's name and userData, and the persisted faceIds representing the registered person face feature(s).",
        "parameters": [
          {
            "name": "personGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-z0-9-_]+$"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "ID of the person.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the person's information.",
            "schema": {
              "$ref": "#/definitions/PersonGroupPerson"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Get Person from PersonGroup": {
            "$ref": "./examples/PersonGroupOperations_GetPersonGroupPerson.json"
          }
        }
      },
      "patch": {
        "operationId": "PersonGroupOperations_UpdatePersonGroupPerson",
        "description": "Update name or userData of a person.",
        "parameters": [
          {
            "name": "personGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-z0-9-_]+$"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "ID of the person.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "User defined name, maximum length is 128.",
                  "minLength": 1,
                  "maxLength": 128
                },
                "userData": {
                  "type": "string",
                  "description": "Optional user defined data. Length should not exceed 16K.",
                  "maxLength": 16384
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Update PersonGroup Person": {
            "$ref": "./examples/PersonGroupOperations_UpdatePersonGroupPerson.json"
          }
        }
      },
      "delete": {
        "operationId": "PersonGroupOperations_DeletePersonGroupPerson",
        "description": "Delete an existing person from a Person Group. The persistedFaceId, userData, person name and face feature(s) in the person entry will all be deleted.",
        "parameters": [
          {
            "name": "personGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-z0-9-_]+$"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "ID of the person.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Delete Person from PersonGroup": {
            "$ref": "./examples/PersonGroupOperations_DeletePersonGroupPerson.json"
          }
        }
      }
    },
    "/persongroups/{personGroupId}/persons/{personId}/persistedfaces": {
      "post": {
        "operationId": "PersonGroupOperations_AddPersonGroupPersonFaceFromUrl",
        "summary": "Add a face to a person into a Person Group for face identification or verification.",
        "description": "To deal with an image containing multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted face feature(s) will be stored on server until \"Delete Person Group Person Face\", \"Delete Person Group Person\" or \"Delete Person Group\" is called.\n\nNote that persistedFaceId is different from faceId generated by \"Detect\".\n>\n*\n  * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.\n  * Each person entry can hold up to 248 faces.\n  * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.\n  * \"targetFace\" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided \"targetFace\" rectangle is not returned from \"Detect\", there's no guarantee to detect and add the face successfully.\n  * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures.\n  * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.\n  * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer to https://learn.microsoft.com/azure/ai-services/computer-vision/how-to/specify-detection-model",
        "parameters": [
          {
            "name": "personGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-z0-9-_]+$"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "ID of the person.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "targetFace",
            "in": "query",
            "description": "A face rectangle to specify the target face to be added to a person, in the format of 'targetFace=left,top,width,height'.",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "csv",
            "minItems": 4,
            "maxItems": 4
          },
          {
            "name": "detectionModel",
            "in": "query",
            "description": "The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel' values include 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'.",
            "required": false,
            "type": "string",
            "default": "detection_01",
            "enum": [
              "detection_01",
              "detection_02",
              "detection_03"
            ],
            "x-ms-enum": {
              "name": "DetectionModel",
              "modelAsString": true,
              "values": [
                {
                  "name": "detection_01",
                  "value": "detection_01",
                  "description": "The default detection model. Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected."
                },
                {
                  "name": "detection_02",
                  "value": "detection_02",
                  "description": "Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces."
                },
                {
                  "name": "detection_03",
                  "value": "detection_03",
                  "description": "Detection model released in 2021 February with improved accuracy especially on small faces."
                }
              ]
            }
          },
          {
            "name": "userData",
            "in": "query",
            "description": "User-provided data attached to the face. The size limit is 1K.",
            "required": false,
            "type": "string",
            "maxLength": 1024
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string",
                  "format": "uri",
                  "description": "URL of input image."
                }
              },
              "required": [
                "url"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns a new persistedFaceId.",
            "schema": {
              "$ref": "#/definitions/AddFaceResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Add Face to PersonGroupPerson from Url": {
            "$ref": "./examples/PersonGroupOperations_AddPersonGroupPersonFaceFromUrl.json"
          }
        }
      }
    },
    "/persongroups/{personGroupId}/persons/{personId}/persistedfaces/{persistedFaceId}": {
      "get": {
        "operationId": "PersonGroupOperations_GetPersonGroupPersonFace",
        "description": "Retrieve person face information. The persisted person face is specified by its personGroupId, personId and persistedFaceId.",
        "parameters": [
          {
            "name": "personGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-z0-9-_]+$"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "ID of the person.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "persistedFaceId",
            "in": "path",
            "description": "Face ID of the face.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns target persisted face's information (persistedFaceId and userData).",
            "schema": {
              "$ref": "#/definitions/PersonGroupPersonFace"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Get Face form PersonGroup Person": {
            "$ref": "./examples/PersonGroupOperations_GetPersonGroupPersonFace.json"
          }
        }
      },
      "patch": {
        "operationId": "PersonGroupOperations_UpdatePersonGroupPersonFace",
        "description": "Update a person persisted face's userData field.",
        "parameters": [
          {
            "name": "personGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-z0-9-_]+$"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "ID of the person.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "persistedFaceId",
            "in": "path",
            "description": "Face ID of the face.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userData": {
                  "type": "string",
                  "description": "User-provided data attached to the face. The length limit is 1K.",
                  "maxLength": 1024
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Update Face in PersonGroup Person": {
            "$ref": "./examples/PersonGroupOperations_UpdatePersonGroupPersonFace.json"
          }
        }
      },
      "delete": {
        "operationId": "PersonGroupOperations_DeletePersonGroupPersonFace",
        "summary": "Delete a face from a person in a Person Group by specified personGroupId, personId and persistedFaceId.",
        "description": "Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from different persons are processed in parallel.",
        "parameters": [
          {
            "name": "personGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-z0-9-_]+$"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "ID of the person.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "persistedFaceId",
            "in": "path",
            "description": "Face ID of the face.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Delete Face from PersonGroup Person": {
            "$ref": "./examples/PersonGroupOperations_DeletePersonGroupPersonFace.json"
          }
        }
      }
    },
    "/persongroups/{personGroupId}/train": {
      "post": {
        "operationId": "PersonGroupOperations_TrainPersonGroup",
        "summary": "Submit a Person Group training task. Training is a crucial step that only a trained Person Group can be used by \"Identify From Person Group\".",
        "description": "The training task is an asynchronous task. Training time depends on the number of person entries, and their faces in a Person Group. It could be several seconds to minutes. To check training status, please use \"Get Person Group Training Status\".",
        "parameters": [
          {
            "name": "personGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-z0-9-_]+$"
          }
        ],
        "responses": {
          "202": {
            "description": "A successful call returns an empty response body.",
            "headers": {
              "operation-Location": {
                "type": "string",
                "format": "uri",
                "description": "The location of an instance of TrainingResult"
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Train PersonGroup": {
            "$ref": "./examples/PersonGroupOperations_TrainPersonGroup.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/persongroups/{personGroupId}/training": {
      "get": {
        "operationId": "PersonGroupOperations_GetPersonGroupTrainingStatus",
        "description": "To check Person Group training status completed or still ongoing. Person Group training is an asynchronous operation triggered by \"Train Person Group\" API.",
        "parameters": [
          {
            "name": "personGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-z0-9-_]+$"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the Person Group's training status.",
            "schema": {
              "$ref": "#/definitions/TrainingResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Get Training Status of PersonGroup": {
            "$ref": "./examples/PersonGroupOperations_GetPersonGroupTrainingStatus.json"
          }
        }
      }
    },
    "/persons": {
      "get": {
        "operationId": "PersonDirectoryOperations_GetPersons",
        "summary": "List all persons' information in Person Directory, including personId, name, and userData.",
        "description": "Persons are stored in alphabetical order of personId created in Person Directory \"Create Person\".\n>\n*\n  * \"start\" parameter (string, optional) specifies an ID value from which returned entries will have larger IDs based on string comparison. Setting \"start\" to an empty value indicates that entries should be returned starting from the first item.\n  * \"top\" parameter (int, optional) determines the maximum number of entries to be returned, with a limit of up to 1000 entries per call. To retrieve additional entries beyond this limit, specify \"start\" with the personId of the last entry returned in the current call.\n\n> [!TIP]\n>\n> * For example, there are total 5 items with their IDs: \"itemId1\", ..., \"itemId5\".\n>   * \"start=&top=\" will return all 5 items.\n>   * \"start=&top=2\" will return \"itemId1\", \"itemId2\".\n>   * \"start=itemId2&top=3\" will return \"itemId3\", \"itemId4\", \"itemId5\".",
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "List resources greater than the \"start\". It contains no more than 64 characters. Default is empty.",
            "required": false,
            "type": "string"
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items to list, ranging in [1, 1000]. Default is 1000.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 1000,
            "minimum": 1,
            "maximum": 1000
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an array of Person Directory Persons contained in the Dynamic Person Group.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PersonDirectoryPerson"
              },
              "x-ms-identifiers": []
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Get Persons from PersonDirectory": {
            "$ref": "./examples/PersonDirectoryOperations_GetPersons.json"
          }
        }
      },
      "post": {
        "operationId": "PersonDirectoryOperations_CreatePerson",
        "description": "Creates a new person in a Person Directory. To add face to this person, please call Person Directory \"Add Person Face\".",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "User defined name, maximum length is 128.",
                  "minLength": 1,
                  "maxLength": 128
                },
                "userData": {
                  "type": "string",
                  "description": "Optional user defined data. Length should not exceed 16K.",
                  "maxLength": 16384
                }
              },
              "required": [
                "name"
              ]
            }
          }
        ],
        "responses": {
          "202": {
            "description": "A successful call returns an empty response body. The service has accepted the request and will start processing soon. The client can query the operation status and result using the URL specified in the 'Operation-Location' response header. The URL expires in 48 hours.",
            "schema": {
              "$ref": "#/definitions/CreatePersonResult"
            },
            "headers": {
              "Location": {
                "type": "string",
                "format": "uri",
                "description": "The location of an instance of PersonDirectoryPerson"
              },
              "operation-Location": {
                "type": "string",
                "format": "uri",
                "description": "The location of an instance of OperationResult"
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Create Person in PersonDirectory": {
            "$ref": "./examples/PersonDirectoryOperations_CreatePerson.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/persons/{personId}": {
      "get": {
        "operationId": "PersonDirectoryOperations_GetPerson",
        "description": "Retrieve a person's name and userData from Person Directory.",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "Person ID of the person.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the person's information.",
            "schema": {
              "$ref": "#/definitions/PersonDirectoryPerson"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Get Person from PeronDirectory": {
            "$ref": "./examples/PersonDirectoryOperations_GetPerson.json"
          }
        }
      },
      "patch": {
        "operationId": "PersonDirectoryOperations_UpdatePerson",
        "description": "Update name or userData of a person.",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "Person ID of the person.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "User defined name, maximum length is 128.",
                  "minLength": 1,
                  "maxLength": 128
                },
                "userData": {
                  "type": "string",
                  "description": "Optional user defined data. Length should not exceed 16K.",
                  "maxLength": 16384
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Update Person in PersonDirectory": {
            "$ref": "./examples/PersonDirectoryOperations_UpdatePerson.json"
          }
        }
      },
      "delete": {
        "operationId": "PersonDirectoryOperations_DeletePerson",
        "description": "Delete an existing person from Person Directory. The persistedFaceId(s), userData, person name and face feature(s) in the person entry will all be deleted.",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "Person ID of the person.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "202": {
            "description": "A successful call returns an empty response body. The service has accepted the request and will start processing soon. The client can query the operation status and result using the URL specified in the 'Operation-Location' response header. The URL expires in 48 hours.",
            "headers": {
              "operation-Location": {
                "type": "string",
                "format": "uri",
                "description": "The location of an instance of OperationResult"
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Delete Person": {
            "$ref": "./examples/PersonDirectoryOperations_DeletePerson.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/persons/{personId}/dynamicPersonGroupReferences": {
      "get": {
        "operationId": "PersonDirectoryOperations_GetDynamicPersonGroupReferences",
        "summary": "List all Dynamic Person Groups a person has been referenced by in Person Directory.",
        "description": "Dynamic Person Groups are stored in alphabetical order of Dynamic Person Group ID created in Person Directory \"Create Dynamic Person Group\".\n>\n*\n  * \"start\" parameter (string, optional) specifies an ID value from which returned entries will have larger IDs based on string comparison. Setting \"start\" to an empty value indicates that entries should be returned starting from the first item.\n  * \"top\" parameter (int, optional) determines the maximum number of entries to be returned, with a limit of up to 1000 entries per call. To retrieve additional entries beyond this limit, specify \"start\" with the personId of the last entry returned in the current call.\n\n> [!TIP]\n>\n> * For example, there are total 5 items with their IDs: \"itemId1\", ..., \"itemId5\".\n>   * \"start=&top=\" will return all 5 items.\n>   * \"start=&top=2\" will return \"itemId1\", \"itemId2\".\n>   * \"start=itemId2&top=3\" will return \"itemId3\", \"itemId4\", \"itemId5\".",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "Person ID of the person.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "start",
            "in": "query",
            "description": "List resources greater than the \"start\". It contains no more than 64 characters. Default is empty.",
            "required": false,
            "type": "string"
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items to list, ranging in [1, 1000]. Default is 1000.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 1000,
            "minimum": 1,
            "maximum": 1000
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an array of dynamicPersonGroups information that reference the provided personId.",
            "schema": {
              "$ref": "#/definitions/ListGroupReferenceResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Get DynamicPersonGroup References": {
            "$ref": "./examples/PersonDirectoryOperations_GetDynamicPersonGroupReferences.json"
          }
        }
      }
    },
    "/persons/{personId}/recognitionModels/{recognitionModel}/persistedfaces": {
      "get": {
        "operationId": "PersonDirectoryOperations_GetPersonFaces",
        "description": "Retrieve a person's persistedFaceIds representing the registered person face feature(s).",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "Person ID of the person.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "recognitionModel",
            "in": "path",
            "description": "The 'recognitionModel' associated with faces.",
            "required": true,
            "type": "string",
            "enum": [
              "recognition_01",
              "recognition_02",
              "recognition_03",
              "recognition_04"
            ],
            "x-ms-enum": {
              "name": "RecognitionModel",
              "modelAsString": true,
              "values": [
                {
                  "name": "recognition_01",
                  "value": "recognition_01",
                  "description": "The default recognition model for \"Detect\". All those faceIds created before 2019 March are bonded with this recognition model."
                },
                {
                  "name": "recognition_02",
                  "value": "recognition_02",
                  "description": "Recognition model released in 2019 March."
                },
                {
                  "name": "recognition_03",
                  "value": "recognition_03",
                  "description": "Recognition model released in 2020 May."
                },
                {
                  "name": "recognition_04",
                  "value": "recognition_04",
                  "description": "Recognition model released in 2021 February. It's recommended to use this recognition model for better recognition accuracy."
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an array of persistedFaceIds and and a person ID.",
            "schema": {
              "$ref": "#/definitions/ListFaceResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Get Faces from PersonDirectory Person": {
            "$ref": "./examples/PersonDirectoryOperations_GetPersonFaces.json"
          }
        }
      },
      "post": {
        "operationId": "PersonDirectoryOperations_AddPersonFace",
        "summary": "Add a face to a person (see Person Directory \"Create Person\") for face identification or verification.",
        "description": "To deal with an image containing multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted face feature(s) will be stored on server until Person Directory \"Delete Person Face\" or \"Delete Person\" is called.\n\nNote that persistedFaceId is different from faceId generated by \"Detect\".\n>\n*\n  * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.\n  * Each person entry can hold up to 248 faces.\n  * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.\n  * \"targetFace\" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided \"targetFace\" rectangle is not returned from \"Detect\", there's no guarantee to detect and add the face successfully.\n  * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures.\n  * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.\n  * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer to https://learn.microsoft.com/azure/ai-services/computer-vision/how-to/specify-detection-model\n*\n  * Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from different persons are processed in parallel.\n  * This is a long running operation. Use Response Header \"Operation-Location\" to determine when the AddFace operation has successfully propagated for future requests to \"Identify\". For further information about Operation-Locations see \"Get Face Operation Status\".",
        "consumes": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "Person ID of the person.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "recognitionModel",
            "in": "path",
            "description": "The 'recognitionModel' associated with faces.",
            "required": true,
            "type": "string",
            "enum": [
              "recognition_01",
              "recognition_02",
              "recognition_03",
              "recognition_04"
            ],
            "x-ms-enum": {
              "name": "RecognitionModel",
              "modelAsString": true,
              "values": [
                {
                  "name": "recognition_01",
                  "value": "recognition_01",
                  "description": "The default recognition model for \"Detect\". All those faceIds created before 2019 March are bonded with this recognition model."
                },
                {
                  "name": "recognition_02",
                  "value": "recognition_02",
                  "description": "Recognition model released in 2019 March."
                },
                {
                  "name": "recognition_03",
                  "value": "recognition_03",
                  "description": "Recognition model released in 2020 May."
                },
                {
                  "name": "recognition_04",
                  "value": "recognition_04",
                  "description": "Recognition model released in 2021 February. It's recommended to use this recognition model for better recognition accuracy."
                }
              ]
            }
          },
          {
            "name": "targetFace",
            "in": "query",
            "description": "A face rectangle to specify the target face to be added to a person, in the format of 'targetFace=left,top,width,height'.",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "csv",
            "minItems": 4,
            "maxItems": 4
          },
          {
            "name": "detectionModel",
            "in": "query",
            "description": "The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel' values include 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'.",
            "required": false,
            "type": "string",
            "default": "detection_01",
            "enum": [
              "detection_01",
              "detection_02",
              "detection_03"
            ],
            "x-ms-enum": {
              "name": "DetectionModel",
              "modelAsString": true,
              "values": [
                {
                  "name": "detection_01",
                  "value": "detection_01",
                  "description": "The default detection model. Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected."
                },
                {
                  "name": "detection_02",
                  "value": "detection_02",
                  "description": "Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces."
                },
                {
                  "name": "detection_03",
                  "value": "detection_03",
                  "description": "Detection model released in 2021 February with improved accuracy especially on small faces."
                }
              ]
            }
          },
          {
            "name": "userData",
            "in": "query",
            "description": "User-provided data attached to the face. The size limit is 1K.",
            "required": false,
            "type": "string",
            "maxLength": 1024
          },
          {
            "name": "imageContent",
            "in": "body",
            "description": "The image to be analyzed",
            "required": true,
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "A successful call returns an empty response body. The service has accepted the request and will start processing soon. The client can query the operation status and result using the URL specified in the 'Operation-Location' response header. The URL expires in 48 hours.",
            "schema": {
              "$ref": "#/definitions/AddFaceResult"
            },
            "headers": {
              "Location": {
                "type": "string",
                "format": "uri",
                "description": "The location of an instance of PersonDirectoryFace"
              },
              "operation-Location": {
                "type": "string",
                "format": "uri",
                "description": "The location of an instance of OperationResult"
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Add Face to a PersonDirectory Person": {
            "$ref": "./examples/PersonDirectoryOperations_AddPersonFaceFromStream.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/persons/{personId}/recognitionModels/{recognitionModel}/persistedfaces/{persistedFaceId}": {
      "get": {
        "operationId": "PersonDirectoryOperations_GetPersonFace",
        "description": "Retrieve person face information. The persisted person face is specified by its personId. recognitionModel, and persistedFaceId.",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "Person ID of the person.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "recognitionModel",
            "in": "path",
            "description": "The 'recognitionModel' associated with faces.",
            "required": true,
            "type": "string",
            "enum": [
              "recognition_01",
              "recognition_02",
              "recognition_03",
              "recognition_04"
            ],
            "x-ms-enum": {
              "name": "RecognitionModel",
              "modelAsString": true,
              "values": [
                {
                  "name": "recognition_01",
                  "value": "recognition_01",
                  "description": "The default recognition model for \"Detect\". All those faceIds created before 2019 March are bonded with this recognition model."
                },
                {
                  "name": "recognition_02",
                  "value": "recognition_02",
                  "description": "Recognition model released in 2019 March."
                },
                {
                  "name": "recognition_03",
                  "value": "recognition_03",
                  "description": "Recognition model released in 2020 May."
                },
                {
                  "name": "recognition_04",
                  "value": "recognition_04",
                  "description": "Recognition model released in 2021 February. It's recommended to use this recognition model for better recognition accuracy."
                }
              ]
            }
          },
          {
            "name": "persistedFaceId",
            "in": "path",
            "description": "Face ID of the face.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns target persisted face's information (persistedFaceId and userData).",
            "schema": {
              "$ref": "#/definitions/PersonDirectoryFace"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Get Face from PersonDirectory Person": {
            "$ref": "./examples/PersonDirectoryOperations_GetPersonFace.json"
          }
        }
      },
      "patch": {
        "operationId": "PersonDirectoryOperations_UpdatePersonFace",
        "description": "Update a persisted face's userData field of a person.",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "Person ID of the person.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "recognitionModel",
            "in": "path",
            "description": "The 'recognitionModel' associated with faces.",
            "required": true,
            "type": "string",
            "enum": [
              "recognition_01",
              "recognition_02",
              "recognition_03",
              "recognition_04"
            ],
            "x-ms-enum": {
              "name": "RecognitionModel",
              "modelAsString": true,
              "values": [
                {
                  "name": "recognition_01",
                  "value": "recognition_01",
                  "description": "The default recognition model for \"Detect\". All those faceIds created before 2019 March are bonded with this recognition model."
                },
                {
                  "name": "recognition_02",
                  "value": "recognition_02",
                  "description": "Recognition model released in 2019 March."
                },
                {
                  "name": "recognition_03",
                  "value": "recognition_03",
                  "description": "Recognition model released in 2020 May."
                },
                {
                  "name": "recognition_04",
                  "value": "recognition_04",
                  "description": "Recognition model released in 2021 February. It's recommended to use this recognition model for better recognition accuracy."
                }
              ]
            }
          },
          {
            "name": "persistedFaceId",
            "in": "path",
            "description": "Face ID of the face.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userData": {
                  "type": "string",
                  "description": "User-provided data attached to the face. The length limit is 1K.",
                  "maxLength": 1024
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Update Face of PersonDirectory Person": {
            "$ref": "./examples/PersonDirectoryOperations_UpdatePersonFace.json"
          }
        }
      },
      "delete": {
        "operationId": "PersonDirectoryOperations_DeletePersonFace",
        "summary": "Delete a face from a person in Person Directory by specified personId and persistedFaceId.",
        "description": "Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from different persons are processed in parallel.",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "Person ID of the person.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "recognitionModel",
            "in": "path",
            "description": "The 'recognitionModel' associated with faces.",
            "required": true,
            "type": "string",
            "enum": [
              "recognition_01",
              "recognition_02",
              "recognition_03",
              "recognition_04"
            ],
            "x-ms-enum": {
              "name": "RecognitionModel",
              "modelAsString": true,
              "values": [
                {
                  "name": "recognition_01",
                  "value": "recognition_01",
                  "description": "The default recognition model for \"Detect\". All those faceIds created before 2019 March are bonded with this recognition model."
                },
                {
                  "name": "recognition_02",
                  "value": "recognition_02",
                  "description": "Recognition model released in 2019 March."
                },
                {
                  "name": "recognition_03",
                  "value": "recognition_03",
                  "description": "Recognition model released in 2020 May."
                },
                {
                  "name": "recognition_04",
                  "value": "recognition_04",
                  "description": "Recognition model released in 2021 February. It's recommended to use this recognition model for better recognition accuracy."
                }
              ]
            }
          },
          {
            "name": "persistedFaceId",
            "in": "path",
            "description": "Face ID of the face.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "202": {
            "description": "A successful call returns an empty response body. The service has accepted the request and will start processing soon. The client can query the operation status and result using the URL specified in the 'Operation-Location' response header. The URL expires in 48 hours.",
            "headers": {
              "operation-Location": {
                "type": "string",
                "format": "uri",
                "description": "The location of an instance of OperationResult"
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Delete Face from PersonDirectory Person": {
            "$ref": "./examples/PersonDirectoryOperations_DeletePersonFace.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/verify": {
      "post": {
        "operationId": "FaceRecognitionOperations_VerifyFaceToFace",
        "summary": "Verify whether two faces belong to a same person.",
        "description": "> [!NOTE]\n>\n> *\n>   * Higher face image quality means better identification precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.\n>   * For the scenarios that are sensitive to accuracy please make your own judgment.\n>   * The 'recognitionModel' associated with the both faces should be the same.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "faceId1": {
                  "$ref": "#/definitions/Azure.Core.uuid",
                  "description": "The faceId of one face, come from \"Detect\"."
                },
                "faceId2": {
                  "$ref": "#/definitions/Azure.Core.uuid",
                  "description": "The faceId of another face, come from \"Detect\"."
                }
              },
              "required": [
                "faceId1",
                "faceId2"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the verification result.",
            "schema": {
              "$ref": "#/definitions/VerificationResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Verify Face to Face": {
            "$ref": "./examples/FaceRecognitionOperations_VerifyFaceToFace.json"
          }
        }
      }
    }
  },
  "x-ms-paths": {
    "/detect?_overload=detect": {
      "post": {
        "operationId": "FaceDetectionOperations_Detect",
        "summary": "Detect human faces in an image, return face rectangles, and optionally with faceIds, landmarks, and attributes.",
        "description": "> [!IMPORTANT]\n> To mitigate potential misuse that can subject people to stereotyping, discrimination, or unfair denial of services, we are retiring Face API attributes that predict emotion, gender, age, smile, facial hair, hair, and makeup. Read more about this decision https://azure.microsoft.com/blog/responsible-ai-investments-and-safeguards-for-facial-recognition/.\n\n*\n  * No image will be stored. Only the extracted face feature(s) will be stored on server. The faceId is an identifier of the face feature and will be used in \"Identify\", \"Verify\", and \"Find Similar\". The stored face features will expire and be deleted at the time specified by faceIdTimeToLive after the original detection call.\n  * Optional parameters include faceId, landmarks, and attributes. Attributes include headPose, glasses, occlusion, accessories, blur, exposure, noise, mask, and qualityForRecognition. Some of the results returned for specific attributes may not be highly accurate.\n  * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.\n  * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.\n  * Up to 100 faces can be returned for an image. Faces are ranked by face rectangle size from large to small.\n  * For optimal results when querying \"Identify\", \"Verify\", and \"Find Similar\" ('returnFaceId' is true), please use faces that are: frontal, clear, and with a minimum size of 200x200 pixels (100 pixels between eyes).\n  * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer to https://learn.microsoft.com/azure/ai-services/computer-vision/how-to/specify-detection-model\n    * 'detection_02': Face attributes and landmarks are disabled if you choose this detection model.\n    * 'detection_03': Face attributes (mask, blur, and headPose) and landmarks are supported if you choose this detection model.\n  * Different 'recognitionModel' values are provided. If follow-up operations like \"Verify\", \"Identify\", \"Find Similar\" are needed, please specify the recognition model with 'recognitionModel' parameter. The default value for 'recognitionModel' is 'recognition_01', if latest model needed, please explicitly specify the model you need in this parameter. Once specified, the detected faceIds will be associated with the specified recognition model. More details, please refer to https://learn.microsoft.com/azure/ai-services/computer-vision/how-to/specify-recognition-model.",
        "consumes": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "detectionModel",
            "in": "query",
            "description": "The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel' values include 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'.",
            "required": false,
            "type": "string",
            "default": "detection_01",
            "enum": [
              "detection_01",
              "detection_02",
              "detection_03"
            ],
            "x-ms-enum": {
              "name": "DetectionModel",
              "modelAsString": true,
              "values": [
                {
                  "name": "detection_01",
                  "value": "detection_01",
                  "description": "The default detection model. Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected."
                },
                {
                  "name": "detection_02",
                  "value": "detection_02",
                  "description": "Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces."
                },
                {
                  "name": "detection_03",
                  "value": "detection_03",
                  "description": "Detection model released in 2021 February with improved accuracy especially on small faces."
                }
              ]
            }
          },
          {
            "name": "recognitionModel",
            "in": "query",
            "description": "The 'recognitionModel' associated with the detected faceIds. Supported 'recognitionModel' values include 'recognition_01', 'recognition_02', 'recognition_03' or 'recognition_04'. The default value is 'recognition_01'. 'recognition_04' is recommended since its accuracy is improved on faces wearing masks compared with 'recognition_03', and its overall accuracy is improved compared with 'recognition_01' and 'recognition_02'.",
            "required": false,
            "type": "string",
            "default": "recognition_01",
            "enum": [
              "recognition_01",
              "recognition_02",
              "recognition_03",
              "recognition_04"
            ],
            "x-ms-enum": {
              "name": "RecognitionModel",
              "modelAsString": true,
              "values": [
                {
                  "name": "recognition_01",
                  "value": "recognition_01",
                  "description": "The default recognition model for \"Detect\". All those faceIds created before 2019 March are bonded with this recognition model."
                },
                {
                  "name": "recognition_02",
                  "value": "recognition_02",
                  "description": "Recognition model released in 2019 March."
                },
                {
                  "name": "recognition_03",
                  "value": "recognition_03",
                  "description": "Recognition model released in 2020 May."
                },
                {
                  "name": "recognition_04",
                  "value": "recognition_04",
                  "description": "Recognition model released in 2021 February. It's recommended to use this recognition model for better recognition accuracy."
                }
              ]
            }
          },
          {
            "name": "returnFaceId",
            "in": "query",
            "description": "Return faceIds of the detected faces or not. The default value is true.",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "returnFaceAttributes",
            "in": "query",
            "description": "Analyze and return the one or more specified face attributes in the comma-separated string like 'returnFaceAttributes=headPose,glasses'. Face attribute analysis has additional computational and time cost.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "headPose",
                "glasses",
                "occlusion",
                "accessories",
                "blur",
                "exposure",
                "noise",
                "mask",
                "qualityForRecognition",
                "age",
                "smile",
                "facialHair",
                "hair"
              ],
              "x-ms-enum": {
                "name": "FaceAttributeType",
                "modelAsString": true,
                "values": [
                  {
                    "name": "headPose",
                    "value": "headPose",
                    "description": "3-D roll/yaw/pitch angles for face direction."
                  },
                  {
                    "name": "glasses",
                    "value": "glasses",
                    "description": "Glasses type. Values include 'NoGlasses', 'ReadingGlasses', 'Sunglasses', 'SwimmingGoggles'."
                  },
                  {
                    "name": "occlusion",
                    "value": "occlusion",
                    "description": "Whether each facial area is occluded, including forehead, eyes and mouth."
                  },
                  {
                    "name": "accessories",
                    "value": "accessories",
                    "description": "Accessories around face, including 'headwear', 'glasses' and 'mask'. Empty array means no accessories detected. Note this is after a face is detected. Large mask could result in no face to be detected."
                  },
                  {
                    "name": "blur",
                    "value": "blur",
                    "description": "Face is blurry or not. Level returns 'Low', 'Medium' or 'High'. Value returns a number between [0,1], the larger the blurrier."
                  },
                  {
                    "name": "exposure",
                    "value": "exposure",
                    "description": "Face exposure level. Level returns 'GoodExposure', 'OverExposure' or 'UnderExposure'."
                  },
                  {
                    "name": "noise",
                    "value": "noise",
                    "description": "Noise level of face pixels. Level returns 'Low', 'Medium' and 'High'. Value returns a number between [0,1], the larger the noisier"
                  },
                  {
                    "name": "mask",
                    "value": "mask",
                    "description": "Whether each face is wearing a mask. Mask type returns 'noMask', 'faceMask', 'otherMaskOrOcclusion', or 'uncertain'. Value returns a boolean 'noseAndMouthCovered' indicating whether nose and mouth are covered."
                  },
                  {
                    "name": "qualityForRecognition",
                    "value": "qualityForRecognition",
                    "description": "The overall image quality regarding whether the image being used in the detection is of sufficient quality to attempt face recognition on. The value is an informal rating of low, medium, or high. Only 'high' quality images are recommended for person enrollment and quality at or above 'medium' is recommended for identification scenarios. The attribute is only available when using recognition models recognition_03 or recognition_04."
                  },
                  {
                    "name": "age",
                    "value": "age",
                    "description": "Age in years."
                  },
                  {
                    "name": "smile",
                    "value": "smile",
                    "description": "Smile intensity, a number between [0,1]."
                  },
                  {
                    "name": "facialHair",
                    "value": "facialHair",
                    "description": "Properties describing facial hair attributes."
                  },
                  {
                    "name": "hair",
                    "value": "hair",
                    "description": "Properties describing hair attributes."
                  }
                ]
              }
            },
            "collectionFormat": "csv"
          },
          {
            "name": "returnFaceLandmarks",
            "in": "query",
            "description": "Return face landmarks of the detected faces or not. The default value is false.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "returnRecognitionModel",
            "in": "query",
            "description": "Return 'recognitionModel' or not. The default value is false. This is only applicable when returnFaceId = true.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "faceIdTimeToLive",
            "in": "query",
            "description": "The number of seconds for the face ID being cached. Supported range from 60 seconds up to 86400 seconds. The default value is 86400 (24 hours).",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 86400,
            "minimum": 60,
            "maximum": 86400
          },
          {
            "name": "imageContent",
            "in": "body",
            "description": "The input image binary.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an array of face entries ranked by face rectangle size in descending order. An empty response indicates no faces detected.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FaceDetectionResult"
              },
              "x-ms-identifiers": []
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Detect with Image": {
            "$ref": "./examples/Detect.json"
          }
        }
      }
    },
    "/detectLivenessWithVerify/singleModal/sessions?_overload=createLivenessWithVerifySession": {
      "post": {
        "operationId": "LivenessSessionOperations_CreateLivenessWithVerifySession",
        "summary": "Create a new liveness session with verify. Client device submits VerifyImage during the /detectLivenessWithVerify/singleModal call.",
        "description": "A session is best for client device scenarios where developers want to authorize a client device to perform only a liveness detection without granting full access to their resource. Created sessions have a limited life span and only authorize clients to perform the desired action before access is expired.\n\nPermissions includes...\n>\n*\n  * Ability to call /detectLivenessWithVerify/singleModal for up to 3 retries.\n  * A token lifetime of 10 minutes.\n\n> [!NOTE]\n>\n> *\n>   * Client access can be revoked by deleting the session using the Delete Liveness With Verify Session operation.\n>   * To retrieve a result, use the Get Liveness With Verify Session.\n>   * To audit the individual requests that a client has made to your resource, use the List Liveness With Verify Session Audit Entries.\n\nAlternative Option: Client device submits VerifyImage during the /detectLivenessWithVerify/singleModal call.\n> [!NOTE]\n> Extra measures should be taken to validate that the client is sending the expected VerifyImage.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateLivenessSessionContent"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call create a session for a client device and provide an authorization token for use by the client application for a limited purpose and time.",
            "schema": {
              "$ref": "#/definitions/CreateLivenessWithVerifySessionResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Create LivenessWithVerify Session": {
            "$ref": "./examples/LivenessSessionOperations_CreateLivenessWithVerifySession.json"
          }
        }
      }
    },
    "/dynamicpersongroups/{dynamicPersonGroupId}?_overload=createDynamicPersonGroup": {
      "put": {
        "operationId": "PersonDirectoryOperations_CreateDynamicPersonGroup",
        "summary": "Creates a new Dynamic Person Group with specified dynamicPersonGroupId, name, and user-provided userData.",
        "description": "A Dynamic Person Group is a container that references Person Directory \"Create Person\". After creation, use Person Directory \"Update Dynamic Person Group\" to add/remove persons to/from the Dynamic Person Group.\n\nDynamic Person Group and user data will be stored on server until Person Directory \"Delete Dynamic Person Group\" is called. Use \"Identify From Dynamic Person Group\" with the dynamicPersonGroupId parameter to identify against persons.\n\nNo image will be stored. Only the person's extracted face feature(s) and userData will be stored on server until Person Directory \"Delete Person\" or \"Delete Person Face\" is called.\n\n'recognitionModel' does not need to be specified with Dynamic Person Groups. Dynamic Person Groups are references to Person Directory \"Create Person\" and therefore work with most all 'recognitionModels'. The faceId's provided during \"Identify\" determine the 'recognitionModel' used.",
        "parameters": [
          {
            "name": "dynamicPersonGroupId",
            "in": "path",
            "description": "ID of the dynamic person group.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-z0-9-_]+$"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "User defined name, maximum length is 128.",
                  "minLength": 1,
                  "maxLength": 128
                },
                "userData": {
                  "type": "string",
                  "description": "Optional user defined data. Length should not exceed 16K.",
                  "maxLength": 16384
                }
              },
              "required": [
                "name"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Create DynamicPersonGroup": {
            "$ref": "./examples/PersonDirectoryOperations_CreateDynamicPersonGroup.json"
          }
        }
      }
    },
    "/dynamicpersongroups/{dynamicPersonGroupId}?_overload=updateDynamicPersonGroup": {
      "patch": {
        "operationId": "PersonDirectoryOperations_UpdateDynamicPersonGroup",
        "summary": "Update the name or userData of an existing Dynamic Person Group, and manage its members by adding or removing persons.",
        "description": "The properties keep unchanged if they are not in request body.",
        "parameters": [
          {
            "name": "dynamicPersonGroupId",
            "in": "path",
            "description": "ID of the dynamic person group.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-z0-9-_]+$"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "User defined name, maximum length is 128.",
                  "minLength": 1,
                  "maxLength": 128
                },
                "userData": {
                  "type": "string",
                  "description": "Optional user defined data. Length should not exceed 16K.",
                  "maxLength": 16384
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Update DynamicPersonGroup": {
            "$ref": "./examples/PersonDirectoryOperations_UpdateDynamicPersonGroup.json"
          }
        }
      }
    },
    "/facelists/{faceListId}/persistedfaces?_overload=addFaceListFace": {
      "post": {
        "operationId": "FaceListOperations_AddFaceListFace",
        "summary": "Add a face to a specified Face List, up to 1,000 faces.",
        "description": "To deal with an image containing multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted face feature(s) will be stored on server until \"Delete Face List Face\" or \"Delete Face List\" is called.\n\nNote that persistedFaceId is different from faceId generated by \"Detect\".\n>\n*\n  * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.\n  * Each person entry can hold up to 248 faces.\n  * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.\n  * \"targetFace\" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided \"targetFace\" rectangle is not returned from \"Detect\", there's no guarantee to detect and add the face successfully.\n  * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures.\n  * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.\n  * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer to https://learn.microsoft.com/azure/ai-services/computer-vision/how-to/specify-detection-model",
        "consumes": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "faceListId",
            "in": "path",
            "description": "Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-z0-9-_]+$"
          },
          {
            "name": "targetFace",
            "in": "query",
            "description": "A face rectangle to specify the target face to be added to a person, in the format of 'targetFace=left,top,width,height'.",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "csv",
            "minItems": 4,
            "maxItems": 4
          },
          {
            "name": "detectionModel",
            "in": "query",
            "description": "The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel' values include 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'.",
            "required": false,
            "type": "string",
            "default": "detection_01",
            "enum": [
              "detection_01",
              "detection_02",
              "detection_03"
            ],
            "x-ms-enum": {
              "name": "DetectionModel",
              "modelAsString": true,
              "values": [
                {
                  "name": "detection_01",
                  "value": "detection_01",
                  "description": "The default detection model. Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected."
                },
                {
                  "name": "detection_02",
                  "value": "detection_02",
                  "description": "Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces."
                },
                {
                  "name": "detection_03",
                  "value": "detection_03",
                  "description": "Detection model released in 2021 February with improved accuracy especially on small faces."
                }
              ]
            }
          },
          {
            "name": "userData",
            "in": "query",
            "description": "User-provided data attached to the face. The size limit is 1K.",
            "required": false,
            "type": "string",
            "maxLength": 1024
          },
          {
            "name": "imageContent",
            "in": "body",
            "description": "The image to be analyzed",
            "required": true,
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns a new persistedFaceId.",
            "schema": {
              "$ref": "#/definitions/AddFaceResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Add Face to FaceList": {
            "$ref": "./examples/FaceListOperations_AddFaceListFaceFromStream.json"
          }
        }
      }
    },
    "/findsimilars?_overload=findSimilarFromFaceList": {
      "post": {
        "operationId": "FaceRecognitionOperations_FindSimilarFromFaceList",
        "summary": "Given query face's faceId, to search the similar-looking faces from a Face List. A 'faceListId' is created by Create Face List.",
        "description": "Depending on the input the returned similar faces list contains faceIds or persistedFaceIds ranked by similarity.\n\nFind similar has two working modes, \"matchPerson\" and \"matchFace\". \"matchPerson\" is the default mode that it tries to find faces of the same person as possible by using internal same-person thresholds. It is useful to find a known person's other photos. Note that an empty list will be returned if no faces pass the internal thresholds. \"matchFace\" mode ignores same-person thresholds and returns ranked similar faces anyway, even the similarity is low. It can be used in the cases like searching celebrity-looking faces.\n\nThe 'recognitionModel' associated with the query faceId should be the same as the 'recognitionModel' used by the target Face List.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "faceId": {
                  "$ref": "#/definitions/Azure.Core.uuid",
                  "description": "faceId of the query face. User needs to call \"Detect\" first to get a valid faceId. Note that this faceId is not persisted and will expire 24 hours after the detection call."
                },
                "maxNumOfCandidatesReturned": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The number of top similar faces returned. The valid range is [1, 1000]. Default value is 20.",
                  "default": 20,
                  "minimum": 1,
                  "maximum": 1000
                },
                "mode": {
                  "type": "string",
                  "description": "Similar face searching mode. It can be 'matchPerson' or 'matchFace'. Default value is 'matchPerson'.",
                  "default": "matchPerson",
                  "enum": [
                    "matchPerson",
                    "matchFace"
                  ],
                  "x-ms-enum": {
                    "name": "FindSimilarMatchMode",
                    "modelAsString": true,
                    "values": [
                      {
                        "name": "matchPerson",
                        "value": "matchPerson",
                        "description": "Match person."
                      },
                      {
                        "name": "matchFace",
                        "value": "matchFace",
                        "description": "Match face."
                      }
                    ]
                  }
                },
                "faceListId": {
                  "type": "string",
                  "description": "An existing user-specified unique candidate Face List, created in \"Create Face List\". Face List contains a set of persistedFaceIds which are persisted and will never expire."
                }
              },
              "required": [
                "faceId",
                "faceListId"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an array of the most similar faces represented in faceId if the input parameter is faceIds or persistedFaceId if the input parameter is faceListId or largeFaceListId.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FindSimilarResult"
              },
              "x-ms-identifiers": []
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Find Similar from FaceList": {
            "$ref": "./examples/FaceRecognitionOperations_FindSimilarFromFaceList.json"
          }
        }
      }
    },
    "/findsimilars?_overload=findSimilarFromLargeFaceList": {
      "post": {
        "operationId": "FaceRecognitionOperations_FindSimilarFromLargeFaceList",
        "summary": "Given query face's faceId, to search the similar-looking faces from a Large Face List. A 'largeFaceListId' is created by Create Large Face List.",
        "description": "Depending on the input the returned similar faces list contains faceIds or persistedFaceIds ranked by similarity.\n\nFind similar has two working modes, \"matchPerson\" and \"matchFace\". \"matchPerson\" is the default mode that it tries to find faces of the same person as possible by using internal same-person thresholds. It is useful to find a known person's other photos. Note that an empty list will be returned if no faces pass the internal thresholds. \"matchFace\" mode ignores same-person thresholds and returns ranked similar faces anyway, even the similarity is low. It can be used in the cases like searching celebrity-looking faces.\n\nThe 'recognitionModel' associated with the query faceId should be the same as the 'recognitionModel' used by the target Large Face List.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "faceId": {
                  "$ref": "#/definitions/Azure.Core.uuid",
                  "description": "faceId of the query face. User needs to call \"Detect\" first to get a valid faceId. Note that this faceId is not persisted and will expire 24 hours after the detection call."
                },
                "maxNumOfCandidatesReturned": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The number of top similar faces returned. The valid range is [1, 1000]. Default value is 20.",
                  "default": 20,
                  "minimum": 1,
                  "maximum": 1000
                },
                "mode": {
                  "type": "string",
                  "description": "Similar face searching mode. It can be 'matchPerson' or 'matchFace'. Default value is 'matchPerson'.",
                  "default": "matchPerson",
                  "enum": [
                    "matchPerson",
                    "matchFace"
                  ],
                  "x-ms-enum": {
                    "name": "FindSimilarMatchMode",
                    "modelAsString": true,
                    "values": [
                      {
                        "name": "matchPerson",
                        "value": "matchPerson",
                        "description": "Match person."
                      },
                      {
                        "name": "matchFace",
                        "value": "matchFace",
                        "description": "Match face."
                      }
                    ]
                  }
                },
                "largeFaceListId": {
                  "type": "string",
                  "description": "An existing user-specified unique candidate Large Face List, created in \"Create Large Face List\". Large Face List contains a set of persistedFaceIds which are persisted and will never expire."
                }
              },
              "required": [
                "faceId",
                "largeFaceListId"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an array of the most similar faces represented in faceId if the input parameter is faceIds or persistedFaceId if the input parameter is faceListId or largeFaceListId.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FindSimilarResult"
              },
              "x-ms-identifiers": []
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Find Similar from LargeFaceList": {
            "$ref": "./examples/FaceRecognitionOperations_FindSimilarFromLargeFaceList.json"
          }
        }
      }
    },
    "/identify?_overload=identifyFromDynamicPersonGroup": {
      "post": {
        "operationId": "FaceRecognitionOperations_IdentifyFromDynamicPersonGroup",
        "summary": "1-to-many identification to find the closest matches of the specific query person face from a Dynamic Person Group.",
        "description": "For each face in the faceIds array, Face Identify will compute similarities between the query face and all the faces in the Dynamic Person Group (given by dynamicPersonGroupId), and return candidate person(s) for that face ranked by similarity confidence.\n> [!NOTE]\n>\n> *\n>   * The algorithm allows more than one face to be identified independently at the same request, but no more than 10 faces.\n>   * Each person could have more than one face, but no more than 248 faces.\n>   * Higher face image quality means better identification precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.\n>   * Number of candidates returned is restricted by maxNumOfCandidatesReturned and confidenceThreshold. If no person is identified, the returned candidates will be an empty array.\n>   * The Identify operation can only match faces obtained with the same recognition model, that is associated with the query faces.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "faceIds": {
                  "type": "array",
                  "description": "Array of query faces faceIds, created by the \"Detect\". Each of the faces are identified independently. The valid number of faceIds is between [1, 10].",
                  "minItems": 1,
                  "maxItems": 10,
                  "items": {
                    "$ref": "#/definitions/Azure.Core.uuid"
                  }
                },
                "dynamicPersonGroupId": {
                  "type": "string",
                  "description": "DynamicPersonGroupId of the target PersonDirectory DynamicPersonGroup to match against."
                },
                "maxNumOfCandidatesReturned": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The range of maxNumOfCandidatesReturned is between 1 and 100. Default value is 10.",
                  "default": 10,
                  "minimum": 1,
                  "maximum": 100
                },
                "confidenceThreshold": {
                  "type": "number",
                  "format": "float",
                  "description": "Customized identification confidence threshold, in the range of [0, 1]. Advanced user can tweak this value to override default internal threshold for better precision on their scenario data. Note there is no guarantee of this threshold value working on other data and after algorithm updates.",
                  "minimum": 0,
                  "maximum": 1
                }
              },
              "required": [
                "faceIds",
                "dynamicPersonGroupId"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the identified candidate person(s) for each query face.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/IdentificationResult"
              },
              "x-ms-identifiers": []
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Identify from DynamicPersonGroup": {
            "$ref": "./examples/FaceRecognitionOperations_IdentifyFromDynamicPersonGroup.json"
          }
        }
      }
    },
    "/identify?_overload=identifyFromLargePersonGroup": {
      "post": {
        "operationId": "FaceRecognitionOperations_IdentifyFromLargePersonGroup",
        "summary": "1-to-many identification to find the closest matches of the specific query person face from a Large Person Group.",
        "description": "For each face in the faceIds array, Face Identify will compute similarities between the query face and all the faces in the Large Person Group (given by largePersonGroupId), and return candidate person(s) for that face ranked by similarity confidence. The Large Person Group should be trained to make it ready for identification. See more in \"Train Large Person Group\".\n> [!NOTE]\n>\n> *\n>   * The algorithm allows more than one face to be identified independently at the same request, but no more than 10 faces.\n>   * Each person could have more than one face, but no more than 248 faces.\n>   * Higher face image quality means better identification precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.\n>   * Number of candidates returned is restricted by maxNumOfCandidatesReturned and confidenceThreshold. If no person is identified, the returned candidates will be an empty array.\n>   * Try \"Find Similar\" when you need to find similar faces from a Face List/Large Face List instead of a Person Group/Large Person Group.\n>   * The 'recognitionModel' associated with the query faces' faceIds should be the same as the 'recognitionModel' used by the target Person Group or Large Person Group.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "faceIds": {
                  "type": "array",
                  "description": "Array of query faces faceIds, created by the \"Detect\". Each of the faces are identified independently. The valid number of faceIds is between [1, 10].",
                  "minItems": 1,
                  "maxItems": 10,
                  "items": {
                    "$ref": "#/definitions/Azure.Core.uuid"
                  }
                },
                "largePersonGroupId": {
                  "type": "string",
                  "description": "largePersonGroupId of the target Large Person Group, created by \"Create Large Person Group\". Parameter personGroupId and largePersonGroupId should not be provided at the same time."
                },
                "maxNumOfCandidatesReturned": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The range of maxNumOfCandidatesReturned is between 1 and 100. Default value is 10.",
                  "default": 10,
                  "minimum": 1,
                  "maximum": 100
                },
                "confidenceThreshold": {
                  "type": "number",
                  "format": "float",
                  "description": "Customized identification confidence threshold, in the range of [0, 1]. Advanced user can tweak this value to override default internal threshold for better precision on their scenario data. Note there is no guarantee of this threshold value working on other data and after algorithm updates.",
                  "minimum": 0,
                  "maximum": 1
                }
              },
              "required": [
                "faceIds",
                "largePersonGroupId"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the identified candidate person(s) for each query face.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/IdentificationResult"
              },
              "x-ms-identifiers": []
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Identify from LargePersonGroup": {
            "$ref": "./examples/FaceRecognitionOperations_IdentifyFromLargePersonGroup.json"
          }
        }
      }
    },
    "/identify?_overload=identifyFromPersonDirectory": {
      "post": {
        "operationId": "FaceRecognitionOperations_IdentifyFromPersonDirectory",
        "summary": "1-to-many identification to find the closest matches of the specific query person face from a person directory personIds array.",
        "description": "For each face in the faceIds array, Face Identify will compute similarities between the query face and all the faces in the Person Directory Persons (given by personIds), and return candidate person(s) for that face ranked by similarity confidence.\nPassing personIds with an array with one element \"*\" can perform the operation over entire person directory.\n> [!NOTE]\n>\n> *\n>   * The algorithm allows more than one face to be identified independently at the same request, but no more than 10 faces.\n>   * Each person could have more than one face, but no more than 248 faces.\n>   * Higher face image quality means better identification precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.\n>   * Number of candidates returned is restricted by maxNumOfCandidatesReturned and confidenceThreshold. If no person is identified, the returned candidates will be an empty array.\n>   * The Identify operation can only match faces obtained with the same recognition model, that is associated with the query faces.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "faceIds": {
                  "type": "array",
                  "description": "Array of query faces faceIds, created by the \"Detect\". Each of the faces are identified independently. The valid number of faceIds is between [1, 10].",
                  "minItems": 1,
                  "maxItems": 10,
                  "items": {
                    "$ref": "#/definitions/Azure.Core.uuid"
                  }
                },
                "personIds": {
                  "type": "array",
                  "description": "Array of personIds created in Person Directory \"Create Person\". The valid number of personIds is between [1,30].",
                  "minItems": 1,
                  "maxItems": 30,
                  "items": {
                    "$ref": "#/definitions/Azure.Core.uuid"
                  }
                },
                "maxNumOfCandidatesReturned": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The range of maxNumOfCandidatesReturned is between 1 and 100. Default value is 10.",
                  "default": 10,
                  "minimum": 1,
                  "maximum": 100
                },
                "confidenceThreshold": {
                  "type": "number",
                  "format": "float",
                  "description": "Customized identification confidence threshold, in the range of [0, 1]. Advanced user can tweak this value to override default internal threshold for better precision on their scenario data. Note there is no guarantee of this threshold value working on other data and after algorithm updates.",
                  "minimum": 0,
                  "maximum": 1
                }
              },
              "required": [
                "faceIds",
                "personIds"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the identified candidate person(s) for each query face.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/IdentificationResult"
              },
              "x-ms-identifiers": []
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Identify from PersonDirectory": {
            "$ref": "./examples/FaceRecognitionOperations_IdentifyFromPersonDirectory.json"
          }
        }
      }
    },
    "/largefacelists/{largeFaceListId}/persistedfaces?_overload=addLargeFaceListFace": {
      "post": {
        "operationId": "FaceListOperations_AddLargeFaceListFace",
        "summary": "Add a face to a specified Large Face List, up to 1,000,000 faces.",
        "description": "To deal with an image containing multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted face feature(s) will be stored on server until \"Delete Large Face List Face\" or \"Delete Large Face List\" is called.\n\nNote that persistedFaceId is different from faceId generated by \"Detect\".\n>\n*\n  * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.\n  * Each person entry can hold up to 248 faces.\n  * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.\n  * \"targetFace\" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided \"targetFace\" rectangle is not returned from \"Detect\", there's no guarantee to detect and add the face successfully.\n  * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures.\n  * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.\n  * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer to https://learn.microsoft.com/azure/ai-services/computer-vision/how-to/specify-detection-model\n\n> [!NOTE]\n>\n> *\n>   * Free-tier subscription quota: 1,000 faces per Large Face List.\n>   * S0-tier subscription quota: 1,000,000 faces per Large Face List.",
        "consumes": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "largeFaceListId",
            "in": "path",
            "description": "Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-z0-9-_]+$"
          },
          {
            "name": "targetFace",
            "in": "query",
            "description": "A face rectangle to specify the target face to be added to a person, in the format of 'targetFace=left,top,width,height'.",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "csv",
            "minItems": 4,
            "maxItems": 4
          },
          {
            "name": "detectionModel",
            "in": "query",
            "description": "The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel' values include 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'.",
            "required": false,
            "type": "string",
            "default": "detection_01",
            "enum": [
              "detection_01",
              "detection_02",
              "detection_03"
            ],
            "x-ms-enum": {
              "name": "DetectionModel",
              "modelAsString": true,
              "values": [
                {
                  "name": "detection_01",
                  "value": "detection_01",
                  "description": "The default detection model. Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected."
                },
                {
                  "name": "detection_02",
                  "value": "detection_02",
                  "description": "Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces."
                },
                {
                  "name": "detection_03",
                  "value": "detection_03",
                  "description": "Detection model released in 2021 February with improved accuracy especially on small faces."
                }
              ]
            }
          },
          {
            "name": "userData",
            "in": "query",
            "description": "User-provided data attached to the face. The size limit is 1K.",
            "required": false,
            "type": "string",
            "maxLength": 1024
          },
          {
            "name": "imageContent",
            "in": "body",
            "description": "The image to be analyzed",
            "required": true,
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns a new persistedFaceId.",
            "schema": {
              "$ref": "#/definitions/AddFaceResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Add Face to LargeFaceList": {
            "$ref": "./examples/FaceListOperations_AddLargeFaceListFaceFromStream.json"
          }
        }
      }
    },
    "/largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces?_overload=addLargePersonGroupPersonFace": {
      "post": {
        "operationId": "PersonGroupOperations_AddLargePersonGroupPersonFace",
        "summary": "Add a face to a person into a Large Person Group for face identification or verification.",
        "description": "To deal with an image containing multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted face feature(s) will be stored on server until \"Delete Large Person Group Person Face\", \"Delete Large Person Group Person\" or \"Delete Large Person Group\" is called.\n\nNote that persistedFaceId is different from faceId generated by \"Detect\".\n>\n*\n  * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.\n  * Each person entry can hold up to 248 faces.\n  * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.\n  * \"targetFace\" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided \"targetFace\" rectangle is not returned from \"Detect\", there's no guarantee to detect and add the face successfully.\n  * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures.\n  * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.\n  * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer to https://learn.microsoft.com/azure/ai-services/computer-vision/how-to/specify-detection-model",
        "consumes": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "largePersonGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-z0-9-_]+$"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "ID of the person.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "targetFace",
            "in": "query",
            "description": "A face rectangle to specify the target face to be added to a person, in the format of 'targetFace=left,top,width,height'.",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "csv",
            "minItems": 4,
            "maxItems": 4
          },
          {
            "name": "detectionModel",
            "in": "query",
            "description": "The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel' values include 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'.",
            "required": false,
            "type": "string",
            "default": "detection_01",
            "enum": [
              "detection_01",
              "detection_02",
              "detection_03"
            ],
            "x-ms-enum": {
              "name": "DetectionModel",
              "modelAsString": true,
              "values": [
                {
                  "name": "detection_01",
                  "value": "detection_01",
                  "description": "The default detection model. Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected."
                },
                {
                  "name": "detection_02",
                  "value": "detection_02",
                  "description": "Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces."
                },
                {
                  "name": "detection_03",
                  "value": "detection_03",
                  "description": "Detection model released in 2021 February with improved accuracy especially on small faces."
                }
              ]
            }
          },
          {
            "name": "userData",
            "in": "query",
            "description": "User-provided data attached to the face. The size limit is 1K.",
            "required": false,
            "type": "string",
            "maxLength": 1024
          },
          {
            "name": "imageContent",
            "in": "body",
            "description": "The image to be analyzed",
            "required": true,
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns a new persistedFaceId.",
            "schema": {
              "$ref": "#/definitions/AddFaceResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Add Face in LargePersonGroup Person": {
            "$ref": "./examples/PersonGroupOperations_AddLargePersonGroupPersonFaceFromStream.json"
          }
        }
      }
    },
    "/persongroups/{personGroupId}/persons/{personId}/persistedfaces?_overload=addPersonGroupPersonFace": {
      "post": {
        "operationId": "PersonGroupOperations_AddPersonGroupPersonFace",
        "summary": "Add a face to a person into a Person Group for face identification or verification.",
        "description": "To deal with an image containing multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted face feature(s) will be stored on server until \"Delete Person Group Person Face\", \"Delete Person Group Person\" or \"Delete Person Group\" is called.\n\nNote that persistedFaceId is different from faceId generated by \"Detect\".\n>\n*\n  * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.\n  * Each person entry can hold up to 248 faces.\n  * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.\n  * \"targetFace\" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided \"targetFace\" rectangle is not returned from \"Detect\", there's no guarantee to detect and add the face successfully.\n  * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures.\n  * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.\n  * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer to https://learn.microsoft.com/azure/ai-services/computer-vision/how-to/specify-detection-model",
        "consumes": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "personGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-z0-9-_]+$"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "ID of the person.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "targetFace",
            "in": "query",
            "description": "A face rectangle to specify the target face to be added to a person, in the format of 'targetFace=left,top,width,height'.",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "csv",
            "minItems": 4,
            "maxItems": 4
          },
          {
            "name": "detectionModel",
            "in": "query",
            "description": "The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel' values include 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'.",
            "required": false,
            "type": "string",
            "default": "detection_01",
            "enum": [
              "detection_01",
              "detection_02",
              "detection_03"
            ],
            "x-ms-enum": {
              "name": "DetectionModel",
              "modelAsString": true,
              "values": [
                {
                  "name": "detection_01",
                  "value": "detection_01",
                  "description": "The default detection model. Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected."
                },
                {
                  "name": "detection_02",
                  "value": "detection_02",
                  "description": "Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces."
                },
                {
                  "name": "detection_03",
                  "value": "detection_03",
                  "description": "Detection model released in 2021 February with improved accuracy especially on small faces."
                }
              ]
            }
          },
          {
            "name": "userData",
            "in": "query",
            "description": "User-provided data attached to the face. The size limit is 1K.",
            "required": false,
            "type": "string",
            "maxLength": 1024
          },
          {
            "name": "imageContent",
            "in": "body",
            "description": "The image to be analyzed",
            "required": true,
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns a new persistedFaceId.",
            "schema": {
              "$ref": "#/definitions/AddFaceResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Add Face to PersonGroup Person": {
            "$ref": "./examples/PersonGroupOperations_AddPersonGroupPersonFaceFromStream.json"
          }
        }
      }
    },
    "/persons/{personId}/recognitionModels/{recognitionModel}/persistedfaces?_overload=addPersonFaceFromUrl": {
      "post": {
        "operationId": "PersonDirectoryOperations_AddPersonFaceFromUrl",
        "summary": "Add a face to a person (see Person Directory \"Create Person\") for face identification or verification.",
        "description": "To deal with an image containing multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted face feature(s) will be stored on server until Person Directory \"Delete Person Face\" or \"Delete Person\" is called.\n\nNote that persistedFaceId is different from faceId generated by \"Detect\".\n>\n*\n  * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.\n  * Each person entry can hold up to 248 faces.\n  * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.\n  * \"targetFace\" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided \"targetFace\" rectangle is not returned from \"Detect\", there's no guarantee to detect and add the face successfully.\n  * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures.\n  * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.\n  * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer to https://learn.microsoft.com/azure/ai-services/computer-vision/how-to/specify-detection-model\n*\n  * Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from different persons are processed in parallel.\n  * This is a long running operation. Use Response Header \"Operation-Location\" to determine when the AddFace operation has successfully propagated for future requests to \"Identify\". For further information about Operation-Locations see \"Get Face Operation Status\".",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "Person ID of the person.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "recognitionModel",
            "in": "path",
            "description": "The 'recognitionModel' associated with faces.",
            "required": true,
            "type": "string",
            "enum": [
              "recognition_01",
              "recognition_02",
              "recognition_03",
              "recognition_04"
            ],
            "x-ms-enum": {
              "name": "RecognitionModel",
              "modelAsString": true,
              "values": [
                {
                  "name": "recognition_01",
                  "value": "recognition_01",
                  "description": "The default recognition model for \"Detect\". All those faceIds created before 2019 March are bonded with this recognition model."
                },
                {
                  "name": "recognition_02",
                  "value": "recognition_02",
                  "description": "Recognition model released in 2019 March."
                },
                {
                  "name": "recognition_03",
                  "value": "recognition_03",
                  "description": "Recognition model released in 2020 May."
                },
                {
                  "name": "recognition_04",
                  "value": "recognition_04",
                  "description": "Recognition model released in 2021 February. It's recommended to use this recognition model for better recognition accuracy."
                }
              ]
            }
          },
          {
            "name": "targetFace",
            "in": "query",
            "description": "A face rectangle to specify the target face to be added to a person, in the format of 'targetFace=left,top,width,height'.",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "csv",
            "minItems": 4,
            "maxItems": 4
          },
          {
            "name": "detectionModel",
            "in": "query",
            "description": "The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel' values include 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'.",
            "required": false,
            "type": "string",
            "default": "detection_01",
            "enum": [
              "detection_01",
              "detection_02",
              "detection_03"
            ],
            "x-ms-enum": {
              "name": "DetectionModel",
              "modelAsString": true,
              "values": [
                {
                  "name": "detection_01",
                  "value": "detection_01",
                  "description": "The default detection model. Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected."
                },
                {
                  "name": "detection_02",
                  "value": "detection_02",
                  "description": "Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces."
                },
                {
                  "name": "detection_03",
                  "value": "detection_03",
                  "description": "Detection model released in 2021 February with improved accuracy especially on small faces."
                }
              ]
            }
          },
          {
            "name": "userData",
            "in": "query",
            "description": "User-provided data attached to the face. The size limit is 1K.",
            "required": false,
            "type": "string",
            "maxLength": 1024
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string",
                  "format": "uri",
                  "description": "URL of input image."
                }
              },
              "required": [
                "url"
              ]
            }
          }
        ],
        "responses": {
          "202": {
            "description": "A successful call returns an empty response body. The service has accepted the request and will start processing soon. The client can query the operation status and result using the URL specified in the 'Operation-Location' response header. The URL expires in 48 hours.",
            "schema": {
              "$ref": "#/definitions/AddFaceResult"
            },
            "headers": {
              "Location": {
                "type": "string",
                "format": "uri",
                "description": "The location of an instance of PersonDirectoryFace"
              },
              "operation-Location": {
                "type": "string",
                "format": "uri",
                "description": "The location of an instance of OperationResult"
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Add Face to PersonDirectory Person from Url": {
            "$ref": "./examples/PersonDirectoryOperations_AddPersonFaceFromUrl.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/verify?_overload=verifyFromLargePersonGroup": {
      "post": {
        "operationId": "FaceRecognitionOperations_VerifyFromLargePersonGroup",
        "summary": "Verify whether a face belongs to a person in a Large Person Group.",
        "description": "> [!NOTE]\n>\n> *\n>   * Higher face image quality means better identification precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.\n>   * For the scenarios that are sensitive to accuracy please make your own judgment.\n>   * The 'recognitionModel' associated with the query face should be the same as the 'recognitionModel' used by the Large Person Group.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "faceId": {
                  "$ref": "#/definitions/Azure.Core.uuid",
                  "description": "The faceId of the face, come from \"Detect\"."
                },
                "largePersonGroupId": {
                  "type": "string",
                  "description": "Using existing largePersonGroupId and personId for fast loading a specified person. largePersonGroupId is created in \"Create Large Person Group\"."
                },
                "personId": {
                  "$ref": "#/definitions/Azure.Core.uuid",
                  "description": "Specify a certain person in Large Person Group."
                }
              },
              "required": [
                "faceId",
                "largePersonGroupId",
                "personId"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the verification result.",
            "schema": {
              "$ref": "#/definitions/VerificationResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Verify from LargePersonGroup": {
            "$ref": "./examples/FaceRecognitionOperations_VerifyFromLargePersonGroup.json"
          }
        }
      }
    },
    "/verify?_overload=verifyFromPersonDirectory": {
      "post": {
        "operationId": "FaceRecognitionOperations_VerifyFromPersonDirectory",
        "summary": "Verify whether a face belongs to a person in Person Directory.",
        "description": "> [!NOTE]\n>\n> *\n>   * Higher face image quality means better identification precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.\n>   * For the scenarios that are sensitive to accuracy please make your own judgment.\n>   * The Verify operation can only match faces obtained with the same recognition model, that is associated with the query face.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "faceId": {
                  "$ref": "#/definitions/Azure.Core.uuid",
                  "description": "The faceId of the face, come from \"Detect\"."
                },
                "personId": {
                  "$ref": "#/definitions/Azure.Core.uuid",
                  "description": "Specify a certain person in PersonDirectory Person."
                }
              },
              "required": [
                "faceId",
                "personId"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the verification result.",
            "schema": {
              "$ref": "#/definitions/VerificationResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Verify from PersonDirectory": {
            "$ref": "./examples/FaceRecognitionOperations_VerifyFromPersonDirectory.json"
          }
        }
      }
    },
    "/verify?_overload=verifyFromPersonGroup": {
      "post": {
        "operationId": "FaceRecognitionOperations_VerifyFromPersonGroup",
        "summary": "Verify whether a face belongs to a person in a Person Group.",
        "description": "> [!NOTE]\n>\n> *\n>   * Higher face image quality means better identification precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.\n>   * For the scenarios that are sensitive to accuracy please make your own judgment.\n>   * The 'recognitionModel' associated with the query face should be the same as the 'recognitionModel' used by the Person Group.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "faceId": {
                  "$ref": "#/definitions/Azure.Core.uuid",
                  "description": "The faceId of the face, come from \"Detect\"."
                },
                "personGroupId": {
                  "type": "string",
                  "description": "Using existing personGroupId and personId for fast loading a specified person. personGroupId is created in \"Create Person Group\"."
                },
                "personId": {
                  "$ref": "#/definitions/Azure.Core.uuid",
                  "description": "Specify a certain person in Person Group."
                }
              },
              "required": [
                "faceId",
                "personGroupId",
                "personId"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the verification result.",
            "schema": {
              "$ref": "#/definitions/VerificationResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/FaceErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Verify from PersonGroup": {
            "$ref": "./examples/FaceRecognitionOperations_VerifyFromPersonGroup.json"
          }
        }
      }
    }
  },
  "definitions": {
    "AccessoryItem": {
      "type": "object",
      "description": "Accessory item and corresponding confidence level.",
      "properties": {
        "type": {
          "$ref": "#/definitions/AccessoryType",
          "description": "Type of the accessory."
        },
        "confidence": {
          "type": "number",
          "format": "float",
          "description": "Confidence level of the accessory type. Range between [0,1].",
          "minimum": 0,
          "maximum": 1
        }
      },
      "required": [
        "type",
        "confidence"
      ]
    },
    "AccessoryType": {
      "type": "string",
      "description": "Type of the accessory.",
      "enum": [
        "headwear",
        "glasses",
        "mask"
      ],
      "x-ms-enum": {
        "name": "AccessoryType",
        "modelAsString": true,
        "values": [
          {
            "name": "headwear",
            "value": "headwear",
            "description": "Head wear."
          },
          {
            "name": "glasses",
            "value": "glasses",
            "description": "Glasses."
          },
          {
            "name": "mask",
            "value": "mask",
            "description": "Mask."
          }
        ]
      }
    },
    "AddFaceResult": {
      "type": "object",
      "description": "Response body for adding face.",
      "properties": {
        "persistedFaceId": {
          "$ref": "#/definitions/Azure.Core.uuid",
          "description": "Persisted Face ID of the added face, which is persisted and will not expire. Different from faceId which is created in \"Detect\" and will expire in 24 hours after the detection call."
        }
      },
      "required": [
        "persistedFaceId"
      ]
    },
    "AuditLivenessResponseInfo": {
      "type": "object",
      "description": "Audit entry for a response in the session.",
      "properties": {
        "body": {
          "$ref": "#/definitions/LivenessResponseBody",
          "description": "The response body. The schema of this field will depend on the request.url and request.method used by the client."
        },
        "statusCode": {
          "type": "integer",
          "format": "int32",
          "description": "The HTTP status code returned to the client."
        },
        "latencyInMilliseconds": {
          "type": "integer",
          "format": "int64",
          "description": "The server measured latency for this request in milliseconds."
        }
      },
      "required": [
        "body",
        "statusCode",
        "latencyInMilliseconds"
      ]
    },
    "AuditRequestInfo": {
      "type": "object",
      "description": "Audit entry for a request in the session.",
      "properties": {
        "url": {
          "type": "string",
          "description": "The relative URL and query of the liveness request."
        },
        "method": {
          "type": "string",
          "description": "The HTTP method of the request (i.e., GET, POST, DELETE)."
        },
        "contentLength": {
          "type": "integer",
          "format": "int64",
          "description": "The length of the request body in bytes."
        },
        "contentType": {
          "type": "string",
          "description": "The content type of the request."
        },
        "userAgent": {
          "type": "string",
          "description": "The user agent used to submit the request."
        }
      },
      "required": [
        "url",
        "method",
        "contentType"
      ]
    },
    "Azure.Core.uuid": {
      "type": "string",
      "format": "uuid",
      "description": "Universally Unique Identifier"
    },
    "BlurLevel": {
      "type": "string",
      "description": "Indicates level of blurriness.",
      "enum": [
        "low",
        "medium",
        "high"
      ],
      "x-ms-enum": {
        "name": "BlurLevel",
        "modelAsString": true,
        "values": [
          {
            "name": "low",
            "value": "low",
            "description": "Low blur level."
          },
          {
            "name": "medium",
            "value": "medium",
            "description": "Medium blur level."
          },
          {
            "name": "high",
            "value": "high",
            "description": "High blur level."
          }
        ]
      }
    },
    "BlurProperties": {
      "type": "object",
      "description": "Properties describing any presence of blur within the image.",
      "properties": {
        "blurLevel": {
          "$ref": "#/definitions/BlurLevel",
          "description": "An enum value indicating level of blurriness."
        },
        "value": {
          "type": "number",
          "format": "float",
          "description": "A number indicating level of blurriness ranging from 0 to 1.",
          "minimum": 0,
          "maximum": 1
        }
      },
      "required": [
        "blurLevel",
        "value"
      ]
    },
    "CreateLivenessSessionContent": {
      "type": "object",
      "description": "Request for creating liveness session.",
      "properties": {
        "livenessOperationMode": {
          "$ref": "#/definitions/LivenessOperationMode",
          "description": "Type of liveness mode the client should follow."
        },
        "sendResultsToClient": {
          "type": "boolean",
          "description": "Whether or not to allow a '200 - Success' response body to be sent to the client, which may be undesirable for security reasons. Default is false, clients will receive a '204 - NoContent' empty body response. Regardless of selection, calling Session GetResult will always contain a response body enabling business logic to be implemented."
        },
        "deviceCorrelationIdSetInClient": {
          "type": "boolean",
          "description": "Whether or not to allow client to set their own 'deviceCorrelationId' via the Vision SDK. Default is false, and 'deviceCorrelationId' must be set in this request body."
        },
        "deviceCorrelationId": {
          "type": "string",
          "description": "Unique Guid per each end-user device. This is to provide rate limiting and anti-hammering. If 'deviceCorrelationIdSetInClient' is true in this request, this 'deviceCorrelationId' must be null."
        },
        "authTokenTimeToLiveInSeconds": {
          "type": "integer",
          "format": "int32",
          "description": "Seconds the session should last for. Range is 60 to 86400 seconds. Default value is 600.",
          "default": 600,
          "minimum": 60,
          "maximum": 86400
        }
      },
      "required": [
        "livenessOperationMode"
      ]
    },
    "CreateLivenessSessionResult": {
      "type": "object",
      "description": "Response of liveness session creation.",
      "properties": {
        "sessionId": {
          "type": "string",
          "description": "The unique session ID of the created session. It will expire 48 hours after it was created or may be deleted sooner using the corresponding Session DELETE operation."
        },
        "authToken": {
          "type": "string",
          "description": "Bearer token to provide authentication for the Vision SDK running on a client application. This Bearer token has limited permissions to perform only the required action and expires after the TTL time. It is also auditable."
        }
      },
      "required": [
        "sessionId",
        "authToken"
      ]
    },
    "CreateLivenessWithVerifySessionContent": {
      "type": "object",
      "description": "Request of liveness with verify session creation.",
      "properties": {
        "Parameters": {
          "$ref": "#/definitions/CreateLivenessSessionContent",
          "description": "The parameters for creating session."
        },
        "VerifyImage": {
          "type": "string",
          "format": "byte",
          "description": "The image stream for verify. Content-Disposition header field for this part must have filename."
        }
      },
      "required": [
        "Parameters",
        "VerifyImage"
      ]
    },
    "CreateLivenessWithVerifySessionResult": {
      "type": "object",
      "description": "Response of liveness session with verify creation with verify image provided.",
      "properties": {
        "sessionId": {
          "type": "string",
          "description": "The unique session ID of the created session. It will expire 48 hours after it was created or may be deleted sooner using the corresponding Session DELETE operation."
        },
        "authToken": {
          "type": "string",
          "description": "Bearer token to provide authentication for the Vision SDK running on a client application. This Bearer token has limited permissions to perform only the required action and expires after the TTL time. It is also auditable."
        },
        "verifyImage": {
          "$ref": "#/definitions/LivenessWithVerifyImage",
          "description": "The detail of face for verification."
        }
      },
      "required": [
        "sessionId",
        "authToken"
      ]
    },
    "CreatePersonResult": {
      "type": "object",
      "description": "Response of create person.",
      "properties": {
        "personId": {
          "$ref": "#/definitions/Azure.Core.uuid",
          "description": "Person ID of the person."
        }
      },
      "required": [
        "personId"
      ]
    },
    "DynamicPersonGroup": {
      "type": "object",
      "description": "A container that references Person Directory \"Create Person\".",
      "properties": {
        "dynamicPersonGroupId": {
          "$ref": "#/definitions/collectionId",
          "description": "ID of the dynamic person group.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "User defined name, maximum length is 128.",
          "minLength": 1,
          "maxLength": 128
        },
        "userData": {
          "type": "string",
          "description": "Optional user defined data. Length should not exceed 16K.",
          "maxLength": 16384
        }
      },
      "required": [
        "dynamicPersonGroupId",
        "name"
      ]
    },
    "ExposureLevel": {
      "type": "string",
      "description": "Indicates level of exposure.",
      "enum": [
        "underExposure",
        "goodExposure",
        "overExposure"
      ],
      "x-ms-enum": {
        "name": "ExposureLevel",
        "modelAsString": true,
        "values": [
          {
            "name": "underExposure",
            "value": "underExposure",
            "description": "Low exposure level."
          },
          {
            "name": "goodExposure",
            "value": "goodExposure",
            "description": "Good exposure level."
          },
          {
            "name": "overExposure",
            "value": "overExposure",
            "description": "High exposure level."
          }
        ]
      }
    },
    "ExposureProperties": {
      "type": "object",
      "description": "Properties describing exposure level of the image.",
      "properties": {
        "exposureLevel": {
          "$ref": "#/definitions/ExposureLevel",
          "description": "An enum value indicating level of exposure."
        },
        "value": {
          "type": "number",
          "format": "float",
          "description": "A number indicating level of exposure level ranging from 0 to 1. [0, 0.25) is under exposure. [0.25, 0.75) is good exposure. [0.75, 1] is over exposure.",
          "minimum": 0,
          "maximum": 1
        }
      },
      "required": [
        "exposureLevel",
        "value"
      ]
    },
    "FaceAttributes": {
      "type": "object",
      "description": "Face attributes for the detected face.",
      "properties": {
        "age": {
          "type": "number",
          "format": "float",
          "description": "Age in years."
        },
        "smile": {
          "type": "number",
          "format": "float",
          "description": "Smile intensity, a number between [0,1].",
          "minimum": 0,
          "maximum": 1
        },
        "facialHair": {
          "$ref": "#/definitions/FacialHair",
          "description": "Properties describing facial hair attributes."
        },
        "glasses": {
          "$ref": "#/definitions/GlassesType",
          "description": "Glasses type if any of the face."
        },
        "headPose": {
          "$ref": "#/definitions/HeadPose",
          "description": "3-D roll/yaw/pitch angles for face direction."
        },
        "hair": {
          "$ref": "#/definitions/HairProperties",
          "description": "Properties describing hair attributes."
        },
        "occlusion": {
          "$ref": "#/definitions/OcclusionProperties",
          "description": "Properties describing occlusions on a given face."
        },
        "accessories": {
          "type": "array",
          "description": "Properties describing any accessories on a given face.",
          "items": {
            "$ref": "#/definitions/AccessoryItem"
          },
          "x-ms-identifiers": []
        },
        "blur": {
          "$ref": "#/definitions/BlurProperties",
          "description": "Properties describing any presence of blur within the image."
        },
        "exposure": {
          "$ref": "#/definitions/ExposureProperties",
          "description": "Properties describing exposure level of the image."
        },
        "noise": {
          "$ref": "#/definitions/NoiseProperties",
          "description": "Properties describing noise level of the image."
        },
        "mask": {
          "$ref": "#/definitions/MaskProperties",
          "description": "Properties describing the presence of a mask on a given face."
        },
        "qualityForRecognition": {
          "$ref": "#/definitions/QualityForRecognition",
          "description": "Properties describing the overall image quality regarding whether the image being used in the detection is of sufficient quality to attempt face recognition on."
        }
      }
    },
    "FaceDetectionResult": {
      "type": "object",
      "description": "Response for detect API.",
      "properties": {
        "faceId": {
          "$ref": "#/definitions/Azure.Core.uuid",
          "description": "Unique faceId of the detected face, created by detection API and it will expire 24 hours after the detection call. To return this, it requires 'returnFaceId' parameter to be true."
        },
        "recognitionModel": {
          "$ref": "#/definitions/RecognitionModel",
          "description": "The 'recognitionModel' associated with this faceId. This is only returned when 'returnRecognitionModel' is explicitly set as true."
        },
        "faceRectangle": {
          "$ref": "#/definitions/FaceRectangle",
          "description": "A rectangle area for the face location on image."
        },
        "faceLandmarks": {
          "$ref": "#/definitions/FaceLandmarks",
          "description": "An array of 27-point face landmarks pointing to the important positions of face components. To return this, it requires 'returnFaceLandmarks' parameter to be true."
        },
        "faceAttributes": {
          "$ref": "#/definitions/FaceAttributes",
          "description": "Face attributes for detected face."
        }
      },
      "required": [
        "faceRectangle"
      ]
    },
    "FaceError": {
      "type": "object",
      "description": "The error object. For comprehensive details on error codes and messages returned by the Face Service, please refer to the following link: https://aka.ms/face-error-codes-and-messages.",
      "properties": {
        "code": {
          "type": "string",
          "description": "One of a server-defined set of error codes."
        },
        "message": {
          "type": "string",
          "description": "A human-readable representation of the error."
        }
      },
      "required": [
        "code",
        "message"
      ]
    },
    "FaceErrorResponse": {
      "type": "object",
      "description": "A response containing error details.",
      "properties": {
        "error": {
          "$ref": "#/definitions/FaceError",
          "description": "The error object."
        }
      },
      "required": [
        "error"
      ]
    },
    "FaceLandmarks": {
      "type": "object",
      "description": "A collection of 27-point face landmarks pointing to the important positions of face components.",
      "properties": {
        "pupilLeft": {
          "$ref": "#/definitions/LandmarkCoordinate",
          "description": "The coordinates of the left eye pupil."
        },
        "pupilRight": {
          "$ref": "#/definitions/LandmarkCoordinate",
          "description": "The coordinates of the right eye pupil."
        },
        "noseTip": {
          "$ref": "#/definitions/LandmarkCoordinate",
          "description": "The coordinates of the nose tip."
        },
        "mouthLeft": {
          "$ref": "#/definitions/LandmarkCoordinate",
          "description": "The coordinates of the mouth left."
        },
        "mouthRight": {
          "$ref": "#/definitions/LandmarkCoordinate",
          "description": "The coordinates of the mouth right."
        },
        "eyebrowLeftOuter": {
          "$ref": "#/definitions/LandmarkCoordinate",
          "description": "The coordinates of the left eyebrow outer."
        },
        "eyebrowLeftInner": {
          "$ref": "#/definitions/LandmarkCoordinate",
          "description": "The coordinates of the left eyebrow inner."
        },
        "eyeLeftOuter": {
          "$ref": "#/definitions/LandmarkCoordinate",
          "description": "The coordinates of the left eye outer."
        },
        "eyeLeftTop": {
          "$ref": "#/definitions/LandmarkCoordinate",
          "description": "The coordinates of the left eye top."
        },
        "eyeLeftBottom": {
          "$ref": "#/definitions/LandmarkCoordinate",
          "description": "The coordinates of the left eye bottom."
        },
        "eyeLeftInner": {
          "$ref": "#/definitions/LandmarkCoordinate",
          "description": "The coordinates of the left eye inner."
        },
        "eyebrowRightInner": {
          "$ref": "#/definitions/LandmarkCoordinate",
          "description": "The coordinates of the right eyebrow inner."
        },
        "eyebrowRightOuter": {
          "$ref": "#/definitions/LandmarkCoordinate",
          "description": "The coordinates of the right eyebrow outer."
        },
        "eyeRightInner": {
          "$ref": "#/definitions/LandmarkCoordinate",
          "description": "The coordinates of the right eye inner."
        },
        "eyeRightTop": {
          "$ref": "#/definitions/LandmarkCoordinate",
          "description": "The coordinates of the right eye top."
        },
        "eyeRightBottom": {
          "$ref": "#/definitions/LandmarkCoordinate",
          "description": "The coordinates of the right eye bottom."
        },
        "eyeRightOuter": {
          "$ref": "#/definitions/LandmarkCoordinate",
          "description": "The coordinates of the right eye outer."
        },
        "noseRootLeft": {
          "$ref": "#/definitions/LandmarkCoordinate",
          "description": "The coordinates of the nose root left."
        },
        "noseRootRight": {
          "$ref": "#/definitions/LandmarkCoordinate",
          "description": "The coordinates of the nose root right."
        },
        "noseLeftAlarTop": {
          "$ref": "#/definitions/LandmarkCoordinate",
          "description": "The coordinates of the nose left alar top."
        },
        "noseRightAlarTop": {
          "$ref": "#/definitions/LandmarkCoordinate",
          "description": "The coordinates of the nose right alar top."
        },
        "noseLeftAlarOutTip": {
          "$ref": "#/definitions/LandmarkCoordinate",
          "description": "The coordinates of the nose left alar out tip."
        },
        "noseRightAlarOutTip": {
          "$ref": "#/definitions/LandmarkCoordinate",
          "description": "The coordinates of the nose right alar out tip."
        },
        "upperLipTop": {
          "$ref": "#/definitions/LandmarkCoordinate",
          "description": "The coordinates of the upper lip top."
        },
        "upperLipBottom": {
          "$ref": "#/definitions/LandmarkCoordinate",
          "description": "The coordinates of the upper lip bottom."
        },
        "underLipTop": {
          "$ref": "#/definitions/LandmarkCoordinate",
          "description": "The coordinates of the under lip top."
        },
        "underLipBottom": {
          "$ref": "#/definitions/LandmarkCoordinate",
          "description": "The coordinates of the under lip bottom."
        }
      },
      "required": [
        "pupilLeft",
        "pupilRight",
        "noseTip",
        "mouthLeft",
        "mouthRight",
        "eyebrowLeftOuter",
        "eyebrowLeftInner",
        "eyeLeftOuter",
        "eyeLeftTop",
        "eyeLeftBottom",
        "eyeLeftInner",
        "eyebrowRightInner",
        "eyebrowRightOuter",
        "eyeRightInner",
        "eyeRightTop",
        "eyeRightBottom",
        "eyeRightOuter",
        "noseRootLeft",
        "noseRootRight",
        "noseLeftAlarTop",
        "noseRightAlarTop",
        "noseLeftAlarOutTip",
        "noseRightAlarOutTip",
        "upperLipTop",
        "upperLipBottom",
        "underLipTop",
        "underLipBottom"
      ]
    },
    "FaceList": {
      "type": "object",
      "description": "Face list is a list of faces, up to 1,000 faces.",
      "properties": {
        "name": {
          "type": "string",
          "description": "User defined name, maximum length is 128.",
          "minLength": 1,
          "maxLength": 128
        },
        "userData": {
          "type": "string",
          "description": "Optional user defined data. Length should not exceed 16K.",
          "maxLength": 16384
        },
        "recognitionModel": {
          "$ref": "#/definitions/RecognitionModel",
          "description": "Name of recognition model. Recognition model is used when the face features are extracted and associated with detected faceIds."
        },
        "faceListId": {
          "$ref": "#/definitions/collectionId",
          "description": "Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.",
          "readOnly": true
        },
        "persistedFaces": {
          "type": "array",
          "description": "Face ids of registered faces in the face list.",
          "items": {
            "$ref": "#/definitions/FaceListFace"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "name",
        "faceListId"
      ]
    },
    "FaceListFace": {
      "type": "object",
      "description": "Face resource for face list.",
      "properties": {
        "persistedFaceId": {
          "$ref": "#/definitions/Azure.Core.uuid",
          "description": "Face ID of the face.",
          "readOnly": true
        },
        "userData": {
          "type": "string",
          "description": "User-provided data attached to the face. The length limit is 1K.",
          "maxLength": 1024
        }
      },
      "required": [
        "persistedFaceId"
      ]
    },
    "FaceListItem": {
      "type": "object",
      "description": "Face list item for list face list.",
      "properties": {
        "name": {
          "type": "string",
          "description": "User defined name, maximum length is 128.",
          "minLength": 1,
          "maxLength": 128
        },
        "userData": {
          "type": "string",
          "description": "Optional user defined data. Length should not exceed 16K.",
          "maxLength": 16384
        },
        "recognitionModel": {
          "$ref": "#/definitions/RecognitionModel",
          "description": "Name of recognition model. Recognition model is used when the face features are extracted and associated with detected faceIds."
        },
        "faceListId": {
          "$ref": "#/definitions/collectionId",
          "description": "Valid character is letter in lower case or digit or '-' or '_', maximum length is 64."
        }
      },
      "required": [
        "name",
        "faceListId"
      ]
    },
    "FaceRectangle": {
      "type": "object",
      "description": "A rectangle within which a face can be found.",
      "properties": {
        "top": {
          "type": "integer",
          "format": "int32",
          "description": "The distance from the top edge if the image to the top edge of the rectangle, in pixels."
        },
        "left": {
          "type": "integer",
          "format": "int32",
          "description": "The distance from the left edge if the image to the left edge of the rectangle, in pixels."
        },
        "width": {
          "type": "integer",
          "format": "int32",
          "description": "The width of the rectangle, in pixels."
        },
        "height": {
          "type": "integer",
          "format": "int32",
          "description": "The height of the rectangle, in pixels."
        }
      },
      "required": [
        "top",
        "left",
        "width",
        "height"
      ]
    },
    "FaceSessionStatus": {
      "type": "string",
      "description": "The current status of the session.",
      "enum": [
        "NotStarted",
        "Started",
        "ResultAvailable"
      ],
      "x-ms-enum": {
        "name": "FaceSessionStatus",
        "modelAsString": true,
        "values": [
          {
            "name": "NotStarted",
            "value": "NotStarted",
            "description": "Session has not started."
          },
          {
            "name": "Started",
            "value": "Started",
            "description": "Session has started."
          },
          {
            "name": "ResultAvailable",
            "value": "ResultAvailable",
            "description": "Session has available result."
          }
        ]
      }
    },
    "FacialHair": {
      "type": "object",
      "description": "Properties describing facial hair attributes.",
      "properties": {
        "moustache": {
          "type": "number",
          "format": "float",
          "description": "A number ranging from 0 to 1 indicating a level of confidence associated with a property.",
          "minimum": 0,
          "maximum": 1
        },
        "beard": {
          "type": "number",
          "format": "float",
          "description": "A number ranging from 0 to 1 indicating a level of confidence associated with a property.",
          "minimum": 0,
          "maximum": 1
        },
        "sideburns": {
          "type": "number",
          "format": "float",
          "description": "A number ranging from 0 to 1 indicating a level of confidence associated with a property.",
          "minimum": 0,
          "maximum": 1
        }
      },
      "required": [
        "moustache",
        "beard",
        "sideburns"
      ]
    },
    "FindSimilarResult": {
      "type": "object",
      "description": "Response body for find similar face operation.",
      "properties": {
        "confidence": {
          "type": "number",
          "format": "float",
          "description": "Confidence value of the candidate. The higher confidence, the more similar. Range between [0,1].",
          "minimum": 0,
          "maximum": 1
        },
        "faceId": {
          "$ref": "#/definitions/Azure.Core.uuid",
          "description": "faceId of candidate face when find by faceIds. faceId is created by \"Detect\" and will expire 24 hours after the detection call."
        },
        "persistedFaceId": {
          "$ref": "#/definitions/Azure.Core.uuid",
          "description": "persistedFaceId of candidate face when find by faceListId or largeFaceListId. persistedFaceId in face list/large face list is persisted and will not expire."
        }
      },
      "required": [
        "confidence"
      ]
    },
    "GlassesType": {
      "type": "string",
      "description": "Glasses type of the face.",
      "enum": [
        "noGlasses",
        "readingGlasses",
        "sunglasses",
        "swimmingGoggles"
      ],
      "x-ms-enum": {
        "name": "GlassesType",
        "modelAsString": true,
        "values": [
          {
            "name": "noGlasses",
            "value": "noGlasses",
            "description": "No glasses on the face."
          },
          {
            "name": "readingGlasses",
            "value": "readingGlasses",
            "description": "Normal glasses on the face."
          },
          {
            "name": "sunglasses",
            "value": "sunglasses",
            "description": "Sunglasses on the face."
          },
          {
            "name": "swimmingGoggles",
            "value": "swimmingGoggles",
            "description": "Swimming goggles on the face."
          }
        ]
      }
    },
    "GroupingResult": {
      "type": "object",
      "description": "Response body for group face operation.",
      "properties": {
        "groups": {
          "type": "array",
          "description": "A partition of the original faces based on face similarity. Groups are ranked by number of faces.",
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Azure.Core.uuid"
            }
          },
          "x-ms-identifiers": []
        },
        "messyGroup": {
          "type": "array",
          "description": "Face ids array of faces that cannot find any similar faces from original faces.",
          "items": {
            "$ref": "#/definitions/Azure.Core.uuid"
          }
        }
      },
      "required": [
        "groups",
        "messyGroup"
      ]
    },
    "HairColor": {
      "type": "object",
      "description": "An array of candidate colors and confidence level in the presence of each.",
      "properties": {
        "color": {
          "$ref": "#/definitions/HairColorType",
          "description": "Name of the hair color."
        },
        "confidence": {
          "type": "number",
          "format": "float",
          "description": "Confidence level of the color. Range between [0,1].",
          "minimum": 0,
          "maximum": 1
        }
      },
      "required": [
        "color",
        "confidence"
      ]
    },
    "HairColorType": {
      "type": "string",
      "description": "Name of the hair color.",
      "enum": [
        "unknown",
        "white",
        "gray",
        "blond",
        "brown",
        "red",
        "black",
        "other"
      ],
      "x-ms-enum": {
        "name": "HairColorType",
        "modelAsString": true,
        "values": [
          {
            "name": "unknownHairColor",
            "value": "unknown",
            "description": "Unknown."
          },
          {
            "name": "white",
            "value": "white",
            "description": "White."
          },
          {
            "name": "gray",
            "value": "gray",
            "description": "Gray."
          },
          {
            "name": "blond",
            "value": "blond",
            "description": "Blond."
          },
          {
            "name": "brown",
            "value": "brown",
            "description": "Brown."
          },
          {
            "name": "red",
            "value": "red",
            "description": "Red."
          },
          {
            "name": "black",
            "value": "black",
            "description": "Black."
          },
          {
            "name": "other",
            "value": "other",
            "description": "Other."
          }
        ]
      }
    },
    "HairProperties": {
      "type": "object",
      "description": "Properties describing hair attributes.",
      "properties": {
        "bald": {
          "type": "number",
          "format": "float",
          "description": "A number describing confidence level of whether the person is bald.",
          "minimum": 0,
          "maximum": 1
        },
        "invisible": {
          "type": "boolean",
          "description": "A boolean value describing whether the hair is visible in the image."
        },
        "hairColor": {
          "type": "array",
          "description": "An array of candidate colors and confidence level in the presence of each.",
          "items": {
            "$ref": "#/definitions/HairColor"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "bald",
        "invisible",
        "hairColor"
      ]
    },
    "HeadPose": {
      "type": "object",
      "description": "3-D roll/yaw/pitch angles for face direction.",
      "properties": {
        "pitch": {
          "type": "number",
          "format": "float",
          "description": "Value of angles."
        },
        "roll": {
          "type": "number",
          "format": "float",
          "description": "Value of angles."
        },
        "yaw": {
          "type": "number",
          "format": "float",
          "description": "Value of angles."
        }
      },
      "required": [
        "pitch",
        "roll",
        "yaw"
      ]
    },
    "IdentificationCandidate": {
      "type": "object",
      "description": "Candidate for identify call.",
      "properties": {
        "personId": {
          "$ref": "#/definitions/Azure.Core.uuid",
          "description": "personId of candidate person."
        },
        "confidence": {
          "type": "number",
          "format": "float",
          "description": "Confidence value of the candidate. The higher confidence, the more similar. Range between [0,1].",
          "minimum": 0,
          "maximum": 1
        }
      },
      "required": [
        "personId",
        "confidence"
      ]
    },
    "IdentificationResult": {
      "type": "object",
      "description": "Identify result.",
      "properties": {
        "faceId": {
          "$ref": "#/definitions/Azure.Core.uuid",
          "description": "faceId of the query face."
        },
        "candidates": {
          "type": "array",
          "description": "Identified person candidates for that face (ranked by confidence). Array size should be no larger than input maxNumOfCandidatesReturned. If no person is identified, will return an empty array.",
          "items": {
            "$ref": "#/definitions/IdentificationCandidate"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "faceId",
        "candidates"
      ]
    },
    "ImageType": {
      "type": "string",
      "description": "The type of image.",
      "enum": [
        "Color",
        "Infrared",
        "Depth"
      ],
      "x-ms-enum": {
        "name": "ImageType",
        "modelAsString": true,
        "values": [
          {
            "name": "Color",
            "value": "Color",
            "description": "Color image."
          },
          {
            "name": "Infrared",
            "value": "Infrared",
            "description": "Infrared image."
          },
          {
            "name": "Depth",
            "value": "Depth",
            "description": "Depth image."
          }
        ]
      }
    },
    "LandmarkCoordinate": {
      "type": "object",
      "description": "Landmark coordinates within an image.",
      "properties": {
        "x": {
          "type": "number",
          "format": "float",
          "description": "The horizontal component, in pixels."
        },
        "y": {
          "type": "number",
          "format": "float",
          "description": "The vertical component, in pixels."
        }
      },
      "required": [
        "x",
        "y"
      ]
    },
    "LargeFaceList": {
      "type": "object",
      "description": "Large face list is a list of faces, up to 1,000,000 faces.",
      "properties": {
        "name": {
          "type": "string",
          "description": "User defined name, maximum length is 128.",
          "minLength": 1,
          "maxLength": 128
        },
        "userData": {
          "type": "string",
          "description": "Optional user defined data. Length should not exceed 16K.",
          "maxLength": 16384
        },
        "recognitionModel": {
          "$ref": "#/definitions/RecognitionModel",
          "description": "Name of recognition model. Recognition model is used when the face features are extracted and associated with detected faceIds."
        },
        "largeFaceListId": {
          "$ref": "#/definitions/collectionId",
          "description": "Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.",
          "readOnly": true
        }
      },
      "required": [
        "name",
        "largeFaceListId"
      ]
    },
    "LargeFaceListFace": {
      "type": "object",
      "description": "Face resource for large face list.",
      "properties": {
        "persistedFaceId": {
          "$ref": "#/definitions/Azure.Core.uuid",
          "description": "Face ID of the face.",
          "readOnly": true
        },
        "userData": {
          "type": "string",
          "description": "User-provided data attached to the face. The length limit is 1K.",
          "maxLength": 1024
        }
      },
      "required": [
        "persistedFaceId"
      ]
    },
    "LargePersonGroup": {
      "type": "object",
      "description": "The container of the uploaded person data, including face recognition feature, and up to 1,000,000 people.",
      "properties": {
        "name": {
          "type": "string",
          "description": "User defined name, maximum length is 128.",
          "minLength": 1,
          "maxLength": 128
        },
        "userData": {
          "type": "string",
          "description": "Optional user defined data. Length should not exceed 16K.",
          "maxLength": 16384
        },
        "recognitionModel": {
          "$ref": "#/definitions/RecognitionModel",
          "description": "Name of recognition model. Recognition model is used when the face features are extracted and associated with detected faceIds."
        },
        "largePersonGroupId": {
          "$ref": "#/definitions/collectionId",
          "description": "ID of the container.",
          "readOnly": true
        }
      },
      "required": [
        "name",
        "largePersonGroupId"
      ]
    },
    "LargePersonGroupPerson": {
      "type": "object",
      "description": "The person in a specified large person group. To add face to this person, please call \"Add Large Person Group Person Face\".",
      "properties": {
        "personId": {
          "$ref": "#/definitions/Azure.Core.uuid",
          "description": "ID of the person.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "User defined name, maximum length is 128.",
          "minLength": 1,
          "maxLength": 128
        },
        "userData": {
          "type": "string",
          "description": "Optional user defined data. Length should not exceed 16K.",
          "maxLength": 16384
        },
        "persistedFaceIds": {
          "type": "array",
          "description": "Face ids of registered faces in the person.",
          "items": {
            "$ref": "#/definitions/Azure.Core.uuid"
          }
        }
      },
      "required": [
        "personId",
        "name"
      ]
    },
    "LargePersonGroupPersonFace": {
      "type": "object",
      "description": "Face resource for large person group person.",
      "properties": {
        "persistedFaceId": {
          "$ref": "#/definitions/Azure.Core.uuid",
          "description": "Face ID of the face.",
          "readOnly": true
        },
        "userData": {
          "type": "string",
          "description": "User-provided data attached to the face. The length limit is 1K.",
          "maxLength": 1024
        }
      },
      "required": [
        "persistedFaceId"
      ]
    },
    "ListFaceResult": {
      "type": "object",
      "description": "Response of list face of person.",
      "properties": {
        "personId": {
          "$ref": "#/definitions/Azure.Core.uuid",
          "description": "Id of person."
        },
        "persistedFaceIds": {
          "type": "array",
          "description": "Array of persisted face ids.",
          "items": {
            "$ref": "#/definitions/Azure.Core.uuid"
          }
        }
      },
      "required": [
        "personId",
        "persistedFaceIds"
      ]
    },
    "ListGroupReferenceResult": {
      "type": "object",
      "description": "Response of list dynamic person group of person.",
      "properties": {
        "dynamicPersonGroupIds": {
          "type": "array",
          "description": "Array of PersonDirectory DynamicPersonGroup ids.",
          "items": {
            "$ref": "#/definitions/collectionId"
          }
        }
      },
      "required": [
        "dynamicPersonGroupIds"
      ]
    },
    "ListPersonResult": {
      "type": "object",
      "description": "Response of list dynamic person group person.",
      "properties": {
        "personIds": {
          "type": "array",
          "description": "Array of PersonDirectory Person ids.",
          "items": {
            "$ref": "#/definitions/Azure.Core.uuid"
          }
        }
      },
      "required": [
        "personIds"
      ]
    },
    "LivenessDecision": {
      "type": "string",
      "description": "The outcome of the liveness classification.",
      "enum": [
        "uncertain",
        "realface",
        "spoofface"
      ],
      "x-ms-enum": {
        "name": "LivenessDecision",
        "modelAsString": true,
        "values": [
          {
            "name": "uncertain",
            "value": "uncertain",
            "description": "The algorithm could not classify the target face as either real or spoof."
          },
          {
            "name": "realFace",
            "value": "realface",
            "description": "The algorithm has classified the target face as real."
          },
          {
            "name": "spoofFace",
            "value": "spoofface",
            "description": "The algorithm has classified the target face as a spoof."
          }
        ]
      }
    },
    "LivenessModel": {
      "type": "string",
      "description": "The model version used for liveness classification.",
      "enum": [
        "2020-02-15-preview.01",
        "2021-11-12-preview.03",
        "2022-10-15-preview.04",
        "2023-03-02-preview.05"
      ],
      "x-ms-enum": {
        "name": "LivenessModel",
        "modelAsString": true,
        "values": [
          {
            "name": "v2020_02_15_preview_01",
            "value": "2020-02-15-preview.01"
          },
          {
            "name": "v2021_11_12_preview_03",
            "value": "2021-11-12-preview.03"
          },
          {
            "name": "v2022_10_15_preview_04",
            "value": "2022-10-15-preview.04"
          },
          {
            "name": "v2023_03_02_preview_05",
            "value": "2023-03-02-preview.05"
          }
        ]
      }
    },
    "LivenessOperationMode": {
      "type": "string",
      "description": "The liveness operation mode to drive the client’s end-user experience.",
      "enum": [
        "Passive",
        "PassiveActive"
      ],
      "x-ms-enum": {
        "name": "LivenessOperationMode",
        "modelAsString": true,
        "values": [
          {
            "name": "Passive",
            "value": "Passive",
            "description": "Utilizes a passive liveness technique that requires no additional actions from the user. Requires normal indoor lighting and high screen brightness for optimal performance. And thus, this mode has a narrow operational envelope and will not be suitable for scenarios that requires the end-user’s to be in bright lighting conditions. Note: this is the only supported mode for the Mobile (iOS and Android) solution."
          },
          {
            "name": "PassiveActive",
            "value": "PassiveActive",
            "description": "This mode utilizes a hybrid passive or active liveness technique that necessitates user cooperation. It is optimized to require active motion only under suboptimal lighting conditions. Unlike the passive mode, this mode has no lighting restrictions, and thus offering a broader operational envelope. This mode is preferable on Web based solutions due to the lack of automatic screen brightness control available on browsers which hinders the Passive mode’s operational envelope on Web based solutions."
          }
        ]
      }
    },
    "LivenessOutputsTarget": {
      "type": "object",
      "description": "The liveness classification for target face.",
      "properties": {
        "faceRectangle": {
          "$ref": "#/definitions/FaceRectangle",
          "description": "The face region where the liveness classification was made on."
        },
        "fileName": {
          "type": "string",
          "description": "The file name which contains the face rectangle where the liveness classification was made on."
        },
        "timeOffsetWithinFile": {
          "type": "integer",
          "format": "int32",
          "description": "The time offset within the file of the frame which contains the face rectangle where the liveness classification was made on."
        },
        "imageType": {
          "$ref": "#/definitions/ImageType",
          "description": "The image type which contains the face rectangle where the liveness classification was made on."
        }
      },
      "required": [
        "faceRectangle",
        "fileName",
        "timeOffsetWithinFile",
        "imageType"
      ]
    },
    "LivenessResponseBody": {
      "type": "object",
      "description": "The response body of detect liveness API call.",
      "properties": {
        "livenessDecision": {
          "$ref": "#/definitions/LivenessDecision",
          "description": "The liveness classification for the target face."
        },
        "target": {
          "$ref": "#/definitions/LivenessOutputsTarget",
          "description": "Specific targets used for liveness classification."
        },
        "modelVersionUsed": {
          "$ref": "#/definitions/LivenessModel",
          "description": "The model version used for liveness classification."
        },
        "verifyResult": {
          "$ref": "#/definitions/LivenessWithVerifyOutputs",
          "description": "The face verification output. Only available when the request is liveness with verify."
        }
      },
      "allOf": [
        {
          "type": "object",
          "additionalProperties": {}
        }
      ]
    },
    "LivenessSession": {
      "type": "object",
      "description": "Session result of detect liveness.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique ID to reference this session.",
          "readOnly": true
        },
        "createdDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "DateTime when this session was created."
        },
        "sessionStartDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "DateTime when this session was started by the client."
        },
        "sessionExpired": {
          "type": "boolean",
          "description": "Whether or not the session is expired."
        },
        "deviceCorrelationId": {
          "type": "string",
          "description": "Unique Guid per each end-user device. This is to provide rate limiting and anti-hammering. If 'deviceCorrelationIdSetInClient' is true in this request, this 'deviceCorrelationId' must be null."
        },
        "authTokenTimeToLiveInSeconds": {
          "type": "integer",
          "format": "int32",
          "description": "Seconds the session should last for. Range is 60 to 86400 seconds. Default value is 600.",
          "default": 600,
          "minimum": 60,
          "maximum": 86400
        },
        "status": {
          "$ref": "#/definitions/FaceSessionStatus",
          "description": "The current status of the session."
        },
        "result": {
          "$ref": "#/definitions/LivenessSessionAuditEntry",
          "description": "The latest session audit result only populated if status == 'ResultAvailable'."
        }
      },
      "required": [
        "id",
        "createdDateTime",
        "sessionExpired",
        "status"
      ]
    },
    "LivenessSessionAuditEntry": {
      "type": "object",
      "description": "Audit entry for a request in session.",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "The unique id to refer to this audit request. Use this id with the 'start' query parameter to continue on to the next page of audit results."
        },
        "sessionId": {
          "type": "string",
          "description": "The unique sessionId of the created session. It will expire 48 hours after it was created or may be deleted sooner using the corresponding session DELETE operation."
        },
        "requestId": {
          "type": "string",
          "description": "The unique requestId that is returned by the service to the client in the 'apim-request-id' header."
        },
        "clientRequestId": {
          "type": "string",
          "description": "The unique clientRequestId that is sent by the client in the 'client-request-id' header."
        },
        "receivedDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "The UTC DateTime that the request was received."
        },
        "request": {
          "$ref": "#/definitions/AuditRequestInfo",
          "description": "The request of this entry."
        },
        "response": {
          "$ref": "#/definitions/AuditLivenessResponseInfo",
          "description": "The response of this entry."
        },
        "digest": {
          "type": "string",
          "description": "The server calculated digest for this request. If the client reported digest differs from the server calculated digest, then the message integrity between the client and service has been compromised and the result should not be trusted. For more information, see how to guides on how to leverage this value to secure your end-to-end solution."
        }
      },
      "required": [
        "id",
        "sessionId",
        "requestId",
        "clientRequestId",
        "receivedDateTime",
        "request",
        "response",
        "digest"
      ]
    },
    "LivenessSessionItem": {
      "type": "object",
      "description": "Session data returned for enumeration.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique ID to reference this session.",
          "readOnly": true
        },
        "createdDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "DateTime when this session was created."
        },
        "sessionStartDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "DateTime when this session was started by the client."
        },
        "sessionExpired": {
          "type": "boolean",
          "description": "Whether or not the session is expired."
        },
        "deviceCorrelationId": {
          "type": "string",
          "description": "Unique Guid per each end-user device. This is to provide rate limiting and anti-hammering. If 'deviceCorrelationIdSetInClient' is true in this request, this 'deviceCorrelationId' must be null."
        },
        "authTokenTimeToLiveInSeconds": {
          "type": "integer",
          "format": "int32",
          "description": "Seconds the session should last for. Range is 60 to 86400 seconds. Default value is 600.",
          "default": 600,
          "minimum": 60,
          "maximum": 86400
        }
      },
      "required": [
        "id",
        "createdDateTime",
        "sessionExpired"
      ]
    },
    "LivenessWithVerifyImage": {
      "type": "object",
      "description": "The detail of face for verification.",
      "properties": {
        "faceRectangle": {
          "$ref": "#/definitions/FaceRectangle",
          "description": "The face region where the comparison image's classification was made."
        },
        "qualityForRecognition": {
          "$ref": "#/definitions/QualityForRecognition",
          "description": "Quality of face image for recognition."
        }
      },
      "required": [
        "faceRectangle",
        "qualityForRecognition"
      ]
    },
    "LivenessWithVerifyOutputs": {
      "type": "object",
      "description": "The face verification output.",
      "properties": {
        "verifyImage": {
          "$ref": "#/definitions/LivenessWithVerifyImage",
          "description": "The detail of face for verification."
        },
        "matchConfidence": {
          "type": "number",
          "format": "float",
          "description": "The target face liveness face and comparison image face verification confidence.",
          "minimum": 0,
          "maximum": 1
        },
        "isIdentical": {
          "type": "boolean",
          "description": "Whether the target liveness face and comparison image face match."
        }
      },
      "required": [
        "verifyImage",
        "matchConfidence",
        "isIdentical"
      ]
    },
    "LivenessWithVerifySession": {
      "type": "object",
      "description": "Session result of detect liveness with verify.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique ID to reference this session.",
          "readOnly": true
        },
        "createdDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "DateTime when this session was created."
        },
        "sessionStartDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "DateTime when this session was started by the client."
        },
        "sessionExpired": {
          "type": "boolean",
          "description": "Whether or not the session is expired."
        },
        "deviceCorrelationId": {
          "type": "string",
          "description": "Unique Guid per each end-user device. This is to provide rate limiting and anti-hammering. If 'deviceCorrelationIdSetInClient' is true in this request, this 'deviceCorrelationId' must be null."
        },
        "authTokenTimeToLiveInSeconds": {
          "type": "integer",
          "format": "int32",
          "description": "Seconds the session should last for. Range is 60 to 86400 seconds. Default value is 600.",
          "default": 600,
          "minimum": 60,
          "maximum": 86400
        },
        "status": {
          "$ref": "#/definitions/FaceSessionStatus",
          "description": "The current status of the session."
        },
        "result": {
          "$ref": "#/definitions/LivenessSessionAuditEntry",
          "description": "The latest session audit result only populated if status == 'ResultAvailable'."
        }
      },
      "required": [
        "id",
        "createdDateTime",
        "sessionExpired",
        "status"
      ]
    },
    "MaskProperties": {
      "type": "object",
      "description": "Properties describing the presence of a mask on a given face.",
      "properties": {
        "noseAndMouthCovered": {
          "type": "boolean",
          "description": "A boolean value indicating whether nose and mouth are covered."
        },
        "type": {
          "$ref": "#/definitions/MaskType",
          "description": "Type of the mask."
        }
      },
      "required": [
        "noseAndMouthCovered",
        "type"
      ]
    },
    "MaskType": {
      "type": "string",
      "description": "Type of the mask.",
      "enum": [
        "faceMask",
        "noMask",
        "otherMaskOrOcclusion",
        "uncertain"
      ],
      "x-ms-enum": {
        "name": "MaskType",
        "modelAsString": true,
        "values": [
          {
            "name": "faceMask",
            "value": "faceMask",
            "description": "Face mask."
          },
          {
            "name": "noMask",
            "value": "noMask",
            "description": "No mask."
          },
          {
            "name": "otherMaskOrOcclusion",
            "value": "otherMaskOrOcclusion",
            "description": "Other types of mask or occlusion."
          },
          {
            "name": "uncertain",
            "value": "uncertain",
            "description": "Uncertain."
          }
        ]
      }
    },
    "NoiseLevel": {
      "type": "string",
      "description": "Indicates level of noise.",
      "enum": [
        "low",
        "medium",
        "high"
      ],
      "x-ms-enum": {
        "name": "NoiseLevel",
        "modelAsString": true,
        "values": [
          {
            "name": "low",
            "value": "low",
            "description": "Low noise level."
          },
          {
            "name": "medium",
            "value": "medium",
            "description": "Medium noise level."
          },
          {
            "name": "high",
            "value": "high",
            "description": "High noise level."
          }
        ]
      }
    },
    "NoiseProperties": {
      "type": "object",
      "description": "Properties describing noise level of the image.",
      "properties": {
        "noiseLevel": {
          "$ref": "#/definitions/NoiseLevel",
          "description": "An enum value indicating level of noise."
        },
        "value": {
          "type": "number",
          "format": "float",
          "description": "A number indicating level of noise level ranging from 0 to 1. [0, 0.25) is under exposure. [0.25, 0.75) is good exposure. [0.75, 1] is over exposure. [0, 0.3) is low noise level. [0.3, 0.7) is medium noise level. [0.7, 1] is high noise level.",
          "minimum": 0,
          "maximum": 1
        }
      },
      "required": [
        "noiseLevel",
        "value"
      ]
    },
    "OcclusionProperties": {
      "type": "object",
      "description": "Properties describing occlusions on a given face.",
      "properties": {
        "foreheadOccluded": {
          "type": "boolean",
          "description": "A boolean value indicating whether forehead is occluded."
        },
        "eyeOccluded": {
          "type": "boolean",
          "description": "A boolean value indicating whether eyes are occluded."
        },
        "mouthOccluded": {
          "type": "boolean",
          "description": "A boolean value indicating whether the mouth is occluded."
        }
      },
      "required": [
        "foreheadOccluded",
        "eyeOccluded",
        "mouthOccluded"
      ]
    },
    "OperationResult": {
      "type": "object",
      "description": "Long running operation resource for person directory.",
      "properties": {
        "operationId": {
          "$ref": "#/definitions/Azure.Core.uuid",
          "description": "Operation ID of the operation.",
          "readOnly": true
        },
        "status": {
          "$ref": "#/definitions/OperationStatus",
          "description": "Current status of the operation."
        },
        "createdTime": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time the operation was created."
        },
        "lastActionTime": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time the operation was last updated."
        },
        "finishedTime": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time the operation was finished."
        },
        "message": {
          "type": "string",
          "description": "Message for the operation."
        }
      },
      "required": [
        "operationId",
        "status",
        "createdTime"
      ]
    },
    "OperationStatus": {
      "type": "string",
      "description": "The status of long running operation.",
      "enum": [
        "notStarted",
        "running",
        "succeeded",
        "failed"
      ],
      "x-ms-enum": {
        "name": "OperationStatus",
        "modelAsString": true,
        "values": [
          {
            "name": "notStarted",
            "value": "notStarted",
            "description": "The operation is not started."
          },
          {
            "name": "running",
            "value": "running",
            "description": "The operation is still running."
          },
          {
            "name": "succeeded",
            "value": "succeeded",
            "description": "The operation is succeeded."
          },
          {
            "name": "failed",
            "value": "failed",
            "description": "The operation is failed."
          }
        ]
      }
    },
    "PersonDirectoryFace": {
      "type": "object",
      "description": "Face resource for person directory person.",
      "properties": {
        "persistedFaceId": {
          "$ref": "#/definitions/Azure.Core.uuid",
          "description": "Face ID of the face.",
          "readOnly": true
        },
        "userData": {
          "type": "string",
          "description": "User-provided data attached to the face. The length limit is 1K.",
          "maxLength": 1024
        }
      },
      "required": [
        "persistedFaceId"
      ]
    },
    "PersonDirectoryPerson": {
      "type": "object",
      "description": "Person resource for person directory",
      "properties": {
        "personId": {
          "$ref": "#/definitions/Azure.Core.uuid",
          "description": "Person ID of the person.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "User defined name, maximum length is 128.",
          "minLength": 1,
          "maxLength": 128
        },
        "userData": {
          "type": "string",
          "description": "Optional user defined data. Length should not exceed 16K.",
          "maxLength": 16384
        }
      },
      "required": [
        "personId",
        "name"
      ]
    },
    "PersonGroup": {
      "type": "object",
      "description": "The container of the uploaded person data, including face recognition feature, and up to 10,000 persons. To handle larger scale face identification problem, please consider using Large Person Group.",
      "properties": {
        "name": {
          "type": "string",
          "description": "User defined name, maximum length is 128.",
          "minLength": 1,
          "maxLength": 128
        },
        "userData": {
          "type": "string",
          "description": "Optional user defined data. Length should not exceed 16K.",
          "maxLength": 16384
        },
        "recognitionModel": {
          "$ref": "#/definitions/RecognitionModel",
          "description": "Name of recognition model. Recognition model is used when the face features are extracted and associated with detected faceIds."
        },
        "personGroupId": {
          "$ref": "#/definitions/collectionId",
          "description": "ID of the container.",
          "readOnly": true
        }
      },
      "required": [
        "name",
        "personGroupId"
      ]
    },
    "PersonGroupPerson": {
      "type": "object",
      "description": "The person in a specified person group. To add face to this person, please call \"Add Large Person Group Person Face\".",
      "properties": {
        "personId": {
          "$ref": "#/definitions/Azure.Core.uuid",
          "description": "ID of the person.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "User defined name, maximum length is 128.",
          "minLength": 1,
          "maxLength": 128
        },
        "userData": {
          "type": "string",
          "description": "Optional user defined data. Length should not exceed 16K.",
          "maxLength": 16384
        },
        "persistedFaceIds": {
          "type": "array",
          "description": "Face ids of registered faces in the person.",
          "items": {
            "$ref": "#/definitions/Azure.Core.uuid"
          }
        }
      },
      "required": [
        "personId",
        "name"
      ]
    },
    "PersonGroupPersonFace": {
      "type": "object",
      "description": "Face resource for person group person.",
      "properties": {
        "persistedFaceId": {
          "$ref": "#/definitions/Azure.Core.uuid",
          "description": "Face ID of the face.",
          "readOnly": true
        },
        "userData": {
          "type": "string",
          "description": "User-provided data attached to the face. The length limit is 1K.",
          "maxLength": 1024
        }
      },
      "required": [
        "persistedFaceId"
      ]
    },
    "QualityForRecognition": {
      "type": "string",
      "description": "Indicates quality of image for recognition.",
      "enum": [
        "low",
        "medium",
        "high"
      ],
      "x-ms-enum": {
        "name": "QualityForRecognition",
        "modelAsString": true,
        "values": [
          {
            "name": "low",
            "value": "low",
            "description": "Low quality."
          },
          {
            "name": "medium",
            "value": "medium",
            "description": "Medium quality."
          },
          {
            "name": "high",
            "value": "high",
            "description": "High quality."
          }
        ]
      }
    },
    "RecognitionModel": {
      "type": "string",
      "description": "The recognition model for the face.",
      "enum": [
        "recognition_01",
        "recognition_02",
        "recognition_03",
        "recognition_04"
      ],
      "x-ms-enum": {
        "name": "RecognitionModel",
        "modelAsString": true,
        "values": [
          {
            "name": "recognition_01",
            "value": "recognition_01",
            "description": "The default recognition model for \"Detect\". All those faceIds created before 2019 March are bonded with this recognition model."
          },
          {
            "name": "recognition_02",
            "value": "recognition_02",
            "description": "Recognition model released in 2019 March."
          },
          {
            "name": "recognition_03",
            "value": "recognition_03",
            "description": "Recognition model released in 2020 May."
          },
          {
            "name": "recognition_04",
            "value": "recognition_04",
            "description": "Recognition model released in 2021 February. It's recommended to use this recognition model for better recognition accuracy."
          }
        ]
      }
    },
    "TrainingResult": {
      "type": "object",
      "description": "Training result of a container",
      "properties": {
        "status": {
          "$ref": "#/definitions/OperationStatus",
          "description": "Training status of the container."
        },
        "createdDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "A combined UTC date and time string that describes the created time of the person group, large person group or large face list."
        },
        "lastActionDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "A combined UTC date and time string that describes the last modify time of the person group, large person group or large face list, could be null value when the group is not successfully trained."
        },
        "lastSuccessfulTrainingDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "A combined UTC date and time string that describes the last successful training time of the person group, large person group or large face list."
        },
        "message": {
          "type": "string",
          "description": "Show failure message when training failed (omitted when training succeed)."
        }
      },
      "required": [
        "status",
        "createdDateTime",
        "lastActionDateTime",
        "lastSuccessfulTrainingDateTime"
      ]
    },
    "VerificationResult": {
      "type": "object",
      "description": "Verify result.",
      "properties": {
        "isIdentical": {
          "type": "boolean",
          "description": "True if the two faces belong to the same person or the face belongs to the person, otherwise false."
        },
        "confidence": {
          "type": "number",
          "format": "float",
          "description": "A number indicates the similarity confidence of whether two faces belong to the same person, or whether the face belongs to the person. By default, isIdentical is set to True if similarity confidence is greater than or equal to 0.5. This is useful for advanced users to override 'isIdentical' and fine-tune the result on their own data.",
          "minimum": 0,
          "maximum": 1
        }
      },
      "required": [
        "isIdentical",
        "confidence"
      ]
    },
    "collectionId": {
      "type": "string",
      "minLength": 1,
      "maxLength": 64,
      "pattern": "^[a-z0-9-_]+$"
    }
  },
  "parameters": {
    "CreateLivenessWithVerifySessionContent.Parameters": {
      "name": "Parameters",
      "in": "formData",
      "description": "The parameters for creating session.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "CreateLivenessWithVerifySessionContent.VerifyImage": {
      "name": "VerifyImage",
      "in": "formData",
      "description": "The image stream for verify. Content-Disposition header field for this part must have filename.",
      "required": true,
      "type": "file",
      "x-ms-parameter-location": "method"
    }
  }
}
