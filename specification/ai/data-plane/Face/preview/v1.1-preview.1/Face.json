{
  "swagger": "2.0",
  "info": {
    "title": "Azure AI Face API",
    "version": "v1.1-preview.1",
    "x-typespec-generated": [
      {
        "emitter": "@azure-tools/typespec-autorest"
      }
    ]
  },
  "schemes": [
    "https"
  ],
  "x-ms-parameterized-host": {
    "hostTemplate": "{endpoint}",
    "useSchemePrefix": false,
    "parameters": [
      {
        "name": "endpoint",
        "in": "path",
        "description": "Supported Cognitive Services endpoints (protocol and hostname, for example:\nhttps://<resource-name>.cognitiveservices.azure.com).",
        "required": true,
        "type": "string"
      }
    ]
  },
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "security": [
    {
      "KeyAuth": []
    },
    {
      "AADToken": [
        "https://cognitiveservices.azure.com/.default"
      ]
    }
  ],
  "securityDefinitions": {
    "AADToken": {
      "type": "oauth2",
      "description": "The Azure Active Directory OAuth2 Flow",
      "flow": "accessCode",
      "authorizationUrl": "https://api.example.com/oauth2/authorize",
      "scopes": {
        "https://cognitiveservices.azure.com/.default": ""
      },
      "tokenUrl": "https://api.example.com/oauth2/token"
    },
    "KeyAuth": {
      "type": "apiKey",
      "description": "The secret key for your Azure AI Face subscription.",
      "name": "Ocp-Apim-Subscription-Key",
      "in": "header"
    }
  },
  "tags": [],
  "paths": {
    "/face/{apiVersion}/detect": {
      "post": {
        "operationId": "DetectFromUrl",
        "description": "Detect human faces in an image, return face rectangles, and optionally with faceIds, landmarks, and attributes.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "$ref": "#/parameters/FaceDetectionOptions.returnFaceId"
          },
          {
            "$ref": "#/parameters/FaceDetectionOptions.returnFaceLandmarks"
          },
          {
            "$ref": "#/parameters/FaceDetectionOptions.returnFaceAttributes"
          },
          {
            "$ref": "#/parameters/FaceDetectionOptions.recognitionModel"
          },
          {
            "$ref": "#/parameters/FaceDetectionOptions.returnRecognitionModel"
          },
          {
            "$ref": "#/parameters/FaceDetectionOptions.detectionModel"
          },
          {
            "$ref": "#/parameters/FaceDetectionOptions.faceIdTimeToLive"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string",
                  "format": "uri",
                  "description": "URL of input image."
                }
              },
              "required": [
                "url"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FaceDetectionResult"
              },
              "x-ms-identifiers": []
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/face/{apiVersion}/detectLiveness/singleModal/sessions": {
      "get": {
        "operationId": "LivenessSessions_ListLivenessSessions",
        "description": "Lists all matching session types.\nList sessions from the last sessionId greater than the \"start\".\nThe result should be ordered by sessionId in ascending order.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "$ref": "#/parameters/ListRequestOptions.start"
          },
          {
            "$ref": "#/parameters/ListRequestOptions.top"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LivenessSessionItem"
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "post": {
        "operationId": "LivenessSessions_CreateLivenessSession",
        "description": "Creates face liveness detection session.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LivenessSessionCreationContent"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/LivenessSessionCreationResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/face/{apiVersion}/detectLiveness/singleModal/sessions/{sessionId}": {
      "get": {
        "operationId": "LivenessSessions_GetLivenessSession",
        "description": "Get session result of detectLiveness.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "sessionId",
            "in": "path",
            "description": "Unique ID to reference this session.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/LivenessSession"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "LivenessSessions_DeleteLivenessSession",
        "description": "Deletes a session and all of it's audit results.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "sessionId",
            "in": "path",
            "description": "Unique ID to reference this session.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/face/{apiVersion}/detectLiveness/singleModal/sessions/{sessionId}/audit": {
      "get": {
        "operationId": "LivenessSessions_ListLivenessSessionAuditEntries",
        "description": "Get session audit requests/responses for the session.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "sessionId",
            "in": "path",
            "description": "Unique ID to reference this session.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ListRequestOptions.start"
          },
          {
            "$ref": "#/parameters/ListRequestOptions.top"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LivenessSessionAuditEntry"
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/face/{apiVersion}/detectLivenessWithVerify/singleModal/sessions": {
      "get": {
        "operationId": "LivenessSessions_ListLivenessWithVerifySessions",
        "description": "Lists all matching session types.\nList sessions from the last sessionId greater than the \"start\".\nThe result should be ordered by sessionId in ascending order.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "$ref": "#/parameters/ListRequestOptions.start"
          },
          {
            "$ref": "#/parameters/ListRequestOptions.top"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LivenessSessionItem"
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "post": {
        "operationId": "LivenessSessions_CreateLivenessWithVerifySession",
        "description": "Creates face liveness detection session.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LivenessSessionCreationContent"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/LivenessSessionCreationResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/face/{apiVersion}/detectLivenessWithVerify/singleModal/sessions/{sessionId}": {
      "get": {
        "operationId": "LivenessSessions_GetLivenessWithVerifySession",
        "description": "Get session result of detectLiveness.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "sessionId",
            "in": "path",
            "description": "Unique ID to reference this session.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/LivenessWithVerifySession"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "LivenessSessions_DeleteLivenessWithVerifySession",
        "description": "Deletes a session and all of it's audit results.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "sessionId",
            "in": "path",
            "description": "Unique ID to reference this session.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/face/{apiVersion}/detectLivenessWithVerify/singleModal/sessions/{sessionId}/audit": {
      "get": {
        "operationId": "LivenessSessions_ListLivenessWithVerifySessionAuditEntries",
        "description": "Get session audit requests/responses for the session.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "sessionId",
            "in": "path",
            "description": "Unique ID to reference this session.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ListRequestOptions.start"
          },
          {
            "$ref": "#/parameters/ListRequestOptions.top"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LivenessSessionAuditEntry"
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/face/{apiVersion}/dynamicpersongroups": {
      "get": {
        "operationId": "ListDynamicPersonGroups",
        "description": "Operation that lists resources in a paginated way.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "$ref": "#/parameters/ListRequestOptions.start"
          },
          {
            "$ref": "#/parameters/ListRequestOptions.top"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DynamicPersonGroup"
              },
              "x-ms-identifiers": []
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/face/{apiVersion}/dynamicpersongroups/{dynamicPersonGroupId}": {
      "get": {
        "operationId": "GetDynamicPersonGroup",
        "description": "Resource read operation template.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "dynamicPersonGroupId",
            "in": "path",
            "description": "ID of the dynamic person group.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/DynamicPersonGroup"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "put": {
        "operationId": "CreateDynamicPersonGroup",
        "description": "The most basic operation that applies to a resource.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "dynamicPersonGroupId",
            "in": "path",
            "description": "ID of the dynamic person group.",
            "required": true,
            "type": "string"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "The resource instance.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateDynamicPersonGroupContent"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "headers": {
              "operation-Location": {
                "type": "string",
                "format": "uri",
                "description": "The location of an instance of FaceOperationStatus"
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-long-running-operation": true
      },
      "patch": {
        "operationId": "UpdateDynamicPersonGroup",
        "description": "The most basic operation that applies to a resource.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "dynamicPersonGroupId",
            "in": "path",
            "description": "ID of the dynamic person group.",
            "required": true,
            "type": "string"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "The resource instance.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateDynamicPersonGroupContent"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "headers": {
              "operation-Location": {
                "type": "string",
                "format": "uri",
                "description": "The location of an instance of FaceOperationStatus"
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-long-running-operation": true
      },
      "delete": {
        "operationId": "DeleteDynamicPersonGroup",
        "description": "The most basic operation that applies to a resource.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "dynamicPersonGroupId",
            "in": "path",
            "description": "ID of the dynamic person group.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "headers": {
              "operation-Location": {
                "type": "string",
                "format": "uri",
                "description": "The location of an instance of FaceOperationStatus"
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/face/{apiVersion}/dynamicpersongroups/{dynamicPersonGroupId}/persons": {
      "get": {
        "operationId": "ListDynamicPersonGroupPerson",
        "description": "The most basic operation that applies to a resource.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "dynamicPersonGroupId",
            "in": "path",
            "description": "ID of the dynamic person group.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ListRequestOptions.start"
          },
          {
            "$ref": "#/parameters/ListRequestOptions.top"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/ListPersonResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/face/{apiVersion}/facelists": {
      "get": {
        "operationId": "ListFaceLists",
        "description": "Operation that lists resources in a paginated way.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "$ref": "#/parameters/ReturnRecognitionModelOptions"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FaceList"
              },
              "x-ms-identifiers": []
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/face/{apiVersion}/facelists/{faceListId}": {
      "get": {
        "operationId": "GetFaceList",
        "description": "Resource read operation template.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "faceListId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ReturnRecognitionModelOptions"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/FaceList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "put": {
        "operationId": "CreateFaceList",
        "description": "The most basic operation that applies to a resource.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "faceListId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "The resource instance.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FaceList"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "UpdateFaceList",
        "description": "The most basic operation that applies to a resource.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "faceListId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "The resource instance.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FaceListUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteFaceList",
        "description": "The most basic operation that applies to a resource.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "faceListId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/face/{apiVersion}/facelists/{faceListId}/persistedfaces": {
      "post": {
        "operationId": "AddFaceListFaceFromUrl",
        "description": "Operation that applies to a collection of resources.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "faceListId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/AddFaceOptions.targetFace"
          },
          {
            "$ref": "#/parameters/AddFaceOptions.detectionModel"
          },
          {
            "$ref": "#/parameters/AddFaceOptions.userData"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddFaceFromUrlContent"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/AddFaceResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/face/{apiVersion}/facelists/{faceListId}/persistedfaces/{persistedFaceId}": {
      "delete": {
        "operationId": "DeleteFaceListFace",
        "description": "The most basic operation that applies to a resource.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "faceListId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string"
          },
          {
            "name": "persistedFaceId",
            "in": "path",
            "description": "Face ID of the face.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/face/{apiVersion}/findsimilars": {
      "post": {
        "operationId": "FindSimilar",
        "description": "Given query face's faceId, to search the similar-looking faces from a faceId array, a face list or a large face list.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "faceId": {
                  "type": "string",
                  "description": "faceId of the face, comes from Face - Detect."
                },
                "maxNumOfCandidatesReturned": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The number of top similar faces returned. The valid range is [1, 1000].It defaults to 20."
                },
                "mode": {
                  "$ref": "#/definitions/FindSimilarMatchMode",
                  "description": "Similar face searching mode. It can be 'matchPerson' or 'matchFace'. It defaults to 'matchPerson'."
                },
                "faceIds": {
                  "type": "array",
                  "description": "An array of candidate faceIds. All of them are created by Face - Detect and the faceIds will expire 24 hours after the detection call. The number of faceIds is limited to 1000.",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "required": [
                "faceId",
                "faceIds"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FaceFindSimilarResult"
              },
              "x-ms-identifiers": []
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/face/{apiVersion}/group": {
      "post": {
        "operationId": "Group",
        "description": "Divide candidate faces into groups based on face similarity.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "faceIds": {
                  "type": "array",
                  "description": "Array of candidate faceId created by Face - Detect. The maximum is 1000 faces.",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "required": [
                "faceIds"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/FaceGroupingResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/face/{apiVersion}/identify": {
      "post": {
        "operationId": "IdentifyFromPersonDirectory",
        "description": "A remote procedure call (RPC) operation.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "faceIds": {
                  "type": "array",
                  "description": "Array of query faces faceIds, created by the Face - Detect. Each of the faces are identified independently. The valid number of faceIds is between [1, 10].",
                  "items": {
                    "type": "string"
                  }
                },
                "personIds": {
                  "type": "array",
                  "description": "Array of personIds created in PersonDirectory - PersonCreate. The valid number of personIds is between [1,30].",
                  "items": {
                    "type": "string"
                  }
                },
                "maxNumOfCandidatesReturned": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The range of maxNumOfCandidatesReturned is between 1 and 100 (default is 10)."
                },
                "confidenceThreshold": {
                  "type": "number",
                  "format": "float",
                  "description": "Customized identification confidence threshold, in the range of [0, 1]. Advanced user can tweak this value to override default internal threshold for better precision on their scenario data. Note there is no guarantee of this threshold value working on other data and after algorithm updates."
                }
              },
              "required": [
                "faceIds",
                "personIds"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FaceIdentificationResult"
              },
              "x-ms-identifiers": []
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/face/{apiVersion}/largefacelists": {
      "get": {
        "operationId": "ListLargeFaceLists",
        "description": "Operation that lists resources in a paginated way.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "$ref": "#/parameters/ListRequestOptions.start"
          },
          {
            "$ref": "#/parameters/ListRequestOptions.top"
          },
          {
            "$ref": "#/parameters/ReturnRecognitionModelOptions"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LargeFaceList"
              },
              "x-ms-identifiers": []
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/face/{apiVersion}/largefacelists/{largeFaceListId}": {
      "get": {
        "operationId": "GetLargeFaceList",
        "description": "Resource read operation template.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "largeFaceListId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ReturnRecognitionModelOptions"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/LargeFaceList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "put": {
        "operationId": "CreateLargeFaceList",
        "description": "The most basic operation that applies to a resource.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "largeFaceListId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "The resource instance.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LargeFaceList"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "UpdateLargeFaceList",
        "description": "The most basic operation that applies to a resource.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "largeFaceListId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "The resource instance.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LargeFaceListUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteLargeFaceList",
        "description": "The most basic operation that applies to a resource.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "largeFaceListId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/face/{apiVersion}/largefacelists/{largeFaceListId}/persistedfaces": {
      "get": {
        "operationId": "ListLargeFaceListFaces",
        "description": "Operation that lists resources in a paginated way.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "largeFaceListId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ListRequestOptions.start"
          },
          {
            "$ref": "#/parameters/ListRequestOptions.top"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LargeFaceListFace"
              },
              "x-ms-identifiers": []
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "post": {
        "operationId": "AddLargeFaceListFaceFromUrl",
        "description": "Operation that applies to a collection of resources.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "largeFaceListId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/AddFaceOptions.targetFace"
          },
          {
            "$ref": "#/parameters/AddFaceOptions.detectionModel"
          },
          {
            "$ref": "#/parameters/AddFaceOptions.userData"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddFaceFromUrlContent"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/AddFaceResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/face/{apiVersion}/largefacelists/{largeFaceListId}/persistedfaces/{persistedFaceId}": {
      "get": {
        "operationId": "GetLargeFaceListFace",
        "description": "Resource read operation template.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "largeFaceListId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string"
          },
          {
            "name": "persistedFaceId",
            "in": "path",
            "description": "Face ID of the face.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/LargeFaceListFace"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "UpdateLargeFaceListFace",
        "description": "The most basic operation that applies to a resource.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "largeFaceListId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string"
          },
          {
            "name": "persistedFaceId",
            "in": "path",
            "description": "Face ID of the face.",
            "required": true,
            "type": "string"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "The resource instance.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LargeFaceListFaceUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteLargeFaceListFace",
        "description": "The most basic operation that applies to a resource.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "largeFaceListId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string"
          },
          {
            "name": "persistedFaceId",
            "in": "path",
            "description": "Face ID of the face.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/face/{apiVersion}/largefacelists/{largeFaceListId}/train": {
      "post": {
        "operationId": "TrainLargeFaceList",
        "description": "Resource action operation template.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "largeFaceListId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/face/{apiVersion}/largefacelists/{largeFaceListId}/training": {
      "get": {
        "operationId": "GetLargeFaceListTrainingStatus",
        "description": "The most basic operation that applies to a resource.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "largeFaceListId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/TrainingStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/face/{apiVersion}/largepersongroups": {
      "get": {
        "operationId": "ListLargePersonGroups",
        "description": "Operation that lists resources in a paginated way.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "$ref": "#/parameters/ListRequestOptions.start"
          },
          {
            "$ref": "#/parameters/ListRequestOptions.top"
          },
          {
            "$ref": "#/parameters/ReturnRecognitionModelOptions"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LargePersonGroup"
              },
              "x-ms-identifiers": []
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/face/{apiVersion}/largepersongroups/{largePersonGroupId}": {
      "get": {
        "operationId": "GetLargePersonGroup",
        "description": "Resource read operation template.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "largePersonGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ReturnRecognitionModelOptions"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/LargePersonGroup"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "put": {
        "operationId": "CreateLargePersonGroup",
        "description": "The most basic operation that applies to a resource.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "largePersonGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "The resource instance.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LargePersonGroup"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "UpdateLargePersonGroup",
        "description": "The most basic operation that applies to a resource.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "largePersonGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "The resource instance.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LargePersonGroupUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteLargePersonGroup",
        "description": "The most basic operation that applies to a resource.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "largePersonGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/face/{apiVersion}/largepersongroups/{largePersonGroupId}/persons": {
      "get": {
        "operationId": "ListLargePersonGroupPerson",
        "description": "Operation that lists resources in a paginated way.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "largePersonGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ListRequestOptions.start"
          },
          {
            "$ref": "#/parameters/ListRequestOptions.top"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LargePersonGroupPerson"
              },
              "x-ms-identifiers": []
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "post": {
        "operationId": "CreateLargePersonGroupPerson",
        "description": "Operation that applies to a collection of resources.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "largePersonGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "The resource instance.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LargePersonGroupPerson"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/LargePersonGroupPerson"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/face/{apiVersion}/largepersongroups/{largePersonGroupId}/persons/{personId}": {
      "get": {
        "operationId": "GetLargePersonGroupPerson",
        "description": "Resource read operation template.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "largePersonGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "ID of the person.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/LargePersonGroupPerson"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "UpdateLargePersonGroupPerson",
        "description": "The most basic operation that applies to a resource.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "largePersonGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "ID of the person.",
            "required": true,
            "type": "string"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "The resource instance.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LargePersonGroupPersonUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteLargePersonGroupPerson",
        "description": "The most basic operation that applies to a resource.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "largePersonGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "ID of the person.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/face/{apiVersion}/largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces": {
      "post": {
        "operationId": "AddLargePersonGroupPersonFaceFromUrl",
        "description": "Operation that applies to a collection of resources.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "largePersonGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "ID of the person.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/AddFaceOptions.targetFace"
          },
          {
            "$ref": "#/parameters/AddFaceOptions.detectionModel"
          },
          {
            "$ref": "#/parameters/AddFaceOptions.userData"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddFaceFromUrlContent"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/AddFaceResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/face/{apiVersion}/largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces/{persistedFaceId}": {
      "get": {
        "operationId": "GetLargePersonGroupPersonFace",
        "description": "Resource read operation template.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "largePersonGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "ID of the person.",
            "required": true,
            "type": "string"
          },
          {
            "name": "persistedFaceId",
            "in": "path",
            "description": "Face ID of the face.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/LargePersonGroupPersonFace"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "UpdateLargePersonGroupPersonFace",
        "description": "The most basic operation that applies to a resource.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "largePersonGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "ID of the person.",
            "required": true,
            "type": "string"
          },
          {
            "name": "persistedFaceId",
            "in": "path",
            "description": "Face ID of the face.",
            "required": true,
            "type": "string"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "The resource instance.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LargePersonGroupPersonFaceUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteLargePersonGroupPersonFace",
        "description": "The most basic operation that applies to a resource.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "largePersonGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "ID of the person.",
            "required": true,
            "type": "string"
          },
          {
            "name": "persistedFaceId",
            "in": "path",
            "description": "Face ID of the face.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/face/{apiVersion}/largepersongroups/{largePersonGroupId}/train": {
      "post": {
        "operationId": "TrainLargePersonGroup",
        "description": "Resource action operation template.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "largePersonGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/face/{apiVersion}/largepersongroups/{largePersonGroupId}/training": {
      "get": {
        "operationId": "GetLargePersonGroupTrainingStatus",
        "description": "The most basic operation that applies to a resource.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "largePersonGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/TrainingStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/face/{apiVersion}/operations/{operationId}": {
      "get": {
        "operationId": "GetFaceOperationStatus",
        "description": "Get status of a long running operation.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "operationId",
            "in": "path",
            "description": "Operation ID of the operation.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/FaceOperationStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/face/{apiVersion}/persongroups": {
      "get": {
        "operationId": "ListPersonGroups",
        "description": "Operation that lists resources in a paginated way.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "$ref": "#/parameters/ListRequestOptions.start"
          },
          {
            "$ref": "#/parameters/ListRequestOptions.top"
          },
          {
            "$ref": "#/parameters/ReturnRecognitionModelOptions"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PersonGroup"
              },
              "x-ms-identifiers": []
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/face/{apiVersion}/persongroups/{personGroupId}": {
      "get": {
        "operationId": "GetPersonGroup",
        "description": "Resource read operation template.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "personGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ReturnRecognitionModelOptions"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PersonGroup"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "put": {
        "operationId": "CreatePersonGroup",
        "description": "The most basic operation that applies to a resource.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "personGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "The resource instance.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PersonGroup"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "UpdatePersonGroup",
        "description": "The most basic operation that applies to a resource.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "personGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "The resource instance.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PersonGroupUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "DeletePersonGroup",
        "description": "The most basic operation that applies to a resource.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "personGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/face/{apiVersion}/persongroups/{personGroupId}/persons": {
      "get": {
        "operationId": "ListPersonGroupPerson",
        "description": "Operation that lists resources in a paginated way.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "personGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ListRequestOptions.start"
          },
          {
            "$ref": "#/parameters/ListRequestOptions.top"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PersonGroupPerson"
              },
              "x-ms-identifiers": []
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "post": {
        "operationId": "CreatePersonGroupPerson",
        "description": "Operation that applies to a collection of resources.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "personGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "The resource instance.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PersonGroupPerson"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PersonGroupPerson"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/face/{apiVersion}/persongroups/{personGroupId}/persons/{personId}": {
      "get": {
        "operationId": "GetPersonGroupPerson",
        "description": "Resource read operation template.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "personGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "ID of the person.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PersonGroupPerson"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "UpdatePersonGroupPerson",
        "description": "The most basic operation that applies to a resource.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "personGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "ID of the person.",
            "required": true,
            "type": "string"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "The resource instance.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PersonGroupPersonUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "DeletePersonGroupPerson",
        "description": "The most basic operation that applies to a resource.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "personGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "ID of the person.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/face/{apiVersion}/persongroups/{personGroupId}/persons/{personId}/persistedfaces": {
      "post": {
        "operationId": "AddPersonGroupPersonFaceFromUrl",
        "description": "Operation that applies to a collection of resources.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "personGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "ID of the person.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/AddFaceOptions.targetFace"
          },
          {
            "$ref": "#/parameters/AddFaceOptions.detectionModel"
          },
          {
            "$ref": "#/parameters/AddFaceOptions.userData"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddFaceFromUrlContent"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/AddFaceResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/face/{apiVersion}/persongroups/{personGroupId}/persons/{personId}/persistedfaces/{persistedFaceId}": {
      "get": {
        "operationId": "GetPersonGroupPersonFace",
        "description": "Resource read operation template.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "personGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "ID of the person.",
            "required": true,
            "type": "string"
          },
          {
            "name": "persistedFaceId",
            "in": "path",
            "description": "Face ID of the face.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PersonGroupPersonFace"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "UpdatePersonGroupPersonFace",
        "description": "The most basic operation that applies to a resource.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "personGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "ID of the person.",
            "required": true,
            "type": "string"
          },
          {
            "name": "persistedFaceId",
            "in": "path",
            "description": "Face ID of the face.",
            "required": true,
            "type": "string"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "The resource instance.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PersonGroupPersonFaceUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "DeletePersonGroupPersonFace",
        "description": "The most basic operation that applies to a resource.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "personGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "ID of the person.",
            "required": true,
            "type": "string"
          },
          {
            "name": "persistedFaceId",
            "in": "path",
            "description": "Face ID of the face.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/face/{apiVersion}/persongroups/{personGroupId}/train": {
      "post": {
        "operationId": "TrainPersonGroup",
        "description": "Resource action operation template.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "personGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/face/{apiVersion}/persongroups/{personGroupId}/training": {
      "get": {
        "operationId": "GetPersonGroupTrainingStatus",
        "description": "The most basic operation that applies to a resource.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "personGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/TrainingStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/face/{apiVersion}/persons": {
      "get": {
        "operationId": "ListPerson",
        "description": "Operation that lists resources in a paginated way.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "$ref": "#/parameters/ListRequestOptions.start"
          },
          {
            "$ref": "#/parameters/ListRequestOptions.top"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PersonDirectoryPerson"
              },
              "x-ms-identifiers": []
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "post": {
        "operationId": "CreatePerson",
        "description": "Operation that applies to a collection of resources.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "The resource instance.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PersonDirectoryPerson"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "schema": {
              "$ref": "#/definitions/CreatePersonResult"
            },
            "headers": {
              "operation-Location": {
                "type": "string",
                "format": "uri",
                "description": "The location of an instance of FaceOperationStatus"
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/face/{apiVersion}/persons/{personId}": {
      "get": {
        "operationId": "GetPerson",
        "description": "Resource read operation template.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "Person ID of the person.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PersonDirectoryPerson"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "UpdatePerson",
        "description": "The most basic operation that applies to a resource.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "Person ID of the person.",
            "required": true,
            "type": "string"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "The resource instance.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PersonDirectoryPersonUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "DeletePerson",
        "description": "The most basic operation that applies to a resource.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "Person ID of the person.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "headers": {
              "operation-Location": {
                "type": "string",
                "format": "uri",
                "description": "The location of an instance of FaceOperationStatus"
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/face/{apiVersion}/persons/{personId}/dynamicPersonGroupReferences": {
      "get": {
        "operationId": "ListDynamicPersonGroupReferences",
        "description": "The most basic operation that applies to a resource.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "Person ID of the person.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ListRequestOptions.start"
          },
          {
            "$ref": "#/parameters/ListRequestOptions.top"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/ListGroupReferenceResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/face/{apiVersion}/persons/{personId}/recognitionModels/{recognitionModel}/persistedfaces": {
      "get": {
        "operationId": "ListPersonFace",
        "description": "Operation that lists resources in a paginated way.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "Person ID of the person.",
            "required": true,
            "type": "string"
          },
          {
            "name": "recognitionModel",
            "in": "path",
            "description": "The 'recognitionModel' associated with faces.",
            "required": true,
            "type": "string",
            "enum": [
              "recognition_01",
              "recognition_02",
              "recognition_03",
              "recognition_04"
            ],
            "x-ms-enum": {
              "name": "RecognitionModel",
              "modelAsString": true,
              "values": [
                {
                  "name": "recognition_01",
                  "value": "recognition_01",
                  "description": "The default recognition model for Face - Detect. All those faceIds created before 2019 March are bonded with this recognition model."
                },
                {
                  "name": "recognition_02",
                  "value": "recognition_02",
                  "description": "Recognition model released in 2019 March."
                },
                {
                  "name": "recognition_03",
                  "value": "recognition_03",
                  "description": "Recognition model released in 2020 May."
                },
                {
                  "name": "recognition_04",
                  "value": "recognition_04",
                  "description": "Recognition model released in 2021 February. It's recommended to use this recognition model for better recognition accuracy."
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/ListFaceResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "post": {
        "operationId": "AddPersonFaceFromUrl",
        "description": "Operation that applies to a collection of resources.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "Person ID of the person.",
            "required": true,
            "type": "string"
          },
          {
            "name": "recognitionModel",
            "in": "path",
            "description": "The 'recognitionModel' associated with faces.",
            "required": true,
            "type": "string",
            "enum": [
              "recognition_01",
              "recognition_02",
              "recognition_03",
              "recognition_04"
            ],
            "x-ms-enum": {
              "name": "RecognitionModel",
              "modelAsString": true,
              "values": [
                {
                  "name": "recognition_01",
                  "value": "recognition_01",
                  "description": "The default recognition model for Face - Detect. All those faceIds created before 2019 March are bonded with this recognition model."
                },
                {
                  "name": "recognition_02",
                  "value": "recognition_02",
                  "description": "Recognition model released in 2019 March."
                },
                {
                  "name": "recognition_03",
                  "value": "recognition_03",
                  "description": "Recognition model released in 2020 May."
                },
                {
                  "name": "recognition_04",
                  "value": "recognition_04",
                  "description": "Recognition model released in 2021 February. It's recommended to use this recognition model for better recognition accuracy."
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/AddFaceOptions.targetFace"
          },
          {
            "$ref": "#/parameters/AddFaceOptions.detectionModel"
          },
          {
            "$ref": "#/parameters/AddFaceOptions.userData"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The body type of the operation request or response.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddFaceFromUrlContent"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "schema": {
              "$ref": "#/definitions/AddFaceResult"
            },
            "headers": {
              "operation-Location": {
                "type": "string",
                "format": "uri",
                "description": "The location of an instance of FaceOperationStatus"
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/face/{apiVersion}/persons/{personId}/recognitionModels/{recognitionModel}/persistedfaces/{persistedFaceId}": {
      "get": {
        "operationId": "GetPersonFace",
        "description": "Resource read operation template.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "Person ID of the person.",
            "required": true,
            "type": "string"
          },
          {
            "name": "recognitionModel",
            "in": "path",
            "description": "The 'recognitionModel' associated with faces.",
            "required": true,
            "type": "string",
            "enum": [
              "recognition_01",
              "recognition_02",
              "recognition_03",
              "recognition_04"
            ],
            "x-ms-enum": {
              "name": "RecognitionModel",
              "modelAsString": true,
              "values": [
                {
                  "name": "recognition_01",
                  "value": "recognition_01",
                  "description": "The default recognition model for Face - Detect. All those faceIds created before 2019 March are bonded with this recognition model."
                },
                {
                  "name": "recognition_02",
                  "value": "recognition_02",
                  "description": "Recognition model released in 2019 March."
                },
                {
                  "name": "recognition_03",
                  "value": "recognition_03",
                  "description": "Recognition model released in 2020 May."
                },
                {
                  "name": "recognition_04",
                  "value": "recognition_04",
                  "description": "Recognition model released in 2021 February. It's recommended to use this recognition model for better recognition accuracy."
                }
              ]
            }
          },
          {
            "name": "persistedFaceId",
            "in": "path",
            "description": "Face ID of the face.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PersonDirectoryFace"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "UpdatePersonFace",
        "description": "The most basic operation that applies to a resource.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "Person ID of the person.",
            "required": true,
            "type": "string"
          },
          {
            "name": "recognitionModel",
            "in": "path",
            "description": "The 'recognitionModel' associated with faces.",
            "required": true,
            "type": "string",
            "enum": [
              "recognition_01",
              "recognition_02",
              "recognition_03",
              "recognition_04"
            ],
            "x-ms-enum": {
              "name": "RecognitionModel",
              "modelAsString": true,
              "values": [
                {
                  "name": "recognition_01",
                  "value": "recognition_01",
                  "description": "The default recognition model for Face - Detect. All those faceIds created before 2019 March are bonded with this recognition model."
                },
                {
                  "name": "recognition_02",
                  "value": "recognition_02",
                  "description": "Recognition model released in 2019 March."
                },
                {
                  "name": "recognition_03",
                  "value": "recognition_03",
                  "description": "Recognition model released in 2020 May."
                },
                {
                  "name": "recognition_04",
                  "value": "recognition_04",
                  "description": "Recognition model released in 2021 February. It's recommended to use this recognition model for better recognition accuracy."
                }
              ]
            }
          },
          {
            "name": "persistedFaceId",
            "in": "path",
            "description": "Face ID of the face.",
            "required": true,
            "type": "string"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "The resource instance.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PersonDirectoryFaceUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "DeletePersonFace",
        "description": "The most basic operation that applies to a resource.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "Person ID of the person.",
            "required": true,
            "type": "string"
          },
          {
            "name": "recognitionModel",
            "in": "path",
            "description": "The 'recognitionModel' associated with faces.",
            "required": true,
            "type": "string",
            "enum": [
              "recognition_01",
              "recognition_02",
              "recognition_03",
              "recognition_04"
            ],
            "x-ms-enum": {
              "name": "RecognitionModel",
              "modelAsString": true,
              "values": [
                {
                  "name": "recognition_01",
                  "value": "recognition_01",
                  "description": "The default recognition model for Face - Detect. All those faceIds created before 2019 March are bonded with this recognition model."
                },
                {
                  "name": "recognition_02",
                  "value": "recognition_02",
                  "description": "Recognition model released in 2019 March."
                },
                {
                  "name": "recognition_03",
                  "value": "recognition_03",
                  "description": "Recognition model released in 2020 May."
                },
                {
                  "name": "recognition_04",
                  "value": "recognition_04",
                  "description": "Recognition model released in 2021 February. It's recommended to use this recognition model for better recognition accuracy."
                }
              ]
            }
          },
          {
            "name": "persistedFaceId",
            "in": "path",
            "description": "Face ID of the face.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "headers": {
              "operation-Location": {
                "type": "string",
                "format": "uri",
                "description": "The location of an instance of FaceOperationStatus"
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/face/{apiVersion}/verify": {
      "post": {
        "operationId": "Verify",
        "description": "Verify whether two faces belong to a same person or whether one face belongs to a person.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "faceId1": {
                  "type": "string",
                  "description": "faceId of the face, comes from Face - Detect."
                },
                "faceId2": {
                  "type": "string",
                  "description": "faceId of the face, comes from Face - Detect."
                }
              },
              "required": [
                "faceId1",
                "faceId2"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/FaceVerificationResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    }
  },
  "x-ms-paths": {
    "/face/{apiVersion}/detect?_overload=detectFromStream": {
      "post": {
        "operationId": "DetectFromStream",
        "description": "Detect human faces in an image, return face rectangles, and optionally with faceIds, landmarks, and attributes.",
        "consumes": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "$ref": "#/parameters/FaceDetectionOptions.returnFaceId"
          },
          {
            "$ref": "#/parameters/FaceDetectionOptions.returnFaceLandmarks"
          },
          {
            "$ref": "#/parameters/FaceDetectionOptions.returnFaceAttributes"
          },
          {
            "$ref": "#/parameters/FaceDetectionOptions.recognitionModel"
          },
          {
            "$ref": "#/parameters/FaceDetectionOptions.returnRecognitionModel"
          },
          {
            "$ref": "#/parameters/FaceDetectionOptions.detectionModel"
          },
          {
            "$ref": "#/parameters/FaceDetectionOptions.faceIdTimeToLive"
          },
          {
            "name": "imageContent",
            "in": "body",
            "description": "The image to be analyzed",
            "required": true,
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FaceDetectionResult"
              },
              "x-ms-identifiers": []
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/face/{apiVersion}/detectLivenessWithVerify/singleModal/sessions?_overload=createLivenessWithVerifySessionWithVerifyImage": {
      "post": {
        "operationId": "LivenessSessions_CreateLivenessWithVerifySessionWithVerifyImage",
        "description": "Creates face liveness detection session with verify image.",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "$ref": "#/parameters/LivenessSessionWithVerifyImageCreationContent.Parameters"
          },
          {
            "$ref": "#/parameters/LivenessSessionWithVerifyImageCreationContent.VerifyImage"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/LivenessSessionCreationResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/face/{apiVersion}/facelists/{faceListId}/persistedfaces?_overload=addFaceListFaceFromStream": {
      "post": {
        "operationId": "AddFaceListFaceFromStream",
        "description": "Operation that applies to a collection of resources.",
        "consumes": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "faceListId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/AddFaceOptions.targetFace"
          },
          {
            "$ref": "#/parameters/AddFaceOptions.detectionModel"
          },
          {
            "$ref": "#/parameters/AddFaceOptions.userData"
          },
          {
            "name": "imageContent",
            "in": "body",
            "description": "The image to be analyzed",
            "required": true,
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/AddFaceResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/face/{apiVersion}/findsimilars?_overload=findSimilarFromFaceList": {
      "post": {
        "operationId": "FindSimilarFromFaceList",
        "description": "Given query face's faceId, to search the similar-looking faces from a faceId array, a face list or a large face list.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "faceId": {
                  "type": "string",
                  "description": "faceId of the face, comes from Face - Detect."
                },
                "maxNumOfCandidatesReturned": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The number of top similar faces returned. The valid range is [1, 1000].It defaults to 20."
                },
                "mode": {
                  "$ref": "#/definitions/FindSimilarMatchMode",
                  "description": "Similar face searching mode. It can be 'matchPerson' or 'matchFace'. It defaults to 'matchPerson'."
                },
                "faceListId": {
                  "type": "string",
                  "description": "An existing user-specified unique candidate face list, created in FaceList - Create. Face list contains a set of persistedFaceIds which are persisted and will never expire."
                }
              },
              "required": [
                "faceId",
                "faceListId"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FaceFindSimilarResult"
              },
              "x-ms-identifiers": []
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/face/{apiVersion}/findsimilars?_overload=findSimilarFromLargeFaceList": {
      "post": {
        "operationId": "FindSimilarFromLargeFaceList",
        "description": "Given query face's faceId, to search the similar-looking faces from a faceId array, a face list or a large face list.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "faceId": {
                  "type": "string",
                  "description": "faceId of the face, comes from Face - Detect."
                },
                "maxNumOfCandidatesReturned": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The number of top similar faces returned. The valid range is [1, 1000].It defaults to 20."
                },
                "mode": {
                  "$ref": "#/definitions/FindSimilarMatchMode",
                  "description": "Similar face searching mode. It can be 'matchPerson' or 'matchFace'. It defaults to 'matchPerson'."
                },
                "largeFaceListId": {
                  "type": "string",
                  "description": "An existing user-specified unique candidate large face list, created in LargeFaceList - Create. Large face list contains a set of persistedFaceIds which are persisted and will never expire."
                }
              },
              "required": [
                "faceId",
                "largeFaceListId"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FaceFindSimilarResult"
              },
              "x-ms-identifiers": []
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/face/{apiVersion}/identify?_overload=identifyFromDynamicPersonGroup": {
      "post": {
        "operationId": "IdentifyFromDynamicPersonGroup",
        "description": "A remote procedure call (RPC) operation.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "faceIds": {
                  "type": "array",
                  "description": "Array of query faces faceIds, created by the Face - Detect. Each of the faces are identified independently. The valid number of faceIds is between [1, 10].",
                  "items": {
                    "type": "string"
                  }
                },
                "dynamicPersonGroupId": {
                  "type": "string",
                  "description": "Id of the target PersonDirectory DynamicPersonGroup to match against."
                },
                "maxNumOfCandidatesReturned": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The range of maxNumOfCandidatesReturned is between 1 and 100 (default is 10)."
                },
                "confidenceThreshold": {
                  "type": "number",
                  "format": "float",
                  "description": "Customized identification confidence threshold, in the range of [0, 1]. Advanced user can tweak this value to override default internal threshold for better precision on their scenario data. Note there is no guarantee of this threshold value working on other data and after algorithm updates."
                }
              },
              "required": [
                "faceIds",
                "dynamicPersonGroupId"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FaceIdentificationResult"
              },
              "x-ms-identifiers": []
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/face/{apiVersion}/identify?_overload=identifyFromLargePersonGroup": {
      "post": {
        "operationId": "IdentifyFromLargePersonGroup",
        "description": "A remote procedure call (RPC) operation.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "faceIds": {
                  "type": "array",
                  "description": "Array of query faces faceIds, created by the Face - Detect. Each of the faces are identified independently. The valid number of faceIds is between [1, 10].",
                  "items": {
                    "type": "string"
                  }
                },
                "largePersonGroupId": {
                  "type": "string",
                  "description": "Id of the target person group, created by LargePersonGroup - Create."
                },
                "maxNumOfCandidatesReturned": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The range of maxNumOfCandidatesReturned is between 1 and 100 (default is 10)."
                },
                "confidenceThreshold": {
                  "type": "number",
                  "format": "float",
                  "description": "Customized identification confidence threshold, in the range of [0, 1]. Advanced user can tweak this value to override default internal threshold for better precision on their scenario data. Note there is no guarantee of this threshold value working on other data and after algorithm updates."
                }
              },
              "required": [
                "faceIds",
                "largePersonGroupId"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FaceIdentificationResult"
              },
              "x-ms-identifiers": []
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/face/{apiVersion}/identify?_overload=identifyFromPersonGroup": {
      "post": {
        "operationId": "IdentifyFromPersonGroup",
        "description": "A remote procedure call (RPC) operation.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "faceIds": {
                  "type": "array",
                  "description": "Array of query faces faceIds, created by the Face - Detect. Each of the faces are identified independently. The valid number of faceIds is between [1, 10].",
                  "items": {
                    "type": "string"
                  }
                },
                "personGroupId": {
                  "type": "string",
                  "description": "Id of the target person group, created by PersonGroup - Create."
                },
                "maxNumOfCandidatesReturned": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The range of maxNumOfCandidatesReturned is between 1 and 100 (default is 10)."
                },
                "confidenceThreshold": {
                  "type": "number",
                  "format": "float",
                  "description": "Customized identification confidence threshold, in the range of [0, 1]. Advanced user can tweak this value to override default internal threshold for better precision on their scenario data. Note there is no guarantee of this threshold value working on other data and after algorithm updates."
                }
              },
              "required": [
                "faceIds",
                "personGroupId"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FaceIdentificationResult"
              },
              "x-ms-identifiers": []
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/face/{apiVersion}/largefacelists/{largeFaceListId}/persistedfaces?_overload=addLargeFaceListFaceFromStream": {
      "post": {
        "operationId": "AddLargeFaceListFaceFromStream",
        "description": "Operation that applies to a collection of resources.",
        "consumes": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "largeFaceListId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/AddFaceOptions.targetFace"
          },
          {
            "$ref": "#/parameters/AddFaceOptions.detectionModel"
          },
          {
            "$ref": "#/parameters/AddFaceOptions.userData"
          },
          {
            "name": "imageContent",
            "in": "body",
            "description": "The image to be analyzed",
            "required": true,
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/AddFaceResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/face/{apiVersion}/largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces?_overload=addLargePersonGroupPersonFaceFromStream": {
      "post": {
        "operationId": "AddLargePersonGroupPersonFaceFromStream",
        "description": "Operation that applies to a collection of resources.",
        "consumes": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "largePersonGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "ID of the person.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/AddFaceOptions.targetFace"
          },
          {
            "$ref": "#/parameters/AddFaceOptions.detectionModel"
          },
          {
            "$ref": "#/parameters/AddFaceOptions.userData"
          },
          {
            "name": "imageContent",
            "in": "body",
            "description": "The image to be analyzed",
            "required": true,
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/AddFaceResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/face/{apiVersion}/persongroups/{personGroupId}/persons/{personId}/persistedfaces?_overload=addPersonGroupPersonFaceFromStream": {
      "post": {
        "operationId": "AddPersonGroupPersonFaceFromStream",
        "description": "Operation that applies to a collection of resources.",
        "consumes": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "personGroupId",
            "in": "path",
            "description": "ID of the container.",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "ID of the person.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/AddFaceOptions.targetFace"
          },
          {
            "$ref": "#/parameters/AddFaceOptions.detectionModel"
          },
          {
            "$ref": "#/parameters/AddFaceOptions.userData"
          },
          {
            "name": "imageContent",
            "in": "body",
            "description": "The image to be analyzed",
            "required": true,
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/AddFaceResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/face/{apiVersion}/persons/{personId}/recognitionModels/{recognitionModel}/persistedfaces?_overload=addPersonFaceFromStream": {
      "post": {
        "operationId": "AddPersonFaceFromStream",
        "description": "Operation that applies to a collection of resources.",
        "consumes": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "Person ID of the person.",
            "required": true,
            "type": "string"
          },
          {
            "name": "recognitionModel",
            "in": "path",
            "description": "The 'recognitionModel' associated with faces.",
            "required": true,
            "type": "string",
            "enum": [
              "recognition_01",
              "recognition_02",
              "recognition_03",
              "recognition_04"
            ],
            "x-ms-enum": {
              "name": "RecognitionModel",
              "modelAsString": true,
              "values": [
                {
                  "name": "recognition_01",
                  "value": "recognition_01",
                  "description": "The default recognition model for Face - Detect. All those faceIds created before 2019 March are bonded with this recognition model."
                },
                {
                  "name": "recognition_02",
                  "value": "recognition_02",
                  "description": "Recognition model released in 2019 March."
                },
                {
                  "name": "recognition_03",
                  "value": "recognition_03",
                  "description": "Recognition model released in 2020 May."
                },
                {
                  "name": "recognition_04",
                  "value": "recognition_04",
                  "description": "Recognition model released in 2021 February. It's recommended to use this recognition model for better recognition accuracy."
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/AddFaceOptions.targetFace"
          },
          {
            "$ref": "#/parameters/AddFaceOptions.detectionModel"
          },
          {
            "$ref": "#/parameters/AddFaceOptions.userData"
          },
          {
            "name": "imageContent",
            "in": "body",
            "description": "The image to be analyzed",
            "required": true,
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "schema": {
              "$ref": "#/definitions/AddFaceResult"
            },
            "headers": {
              "operation-Location": {
                "type": "string",
                "format": "uri",
                "description": "The location of an instance of FaceOperationStatus"
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/face/{apiVersion}/verify?_overload=verifyFromLargePersonGroup": {
      "post": {
        "operationId": "VerifyFromLargePersonGroup",
        "description": "A remote procedure call (RPC) operation.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "faceId": {
                  "type": "string",
                  "description": "faceId of the face, comes from Face - Detect."
                },
                "largePersonGroupId": {
                  "type": "string",
                  "description": "Id of the target person group, created by LargePersonGroup - Create."
                },
                "personId": {
                  "type": "string",
                  "description": "Specify a certain person in person group."
                }
              },
              "required": [
                "faceId",
                "largePersonGroupId",
                "personId"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/FaceVerificationResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/face/{apiVersion}/verify?_overload=verifyFromPersonDirectory": {
      "post": {
        "operationId": "VerifyFromPersonDirectory",
        "description": "A remote procedure call (RPC) operation.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "faceId": {
                  "type": "string",
                  "description": "faceId of the face, comes from Face - Detect."
                },
                "personId": {
                  "type": "string",
                  "description": "Specify a certain person in PersonDirectory Person."
                }
              },
              "required": [
                "faceId",
                "personId"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/FaceVerificationResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/face/{apiVersion}/verify?_overload=verifyFromPersonGroup": {
      "post": {
        "operationId": "VerifyFromPersonGroup",
        "description": "A remote procedure call (RPC) operation.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionPathParameter"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "faceId": {
                  "type": "string",
                  "description": "faceId of the face, comes from Face - Detect."
                },
                "personGroupId": {
                  "type": "string",
                  "description": "Id of the target person group, created by PersonGroup - Create."
                },
                "personId": {
                  "type": "string",
                  "description": "Specify a certain person in person group."
                }
              },
              "required": [
                "faceId",
                "personGroupId",
                "personId"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/FaceVerificationResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AADToken": {
      "type": "object",
      "description": "The Azure Active Directory OAuth2 Flow",
      "properties": {
        "type": {
          "type": "string",
          "description": "OAuth2 authentication",
          "enum": [
            "oauth2"
          ]
        },
        "flows": {
          "type": "array",
          "description": "Supported OAuth2 flows",
          "items": {}
        }
      },
      "required": [
        "type",
        "flows"
      ]
    },
    "AccessoryItem": {
      "type": "object",
      "description": "Accessory item and corresponding confidence level.",
      "properties": {
        "type": {
          "$ref": "#/definitions/AccessoryType",
          "description": "Type of the accessory."
        },
        "confidence": {
          "type": "number",
          "format": "float",
          "description": "Confidence level of the accessory type. Range between [0,1]."
        }
      },
      "required": [
        "type",
        "confidence"
      ]
    },
    "AccessoryType": {
      "type": "string",
      "description": "Type of the accessory.",
      "enum": [
        "headwear",
        "glasses",
        "mask"
      ],
      "x-ms-enum": {
        "name": "AccessoryType",
        "modelAsString": true,
        "values": [
          {
            "name": "headwear",
            "value": "headwear",
            "description": "Head wear"
          },
          {
            "name": "glasses",
            "value": "glasses",
            "description": "Glasses"
          },
          {
            "name": "mask",
            "value": "mask",
            "description": "Mask"
          }
        ]
      }
    },
    "AddFaceFromUrlContent": {
      "type": "object",
      "description": "Model for add face by url.",
      "properties": {
        "url": {
          "type": "string",
          "format": "uri",
          "description": "URL of input image."
        }
      },
      "required": [
        "url"
      ]
    },
    "AddFaceResult": {
      "type": "object",
      "description": "Model for add face result.",
      "properties": {
        "persistedFaceId": {
          "type": "string",
          "description": "The persisted face id."
        }
      },
      "required": [
        "persistedFaceId"
      ]
    },
    "Azure.Core.Foundations.Error": {
      "type": "object",
      "description": "The error object.",
      "properties": {
        "code": {
          "type": "string",
          "description": "One of a server-defined set of error codes."
        },
        "message": {
          "type": "string",
          "description": "A human-readable representation of the error."
        },
        "target": {
          "type": "string",
          "description": "The target of the error."
        },
        "details": {
          "type": "array",
          "description": "An array of details about specific errors that led to this reported error.",
          "items": {
            "$ref": "#/definitions/Azure.Core.Foundations.Error"
          },
          "x-ms-identifiers": []
        },
        "innererror": {
          "$ref": "#/definitions/Azure.Core.Foundations.InnerError",
          "description": "An object containing more specific information than the current object about the error."
        }
      },
      "required": [
        "code",
        "message"
      ]
    },
    "Azure.Core.Foundations.ErrorResponse": {
      "type": "object",
      "description": "A response containing error details.",
      "properties": {
        "error": {
          "$ref": "#/definitions/Azure.Core.Foundations.Error",
          "description": "The error object."
        }
      },
      "required": [
        "error"
      ]
    },
    "Azure.Core.Foundations.InnerError": {
      "type": "object",
      "description": "An object containing more specific information about the error. As per Microsoft One API guidelines - https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.",
      "properties": {
        "code": {
          "type": "string",
          "description": "One of a server-defined set of error codes."
        },
        "innererror": {
          "$ref": "#/definitions/Azure.Core.Foundations.InnerError",
          "description": "Inner error."
        }
      }
    },
    "Azure.Core.Foundations.OperationState": {
      "type": "string",
      "description": "Enum describing allowed operation states.",
      "enum": [
        "NotStarted",
        "Running",
        "Succeeded",
        "Failed",
        "Canceled"
      ],
      "x-ms-enum": {
        "name": "OperationState",
        "modelAsString": true,
        "values": [
          {
            "name": "NotStarted",
            "value": "NotStarted",
            "description": "The operation has not started."
          },
          {
            "name": "Running",
            "value": "Running",
            "description": "The operation is in progress."
          },
          {
            "name": "Succeeded",
            "value": "Succeeded",
            "description": "The operation has completed successfully."
          },
          {
            "name": "Failed",
            "value": "Failed",
            "description": "The operation has failed."
          },
          {
            "name": "Canceled",
            "value": "Canceled",
            "description": "The operation has been canceled by the user."
          }
        ]
      }
    },
    "BaseFace": {
      "type": "object",
      "description": "Common model for persisted face.",
      "properties": {
        "persistedFaceId": {
          "type": "string",
          "description": "Face ID of the face.",
          "readOnly": true
        },
        "userData": {
          "type": "string",
          "description": "User-provided data attached to the face. The size limit is 1KB."
        }
      },
      "required": [
        "persistedFaceId"
      ]
    },
    "BaseFaceList": {
      "type": "object",
      "description": "Base model for face list.",
      "properties": {
        "name": {
          "type": "string",
          "description": "User defined name, maximum length is 128."
        },
        "userData": {
          "type": "string",
          "description": "Optional user defined data. Length should not exceed 16KB."
        },
        "recognitionModel": {
          "$ref": "#/definitions/RecognitionModel",
          "description": "Name of recognition model. Recognition model is used when the face features are extracted and associated with detected faceIds. The default value is 'recognition_01', if latest model needed, please explicitly specify the model you need.",
          "readOnly": true
        }
      },
      "required": [
        "name"
      ]
    },
    "BasePersonGroup": {
      "type": "object",
      "description": "Base model for person group.",
      "properties": {
        "name": {
          "type": "string",
          "description": "User defined name, maximum length is 128."
        },
        "userData": {
          "type": "string",
          "description": "Optional user defined data. Length should not exceed 16KB."
        },
        "recognitionModel": {
          "$ref": "#/definitions/RecognitionModel",
          "description": "Name of recognition model. Recognition model is used when the face features are extracted and associated with detected faceIds. The default value is 'recognition_01', if latest model needed, please explicitly specify the model you need.",
          "readOnly": true
        }
      },
      "required": [
        "name"
      ]
    },
    "BasePersonGroupPerson": {
      "type": "object",
      "description": "Base model for person.",
      "properties": {
        "personId": {
          "type": "string",
          "description": "ID of the person.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "User defined name, maximum length is 128."
        },
        "userData": {
          "type": "string",
          "description": "Optional user defined data. Length should not exceed 16KB."
        },
        "persistedFaceIds": {
          "type": "array",
          "description": "Face ids of registered faces in the person.",
          "items": {
            "type": "string"
          },
          "readOnly": true
        }
      },
      "required": [
        "personId",
        "name"
      ]
    },
    "BlurLevel": {
      "type": "string",
      "description": "Indicates level of blurriness.",
      "enum": [
        "low",
        "medium",
        "high"
      ],
      "x-ms-enum": {
        "name": "BlurLevel",
        "modelAsString": true,
        "values": [
          {
            "name": "low",
            "value": "low",
            "description": "Low blur level."
          },
          {
            "name": "medium",
            "value": "medium",
            "description": "Medium blur level."
          },
          {
            "name": "high",
            "value": "high",
            "description": "High blur level."
          }
        ]
      }
    },
    "BlurProperties": {
      "type": "object",
      "description": "Properties describing any presence of blur within the image.",
      "properties": {
        "blurLevel": {
          "$ref": "#/definitions/BlurLevel",
          "description": "An enum value indicating level of blurriness."
        },
        "value": {
          "type": "number",
          "format": "float",
          "description": "A number indicating level of blurriness ranging from 0 to 1."
        }
      },
      "required": [
        "blurLevel",
        "value"
      ]
    },
    "CreateDynamicPersonGroupContent": {
      "type": "object",
      "description": "Request of create dynamic person group.",
      "properties": {
        "dynamicPersonGroupId": {
          "type": "string",
          "description": "ID of the dynamic person group.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "User defined name, maximum length is 128."
        },
        "userData": {
          "type": "string",
          "description": "Optional user defined data. Length should not exceed 16KB."
        },
        "addPersonIds": {
          "type": "array",
          "description": "Array of personIds created by PersonDirectory Person - Create to add.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "dynamicPersonGroupId",
        "name"
      ]
    },
    "CreatePersonResult": {
      "type": "object",
      "description": "Response of create person.",
      "properties": {
        "personId": {
          "type": "string",
          "description": "Person ID of the person."
        }
      },
      "required": [
        "personId"
      ]
    },
    "DetectionModel": {
      "type": "string",
      "description": "The detection model for the face.",
      "enum": [
        "detection_01",
        "detection_02",
        "detection_03"
      ],
      "x-ms-enum": {
        "name": "DetectionModel",
        "modelAsString": true,
        "values": [
          {
            "name": "detection_01",
            "value": "detection_01",
            "description": "The default detection model for Face - Detect. Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected."
          },
          {
            "name": "detection_02",
            "value": "detection_02",
            "description": "Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces."
          },
          {
            "name": "detection_03",
            "value": "detection_03",
            "description": "Detection model released in 2021 February with improved accuracy especially on small faces."
          }
        ]
      }
    },
    "DynamicPersonGroup": {
      "type": "object",
      "description": "A container that references PersonDirectory Person - Create.",
      "properties": {
        "dynamicPersonGroupId": {
          "type": "string",
          "description": "ID of the dynamic person group.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "User defined name, maximum length is 128."
        },
        "userData": {
          "type": "string",
          "description": "Optional user defined data. Length should not exceed 16KB."
        }
      },
      "required": [
        "dynamicPersonGroupId",
        "name"
      ]
    },
    "ExposureLevel": {
      "type": "string",
      "description": "Indicates level of exposure.",
      "enum": [
        "underExposure",
        "goodExposure",
        "overExposure"
      ],
      "x-ms-enum": {
        "name": "ExposureLevel",
        "modelAsString": true,
        "values": [
          {
            "name": "underExposure",
            "value": "underExposure",
            "description": "Low exposure level."
          },
          {
            "name": "goodExposure",
            "value": "goodExposure",
            "description": "Good exposure level."
          },
          {
            "name": "overExposure",
            "value": "overExposure",
            "description": "High exposure level."
          }
        ]
      }
    },
    "ExposureProperties": {
      "type": "object",
      "description": "Properties describing exposure level of the image.",
      "properties": {
        "exposureLevel": {
          "$ref": "#/definitions/ExposureLevel",
          "description": "An enum value indicating level of exposure."
        },
        "value": {
          "type": "number",
          "format": "float",
          "description": "A number indicating level of exposure level ranging from 0 to 1. [0, 0.25) is under exposure. [0.25, 0.75) is good exposure. [0.75, 1] is over exposure."
        }
      },
      "required": [
        "exposureLevel",
        "value"
      ]
    },
    "FaceAttributes": {
      "type": "object",
      "description": "Face attributes for the detected face.",
      "properties": {
        "age": {
          "type": "integer",
          "format": "int32",
          "description": "Age in years"
        },
        "smile": {
          "type": "number",
          "format": "float",
          "description": "Smile intensity, a number between [0,1]"
        },
        "facialHair": {
          "$ref": "#/definitions/FacialHair",
          "description": "Properties describing facial hair attributes."
        },
        "glasses": {
          "$ref": "#/definitions/GlassesType",
          "description": "Glasses type if any of the face."
        },
        "headPose": {
          "$ref": "#/definitions/HeadPose",
          "description": "3-D roll/yaw/pitch angles for face direction."
        },
        "hair": {
          "$ref": "#/definitions/HairProperties",
          "description": "Properties describing hair attributes."
        },
        "occlusion": {
          "$ref": "#/definitions/OcclusionProperties",
          "description": "Properties describing occlusions on a given face."
        },
        "accessories": {
          "type": "array",
          "description": "Properties describing any accessories on a given face.",
          "items": {
            "$ref": "#/definitions/AccessoryItem"
          },
          "x-ms-identifiers": []
        },
        "blur": {
          "$ref": "#/definitions/BlurProperties",
          "description": "Properties describing any presence of blur within the image."
        },
        "exposure": {
          "$ref": "#/definitions/ExposureProperties",
          "description": "Properties describing exposure level of the image."
        },
        "noise": {
          "$ref": "#/definitions/NoiseProperties",
          "description": "Properties describing noise level of the image."
        },
        "mask": {
          "$ref": "#/definitions/MaskProperties",
          "description": "Properties describing the presence of a mask on a given face."
        },
        "qualityForRecognition": {
          "$ref": "#/definitions/QualityForRecognition",
          "description": "Properties describing the overall image quality regarding whether the image being used in the detection is of sufficient quality to attempt face recognition on."
        }
      }
    },
    "FaceDetectionResult": {
      "type": "object",
      "description": "Response for detect API.",
      "properties": {
        "faceId": {
          "type": "string",
          "description": "Unique faceId of the detected face, created by detection API and it will expire 24 hours after the detection call."
        },
        "recognitionModel": {
          "type": "string",
          "description": "The 'recognitionModel' associated with this faceId. This is only returned when 'returnRecognitionModel' is explicitly set as true."
        },
        "faceRectangle": {
          "$ref": "#/definitions/FaceRectangle",
          "description": "A rectangle area for the face location on image."
        },
        "faceLandmarks": {
          "$ref": "#/definitions/FaceLandmarks",
          "description": "An array of 27-point face landmarks pointing to the important positions of face components. To return this, it requires 'returnFaceLandmarks' parameter to be true."
        },
        "faceAttributes": {
          "$ref": "#/definitions/FaceAttributes",
          "description": "Face attributes fore detected face."
        }
      },
      "required": [
        "faceId"
      ]
    },
    "FaceFindSimilarResult": {
      "type": "object",
      "description": "Response body for find similar face operation.",
      "properties": {
        "confidence": {
          "type": "number",
          "format": "float",
          "description": "Confidence value of the candidate. The higher confidence, the more similar. Range between [0,1]."
        },
        "faceId": {
          "type": "string",
          "description": "faceId of candidate face when find by faceIds."
        },
        "persistedFaceId": {
          "type": "string",
          "description": "PersistedFaceId of candidate face when find by faceListId."
        }
      },
      "required": [
        "confidence"
      ]
    },
    "FaceGroupingResult": {
      "type": "object",
      "description": "Response body for group face operation.",
      "properties": {
        "groups": {
          "type": "array",
          "description": "A partition of the original faces based on face similarity. Groups are ranked by number of faces.",
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "x-ms-identifiers": []
        },
        "messyGroup": {
          "type": "array",
          "description": "Face ids array of faces that cannot find any similar faces from original faces.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "groups",
        "messyGroup"
      ]
    },
    "FaceIdentificationCandidate": {
      "type": "object",
      "description": "Candidate for identify call.",
      "properties": {
        "personId": {
          "type": "string",
          "description": "PersonId of the candidate."
        },
        "confidence": {
          "type": "number",
          "format": "float",
          "description": "Confidence value of the candidate. The higher confidence, the more similar. Range between [0,1]."
        }
      },
      "required": [
        "personId",
        "confidence"
      ]
    },
    "FaceIdentificationResult": {
      "type": "object",
      "description": "Identify result.",
      "properties": {
        "faceId": {
          "type": "string",
          "description": "Face ID of the query face."
        },
        "candidates": {
          "type": "array",
          "description": "The top candidate returned from the database.",
          "items": {
            "$ref": "#/definitions/FaceIdentificationCandidate"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "faceId",
        "candidates"
      ]
    },
    "FaceLandmarks": {
      "type": "object",
      "description": "A collection of 27-point face landmarks pointing to the important positions of face components.",
      "properties": {
        "pupilLeft": {
          "$ref": "#/definitions/LandmarkCoordinate",
          "description": "Coordinates within an image"
        },
        "pupilRight": {
          "$ref": "#/definitions/LandmarkCoordinate",
          "description": "Coordinates within an image"
        },
        "noseTip": {
          "$ref": "#/definitions/LandmarkCoordinate",
          "description": "Coordinates within an image"
        },
        "mouthLeft": {
          "$ref": "#/definitions/LandmarkCoordinate",
          "description": "Coordinates within an image"
        },
        "mouthRight": {
          "$ref": "#/definitions/LandmarkCoordinate",
          "description": "Coordinates within an image"
        },
        "eyebrowLeftOuter": {
          "$ref": "#/definitions/LandmarkCoordinate",
          "description": "Coordinates within an image"
        },
        "eyebrowLeftInner": {
          "$ref": "#/definitions/LandmarkCoordinate",
          "description": "Coordinates within an image"
        },
        "eyeLeftOuter": {
          "$ref": "#/definitions/LandmarkCoordinate",
          "description": "Coordinates within an image"
        },
        "eyeLeftTop": {
          "$ref": "#/definitions/LandmarkCoordinate",
          "description": "Coordinates within an image"
        },
        "eyeLeftBottom": {
          "$ref": "#/definitions/LandmarkCoordinate",
          "description": "Coordinates within an image"
        },
        "eyeLeftInner": {
          "$ref": "#/definitions/LandmarkCoordinate",
          "description": "Coordinates within an image"
        },
        "eyebrowRightInner": {
          "$ref": "#/definitions/LandmarkCoordinate",
          "description": "Coordinates within an image"
        },
        "eyebrowRightOuter": {
          "$ref": "#/definitions/LandmarkCoordinate",
          "description": "Coordinates within an image"
        },
        "eyeRightInner": {
          "$ref": "#/definitions/LandmarkCoordinate",
          "description": "Coordinates within an image"
        },
        "eyeRightTop": {
          "$ref": "#/definitions/LandmarkCoordinate",
          "description": "Coordinates within an image"
        },
        "eyeRightBottom": {
          "$ref": "#/definitions/LandmarkCoordinate",
          "description": "Coordinates within an image"
        },
        "eyeRightOuter": {
          "$ref": "#/definitions/LandmarkCoordinate",
          "description": "Coordinates within an image"
        },
        "noseRootLeft": {
          "$ref": "#/definitions/LandmarkCoordinate",
          "description": "Coordinates within an image"
        },
        "noseRootRight": {
          "$ref": "#/definitions/LandmarkCoordinate",
          "description": "Coordinates within an image"
        },
        "noseLeftAlarTop": {
          "$ref": "#/definitions/LandmarkCoordinate",
          "description": "Coordinates within an image"
        },
        "noseRightAlarTop": {
          "$ref": "#/definitions/LandmarkCoordinate",
          "description": "Coordinates within an image"
        },
        "noseLeftAlarOutTip": {
          "$ref": "#/definitions/LandmarkCoordinate",
          "description": "Coordinates within an image"
        },
        "noseRightAlarOutTip": {
          "$ref": "#/definitions/LandmarkCoordinate",
          "description": "Coordinates within an image"
        },
        "upperLipTop": {
          "$ref": "#/definitions/LandmarkCoordinate",
          "description": "Coordinates within an image"
        },
        "upperLipBottom": {
          "$ref": "#/definitions/LandmarkCoordinate",
          "description": "Coordinates within an image"
        },
        "underLipTop": {
          "$ref": "#/definitions/LandmarkCoordinate",
          "description": "Coordinates within an image"
        },
        "underLipBottom": {
          "$ref": "#/definitions/LandmarkCoordinate",
          "description": "Coordinates within an image"
        }
      },
      "required": [
        "pupilLeft",
        "pupilRight",
        "noseTip",
        "mouthLeft",
        "mouthRight",
        "eyebrowLeftOuter",
        "eyebrowLeftInner",
        "eyeLeftOuter",
        "eyeLeftTop",
        "eyeLeftBottom",
        "eyeLeftInner",
        "eyebrowRightInner",
        "eyebrowRightOuter",
        "eyeRightInner",
        "eyeRightTop",
        "eyeRightBottom",
        "eyeRightOuter",
        "noseRootLeft",
        "noseRootRight",
        "noseLeftAlarTop",
        "noseRightAlarTop",
        "noseLeftAlarOutTip",
        "noseRightAlarOutTip",
        "upperLipTop",
        "upperLipBottom",
        "underLipTop",
        "underLipBottom"
      ]
    },
    "FaceList": {
      "type": "object",
      "description": "Face list is a list of faces, up to 1,000 faces.",
      "properties": {
        "name": {
          "type": "string",
          "description": "User defined name, maximum length is 128."
        },
        "userData": {
          "type": "string",
          "description": "Optional user defined data. Length should not exceed 16KB."
        },
        "recognitionModel": {
          "$ref": "#/definitions/RecognitionModel",
          "description": "Name of recognition model. Recognition model is used when the face features are extracted and associated with detected faceIds. The default value is 'recognition_01', if latest model needed, please explicitly specify the model you need.",
          "readOnly": true
        },
        "faceListId": {
          "type": "string",
          "description": "ID of the container.",
          "readOnly": true
        },
        "persistedFaces": {
          "type": "array",
          "description": "Face ids of registered faces in the face list.",
          "items": {
            "$ref": "#/definitions/FaceListFace"
          },
          "readOnly": true,
          "x-ms-identifiers": []
        }
      },
      "required": [
        "name",
        "faceListId"
      ]
    },
    "FaceListFace": {
      "type": "object",
      "description": "Face resource for face list.",
      "properties": {
        "persistedFaceId": {
          "type": "string",
          "description": "Face ID of the face.",
          "readOnly": true
        },
        "userData": {
          "type": "string",
          "description": "User-provided data attached to the face. The size limit is 1KB."
        }
      },
      "required": [
        "persistedFaceId"
      ]
    },
    "FaceListUpdate": {
      "type": "object",
      "description": "Face list is a list of faces, up to 1,000 faces.",
      "properties": {
        "name": {
          "type": "string",
          "description": "User defined name, maximum length is 128."
        },
        "userData": {
          "type": "string",
          "description": "Optional user defined data. Length should not exceed 16KB."
        }
      }
    },
    "FaceOperationStatus": {
      "type": "object",
      "description": "Long running operation resource for person directory.",
      "properties": {
        "operationId": {
          "type": "string",
          "description": "Operation ID of the operation.",
          "readOnly": true
        },
        "status": {
          "$ref": "#/definitions/Azure.Core.Foundations.OperationState",
          "description": "Current status of the operation."
        },
        "createdDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time the operation was created."
        },
        "finishedDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time the operation was finished."
        },
        "message": {
          "type": "string",
          "description": "Message for the operation."
        }
      },
      "required": [
        "operationId",
        "status",
        "createdDateTime"
      ]
    },
    "FaceRectangle": {
      "type": "object",
      "description": "A rectangle within which a face can be found.",
      "properties": {
        "top": {
          "type": "integer",
          "format": "int32",
          "description": "The distance from the top edge if the image to the top edge of the rectangle, in pixels."
        },
        "left": {
          "type": "integer",
          "format": "int32",
          "description": "The distance from the left edge if the image to the left edge of the rectangle, in pixels."
        },
        "width": {
          "type": "integer",
          "format": "int32",
          "description": "The width of the rectangle, in pixels."
        },
        "height": {
          "type": "integer",
          "format": "int32",
          "description": "The height of the rectangle, in pixels."
        }
      },
      "required": [
        "top",
        "left",
        "width",
        "height"
      ]
    },
    "FaceSessionStatus": {
      "type": "string",
      "description": "The current status of the session.",
      "enum": [
        "NotStarted",
        "Started",
        "ResultAvailable"
      ],
      "x-ms-enum": {
        "name": "FaceSessionStatus",
        "modelAsString": true,
        "values": [
          {
            "name": "NotStarted",
            "value": "NotStarted",
            "description": "Session has not started."
          },
          {
            "name": "Started",
            "value": "Started",
            "description": "Session has started."
          },
          {
            "name": "ResultAvailable",
            "value": "ResultAvailable",
            "description": "Session has available result."
          }
        ]
      }
    },
    "FaceVerificationResult": {
      "type": "object",
      "description": "Verify result.",
      "properties": {
        "isIdentical": {
          "type": "boolean",
          "description": "True if the two faces belong to the same person or the face belongs to the person, otherwise false."
        },
        "confidence": {
          "type": "number",
          "format": "float",
          "description": "Confidence score of whether the two faces belong to the same person or whether the face belongs to the person. The range is [0, 1]."
        }
      },
      "required": [
        "isIdentical",
        "confidence"
      ]
    },
    "FacialHair": {
      "type": "object",
      "description": "Properties describing facial hair attributes.",
      "properties": {
        "moustache": {
          "type": "number",
          "format": "float",
          "description": "A number ranging from 0 to 1 indicating a level of confidence associated with a property."
        },
        "beard": {
          "type": "number",
          "format": "float",
          "description": "A number ranging from 0 to 1 indicating a level of confidence associated with a property."
        },
        "sideburns": {
          "type": "number",
          "format": "float",
          "description": "A number ranging from 0 to 1 indicating a level of confidence associated with a property."
        }
      },
      "required": [
        "moustache",
        "beard",
        "sideburns"
      ]
    },
    "FindSimilarMatchMode": {
      "type": "string",
      "description": "Similar face searching mode.",
      "enum": [
        "matchPerson",
        "matchFace"
      ],
      "x-ms-enum": {
        "name": "FindSimilarMatchMode",
        "modelAsString": true,
        "values": [
          {
            "name": "matchPerson",
            "value": "matchPerson",
            "description": "Match person."
          },
          {
            "name": "matchFace",
            "value": "matchFace",
            "description": "Match face."
          }
        ]
      }
    },
    "GlassesType": {
      "type": "string",
      "description": "Glasses type of the face.",
      "enum": [
        "noGlasses",
        "readingGlasses",
        "sunglasses",
        "swimmingGoggles"
      ],
      "x-ms-enum": {
        "name": "GlassesType",
        "modelAsString": true,
        "values": [
          {
            "name": "noGlasses",
            "value": "noGlasses",
            "description": "No glasses on the face."
          },
          {
            "name": "readingGlasses",
            "value": "readingGlasses",
            "description": "Normal glasses on the face."
          },
          {
            "name": "sunglasses",
            "value": "sunglasses",
            "description": "Sunglasses on the face."
          },
          {
            "name": "swimmingGoggles",
            "value": "swimmingGoggles",
            "description": "Swimming goggles on the face."
          }
        ]
      }
    },
    "HairColor": {
      "type": "object",
      "description": "An array of candidate colors and confidence level in the presence of each.",
      "properties": {
        "color": {
          "$ref": "#/definitions/HairColorType",
          "description": "Name of the hair color."
        },
        "confidence": {
          "type": "number",
          "format": "float",
          "description": "Confidence level of the color. Range between [0,1]."
        }
      },
      "required": [
        "color",
        "confidence"
      ]
    },
    "HairColorType": {
      "type": "string",
      "description": "Name of the hair color.",
      "enum": [
        "unknown",
        "white",
        "gray",
        "blond",
        "brown",
        "red",
        "black",
        "other"
      ],
      "x-ms-enum": {
        "name": "HairColorType",
        "modelAsString": true,
        "values": [
          {
            "name": "unknownHairColor",
            "value": "unknown",
            "description": "Unknown"
          },
          {
            "name": "white",
            "value": "white",
            "description": "White"
          },
          {
            "name": "gray",
            "value": "gray",
            "description": "Gray"
          },
          {
            "name": "blond",
            "value": "blond",
            "description": "Blond"
          },
          {
            "name": "brown",
            "value": "brown",
            "description": "Brown"
          },
          {
            "name": "red",
            "value": "red",
            "description": "Red"
          },
          {
            "name": "black",
            "value": "black",
            "description": "Black"
          },
          {
            "name": "other",
            "value": "other",
            "description": "Other"
          }
        ]
      }
    },
    "HairProperties": {
      "type": "object",
      "description": "Properties describing hair attributes.",
      "properties": {
        "bald": {
          "type": "number",
          "format": "float",
          "description": "A number describing confidence level of whether the person is bald."
        },
        "invisible": {
          "type": "boolean",
          "description": "A boolean value describing whether the hair is visible in the image."
        },
        "hairColor": {
          "type": "array",
          "description": "An array of candidate colors and confidence level in the presence of each.",
          "items": {
            "$ref": "#/definitions/HairColor"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "bald",
        "invisible",
        "hairColor"
      ]
    },
    "HeadPose": {
      "type": "object",
      "description": "3-D roll/yaw/pitch angles for face direction.",
      "properties": {
        "pitch": {
          "type": "number",
          "format": "float",
          "description": "Value of angles."
        },
        "roll": {
          "type": "number",
          "format": "float",
          "description": "Value of angles."
        },
        "yaw": {
          "type": "number",
          "format": "float",
          "description": "Value of angles."
        }
      },
      "required": [
        "pitch",
        "roll",
        "yaw"
      ]
    },
    "KeyAuth": {
      "type": "object",
      "description": "The secret key for your Azure AI Face subscription.",
      "properties": {
        "type": {
          "type": "string",
          "description": "API key authentication",
          "enum": [
            "apiKey"
          ]
        },
        "in": {
          "type": "string",
          "description": "location of the API key",
          "enum": [
            "header"
          ]
        },
        "name": {
          "type": "string",
          "description": "name of the API key",
          "enum": [
            "Ocp-Apim-Subscription-Key"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        }
      },
      "required": [
        "type",
        "in",
        "name"
      ]
    },
    "LandmarkCoordinate": {
      "type": "object",
      "description": "Coordinates within an image.",
      "properties": {
        "x": {
          "type": "number",
          "format": "float",
          "description": "The horizontal component, in pixels."
        },
        "y": {
          "type": "number",
          "format": "float",
          "description": "The vertical component, in pixels."
        }
      },
      "required": [
        "x",
        "y"
      ]
    },
    "LargeFaceList": {
      "type": "object",
      "description": "Large face list is a list of faces, up to 1,000,000 faces.",
      "properties": {
        "name": {
          "type": "string",
          "description": "User defined name, maximum length is 128."
        },
        "userData": {
          "type": "string",
          "description": "Optional user defined data. Length should not exceed 16KB."
        },
        "recognitionModel": {
          "$ref": "#/definitions/RecognitionModel",
          "description": "Name of recognition model. Recognition model is used when the face features are extracted and associated with detected faceIds. The default value is 'recognition_01', if latest model needed, please explicitly specify the model you need.",
          "readOnly": true
        },
        "largeFaceListId": {
          "type": "string",
          "description": "ID of the container.",
          "readOnly": true
        }
      },
      "required": [
        "name",
        "largeFaceListId"
      ]
    },
    "LargeFaceListFace": {
      "type": "object",
      "description": "Face resource for large face list.",
      "properties": {
        "persistedFaceId": {
          "type": "string",
          "description": "Face ID of the face.",
          "readOnly": true
        },
        "userData": {
          "type": "string",
          "description": "User-provided data attached to the face. The size limit is 1KB."
        }
      },
      "required": [
        "persistedFaceId"
      ]
    },
    "LargeFaceListFaceUpdate": {
      "type": "object",
      "description": "Face resource for large face list.",
      "properties": {
        "userData": {
          "type": "string",
          "description": "User-provided data attached to the face. The size limit is 1KB."
        }
      }
    },
    "LargeFaceListUpdate": {
      "type": "object",
      "description": "Large face list is a list of faces, up to 1,000,000 faces.",
      "properties": {
        "name": {
          "type": "string",
          "description": "User defined name, maximum length is 128."
        },
        "userData": {
          "type": "string",
          "description": "Optional user defined data. Length should not exceed 16KB."
        }
      }
    },
    "LargePersonGroup": {
      "type": "object",
      "description": "The container of the uploaded person data, including face recognition feature, and up to 1,000,000 people.",
      "properties": {
        "name": {
          "type": "string",
          "description": "User defined name, maximum length is 128."
        },
        "userData": {
          "type": "string",
          "description": "Optional user defined data. Length should not exceed 16KB."
        },
        "recognitionModel": {
          "$ref": "#/definitions/RecognitionModel",
          "description": "Name of recognition model. Recognition model is used when the face features are extracted and associated with detected faceIds. The default value is 'recognition_01', if latest model needed, please explicitly specify the model you need.",
          "readOnly": true
        },
        "largePersonGroupId": {
          "type": "string",
          "description": "ID of the container.",
          "readOnly": true
        }
      },
      "required": [
        "name",
        "largePersonGroupId"
      ]
    },
    "LargePersonGroupPerson": {
      "type": "object",
      "description": "The person in a specified large person group. To add face to this person, please call LargePersonGroup PersonFace - Add.",
      "properties": {
        "personId": {
          "type": "string",
          "description": "ID of the person.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "User defined name, maximum length is 128."
        },
        "userData": {
          "type": "string",
          "description": "Optional user defined data. Length should not exceed 16KB."
        },
        "persistedFaceIds": {
          "type": "array",
          "description": "Face ids of registered faces in the person.",
          "items": {
            "type": "string"
          },
          "readOnly": true
        }
      },
      "required": [
        "personId",
        "name"
      ]
    },
    "LargePersonGroupPersonFace": {
      "type": "object",
      "description": "Face resource for large person group person.",
      "properties": {
        "persistedFaceId": {
          "type": "string",
          "description": "Face ID of the face.",
          "readOnly": true
        },
        "userData": {
          "type": "string",
          "description": "User-provided data attached to the face. The size limit is 1KB."
        }
      },
      "required": [
        "persistedFaceId"
      ]
    },
    "LargePersonGroupPersonFaceUpdate": {
      "type": "object",
      "description": "Face resource for large person group person.",
      "properties": {
        "userData": {
          "type": "string",
          "description": "User-provided data attached to the face. The size limit is 1KB."
        }
      }
    },
    "LargePersonGroupPersonUpdate": {
      "type": "object",
      "description": "The person in a specified large person group. To add face to this person, please call LargePersonGroup PersonFace - Add.",
      "properties": {
        "name": {
          "type": "string",
          "description": "User defined name, maximum length is 128."
        },
        "userData": {
          "type": "string",
          "description": "Optional user defined data. Length should not exceed 16KB."
        }
      }
    },
    "LargePersonGroupUpdate": {
      "type": "object",
      "description": "The container of the uploaded person data, including face recognition feature, and up to 1,000,000 people.",
      "properties": {
        "name": {
          "type": "string",
          "description": "User defined name, maximum length is 128."
        },
        "userData": {
          "type": "string",
          "description": "Optional user defined data. Length should not exceed 16KB."
        }
      }
    },
    "ListFaceResult": {
      "type": "object",
      "description": "Response of list face of person.",
      "properties": {
        "personId": {
          "type": "string",
          "description": "Id of person."
        },
        "persistedFaceIds": {
          "type": "array",
          "description": "Array of persisted face ids.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "personId",
        "persistedFaceIds"
      ]
    },
    "ListGroupReferenceResult": {
      "type": "object",
      "description": "Response of list dynamic person group of person.",
      "properties": {
        "dynamicPersonGroupIds": {
          "type": "array",
          "description": "Array of PersonDirectory DynamicPersonGroup ids.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "dynamicPersonGroupIds"
      ]
    },
    "ListPersonResult": {
      "type": "object",
      "description": "Response of list dynamic person group person.",
      "properties": {
        "personIds": {
          "type": "array",
          "description": "Array of PersonDirectory Person ids.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "personIds"
      ]
    },
    "LivenessSession": {
      "type": "object",
      "description": "Session result of detect liveness.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique ID to reference this session.",
          "readOnly": true
        },
        "createdDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Session creation time in millisecond from epoch.",
          "readOnly": true
        },
        "sessionStartDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Session started time from session auth token.",
          "readOnly": true
        },
        "sessionExpired": {
          "type": "boolean",
          "description": "Whether or not the session is expired.",
          "readOnly": true
        },
        "deviceCorrelationId": {
          "type": "string",
          "description": "Device Correlation Id to use for linking multiple sessions together."
        },
        "authTokenTimeToLiveInSeconds": {
          "type": "integer",
          "format": "int32",
          "description": "Session length in seconds. Range is 60 to 86400 seconds."
        },
        "status": {
          "$ref": "#/definitions/FaceSessionStatus",
          "description": "The session status.",
          "readOnly": true
        },
        "result": {
          "$ref": "#/definitions/LivenessSessionAuditEntry",
          "description": "The last result of session.",
          "readOnly": true
        }
      },
      "required": [
        "id",
        "createdDateTime",
        "sessionExpired",
        "deviceCorrelationId",
        "status"
      ]
    },
    "LivenessSessionAuditEntry": {
      "type": "object",
      "description": "Audit entry for a request in session.",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "ID of this audit entry."
        },
        "sessionId": {
          "type": "string",
          "description": "Session ID of this audit entry."
        },
        "requestId": {
          "type": "string",
          "description": "Request ID in the request header."
        },
        "clientRequestId": {
          "type": "string",
          "description": "Client request ID in the request header."
        },
        "receivedDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "The UTC date time of the request."
        },
        "request": {
          "$ref": "#/definitions/SessionAuditEntryRequestInfo",
          "description": "The request of this entry."
        },
        "response": {
          "$ref": "#/definitions/SessionAuditEntryResponseInfo",
          "description": "The response of this entry."
        },
        "digest": {
          "type": "string",
          "description": "The digest of the request body."
        }
      },
      "required": [
        "id",
        "sessionId",
        "requestId",
        "clientRequestId",
        "receivedDateTime",
        "request",
        "response",
        "digest"
      ]
    },
    "LivenessSessionCreationContent": {
      "type": "object",
      "description": "Request for creating liveness session.",
      "properties": {
        "livenessOperationMode": {
          "type": "string",
          "description": "The operation mode for the liveness modal."
        },
        "sendResultsToClient": {
          "type": "boolean",
          "description": "Whether or not send back the operation response to client."
        },
        "deviceCorrelationIdSetInClient": {
          "type": "boolean",
          "description": "Whether or not the device correlation id is set by the client."
        },
        "deviceCorrelationId": {
          "type": "string",
          "description": "Device Correlation Id to use for linking multiple sessions together."
        },
        "authTokenTimeToLiveInSeconds": {
          "type": "integer",
          "format": "int32",
          "description": "Session length in seconds. Range is 60 to 86400 seconds."
        }
      },
      "required": [
        "livenessOperationMode",
        "deviceCorrelationId"
      ]
    },
    "LivenessSessionCreationContentForMultipart": {
      "type": "object",
      "description": "Dedicated parameter model for multipart/form-data.",
      "properties": {
        "livenessOperationMode": {
          "type": "string",
          "description": "The operation mode for the liveness modal."
        },
        "sendResultsToClient": {
          "type": "boolean",
          "description": "Whether or not send back the operation response to client."
        },
        "deviceCorrelationIdSetInClient": {
          "type": "boolean",
          "description": "Whether or not the device correlation id is set by the client."
        },
        "deviceCorrelationId": {
          "type": "string",
          "description": "Device Correlation Id to use for linking multiple sessions together."
        },
        "authTokenTimeToLiveInSeconds": {
          "type": "integer",
          "format": "int32",
          "description": "Session length in seconds. Range is 60 to 86400 seconds."
        }
      },
      "required": [
        "livenessOperationMode",
        "deviceCorrelationId"
      ]
    },
    "LivenessSessionCreationResult": {
      "type": "object",
      "description": "Response of liveness session creation.",
      "properties": {
        "sessionId": {
          "type": "string",
          "description": "Unique ID to reference this session."
        },
        "authToken": {
          "type": "string",
          "description": "Authorization token for use by the client application"
        }
      },
      "required": [
        "sessionId",
        "authToken"
      ]
    },
    "LivenessSessionData": {
      "type": "object",
      "description": "Data for liveness session.",
      "properties": {
        "deviceCorrelationId": {
          "type": "string",
          "description": "Device Correlation Id to use for linking multiple sessions together."
        },
        "authTokenTimeToLiveInSeconds": {
          "type": "integer",
          "format": "int32",
          "description": "Session length in seconds. Range is 60 to 86400 seconds."
        }
      },
      "required": [
        "deviceCorrelationId"
      ]
    },
    "LivenessSessionDetails": {
      "type": "object",
      "description": "Session details data.",
      "properties": {
        "status": {
          "$ref": "#/definitions/FaceSessionStatus",
          "description": "The session status.",
          "readOnly": true
        },
        "result": {
          "$ref": "#/definitions/LivenessSessionAuditEntry",
          "description": "The last result of session.",
          "readOnly": true
        }
      },
      "required": [
        "status"
      ]
    },
    "LivenessSessionItem": {
      "type": "object",
      "description": "Session data returned for enumeration.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique ID to reference this session.",
          "readOnly": true
        },
        "createdDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Session creation time in millisecond from epoch.",
          "readOnly": true
        },
        "sessionStartDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Session started time from session auth token.",
          "readOnly": true
        },
        "sessionExpired": {
          "type": "boolean",
          "description": "Whether or not the session is expired.",
          "readOnly": true
        },
        "deviceCorrelationId": {
          "type": "string",
          "description": "Device Correlation Id to use for linking multiple sessions together."
        },
        "authTokenTimeToLiveInSeconds": {
          "type": "integer",
          "format": "int32",
          "description": "Session length in seconds. Range is 60 to 86400 seconds."
        }
      },
      "required": [
        "id",
        "createdDateTime",
        "sessionExpired",
        "deviceCorrelationId"
      ]
    },
    "LivenessSessionWithVerifyImageCreationContent": {
      "type": "object",
      "description": "Request of liveness with verify session creation.",
      "properties": {
        "Parameters": {
          "$ref": "#/definitions/LivenessSessionCreationContentForMultipart",
          "description": "The parameters for creating session."
        },
        "VerifyImage": {
          "type": "string",
          "format": "byte",
          "description": "The image stream for verify."
        }
      },
      "required": [
        "Parameters",
        "VerifyImage"
      ]
    },
    "LivenessWithVerifySession": {
      "type": "object",
      "description": "Session result of detect liveness with verify.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique ID to reference this session.",
          "readOnly": true
        },
        "createdDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Session creation time in millisecond from epoch.",
          "readOnly": true
        },
        "sessionStartDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Session started time from session auth token.",
          "readOnly": true
        },
        "sessionExpired": {
          "type": "boolean",
          "description": "Whether or not the session is expired.",
          "readOnly": true
        },
        "deviceCorrelationId": {
          "type": "string",
          "description": "Device Correlation Id to use for linking multiple sessions together."
        },
        "authTokenTimeToLiveInSeconds": {
          "type": "integer",
          "format": "int32",
          "description": "Session length in seconds. Range is 60 to 86400 seconds."
        },
        "status": {
          "$ref": "#/definitions/FaceSessionStatus",
          "description": "The session status.",
          "readOnly": true
        },
        "result": {
          "$ref": "#/definitions/LivenessSessionAuditEntry",
          "description": "The last result of session.",
          "readOnly": true
        }
      },
      "required": [
        "id",
        "createdDateTime",
        "sessionExpired",
        "deviceCorrelationId",
        "status"
      ]
    },
    "MaskProperties": {
      "type": "object",
      "description": "Properties describing the presence of a mask on a given face.",
      "properties": {
        "noseAndMouthCovered": {
          "type": "boolean",
          "description": "A boolean value indicating whether nose and mouth are covered."
        },
        "type": {
          "$ref": "#/definitions/MaskType",
          "description": "Mask type if any of the face"
        }
      },
      "required": [
        "noseAndMouthCovered",
        "type"
      ]
    },
    "MaskType": {
      "type": "string",
      "description": "Mask type if any of the face",
      "enum": [
        "faceMask",
        "noMask",
        "otherMaskOrOcclusion",
        "uncertain"
      ],
      "x-ms-enum": {
        "name": "MaskType",
        "modelAsString": true,
        "values": [
          {
            "name": "faceMask",
            "value": "faceMask",
            "description": "Face mask."
          },
          {
            "name": "noMask",
            "value": "noMask",
            "description": "No mask."
          },
          {
            "name": "otherMaskOrOcclusion",
            "value": "otherMaskOrOcclusion",
            "description": "Other types of mask or occlusion."
          },
          {
            "name": "uncertain",
            "value": "uncertain",
            "description": "Uncertain"
          }
        ]
      }
    },
    "NameAndUserData": {
      "type": "object",
      "description": "Model for object name and user data.",
      "properties": {
        "name": {
          "type": "string",
          "description": "User defined name, maximum length is 128."
        },
        "userData": {
          "type": "string",
          "description": "Optional user defined data. Length should not exceed 16KB."
        }
      },
      "required": [
        "name"
      ]
    },
    "NoiseLevel": {
      "type": "string",
      "description": "Indicates level of noise.",
      "enum": [
        "low",
        "medium",
        "high"
      ],
      "x-ms-enum": {
        "name": "NoiseLevel",
        "modelAsString": true,
        "values": [
          {
            "name": "low",
            "value": "low",
            "description": "Low noise level."
          },
          {
            "name": "medium",
            "value": "medium",
            "description": "Medium noise level."
          },
          {
            "name": "high",
            "value": "high",
            "description": "High noise level."
          }
        ]
      }
    },
    "NoiseProperties": {
      "type": "object",
      "description": "Properties describing noise level of the image.",
      "properties": {
        "noiseLevel": {
          "$ref": "#/definitions/NoiseLevel",
          "description": "An enum value indicating level of noise."
        },
        "value": {
          "type": "number",
          "format": "float",
          "description": "A number indicating level of noise level ranging from 0 to 1. [0, 0.25) is under exposure. [0.25, 0.75) is good exposure. [0.75, 1] is over exposure. [0, 0.3) is low noise level. [0.3, 0.7) is medium noise level. [0.7, 1] is high noise level."
        }
      },
      "required": [
        "noiseLevel",
        "value"
      ]
    },
    "OcclusionProperties": {
      "type": "object",
      "description": "Properties describing occlusions on a given face.",
      "properties": {
        "foreheadOccluded": {
          "type": "boolean",
          "description": "A boolean value indicating whether forehead is occluded."
        },
        "eyeOccluded": {
          "type": "boolean",
          "description": "A boolean value indicating whether eyes are occluded."
        },
        "mouthOccluded": {
          "type": "boolean",
          "description": "A boolean value indicating whether the mouth is occluded."
        }
      },
      "required": [
        "foreheadOccluded",
        "eyeOccluded",
        "mouthOccluded"
      ]
    },
    "PersonDirectoryFace": {
      "type": "object",
      "description": "Face resource for person directory person.",
      "properties": {
        "persistedFaceId": {
          "type": "string",
          "description": "Face ID of the face.",
          "readOnly": true
        },
        "userData": {
          "type": "string",
          "description": "User-provided data attached to the face. The size limit is 1KB."
        }
      },
      "required": [
        "persistedFaceId"
      ]
    },
    "PersonDirectoryFaceUpdate": {
      "type": "object",
      "description": "Face resource for person directory person.",
      "properties": {
        "userData": {
          "type": "string",
          "description": "User-provided data attached to the face. The size limit is 1KB."
        }
      }
    },
    "PersonDirectoryPerson": {
      "type": "object",
      "description": "Person resource for person directory",
      "properties": {
        "personId": {
          "type": "string",
          "description": "Person ID of the person.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "User defined name, maximum length is 128."
        },
        "userData": {
          "type": "string",
          "description": "Optional user defined data. Length should not exceed 16KB."
        }
      },
      "required": [
        "personId",
        "name"
      ]
    },
    "PersonDirectoryPersonUpdate": {
      "type": "object",
      "description": "Person resource for person directory",
      "properties": {
        "name": {
          "type": "string",
          "description": "User defined name, maximum length is 128."
        },
        "userData": {
          "type": "string",
          "description": "Optional user defined data. Length should not exceed 16KB."
        }
      }
    },
    "PersonDirectoryRecognitionModel": {
      "type": "object",
      "description": "Middle tier resource for person directory.",
      "properties": {
        "recognitionModel": {
          "$ref": "#/definitions/RecognitionModel",
          "description": "The 'recognitionModel' associated with faces.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "required": [
        "recognitionModel"
      ]
    },
    "PersonGroup": {
      "type": "object",
      "description": "Free-tier subscription quota: 1,000 person groups. Each holds up to 1,000 persons. S0-tier subscription quota: 1,000,000 person groups. Each holds up to 10,000 persons. To handle larger scale face identification problem, please consider using LargePersonGroup.",
      "properties": {
        "name": {
          "type": "string",
          "description": "User defined name, maximum length is 128."
        },
        "userData": {
          "type": "string",
          "description": "Optional user defined data. Length should not exceed 16KB."
        },
        "recognitionModel": {
          "$ref": "#/definitions/RecognitionModel",
          "description": "Name of recognition model. Recognition model is used when the face features are extracted and associated with detected faceIds. The default value is 'recognition_01', if latest model needed, please explicitly specify the model you need.",
          "readOnly": true
        },
        "personGroupId": {
          "type": "string",
          "description": "ID of the container.",
          "readOnly": true
        }
      },
      "required": [
        "name",
        "personGroupId"
      ]
    },
    "PersonGroupPerson": {
      "type": "object",
      "description": "The person in a specified person group. To add face to this person, please call LargePersonGroup PersonFace - Add.",
      "properties": {
        "personId": {
          "type": "string",
          "description": "ID of the person.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "User defined name, maximum length is 128."
        },
        "userData": {
          "type": "string",
          "description": "Optional user defined data. Length should not exceed 16KB."
        },
        "persistedFaceIds": {
          "type": "array",
          "description": "Face ids of registered faces in the person.",
          "items": {
            "type": "string"
          },
          "readOnly": true
        }
      },
      "required": [
        "personId",
        "name"
      ]
    },
    "PersonGroupPersonFace": {
      "type": "object",
      "description": "Face resource for person group person.",
      "properties": {
        "persistedFaceId": {
          "type": "string",
          "description": "Face ID of the face.",
          "readOnly": true
        },
        "userData": {
          "type": "string",
          "description": "User-provided data attached to the face. The size limit is 1KB."
        }
      },
      "required": [
        "persistedFaceId"
      ]
    },
    "PersonGroupPersonFaceUpdate": {
      "type": "object",
      "description": "Face resource for person group person.",
      "properties": {
        "userData": {
          "type": "string",
          "description": "User-provided data attached to the face. The size limit is 1KB."
        }
      }
    },
    "PersonGroupPersonUpdate": {
      "type": "object",
      "description": "The person in a specified person group. To add face to this person, please call LargePersonGroup PersonFace - Add.",
      "properties": {
        "name": {
          "type": "string",
          "description": "User defined name, maximum length is 128."
        },
        "userData": {
          "type": "string",
          "description": "Optional user defined data. Length should not exceed 16KB."
        }
      }
    },
    "PersonGroupUpdate": {
      "type": "object",
      "description": "Free-tier subscription quota: 1,000 person groups. Each holds up to 1,000 persons. S0-tier subscription quota: 1,000,000 person groups. Each holds up to 10,000 persons. To handle larger scale face identification problem, please consider using LargePersonGroup.",
      "properties": {
        "name": {
          "type": "string",
          "description": "User defined name, maximum length is 128."
        },
        "userData": {
          "type": "string",
          "description": "Optional user defined data. Length should not exceed 16KB."
        }
      }
    },
    "QualityForRecognition": {
      "type": "string",
      "description": "Indicates quality of image for recognition.",
      "enum": [
        "low",
        "medium",
        "high"
      ],
      "x-ms-enum": {
        "name": "QualityForRecognition",
        "modelAsString": true,
        "values": [
          {
            "name": "low",
            "value": "low",
            "description": "Low quality."
          },
          {
            "name": "medium",
            "value": "medium",
            "description": "Medium quality."
          },
          {
            "name": "high",
            "value": "high",
            "description": "High quality."
          }
        ]
      }
    },
    "RecognitionModel": {
      "type": "string",
      "description": "The recognition model for the face.",
      "enum": [
        "recognition_01",
        "recognition_02",
        "recognition_03",
        "recognition_04"
      ],
      "x-ms-enum": {
        "name": "RecognitionModel",
        "modelAsString": true,
        "values": [
          {
            "name": "recognition_01",
            "value": "recognition_01",
            "description": "The default recognition model for Face - Detect. All those faceIds created before 2019 March are bonded with this recognition model."
          },
          {
            "name": "recognition_02",
            "value": "recognition_02",
            "description": "Recognition model released in 2019 March."
          },
          {
            "name": "recognition_03",
            "value": "recognition_03",
            "description": "Recognition model released in 2020 May."
          },
          {
            "name": "recognition_04",
            "value": "recognition_04",
            "description": "Recognition model released in 2021 February. It's recommended to use this recognition model for better recognition accuracy."
          }
        ]
      }
    },
    "SessionAuditEntryRequestInfo": {
      "type": "object",
      "description": "Audit entry for a request in the session.",
      "properties": {
        "url": {
          "type": "string",
          "format": "uri",
          "description": "The URL of the request."
        },
        "method": {
          "type": "string",
          "description": "The HTTP method of the request."
        },
        "contentLength": {
          "type": "integer",
          "format": "int64",
          "description": "The length of the request body in bytes."
        },
        "contentType": {
          "type": "string",
          "description": "The content type of the request."
        },
        "userAgent": {
          "type": "string",
          "description": "The user agent of the request."
        }
      },
      "required": [
        "url",
        "method",
        "contentType"
      ]
    },
    "SessionAuditEntryResponseInfo": {
      "type": "object",
      "description": "Audit entry for a response in the session.",
      "properties": {
        "body": {
          "type": "object",
          "description": "The response body.",
          "additionalProperties": {}
        },
        "statusCode": {
          "type": "integer",
          "format": "int32",
          "description": "The HTTP status code of the request."
        },
        "latencyInMilliseconds": {
          "type": "integer",
          "format": "int64",
          "description": "The latency of the request."
        }
      },
      "required": [
        "body",
        "statusCode",
        "latencyInMilliseconds"
      ]
    },
    "TrainingStatus": {
      "type": "object",
      "description": "Training status of a container",
      "properties": {
        "status": {
          "$ref": "#/definitions/Azure.Core.Foundations.OperationState",
          "description": "Training status of the container."
        },
        "createdDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "A combined UTC date and time string that describes the created time of the person group, large person group or large face list."
        },
        "lastActionDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "A combined UTC date and time string that describes the last modify time of the person group, large person group or large face list, could be null value when the group is not successfully trained."
        },
        "lastSuccessfulTrainingDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "A combined UTC date and time string that describes the last successful training time of the person group, large person group or large face list."
        },
        "message": {
          "type": "string",
          "description": "Show failure message when training failed (omitted when training succeed)."
        }
      },
      "required": [
        "status",
        "createdDateTime",
        "lastActionDateTime",
        "lastSuccessfulTrainingDateTime"
      ]
    },
    "UpdateDynamicPersonGroupContent": {
      "type": "object",
      "description": "Request of update dynamic person group.",
      "properties": {
        "name": {
          "type": "string",
          "description": "User defined name, maximum length is 128."
        },
        "userData": {
          "type": "string",
          "description": "Optional user defined data. Length should not exceed 16KB."
        },
        "addPersonIds": {
          "type": "array",
          "description": "Array of personIds created by PersonDirectory Person - Create to add.",
          "items": {
            "type": "string"
          }
        },
        "removePersonIds": {
          "type": "array",
          "description": "Array of personIds created by PersonDirectory Person - Create to remove.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Versions": {
      "type": "string",
      "enum": [
        "v1.1-preview.1"
      ],
      "x-ms-enum": {
        "name": "Versions",
        "modelAsString": true,
        "values": [
          {
            "name": "v1_1_preview_1",
            "value": "v1.1-preview.1"
          }
        ]
      }
    }
  },
  "parameters": {
    "AddFaceOptions.detectionModel": {
      "name": "detectionModel",
      "in": "query",
      "description": "The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel' values include 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'.",
      "required": false,
      "type": "string",
      "enum": [
        "detection_01",
        "detection_02",
        "detection_03"
      ],
      "x-ms-enum": {
        "name": "DetectionModel",
        "modelAsString": true,
        "values": [
          {
            "name": "detection_01",
            "value": "detection_01",
            "description": "The default detection model for Face - Detect. Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected."
          },
          {
            "name": "detection_02",
            "value": "detection_02",
            "description": "Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces."
          },
          {
            "name": "detection_03",
            "value": "detection_03",
            "description": "Detection model released in 2021 February with improved accuracy especially on small faces."
          }
        ]
      },
      "x-ms-parameter-location": "method"
    },
    "AddFaceOptions.targetFace": {
      "name": "targetFace",
      "in": "query",
      "description": "A face rectangle to specify the target face to be added to a person, in the format of 'targetFace=left,top,width,height'.",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "AddFaceOptions.userData": {
      "name": "userData",
      "in": "query",
      "description": "User-provided data attached to the face. The size limit is 1KB.",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "ApiVersionPathParameter": {
      "name": "apiVersion",
      "in": "path",
      "description": "The API version to use for this operation.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "FaceDetectionOptions.detectionModel": {
      "name": "detectionModel",
      "in": "query",
      "description": "The 'detectionModel' associated with the detected faceIds.",
      "required": false,
      "type": "string",
      "enum": [
        "detection_01",
        "detection_02",
        "detection_03"
      ],
      "x-ms-enum": {
        "name": "DetectionModel",
        "modelAsString": true,
        "values": [
          {
            "name": "detection_01",
            "value": "detection_01",
            "description": "The default detection model for Face - Detect. Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected."
          },
          {
            "name": "detection_02",
            "value": "detection_02",
            "description": "Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces."
          },
          {
            "name": "detection_03",
            "value": "detection_03",
            "description": "Detection model released in 2021 February with improved accuracy especially on small faces."
          }
        ]
      },
      "x-ms-parameter-location": "method"
    },
    "FaceDetectionOptions.faceIdTimeToLive": {
      "name": "faceIdTimeToLive",
      "in": "query",
      "description": "The number of seconds for the face ID being cached. Supported range from 60 seconds up to 86400 seconds. The default value is 86400 (24 hours).",
      "required": false,
      "type": "integer",
      "format": "int32",
      "x-ms-parameter-location": "method"
    },
    "FaceDetectionOptions.recognitionModel": {
      "name": "recognitionModel",
      "in": "query",
      "description": "The 'recognitionModel' associated with the detected faceIds.",
      "required": false,
      "type": "string",
      "enum": [
        "recognition_01",
        "recognition_02",
        "recognition_03",
        "recognition_04"
      ],
      "x-ms-enum": {
        "name": "RecognitionModel",
        "modelAsString": true,
        "values": [
          {
            "name": "recognition_01",
            "value": "recognition_01",
            "description": "The default recognition model for Face - Detect. All those faceIds created before 2019 March are bonded with this recognition model."
          },
          {
            "name": "recognition_02",
            "value": "recognition_02",
            "description": "Recognition model released in 2019 March."
          },
          {
            "name": "recognition_03",
            "value": "recognition_03",
            "description": "Recognition model released in 2020 May."
          },
          {
            "name": "recognition_04",
            "value": "recognition_04",
            "description": "Recognition model released in 2021 February. It's recommended to use this recognition model for better recognition accuracy."
          }
        ]
      },
      "x-ms-parameter-location": "method"
    },
    "FaceDetectionOptions.returnFaceAttributes": {
      "name": "returnFaceAttributes",
      "in": "query",
      "description": "Analyze and return the one or more specified face attributes in the comma-separated string like 'returnFaceAttributes=headPose,glasses'. Supported face attributes include headPose, glasses, occlusion, accessories, blur, exposure, noise, mask, and qualityForRecognition. Face attribute analysis has additional computational and time cost.",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "FaceDetectionOptions.returnFaceId": {
      "name": "returnFaceId",
      "in": "query",
      "description": "Return faceIds of the detected faces or not. The default value is true.",
      "required": false,
      "type": "boolean",
      "x-ms-parameter-location": "method"
    },
    "FaceDetectionOptions.returnFaceLandmarks": {
      "name": "returnFaceLandmarks",
      "in": "query",
      "description": "Return face landmarks of the detected faces or not. The default value is false.",
      "required": false,
      "type": "boolean",
      "x-ms-parameter-location": "method"
    },
    "FaceDetectionOptions.returnRecognitionModel": {
      "name": "returnRecognitionModel",
      "in": "query",
      "description": "Return 'recognitionModel' or not. The default value is false.",
      "required": false,
      "type": "boolean",
      "x-ms-parameter-location": "method"
    },
    "ListRequestOptions.start": {
      "name": "start",
      "in": "query",
      "description": "List resources greater than the \"start\". It contains no more than 64 characters. Default is empty.",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "ListRequestOptions.top": {
      "name": "top",
      "in": "query",
      "description": "The number of items to list, ranging in [1, 1000]. Default is 1000.",
      "required": false,
      "type": "integer",
      "format": "int32",
      "x-ms-parameter-location": "method"
    },
    "LivenessSessionWithVerifyImageCreationContent.Parameters": {
      "name": "Parameters",
      "in": "formData",
      "description": "The parameters for creating session.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "LivenessSessionWithVerifyImageCreationContent.VerifyImage": {
      "name": "VerifyImage",
      "in": "formData",
      "description": "The image stream for verify.",
      "required": true,
      "type": "file",
      "x-ms-parameter-location": "method"
    },
    "ReturnRecognitionModelOptions": {
      "name": "returnRecognitionModel",
      "in": "query",
      "description": "Return 'recognitionModel' or not. The default value is false.",
      "required": false,
      "type": "boolean",
      "x-ms-parameter-location": "method"
    }
  }
}
