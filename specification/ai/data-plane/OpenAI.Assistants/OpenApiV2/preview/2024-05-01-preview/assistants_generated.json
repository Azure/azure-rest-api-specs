{
  "swagger": "2.0",
  "info": {
    "title": "Azure OpenAI",
    "version": "2024-05-01-preview",
    "description": "Azure OpenAI APIs for Assistants.",
    "x-typespec-generated": [
      {
        "emitter": "@azure-tools/typespec-autorest"
      }
    ]
  },
  "schemes": [
    "https"
  ],
  "x-ms-parameterized-host": {
    "hostTemplate": "{endpoint}",
    "useSchemePrefix": false,
    "parameters": [
      {
        "name": "endpoint",
        "in": "path",
        "description": "An OpenAI endpoint supporting assistants functionality.",
        "required": true,
        "type": "string"
      }
    ]
  },
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "security": [
    {
      "ApiKeyAuth": []
    },
    {
      "OAuth2Auth": [
        "https://cognitiveservices.azure.com/.default"
      ]
    }
  ],
  "securityDefinitions": {
    "ApiKeyAuth": {
      "type": "apiKey",
      "name": "api-key",
      "in": "header"
    },
    "OAuth2Auth": {
      "type": "oauth2",
      "flow": "implicit",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/v2.0/authorize",
      "scopes": {
        "https://cognitiveservices.azure.com/.default": ""
      }
    }
  },
  "tags": [],
  "paths": {
    "/assistants": {
      "get": {
        "operationId": "ListAssistants",
        "description": "Gets a list of assistants that were previously created.",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 20
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order.",
            "required": false,
            "type": "string",
            "default": "desc",
            "enum": [
              "asc",
              "desc"
            ],
            "x-ms-enum": {
              "name": "ListSortOrder",
              "modelAsString": true,
              "values": [
                {
                  "name": "ascending",
                  "value": "asc",
                  "description": "Specifies an ascending sort order."
                },
                {
                  "name": "descending",
                  "value": "desc",
                  "description": "Specifies a descending sort order."
                }
              ]
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.",
            "required": false,
            "type": "string"
          },
          {
            "name": "before",
            "in": "query",
            "description": "A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested list of assistants.",
            "schema": {
              "type": "object",
              "description": "The response data for a requested list of items.",
              "properties": {
                "object": {
                  "type": "string",
                  "description": "The object type, which is always list.",
                  "enum": [
                    "list"
                  ],
                  "x-ms-enum": {
                    "modelAsString": false
                  }
                },
                "data": {
                  "type": "array",
                  "description": "The requested list of items.",
                  "items": {
                    "$ref": "#/definitions/Assistant"
                  }
                },
                "first_id": {
                  "type": "string",
                  "description": "The first ID represented in this list.",
                  "x-ms-client-name": "firstId"
                },
                "last_id": {
                  "type": "string",
                  "description": "The last ID represented in this list.",
                  "x-ms-client-name": "lastId"
                },
                "has_more": {
                  "type": "boolean",
                  "description": "A value indicating whether there are additional values available not captured in this list.",
                  "x-ms-client-name": "hasMore"
                }
              },
              "required": [
                "object",
                "data",
                "first_id",
                "last_id",
                "has_more"
              ]
            }
          }
        }
      },
      "post": {
        "operationId": "CreateAssistant",
        "description": "Creates a new assistant.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AssistantCreationOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The new assistant instance.",
            "schema": {
              "$ref": "#/definitions/Assistant"
            }
          }
        }
      }
    },
    "/assistants/{assistantId}": {
      "get": {
        "operationId": "GetAssistant",
        "description": "Retrieves an existing assistant.",
        "parameters": [
          {
            "name": "assistantId",
            "in": "path",
            "description": "The ID of the assistant to retrieve.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested assistant instance.",
            "schema": {
              "$ref": "#/definitions/Assistant"
            }
          }
        }
      },
      "post": {
        "operationId": "UpdateAssistant",
        "description": "Modifies an existing assistant.",
        "parameters": [
          {
            "$ref": "#/parameters/UpdateAssistantOptions.assistantId"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateAssistantOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated assistant instance.",
            "schema": {
              "$ref": "#/definitions/Assistant"
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteAssistant",
        "description": "Deletes an assistant.",
        "parameters": [
          {
            "name": "assistantId",
            "in": "path",
            "description": "The ID of the assistant to delete.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Status information about the requested deletion operation.",
            "schema": {
              "$ref": "#/definitions/AssistantDeletionStatus"
            }
          }
        }
      }
    },
    "/files": {
      "get": {
        "operationId": "ListFiles",
        "description": "Gets a list of previously uploaded files.",
        "parameters": [
          {
            "name": "purpose",
            "in": "query",
            "description": "A value that, when provided, limits list results to files matching the corresponding purpose.",
            "required": false,
            "type": "string",
            "enum": [
              "fine-tune",
              "fine-tune-results",
              "assistants",
              "assistants_output",
              "batch",
              "batch_output",
              "vision"
            ],
            "x-ms-enum": {
              "name": "FilePurpose",
              "modelAsString": true,
              "values": [
                {
                  "name": "fineTune",
                  "value": "fine-tune",
                  "description": "Indicates a file is used for fine tuning input."
                },
                {
                  "name": "fineTuneResults",
                  "value": "fine-tune-results",
                  "description": "Indicates a file is used for fine tuning results."
                },
                {
                  "name": "assistants",
                  "value": "assistants",
                  "description": "Indicates a file is used as input to assistants."
                },
                {
                  "name": "assistantsOutput",
                  "value": "assistants_output",
                  "description": "Indicates a file is used as output by assistants."
                },
                {
                  "name": "batch",
                  "value": "batch",
                  "description": "Indicates a file is used as input to ."
                },
                {
                  "name": "batchOutput",
                  "value": "batch_output",
                  "description": "Indicates a file is used as output by a vector store batch operation."
                },
                {
                  "name": "vision",
                  "value": "vision",
                  "description": "Indicates a file is used as input to a vision operation."
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested list of files.",
            "schema": {
              "$ref": "#/definitions/FileListResponse"
            }
          }
        }
      },
      "post": {
        "operationId": "UploadFile",
        "description": "Uploads a file for use by other operations.",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "description": "The file data (not filename) to upload.",
            "required": true,
            "type": "file"
          },
          {
            "name": "purpose",
            "in": "formData",
            "description": "The intended purpose of the file.",
            "required": true,
            "type": "string",
            "enum": [
              "fine-tune",
              "fine-tune-results",
              "assistants",
              "assistants_output",
              "batch",
              "batch_output",
              "vision"
            ],
            "x-ms-enum": {
              "name": "FilePurpose",
              "modelAsString": true,
              "values": [
                {
                  "name": "fineTune",
                  "value": "fine-tune",
                  "description": "Indicates a file is used for fine tuning input."
                },
                {
                  "name": "fineTuneResults",
                  "value": "fine-tune-results",
                  "description": "Indicates a file is used for fine tuning results."
                },
                {
                  "name": "assistants",
                  "value": "assistants",
                  "description": "Indicates a file is used as input to assistants."
                },
                {
                  "name": "assistantsOutput",
                  "value": "assistants_output",
                  "description": "Indicates a file is used as output by assistants."
                },
                {
                  "name": "batch",
                  "value": "batch",
                  "description": "Indicates a file is used as input to ."
                },
                {
                  "name": "batchOutput",
                  "value": "batch_output",
                  "description": "Indicates a file is used as output by a vector store batch operation."
                },
                {
                  "name": "vision",
                  "value": "vision",
                  "description": "Indicates a file is used as input to a vision operation."
                }
              ]
            }
          },
          {
            "name": "filename",
            "in": "formData",
            "description": "A filename to associate with the uploaded data.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A representation of the uploaded file.",
            "schema": {
              "$ref": "#/definitions/OpenAIFile"
            }
          }
        }
      }
    },
    "/files/{fileId}": {
      "get": {
        "operationId": "GetFile",
        "description": "Returns information about a specific file. Does not retrieve file content.",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "The ID of the file to retrieve.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/OpenAIFile"
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteFile",
        "description": "Delete a previously uploaded file.",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "The ID of the file to delete.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/FileDeletionStatus"
            }
          }
        }
      }
    },
    "/files/{fileId}/content": {
      "get": {
        "operationId": "GetFileContent",
        "description": "Returns information about a specific file. Does not retrieve file content.",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "The ID of the file to retrieve.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          }
        }
      }
    },
    "/threads": {
      "post": {
        "operationId": "CreateThread",
        "description": "Creates a new thread. Threads contain messages and can be run by assistants.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AssistantThreadCreationOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Information about the newly created thread.",
            "schema": {
              "$ref": "#/definitions/AssistantThread"
            }
          }
        }
      }
    },
    "/threads/{threadId}": {
      "get": {
        "operationId": "GetThread",
        "description": "Gets information about an existing thread.",
        "parameters": [
          {
            "name": "threadId",
            "in": "path",
            "description": "The ID of the thread to retrieve information about.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Information about the requested thread.",
            "schema": {
              "$ref": "#/definitions/AssistantThread"
            }
          }
        }
      },
      "post": {
        "operationId": "UpdateThread",
        "description": "Modifies an existing thread.",
        "parameters": [
          {
            "$ref": "#/parameters/UpdateAssistantThreadOptions.threadId"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateAssistantThreadOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Information about the modified thread.",
            "schema": {
              "$ref": "#/definitions/AssistantThread"
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteThread",
        "description": "Deletes an existing thread.",
        "parameters": [
          {
            "name": "threadId",
            "in": "path",
            "description": "The ID of the thread to delete.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Status information about the requested thread deletion operation.",
            "schema": {
              "$ref": "#/definitions/ThreadDeletionStatus"
            }
          }
        }
      }
    },
    "/threads/{threadId}/messages": {
      "get": {
        "operationId": "ListMessages",
        "description": "Gets a list of messages that exist on a thread.",
        "parameters": [
          {
            "name": "threadId",
            "in": "path",
            "description": "The ID of the thread to list messages from.",
            "required": true,
            "type": "string"
          },
          {
            "name": "runId",
            "in": "query",
            "description": "Filter messages by the run ID that generated them.",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 20
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order.",
            "required": false,
            "type": "string",
            "default": "desc",
            "enum": [
              "asc",
              "desc"
            ],
            "x-ms-enum": {
              "name": "ListSortOrder",
              "modelAsString": true,
              "values": [
                {
                  "name": "ascending",
                  "value": "asc",
                  "description": "Specifies an ascending sort order."
                },
                {
                  "name": "descending",
                  "value": "desc",
                  "description": "Specifies a descending sort order."
                }
              ]
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.",
            "required": false,
            "type": "string"
          },
          {
            "name": "before",
            "in": "query",
            "description": "A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested list of messages.",
            "schema": {
              "type": "object",
              "description": "The response data for a requested list of items.",
              "properties": {
                "object": {
                  "type": "string",
                  "description": "The object type, which is always list.",
                  "enum": [
                    "list"
                  ],
                  "x-ms-enum": {
                    "modelAsString": false
                  }
                },
                "data": {
                  "type": "array",
                  "description": "The requested list of items.",
                  "items": {
                    "$ref": "#/definitions/ThreadMessage"
                  }
                },
                "first_id": {
                  "type": "string",
                  "description": "The first ID represented in this list.",
                  "x-ms-client-name": "firstId"
                },
                "last_id": {
                  "type": "string",
                  "description": "The last ID represented in this list.",
                  "x-ms-client-name": "lastId"
                },
                "has_more": {
                  "type": "boolean",
                  "description": "A value indicating whether there are additional values available not captured in this list.",
                  "x-ms-client-name": "hasMore"
                }
              },
              "required": [
                "object",
                "data",
                "first_id",
                "last_id",
                "has_more"
              ]
            }
          }
        }
      },
      "post": {
        "operationId": "CreateMessage",
        "description": "Creates a new message on a specified thread.",
        "parameters": [
          {
            "name": "threadId",
            "in": "path",
            "description": "The ID of the thread to create the new message on.",
            "required": true,
            "type": "string"
          },
          {
            "name": "threadMessageOptions",
            "in": "body",
            "description": "A single message within an assistant thread, as provided during that thread's creation for its initial state.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ThreadMessageOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A representation of the new message.",
            "schema": {
              "$ref": "#/definitions/ThreadMessage"
            }
          }
        }
      }
    },
    "/threads/{threadId}/messages/{messageId}": {
      "get": {
        "operationId": "GetMessage",
        "description": "Gets an existing message from an existing thread.",
        "parameters": [
          {
            "name": "threadId",
            "in": "path",
            "description": "The ID of the thread to retrieve the specified message from.",
            "required": true,
            "type": "string"
          },
          {
            "name": "messageId",
            "in": "path",
            "description": "The ID of the message to retrieve from the specified thread.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A representation of the requested message.",
            "schema": {
              "$ref": "#/definitions/ThreadMessage"
            }
          }
        }
      },
      "post": {
        "operationId": "UpdateMessage",
        "description": "Modifies an existing message on an existing thread.",
        "parameters": [
          {
            "name": "threadId",
            "in": "path",
            "description": "The ID of the thread containing the specified message to modify.",
            "required": true,
            "type": "string"
          },
          {
            "name": "messageId",
            "in": "path",
            "description": "The ID of the message to modify on the specified thread.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "metadata": {
                  "type": "object",
                  "description": "A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length.",
                  "x-nullable": true,
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A representation of the modified message.",
            "schema": {
              "$ref": "#/definitions/ThreadMessage"
            }
          }
        }
      }
    },
    "/threads/{threadId}/runs": {
      "get": {
        "operationId": "ListRuns",
        "description": "Gets a list of runs for a specified thread.",
        "parameters": [
          {
            "name": "threadId",
            "in": "path",
            "description": "The ID of the thread to list runs from.",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 20
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order.",
            "required": false,
            "type": "string",
            "default": "desc",
            "enum": [
              "asc",
              "desc"
            ],
            "x-ms-enum": {
              "name": "ListSortOrder",
              "modelAsString": true,
              "values": [
                {
                  "name": "ascending",
                  "value": "asc",
                  "description": "Specifies an ascending sort order."
                },
                {
                  "name": "descending",
                  "value": "desc",
                  "description": "Specifies a descending sort order."
                }
              ]
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.",
            "required": false,
            "type": "string"
          },
          {
            "name": "before",
            "in": "query",
            "description": "A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested list of thread runs.",
            "schema": {
              "type": "object",
              "description": "The response data for a requested list of items.",
              "properties": {
                "object": {
                  "type": "string",
                  "description": "The object type, which is always list.",
                  "enum": [
                    "list"
                  ],
                  "x-ms-enum": {
                    "modelAsString": false
                  }
                },
                "data": {
                  "type": "array",
                  "description": "The requested list of items.",
                  "items": {
                    "$ref": "#/definitions/ThreadRun"
                  }
                },
                "first_id": {
                  "type": "string",
                  "description": "The first ID represented in this list.",
                  "x-ms-client-name": "firstId"
                },
                "last_id": {
                  "type": "string",
                  "description": "The last ID represented in this list.",
                  "x-ms-client-name": "lastId"
                },
                "has_more": {
                  "type": "boolean",
                  "description": "A value indicating whether there are additional values available not captured in this list.",
                  "x-ms-client-name": "hasMore"
                }
              },
              "required": [
                "object",
                "data",
                "first_id",
                "last_id",
                "has_more"
              ]
            }
          }
        }
      },
      "post": {
        "operationId": "CreateRun",
        "description": "Creates a new run for an assistant thread.",
        "parameters": [
          {
            "name": "threadId",
            "in": "path",
            "description": "The ID of the thread to run.",
            "required": true,
            "type": "string"
          },
          {
            "name": "createRunOptions",
            "in": "body",
            "description": "The details for the run to create.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateRunOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Information about the new thread run.",
            "schema": {
              "$ref": "#/definitions/ThreadRun"
            }
          }
        }
      }
    },
    "/threads/{threadId}/runs/{runId}": {
      "get": {
        "operationId": "GetRun",
        "description": "Gets an existing run from an existing thread.",
        "parameters": [
          {
            "name": "threadId",
            "in": "path",
            "description": "The ID of the thread to retrieve run information from.",
            "required": true,
            "type": "string"
          },
          {
            "name": "runId",
            "in": "path",
            "description": "The ID of the thread to retrieve information about.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested information about the specified thread run.",
            "schema": {
              "$ref": "#/definitions/ThreadRun"
            }
          }
        }
      },
      "post": {
        "operationId": "UpdateRun",
        "description": "Modifies an existing thread run.",
        "parameters": [
          {
            "name": "threadId",
            "in": "path",
            "description": "The ID of the thread associated with the specified run.",
            "required": true,
            "type": "string"
          },
          {
            "name": "runId",
            "in": "path",
            "description": "The ID of the run to modify.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "metadata": {
                  "type": "object",
                  "description": "A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length.",
                  "x-nullable": true,
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Information about the modified run.",
            "schema": {
              "$ref": "#/definitions/ThreadRun"
            }
          }
        }
      }
    },
    "/threads/{threadId}/runs/{runId}/cancel": {
      "post": {
        "operationId": "CancelRun",
        "description": "Cancels a run of an in progress thread.",
        "parameters": [
          {
            "name": "threadId",
            "in": "path",
            "description": "The ID of the thread being run.",
            "required": true,
            "type": "string"
          },
          {
            "name": "runId",
            "in": "path",
            "description": "The ID of the run to cancel.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated information about the cancelled run.",
            "schema": {
              "$ref": "#/definitions/ThreadRun"
            }
          }
        }
      }
    },
    "/threads/{threadId}/runs/{runId}/steps": {
      "get": {
        "operationId": "ListRunSteps",
        "description": "Gets a list of run steps from a thread run.",
        "parameters": [
          {
            "name": "threadId",
            "in": "path",
            "description": "The ID of the thread that was run.",
            "required": true,
            "type": "string"
          },
          {
            "name": "runId",
            "in": "path",
            "description": "The ID of the run to list steps from.",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 20
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order.",
            "required": false,
            "type": "string",
            "default": "desc",
            "enum": [
              "asc",
              "desc"
            ],
            "x-ms-enum": {
              "name": "ListSortOrder",
              "modelAsString": true,
              "values": [
                {
                  "name": "ascending",
                  "value": "asc",
                  "description": "Specifies an ascending sort order."
                },
                {
                  "name": "descending",
                  "value": "desc",
                  "description": "Specifies a descending sort order."
                }
              ]
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.",
            "required": false,
            "type": "string"
          },
          {
            "name": "before",
            "in": "query",
            "description": "A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested list of run steps.",
            "schema": {
              "type": "object",
              "description": "The response data for a requested list of items.",
              "properties": {
                "object": {
                  "type": "string",
                  "description": "The object type, which is always list.",
                  "enum": [
                    "list"
                  ],
                  "x-ms-enum": {
                    "modelAsString": false
                  }
                },
                "data": {
                  "type": "array",
                  "description": "The requested list of items.",
                  "items": {
                    "$ref": "#/definitions/RunStep"
                  }
                },
                "first_id": {
                  "type": "string",
                  "description": "The first ID represented in this list.",
                  "x-ms-client-name": "firstId"
                },
                "last_id": {
                  "type": "string",
                  "description": "The last ID represented in this list.",
                  "x-ms-client-name": "lastId"
                },
                "has_more": {
                  "type": "boolean",
                  "description": "A value indicating whether there are additional values available not captured in this list.",
                  "x-ms-client-name": "hasMore"
                }
              },
              "required": [
                "object",
                "data",
                "first_id",
                "last_id",
                "has_more"
              ]
            }
          }
        }
      }
    },
    "/threads/{threadId}/runs/{runId}/steps/{stepId}": {
      "get": {
        "operationId": "GetRunStep",
        "description": "Gets a single run step from a thread run.",
        "parameters": [
          {
            "name": "threadId",
            "in": "path",
            "description": "The ID of the thread that was run.",
            "required": true,
            "type": "string"
          },
          {
            "name": "runId",
            "in": "path",
            "description": "The ID of the specific run to retrieve the step from.",
            "required": true,
            "type": "string"
          },
          {
            "name": "stepId",
            "in": "path",
            "description": "The ID of the step to retrieve information about.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Information about the requested run step.",
            "schema": {
              "$ref": "#/definitions/RunStep"
            }
          }
        }
      }
    },
    "/threads/{threadId}/runs/{runId}/submit_tool_outputs": {
      "post": {
        "operationId": "SubmitToolOutputsToRun",
        "description": "Submits outputs from tools as requested by tool calls in a run. Runs that need submitted tool outputs will have a status of 'requires_action' with a required_action.type of 'submit_tool_outputs'.",
        "parameters": [
          {
            "name": "threadId",
            "in": "path",
            "description": "The ID of the thread that was run.",
            "required": true,
            "type": "string"
          },
          {
            "name": "runId",
            "in": "path",
            "description": "The ID of the run that requires tool outputs.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "tool_outputs": {
                  "type": "array",
                  "description": "A list of tools for which the outputs are being submitted.",
                  "items": {
                    "$ref": "#/definitions/ToolOutput"
                  },
                  "x-ms-client-name": "toolOutputs",
                  "x-ms-identifiers": []
                },
                "stream": {
                  "type": "boolean",
                  "description": "If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.",
                  "x-nullable": true
                }
              },
              "required": [
                "tool_outputs"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated information about the run.",
            "schema": {
              "$ref": "#/definitions/ThreadRun"
            }
          }
        }
      }
    },
    "/threads/runs": {
      "post": {
        "operationId": "CreateThreadAndRun",
        "description": "Creates a new assistant thread and immediately starts a run using that new thread.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateAndRunThreadOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Information about the newly created thread.",
            "schema": {
              "$ref": "#/definitions/ThreadRun"
            }
          }
        }
      }
    },
    "/vector_stores": {
      "get": {
        "operationId": "ListVectorStores",
        "description": "Returns a list of vector stores.",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 20
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order.",
            "required": false,
            "type": "string",
            "default": "desc",
            "enum": [
              "asc",
              "desc"
            ],
            "x-ms-enum": {
              "name": "ListSortOrder",
              "modelAsString": true,
              "values": [
                {
                  "name": "ascending",
                  "value": "asc",
                  "description": "Specifies an ascending sort order."
                },
                {
                  "name": "descending",
                  "value": "desc",
                  "description": "Specifies a descending sort order."
                }
              ]
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.",
            "required": false,
            "type": "string"
          },
          {
            "name": "before",
            "in": "query",
            "description": "A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "object",
              "description": "The response data for a requested list of items.",
              "properties": {
                "object": {
                  "type": "string",
                  "description": "The object type, which is always list.",
                  "enum": [
                    "list"
                  ],
                  "x-ms-enum": {
                    "modelAsString": false
                  }
                },
                "data": {
                  "type": "array",
                  "description": "The requested list of items.",
                  "items": {
                    "$ref": "#/definitions/VectorStore"
                  }
                },
                "first_id": {
                  "type": "string",
                  "description": "The first ID represented in this list.",
                  "x-ms-client-name": "firstId"
                },
                "last_id": {
                  "type": "string",
                  "description": "The last ID represented in this list.",
                  "x-ms-client-name": "lastId"
                },
                "has_more": {
                  "type": "boolean",
                  "description": "A value indicating whether there are additional values available not captured in this list.",
                  "x-ms-client-name": "hasMore"
                }
              },
              "required": [
                "object",
                "data",
                "first_id",
                "last_id",
                "has_more"
              ]
            }
          }
        }
      },
      "post": {
        "operationId": "CreateVectorStore",
        "description": "Creates a vector store.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VectorStoreOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/VectorStore"
            }
          }
        }
      }
    },
    "/vector_stores/{vectorStoreId}": {
      "get": {
        "operationId": "GetVectorStore",
        "description": "Returns the vector store object matching the specified ID.",
        "parameters": [
          {
            "name": "vectorStoreId",
            "in": "path",
            "description": "The ID of the vector store to retrieve.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/VectorStore"
            }
          }
        }
      },
      "post": {
        "operationId": "ModifyVectorStore",
        "description": "The ID of the vector store to modify.",
        "parameters": [
          {
            "name": "vectorStoreId",
            "in": "path",
            "description": "The ID of the vector store to modify.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VectorStoreUpdateOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/VectorStore"
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteVectorStore",
        "description": "Deletes the vector store object matching the specified ID.",
        "parameters": [
          {
            "name": "vectorStoreId",
            "in": "path",
            "description": "The ID of the vector store to delete.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/VectorStoreDeletionStatus"
            }
          }
        }
      }
    },
    "/vector_stores/{vectorStoreId}/file_batches": {
      "post": {
        "operationId": "CreateVectorStoreFileBatch",
        "description": "Create a vector store file batch.",
        "parameters": [
          {
            "name": "vectorStoreId",
            "in": "path",
            "description": "The ID of the vector store for which to create a File Batch.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "file_ids": {
                  "type": "array",
                  "description": "A list of File IDs that the vector store should use. Useful for tools like `file_search` that can access files.",
                  "minItems": 1,
                  "maxItems": 500,
                  "items": {
                    "type": "string"
                  },
                  "x-ms-client-name": "fileIds"
                }
              },
              "required": [
                "file_ids"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/VectorStoreFileBatch"
            }
          }
        }
      }
    },
    "/vector_stores/{vectorStoreId}/file_batches/{batchId}": {
      "get": {
        "operationId": "GetVectorStoreFileBatch",
        "description": "Retrieve a vector store file batch.",
        "parameters": [
          {
            "name": "vectorStoreId",
            "in": "path",
            "description": "The ID of the vector store that the file batch belongs to.",
            "required": true,
            "type": "string"
          },
          {
            "name": "batchId",
            "in": "path",
            "description": "The ID of the file batch being retrieved.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/VectorStoreFileBatch"
            }
          }
        }
      }
    },
    "/vector_stores/{vectorStoreId}/file_batches/{batchId}/cancel": {
      "post": {
        "operationId": "CancelVectorStoreFileBatch",
        "description": "Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible.",
        "parameters": [
          {
            "name": "vectorStoreId",
            "in": "path",
            "description": "The ID of the vector store that the file batch belongs to.",
            "required": true,
            "type": "string"
          },
          {
            "name": "batchId",
            "in": "path",
            "description": "The ID of the file batch to cancel.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/VectorStoreFileBatch"
            }
          }
        }
      }
    },
    "/vector_stores/{vectorStoreId}/file_batches/{batchId}/files": {
      "get": {
        "operationId": "ListVectorStoreFileBatchFiles",
        "description": "Returns a list of vector store files in a batch.",
        "parameters": [
          {
            "name": "vectorStoreId",
            "in": "path",
            "description": "The ID of the vector store that the file batch belongs to.",
            "required": true,
            "type": "string"
          },
          {
            "name": "batchId",
            "in": "path",
            "description": "The ID of the file batch that the files belong to.",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filter by file status.",
            "required": false,
            "type": "string",
            "enum": [
              "in_progress",
              "completed",
              "failed",
              "cancelled"
            ],
            "x-ms-enum": {
              "name": "VectorStoreFileStatusFilter",
              "modelAsString": true,
              "values": [
                {
                  "name": "inProgress",
                  "value": "in_progress",
                  "description": "Retrieve only files that are currently being processed"
                },
                {
                  "name": "completed",
                  "value": "completed",
                  "description": "Retrieve only files that have been successfully processed"
                },
                {
                  "name": "failed",
                  "value": "failed",
                  "description": "Retrieve only files that have failed to process"
                },
                {
                  "name": "cancelled",
                  "value": "cancelled",
                  "description": "Retrieve only files that were cancelled"
                }
              ]
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 20
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order.",
            "required": false,
            "type": "string",
            "default": "desc",
            "enum": [
              "asc",
              "desc"
            ],
            "x-ms-enum": {
              "name": "ListSortOrder",
              "modelAsString": true,
              "values": [
                {
                  "name": "ascending",
                  "value": "asc",
                  "description": "Specifies an ascending sort order."
                },
                {
                  "name": "descending",
                  "value": "desc",
                  "description": "Specifies a descending sort order."
                }
              ]
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.",
            "required": false,
            "type": "string"
          },
          {
            "name": "before",
            "in": "query",
            "description": "A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "object",
              "description": "The response data for a requested list of items.",
              "properties": {
                "object": {
                  "type": "string",
                  "description": "The object type, which is always list.",
                  "enum": [
                    "list"
                  ],
                  "x-ms-enum": {
                    "modelAsString": false
                  }
                },
                "data": {
                  "type": "array",
                  "description": "The requested list of items.",
                  "items": {
                    "$ref": "#/definitions/VectorStoreFile"
                  }
                },
                "first_id": {
                  "type": "string",
                  "description": "The first ID represented in this list.",
                  "x-ms-client-name": "firstId"
                },
                "last_id": {
                  "type": "string",
                  "description": "The last ID represented in this list.",
                  "x-ms-client-name": "lastId"
                },
                "has_more": {
                  "type": "boolean",
                  "description": "A value indicating whether there are additional values available not captured in this list.",
                  "x-ms-client-name": "hasMore"
                }
              },
              "required": [
                "object",
                "data",
                "first_id",
                "last_id",
                "has_more"
              ]
            }
          }
        }
      }
    },
    "/vector_stores/{vectorStoreId}/files": {
      "get": {
        "operationId": "ListVectorStoreFiles",
        "description": "Returns a list of vector store files.",
        "parameters": [
          {
            "name": "vectorStoreId",
            "in": "path",
            "description": "The ID of the vector store that the files belong to.",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filter by file status.",
            "required": false,
            "type": "string",
            "enum": [
              "in_progress",
              "completed",
              "failed",
              "cancelled"
            ],
            "x-ms-enum": {
              "name": "VectorStoreFileStatusFilter",
              "modelAsString": true,
              "values": [
                {
                  "name": "inProgress",
                  "value": "in_progress",
                  "description": "Retrieve only files that are currently being processed"
                },
                {
                  "name": "completed",
                  "value": "completed",
                  "description": "Retrieve only files that have been successfully processed"
                },
                {
                  "name": "failed",
                  "value": "failed",
                  "description": "Retrieve only files that have failed to process"
                },
                {
                  "name": "cancelled",
                  "value": "cancelled",
                  "description": "Retrieve only files that were cancelled"
                }
              ]
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 20
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order.",
            "required": false,
            "type": "string",
            "default": "desc",
            "enum": [
              "asc",
              "desc"
            ],
            "x-ms-enum": {
              "name": "ListSortOrder",
              "modelAsString": true,
              "values": [
                {
                  "name": "ascending",
                  "value": "asc",
                  "description": "Specifies an ascending sort order."
                },
                {
                  "name": "descending",
                  "value": "desc",
                  "description": "Specifies a descending sort order."
                }
              ]
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.",
            "required": false,
            "type": "string"
          },
          {
            "name": "before",
            "in": "query",
            "description": "A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "object",
              "description": "The response data for a requested list of items.",
              "properties": {
                "object": {
                  "type": "string",
                  "description": "The object type, which is always list.",
                  "enum": [
                    "list"
                  ],
                  "x-ms-enum": {
                    "modelAsString": false
                  }
                },
                "data": {
                  "type": "array",
                  "description": "The requested list of items.",
                  "items": {
                    "$ref": "#/definitions/VectorStoreFile"
                  }
                },
                "first_id": {
                  "type": "string",
                  "description": "The first ID represented in this list.",
                  "x-ms-client-name": "firstId"
                },
                "last_id": {
                  "type": "string",
                  "description": "The last ID represented in this list.",
                  "x-ms-client-name": "lastId"
                },
                "has_more": {
                  "type": "boolean",
                  "description": "A value indicating whether there are additional values available not captured in this list.",
                  "x-ms-client-name": "hasMore"
                }
              },
              "required": [
                "object",
                "data",
                "first_id",
                "last_id",
                "has_more"
              ]
            }
          }
        }
      },
      "post": {
        "operationId": "CreateVectorStoreFile",
        "description": "Create a vector store file by attaching a file to a vector store.",
        "parameters": [
          {
            "name": "vectorStoreId",
            "in": "path",
            "description": "The ID of the vector store for which to create a File.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "file_id": {
                  "type": "string",
                  "description": "A File ID that the vector store should use. Useful for tools like `file_search` that can access files.",
                  "x-ms-client-name": "fileId"
                }
              },
              "required": [
                "file_id"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/VectorStoreFile"
            }
          }
        }
      }
    },
    "/vector_stores/{vectorStoreId}/files/{fileId}": {
      "get": {
        "operationId": "GetVectorStoreFile",
        "description": "Retrieves a vector store file.",
        "parameters": [
          {
            "name": "vectorStoreId",
            "in": "path",
            "description": "The ID of the vector store that the file belongs to.",
            "required": true,
            "type": "string"
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The ID of the file being retrieved.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/VectorStoreFile"
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteVectorStoreFile",
        "description": "Delete a vector store file. This will remove the file from the vector store but the file itself will not be deleted.\nTo delete the file, use the delete file endpoint.",
        "parameters": [
          {
            "name": "vectorStoreId",
            "in": "path",
            "description": "The ID of the vector store that the file belongs to.",
            "required": true,
            "type": "string"
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The ID of the file to delete its relationship to the vector store.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/VectorStoreFileDeletionStatus"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Assistant": {
      "type": "object",
      "description": "Represents an assistant that can call the model and use tools.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The identifier, which can be referenced in API endpoints."
        },
        "object": {
          "type": "string",
          "description": "The object type, which is always assistant.",
          "enum": [
            "assistant"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        },
        "created_at": {
          "type": "integer",
          "format": "unixtime",
          "description": "The Unix timestamp, in seconds, representing when this object was created.",
          "x-ms-client-name": "createdAt"
        },
        "name": {
          "type": "string",
          "description": "The name of the assistant.",
          "x-nullable": true
        },
        "description": {
          "type": "string",
          "description": "The description of the assistant.",
          "x-nullable": true
        },
        "model": {
          "type": "string",
          "description": "The ID of the model to use."
        },
        "instructions": {
          "type": "string",
          "description": "The system instructions for the assistant to use.",
          "x-nullable": true
        },
        "tools": {
          "type": "array",
          "description": "The collection of tools enabled for the assistant.",
          "default": [],
          "items": {
            "$ref": "#/definitions/ToolDefinition"
          },
          "x-ms-identifiers": []
        },
        "tool_resources": {
          "type": "object",
          "description": "A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter`\ntool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.",
          "x-nullable": true,
          "allOf": [
            {
              "$ref": "#/definitions/ToolResources"
            }
          ],
          "x-ms-client-name": "toolResources"
        },
        "temperature": {
          "type": "number",
          "format": "float",
          "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random,\nwhile lower values like 0.2 will make it more focused and deterministic.",
          "default": 1,
          "x-nullable": true
        },
        "top_p": {
          "type": "number",
          "format": "float",
          "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.\nSo 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or temperature but not both.",
          "default": 1,
          "x-nullable": true,
          "x-ms-client-name": "topP"
        },
        "response_format": {
          "$ref": "#/definitions/AssistantsApiResponseFormatOption",
          "description": "The response format of the tool calls used by this assistant.",
          "x-nullable": true,
          "x-ms-client-name": "responseFormat"
        },
        "metadata": {
          "type": "object",
          "description": "A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length.",
          "x-nullable": true,
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "object",
        "created_at",
        "name",
        "description",
        "model",
        "instructions",
        "tools",
        "tool_resources",
        "temperature",
        "top_p",
        "metadata"
      ]
    },
    "AssistantCreationOptions": {
      "type": "object",
      "description": "The request details to use when creating a new assistant.",
      "properties": {
        "model": {
          "type": "string",
          "description": "The ID of the model to use."
        },
        "name": {
          "type": "string",
          "description": "The name of the new assistant.",
          "x-nullable": true
        },
        "description": {
          "type": "string",
          "description": "The description of the new assistant.",
          "x-nullable": true
        },
        "instructions": {
          "type": "string",
          "description": "The system instructions for the new assistant to use.",
          "x-nullable": true
        },
        "tools": {
          "type": "array",
          "description": "The collection of tools to enable for the new assistant.",
          "default": [],
          "items": {
            "$ref": "#/definitions/ToolDefinition"
          },
          "x-ms-identifiers": []
        },
        "tool_resources": {
          "type": "object",
          "description": "A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter`\ntool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.",
          "x-nullable": true,
          "allOf": [
            {
              "$ref": "#/definitions/CreateToolResourcesOptions"
            }
          ],
          "x-ms-client-name": "toolResources"
        },
        "temperature": {
          "type": "number",
          "format": "float",
          "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random,\nwhile lower values like 0.2 will make it more focused and deterministic.",
          "default": 1,
          "x-nullable": true
        },
        "top_p": {
          "type": "number",
          "format": "float",
          "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.\nSo 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or temperature but not both.",
          "default": 1,
          "x-nullable": true,
          "x-ms-client-name": "topP"
        },
        "response_format": {
          "$ref": "#/definitions/AssistantsApiResponseFormatOption",
          "description": "The response format of the tool calls used by this assistant.",
          "x-nullable": true,
          "x-ms-client-name": "responseFormat"
        },
        "metadata": {
          "type": "object",
          "description": "A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length.",
          "x-nullable": true,
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "model"
      ]
    },
    "AssistantDeletionStatus": {
      "type": "object",
      "description": "The status of an assistant deletion operation.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the resource specified for deletion."
        },
        "deleted": {
          "type": "boolean",
          "description": "A value indicating whether deletion was successful."
        },
        "object": {
          "type": "string",
          "description": "The object type, which is always 'assistant.deleted'.",
          "enum": [
            "assistant.deleted"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        }
      },
      "required": [
        "id",
        "deleted",
        "object"
      ]
    },
    "AssistantThread": {
      "type": "object",
      "description": "Information about a single thread associated with an assistant.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The identifier, which can be referenced in API endpoints."
        },
        "object": {
          "type": "string",
          "description": "The object type, which is always 'thread'.",
          "enum": [
            "thread"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        },
        "created_at": {
          "type": "integer",
          "format": "unixtime",
          "description": "The Unix timestamp, in seconds, representing when this object was created.",
          "x-ms-client-name": "createdAt"
        },
        "tool_resources": {
          "type": "object",
          "description": "A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type\nof tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list\nof vector store IDs.",
          "x-nullable": true,
          "allOf": [
            {
              "$ref": "#/definitions/ToolResources"
            }
          ],
          "x-ms-client-name": "toolResources"
        },
        "metadata": {
          "type": "object",
          "description": "A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length.",
          "x-nullable": true,
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "object",
        "created_at",
        "tool_resources",
        "metadata"
      ]
    },
    "AssistantThreadCreationOptions": {
      "type": "object",
      "description": "The details used to create a new assistant thread.",
      "properties": {
        "messages": {
          "type": "array",
          "description": "The initial messages to associate with the new thread.",
          "items": {
            "$ref": "#/definitions/ThreadMessageOptions"
          },
          "x-ms-identifiers": []
        },
        "tool_resources": {
          "type": "object",
          "description": "A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the\ntype of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires\na list of vector store IDs.",
          "x-nullable": true,
          "allOf": [
            {
              "$ref": "#/definitions/CreateToolResourcesOptions"
            }
          ],
          "x-ms-client-name": "toolResources"
        },
        "metadata": {
          "type": "object",
          "description": "A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length.",
          "x-nullable": true,
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "AssistantsApiResponseFormatOption": {},
    "AssistantsApiToolChoiceOption": {},
    "CodeInterpreterToolDefinition": {
      "type": "object",
      "description": "The input definition information for a code interpreter tool as used to configure an assistant.",
      "allOf": [
        {
          "$ref": "#/definitions/ToolDefinition"
        }
      ],
      "x-ms-discriminator-value": "code_interpreter"
    },
    "CodeInterpreterToolResource": {
      "type": "object",
      "description": "A set of resources that are used by the `code_interpreter` tool.",
      "properties": {
        "file_ids": {
          "type": "array",
          "description": "A list of file IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files\nassociated with the tool.",
          "default": [],
          "maxItems": 20,
          "items": {
            "type": "string"
          },
          "x-ms-client-name": "fileIds"
        }
      },
      "required": [
        "file_ids"
      ]
    },
    "CreateAndRunThreadOptions": {
      "type": "object",
      "description": "The details used when creating and immediately running a new assistant thread.",
      "properties": {
        "assistant_id": {
          "type": "string",
          "description": "The ID of the assistant for which the thread should be created.",
          "x-ms-client-name": "assistantId"
        },
        "thread": {
          "$ref": "#/definitions/AssistantThreadCreationOptions",
          "description": "The details used to create the new thread. If no thread is provided, an empty one will be created."
        },
        "model": {
          "type": "string",
          "description": "The overridden model that the assistant should use to run the thread.",
          "x-nullable": true
        },
        "instructions": {
          "type": "string",
          "description": "The overridden system instructions the assistant should use to run the thread.",
          "x-nullable": true
        },
        "tools": {
          "type": "array",
          "description": "The overridden list of enabled tools the assistant should use to run the thread.",
          "x-nullable": true,
          "items": {
            "$ref": "#/definitions/ToolDefinition"
          },
          "x-ms-identifiers": []
        },
        "tool_resources": {
          "type": "object",
          "description": "Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.",
          "x-nullable": true,
          "allOf": [
            {
              "$ref": "#/definitions/UpdateToolResourcesOptions"
            }
          ],
          "x-ms-client-name": "toolResources"
        },
        "stream": {
          "type": "boolean",
          "description": "If `true`, returns a stream of events that happen during the Run as server-sent events,\nterminating when the Run enters a terminal state with a `data: [DONE]` message."
        },
        "temperature": {
          "type": "number",
          "format": "float",
          "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output\nmore random, while lower values like 0.2 will make it more focused and deterministic.",
          "default": 1,
          "x-nullable": true
        },
        "top_p": {
          "type": "number",
          "format": "float",
          "description": "An alternative to sampling with temperature, called nucleus sampling, where the model\nconsiders the results of the tokens with top_p probability mass. So 0.1 means only the tokens\ncomprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or temperature but not both.",
          "default": 1,
          "x-nullable": true,
          "x-ms-client-name": "topP"
        },
        "max_prompt_tokens": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only\nthe number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified,\nthe run will end with status `incomplete`. See `incomplete_details` for more info.",
          "x-nullable": true,
          "x-ms-client-name": "maxPromptTokens"
        },
        "max_completion_tokens": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only\nthe number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens\nspecified, the run will end with status `incomplete`. See `incomplete_details` for more info.",
          "x-nullable": true,
          "x-ms-client-name": "maxCompletionTokens"
        },
        "truncation_strategy": {
          "type": "object",
          "description": "The strategy to use for dropping messages as the context windows moves forward.",
          "x-nullable": true,
          "allOf": [
            {
              "$ref": "#/definitions/TruncationObject"
            }
          ],
          "x-ms-client-name": "truncationStrategy"
        },
        "tool_choice": {
          "$ref": "#/definitions/AssistantsApiToolChoiceOption",
          "description": "Controls whether or not and which tool is called by the model.",
          "x-nullable": true,
          "x-ms-client-name": "toolChoice"
        },
        "response_format": {
          "$ref": "#/definitions/AssistantsApiResponseFormatOption",
          "description": "Specifies the format that the model must output.",
          "x-nullable": true,
          "x-ms-client-name": "responseFormat"
        },
        "metadata": {
          "type": "object",
          "description": "A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length.",
          "x-nullable": true,
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "assistant_id"
      ]
    },
    "CreateCodeInterpreterToolResourceOptions": {
      "type": "object",
      "description": "A set of resources that will be used by the `code_interpreter` tool. Request object.",
      "properties": {
        "file_ids": {
          "type": "array",
          "description": "A list of file IDs made available to the `code_interpreter` tool.",
          "default": [],
          "maxItems": 20,
          "items": {
            "type": "string"
          },
          "x-ms-client-name": "fileIds"
        }
      }
    },
    "CreateFileSearchToolResourceOptions": {},
    "CreateRunOptions": {
      "type": "object",
      "description": "The details used when creating a new run of an assistant thread.",
      "properties": {
        "assistant_id": {
          "type": "string",
          "description": "The ID of the assistant that should run the thread.",
          "x-ms-client-name": "assistantId"
        },
        "model": {
          "type": "string",
          "description": "The overridden model name that the assistant should use to run the thread.",
          "x-nullable": true
        },
        "instructions": {
          "type": "string",
          "description": "The overridden system instructions that the assistant should use to run the thread.",
          "x-nullable": true
        },
        "additional_instructions": {
          "type": "string",
          "description": "Additional instructions to append at the end of the instructions for the run. This is useful for modifying the behavior\non a per-run basis without overriding other instructions.",
          "x-nullable": true,
          "x-ms-client-name": "additionalInstructions"
        },
        "additional_messages": {
          "type": "array",
          "description": "Adds additional messages to the thread before creating the run.",
          "x-nullable": true,
          "items": {
            "$ref": "#/definitions/ThreadMessage"
          },
          "x-ms-client-name": "additionalMessages"
        },
        "tools": {
          "type": "array",
          "description": "The overridden list of enabled tools that the assistant should use to run the thread.",
          "x-nullable": true,
          "items": {
            "$ref": "#/definitions/ToolDefinition"
          },
          "x-ms-identifiers": []
        },
        "stream": {
          "type": "boolean",
          "description": "If `true`, returns a stream of events that happen during the Run as server-sent events,\nterminating when the Run enters a terminal state with a `data: [DONE]` message."
        },
        "temperature": {
          "type": "number",
          "format": "float",
          "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output\nmore random, while lower values like 0.2 will make it more focused and deterministic.",
          "default": 1,
          "x-nullable": true
        },
        "top_p": {
          "type": "number",
          "format": "float",
          "description": "An alternative to sampling with temperature, called nucleus sampling, where the model\nconsiders the results of the tokens with top_p probability mass. So 0.1 means only the tokens\ncomprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or temperature but not both.",
          "default": 1,
          "x-nullable": true,
          "x-ms-client-name": "topP"
        },
        "max_prompt_tokens": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only\nthe number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified,\nthe run will end with status `incomplete`. See `incomplete_details` for more info.",
          "x-nullable": true,
          "x-ms-client-name": "maxPromptTokens"
        },
        "max_completion_tokens": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort\nto use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of\ncompletion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.",
          "x-nullable": true,
          "x-ms-client-name": "maxCompletionTokens"
        },
        "truncation_strategy": {
          "type": "object",
          "description": "The strategy to use for dropping messages as the context windows moves forward.",
          "x-nullable": true,
          "allOf": [
            {
              "$ref": "#/definitions/TruncationObject"
            }
          ],
          "x-ms-client-name": "truncationStrategy"
        },
        "tool_choice": {
          "$ref": "#/definitions/AssistantsApiToolChoiceOption",
          "description": "Controls whether or not and which tool is called by the model.",
          "x-nullable": true,
          "x-ms-client-name": "toolChoice"
        },
        "response_format": {
          "$ref": "#/definitions/AssistantsApiResponseFormatOption",
          "description": "Specifies the format that the model must output.",
          "x-nullable": true,
          "x-ms-client-name": "responseFormat"
        },
        "metadata": {
          "type": "object",
          "description": "A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length.",
          "x-nullable": true,
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "assistant_id"
      ]
    },
    "CreateToolResourcesOptions": {
      "type": "object",
      "description": "Request object. A set of resources that are used by the assistant's tools. The resources are specific to the\ntype of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search`\ntool requires a list of vector store IDs.",
      "properties": {
        "code_interpreter": {
          "$ref": "#/definitions/CreateCodeInterpreterToolResourceOptions",
          "description": "A list of file IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files\nassociated with the tool.",
          "x-ms-client-name": "codeInterpreter"
        },
        "file_search": {
          "$ref": "#/definitions/CreateFileSearchToolResourceOptions",
          "description": "A list of vector stores or their IDs made available to the `file_search` tool.",
          "x-ms-client-name": "fileSearch"
        }
      }
    },
    "FileDeletionStatus": {
      "type": "object",
      "description": "A status response from a file deletion operation.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the resource specified for deletion."
        },
        "deleted": {
          "type": "boolean",
          "description": "A value indicating whether deletion was successful."
        },
        "object": {
          "type": "string",
          "description": "The object type, which is always 'file'.",
          "enum": [
            "file"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        }
      },
      "required": [
        "id",
        "deleted",
        "object"
      ]
    },
    "FileListResponse": {
      "type": "object",
      "description": "The response data from a file list operation.",
      "properties": {
        "object": {
          "type": "string",
          "description": "The object type, which is always 'list'.",
          "enum": [
            "list"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        },
        "data": {
          "type": "array",
          "description": "The files returned for the request.",
          "items": {
            "$ref": "#/definitions/OpenAIFile"
          }
        }
      },
      "required": [
        "object",
        "data"
      ]
    },
    "FilePurpose": {
      "type": "string",
      "description": "The possible values denoting the intended usage of a file.",
      "enum": [
        "fine-tune",
        "fine-tune-results",
        "assistants",
        "assistants_output",
        "batch",
        "batch_output",
        "vision"
      ],
      "x-ms-enum": {
        "name": "FilePurpose",
        "modelAsString": true,
        "values": [
          {
            "name": "fineTune",
            "value": "fine-tune",
            "description": "Indicates a file is used for fine tuning input."
          },
          {
            "name": "fineTuneResults",
            "value": "fine-tune-results",
            "description": "Indicates a file is used for fine tuning results."
          },
          {
            "name": "assistants",
            "value": "assistants",
            "description": "Indicates a file is used as input to assistants."
          },
          {
            "name": "assistantsOutput",
            "value": "assistants_output",
            "description": "Indicates a file is used as output by assistants."
          },
          {
            "name": "batch",
            "value": "batch",
            "description": "Indicates a file is used as input to ."
          },
          {
            "name": "batchOutput",
            "value": "batch_output",
            "description": "Indicates a file is used as output by a vector store batch operation."
          },
          {
            "name": "vision",
            "value": "vision",
            "description": "Indicates a file is used as input to a vision operation."
          }
        ]
      }
    },
    "FileSearchToolDefinition": {
      "type": "object",
      "description": "The input definition information for a file search tool as used to configure an assistant.",
      "allOf": [
        {
          "$ref": "#/definitions/ToolDefinition"
        }
      ],
      "x-ms-discriminator-value": "file_search"
    },
    "FileSearchToolResource": {
      "type": "object",
      "description": "A set of resources that are used by the `file_search` tool.",
      "properties": {
        "vector_store_ids": {
          "type": "array",
          "description": "The ID of the vector store attached to this assistant. There can be a maximum of 1 vector\nstore attached to the assistant.",
          "maxItems": 1,
          "items": {
            "type": "string"
          },
          "x-ms-client-name": "vectorStoreIds"
        }
      }
    },
    "FileState": {
      "type": "string",
      "description": "The state of the file.",
      "enum": [
        "uploaded",
        "pending",
        "running",
        "processed",
        "error",
        "deleting",
        "deleted"
      ],
      "x-ms-enum": {
        "name": "FileState",
        "modelAsString": true,
        "values": [
          {
            "name": "uploaded",
            "value": "uploaded",
            "description": "The file has been uploaded but it's not yet processed. This state is not returned by Azure OpenAI and exposed only for\ncompatibility. It can be categorized as an inactive state."
          },
          {
            "name": "pending",
            "value": "pending",
            "description": "The operation was created and is not queued to be processed in the future. It can be categorized as an inactive state."
          },
          {
            "name": "running",
            "value": "running",
            "description": "The operation has started to be processed. It can be categorized as an active state."
          },
          {
            "name": "processed",
            "value": "processed",
            "description": "The operation has successfully processed and is ready for consumption. It can be categorized as a terminal state."
          },
          {
            "name": "error",
            "value": "error",
            "description": "The operation has completed processing with a failure and cannot be further consumed. It can be categorized as a terminal state."
          },
          {
            "name": "deleting",
            "value": "deleting",
            "description": "The entity is in the process to be deleted. This state is not returned by Azure OpenAI and exposed only for compatibility.\nIt can be categorized as an active state."
          },
          {
            "name": "deleted",
            "value": "deleted",
            "description": "The entity has been deleted but may still be referenced by other entities predating the deletion. It can be categorized as a\nterminal state."
          }
        ]
      }
    },
    "FunctionDefinition": {
      "type": "object",
      "description": "The input definition information for a function.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the function to be called."
        },
        "description": {
          "type": "string",
          "description": "A description of what the function does, used by the model to choose when and how to call the function."
        },
        "parameters": {
          "description": "The parameters the functions accepts, described as a JSON Schema object."
        }
      },
      "required": [
        "name",
        "parameters"
      ]
    },
    "FunctionToolDefinition": {
      "type": "object",
      "description": "The input definition information for a function tool as used to configure an assistant.",
      "properties": {
        "function": {
          "$ref": "#/definitions/FunctionDefinition",
          "description": "The definition of the concrete function that the function tool should call."
        }
      },
      "required": [
        "function"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ToolDefinition"
        }
      ],
      "x-ms-discriminator-value": "function"
    },
    "IncompleteRunDetails": {
      "type": "string",
      "description": "The reason why the run is incomplete. This will point to which specific token limit was reached over the course of the run.",
      "enum": [
        "max_completion_tokens",
        "max_prompt_tokens"
      ],
      "x-ms-enum": {
        "name": "IncompleteRunDetails",
        "modelAsString": true,
        "values": [
          {
            "name": "maxCompletionTokens",
            "value": "max_completion_tokens",
            "description": "Maximum completion tokens exceeded"
          },
          {
            "name": "maxPromptTokens",
            "value": "max_prompt_tokens",
            "description": "Maximum prompt tokens exceeded"
          }
        ]
      }
    },
    "MessageAttachment": {
      "type": "object",
      "description": "This describes to which tools a file has been attached.",
      "properties": {
        "file_id": {
          "type": "string",
          "description": "The ID of the file to attach to the message.",
          "x-ms-client-name": "fileId"
        },
        "tools": {
          "type": "array",
          "description": "The tools to add to this file.",
          "items": {
            "$ref": "#/definitions/MessageAttachmentToolDefinition"
          }
        }
      },
      "required": [
        "file_id",
        "tools"
      ]
    },
    "MessageAttachmentToolDefinition": {
      "x-nullable": false
    },
    "MessageContent": {
      "type": "object",
      "description": "An abstract representation of a single item of thread message content.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The object type."
        }
      },
      "discriminator": "type",
      "required": [
        "type"
      ]
    },
    "MessageImageFileContent": {
      "type": "object",
      "description": "A representation of image file content in a thread message.",
      "properties": {
        "image_file": {
          "$ref": "#/definitions/MessageImageFileDetails",
          "description": "The image file for this thread message content item.",
          "x-ms-client-name": "imageFile"
        }
      },
      "required": [
        "image_file"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/MessageContent"
        }
      ],
      "x-ms-discriminator-value": "image_file"
    },
    "MessageImageFileDetails": {
      "type": "object",
      "description": "An image reference, as represented in thread message content.",
      "properties": {
        "file_id": {
          "type": "string",
          "description": "The ID for the file associated with this image.",
          "x-ms-client-name": "fileId"
        }
      },
      "required": [
        "file_id"
      ]
    },
    "MessageIncompleteDetails": {
      "type": "object",
      "description": "Information providing additional detail about a message entering an incomplete status.",
      "properties": {
        "reason": {
          "$ref": "#/definitions/MessageIncompleteDetailsReason",
          "description": "The provided reason describing why the message was marked as incomplete."
        }
      },
      "required": [
        "reason"
      ]
    },
    "MessageIncompleteDetailsReason": {
      "type": "string",
      "description": "A set of reasons describing why a message is marked as incomplete.",
      "enum": [
        "content_filter",
        "max_tokens",
        "run_cancelled",
        "run_failed",
        "run_expired"
      ],
      "x-ms-enum": {
        "name": "MessageIncompleteDetailsReason",
        "modelAsString": true,
        "values": [
          {
            "name": "contentFilter",
            "value": "content_filter",
            "description": "The run generating the message was terminated due to content filter flagging."
          },
          {
            "name": "maxTokens",
            "value": "max_tokens",
            "description": "The run generating the message exhausted available tokens before completion."
          },
          {
            "name": "runCancelled",
            "value": "run_cancelled",
            "description": "The run generating the message was cancelled before completion."
          },
          {
            "name": "runFailed",
            "value": "run_failed",
            "description": "The run generating the message failed."
          },
          {
            "name": "runExpired",
            "value": "run_expired",
            "description": "The run generating the message expired."
          }
        ]
      }
    },
    "MessageRole": {
      "type": "string",
      "description": "The possible values for roles attributed to messages in a thread.",
      "enum": [
        "user",
        "assistant"
      ],
      "x-ms-enum": {
        "name": "MessageRole",
        "modelAsString": true,
        "values": [
          {
            "name": "user",
            "value": "user",
            "description": "The role representing the end-user."
          },
          {
            "name": "assistant",
            "value": "assistant",
            "description": "The role representing the assistant."
          }
        ]
      }
    },
    "MessageStatus": {
      "type": "string",
      "description": "The possible execution status values for a thread message.",
      "enum": [
        "in_progress",
        "incomplete",
        "completed"
      ],
      "x-ms-enum": {
        "name": "MessageStatus",
        "modelAsString": true,
        "values": [
          {
            "name": "inProgress",
            "value": "in_progress",
            "description": "A run is currently creating this message."
          },
          {
            "name": "incomplete",
            "value": "incomplete",
            "description": "This message is incomplete. See incomplete_details for more information."
          },
          {
            "name": "completed",
            "value": "completed",
            "description": "This message was successfully completed by a run."
          }
        ]
      }
    },
    "MessageTextAnnotation": {
      "type": "object",
      "description": "An abstract representation of an annotation to text thread message content.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The object type."
        },
        "text": {
          "type": "string",
          "description": "The textual content associated with this text annotation item."
        }
      },
      "discriminator": "type",
      "required": [
        "type",
        "text"
      ]
    },
    "MessageTextContent": {
      "type": "object",
      "description": "A representation of a textual item of thread message content.",
      "properties": {
        "text": {
          "$ref": "#/definitions/MessageTextDetails",
          "description": "The text and associated annotations for this thread message content item."
        }
      },
      "required": [
        "text"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/MessageContent"
        }
      ],
      "x-ms-discriminator-value": "text"
    },
    "MessageTextDetails": {
      "type": "object",
      "description": "The text and associated annotations for a single item of assistant thread message content.",
      "properties": {
        "value": {
          "type": "string",
          "description": "The text data."
        },
        "annotations": {
          "type": "array",
          "description": "A list of annotations associated with this text.",
          "items": {
            "$ref": "#/definitions/MessageTextAnnotation"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "value",
        "annotations"
      ]
    },
    "MessageTextFileCitationAnnotation": {
      "type": "object",
      "description": "A citation within the message that points to a specific quote from a specific File associated with the assistant or the message. Generated when the assistant uses the 'file_search' tool to search files.",
      "properties": {
        "file_citation": {
          "$ref": "#/definitions/MessageTextFileCitationDetails",
          "description": "A citation within the message that points to a specific quote from a specific file.\nGenerated when the assistant uses the \"file_search\" tool to search files.",
          "x-ms-client-name": "fileCitation"
        },
        "start_index": {
          "type": "integer",
          "format": "int32",
          "description": "The first text index associated with this text annotation.",
          "x-ms-client-name": "startIndex"
        },
        "end_index": {
          "type": "integer",
          "format": "int32",
          "description": "The last text index associated with this text annotation.",
          "x-ms-client-name": "endIndex"
        }
      },
      "required": [
        "file_citation"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/MessageTextAnnotation"
        }
      ],
      "x-ms-discriminator-value": "file_citation"
    },
    "MessageTextFileCitationDetails": {
      "type": "object",
      "description": "A representation of a file-based text citation, as used in a file-based annotation of text thread message content.",
      "properties": {
        "file_id": {
          "type": "string",
          "description": "The ID of the file associated with this citation.",
          "x-ms-client-name": "fileId"
        },
        "quote": {
          "type": "string",
          "description": "The specific quote cited in the associated file."
        }
      },
      "required": [
        "file_id",
        "quote"
      ]
    },
    "MessageTextFilePathAnnotation": {
      "type": "object",
      "description": "A citation within the message that points to a file located at a specific path.",
      "properties": {
        "file_path": {
          "$ref": "#/definitions/MessageTextFilePathDetails",
          "description": "A URL for the file that's generated when the assistant used the code_interpreter tool to generate a file.",
          "x-ms-client-name": "filePath"
        },
        "start_index": {
          "type": "integer",
          "format": "int32",
          "description": "The first text index associated with this text annotation.",
          "x-ms-client-name": "startIndex"
        },
        "end_index": {
          "type": "integer",
          "format": "int32",
          "description": "The last text index associated with this text annotation.",
          "x-ms-client-name": "endIndex"
        }
      },
      "required": [
        "file_path"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/MessageTextAnnotation"
        }
      ],
      "x-ms-discriminator-value": "file_path"
    },
    "MessageTextFilePathDetails": {
      "type": "object",
      "description": "An encapsulation of an image file ID, as used by message image content.",
      "properties": {
        "file_id": {
          "type": "string",
          "description": "The ID of the specific file that the citation is from.",
          "x-ms-client-name": "fileId"
        }
      },
      "required": [
        "file_id"
      ]
    },
    "OpenAIFile": {
      "type": "object",
      "description": "Represents an assistant that can call the model and use tools.",
      "properties": {
        "object": {
          "type": "string",
          "description": "The object type, which is always 'file'.",
          "enum": [
            "file"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        },
        "id": {
          "type": "string",
          "description": "The identifier, which can be referenced in API endpoints."
        },
        "bytes": {
          "type": "integer",
          "format": "int32",
          "description": "The size of the file, in bytes."
        },
        "filename": {
          "type": "string",
          "description": "The name of the file."
        },
        "created_at": {
          "type": "integer",
          "format": "unixtime",
          "description": "The Unix timestamp, in seconds, representing when this object was created.",
          "x-ms-client-name": "createdAt"
        },
        "purpose": {
          "$ref": "#/definitions/FilePurpose",
          "description": "The intended purpose of a file."
        },
        "status": {
          "$ref": "#/definitions/FileState",
          "description": "The state of the file. This field is available in Azure OpenAI only."
        },
        "status_details": {
          "type": "string",
          "description": "The error message with details in case processing of this file failed. This field is available in Azure OpenAI only.",
          "x-ms-client-name": "statusDetails"
        }
      },
      "required": [
        "object",
        "id",
        "bytes",
        "filename",
        "created_at",
        "purpose"
      ]
    },
    "RequiredAction": {
      "type": "object",
      "description": "An abstract representation of a required action for an assistant thread run to continue.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The object type."
        }
      },
      "discriminator": "type",
      "required": [
        "type"
      ]
    },
    "RequiredFunctionToolCall": {
      "type": "object",
      "description": "A representation of a requested call to a function tool, needed by the model to continue evaluation of a run.",
      "properties": {
        "function": {
          "$ref": "#/definitions/RequiredFunctionToolCallDetails",
          "description": "Detailed information about the function to be executed by the tool that includes name and arguments."
        }
      },
      "required": [
        "function"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/RequiredToolCall"
        }
      ],
      "x-ms-discriminator-value": "function"
    },
    "RequiredFunctionToolCallDetails": {
      "type": "object",
      "description": "The detailed information for a function invocation, as provided by a required action invoking a function tool, that includes the name of and arguments to the function.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the function."
        },
        "arguments": {
          "type": "string",
          "description": "The arguments to use when invoking the named function, as provided by the model. Arguments are presented as a JSON document that should be validated and parsed for evaluation."
        }
      },
      "required": [
        "name",
        "arguments"
      ]
    },
    "RequiredToolCall": {
      "type": "object",
      "description": "An abstract representation a a tool invocation needed by the model to continue a run.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The object type for the required tool call."
        },
        "id": {
          "type": "string",
          "description": "The ID of the tool call. This ID must be referenced when submitting tool outputs."
        }
      },
      "discriminator": "type",
      "required": [
        "type",
        "id"
      ]
    },
    "RunCompletionUsage": {
      "type": "object",
      "description": "Usage statistics related to the run. This value will be `null` if the run is not in a terminal state (i.e. `in_progress`, `queued`, etc.).",
      "properties": {
        "completion_tokens": {
          "type": "integer",
          "format": "int64",
          "description": "Number of completion tokens used over the course of the run.",
          "x-ms-client-name": "completionTokens"
        },
        "prompt_tokens": {
          "type": "integer",
          "format": "int64",
          "description": "Number of prompt tokens used over the course of the run.",
          "x-ms-client-name": "promptTokens"
        },
        "total_tokens": {
          "type": "integer",
          "format": "int64",
          "description": "Total number of tokens used (prompt + completion).",
          "x-ms-client-name": "totalTokens"
        }
      },
      "required": [
        "completion_tokens",
        "prompt_tokens",
        "total_tokens"
      ]
    },
    "RunError": {
      "type": "object",
      "description": "The details of an error as encountered by an assistant thread run.",
      "properties": {
        "code": {
          "type": "string",
          "description": "The status for the error."
        },
        "message": {
          "type": "string",
          "description": "The human-readable text associated with the error."
        }
      },
      "required": [
        "code",
        "message"
      ]
    },
    "RunStatus": {
      "type": "string",
      "description": "Possible values for the status of an assistant thread run.",
      "enum": [
        "queued",
        "in_progress",
        "requires_action",
        "cancelling",
        "cancelled",
        "failed",
        "completed",
        "expired"
      ],
      "x-ms-enum": {
        "name": "RunStatus",
        "modelAsString": true,
        "values": [
          {
            "name": "queued",
            "value": "queued",
            "description": "Represents a run that is queued to start."
          },
          {
            "name": "inProgress",
            "value": "in_progress",
            "description": "Represents a run that is in progress."
          },
          {
            "name": "requiresAction",
            "value": "requires_action",
            "description": "Represents a run that needs another operation, such as tool output submission, to continue."
          },
          {
            "name": "cancelling",
            "value": "cancelling",
            "description": "Represents a run that is in the process of cancellation."
          },
          {
            "name": "cancelled",
            "value": "cancelled",
            "description": "Represents a run that has been cancelled."
          },
          {
            "name": "failed",
            "value": "failed",
            "description": "Represents a run that failed."
          },
          {
            "name": "completed",
            "value": "completed",
            "description": "Represents a run that successfully completed."
          },
          {
            "name": "expired",
            "value": "expired",
            "description": "Represents a run that expired before it could otherwise finish."
          }
        ]
      }
    },
    "RunStep": {
      "type": "object",
      "description": "Detailed information about a single step of an assistant thread run.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The identifier, which can be referenced in API endpoints."
        },
        "object": {
          "type": "string",
          "description": "The object type, which is always 'thread.run.step'.",
          "enum": [
            "thread.run.step"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        },
        "type": {
          "$ref": "#/definitions/RunStepType",
          "description": "The type of run step, which can be either message_creation or tool_calls."
        },
        "assistant_id": {
          "type": "string",
          "description": "The ID of the assistant associated with the run step.",
          "x-ms-client-name": "assistantId"
        },
        "thread_id": {
          "type": "string",
          "description": "The ID of the thread that was run.",
          "x-ms-client-name": "threadId"
        },
        "run_id": {
          "type": "string",
          "description": "The ID of the run that this run step is a part of.",
          "x-ms-client-name": "runId"
        },
        "status": {
          "$ref": "#/definitions/RunStepStatus",
          "description": "The status of this run step."
        },
        "step_details": {
          "$ref": "#/definitions/RunStepDetails",
          "description": "The details for this run step.",
          "x-ms-client-name": "stepDetails"
        },
        "last_error": {
          "type": "object",
          "description": "If applicable, information about the last error encountered by this run step.",
          "x-nullable": true,
          "allOf": [
            {
              "$ref": "#/definitions/RunStepError"
            }
          ],
          "x-ms-client-name": "lastError"
        },
        "created_at": {
          "type": "integer",
          "format": "unixtime",
          "description": "The Unix timestamp, in seconds, representing when this object was created.",
          "x-ms-client-name": "createdAt"
        },
        "expired_at": {
          "type": "integer",
          "format": "unixtime",
          "description": "The Unix timestamp, in seconds, representing when this item expired.",
          "x-nullable": true,
          "x-ms-client-name": "expiredAt"
        },
        "completed_at": {
          "type": "integer",
          "format": "unixtime",
          "description": "The Unix timestamp, in seconds, representing when this completed.",
          "x-nullable": true,
          "x-ms-client-name": "completedAt"
        },
        "cancelled_at": {
          "type": "integer",
          "format": "unixtime",
          "description": "The Unix timestamp, in seconds, representing when this was cancelled.",
          "x-nullable": true,
          "x-ms-client-name": "cancelledAt"
        },
        "failed_at": {
          "type": "integer",
          "format": "unixtime",
          "description": "The Unix timestamp, in seconds, representing when this failed.",
          "x-nullable": true,
          "x-ms-client-name": "failedAt"
        },
        "usage": {
          "type": "object",
          "description": "Usage statistics related to the run step. This value will be `null` while the run step's status is `in_progress`.",
          "x-nullable": true,
          "allOf": [
            {
              "$ref": "#/definitions/RunStepCompletionUsage"
            }
          ]
        },
        "metadata": {
          "type": "object",
          "description": "A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length.",
          "x-nullable": true,
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "object",
        "type",
        "assistant_id",
        "thread_id",
        "run_id",
        "status",
        "step_details",
        "last_error",
        "created_at",
        "expired_at",
        "completed_at",
        "cancelled_at",
        "failed_at",
        "metadata"
      ]
    },
    "RunStepCodeInterpreterImageOutput": {
      "type": "object",
      "description": "A representation of an image output emitted by a code interpreter tool in response to a tool call by the model.",
      "properties": {
        "image": {
          "$ref": "#/definitions/RunStepCodeInterpreterImageReference",
          "description": "Referential information for the image associated with this output."
        }
      },
      "required": [
        "image"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/RunStepCodeInterpreterToolCallOutput"
        }
      ],
      "x-ms-discriminator-value": "image"
    },
    "RunStepCodeInterpreterImageReference": {
      "type": "object",
      "description": "An image reference emitted by a code interpreter tool in response to a tool call by the model.",
      "properties": {
        "file_id": {
          "type": "string",
          "description": "The ID of the file associated with this image.",
          "x-ms-client-name": "fileId"
        }
      },
      "required": [
        "file_id"
      ]
    },
    "RunStepCodeInterpreterLogOutput": {
      "type": "object",
      "description": "A representation of a log output emitted by a code interpreter tool in response to a tool call by the model.",
      "properties": {
        "logs": {
          "type": "string",
          "description": "The serialized log output emitted by the code interpreter."
        }
      },
      "required": [
        "logs"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/RunStepCodeInterpreterToolCallOutput"
        }
      ],
      "x-ms-discriminator-value": "logs"
    },
    "RunStepCodeInterpreterToolCall": {
      "type": "object",
      "description": "A record of a call to a code interpreter tool, issued by the model in evaluation of a defined tool, that\nrepresents inputs and outputs consumed and emitted by the code interpreter.",
      "properties": {
        "code_interpreter": {
          "$ref": "#/definitions/RunStepCodeInterpreterToolCallDetails",
          "description": "The details of the tool call to the code interpreter tool.",
          "x-ms-client-name": "codeInterpreter"
        }
      },
      "required": [
        "code_interpreter"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/RunStepToolCall"
        }
      ],
      "x-ms-discriminator-value": "code_interpreter"
    },
    "RunStepCodeInterpreterToolCallDetails": {
      "type": "object",
      "description": "The detailed information about a code interpreter invocation by the model.",
      "properties": {
        "input": {
          "type": "string",
          "description": "The input provided by the model to the code interpreter tool."
        },
        "outputs": {
          "type": "array",
          "description": "The outputs produced by the code interpreter tool back to the model in response to the tool call.",
          "items": {
            "$ref": "#/definitions/RunStepCodeInterpreterToolCallOutput"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "input",
        "outputs"
      ]
    },
    "RunStepCodeInterpreterToolCallOutput": {
      "type": "object",
      "description": "An abstract representation of an emitted output from a code interpreter tool.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The object type."
        }
      },
      "discriminator": "type",
      "required": [
        "type"
      ]
    },
    "RunStepCompletionUsage": {
      "type": "object",
      "description": "Usage statistics related to the run step.",
      "properties": {
        "completion_tokens": {
          "type": "integer",
          "format": "int64",
          "description": "Number of completion tokens used over the course of the run step.",
          "x-ms-client-name": "completionTokens"
        },
        "prompt_tokens": {
          "type": "integer",
          "format": "int64",
          "description": "Number of prompt tokens used over the course of the run step.",
          "x-ms-client-name": "promptTokens"
        },
        "total_tokens": {
          "type": "integer",
          "format": "int64",
          "description": "Total number of tokens used (prompt + completion).",
          "x-ms-client-name": "totalTokens"
        }
      },
      "required": [
        "completion_tokens",
        "prompt_tokens",
        "total_tokens"
      ]
    },
    "RunStepDetails": {
      "type": "object",
      "description": "An abstract representation of the details for a run step.",
      "properties": {
        "type": {
          "$ref": "#/definitions/RunStepType",
          "description": "The object type."
        }
      },
      "discriminator": "type",
      "required": [
        "type"
      ]
    },
    "RunStepError": {
      "type": "object",
      "description": "The error information associated with a failed run step.",
      "properties": {
        "code": {
          "$ref": "#/definitions/RunStepErrorCode",
          "description": "The error code for this error."
        },
        "message": {
          "type": "string",
          "description": "The human-readable text associated with this error."
        }
      },
      "required": [
        "code",
        "message"
      ]
    },
    "RunStepErrorCode": {
      "type": "string",
      "description": "Possible error code values attributable to a failed run step.",
      "enum": [
        "server_error",
        "rate_limit_exceeded"
      ],
      "x-ms-enum": {
        "name": "RunStepErrorCode",
        "modelAsString": true,
        "values": [
          {
            "name": "serverError",
            "value": "server_error",
            "description": "Represents a server error."
          },
          {
            "name": "rateLimitExceeded",
            "value": "rate_limit_exceeded",
            "description": "Represents an error indicating configured rate limits were exceeded."
          }
        ]
      }
    },
    "RunStepFileSearchToolCall": {
      "type": "object",
      "description": "A record of a call to a file search tool, issued by the model in evaluation of a defined tool, that represents\nexecuted file search.",
      "properties": {
        "file_search": {
          "type": "object",
          "description": "Reserved for future use.",
          "additionalProperties": {
            "type": "string"
          },
          "x-ms-client-name": "fileSearch"
        }
      },
      "required": [
        "file_search"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/RunStepToolCall"
        }
      ],
      "x-ms-discriminator-value": "file_search"
    },
    "RunStepFunctionToolCall": {
      "type": "object",
      "description": "A record of a call to a function tool, issued by the model in evaluation of a defined tool, that represents the inputs\nand output consumed and emitted by the specified function.",
      "properties": {
        "function": {
          "$ref": "#/definitions/RunStepFunctionToolCallDetails",
          "description": "The detailed information about the function called by the model."
        }
      },
      "required": [
        "function"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/RunStepToolCall"
        }
      ],
      "x-ms-discriminator-value": "function"
    },
    "RunStepFunctionToolCallDetails": {
      "type": "object",
      "description": "The detailed information about the function called by the model.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the function."
        },
        "arguments": {
          "type": "string",
          "description": "The arguments that the model requires are provided to the named function."
        },
        "output": {
          "type": "string",
          "description": "The output of the function, only populated for function calls that have already have had their outputs submitted.",
          "x-nullable": true
        }
      },
      "required": [
        "name",
        "arguments",
        "output"
      ]
    },
    "RunStepMessageCreationDetails": {
      "type": "object",
      "description": "The detailed information associated with a message creation run step.",
      "properties": {
        "message_creation": {
          "$ref": "#/definitions/RunStepMessageCreationReference",
          "description": "Information about the message creation associated with this run step.",
          "x-ms-client-name": "messageCreation"
        }
      },
      "required": [
        "message_creation"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/RunStepDetails"
        }
      ],
      "x-ms-discriminator-value": "message_creation"
    },
    "RunStepMessageCreationReference": {
      "type": "object",
      "description": "The details of a message created as a part of a run step.",
      "properties": {
        "message_id": {
          "type": "string",
          "description": "The ID of the message created by this run step.",
          "x-ms-client-name": "messageId"
        }
      },
      "required": [
        "message_id"
      ]
    },
    "RunStepStatus": {
      "type": "string",
      "description": "Possible values for the status of a run step.",
      "enum": [
        "in_progress",
        "cancelled",
        "failed",
        "completed",
        "expired"
      ],
      "x-ms-enum": {
        "name": "RunStepStatus",
        "modelAsString": true,
        "values": [
          {
            "name": "inProgress",
            "value": "in_progress",
            "description": "Represents a run step still in progress."
          },
          {
            "name": "cancelled",
            "value": "cancelled",
            "description": "Represents a run step that was cancelled."
          },
          {
            "name": "failed",
            "value": "failed",
            "description": "Represents a run step that failed."
          },
          {
            "name": "completed",
            "value": "completed",
            "description": "Represents a run step that successfully completed."
          },
          {
            "name": "expired",
            "value": "expired",
            "description": "Represents a run step that expired before otherwise finishing."
          }
        ]
      }
    },
    "RunStepToolCall": {
      "type": "object",
      "description": "An abstract representation of a detailed tool call as recorded within a run step for an existing run.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The object type."
        },
        "id": {
          "type": "string",
          "description": "The ID of the tool call. This ID must be referenced when you submit tool outputs."
        }
      },
      "discriminator": "type",
      "required": [
        "type",
        "id"
      ]
    },
    "RunStepToolCallDetails": {
      "type": "object",
      "description": "The detailed information associated with a run step calling tools.",
      "properties": {
        "tool_calls": {
          "type": "array",
          "description": "A list of tool call details for this run step.",
          "items": {
            "$ref": "#/definitions/RunStepToolCall"
          },
          "x-ms-client-name": "toolCalls"
        }
      },
      "required": [
        "tool_calls"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/RunStepDetails"
        }
      ],
      "x-ms-discriminator-value": "tool_calls"
    },
    "RunStepType": {
      "type": "string",
      "description": "The possible types of run steps.",
      "enum": [
        "message_creation",
        "tool_calls"
      ],
      "x-ms-enum": {
        "name": "RunStepType",
        "modelAsString": true,
        "values": [
          {
            "name": "messageCreation",
            "value": "message_creation",
            "description": "Represents a run step to create a message."
          },
          {
            "name": "toolCalls",
            "value": "tool_calls",
            "description": "Represents a run step that calls tools."
          }
        ]
      }
    },
    "SubmitToolOutputsAction": {
      "type": "object",
      "description": "The details for required tool calls that must be submitted for an assistant thread run to continue.",
      "properties": {
        "submit_tool_outputs": {
          "$ref": "#/definitions/SubmitToolOutputsDetails",
          "description": "The details describing tools that should be called to submit tool outputs.",
          "x-ms-client-name": "submitToolOutputs"
        }
      },
      "required": [
        "submit_tool_outputs"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/RequiredAction"
        }
      ],
      "x-ms-discriminator-value": "submit_tool_outputs"
    },
    "SubmitToolOutputsDetails": {
      "type": "object",
      "description": "The details describing tools that should be called to submit tool outputs.",
      "properties": {
        "tool_calls": {
          "type": "array",
          "description": "The list of tool calls that must be resolved for the assistant thread run to continue.",
          "items": {
            "$ref": "#/definitions/RequiredToolCall"
          },
          "x-ms-client-name": "toolCalls"
        }
      },
      "required": [
        "tool_calls"
      ]
    },
    "ThreadDeletionStatus": {
      "type": "object",
      "description": "The status of a thread deletion operation.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the resource specified for deletion."
        },
        "deleted": {
          "type": "boolean",
          "description": "A value indicating whether deletion was successful."
        },
        "object": {
          "type": "string",
          "description": "The object type, which is always 'thread.deleted'.",
          "enum": [
            "thread.deleted"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        }
      },
      "required": [
        "id",
        "deleted",
        "object"
      ]
    },
    "ThreadMessage": {
      "type": "object",
      "description": "A single, existing message within an assistant thread.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The identifier, which can be referenced in API endpoints."
        },
        "object": {
          "type": "string",
          "description": "The object type, which is always 'thread.message'.",
          "enum": [
            "thread.message"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        },
        "created_at": {
          "type": "integer",
          "format": "unixtime",
          "description": "The Unix timestamp, in seconds, representing when this object was created.",
          "x-ms-client-name": "createdAt"
        },
        "thread_id": {
          "type": "string",
          "description": "The ID of the thread that this message belongs to.",
          "x-ms-client-name": "threadId"
        },
        "status": {
          "$ref": "#/definitions/MessageStatus",
          "description": "The status of the message."
        },
        "incomplete_details": {
          "type": "object",
          "description": "On an incomplete message, details about why the message is incomplete.",
          "x-nullable": true,
          "allOf": [
            {
              "$ref": "#/definitions/MessageIncompleteDetails"
            }
          ],
          "x-ms-client-name": "incompleteDetails"
        },
        "completed_at": {
          "type": "integer",
          "format": "unixtime",
          "description": "The Unix timestamp (in seconds) for when the message was completed.",
          "x-nullable": true,
          "x-ms-client-name": "completedAt"
        },
        "incomplete_at": {
          "type": "integer",
          "format": "unixtime",
          "description": "The Unix timestamp (in seconds) for when the message was marked as incomplete.",
          "x-nullable": true,
          "x-ms-client-name": "incompleteAt"
        },
        "role": {
          "$ref": "#/definitions/MessageRole",
          "description": "The role associated with the assistant thread message."
        },
        "content": {
          "type": "array",
          "description": "The list of content items associated with the assistant thread message.",
          "items": {
            "$ref": "#/definitions/MessageContent"
          },
          "x-ms-identifiers": []
        },
        "assistant_id": {
          "type": "string",
          "description": "If applicable, the ID of the assistant that authored this message.",
          "x-nullable": true,
          "x-ms-client-name": "assistantId"
        },
        "run_id": {
          "type": "string",
          "description": "If applicable, the ID of the run associated with the authoring of this message.",
          "x-nullable": true,
          "x-ms-client-name": "runId"
        },
        "attachments": {
          "type": "array",
          "description": "A list of files attached to the message, and the tools they were added to.",
          "x-nullable": true,
          "items": {
            "$ref": "#/definitions/MessageAttachment"
          },
          "x-ms-identifiers": []
        },
        "metadata": {
          "type": "object",
          "description": "A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length.",
          "x-nullable": true,
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "object",
        "created_at",
        "thread_id",
        "status",
        "incomplete_details",
        "completed_at",
        "incomplete_at",
        "role",
        "content",
        "assistant_id",
        "run_id",
        "attachments",
        "metadata"
      ]
    },
    "ThreadMessageOptions": {
      "type": "object",
      "description": "A single message within an assistant thread, as provided during that thread's creation for its initial state.",
      "properties": {
        "role": {
          "$ref": "#/definitions/MessageRole",
          "description": "The role of the entity that is creating the message. Allowed values include:\n- `user`: Indicates the message is sent by an actual user and should be used in most cases to represent user-generated messages.\n- `assistant`: Indicates the message is generated by the assistant. Use this value to insert messages from the assistant into\nthe conversation."
        },
        "content": {
          "type": "string",
          "description": "The textual content of the initial message. Currently, robust input including images and annotated text may only be provided via\na separate call to the create message API."
        },
        "attachments": {
          "type": "array",
          "description": "A list of files attached to the message, and the tools they should be added to.",
          "x-nullable": true,
          "items": {
            "$ref": "#/definitions/MessageAttachment"
          },
          "x-ms-identifiers": []
        },
        "metadata": {
          "type": "object",
          "description": "A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length.",
          "x-nullable": true,
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "role",
        "content"
      ]
    },
    "ThreadRun": {
      "type": "object",
      "description": "Data representing a single evaluation run of an assistant thread.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The identifier, which can be referenced in API endpoints."
        },
        "object": {
          "type": "string",
          "description": "The object type, which is always 'thread.run'.",
          "enum": [
            "thread.run"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        },
        "thread_id": {
          "type": "string",
          "description": "The ID of the thread associated with this run.",
          "x-ms-client-name": "threadId"
        },
        "assistant_id": {
          "type": "string",
          "description": "The ID of the assistant associated with the thread this run was performed against.",
          "x-ms-client-name": "assistantId"
        },
        "status": {
          "$ref": "#/definitions/RunStatus",
          "description": "The status of the assistant thread run."
        },
        "required_action": {
          "type": "object",
          "description": "The details of the action required for the assistant thread run to continue.",
          "x-nullable": true,
          "allOf": [
            {
              "$ref": "#/definitions/RequiredAction"
            }
          ],
          "x-ms-client-name": "requiredAction"
        },
        "last_error": {
          "type": "object",
          "description": "The last error, if any, encountered by this assistant thread run.",
          "x-nullable": true,
          "allOf": [
            {
              "$ref": "#/definitions/RunError"
            }
          ],
          "x-ms-client-name": "lastError"
        },
        "model": {
          "type": "string",
          "description": "The ID of the model to use."
        },
        "instructions": {
          "type": "string",
          "description": "The overridden system instructions used for this assistant thread run."
        },
        "tools": {
          "type": "array",
          "description": "The overridden enabled tools used for this assistant thread run.",
          "default": [],
          "items": {
            "$ref": "#/definitions/ToolDefinition"
          },
          "x-ms-identifiers": []
        },
        "created_at": {
          "type": "integer",
          "format": "unixtime",
          "description": "The Unix timestamp, in seconds, representing when this object was created.",
          "x-ms-client-name": "createdAt"
        },
        "expires_at": {
          "type": "integer",
          "format": "unixtime",
          "description": "The Unix timestamp, in seconds, representing when this item expires.",
          "x-nullable": true,
          "x-ms-client-name": "expiresAt"
        },
        "started_at": {
          "type": "integer",
          "format": "unixtime",
          "description": "The Unix timestamp, in seconds, representing when this item was started.",
          "x-nullable": true,
          "x-ms-client-name": "startedAt"
        },
        "completed_at": {
          "type": "integer",
          "format": "unixtime",
          "description": "The Unix timestamp, in seconds, representing when this completed.",
          "x-nullable": true,
          "x-ms-client-name": "completedAt"
        },
        "cancelled_at": {
          "type": "integer",
          "format": "unixtime",
          "description": "The Unix timestamp, in seconds, representing when this was cancelled.",
          "x-nullable": true,
          "x-ms-client-name": "cancelledAt"
        },
        "failed_at": {
          "type": "integer",
          "format": "unixtime",
          "description": "The Unix timestamp, in seconds, representing when this failed.",
          "x-nullable": true,
          "x-ms-client-name": "failedAt"
        },
        "incomplete_details": {
          "$ref": "#/definitions/IncompleteRunDetails",
          "description": "Details on why the run is incomplete. Will be `null` if the run is not incomplete.",
          "x-nullable": true,
          "x-ms-client-name": "incompleteDetails"
        },
        "usage": {
          "type": "object",
          "description": "Usage statistics related to the run. This value will be `null` if the run is not in a terminal state (i.e. `in_progress`, `queued`, etc.).",
          "x-nullable": true,
          "allOf": [
            {
              "$ref": "#/definitions/RunCompletionUsage"
            }
          ]
        },
        "temperature": {
          "type": "number",
          "format": "float",
          "description": "The sampling temperature used for this run. If not set, defaults to 1.",
          "x-nullable": true
        },
        "top_p": {
          "type": "number",
          "format": "float",
          "description": "The nucleus sampling value used for this run. If not set, defaults to 1.",
          "x-nullable": true,
          "x-ms-client-name": "topP"
        },
        "max_prompt_tokens": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of prompt tokens specified to have been used over the course of the run.",
          "x-nullable": true,
          "x-ms-client-name": "maxPromptTokens"
        },
        "max_completion_tokens": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of completion tokens specified to have been used over the course of the run.",
          "x-nullable": true,
          "x-ms-client-name": "maxCompletionTokens"
        },
        "truncation_strategy": {
          "type": "object",
          "description": "The strategy to use for dropping messages as the context windows moves forward.",
          "x-nullable": true,
          "allOf": [
            {
              "$ref": "#/definitions/TruncationObject"
            }
          ],
          "x-ms-client-name": "truncationStrategy"
        },
        "tool_choice": {
          "$ref": "#/definitions/AssistantsApiToolChoiceOption",
          "description": "Controls whether or not and which tool is called by the model.",
          "x-nullable": true,
          "x-ms-client-name": "toolChoice"
        },
        "response_format": {
          "$ref": "#/definitions/AssistantsApiResponseFormatOption",
          "description": "The response format of the tool calls used in this run.",
          "x-nullable": true,
          "x-ms-client-name": "responseFormat"
        },
        "metadata": {
          "type": "object",
          "description": "A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length.",
          "x-nullable": true,
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "object",
        "thread_id",
        "assistant_id",
        "status",
        "last_error",
        "model",
        "instructions",
        "tools",
        "created_at",
        "expires_at",
        "started_at",
        "completed_at",
        "cancelled_at",
        "failed_at",
        "incomplete_details",
        "usage",
        "max_prompt_tokens",
        "max_completion_tokens",
        "truncation_strategy",
        "tool_choice",
        "response_format",
        "metadata"
      ]
    },
    "ToolDefinition": {
      "type": "object",
      "description": "An abstract representation of an input tool definition that an assistant can use.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The object type."
        }
      },
      "discriminator": "type",
      "required": [
        "type"
      ]
    },
    "ToolOutput": {
      "type": "object",
      "description": "The data provided during a tool outputs submission to resolve pending tool calls and allow the model to continue.",
      "properties": {
        "tool_call_id": {
          "type": "string",
          "description": "The ID of the tool call being resolved, as provided in the tool calls of a required action from a run.",
          "x-ms-client-name": "toolCallId"
        },
        "output": {
          "type": "string",
          "description": "The output from the tool to be submitted."
        }
      }
    },
    "ToolResources": {
      "type": "object",
      "description": "A set of resources that are used by the assistant's tools. The resources are specific to the type of\ntool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search`\ntool requires a list of vector store IDs.",
      "properties": {
        "code_interpreter": {
          "$ref": "#/definitions/CodeInterpreterToolResource",
          "description": "Resources to be used by the `code_interpreter tool` consisting of file IDs.",
          "x-ms-client-name": "codeInterpreter"
        },
        "file_search": {
          "$ref": "#/definitions/FileSearchToolResource",
          "description": "Resources to be used by the `file_search` tool consisting of vector store IDs.",
          "x-ms-client-name": "fileSearch"
        }
      }
    },
    "TruncationObject": {
      "type": "object",
      "description": "Controls for how a thread will be truncated prior to the run. Use this to control the initial\ncontext window of the run.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The truncation strategy to use for the thread. The default is `auto`. If set to `last_messages`, the thread will\nbe truncated to the `lastMessages` count most recent messages in the thread. When set to `auto`, messages in the middle of the thread\nwill be dropped to fit the context length of the model, `max_prompt_tokens`.",
          "default": "auto",
          "enum": [
            "auto",
            "last_messages"
          ],
          "x-ms-enum": {
            "name": "TruncationStrategy",
            "modelAsString": true,
            "values": [
              {
                "name": "auto",
                "value": "auto",
                "description": "Default value. Messages in the middle of the thread will be dropped to fit the context length of the model."
              },
              {
                "name": "lastMessages",
                "value": "last_messages",
                "description": "The thread will truncate to the `lastMessages` count of recent messages."
              }
            ]
          }
        },
        "last_messages": {
          "type": "integer",
          "format": "int32",
          "description": "The number of most recent messages from the thread when constructing the context for the run.",
          "x-nullable": true,
          "x-ms-client-name": "lastMessages"
        }
      },
      "required": [
        "type"
      ]
    },
    "UpdateAssistantOptions": {
      "type": "object",
      "description": "The request details to use when modifying an existing assistant.",
      "properties": {
        "model": {
          "type": "string",
          "description": "The ID of the model to use."
        },
        "name": {
          "type": "string",
          "description": "The modified name for the assistant to use.",
          "x-nullable": true
        },
        "description": {
          "type": "string",
          "description": "The modified description for the assistant to use.",
          "x-nullable": true
        },
        "instructions": {
          "type": "string",
          "description": "The modified system instructions for the new assistant to use.",
          "x-nullable": true
        },
        "tools": {
          "type": "array",
          "description": "The modified collection of tools to enable for the assistant.",
          "default": [],
          "items": {
            "$ref": "#/definitions/ToolDefinition"
          },
          "x-ms-identifiers": []
        },
        "tool_resources": {
          "$ref": "#/definitions/UpdateToolResourcesOptions",
          "description": "A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example,\nthe `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.",
          "x-ms-client-name": "toolResources"
        },
        "temperature": {
          "type": "number",
          "format": "float",
          "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random,\nwhile lower values like 0.2 will make it more focused and deterministic.",
          "default": 1,
          "x-nullable": true
        },
        "top_p": {
          "type": "number",
          "format": "float",
          "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.\nSo 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or temperature but not both.",
          "default": 1,
          "x-nullable": true,
          "x-ms-client-name": "topP"
        },
        "response_format": {
          "$ref": "#/definitions/AssistantsApiResponseFormatOption",
          "description": "The response format of the tool calls used by this assistant.",
          "x-nullable": true,
          "x-ms-client-name": "responseFormat"
        },
        "metadata": {
          "type": "object",
          "description": "A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length.",
          "x-nullable": true,
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "UpdateAssistantThreadOptions": {
      "type": "object",
      "description": "The details used to update an existing assistant thread",
      "properties": {
        "tool_resources": {
          "type": "object",
          "description": "A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the\ntype of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires\na list of vector store IDs",
          "x-nullable": true,
          "allOf": [
            {
              "$ref": "#/definitions/UpdateToolResourcesOptions"
            }
          ],
          "x-ms-client-name": "toolResources"
        },
        "metadata": {
          "type": "object",
          "description": "A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length.",
          "x-nullable": true,
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "UpdateCodeInterpreterToolResourceOptions": {
      "type": "object",
      "description": "Request object to update `code_interpreted` tool resources.",
      "properties": {
        "fileIds": {
          "type": "array",
          "description": "A list of file IDs to override the current list of the assistant.",
          "maxItems": 20,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "UpdateFileSearchToolResourceOptions": {
      "type": "object",
      "description": "Request object to update `file_search` tool resources.",
      "properties": {
        "vector_store_ids": {
          "type": "array",
          "description": "A list of vector store IDs to override the current list of the assistant.",
          "maxItems": 1,
          "items": {
            "type": "string"
          },
          "x-ms-client-name": "vectorStoreIds"
        }
      }
    },
    "UpdateToolResourcesOptions": {
      "type": "object",
      "description": "Request object. A set of resources that are used by the assistant's tools. The resources are specific to the type of tool.\nFor example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of\nvector store IDs.",
      "properties": {
        "code_interpreter": {
          "$ref": "#/definitions/UpdateCodeInterpreterToolResourceOptions",
          "description": "Overrides the list of file IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files\nassociated with the tool.",
          "x-ms-client-name": "codeInterpreter"
        },
        "file_search": {
          "$ref": "#/definitions/UpdateFileSearchToolResourceOptions",
          "description": "Overrides the vector store attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.",
          "x-ms-client-name": "fileSearch"
        }
      }
    },
    "VectorStore": {
      "type": "object",
      "description": "A vector store is a collection of processed files can be used by the `file_search` tool.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The identifier, which can be referenced in API endpoints."
        },
        "object": {
          "type": "string",
          "description": "The object type, which is always `vector_store`",
          "enum": [
            "vector_store"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        },
        "created_at": {
          "type": "integer",
          "format": "unixtime",
          "description": "The Unix timestamp (in seconds) for when the vector store was created.",
          "x-ms-client-name": "createdAt"
        },
        "name": {
          "type": "string",
          "description": "The name of the vector store."
        },
        "usage_bytes": {
          "type": "integer",
          "format": "int32",
          "description": "The total number of bytes used by the files in the vector store.",
          "x-ms-client-name": "usageBytes"
        },
        "file_counts": {
          "$ref": "#/definitions/VectorStoreFileCount",
          "description": "Files count grouped by status processed or being processed by this vector store.",
          "x-ms-client-name": "fileCounts"
        },
        "status": {
          "$ref": "#/definitions/VectorStoreStatus",
          "description": "The status of the vector store, which can be either `expired`, `in_progress`, or `completed`. A status of `completed` indicates that the vector store is ready for use."
        },
        "expires_after": {
          "$ref": "#/definitions/VectorStoreExpirationPolicy",
          "description": "Details on when this vector store expires",
          "x-ms-client-name": "expiresAfter"
        },
        "expires_at": {
          "type": "integer",
          "format": "unixtime",
          "description": "The Unix timestamp (in seconds) for when the vector store will expire.",
          "x-nullable": true,
          "x-ms-client-name": "expiresAt"
        },
        "last_active_at": {
          "type": "integer",
          "format": "unixtime",
          "description": "The Unix timestamp (in seconds) for when the vector store was last active.",
          "x-nullable": true,
          "x-ms-client-name": "lastActiveAt"
        },
        "metadata": {
          "type": "object",
          "description": "A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length.",
          "x-nullable": true,
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "object",
        "created_at",
        "name",
        "usage_bytes",
        "file_counts",
        "status",
        "last_active_at",
        "metadata"
      ]
    },
    "VectorStoreDeletionStatus": {
      "type": "object",
      "description": "Response object for deleting a vector store.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the resource specified for deletion."
        },
        "deleted": {
          "type": "boolean",
          "description": "A value indicating whether deletion was successful."
        },
        "object": {
          "type": "string",
          "description": "The object type, which is always 'vector_store.deleted'.",
          "enum": [
            "vector_store.deleted"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        }
      },
      "required": [
        "id",
        "deleted",
        "object"
      ]
    },
    "VectorStoreExpirationPolicy": {
      "type": "object",
      "description": "The expiration policy for a vector store.",
      "properties": {
        "anchor": {
          "$ref": "#/definitions/VectorStoreExpirationPolicyAnchor",
          "description": "Anchor timestamp after which the expiration policy applies. Supported anchors: `last_active_at`."
        },
        "days": {
          "type": "integer",
          "format": "int32",
          "description": "The anchor timestamp after which the expiration policy applies.",
          "minimum": 1,
          "maximum": 365
        }
      },
      "required": [
        "anchor",
        "days"
      ]
    },
    "VectorStoreExpirationPolicyAnchor": {
      "type": "string",
      "description": "Describes the relationship between the days and the expiration of this vector store",
      "enum": [
        "last_active_at"
      ],
      "x-ms-enum": {
        "name": "VectorStoreExpirationPolicyAnchor",
        "modelAsString": true,
        "values": [
          {
            "name": "lastActiveAt",
            "value": "last_active_at",
            "description": "The expiration policy is based on the last time the vector store was active."
          }
        ]
      }
    },
    "VectorStoreFile": {
      "type": "object",
      "description": "Description of a file attached to a vector store.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The identifier, which can be referenced in API endpoints."
        },
        "object": {
          "type": "string",
          "description": "The object type, which is always `vector_store.file`.",
          "enum": [
            "vector_store.file"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        },
        "usage_bytes": {
          "type": "integer",
          "format": "int32",
          "description": "The total vector store usage in bytes. Note that this may be different from the original file\nsize.",
          "x-ms-client-name": "usageBytes"
        },
        "created_at": {
          "type": "integer",
          "format": "unixtime",
          "description": "The Unix timestamp (in seconds) for when the vector store file was created.",
          "x-ms-client-name": "createdAt"
        },
        "vector_store_id": {
          "type": "string",
          "description": "The ID of the vector store that the file is attached to.",
          "x-ms-client-name": "vectorStoreId"
        },
        "status": {
          "$ref": "#/definitions/VectorStoreFileStatus",
          "description": "The status of the vector store file, which can be either `in_progress`, `completed`, `cancelled`, or `failed`. The status `completed` indicates that the vector store file is ready for use."
        },
        "last_error": {
          "type": "object",
          "description": "The last error associated with this vector store file. Will be `null` if there are no errors.",
          "x-nullable": true,
          "allOf": [
            {
              "$ref": "#/definitions/VectorStoreFileError"
            }
          ],
          "x-ms-client-name": "lastError"
        }
      },
      "required": [
        "id",
        "object",
        "usage_bytes",
        "created_at",
        "vector_store_id",
        "status",
        "last_error"
      ]
    },
    "VectorStoreFileBatch": {
      "type": "object",
      "description": "A batch of files attached to a vector store.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The identifier, which can be referenced in API endpoints."
        },
        "object": {
          "type": "string",
          "description": "The object type, which is always `vector_store.file_batch`.",
          "enum": [
            "vector_store.files_batch"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        },
        "created_at": {
          "type": "integer",
          "format": "unixtime",
          "description": "The Unix timestamp (in seconds) for when the vector store files batch was created.",
          "x-ms-client-name": "createdAt"
        },
        "vector_store_id": {
          "type": "string",
          "description": "The ID of the vector store that the file is attached to.",
          "x-ms-client-name": "vectorStoreId"
        },
        "status": {
          "$ref": "#/definitions/VectorStoreFileBatchStatus",
          "description": "The status of the vector store files batch, which can be either `in_progress`, `completed`, `cancelled` or `failed`."
        },
        "file_counts": {
          "$ref": "#/definitions/VectorStoreFileCount",
          "description": "Files count grouped by status processed or being processed by this vector store.",
          "x-ms-client-name": "fileCounts"
        }
      },
      "required": [
        "id",
        "object",
        "created_at",
        "vector_store_id",
        "status",
        "file_counts"
      ]
    },
    "VectorStoreFileBatchStatus": {
      "type": "string",
      "description": "The status of the vector store file batch.",
      "enum": [
        "in_progress",
        "completed",
        "cancelled",
        "failed"
      ],
      "x-ms-enum": {
        "name": "VectorStoreFileBatchStatus",
        "modelAsString": true,
        "values": [
          {
            "name": "inProgress",
            "value": "in_progress",
            "description": "The vector store is still processing this file batch."
          },
          {
            "name": "completed",
            "value": "completed",
            "description": "the vector store file batch is ready for use."
          },
          {
            "name": "cancelled",
            "value": "cancelled",
            "description": "The vector store file batch was cancelled."
          },
          {
            "name": "failed",
            "value": "failed",
            "description": "The vector store file batch failed to process."
          }
        ]
      }
    },
    "VectorStoreFileCount": {
      "type": "object",
      "description": "Counts of files processed or being processed by this vector store grouped by status.",
      "properties": {
        "in_progress": {
          "type": "integer",
          "format": "int32",
          "description": "The number of files that are currently being processed.",
          "x-ms-client-name": "inProgress"
        },
        "completed": {
          "type": "integer",
          "format": "int32",
          "description": "The number of files that have been successfully processed."
        },
        "failed": {
          "type": "integer",
          "format": "int32",
          "description": "The number of files that have failed to process."
        },
        "cancelled": {
          "type": "integer",
          "format": "int32",
          "description": "The number of files that were cancelled."
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "The total number of files."
        }
      },
      "required": [
        "in_progress",
        "completed",
        "failed",
        "cancelled",
        "total"
      ]
    },
    "VectorStoreFileDeletionStatus": {
      "type": "object",
      "description": "Response object for deleting a vector store file relationship.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the resource specified for deletion."
        },
        "deleted": {
          "type": "boolean",
          "description": "A value indicating whether deletion was successful."
        },
        "object": {
          "type": "string",
          "description": "The object type, which is always 'vector_store.deleted'.",
          "enum": [
            "vector_store.file.deleted"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        }
      },
      "required": [
        "id",
        "deleted",
        "object"
      ]
    },
    "VectorStoreFileError": {
      "type": "object",
      "description": "Details on the error that may have ocurred while processing a file for this vector store",
      "properties": {
        "code": {
          "$ref": "#/definitions/VectorStoreFileErrorCode",
          "description": "One of `server_error` or `rate_limit_exceeded`."
        },
        "message": {
          "type": "string",
          "description": "A human-readable description of the error."
        }
      },
      "required": [
        "code",
        "message"
      ]
    },
    "VectorStoreFileErrorCode": {
      "type": "string",
      "description": "Error code variants for vector store file processing",
      "enum": [
        "internal_error",
        "file_not_found",
        "parsing_error",
        "unhandled_mime_type"
      ],
      "x-ms-enum": {
        "name": "VectorStoreFileErrorCode",
        "modelAsString": true,
        "values": [
          {
            "name": "internalError",
            "value": "internal_error",
            "description": "An internal error occurred."
          },
          {
            "name": "fileNotFound",
            "value": "file_not_found",
            "description": "The file was not found."
          },
          {
            "name": "parsingError",
            "value": "parsing_error",
            "description": "The file could not be parsed."
          },
          {
            "name": "unhandledMimeType",
            "value": "unhandled_mime_type",
            "description": "The file has an unhandled mime type."
          }
        ]
      }
    },
    "VectorStoreFileStatus": {
      "type": "string",
      "description": "Vector store file status",
      "enum": [
        "in_progress",
        "completed",
        "failed",
        "cancelled"
      ],
      "x-ms-enum": {
        "name": "VectorStoreFileStatus",
        "modelAsString": true,
        "values": [
          {
            "name": "inProgress",
            "value": "in_progress",
            "description": "The file is currently being processed."
          },
          {
            "name": "completed",
            "value": "completed",
            "description": "The file has been successfully processed."
          },
          {
            "name": "failed",
            "value": "failed",
            "description": "The file has failed to process."
          },
          {
            "name": "cancelled",
            "value": "cancelled",
            "description": "The file was cancelled."
          }
        ]
      }
    },
    "VectorStoreOptions": {
      "type": "object",
      "description": "Request object for creating a vector store.",
      "properties": {
        "file_ids": {
          "type": "array",
          "description": "A list of file IDs that the vector store should use. Useful for tools like `file_search` that can access files.",
          "maxItems": 500,
          "items": {
            "type": "string"
          },
          "x-ms-client-name": "fileIds"
        },
        "name": {
          "type": "string",
          "description": "The name of the vector store."
        },
        "expires_after": {
          "$ref": "#/definitions/VectorStoreExpirationPolicy",
          "description": "Details on when this vector store expires",
          "x-ms-client-name": "expiresAfter"
        },
        "metadata": {
          "type": "object",
          "description": "A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length.",
          "x-nullable": true,
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "VectorStoreStatus": {
      "type": "string",
      "description": "Vector store possible status",
      "enum": [
        "expired",
        "in_progress",
        "completed"
      ],
      "x-ms-enum": {
        "name": "VectorStoreStatus",
        "modelAsString": true,
        "values": [
          {
            "name": "expired",
            "value": "expired",
            "description": "expired status indicates that this vector store has expired and is no longer available for use."
          },
          {
            "name": "inProgress",
            "value": "in_progress",
            "description": "in_progress status indicates that this vector store is still processing files."
          },
          {
            "name": "completed",
            "value": "completed",
            "description": "completed status indicates that this vector store is ready for use."
          }
        ]
      }
    },
    "VectorStoreUpdateOptions": {
      "type": "object",
      "description": "Request object for updating a vector store.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the vector store.",
          "x-nullable": true
        },
        "expires_after": {
          "type": "object",
          "description": "Details on when this vector store expires",
          "x-nullable": true,
          "allOf": [
            {
              "$ref": "#/definitions/VectorStoreExpirationPolicy"
            }
          ],
          "x-ms-client-name": "expiresAfter"
        },
        "metadata": {
          "type": "object",
          "description": "A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length.",
          "x-nullable": true,
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    }
  },
  "parameters": {
    "UpdateAssistantOptions.assistantId": {
      "name": "assistantId",
      "in": "path",
      "description": "The ID of the assistant to modify.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "UpdateAssistantThreadOptions.threadId": {
      "name": "threadId",
      "in": "path",
      "description": "The ID of the thread to modify.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    }
  }
}
