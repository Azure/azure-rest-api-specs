import "@typespec/http";
import "@typespec/rest";
import "@azure-tools/typespec-azure-core";
import "./models.persongroup.tsp";

using TypeSpec.Http;
using TypeSpec.Rest;
using Azure.Core;
using Azure.Core.Traits;
using Foundations;

namespace Face;

alias AddPersonGroupPersonFaceSummary = "Add a face to a person into a person group for face identification or verification.";
alias AddPersonGroupPersonFaceDescription = """
  To deal with an image containing multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted face feature(s) will be stored on server until PersonGroup PersonFace - Delete, PersonGroup Person - Delete or PersonGroup - Delete is called.

  Note that persistedFaceId is different from faceId generated by Face - Detect.
  ${AddFaceDescriptionInList}
  """;
alias AddLargePersonGroupPersonFaceSummary = "Add a face to a person into a large person group for face identification or verification.";
alias AddLargePersonGroupPersonFaceDescription = """
  To deal with an image containing multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted face feature(s) will be stored on server until LargePersonGroup PersonFace - Delete, LargePersonGroup Person - Delete or LargePersonGroup - Delete is called.

  Note that persistedFaceId is different from faceId generated by Face - Detect.
  ${AddFaceDescriptionInList}
  """;
alias CreatePersonSuccess = "A successful call returns a new personId created.";
alias GetPersonSuccess = "A successful call returns the person's information.";
alias GetPersonFaceSuccess = "A successful call returns target persisted face's information (persistedFaceId and userData).";

interface PersonGroupOperations {
  @summary("Create a new person group with specified personGroupId, name, user-provided userData and recognitionModel.")
  @doc("""
    A person group is a container holding the uploaded person data, including face recognition features.

    After creation, use PersonGroup Person - Create to add persons into the group, and then call PersonGroup - Train to get this group ready for Face - Identify.

    No image will be stored. Only the person's extracted face feature(s) and userData will be stored on server until PersonGroup Person - Delete or PersonGroup - Delete is called.

    'recognitionModel' should be specified to associate with this person group. The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly specify the model you need in this parameter. New faces that are added to an existing person group will use the recognition model that's already associated with the collection. Existing face feature(s) in a person group can't be updated to features extracted by another version of recognition model.

    > [!NOTE]
    >
    > *
    >   * Free-tier subscription quota: 1,000 person groups. Each holds up to 1,000 persons.
    >   * S0-tier subscription quota: 1,000,000 person groups. Each holds up to 10,000 persons.
    >   * to handle larger scale face identification problem, please consider using LargePersonGroup.
    """)
  @returnsDoc(SuccessfulCallWithEmptyBody)
  createPersonGroup is FaceCollectionResourceCreateOperation<PersonGroup>;

  @doc("Delete an existing person group with specified personGroupId. Persisted data in this person group will be deleted.")
  @returnsDoc(SuccessfulCallWithEmptyBody)
  deletePersonGroup is FaceResourceDeleteOperation<PersonGroup>;

  @doc("Retrieve person group name, userData and recognitionModel. To get person information under this personGroup, use PersonGroup Person - List.")
  @returnsDoc("A successful call returns the person group's information.")
  getPersonGroup is FaceResourceReadOperationWithReturnRecognitionModelOptions<PersonGroup>;

  @doc("Update an existing person group's name and userData. The properties keep unchanged if they are not in request body.")
  @returnsDoc(SuccessfulCallWithEmptyBody)
  updatePersonGroup is FaceResourceUpdateOperation<PersonGroup>;

  @summary("List person groups' personGroupId, name, userData and recognitionModel.")
  @doc(
    """
    Person groups are stored in alphabetical order of personGroupId.
    ${ListRequestOptionsDescriptionInList}
    """
  )
  @returnsDoc("A successful call returns an array of person groups and their information (personGroupId, name and userData).")
  getPersonGroups is FaceResourceListOperation<
    PersonGroup,
    PersonGroup,
    ReturnRecognitionModelOptions
  >;

  @doc("To check person group training status completed or still ongoing. PersonGroup Training is an asynchronous operation triggered by PersonGroup - Train API.")
  @returnsDoc("A successful call returns the person group's training status.")
  getPersonGroupTrainingStatus is FaceResourceGetTrainingStatus<PersonGroup>;

  @pollingOperation(PersonGroupOperations.getPersonGroupTrainingStatus)
  @summary("Submit a person group training task. Training is a crucial step that only a trained person group can be used by Face - Identify.")
  @doc("""
    The training task is an asynchronous task. Training time depends on the number of person entries, and their faces in a person group. It could be several seconds to minutes. To check training status, please use PersonGroup - Get Training Status.
    """)
  @returnsDoc(SuccessfulCallWithEmptyBody)
  trainPersonGroup is FaceResourceTrain<PersonGroup>;

  @summary("Create a new person in a specified person group. To add face to this person, please call PersonGroup PersonFace - Add.")
  @doc("""
    > [!NOTE]
    >
    > *
    >   * Free-tier subscription quota:
    >     * 1,000 persons in all person groups.
    >   * S0-tier subscription quota:
    >     * 10,000 persons per person group.
    >     * 1,000,000 person groups.
    >     * 100,000,000 persons in all person groups.
    """)
  @returnsDoc(CreatePersonSuccess)
  createPersonGroupPerson is FaceResourceCreateWithServiceProvidedName<
    PersonGroupPerson,
    UserDefinedFields,
    CreatePersonResult
  >;

  @doc("Delete an existing person from a person group. The persistedFaceId, userData, person name and face feature(s) in the person entry will all be deleted.")
  @returnsDoc(SuccessfulCallWithEmptyBody)
  deletePersonGroupPerson is FaceResourceDeleteOperation<PersonGroupPerson>;

  @doc("Retrieve a person's name and userData, and the persisted faceIds representing the registered person face feature(s).")
  @returnsDoc(GetPersonSuccess)
  getPersonGroupPerson is FaceResourceReadOperation<PersonGroupPerson>;

  @doc("Update name or userData of a person.")
  @returnsDoc(SuccessfulCallWithEmptyBody)
  updatePersonGroupPerson is FaceResourceUpdateOperation<PersonGroupPerson>;

  @summary("List all persons' information in the specified person group, including personId, name, userData and persistedFaceIds of registered person faces.")
  @doc(
    """
    Persons are stored in alphabetical order of personId created in PersonGroup Person - Create.
    ${ListRequestOptionsDescriptionInList}
    """
  )
  @returnsDoc("A successful call returns an array of person information that belong to the person group.")
  getPersonGroupPersons is FaceResourceListOperation<PersonGroupPerson>;

  @summary(AddPersonGroupPersonFaceSummary)
  @doc(AddPersonGroupPersonFaceDescription)
  @returnsDoc(AddFaceSuccess)
  addPersonGroupPersonFaceFromUrl is AddFaceFromUrl<PersonGroupPersonFace>;

  #suppress "@azure-tools/typespec-azure-core/byos" "It's an RPC call to detect face from an image, it doesn't store anything. There's a BYOS version of this call, but it's not this one."
  @summary(AddPersonGroupPersonFaceSummary)
  @doc(AddPersonGroupPersonFaceDescription)
  @returnsDoc(AddFaceSuccess)
  addPersonGroupPersonFace is AddFace<PersonGroupPersonFace>;

  @summary("Delete a face from a person in a person group by specified personGroupId, personId and persistedFaceId.")
  @doc("""
    Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from different persons are processed in parallel.
    """)
  @returnsDoc(SuccessfulCallWithEmptyBody)
  deletePersonGroupPersonFace is FaceResourceDeleteOperation<PersonGroupPersonFace>;

  @doc("Retrieve person face information. The persisted person face is specified by its personGroupId, personId and persistedFaceId.")
  @returnsDoc(GetPersonFaceSuccess)
  getPersonGroupPersonFace is FaceResourceReadOperation<PersonGroupPersonFace>;

  @doc("Update a person persisted face's userData field.")
  @returnsDoc(SuccessfulCallWithEmptyBody)
  updatePersonGroupPersonFace is FaceResourceUpdateOperation<
    PersonGroupPersonFace,
    FaceUserData
  >;

  @summary("Create a new large person group with user-specified largePersonGroupId, name, an optional userData and recognitionModel.")
  @doc("""
    A large person group is a container holding the uploaded person data, including the face recognition features. It can hold up to 1,000,000 entities.

    After creation, use LargePersonGroup Person - Create to add person into the group, and call LargePersonGroup - Train to get this group ready for Face - Identify.

    No image will be stored. Only the person's extracted face feature(s) and userData will be stored on server until LargePersonGroup Person - Delete or LargePersonGroup - Delete is called.

    'recognitionModel' should be specified to associate with this large person group. The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly specify the model you need in this parameter. New faces that are added to an existing large person group will use the recognition model that's already associated with the collection. Existing face feature(s) in a large person group can't be updated to features extracted by another version of recognition model.

    > [!NOTE]
    >
    > *
    >   * Free-tier subscription quota: 1,000 large person groups.
    >   * S0-tier subscription quota: 1,000,000 large person groups.
    """)
  @returnsDoc(SuccessfulCallWithEmptyBody)
  createLargePersonGroup is FaceCollectionResourceCreateOperation<LargePersonGroup>;

  @doc("Delete an existing large person group with specified personGroupId. Persisted data in this large person group will be deleted.")
  @returnsDoc(SuccessfulCallWithEmptyBody)
  deleteLargePersonGroup is FaceResourceDeleteOperation<LargePersonGroup>;

  @doc("Retrieve the information of a large person group, including its name, userData and recognitionModel. This API returns large person group information only, use LargePersonGroup Person - List instead to retrieve person information under the large person group.")
  @returnsDoc("A successful call returns the large person group's information.")
  getLargePersonGroup is FaceResourceReadOperationWithReturnRecognitionModelOptions<LargePersonGroup>;

  @doc("Update an existing large person group's name and userData. The properties keep unchanged if they are not in request body.")
  @returnsDoc(SuccessfulCallWithEmptyBody)
  updateLargePersonGroup is FaceResourceUpdateOperation<LargePersonGroup>;

  @summary("List all existing large person groups' largePersonGroupId, name, userData and recognitionModel.")
  @doc(
    """
    Large person groups are stored in alphabetical order of largePersonGroupId.
    ${ListRequestOptionsDescriptionInList}
    """
  )
  @returnsDoc("A successful call returns an array of large person groups and their information (largePersonGroupId, name and userData).")
  getLargePersonGroups is FaceResourceListOperation<
    LargePersonGroup,
    LargePersonGroup,
    ReturnRecognitionModelOptions
  >;

  @summary("To check large person group training status completed or still ongoing. LargePersonGroup Training is an asynchronous operation triggered by LargePersonGroup - Train API.")
  @doc("""
    Training time depends on the number of person entries, and their faces in a large person group. It could be in seconds, or up to half an hour for 1,000,000 persons.
    """)
  @returnsDoc("A successful call returns the large person group's training status.")
  getLargePersonGroupTrainingStatus is FaceResourceGetTrainingStatus<LargePersonGroup>;

  @pollingOperation(PersonGroupOperations.getLargePersonGroupTrainingStatus)
  @summary("Submit a large person group training task. Training is a crucial step that only a trained large person group can be used by Face - Identify.")
  @doc("""
    The training task is an asynchronous task. Training time depends on the number of person entries, and their faces in a large person group. It could be in several seconds, or up to half a hour for 1,000,000 persons. To check training completion, please use LargePersonGroup - Get Training Status.
    """)
  @returnsDoc(SuccessfulCallWithEmptyBody)
  trainLargePersonGroup is FaceResourceTrain<LargePersonGroup>;

  @summary("Create a new person in a specified large person group. To add face to this person, please call LargePersonGroup PersonFace - Add.")
  @doc("""
    > [!NOTE]
    >
    > *
    >   * Free-tier subscription quota:
    >     * 1,000 persons in all large person groups.
    >   * S0-tier subscription quota:
    >     * 1,000,000 persons per large person group.
    >     * 1,000,000 large person groups.
    >     * 1,000,000,000 persons in all large person groups. 
    """)
  @returnsDoc(CreatePersonSuccess)
  createLargePersonGroupPerson is FaceResourceCreateWithServiceProvidedName<
    LargePersonGroupPerson,
    UserDefinedFields,
    CreatePersonResult
  >;

  @doc("Delete an existing person from a large person group. The persistedFaceId, userData, person name and face feature(s) in the person entry will all be deleted.")
  @returnsDoc(SuccessfulCallWithEmptyBody)
  deleteLargePersonGroupPerson is FaceResourceDeleteOperation<LargePersonGroupPerson>;

  @doc("Retrieve a person's name and userData, and the persisted faceIds representing the registered person face feature(s).")
  @returnsDoc(GetPersonSuccess)
  getLargePersonGroupPerson is FaceResourceReadOperation<LargePersonGroupPerson>;

  @doc("Update name or userData of a person.")
  @returnsDoc(SuccessfulCallWithEmptyBody)
  updateLargePersonGroupPerson is FaceResourceUpdateOperation<LargePersonGroupPerson>;

  @summary("List all persons' information in the specified large person group, including personId, name, userData and persistedFaceIds of registered person faces.")
  @doc(
    """
    Persons are stored in alphabetical order of personId created in LargePersonGroup Person - Create.
    ${ListRequestOptionsDescriptionInList}
    """
  )
  @returnsDoc("A successful call returns an array of person information that belong to the large person group.")
  getLargePersonGroupPersons is FaceResourceListOperation<LargePersonGroupPerson>;

  @summary(AddLargePersonGroupPersonFaceSummary)
  @doc(AddLargePersonGroupPersonFaceDescription)
  @returnsDoc(AddFaceSuccess)
  addLargePersonGroupPersonFaceFromUrl is AddFaceFromUrl<LargePersonGroupPersonFace>;

  #suppress "@azure-tools/typespec-azure-core/byos" "It's an RPC call to detect face from an image, it doesn't store anything. There's a BYOS version of this call, but it's not this one."
  @summary(AddLargePersonGroupPersonFaceSummary)
  @doc(AddLargePersonGroupPersonFaceDescription)
  @returnsDoc(AddFaceSuccess)
  addLargePersonGroupPersonFace is AddFace<LargePersonGroupPersonFace>;

  @summary("Delete a face from a person in a large person group by specified largePersonGroupId, personId and persistedFaceId.")
  @doc("""
    Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from different persons are processed in parallel.
    """)
  @returnsDoc(SuccessfulCallWithEmptyBody)
  deleteLargePersonGroupPersonFace is FaceResourceDeleteOperation<LargePersonGroupPersonFace>;

  @doc("Retrieve person face information. The persisted person face is specified by its largePersonGroupId, personId and persistedFaceId.")
  @returnsDoc(GetPersonFaceSuccess)
  getLargePersonGroupPersonFace is FaceResourceReadOperation<LargePersonGroupPersonFace>;

  @doc("Update a person persisted face's userData field.")
  @returnsDoc(SuccessfulCallWithEmptyBody)
  updateLargePersonGroupPersonFace is FaceResourceUpdateOperation<
    LargePersonGroupPersonFace,
    FaceUserData
  >;
}
