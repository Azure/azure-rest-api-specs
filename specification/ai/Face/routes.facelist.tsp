import "@typespec/http";
import "@typespec/rest";
import "@azure-tools/typespec-azure-core";
import "./models.facelist.tsp";

using TypeSpec.Http;
using TypeSpec.Rest;
using Azure.Core;
using Azure.Core.Traits;
using Foundations;

namespace Face;

alias AddFaceListFaceSummary = "Add a face to a specified Face List, up to 1,000 faces.";
alias AddFaceListFaceDescription = """
  To deal with an image containing multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted face feature(s) will be stored on server until \"Delete Face List Face\" or \"Delete Face List\" is called.
  
  Note that persistedFaceId is different from faceId generated by \"Detect\".
  ${AddFaceDescriptionInList}
  """;
alias AddLargeFaceListFaceSummary = "Add a face to a specified Large Face List, up to 1,000,000 faces.";
alias AddLargeFaceListFaceDescription = """
  To deal with an image containing multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted face feature(s) will be stored on server until \"Delete Large Face List Face\" or \"Delete Large Face List\" is called.
  
  Note that persistedFaceId is different from faceId generated by \"Detect\".
  ${AddFaceDescriptionInList}
  
  > [!NOTE]
  >
  > *
  >   * Free-tier subscription quota: 1,000 faces per Large Face List.
  >   * S0-tier subscription quota: 1,000,000 faces per Large Face List.
  """;

interface FaceListOperations {
  @summary("Create an empty Face List with user-specified faceListId, name, an optional userData and recognitionModel.")
  @doc("""
    Up to 64 Face Lists are allowed in one subscription.
    
    Face List is a list of faces, up to 1,000 faces, and used by \"Find Similar From Face List\".
    
    After creation, user should use \"Add Face List Face\" to import the faces. No image will be stored. Only the extracted face feature(s) will be stored on server until \"Delete Face List\" is called.
    
    \"Find Similar\" is used for scenario like finding celebrity-like faces, similar face filtering, or as a light way face identification. But if the actual use is to identify person, please use Person Group / Large Person Group and \"Identify\".
    
    Please consider Large Face List when the face number is large. It can support up to 1,000,000 faces.
    """)
  @returnsDoc(SuccessfulCallWithEmptyBody)
  createFaceList is FaceCollectionResourceCreateOperation<FaceList>;

  @doc("Delete a specified Face List.")
  @returnsDoc(SuccessfulCallWithEmptyBody)
  deleteFaceList is FaceResourceDeleteOperation<FaceList>;

  @doc("Retrieve a Face List's faceListId, name, userData, recognitionModel and faces in the Face List.")
  @returnsDoc("A successful call returns the Face List's information.")
  getFaceList is FaceResourceReadOperationWithReturnRecognitionModelOptions<FaceList>;

  @doc("Update information of a Face List, including name and userData.")
  @returnsDoc(SuccessfulCallWithEmptyBody)
  updateFaceList is FaceResourceUpdateOperation<FaceList>;

  @doc("""
    List Face Lists' faceListId, name, userData and recognitionModel.
    
    To get face information inside Face List use \"Get Face List\".
    """)
  @returnsDoc("A successful call returns an array of Face Lists.")
  getFaceLists is Foundations.ResourceList<
    FaceList,
    ReturnRecognitionModelOptions,
    Body<FaceListItem[]>,
    ServiceTraits,
    FaceErrorResponse
  >;

  @summary(AddFaceListFaceSummary)
  @doc(AddFaceListFaceDescription)
  @returnsDoc(AddFaceSuccess)
  addFaceListFaceFromUrl is AddFaceFromUrl<FaceListFace>;

  #suppress "@azure-tools/typespec-azure-core/byos" "It's an RPC call to detect face from an image, it doesn't store anything. There's a BYOS version of this call, but it's not this one."
  @summary(AddFaceListFaceSummary)
  @doc(AddFaceListFaceDescription)
  @returnsDoc(AddFaceSuccess)
  addFaceListFace is AddFace<FaceListFace>;

  @summary("Delete a face from a Face List by specified faceListId and persistedFaceId.")
  @doc("Adding/deleting faces to/from a same Face List are processed sequentially and to/from different Face Lists are in parallel.")
  @returnsDoc(SuccessfulCallWithEmptyBody)
  deleteFaceListFace is FaceResourceDeleteOperation<FaceListFace>;

  @summary("Create an empty Large Face List with user-specified largeFaceListId, name, an optional userData and recognitionModel.")
  @doc("""
    Large Face List is a list of faces, up to 1,000,000 faces, and used by \"Find Similar From Large Face List\".
    
    After creation, user should use Add Large Face List Face to import the faces and Train Large Face List to make it ready for \"Find Similar\". No image will be stored. Only the extracted face feature(s) will be stored on server until Delete Large Face List is called.
    
    \"Find Similar\" is used for scenario like finding celebrity-like faces, similar face filtering, or as a light way face identification. But if the actual use is to identify person, please use Person Group / Large Person Group and \"Identify\".
    
    > [!NOTE]
    >
    > *
    >   * Free-tier subscription quota: 64 Large Face Lists.
    >   * S0-tier subscription quota: 1,000,000 Large Face Lists.
    """)
  @returnsDoc(SuccessfulCallWithEmptyBody)
  createLargeFaceList is FaceCollectionResourceCreateOperation<LargeFaceList>;

  @summary("Delete a face from a Large Face List by specified largeFaceListId and persistedFaceId.")
  @doc("Adding/deleting faces to/from a same Large Face List are processed sequentially and to/from different Large Face Lists are in parallel.")
  @returnsDoc(SuccessfulCallWithEmptyBody)
  deleteLargeFaceList is FaceResourceDeleteOperation<LargeFaceList>;

  @doc("Retrieve a Large Face List's largeFaceListId, name, userData and recognitionModel.")
  @returnsDoc("A successful call returns the Large Face List's information.")
  getLargeFaceList is FaceResourceReadOperationWithReturnRecognitionModelOptions<LargeFaceList>;

  @doc("Update information of a Large Face List, including name and userData.")
  @returnsDoc(SuccessfulCallWithEmptyBody)
  updateLargeFaceList is FaceResourceUpdateOperation<LargeFaceList>;

  @summary("List Large Face Lists' information of largeFaceListId, name, userData and recognitionModel.")
  @doc("""
    To get face information inside largeFaceList use \"Get Large Face List Face\".
    
    Large Face Lists are stored in alphabetical order of largeFaceListId.
    ${ListRequestOptionsDescriptionInList}
    """)
  @returnsDoc("A successful call returns an array of Large Face Lists and their information (largeFaceListId, name and userData).")
  getLargeFaceLists is FaceResourceListOperation<
    LargeFaceList,
    LargeFaceList,
    ReturnRecognitionModelOptions
  >;

  @doc("""
    To check the Large Face List training status completed or still ongoing. Large Face List training is an asynchronous operation triggered by \"Train Large Face List\".
    
    Training time depends on the number of face entries in a Large Face List. It could be in seconds, or up to half an hour for 1,000,000 faces.
    """)
  @returnsDoc("A successful call returns the Large Face List's training status.")
  getLargeFaceListTrainingStatus is FaceResourceGetTrainingStatus<LargeFaceList>;

  @summary("Submit a Large Face List training task.")
  @doc("""
    
    Training is a crucial step that only a trained Large Face List can be used by \"Find Similar From Large Face List\".
    
    The training task is an asynchronous task. Training time depends on the number of face entries in a Large Face List. It could be in seconds, or up to half an hour for 1,000,000 faces. To check training completion, please use \"Get Large Face List Training Status\".
    """)
  @returnsDoc(SuccessfulCallWithEmptyBody)
  @pollingOperation(FaceListOperations.getLargeFaceListTrainingStatus)
  trainLargeFaceList is FaceResourceTrain<LargeFaceList>;

  @summary(AddLargeFaceListFaceSummary)
  @doc(AddLargeFaceListFaceDescription)
  @returnsDoc(AddFaceSuccess)
  addLargeFaceListFaceFromUrl is AddFaceFromUrl<LargeFaceListFace>;

  #suppress "@azure-tools/typespec-azure-core/byos" "It's an RPC call to detect face from an image, it doesn't store anything. There's a BYOS version of this call, but it's not this one."
  @summary(AddLargeFaceListFaceSummary)
  @doc(AddLargeFaceListFaceDescription)
  @returnsDoc(AddFaceSuccess)
  addLargeFaceListFace is AddFace<LargeFaceListFace>;

  @doc("Delete a face from a Large Face List by specified largeFaceListId and persistedFaceId.")
  @returnsDoc(SuccessfulCallWithEmptyBody)
  deleteLargeFaceListFace is FaceResourceDeleteOperation<LargeFaceListFace>;

  @doc("Retrieve persisted face in Large Face List by largeFaceListId and persistedFaceId.")
  @returnsDoc("A successful call returns target persisted face's information (persistedFaceId and userData).")
  getLargeFaceListFace is FaceResourceReadOperation<LargeFaceListFace>;

  @doc("Update a specified face's userData field in a Large Face List by its persistedFaceId.")
  @returnsDoc(SuccessfulCallWithEmptyBody)
  updateLargeFaceListFace is FaceResourceUpdateOperation<
    LargeFaceListFace,
    FaceUserData
  >;

  @summary("List faces' persistedFaceId and userData in a specified Large Face List.")
  @doc("""
    Faces are stored in alphabetical order of persistedFaceId created in \"Add Large Face List Face\".
    ${ListRequestOptionsDescriptionInList}
    """)
  @returnsDoc("A successful call returns an array of persisted faces and their information (persistedFaceId and userData).")
  getLargeFaceListFaces is FaceResourceListOperation<LargeFaceListFace>;
}
