import "@typespec/http";
import "@typespec/rest";
import "@azure-tools/typespec-azure-core";
import "./models.persondirectory.tsp";

using TypeSpec.Http;
using TypeSpec.Rest;
using Azure.Core;
using Azure.Core.Traits;
using Foundations;

namespace Face;

#suppress "@azure-tools/typespec-azure-core/long-running-polling-operation-required" "This is a template, polling operation should be defined in the operation instance."
@summary("Add a face to a person (see PersonDirectory Person - Create) for face identification or verification.")
@doc(
  """
  To deal with an image containing multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted face feature(s) will be stored on server until PersonDirectory Person - Delete Face or PersonDirectory Person - Delete is called.

  Note that persistedFaceId is different from faceId generated by Face - Detect.
  ${AddFaceDescriptionInList}
  *
    * Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from different persons are processed in parallel.
    * This is a long running operation. Use Response Header "Operation-Location" to determine when the AddFace operation has successfully propagated for future requests to Face - Identify. For further information about Operation-Locations see 'Operations - Get Status'.
  """
)
@returnsDoc(PersonModificationAccepted)
@sharedRoute
@createsResource(PersonDirectoryFace)
op AddPersonFaceOperation<T extends TypeSpec.Reflection.Model> is Foundations.ResourceCollectionOperation<
  PersonDirectoryFace,
  AddFaceOptions & T,
  AddFaceResult &
    TypeSpec.Http.AcceptedResponse & {
      @header("operation-Location")
      operationLocation: ResourceLocation<FaceOperationStatus>;

      @header("Location")
      location: ResourceLocation<PersonDirectoryPerson>;
    },
  ServiceTraits,
  FaceErrorResponse
>;

@pollingOperation(getFaceOperationStatus)
@deletesResource(TResource)
op FaceResourceDeleteLongRunningOperation<TResource extends TypeSpec.Reflection.Model> is Foundations.ResourceOperation<
  TResource,
  {},
  TypeSpec.Http.AcceptedResponse & {
    @pollingLocation
    @header("operation-Location")
    operationLocation: ResourceLocation<FaceOperationStatus>;
  },
  ServiceTraits,
  FaceErrorResponse
>;

#suppress "@azure-tools/typespec-azure-core/long-running-polling-operation-required" "Doesn't fit in generated long-running operation"
op DynamicPersonGroupLongRunningOperation<TParams extends TypeSpec.Reflection.Model> is Foundations.ResourceOperation<
  DynamicPersonGroup,
  TParams,
  TypeSpec.Http.OkResponse | Foundations.AcceptedResponse<{
    @header("operation-Location")
    operationLocation: ResourceLocation<FaceOperationStatus>;
  }>,
  ServiceTraits,
  FaceErrorResponse
>;

@doc("Get status of a long running operation.")
@returnsDoc("A successful call returns the long running operation status.")
op getFaceOperationStatus is FaceResourceReadOperation<FaceOperationStatus>;

alias PersonModificationAccepted = "A successful call returns an empty response body. The service has accepted the request and will start processing soon. The client can query the operation status and result using the URL specified in the 'Operation-Location' response header. The URL expires in 48 hours.";
alias DynamicPersonGroupModificationAccepted = "A successful call returns an empty response body. The service has accepted the request and will start processing soon. The client can query the operation status and result using the URL specified in the 'Operation-Location' response header. The URL expires in 48 hours. The URL provides the status of when PersonDirectory Person - List DynamicPersonGroup References will return the changes made in this request.";
interface PersonDirectoryOperations {
  #suppress "@azure-tools/typespec-azure-core/long-running-polling-operation-required" "Doesn't fit in generated long-running operation"
  @doc("Creates a new person in a Person Directory. To add face to this person, please call PersonDirectory Person - Add Face.")
  @returnsDoc(PersonModificationAccepted)
  @createsResource(PersonDirectoryPerson)
  createPerson is Foundations.ResourceCollectionOperation<
    PersonDirectoryPerson,
    UserDefinedFields,
    CreatePersonResult &
      TypeSpec.Http.AcceptedResponse & {
        @header("operation-Location")
        operationLocation: ResourceLocation<FaceOperationStatus>;

        @header("Location")
        location: ResourceLocation<PersonDirectoryPerson>;
      },
    ServiceTraits,
    FaceErrorResponse
  >;

  @doc("Delete an existing person from Person Directory. The persistedFaceId(s), userData, person name and face feature(s) in the person entry will all be deleted.")
  @returnsDoc(PersonModificationAccepted)
  deletePerson is FaceResourceDeleteLongRunningOperation<PersonDirectoryPerson>;

  @doc("Retrieve a person's name and userData from Person Directory.")
  @returnsDoc("A successful call returns the person's information.")
  getPerson is FaceResourceReadOperation<PersonDirectoryPerson>;

  @doc("Update name or userData of a person.")
  @returnsDoc(SuccessfulCallWithEmptyBody)
  updatePerson is FaceResourceUpdateOperation<PersonDirectoryPerson>;

  @doc(
    """
    Persons are stored in alphabetical order of personId created in PersonDirectory Person - Create.
    ${ListRequestOptionsDescriptionInList}
    """
  )
  @returnsDoc("A successful call returns an array of Person Directory Persons contained in the Dynamic Person Group.")
  @summary("List all persons' information in Person Directory, including personId, name, and userData.")
  getPersons is FaceResourceListOperation<PersonDirectoryPerson>;

  @summary("List all Dynamic Person Groups a person has been referenced by in Person Directory.")
  @doc(
    """
    Dynamic Person Groups are stored in alphabetical order of Dynamic Person Group ID created in PersonDirectory DynamicPersonGroup - Create.
    ${ListRequestOptionsDescriptionInList}
    """
  )
  @returnsDoc("A successful call returns an array of dynamicPersonGroups information that reference the provided personId.")
  @get
  @action("dynamicPersonGroupReferences")
  @actionSeparator("/")
  getDynamicPersonGroupReferences is Foundations.ResourceOperation<
    PersonDirectoryPerson,
    ListRequestOptions,
    ListGroupReferenceResult,
    ServiceTraits,
    FaceErrorResponse
  >;

  #suppress "@azure-tools/typespec-azure-core/byos" "It's an RPC call to detect face from an image, it doesn't store anything. There's a BYOS version of this call, but it's not this one."
  #suppress "@azure-tools/typespec-azure-core/long-running-polling-operation-required" "Doesn't fit in generated long-running operation"
  addPersonFace is AddPersonFaceOperation<{
    @doc("The format of the HTTP payload.")
    @header
    contentType: "application/octet-stream";

    @doc("The image to be analyzed")
    @body
    imageContent: bytes;
  }>;

  #suppress "@azure-tools/typespec-azure-core/byos" "It's an RPC call to detect face from an image, it doesn't store anything. There's a BYOS version of this call, but it's not this one."
  #suppress "@azure-tools/typespec-azure-core/long-running-polling-operation-required" "Doesn't fit in generated long-running operation"
  addPersonFaceFromUrl is AddPersonFaceOperation<{
    @doc("URL of input image.")
    url: url;
  }>;

  @summary("Delete a face from a person in Person Directory by specified personId and persistedFaceId.")
  @doc("""
    Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from different persons are processed in parallel.
    """)
  @returnsDoc(PersonModificationAccepted)
  deletePersonFace is FaceResourceDeleteLongRunningOperation<PersonDirectoryFace>;

  @doc("""
    Retrieve person face information. The persisted person face is specified by its personId. recognitionModel, and persistedFaceId.
    """)
  @returnsDoc("A successful call returns target persisted face's information (persistedFaceId and userData).")
  getPersonFace is FaceResourceReadOperation<PersonDirectoryFace>;

  @doc("Update a persisted face's userData field of a person.")
  @returnsDoc(SuccessfulCallWithEmptyBody)
  @updatesResource(PersonDirectoryFace)
  updatePersonFace is FaceResourceUpdateOperation<
    PersonDirectoryFace,
    FaceUserData
  >;

  @doc("Retrieve a person's persistedFaceIds representing the registered person face feature(s).")
  @returnsDoc("A successful call returns an array of persistedFaceIds and and a person ID.")
  getPersonFaces is Foundations.ResourceList<
    PersonDirectoryFace,
    {},
    ListFaceResult,
    ServiceTraits,
    FaceErrorResponse
  >;

  #suppress "@azure-tools/typespec-azure-core/long-running-polling-operation-required" "Doesn't fit in generated long-running operation"
  @summary("Creates a new Dynamic Person Group with specified dynamicPersonGroupId, name, and user-provided userData.")
  @doc("""
    A Dynamic Person Group is a container that references PersonDirectory Person - Create. After creation, use PersonDirectory DynamicPersonGroup - Update to add or remove persons into the Dynamic Person Group.

    DynamicPersonGroup and UserData will be stored on server until PersonDirectory DynamicPersonGroup - Delete is called. Use Face - Identify with the dynamicPersonGroupId parameter to identify against persons.

    No image will be stored. Only the person's extracted face feature(s) and userData will be stored on server until PersonDirectory Person - Delete or PersonDirectory Person - Delete Face is called.

    'recognitionModel' does not need to be specified with Dynamic Person Groups. Dynamic Person Groups are references to PersonDirectory Person - Create and therefore work with most all 'recognitionModels'. The faceId's provided during Face - Identify determine the 'recognitionModel' used.
    """)
  @returnsDoc(DynamicPersonGroupModificationAccepted)
  @put
  createDynamicPersonGroup is DynamicPersonGroupLongRunningOperation<CreateDynamicPersonGroupOptions>;

  @summary("Deletes an existing Dynamic Person Group with specified dynamicPersonGroupId.")
  @doc("""
    Deleting this Dynamic Person Group only delete the references to persons data. To delete actual person see PersonDirectory Person - Delete.
    """)
  @returnsDoc(DynamicPersonGroupModificationAccepted)
  deleteDynamicPersonGroup is FaceResourceDeleteLongRunningOperation<DynamicPersonGroup>;

  @doc("""
    This API returns Dynamic Person Group information only, use PersonDirectory DynamicPersonGroup - List Persons instead to retrieve person information under the Dynamic Person Group.
    """)
  @summary("Retrieve the information of a Dynamic Person Group, including its name and userData.")
  @returnsDoc("A successful call returns the Dynamic Person Group's information.")
  getDynamicPersonGroup is FaceResourceReadOperation<DynamicPersonGroup>;

  #suppress "@azure-tools/typespec-azure-core/long-running-polling-operation-required" "Doesn't fit in generated long-running operation"
  @summary("Update the name or userData of an existing Dynamic Person Group, and manage its members by adding or removing persons.")
  @doc("The properties keep unchanged if they are not in request body.")
  @returnsDoc(DynamicPersonGroupModificationAccepted)
  @patch
  updateDynamicPersonGroup is DynamicPersonGroupLongRunningOperation<UpdateDynamicPersonGroupOptions>;

  @summary("List all existing Dynamic Person Groups by dynamicPersonGroupId along with name and userData.")
  @doc(
    """
    Dynamic Person Groups are stored in alphabetical order of dynamicPersonGroupId.
    ${ListRequestOptionsDescriptionInList}
    """
  )
  @returnsDoc("A successful call returns an array of Dynamic Person Groups and their information (dynamicPersonGroupId, name and userData).")
  getDynamicPersonGroups is FaceResourceListOperation<DynamicPersonGroup>;

  @summary("List all persons in the specified Dynamic Person Group.")
  @doc(
    """
    Persons are stored in alphabetical order of personId created in PersonDirectory Person - Create.
    ${ListRequestOptionsDescriptionInList}
    """
  )
  @returnsDoc("A successful call returns an array of person information in the Person Directory.")
  @get
  @action("persons")
  @actionSeparator("/")
  getDynamicPersonGroupPersons is Foundations.ResourceOperation<
    DynamicPersonGroup,
    ListRequestOptions,
    ListPersonResult,
    ServiceTraits,
    FaceErrorResponse
  >;
}
