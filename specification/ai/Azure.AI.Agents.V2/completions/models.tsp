import "@typespec/openapi";
import "../common/models.tsp";
using TypeSpec.OpenAPI;
namespace OpenAI;
model CreateCompletionRequest {
  /** ID of the model to use. You can use the [List models](https://platform.openai.com/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](https://platform.openai.com/docs/models) for descriptions of them. */
  @extension("x-oaiTypeLabel", "string")
  `model`: string | "gpt-3.5-turbo-instruct" | "davinci-002" | "babbage-002";

  /**The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.

  Note that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document.*/
  prompt: string | string[] | integer[] | integer[][] | null;

  /**Generates `best_of` completions server-side and returns the "best" (the one with the highest log probability per token). Results cannot be streamed.

  When used with `n`, `best_of` controls the number of candidate completions and `n` specifies how many to return â€“ `best_of` must be greater than `n`.

  **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.*/
  @maxValue(20)
  @minValue(0)
  best_of?: integer | null = 1;

  /** Echo back the prompt in addition to the completion */
  echo?: boolean | null;

  /**Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.

  [See more information about frequency and presence penalties.](https://platform.openai.com/docs/guides/text-generation)*/
  @maxValue(2)
  @minValue(-2)
  frequency_penalty?: numeric | null;

  /**Modify the likelihood of specified tokens appearing in the completion.

  Accepts a JSON object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.

  As an example, you can pass `{"50256": -100}` to prevent the <|endoftext|> token from being generated.*/
  @extension("x-oaiTypeLabel", "map")
  logit_bias?: Record<integer> | null;

  /**Include the log probabilities on the `logprobs` most likely output tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.

  The maximum value for `logprobs` is 5.*/
  @maxValue(5)
  @minValue(0)
  logprobs?: integer | null;

  /**The maximum number of [tokens](/tokenizer) that can be generated in the completion.

  The token count of your prompt plus `max_tokens` cannot exceed the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.*/
  @minValue(0)
  max_tokens?: integer | null = 16;

  /**How many completions to generate for each prompt.

  **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.*/
  @maxValue(128)
  @minValue(1)
  n?: integer | null = 1;

  /**Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.

  [See more information about frequency and presence penalties.](https://platform.openai.com/docs/guides/text-generation)*/
  @maxValue(2)
  @minValue(-2)
  presence_penalty?: numeric | null;

  /**If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.

  Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.*/
  seed?: int64 | null;

  stop?: StopConfiguration;

  /** Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions). */
  stream?: boolean | null;

  stream_options?: ChatCompletionStreamOptions;

  /**The suffix that comes after a completion of inserted text.

  This parameter is only supported for `gpt-3.5-turbo-instruct`.*/
  suffix?: string | null;

  /**What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.

  We generally recommend altering this or `top_p` but not both.*/
  @maxValue(2)
  @minValue(0)
  temperature?: numeric | null = 1;

  /**An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.

  We generally recommend altering this or `temperature` but not both.*/
  @maxValue(1)
  @minValue(0)
  top_p?: numeric | null = 1;

  /** A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#end-user-ids). */
  user?: string;
}

/** Represents a completion response from the API. Note: both the streamed and non-streamed response objects share the same shape (unlike the chat endpoint). */
@extension(
  "x-oaiMeta",
  #{
    name: "The completion object",
    legacy: true,
    example: "{\n  \"id\": \"cmpl-uqkvlQyYK7bGYrRHQ0eXlWi7\",\n  \"object\": \"text_completion\",\n  \"created\": 1589478378,\n  \"model\": \"gpt-4-turbo\",\n  \"choices\": [\n    {\n      \"text\": \"\\n\\nThis is indeed a test\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"finish_reason\": \"length\"\n    }\n  ],\n  \"usage\": {\n    \"prompt_tokens\": 5,\n    \"completion_tokens\": 7,\n    \"total_tokens\": 12\n  }\n}\n",
  }
)
model CreateCompletionResponse {
  /** A unique identifier for the completion. */
  id: string;

  /** The list of completion choices the model generated for the input prompt. */
  choices: {
    finish_reason: "stop" | "length" | "content_filter";
    index: integer;
    logprobs: {
      text_offset?: integer[];
      token_logprobs?: numeric[];
      tokens?: string[];
      top_logprobs?: Record<numeric>[];
    } | null;
    text: string;
  }[];

  /** The Unix timestamp (in seconds) of when the completion was created. */
  created: integer;

  /** The model used for completion. */
  `model`: string;

  /**This fingerprint represents the backend configuration that the model runs with.

  Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.*/
  system_fingerprint?: string;

  /** The object type, which is always "text_completion" */
  @extension("x-stainless-const", true)
  object: "text_completion";

  usage?: CompletionUsage;
}
