{
  "swagger": "2.0",
  "info": {
    "title": "ChaosManagementClient",
    "version": "2023-04-15-preview",
    "description": "Chaos Management Client",
    "x-typespec-generated": [
      {
        "emitter": "@azure-tools/typespec-autorest"
      }
    ]
  },
  "schemes": [
    "https"
  ],
  "host": "management.azure.com",
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ],
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "description": "Azure Active Directory OAuth2 Flow.",
      "flow": "implicit",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      }
    }
  },
  "tags": [
    {
      "name": "Operations"
    },
    {
      "name": "Capabilities"
    },
    {
      "name": "Targets"
    },
    {
      "name": "CapabilityTypes"
    },
    {
      "name": "TargetTypes"
    },
    {
      "name": "Experiments"
    },
    {
      "name": "ExperimentStatuses"
    },
    {
      "name": "ExperimentExecutionDetails"
    }
  ],
  "paths": {
    "/providers/Azure.ResourceManager.Chaos/operations": {
      "get": {
        "operationId": "Operations_List",
        "tags": [
          "Operations"
        ],
        "description": "List the operations for the provider",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/OperationListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/locations/{location}/providers/Azure.ResourceManager.Chaos/targetTypes": {
      "get": {
        "operationId": "TargetTypes_ListByLocation",
        "tags": [
          "TargetTypes"
        ],
        "description": "Get a list of Target Type resources for given location.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/LocationParameter"
          },
          {
            "name": "continuationToken",
            "in": "query",
            "description": "String that sets the continuation token.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/TargetTypeListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/locations/{location}/providers/Azure.ResourceManager.Chaos/targetTypes/{targetTypeName}": {
      "get": {
        "operationId": "TargetTypes_Get",
        "tags": [
          "TargetTypes"
        ],
        "description": "Get a Target Type resources for given location.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/LocationParameter"
          },
          {
            "name": "targetTypeName",
            "in": "path",
            "description": "String that represents a Target Type resource name.",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_\\-\\.]+$"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/TargetType"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/locations/{location}/providers/Azure.ResourceManager.Chaos/targetTypes/{targetTypeName}/capabilityTypes": {
      "get": {
        "operationId": "CapabilityTypes_ListByTargetType",
        "tags": [
          "CapabilityTypes"
        ],
        "description": "Get a list of Capability Type resources for given Target Type and location.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/LocationParameter"
          },
          {
            "name": "continuationToken",
            "in": "query",
            "description": "String that sets the continuation token.",
            "required": false,
            "type": "string"
          },
          {
            "name": "targetTypeName",
            "in": "path",
            "description": "String that represents a Target Type resource name.",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_\\-\\.]+$"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/CapabilityTypeListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/locations/{location}/providers/Azure.ResourceManager.Chaos/targetTypes/{targetTypeName}/capabilityTypes/{capabilityTypeName}": {
      "get": {
        "operationId": "CapabilityTypes_Get",
        "tags": [
          "CapabilityTypes"
        ],
        "description": "Get a Capability Type resource for given Target Type and location.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/LocationParameter"
          },
          {
            "name": "targetTypeName",
            "in": "path",
            "description": "String that represents a Target Type resource name.",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_\\-\\.]+$"
          },
          {
            "name": "capabilityTypeName",
            "in": "path",
            "description": "String that represents a Capability Type resource name.",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9\\-\\.]+-\\d\\.\\d$"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/CapabilityType"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Azure.ResourceManager.Chaos/experiments": {
      "get": {
        "operationId": "Experiments_ListAll",
        "tags": [
          "Experiments"
        ],
        "description": "Get a list of Experiment resources in a subscription.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/ExperimentListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.Chaos/experiments": {
      "get": {
        "operationId": "Experiments_ListByResourceGroup",
        "tags": [
          "Experiments"
        ],
        "description": "Get a list of Experiment resources in a resource group.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "running",
            "in": "query",
            "description": "Optional value that indicates whether to filter results based on if the Experiment is currently running. If null, then the results will not be filtered.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "continuationToken",
            "in": "query",
            "description": "String that sets the continuation token.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/ExperimentListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.Chaos/experiments/{experimentName}": {
      "get": {
        "operationId": "Experiments_Get",
        "tags": [
          "Experiments"
        ],
        "description": "Get a Experiment resource.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "experimentName",
            "in": "path",
            "description": "String that represents a Experiment resource name.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "pattern": "^[^<>%&:?#/\\\\]+$"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/Experiment"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "operationId": "Experiments_CreateOrUpdate",
        "tags": [
          "Experiments"
        ],
        "description": "Create or update a Experiment resource.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "experimentName",
            "in": "path",
            "description": "String that represents a Experiment resource name.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "pattern": "^[^<>%&:?#/\\\\]+$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Experiment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'Experiment' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/Experiment"
            }
          },
          "201": {
            "description": "Resource 'Experiment' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/Experiment"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "operationId": "Experiments_Update",
        "tags": [
          "Experiments"
        ],
        "description": "The operation to update an experiment.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "experimentName",
            "in": "path",
            "description": "String that represents a Experiment resource name.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "pattern": "^[^<>%&:?#/\\\\]+$"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExperimentUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/Experiment"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "operationId": "Experiments_Delete",
        "tags": [
          "Experiments"
        ],
        "description": "Delete a Experiment resource.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "experimentName",
            "in": "path",
            "description": "String that represents a Experiment resource name.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "pattern": "^[^<>%&:?#/\\\\]+$"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "204": {
            "description": "Resource deleted successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.Chaos/experiments/{experimentName}/cancel": {
      "post": {
        "operationId": "Experiments_Cancel",
        "tags": [
          "Experiments"
        ],
        "description": "Cancel a running Experiment resource.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "experimentName",
            "in": "path",
            "description": "String that represents a Experiment resource name.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "pattern": "^[^<>%&:?#/\\\\]+$"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The content of the action request",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Action completed successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.Chaos/experiments/{experimentName}/executionDetails": {
      "get": {
        "operationId": "ExperimentExecutionDetails_ListByExperiment",
        "tags": [
          "ExperimentExecutionDetails"
        ],
        "description": "Get a list of execution details of a Experiment resource.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "experimentName",
            "in": "path",
            "description": "String that represents a Experiment resource name.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "pattern": "^[^<>%&:?#/\\\\]+$"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/ExperimentExecutionDetailListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.Chaos/experiments/{experimentName}/executionDetails/{executionDetailsId}": {
      "get": {
        "operationId": "ExperimentExecutionDetails_GetExecutionDetails",
        "tags": [
          "ExperimentExecutionDetails"
        ],
        "description": "Get an execution detail of a Experiment resource.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "experimentName",
            "in": "path",
            "description": "String that represents a Experiment resource name.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "pattern": "^[^<>%&:?#/\\\\]+$"
          },
          {
            "name": "executionDetailsId",
            "in": "path",
            "description": "GUID that represents a Experiment execution detail.",
            "required": true,
            "type": "string",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/ExperimentExecutionDetail"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.Chaos/experiments/{experimentName}/start": {
      "post": {
        "operationId": "Experiments_Start",
        "tags": [
          "Experiments"
        ],
        "description": "Start a Experiment resource.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "experimentName",
            "in": "path",
            "description": "String that represents a Experiment resource name.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "pattern": "^[^<>%&:?#/\\\\]+$"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The content of the action request",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Action completed successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.Chaos/experiments/{experimentName}/statuses": {
      "get": {
        "operationId": "ExperimentStatuses_ListByExperiment",
        "tags": [
          "ExperimentStatuses"
        ],
        "description": "Get a list of statuses of a Experiment resource.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "experimentName",
            "in": "path",
            "description": "String that represents a Experiment resource name.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "pattern": "^[^<>%&:?#/\\\\]+$"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/ExperimentStatusListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.Chaos/experiments/{experimentName}/statuses/{statusId}": {
      "get": {
        "operationId": "ExperimentStatuses_GetStatus",
        "tags": [
          "ExperimentStatuses"
        ],
        "description": "Get a status of a Experiment resource.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "experimentName",
            "in": "path",
            "description": "String that represents a Experiment resource name.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "pattern": "^[^<>%&:?#/\\\\]+$"
          },
          {
            "name": "statusId",
            "in": "path",
            "description": "GUID that represents a Experiment status.",
            "required": true,
            "type": "string",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/ExperimentStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.Chaos/targets": {
      "get": {
        "operationId": "Targets_ListByResourceGroup",
        "tags": [
          "Targets"
        ],
        "description": "Get a list of Target resources that extend a tracked regional resource.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "continuationToken",
            "in": "query",
            "description": "String that sets the continuation token.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/TargetListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.Chaos/targets/{targetName}": {
      "get": {
        "operationId": "Targets_Get",
        "tags": [
          "Targets"
        ],
        "description": "Get a Target resource that extends a tracked regional resource.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "targetName",
            "in": "path",
            "description": "String that represents a Target resource name.",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_\\-\\.]+$"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/Target"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "operationId": "Targets_CreateOrUpdate",
        "tags": [
          "Targets"
        ],
        "description": "Create or update a Target resource that extends a tracked regional resource.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "targetName",
            "in": "path",
            "description": "String that represents a Target resource name.",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_\\-\\.]+$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Target"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'Target' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/Target"
            }
          },
          "201": {
            "description": "Resource 'Target' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/Target"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "operationId": "Targets_Delete",
        "tags": [
          "Targets"
        ],
        "description": "Delete a Target resource that extends a tracked regional resource.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "targetName",
            "in": "path",
            "description": "String that represents a Target resource name.",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_\\-\\.]+$"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "204": {
            "description": "Resource deleted successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.Chaos/targets/{targetName}/capabilities": {
      "get": {
        "operationId": "Capabilities_ListByTarget",
        "tags": [
          "Capabilities"
        ],
        "description": "Get a list of Capability resources that extend a Target resource..",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "continuationToken",
            "in": "query",
            "description": "String that sets the continuation token.",
            "required": false,
            "type": "string"
          },
          {
            "name": "targetName",
            "in": "path",
            "description": "String that represents a Target resource name.",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_\\-\\.]+$"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/CapabilityListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.Chaos/targets/{targetName}/capabilities/{capabilityName}": {
      "get": {
        "operationId": "Capabilities_Get",
        "tags": [
          "Capabilities"
        ],
        "description": "Get a Capability resource that extends a Target resource.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "targetName",
            "in": "path",
            "description": "String that represents a Target resource name.",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_\\-\\.]+$"
          },
          {
            "name": "capabilityName",
            "in": "path",
            "description": "String that represents a Capability resource name.",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9\\-\\.]+-\\d\\.\\d$"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/Capability"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "operationId": "Capabilities_CreateOrUpdate",
        "tags": [
          "Capabilities"
        ],
        "description": "Create or update a Capability resource that extends a Target resource.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "targetName",
            "in": "path",
            "description": "String that represents a Target resource name.",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_\\-\\.]+$"
          },
          {
            "name": "capabilityName",
            "in": "path",
            "description": "String that represents a Capability resource name.",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9\\-\\.]+-\\d\\.\\d$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Capability"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'Capability' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/Capability"
            }
          },
          "201": {
            "description": "Resource 'Capability' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/Capability"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "operationId": "Capabilities_Delete",
        "tags": [
          "Capabilities"
        ],
        "description": "Delete a Capability that extends a Target resource.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "targetName",
            "in": "path",
            "description": "String that represents a Target resource name.",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_\\-\\.]+$"
          },
          {
            "name": "capabilityName",
            "in": "path",
            "description": "String that represents a Capability resource name.",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9\\-\\.]+-\\d\\.\\d$"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "204": {
            "description": "Resource deleted successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Action": {
      "type": "object",
      "description": "Model that represents the base action model.",
      "properties": {
        "type": {
          "type": "string",
          "description": "Discriminator property for Action."
        },
        "name": {
          "type": "string",
          "description": "String that represents a Capability URN.",
          "maxLength": 2048
        }
      },
      "discriminator": "type",
      "required": [
        "type",
        "name"
      ]
    },
    "ActionStatus": {
      "type": "object",
      "description": "Model that represents the an action and its status.",
      "properties": {
        "actionName": {
          "type": "string",
          "description": "The name of the action status.",
          "readOnly": true
        },
        "actionId": {
          "type": "string",
          "description": "The id of the action status.",
          "readOnly": true
        },
        "status": {
          "type": "string",
          "description": "The status of the action.",
          "readOnly": true
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "description": "String that represents the start time of the action.",
          "readOnly": true
        },
        "endTime": {
          "type": "string",
          "format": "date-time",
          "description": "String that represents the end time of the action.",
          "readOnly": true
        },
        "targets": {
          "type": "array",
          "description": "The array of targets.",
          "items": {
            "$ref": "#/definitions/ExperimentExecutionActionTargetDetailsProperties"
          },
          "readOnly": true,
          "x-ms-identifiers": []
        }
      }
    },
    "ActionType": {
      "type": "string",
      "enum": [
        "Internal"
      ],
      "x-ms-enum": {
        "name": "ActionType",
        "modelAsString": true
      }
    },
    "Branch": {
      "type": "object",
      "description": "Model that represents a branch in the step.",
      "properties": {
        "name": {
          "type": "string",
          "description": "String of the branch name.",
          "minLength": 1
        },
        "actions": {
          "type": "array",
          "description": "List of actions.",
          "items": {
            "$ref": "#/definitions/Action"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "name",
        "actions"
      ]
    },
    "BranchStatus": {
      "type": "object",
      "description": "Model that represents the a list of actions and action statuses.",
      "properties": {
        "branchName": {
          "type": "string",
          "description": "The name of the branch status.",
          "readOnly": true
        },
        "branchId": {
          "type": "string",
          "description": "The id of the branch status.",
          "readOnly": true
        },
        "status": {
          "type": "string",
          "description": "The status of the branch.",
          "readOnly": true
        },
        "actions": {
          "type": "array",
          "description": "The array of actions.",
          "items": {
            "$ref": "#/definitions/ActionStatus"
          },
          "readOnly": true,
          "x-ms-identifiers": []
        }
      }
    },
    "Capability": {
      "type": "object",
      "description": "Model that represents a Capability resource.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/CapabilityProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ProxyResource"
        }
      ]
    },
    "CapabilityListResult": {
      "type": "object",
      "description": "The response of a Capability list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The Capability items on this page",
          "items": {
            "$ref": "#/definitions/Capability"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "CapabilityProperties": {
      "type": "object",
      "description": "Model that represents the Capability properties model.",
      "properties": {
        "publisher": {
          "type": "string",
          "description": "String of the Publisher that this Capability extends.",
          "readOnly": true
        },
        "targetType": {
          "type": "string",
          "description": "String of the Target Type that this Capability extends.",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "description": "Localized string of the description.",
          "readOnly": true
        },
        "parametersSchema": {
          "type": "string",
          "description": "URL to retrieve JSON schema of the Capability parameters.",
          "maxLength": 2048,
          "readOnly": true
        },
        "urn": {
          "type": "string",
          "description": "String of the URN for this Capability Type.",
          "maxLength": 2048,
          "readOnly": true
        }
      }
    },
    "CapabilityType": {
      "type": "object",
      "description": "Model that represents a Capability Type resource.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/CapabilityTypeProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ProxyResource"
        }
      ]
    },
    "CapabilityTypeListResult": {
      "type": "object",
      "description": "The response of a CapabilityType list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The CapabilityType items on this page",
          "items": {
            "$ref": "#/definitions/CapabilityType"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "CapabilityTypeProperties": {
      "type": "object",
      "description": "Model that represents the Capability Type properties model.",
      "properties": {
        "publisher": {
          "type": "string",
          "description": "String of the Publisher that this Capability Type extends.",
          "readOnly": true
        },
        "targetType": {
          "type": "string",
          "description": "String of the Target Type that this Capability Type extends.",
          "readOnly": true
        },
        "displayName": {
          "type": "string",
          "description": "Localized string of the display name.",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "description": "Localized string of the description.",
          "readOnly": true
        },
        "parametersSchema": {
          "type": "string",
          "description": "URL to retrieve JSON schema of the Capability Type parameters.",
          "maxLength": 2048,
          "readOnly": true
        },
        "urn": {
          "type": "string",
          "description": "String of the URN for this Capability Type.",
          "maxLength": 2048,
          "readOnly": true
        },
        "kind": {
          "type": "string",
          "description": "String of the kind of this Capability Type.",
          "readOnly": true
        },
        "azureRbacActions": {
          "type": "array",
          "description": "Control plane actions necessary to execute capability type.",
          "items": {
            "type": "string"
          }
        },
        "azureRbacDataActions": {
          "type": "array",
          "description": "Data plane actions necessary to execute capability type.",
          "items": {
            "type": "string"
          }
        },
        "runtimeProperties": {
          "$ref": "#/definitions/CapabilityTypePropertiesRuntimeProperties",
          "description": "Runtime properties of this Capability Type."
        }
      }
    },
    "CapabilityTypePropertiesRuntimeProperties": {
      "type": "object",
      "description": "Runtime properties of this Capability Type.",
      "properties": {
        "kind": {
          "type": "string",
          "description": "String of the kind of the resource's action type (continuous or discrete).",
          "readOnly": true
        }
      }
    },
    "ContinuousAction": {
      "type": "object",
      "description": "Model that represents a continuous action.",
      "properties": {
        "duration": {
          "type": "string",
          "format": "duration",
          "description": "ISO8601 formatted string that represents a duration."
        },
        "parameters": {
          "type": "array",
          "description": "List of key value pairs.",
          "items": {
            "$ref": "#/definitions/KeyValuePair"
          },
          "x-ms-identifiers": []
        },
        "selectorId": {
          "type": "string",
          "description": "String that represents a selector.",
          "minLength": 1
        }
      },
      "required": [
        "duration",
        "parameters",
        "selectorId"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Action"
        }
      ],
      "x-ms-discriminator-value": "continuous"
    },
    "CreatedByType": {
      "type": "string",
      "enum": [
        "User",
        "Application",
        "ManagedIdentity",
        "Key"
      ],
      "x-ms-enum": {
        "name": "CreatedByType",
        "modelAsString": true
      }
    },
    "DelayAction": {
      "type": "object",
      "description": "Model that represents a delay action.",
      "properties": {
        "duration": {
          "type": "string",
          "format": "duration",
          "description": "ISO8601 formatted string that represents a duration."
        }
      },
      "required": [
        "duration"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Action"
        }
      ],
      "x-ms-discriminator-value": "delay"
    },
    "DiscreteAction": {
      "type": "object",
      "description": "Model that represents a discrete action.",
      "properties": {
        "parameters": {
          "type": "array",
          "description": "List of key value pairs.",
          "items": {
            "$ref": "#/definitions/KeyValuePair"
          },
          "x-ms-identifiers": []
        },
        "selectorId": {
          "type": "string",
          "description": "String that represents a selector.",
          "minLength": 1
        }
      },
      "required": [
        "parameters",
        "selectorId"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Action"
        }
      ],
      "x-ms-discriminator-value": "discrete"
    },
    "Experiment": {
      "type": "object",
      "description": "Model that represents a Experiment resource.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/ExperimentProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "identity": {
          "$ref": "../../../../../common-types/resource-management/v4/managedidentity.json#/definitions/ManagedServiceIdentity",
          "description": "The managed service identities assigned to this resource."
        }
      },
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "ExperimentCancelOperationResult": {
      "type": "object",
      "description": "Model that represents the result of a cancel Experiment operation.",
      "properties": {
        "name": {
          "type": "string",
          "description": "String of the Experiment name.",
          "readOnly": true
        },
        "statusUrl": {
          "type": "string",
          "description": "URL to retrieve the Experiment status.",
          "maxLength": 2048,
          "readOnly": true
        }
      }
    },
    "ExperimentExecutionActionTargetDetailsError": {
      "type": "object",
      "description": "Model that represents the Experiment action target details error model.",
      "properties": {
        "code": {
          "type": "string",
          "description": "The error code.",
          "readOnly": true
        },
        "message": {
          "type": "string",
          "description": "The error message",
          "readOnly": true
        }
      }
    },
    "ExperimentExecutionActionTargetDetailsProperties": {
      "type": "object",
      "description": "Model that represents the Experiment action target details properties model.",
      "properties": {
        "status": {
          "type": "string",
          "description": "The status of the execution.",
          "readOnly": true
        },
        "target": {
          "type": "string",
          "description": "The target for the action.",
          "readOnly": true
        },
        "targetFailedTime": {
          "type": "string",
          "format": "date-time",
          "description": "String that represents the failed date time.",
          "readOnly": true
        },
        "targetCompletedTime": {
          "type": "string",
          "format": "date-time",
          "description": "String that represents the completed date time.",
          "readOnly": true
        },
        "error": {
          "$ref": "#/definitions/ExperimentExecutionActionTargetDetailsError",
          "description": "The error of the action.",
          "readOnly": true
        }
      }
    },
    "ExperimentExecutionDetail": {
      "type": "object",
      "description": "Model that represents the execution details of a Experiment.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/ExperimentExecutionDetailsProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ProxyResource"
        }
      ]
    },
    "ExperimentExecutionDetailListResult": {
      "type": "object",
      "description": "The response of a ExperimentExecutionDetail list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The ExperimentExecutionDetail items on this page",
          "items": {
            "$ref": "#/definitions/ExperimentExecutionDetail"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "ExperimentExecutionDetailsProperties": {
      "type": "object",
      "description": "Model that represents the Experiment execution details properties model.",
      "properties": {
        "experimentId": {
          "type": "string",
          "description": "The id of the experiment.",
          "readOnly": true
        },
        "status": {
          "type": "string",
          "description": "The value of the status of the experiment execution.",
          "readOnly": true
        },
        "failureReason": {
          "type": "string",
          "description": "The reason why the execution failed.",
          "readOnly": true
        },
        "createdDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "String that represents the created date time.",
          "readOnly": true
        },
        "lastActionDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "String that represents the last action date time.",
          "readOnly": true
        },
        "startDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "String that represents the start date time.",
          "readOnly": true
        },
        "stopDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "String that represents the stop date time.",
          "readOnly": true
        },
        "runInformation": {
          "$ref": "#/definitions/ExperimentExecutionDetailsPropertiesRunInformation",
          "description": "The information of the experiment run.",
          "readOnly": true
        }
      }
    },
    "ExperimentExecutionDetailsPropertiesRunInformation": {
      "type": "object",
      "description": "The information of the experiment run.",
      "properties": {
        "steps": {
          "type": "array",
          "description": "The steps of the experiment run.",
          "items": {
            "$ref": "#/definitions/StepStatus"
          },
          "readOnly": true,
          "x-ms-identifiers": []
        }
      }
    },
    "ExperimentListResult": {
      "type": "object",
      "description": "The response of a Experiment list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The Experiment items on this page",
          "items": {
            "$ref": "#/definitions/Experiment"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "ExperimentProperties": {
      "type": "object",
      "description": "Model that represents the Experiment properties model.",
      "properties": {
        "steps": {
          "type": "array",
          "description": "List of steps.",
          "items": {
            "$ref": "#/definitions/Step"
          },
          "x-ms-identifiers": []
        },
        "selectors": {
          "type": "array",
          "description": "List of selectors.",
          "items": {
            "$ref": "#/definitions/Selector"
          }
        },
        "startOnCreation": {
          "type": "boolean",
          "description": "A boolean value that indicates if experiment should be started on creation or not."
        }
      },
      "required": [
        "steps",
        "selectors"
      ]
    },
    "ExperimentStartOperationResult": {
      "type": "object",
      "description": "Model that represents the result of a start Experiment operation.",
      "properties": {
        "name": {
          "type": "string",
          "description": "String of the Experiment name.",
          "readOnly": true
        },
        "statusUrl": {
          "type": "string",
          "description": "URL to retrieve the Experiment status.",
          "maxLength": 2048,
          "readOnly": true
        }
      }
    },
    "ExperimentStatus": {
      "type": "object",
      "description": "Model that represents the status of a Experiment.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/ExperimentStatusProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ProxyResource"
        }
      ]
    },
    "ExperimentStatusListResult": {
      "type": "object",
      "description": "The response of a ExperimentStatus list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The ExperimentStatus items on this page",
          "items": {
            "$ref": "#/definitions/ExperimentStatus"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "ExperimentStatusProperties": {
      "type": "object",
      "description": "Model that represents the Experiment status properties model.",
      "properties": {
        "status": {
          "type": "string",
          "description": "String that represents the status of a Experiment.",
          "readOnly": true
        },
        "createdDateUtc": {
          "type": "string",
          "format": "date-time",
          "description": "String that represents the created date time of a Experiment.",
          "readOnly": true
        },
        "endDateUtc": {
          "type": "string",
          "format": "date-time",
          "description": "String that represents the end date time of a Experiment.",
          "readOnly": true
        }
      }
    },
    "ExperimentUpdate": {
      "type": "object",
      "description": "Describes an experiment update.",
      "properties": {
        "identity": {
          "$ref": "#/definitions/ResourceIdentity",
          "description": "The identity of the experiment resource."
        }
      }
    },
    "Filter": {
      "type": "object",
      "description": "Model that represents available filter types that can be applied to a targets list.",
      "properties": {
        "type": {
          "type": "string",
          "description": "Discriminator property for Filter."
        }
      },
      "discriminator": "type",
      "required": [
        "type"
      ]
    },
    "FilterType": {
      "type": "string",
      "enum": [
        "Simple"
      ],
      "x-ms-enum": {
        "name": "FilterType",
        "modelAsString": true
      }
    },
    "KeyValuePair": {
      "type": "object",
      "description": "A map to describe the settings of an action.",
      "properties": {
        "key": {
          "type": "string",
          "description": "The name of the setting for the action.",
          "minLength": 1
        },
        "value": {
          "type": "string",
          "description": "The value of the setting for the action.",
          "minLength": 1
        }
      },
      "required": [
        "key",
        "value"
      ]
    },
    "ListSelector": {
      "type": "object",
      "description": "Model that represents a list selector.",
      "properties": {
        "targets": {
          "type": "array",
          "description": "List of Target references.",
          "items": {
            "$ref": "#/definitions/TargetReference"
          }
        }
      },
      "required": [
        "targets"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Selector"
        }
      ],
      "x-ms-discriminator-value": "List"
    },
    "Origin": {
      "type": "string",
      "enum": [
        "user",
        "system",
        "user,system"
      ],
      "x-ms-enum": {
        "name": "Origin",
        "modelAsString": true
      }
    },
    "QuerySelector": {
      "type": "object",
      "description": "Model that represents a query selector.",
      "properties": {
        "queryString": {
          "type": "string",
          "description": "Azure Resource Graph (ARG) Query Language query for target resources."
        },
        "subscriptionIds": {
          "type": "array",
          "description": "Subscription id list to scope resource query.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "queryString",
        "subscriptionIds"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Selector"
        }
      ],
      "x-ms-discriminator-value": "Query"
    },
    "ResourceIdentity": {
      "type": "object",
      "description": "The identity of a resource.",
      "properties": {
        "type": {
          "$ref": "#/definitions/ResourceIdentityType",
          "description": "String of the resource identity type."
        },
        "userAssignedIdentities": {
          "type": "object",
          "description": "The list of user identities associated with the Experiment. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.",
          "additionalProperties": {
            "$ref": "#/definitions/UserAssignedIdentity"
          }
        }
      }
    },
    "ResourceIdentityType": {
      "type": "string",
      "enum": [
        "None",
        "SystemAssigned",
        "UserAssigned"
      ],
      "x-ms-enum": {
        "name": "ResourceIdentityType",
        "modelAsString": false
      }
    },
    "Selector": {
      "type": "object",
      "description": "Model that represents a selector in the Experiment resource.",
      "properties": {
        "type": {
          "type": "string",
          "description": "Discriminator property for Selector."
        },
        "id": {
          "type": "string",
          "description": "String of the selector ID.",
          "minLength": 1
        },
        "filter": {
          "$ref": "#/definitions/Filter",
          "description": "Model that represents available filter types that can be applied to a targets list."
        }
      },
      "discriminator": "type",
      "required": [
        "type",
        "id"
      ]
    },
    "SelectorType": {
      "type": "string",
      "enum": [
        "List",
        "Query"
      ],
      "x-ms-enum": {
        "name": "SelectorType",
        "modelAsString": true
      }
    },
    "SimpleFilter": {
      "type": "object",
      "description": "Model that represents a simple target filter.",
      "properties": {
        "parameters": {
          "$ref": "#/definitions/SimpleFilterParameters",
          "description": "Model that represents the Simple filter parameters."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/Filter"
        }
      ],
      "x-ms-discriminator-value": "Simple"
    },
    "SimpleFilterParameters": {
      "type": "object",
      "description": "Model that represents the Simple filter parameters.",
      "properties": {
        "zones": {
          "type": "array",
          "description": "List of Azure availability zones to filter targets by.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Step": {
      "type": "object",
      "description": "Model that represents a step in the Experiment resource.",
      "properties": {
        "name": {
          "type": "string",
          "description": "String of the step name.",
          "minLength": 1
        },
        "branches": {
          "type": "array",
          "description": "List of branches.",
          "items": {
            "$ref": "#/definitions/Branch"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "name",
        "branches"
      ]
    },
    "StepStatus": {
      "type": "object",
      "description": "Model that represents the a list of branches and branch statuses.",
      "properties": {
        "stepName": {
          "type": "string",
          "description": "The name of the step.",
          "readOnly": true
        },
        "stepId": {
          "type": "string",
          "description": "The id of the step.",
          "readOnly": true
        },
        "status": {
          "type": "string",
          "description": "The value of the status of the step.",
          "readOnly": true
        },
        "branches": {
          "type": "array",
          "description": "The array of branches.",
          "items": {
            "$ref": "#/definitions/BranchStatus"
          },
          "readOnly": true,
          "x-ms-identifiers": []
        }
      }
    },
    "Target": {
      "type": "object",
      "description": "Model that represents a Target resource.",
      "properties": {
        "properties": {
          "type": "object",
          "description": "The resource-specific properties for this resource.",
          "additionalProperties": {},
          "x-ms-client-flatten": true,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ProxyResource"
        }
      ]
    },
    "TargetListResult": {
      "type": "object",
      "description": "The response of a Target list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The Target items on this page",
          "items": {
            "$ref": "#/definitions/Target"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "TargetReference": {
      "type": "object",
      "description": "Model that represents a reference to a Target in the selector.",
      "properties": {
        "type": {
          "$ref": "#/definitions/TargetReferenceType",
          "description": "Enum of the Target reference type."
        },
        "id": {
          "type": "string",
          "description": "String of the resource ID of a Target resource.",
          "pattern": "^\\/[Ss][Uu][Bb][Ss][Cc][Rr][Ii][Pp][Tt][Ii][Oo][Nn][Ss]\\/[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\/[Rr][Ee][Ss][Oo][Uu][Rr][Cc][Ee][Gg][Rr][Oo][Uu][Pp][Ss]\\/[a-zA-Z0-9_\\-\\.\\(\\)]*[a-zA-Z0-9_\\-\\(\\)]\\/[Pp][Rr][Oo][Vv][Ii][Dd][Ee][Rr][Ss]\\/[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\/[a-zA-Z0-9_\\-\\.]+\\/[a-zA-Z0-9_\\-\\.]+\\/[Pp][Rr][Oo][Vv][Ii][Dd][Ee][Rr][Ss]\\/[Mm][Ii][Cc][Rr][Oo][Ss][Oo][Ff][Tt]\\.[Cc][Hh][Aa][Oo][Ss]\\/[Tt][Aa][Rr][Gg][Ee][Tt][Ss]\\/[a-zA-Z0-9_\\-\\.]+$"
        }
      },
      "required": [
        "type",
        "id"
      ]
    },
    "TargetReferenceType": {
      "type": "string",
      "enum": [
        "ChaosTarget"
      ],
      "x-ms-enum": {
        "name": "TargetReferenceType",
        "modelAsString": true
      }
    },
    "TargetType": {
      "type": "object",
      "description": "Model that represents a Target Type resource.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/TargetTypeProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ProxyResource"
        }
      ]
    },
    "TargetTypeListResult": {
      "type": "object",
      "description": "The response of a TargetType list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The TargetType items on this page",
          "items": {
            "$ref": "#/definitions/TargetType"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "TargetTypeProperties": {
      "type": "object",
      "description": "Model that represents the base Target Type properties model.",
      "properties": {
        "displayName": {
          "type": "string",
          "description": "Localized string of the display name.",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "description": "Localized string of the description.",
          "readOnly": true
        },
        "propertiesSchema": {
          "type": "string",
          "description": "URL to retrieve JSON schema of the Target Type properties.",
          "maxLength": 2048,
          "readOnly": true
        },
        "resourceTypes": {
          "type": "array",
          "description": "List of resource types this Target Type can extend.",
          "items": {
            "type": "string"
          },
          "readOnly": true
        }
      }
    },
    "UserAssignedIdentity": {
      "type": "object",
      "description": "User assigned identity properties",
      "properties": {
        "principalId": {
          "type": "string",
          "description": "The principal ID of the assigned identity.",
          "readOnly": true
        },
        "clientId": {
          "type": "string",
          "description": "The client ID of the assigned identity.",
          "readOnly": true
        }
      }
    },
    "Versions": {
      "type": "string",
      "description": "The available API versions.",
      "enum": [
        "2023-04-15-preview"
      ],
      "x-ms-enum": {
        "name": "Versions",
        "modelAsString": true,
        "values": [
          {
            "name": "v2023_04_15_preview",
            "value": "2023-04-15-preview"
          }
        ]
      }
    }
  },
  "parameters": {}
}
