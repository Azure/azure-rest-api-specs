import "@typespec/http";
import "@typespec/rest";
import "@typespec/versioning";
import "@azure-tools/typespec-azure-core";
import "@azure-tools/typespec-azure-resource-manager";

using TypeSpec.Http;
using TypeSpec.Rest;
using TypeSpec.Versioning;
using Azure.ResourceManager;

#suppress "@azure-tools/typespec-azure-resource-manager/missing-operations-endpoint" "Partial service; operations not needed"
@armProviderNamespace("Microsoft.Orbital")
@service(#{ title: "Microsoft.Orbital.AOPC" })
@doc("Microsoft Planetary Computer Pro Resource Provider management API.")
@versioned(Versions)
@armCommonTypesVersion(Azure.ResourceManager.CommonTypes.Versions.v5)
namespace Microsoft.Spatio;

enum Versions {
  @useDependency(Azure.ResourceManager.Versions.v1_0_Preview_1)
  `2024-01-31-preview`,

  @useDependency(Azure.ResourceManager.Versions.v1_0_Preview_1)
  @armCommonTypesVersion(Azure.ResourceManager.CommonTypes.Versions.v5)
  `2025-02-11-preview`,
}

/*
  Operations API is explicitly excluded since this specification
  represents a partial service that will be deployed under an ARM
  partial manifest.
*/
// interface Operations extends Azure.ResourceManager.Operations {}

@doc("A Microsoft Planetary Computer Pro GeoCatalog resource")
model GeoCatalog is TrackedResource<GeoCatalogProperties> {
  @doc("The name of the catalog")
  @pattern("^[a-zA-Z0-9-]{3,24}$")
  @key("catalogName")
  @path
  @segment("geoCatalogs")
  name: string;

  ...ManagedServiceIdentityProperty;
}

@doc("The Microsoft Planetary Computer Pro GeoCatalog tier")
union CatalogTier {
  @doc("The basic tier that utilizes shared resources across catalog instances")
  Basic: "Basic",

  string,
}

@doc("The status of the current operation.")
@Azure.Core.lroStatus
union ProvisioningState {
  ResourceProvisioningState,

  @doc("The catalog is being provisioned.")
  Provisioning: "Provisioning",

  @doc("The catalog is being updated.")
  Updating: "Updating",

  @doc("The catalog is being deleted.")
  Deleting: "Deleting",

  @doc("The catalog request has been accepted.")
  Accepted: "Accepted",
}

@added(Versions.`2025-02-11-preview`)
@doc("The scope at which the auto-generated domain name label is generated and at which the resource name can be reused.")
union AutoGeneratedDomainNameLabelScope {
  @doc("The domain name label is randomly generated. The resource name cannot be reused within the same region.")
  NoReuse: "NoReuse",

  @doc("The domain name label is deterministically generated using the resource name and tenant id. The resource name cannot be reused within the same region and tenant.")
  TenantReuse: "TenantReuse",

  @doc("The domain name label is deterministically generated using the resource name, tenant id, and subscription id. The resource name cannot be reused within the same region and subscription.")
  SubscriptionReuse: "SubscriptionReuse",

  @doc("The domain name label is deterministically generated using the resource name, tenant id, subscription id, and resource group name. The resource name cannot be reused within the same resource group.")
  ResourceGroupReuse: "ResourceGroupReuse",

  string,
}

@doc("The details of the Microsoft Planetary Computer Pro GeoCatalog.")
model GeoCatalogProperties {
  @visibility(Lifecycle.Create, Lifecycle.Read)
  @doc("Tier of the catalog. This cannot be changed after the catalog is created. If not provided, defaults to Basic.")
  tier?: CatalogTier = CatalogTier.Basic;

  @visibility(Lifecycle.Read)
  @doc("The URI of the catalog management UI.")
  catalogUri?: string;

  @visibility(Lifecycle.Read)
  @doc("The status of the last operation.")
  provisioningState?: ProvisioningState;

  @added(Versions.`2025-02-11-preview`)
  @visibility(Lifecycle.Create, Lifecycle.Read)
  @doc("The scope of the auto-generated domain name label. If not provided, defaults to TenantReuse.")
  autoGeneratedDomainNameLabelScope?: AutoGeneratedDomainNameLabelScope = AutoGeneratedDomainNameLabelScope.TenantReuse;
}

model ManagedServiceIdentityUpdate
  is OptionalProperties<UpdateableProperties<Azure.ResourceManager.Foundations.ManagedServiceIdentity>>;

/*
  Patch request workaround for Swagger LintDiff.
  Typespec Bug: https://github.com/Azure/typespec-azure/issues/1586
*/
@doc("The properties of a GeoCatalog that can be updated.")
model GeoCatalogUpdate {
  ...Azure.ResourceManager.Foundations.ArmTagsProperty;

  @doc("The managed service identity properties to update.")
  identity?: ManagedServiceIdentityUpdate;
}

@armResourceOperations(GeoCatalog)
interface GeoCatalogs {
  get is ArmResourceRead<GeoCatalog>;
  create is ArmResourceCreateOrUpdateAsync<GeoCatalog>;
  @sharedRoute
  @removed(Versions.`2025-02-11-preview`)
  @renamedFrom(Versions.`2025-02-11-preview`, "update")
  updateDeprecated is ArmCustomPatchSync<GeoCatalog, GeoCatalogUpdate>;
  @sharedRoute
  @added(Versions.`2025-02-11-preview`)
  update is ArmCustomPatchAsync<GeoCatalog, GeoCatalogUpdate>;
  delete is ArmResourceDeleteWithoutOkAsync<GeoCatalog>;
  listByResourceGroup is ArmResourceListByParent<GeoCatalog>;
  listBySubscription is ArmListBySubscription<GeoCatalog>;
}
