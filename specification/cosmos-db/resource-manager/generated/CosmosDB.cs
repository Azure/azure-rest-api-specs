// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace CosmosDb
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Net;
    using System.Net.Http;

    /// <summary>
    /// Azure Cosmos DB Database Service Resource Provider REST API
    /// </summary>
    public partial class CosmosDB : ServiceClient<CosmosDB>, ICosmosDB
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        public System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public JsonSerializerSettings SerializationSettings { get; private set; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public JsonSerializerSettings DeserializationSettings { get; private set; }

        /// <summary>
        /// Azure subscription ID.
        /// </summary>
        public string SubscriptionId { get; set; }

        /// <summary>
        /// Gets the IDatabaseAccounts.
        /// </summary>
        public virtual IDatabaseAccounts DatabaseAccounts { get; private set; }

        /// <summary>
        /// Gets the IOperations.
        /// </summary>
        public virtual IOperations Operations { get; private set; }

        /// <summary>
        /// Gets the IDatabase.
        /// </summary>
        public virtual IDatabase Database { get; private set; }

        /// <summary>
        /// Gets the ICollection.
        /// </summary>
        public virtual ICollection Collection { get; private set; }

        /// <summary>
        /// Gets the ICollectionRegion.
        /// </summary>
        public virtual ICollectionRegion CollectionRegion { get; private set; }

        /// <summary>
        /// Gets the IDatabaseAccountRegion.
        /// </summary>
        public virtual IDatabaseAccountRegion DatabaseAccountRegion { get; private set; }

        /// <summary>
        /// Gets the IPercentileSourceTarget.
        /// </summary>
        public virtual IPercentileSourceTarget PercentileSourceTarget { get; private set; }

        /// <summary>
        /// Gets the IPercentileTarget.
        /// </summary>
        public virtual IPercentileTarget PercentileTarget { get; private set; }

        /// <summary>
        /// Gets the IPercentile.
        /// </summary>
        public virtual IPercentile Percentile { get; private set; }

        /// <summary>
        /// Gets the ICollectionPartitionRegion.
        /// </summary>
        public virtual ICollectionPartitionRegion CollectionPartitionRegion { get; private set; }

        /// <summary>
        /// Gets the ICollectionPartition.
        /// </summary>
        public virtual ICollectionPartition CollectionPartition { get; private set; }

        /// <summary>
        /// Gets the IPartitionKeyRangeId.
        /// </summary>
        public virtual IPartitionKeyRangeId PartitionKeyRangeId { get; private set; }

        /// <summary>
        /// Gets the IPartitionKeyRangeIdRegion.
        /// </summary>
        public virtual IPartitionKeyRangeIdRegion PartitionKeyRangeIdRegion { get; private set; }

        /// <summary>
        /// Gets the ISqlResources.
        /// </summary>
        public virtual ISqlResources SqlResources { get; private set; }

        /// <summary>
        /// Gets the IMongoDBResources.
        /// </summary>
        public virtual IMongoDBResources MongoDBResources { get; private set; }

        /// <summary>
        /// Gets the ITableResources.
        /// </summary>
        public virtual ITableResources TableResources { get; private set; }

        /// <summary>
        /// Gets the ICassandraResources.
        /// </summary>
        public virtual ICassandraResources CassandraResources { get; private set; }

        /// <summary>
        /// Gets the IGremlinResources.
        /// </summary>
        public virtual IGremlinResources GremlinResources { get; private set; }

        /// <summary>
        /// Gets the IPrivateLinkResources.
        /// </summary>
        public virtual IPrivateLinkResources PrivateLinkResources { get; private set; }

        /// <summary>
        /// Gets the IPrivateEndpointConnections.
        /// </summary>
        public virtual IPrivateEndpointConnections PrivateEndpointConnections { get; private set; }

        /// <summary>
        /// Initializes a new instance of the CosmosDB class.
        /// </summary>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling CosmosDB.Dispose(). False: will not dispose provided httpClient</param>
        public CosmosDB(HttpClient httpClient, bool disposeHttpClient) : base(httpClient, disposeHttpClient)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the CosmosDB class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public CosmosDB(params DelegatingHandler[] handlers) : base(handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the CosmosDB class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public CosmosDB(HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : base(rootHandler, handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the CosmosDB class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public CosmosDB(System.Uri baseUri, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the CosmosDB class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public CosmosDB(System.Uri baseUri, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// An optional partial-method to perform custom initialization.
        ///</summary>
        partial void CustomInitialize();
        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            DatabaseAccounts = new DatabaseAccounts(this);
            Operations = new Operations(this);
            Database = new Database(this);
            Collection = new Collection(this);
            CollectionRegion = new CollectionRegion(this);
            DatabaseAccountRegion = new DatabaseAccountRegion(this);
            PercentileSourceTarget = new PercentileSourceTarget(this);
            PercentileTarget = new PercentileTarget(this);
            Percentile = new Percentile(this);
            CollectionPartitionRegion = new CollectionPartitionRegion(this);
            CollectionPartition = new CollectionPartition(this);
            PartitionKeyRangeId = new PartitionKeyRangeId(this);
            PartitionKeyRangeIdRegion = new PartitionKeyRangeIdRegion(this);
            SqlResources = new SqlResources(this);
            MongoDBResources = new MongoDBResources(this);
            TableResources = new TableResources(this);
            CassandraResources = new CassandraResources(this);
            GremlinResources = new GremlinResources(this);
            PrivateLinkResources = new PrivateLinkResources(this);
            PrivateEndpointConnections = new PrivateEndpointConnections(this);
            BaseUri = new System.Uri("https://management.azure.com");
            SerializationSettings = new JsonSerializerSettings
            {
                Formatting = Newtonsoft.Json.Formatting.Indented,
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new  List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            SerializationSettings.Converters.Add(new TransformationJsonConverter());
            DeserializationSettings = new JsonSerializerSettings
            {
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            CustomInitialize();
            DeserializationSettings.Converters.Add(new TransformationJsonConverter());
        }
    }
}
