// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace CosmosDb
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SqlResources.
    /// </summary>
    public static partial class SqlResourcesExtensions
    {
            /// <summary>
            /// Lists the SQL databases under an existing Azure Cosmos DB database account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure resource group.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            public static SqlDatabaseListResult ListSqlDatabases(this ISqlResources operations, string resourceGroupName, string accountName)
            {
                return operations.ListSqlDatabasesAsync(resourceGroupName, accountName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the SQL databases under an existing Azure Cosmos DB database account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure resource group.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SqlDatabaseListResult> ListSqlDatabasesAsync(this ISqlResources operations, string resourceGroupName, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSqlDatabasesWithHttpMessagesAsync(resourceGroupName, accountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the SQL database under an existing Azure Cosmos DB database account
            /// with the provided name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure resource group.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            public static SqlDatabaseGetResults GetSqlDatabase(this ISqlResources operations, string resourceGroupName, string accountName, string databaseName)
            {
                return operations.GetSqlDatabaseAsync(resourceGroupName, accountName, databaseName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the SQL database under an existing Azure Cosmos DB database account
            /// with the provided name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure resource group.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SqlDatabaseGetResults> GetSqlDatabaseAsync(this ISqlResources operations, string resourceGroupName, string accountName, string databaseName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSqlDatabaseWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update an Azure Cosmos DB SQL database
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure resource group.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='createUpdateSqlDatabaseParameters'>
            /// The parameters to provide for the current SQL database.
            /// </param>
            public static SqlDatabaseGetResults CreateUpdateSqlDatabase(this ISqlResources operations, string resourceGroupName, string accountName, string databaseName, SqlDatabaseCreateUpdateParameters createUpdateSqlDatabaseParameters)
            {
                return operations.CreateUpdateSqlDatabaseAsync(resourceGroupName, accountName, databaseName, createUpdateSqlDatabaseParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update an Azure Cosmos DB SQL database
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure resource group.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='createUpdateSqlDatabaseParameters'>
            /// The parameters to provide for the current SQL database.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SqlDatabaseGetResults> CreateUpdateSqlDatabaseAsync(this ISqlResources operations, string resourceGroupName, string accountName, string databaseName, SqlDatabaseCreateUpdateParameters createUpdateSqlDatabaseParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateUpdateSqlDatabaseWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, createUpdateSqlDatabaseParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an existing Azure Cosmos DB SQL database.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure resource group.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            public static void DeleteSqlDatabase(this ISqlResources operations, string resourceGroupName, string accountName, string databaseName)
            {
                operations.DeleteSqlDatabaseAsync(resourceGroupName, accountName, databaseName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an existing Azure Cosmos DB SQL database.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure resource group.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteSqlDatabaseAsync(this ISqlResources operations, string resourceGroupName, string accountName, string databaseName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteSqlDatabaseWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the RUs per second of the SQL database under an existing Azure Cosmos
            /// DB database account with the provided name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure resource group.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            public static ThroughputSettingsGetResults GetSqlDatabaseThroughput(this ISqlResources operations, string resourceGroupName, string accountName, string databaseName)
            {
                return operations.GetSqlDatabaseThroughputAsync(resourceGroupName, accountName, databaseName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the RUs per second of the SQL database under an existing Azure Cosmos
            /// DB database account with the provided name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure resource group.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ThroughputSettingsGetResults> GetSqlDatabaseThroughputAsync(this ISqlResources operations, string resourceGroupName, string accountName, string databaseName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSqlDatabaseThroughputWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update RUs per second of an Azure Cosmos DB SQL database
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure resource group.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='updateThroughputParameters'>
            /// The parameters to provide for the RUs per second of the current SQL
            /// database.
            /// </param>
            public static ThroughputSettingsGetResults UpdateSqlDatabaseThroughput(this ISqlResources operations, string resourceGroupName, string accountName, string databaseName, ThroughputSettingsUpdateParameters updateThroughputParameters)
            {
                return operations.UpdateSqlDatabaseThroughputAsync(resourceGroupName, accountName, databaseName, updateThroughputParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update RUs per second of an Azure Cosmos DB SQL database
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure resource group.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='updateThroughputParameters'>
            /// The parameters to provide for the RUs per second of the current SQL
            /// database.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ThroughputSettingsGetResults> UpdateSqlDatabaseThroughputAsync(this ISqlResources operations, string resourceGroupName, string accountName, string databaseName, ThroughputSettingsUpdateParameters updateThroughputParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateSqlDatabaseThroughputWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, updateThroughputParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists the SQL container under an existing Azure Cosmos DB database account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure resource group.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            public static SqlContainerListResult ListSqlContainers(this ISqlResources operations, string resourceGroupName, string accountName, string databaseName)
            {
                return operations.ListSqlContainersAsync(resourceGroupName, accountName, databaseName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the SQL container under an existing Azure Cosmos DB database account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure resource group.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SqlContainerListResult> ListSqlContainersAsync(this ISqlResources operations, string resourceGroupName, string accountName, string databaseName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSqlContainersWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the SQL container under an existing Azure Cosmos DB database account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure resource group.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='containerName'>
            /// Cosmos DB container name.
            /// </param>
            public static SqlContainerGetResults GetSqlContainer(this ISqlResources operations, string resourceGroupName, string accountName, string databaseName, string containerName)
            {
                return operations.GetSqlContainerAsync(resourceGroupName, accountName, databaseName, containerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the SQL container under an existing Azure Cosmos DB database account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure resource group.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='containerName'>
            /// Cosmos DB container name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SqlContainerGetResults> GetSqlContainerAsync(this ISqlResources operations, string resourceGroupName, string accountName, string databaseName, string containerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSqlContainerWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, containerName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update an Azure Cosmos DB SQL container
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure resource group.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='containerName'>
            /// Cosmos DB container name.
            /// </param>
            /// <param name='createUpdateSqlContainerParameters'>
            /// The parameters to provide for the current SQL container.
            /// </param>
            public static SqlContainerGetResults CreateUpdateSqlContainer(this ISqlResources operations, string resourceGroupName, string accountName, string databaseName, string containerName, SqlContainerCreateUpdateParameters createUpdateSqlContainerParameters)
            {
                return operations.CreateUpdateSqlContainerAsync(resourceGroupName, accountName, databaseName, containerName, createUpdateSqlContainerParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update an Azure Cosmos DB SQL container
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure resource group.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='containerName'>
            /// Cosmos DB container name.
            /// </param>
            /// <param name='createUpdateSqlContainerParameters'>
            /// The parameters to provide for the current SQL container.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SqlContainerGetResults> CreateUpdateSqlContainerAsync(this ISqlResources operations, string resourceGroupName, string accountName, string databaseName, string containerName, SqlContainerCreateUpdateParameters createUpdateSqlContainerParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateUpdateSqlContainerWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, containerName, createUpdateSqlContainerParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an existing Azure Cosmos DB SQL container.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure resource group.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='containerName'>
            /// Cosmos DB container name.
            /// </param>
            public static void DeleteSqlContainer(this ISqlResources operations, string resourceGroupName, string accountName, string databaseName, string containerName)
            {
                operations.DeleteSqlContainerAsync(resourceGroupName, accountName, databaseName, containerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an existing Azure Cosmos DB SQL container.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure resource group.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='containerName'>
            /// Cosmos DB container name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteSqlContainerAsync(this ISqlResources operations, string resourceGroupName, string accountName, string databaseName, string containerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteSqlContainerWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, containerName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the RUs per second of the SQL container under an existing Azure Cosmos
            /// DB database account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure resource group.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='containerName'>
            /// Cosmos DB container name.
            /// </param>
            public static ThroughputSettingsGetResults GetSqlContainerThroughput(this ISqlResources operations, string resourceGroupName, string accountName, string databaseName, string containerName)
            {
                return operations.GetSqlContainerThroughputAsync(resourceGroupName, accountName, databaseName, containerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the RUs per second of the SQL container under an existing Azure Cosmos
            /// DB database account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure resource group.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='containerName'>
            /// Cosmos DB container name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ThroughputSettingsGetResults> GetSqlContainerThroughputAsync(this ISqlResources operations, string resourceGroupName, string accountName, string databaseName, string containerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSqlContainerThroughputWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, containerName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update RUs per second of an Azure Cosmos DB SQL container
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure resource group.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='containerName'>
            /// Cosmos DB container name.
            /// </param>
            /// <param name='updateThroughputParameters'>
            /// The parameters to provide for the RUs per second of the current SQL
            /// container.
            /// </param>
            public static ThroughputSettingsGetResults UpdateSqlContainerThroughput(this ISqlResources operations, string resourceGroupName, string accountName, string databaseName, string containerName, ThroughputSettingsUpdateParameters updateThroughputParameters)
            {
                return operations.UpdateSqlContainerThroughputAsync(resourceGroupName, accountName, databaseName, containerName, updateThroughputParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update RUs per second of an Azure Cosmos DB SQL container
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure resource group.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='containerName'>
            /// Cosmos DB container name.
            /// </param>
            /// <param name='updateThroughputParameters'>
            /// The parameters to provide for the RUs per second of the current SQL
            /// container.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ThroughputSettingsGetResults> UpdateSqlContainerThroughputAsync(this ISqlResources operations, string resourceGroupName, string accountName, string databaseName, string containerName, ThroughputSettingsUpdateParameters updateThroughputParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateSqlContainerThroughputWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, containerName, updateThroughputParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists the SQL storedProcedure under an existing Azure Cosmos DB database
            /// account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure resource group.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='containerName'>
            /// Cosmos DB container name.
            /// </param>
            public static SqlStoredProcedureListResult ListSqlStoredProcedures(this ISqlResources operations, string resourceGroupName, string accountName, string databaseName, string containerName)
            {
                return operations.ListSqlStoredProceduresAsync(resourceGroupName, accountName, databaseName, containerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the SQL storedProcedure under an existing Azure Cosmos DB database
            /// account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure resource group.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='containerName'>
            /// Cosmos DB container name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SqlStoredProcedureListResult> ListSqlStoredProceduresAsync(this ISqlResources operations, string resourceGroupName, string accountName, string databaseName, string containerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSqlStoredProceduresWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, containerName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the SQL storedProcedure under an existing Azure Cosmos DB database
            /// account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure resource group.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='containerName'>
            /// Cosmos DB container name.
            /// </param>
            /// <param name='storedProcedureName'>
            /// Cosmos DB storedProcedure name.
            /// </param>
            public static SqlStoredProcedureGetResults GetSqlStoredProcedure(this ISqlResources operations, string resourceGroupName, string accountName, string databaseName, string containerName, string storedProcedureName)
            {
                return operations.GetSqlStoredProcedureAsync(resourceGroupName, accountName, databaseName, containerName, storedProcedureName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the SQL storedProcedure under an existing Azure Cosmos DB database
            /// account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure resource group.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='containerName'>
            /// Cosmos DB container name.
            /// </param>
            /// <param name='storedProcedureName'>
            /// Cosmos DB storedProcedure name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SqlStoredProcedureGetResults> GetSqlStoredProcedureAsync(this ISqlResources operations, string resourceGroupName, string accountName, string databaseName, string containerName, string storedProcedureName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSqlStoredProcedureWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, containerName, storedProcedureName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update an Azure Cosmos DB SQL storedProcedure
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure resource group.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='containerName'>
            /// Cosmos DB container name.
            /// </param>
            /// <param name='storedProcedureName'>
            /// Cosmos DB storedProcedure name.
            /// </param>
            /// <param name='createUpdateSqlStoredProcedureParameters'>
            /// The parameters to provide for the current SQL storedProcedure.
            /// </param>
            public static SqlStoredProcedureGetResults CreateUpdateSqlStoredProcedure(this ISqlResources operations, string resourceGroupName, string accountName, string databaseName, string containerName, string storedProcedureName, SqlStoredProcedureCreateUpdateParameters createUpdateSqlStoredProcedureParameters)
            {
                return operations.CreateUpdateSqlStoredProcedureAsync(resourceGroupName, accountName, databaseName, containerName, storedProcedureName, createUpdateSqlStoredProcedureParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update an Azure Cosmos DB SQL storedProcedure
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure resource group.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='containerName'>
            /// Cosmos DB container name.
            /// </param>
            /// <param name='storedProcedureName'>
            /// Cosmos DB storedProcedure name.
            /// </param>
            /// <param name='createUpdateSqlStoredProcedureParameters'>
            /// The parameters to provide for the current SQL storedProcedure.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SqlStoredProcedureGetResults> CreateUpdateSqlStoredProcedureAsync(this ISqlResources operations, string resourceGroupName, string accountName, string databaseName, string containerName, string storedProcedureName, SqlStoredProcedureCreateUpdateParameters createUpdateSqlStoredProcedureParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateUpdateSqlStoredProcedureWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, containerName, storedProcedureName, createUpdateSqlStoredProcedureParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an existing Azure Cosmos DB SQL storedProcedure.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure resource group.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='containerName'>
            /// Cosmos DB container name.
            /// </param>
            /// <param name='storedProcedureName'>
            /// Cosmos DB storedProcedure name.
            /// </param>
            public static void DeleteSqlStoredProcedure(this ISqlResources operations, string resourceGroupName, string accountName, string databaseName, string containerName, string storedProcedureName)
            {
                operations.DeleteSqlStoredProcedureAsync(resourceGroupName, accountName, databaseName, containerName, storedProcedureName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an existing Azure Cosmos DB SQL storedProcedure.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure resource group.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='containerName'>
            /// Cosmos DB container name.
            /// </param>
            /// <param name='storedProcedureName'>
            /// Cosmos DB storedProcedure name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteSqlStoredProcedureAsync(this ISqlResources operations, string resourceGroupName, string accountName, string databaseName, string containerName, string storedProcedureName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteSqlStoredProcedureWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, containerName, storedProcedureName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Lists the SQL userDefinedFunction under an existing Azure Cosmos DB
            /// database account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure resource group.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='containerName'>
            /// Cosmos DB container name.
            /// </param>
            public static SqlUserDefinedFunctionListResult ListSqlUserDefinedFunctions(this ISqlResources operations, string resourceGroupName, string accountName, string databaseName, string containerName)
            {
                return operations.ListSqlUserDefinedFunctionsAsync(resourceGroupName, accountName, databaseName, containerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the SQL userDefinedFunction under an existing Azure Cosmos DB
            /// database account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure resource group.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='containerName'>
            /// Cosmos DB container name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SqlUserDefinedFunctionListResult> ListSqlUserDefinedFunctionsAsync(this ISqlResources operations, string resourceGroupName, string accountName, string databaseName, string containerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSqlUserDefinedFunctionsWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, containerName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the SQL userDefinedFunction under an existing Azure Cosmos DB database
            /// account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure resource group.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='containerName'>
            /// Cosmos DB container name.
            /// </param>
            /// <param name='userDefinedFunctionName'>
            /// Cosmos DB userDefinedFunction name.
            /// </param>
            public static SqlUserDefinedFunctionGetResults GetSqlUserDefinedFunction(this ISqlResources operations, string resourceGroupName, string accountName, string databaseName, string containerName, string userDefinedFunctionName)
            {
                return operations.GetSqlUserDefinedFunctionAsync(resourceGroupName, accountName, databaseName, containerName, userDefinedFunctionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the SQL userDefinedFunction under an existing Azure Cosmos DB database
            /// account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure resource group.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='containerName'>
            /// Cosmos DB container name.
            /// </param>
            /// <param name='userDefinedFunctionName'>
            /// Cosmos DB userDefinedFunction name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SqlUserDefinedFunctionGetResults> GetSqlUserDefinedFunctionAsync(this ISqlResources operations, string resourceGroupName, string accountName, string databaseName, string containerName, string userDefinedFunctionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSqlUserDefinedFunctionWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, containerName, userDefinedFunctionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update an Azure Cosmos DB SQL userDefinedFunction
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure resource group.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='containerName'>
            /// Cosmos DB container name.
            /// </param>
            /// <param name='userDefinedFunctionName'>
            /// Cosmos DB userDefinedFunction name.
            /// </param>
            /// <param name='createUpdateSqlUserDefinedFunctionParameters'>
            /// The parameters to provide for the current SQL userDefinedFunction.
            /// </param>
            public static SqlUserDefinedFunctionGetResults CreateUpdateSqlUserDefinedFunction(this ISqlResources operations, string resourceGroupName, string accountName, string databaseName, string containerName, string userDefinedFunctionName, SqlUserDefinedFunctionCreateUpdateParameters createUpdateSqlUserDefinedFunctionParameters)
            {
                return operations.CreateUpdateSqlUserDefinedFunctionAsync(resourceGroupName, accountName, databaseName, containerName, userDefinedFunctionName, createUpdateSqlUserDefinedFunctionParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update an Azure Cosmos DB SQL userDefinedFunction
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure resource group.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='containerName'>
            /// Cosmos DB container name.
            /// </param>
            /// <param name='userDefinedFunctionName'>
            /// Cosmos DB userDefinedFunction name.
            /// </param>
            /// <param name='createUpdateSqlUserDefinedFunctionParameters'>
            /// The parameters to provide for the current SQL userDefinedFunction.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SqlUserDefinedFunctionGetResults> CreateUpdateSqlUserDefinedFunctionAsync(this ISqlResources operations, string resourceGroupName, string accountName, string databaseName, string containerName, string userDefinedFunctionName, SqlUserDefinedFunctionCreateUpdateParameters createUpdateSqlUserDefinedFunctionParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateUpdateSqlUserDefinedFunctionWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, containerName, userDefinedFunctionName, createUpdateSqlUserDefinedFunctionParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an existing Azure Cosmos DB SQL userDefinedFunction.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure resource group.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='containerName'>
            /// Cosmos DB container name.
            /// </param>
            /// <param name='userDefinedFunctionName'>
            /// Cosmos DB userDefinedFunction name.
            /// </param>
            public static void DeleteSqlUserDefinedFunction(this ISqlResources operations, string resourceGroupName, string accountName, string databaseName, string containerName, string userDefinedFunctionName)
            {
                operations.DeleteSqlUserDefinedFunctionAsync(resourceGroupName, accountName, databaseName, containerName, userDefinedFunctionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an existing Azure Cosmos DB SQL userDefinedFunction.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure resource group.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='containerName'>
            /// Cosmos DB container name.
            /// </param>
            /// <param name='userDefinedFunctionName'>
            /// Cosmos DB userDefinedFunction name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteSqlUserDefinedFunctionAsync(this ISqlResources operations, string resourceGroupName, string accountName, string databaseName, string containerName, string userDefinedFunctionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteSqlUserDefinedFunctionWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, containerName, userDefinedFunctionName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Lists the SQL trigger under an existing Azure Cosmos DB database account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure resource group.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='containerName'>
            /// Cosmos DB container name.
            /// </param>
            public static SqlTriggerListResult ListSqlTriggers(this ISqlResources operations, string resourceGroupName, string accountName, string databaseName, string containerName)
            {
                return operations.ListSqlTriggersAsync(resourceGroupName, accountName, databaseName, containerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the SQL trigger under an existing Azure Cosmos DB database account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure resource group.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='containerName'>
            /// Cosmos DB container name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SqlTriggerListResult> ListSqlTriggersAsync(this ISqlResources operations, string resourceGroupName, string accountName, string databaseName, string containerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSqlTriggersWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, containerName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the SQL trigger under an existing Azure Cosmos DB database account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure resource group.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='containerName'>
            /// Cosmos DB container name.
            /// </param>
            /// <param name='triggerName'>
            /// Cosmos DB trigger name.
            /// </param>
            public static SqlTriggerGetResults GetSqlTrigger(this ISqlResources operations, string resourceGroupName, string accountName, string databaseName, string containerName, string triggerName)
            {
                return operations.GetSqlTriggerAsync(resourceGroupName, accountName, databaseName, containerName, triggerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the SQL trigger under an existing Azure Cosmos DB database account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure resource group.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='containerName'>
            /// Cosmos DB container name.
            /// </param>
            /// <param name='triggerName'>
            /// Cosmos DB trigger name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SqlTriggerGetResults> GetSqlTriggerAsync(this ISqlResources operations, string resourceGroupName, string accountName, string databaseName, string containerName, string triggerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSqlTriggerWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, containerName, triggerName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update an Azure Cosmos DB SQL trigger
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure resource group.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='containerName'>
            /// Cosmos DB container name.
            /// </param>
            /// <param name='triggerName'>
            /// Cosmos DB trigger name.
            /// </param>
            /// <param name='createUpdateSqlTriggerParameters'>
            /// The parameters to provide for the current SQL trigger.
            /// </param>
            public static SqlTriggerGetResults CreateUpdateSqlTrigger(this ISqlResources operations, string resourceGroupName, string accountName, string databaseName, string containerName, string triggerName, SqlTriggerCreateUpdateParameters createUpdateSqlTriggerParameters)
            {
                return operations.CreateUpdateSqlTriggerAsync(resourceGroupName, accountName, databaseName, containerName, triggerName, createUpdateSqlTriggerParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update an Azure Cosmos DB SQL trigger
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure resource group.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='containerName'>
            /// Cosmos DB container name.
            /// </param>
            /// <param name='triggerName'>
            /// Cosmos DB trigger name.
            /// </param>
            /// <param name='createUpdateSqlTriggerParameters'>
            /// The parameters to provide for the current SQL trigger.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SqlTriggerGetResults> CreateUpdateSqlTriggerAsync(this ISqlResources operations, string resourceGroupName, string accountName, string databaseName, string containerName, string triggerName, SqlTriggerCreateUpdateParameters createUpdateSqlTriggerParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateUpdateSqlTriggerWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, containerName, triggerName, createUpdateSqlTriggerParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an existing Azure Cosmos DB SQL trigger.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure resource group.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='containerName'>
            /// Cosmos DB container name.
            /// </param>
            /// <param name='triggerName'>
            /// Cosmos DB trigger name.
            /// </param>
            public static void DeleteSqlTrigger(this ISqlResources operations, string resourceGroupName, string accountName, string databaseName, string containerName, string triggerName)
            {
                operations.DeleteSqlTriggerAsync(resourceGroupName, accountName, databaseName, containerName, triggerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an existing Azure Cosmos DB SQL trigger.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure resource group.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='containerName'>
            /// Cosmos DB container name.
            /// </param>
            /// <param name='triggerName'>
            /// Cosmos DB trigger name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteSqlTriggerAsync(this ISqlResources operations, string resourceGroupName, string accountName, string databaseName, string containerName, string triggerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteSqlTriggerWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, containerName, triggerName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
