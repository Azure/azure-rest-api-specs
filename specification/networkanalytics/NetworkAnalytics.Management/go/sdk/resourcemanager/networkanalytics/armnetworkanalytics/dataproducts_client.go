// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armnetworkanalytics

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// DataProductsClient - Operations on data product resource.
// Don't use this type directly, use NewDataProductsClient() instead.
type DataProductsClient struct {
	internal *arm.Client
}

// NewDataProductsClient creates a new instance of DataProductsClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewDataProductsClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*DataProductsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &DataProductsClient{
		internal: cl,
	}
	return client, nil
}

// AddUserRole - Assign role to the data product.
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - dataProductName - The data product resource name
//   - body - The content of the action request
//   - options - DataProductsClientAddUserRoleOptions contains the optional parameters for the DataProductsClient.AddUserRole
//     method.
func (client *DataProductsClient) AddUserRole(ctx context.Context, subscriptionID string, resourceGroupName string, dataProductName string, body RoleAssignmentCommonProperties, options *DataProductsClientAddUserRoleOptions) (DataProductsClientAddUserRoleResponse, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "DataProductsClient.AddUserRole")
	req, err := client.addUserRoleCreateRequest(ctx, subscriptionID, resourceGroupName, dataProductName, body, options)
	if err != nil {
		return DataProductsClientAddUserRoleResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DataProductsClientAddUserRoleResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return DataProductsClientAddUserRoleResponse{}, err
	}
	resp, err := client.addUserRoleHandleResponse(httpResp)
	return resp, err
}

// addUserRoleCreateRequest creates the AddUserRole request.
func (client *DataProductsClient) addUserRoleCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, dataProductName string, body RoleAssignmentCommonProperties, options *DataProductsClientAddUserRoleOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkAnalytics/dataProducts/{dataProductName}/addUserRole"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if dataProductName == "" {
		return nil, errors.New("parameter dataProductName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{dataProductName}", url.PathEscape(dataProductName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-11-15")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// addUserRoleHandleResponse handles the AddUserRole response.
func (client *DataProductsClient) addUserRoleHandleResponse(resp *http.Response) (DataProductsClientAddUserRoleResponse, error) {
	result := DataProductsClientAddUserRoleResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.RoleAssignmentDetail); err != nil {
		return DataProductsClientAddUserRoleResponse{}, err
	}
	return result, nil
}

// BeginCreate - Create data product resource.
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - dataProductName - The data product resource name
//   - resource - Resource create parameters.
//   - options - DataProductsClientCreateOptions contains the optional parameters for the DataProductsClient.Create method.
func (client *DataProductsClient) BeginCreate(ctx context.Context, subscriptionID string, resourceGroupName string, dataProductName string, resource DataProduct, options *DataProductsClientCreateOptions) (*runtime.Poller[DataProductsClientCreateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.create(ctx, subscriptionID, resourceGroupName, dataProductName, resource, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller[DataProductsClientCreateResponse](resp, client.internal.Pipeline(), nil)
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken[DataProductsClientCreateResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// Create - Create data product resource.
func (client *DataProductsClient) create(ctx context.Context, subscriptionID string, resourceGroupName string, dataProductName string, resource DataProduct, options *DataProductsClientCreateOptions) (*http.Response, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "DataProductsClient.BeginCreate")
	req, err := client.createCreateRequest(ctx, subscriptionID, resourceGroupName, dataProductName, resource, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createCreateRequest creates the Create request.
func (client *DataProductsClient) createCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, dataProductName string, resource DataProduct, options *DataProductsClientCreateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkAnalytics/dataProducts/{dataProductName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if dataProductName == "" {
		return nil, errors.New("parameter dataProductName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{dataProductName}", url.PathEscape(dataProductName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-11-15")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginDelete - Delete data product resource.
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - dataProductName - The data product resource name
//   - options - DataProductsClientDeleteOptions contains the optional parameters for the DataProductsClient.Delete method.
func (client *DataProductsClient) BeginDelete(ctx context.Context, subscriptionID string, resourceGroupName string, dataProductName string, options *DataProductsClientDeleteOptions) (*runtime.Poller[DataProductsClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, subscriptionID, resourceGroupName, dataProductName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller[DataProductsClientDeleteResponse](resp, client.internal.Pipeline(), nil)
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken[DataProductsClientDeleteResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// Delete - Delete data product resource.
func (client *DataProductsClient) deleteOperation(ctx context.Context, subscriptionID string, resourceGroupName string, dataProductName string, options *DataProductsClientDeleteOptions) (*http.Response, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "DataProductsClient.BeginDelete")
	req, err := client.deleteCreateRequest(ctx, subscriptionID, resourceGroupName, dataProductName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *DataProductsClient) deleteCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, dataProductName string, options *DataProductsClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkAnalytics/dataProducts/{dataProductName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if dataProductName == "" {
		return nil, errors.New("parameter dataProductName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{dataProductName}", url.PathEscape(dataProductName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-11-15")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// GenerateStorageAccountSasToken - Generate sas token for storage account.
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - dataProductName - The data product resource name
//   - body - The content of the action request
//   - options - DataProductsClientGenerateStorageAccountSasTokenOptions contains the optional parameters for the DataProductsClient.GenerateStorageAccountSasToken
//     method.
func (client *DataProductsClient) GenerateStorageAccountSasToken(ctx context.Context, subscriptionID string, resourceGroupName string, dataProductName string, body AccountSas, options *DataProductsClientGenerateStorageAccountSasTokenOptions) (DataProductsClientGenerateStorageAccountSasTokenResponse, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "DataProductsClient.GenerateStorageAccountSasToken")
	req, err := client.generateStorageAccountSasTokenCreateRequest(ctx, subscriptionID, resourceGroupName, dataProductName, body, options)
	if err != nil {
		return DataProductsClientGenerateStorageAccountSasTokenResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DataProductsClientGenerateStorageAccountSasTokenResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return DataProductsClientGenerateStorageAccountSasTokenResponse{}, err
	}
	resp, err := client.generateStorageAccountSasTokenHandleResponse(httpResp)
	return resp, err
}

// generateStorageAccountSasTokenCreateRequest creates the GenerateStorageAccountSasToken request.
func (client *DataProductsClient) generateStorageAccountSasTokenCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, dataProductName string, body AccountSas, options *DataProductsClientGenerateStorageAccountSasTokenOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkAnalytics/dataProducts/{dataProductName}/generateStorageAccountSasToken"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if dataProductName == "" {
		return nil, errors.New("parameter dataProductName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{dataProductName}", url.PathEscape(dataProductName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-11-15")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// generateStorageAccountSasTokenHandleResponse handles the GenerateStorageAccountSasToken response.
func (client *DataProductsClient) generateStorageAccountSasTokenHandleResponse(resp *http.Response) (DataProductsClientGenerateStorageAccountSasTokenResponse, error) {
	result := DataProductsClientGenerateStorageAccountSasTokenResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AccountSasToken); err != nil {
		return DataProductsClientGenerateStorageAccountSasTokenResponse{}, err
	}
	return result, nil
}

// Get - Retrieve data product resource.
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - dataProductName - The data product resource name
//   - options - DataProductsClientGetOptions contains the optional parameters for the DataProductsClient.Get method.
func (client *DataProductsClient) Get(ctx context.Context, subscriptionID string, resourceGroupName string, dataProductName string, options *DataProductsClientGetOptions) (DataProductsClientGetResponse, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "DataProductsClient.Get")
	req, err := client.getCreateRequest(ctx, subscriptionID, resourceGroupName, dataProductName, options)
	if err != nil {
		return DataProductsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DataProductsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return DataProductsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *DataProductsClient) getCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, dataProductName string, options *DataProductsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkAnalytics/dataProducts/{dataProductName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if dataProductName == "" {
		return nil, errors.New("parameter dataProductName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{dataProductName}", url.PathEscape(dataProductName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-11-15")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *DataProductsClient) getHandleResponse(resp *http.Response) (DataProductsClientGetResponse, error) {
	result := DataProductsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DataProduct); err != nil {
		return DataProductsClientGetResponse{}, err
	}
	return result, nil
}

// NewListByResourceGroupPager - List data products by resource group.
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - options - DataProductsClientListByResourceGroupOptions contains the optional parameters for the DataProductsClient.NewListByResourceGroupPager
//     method.
func (client *DataProductsClient) NewListByResourceGroupPager(subscriptionID string, resourceGroupName string, options *DataProductsClientListByResourceGroupOptions) *runtime.Pager[DataProductsClientListByResourceGroupResponse] {
	return runtime.NewPager(runtime.PagingHandler[DataProductsClientListByResourceGroupResponse]{
		More: func(page DataProductsClientListByResourceGroupResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *DataProductsClientListByResourceGroupResponse) (DataProductsClientListByResourceGroupResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "DataProductsClient.NewListByResourceGroupPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByResourceGroupCreateRequest(ctx, subscriptionID, resourceGroupName, options)
			}, nil)
			if err != nil {
				return DataProductsClientListByResourceGroupResponse{}, err
			}
			return client.listByResourceGroupHandleResponse(resp)
		},
	})
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *DataProductsClient) listByResourceGroupCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, options *DataProductsClientListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkAnalytics/dataProducts"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-11-15")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *DataProductsClient) listByResourceGroupHandleResponse(resp *http.Response) (DataProductsClientListByResourceGroupResponse, error) {
	result := DataProductsClientListByResourceGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DataProductListResult); err != nil {
		return DataProductsClientListByResourceGroupResponse{}, err
	}
	return result, nil
}

// NewListBySubscriptionPager - List data products by subscription.
//   - subscriptionID - The ID of the target subscription.
//   - options - DataProductsClientListBySubscriptionOptions contains the optional parameters for the DataProductsClient.NewListBySubscriptionPager
//     method.
func (client *DataProductsClient) NewListBySubscriptionPager(subscriptionID string, options *DataProductsClientListBySubscriptionOptions) *runtime.Pager[DataProductsClientListBySubscriptionResponse] {
	return runtime.NewPager(runtime.PagingHandler[DataProductsClientListBySubscriptionResponse]{
		More: func(page DataProductsClientListBySubscriptionResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *DataProductsClientListBySubscriptionResponse) (DataProductsClientListBySubscriptionResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "DataProductsClient.NewListBySubscriptionPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listBySubscriptionCreateRequest(ctx, subscriptionID, options)
			}, nil)
			if err != nil {
				return DataProductsClientListBySubscriptionResponse{}, err
			}
			return client.listBySubscriptionHandleResponse(resp)
		},
	})
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *DataProductsClient) listBySubscriptionCreateRequest(ctx context.Context, subscriptionID string, options *DataProductsClientListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.NetworkAnalytics/dataProducts"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-11-15")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *DataProductsClient) listBySubscriptionHandleResponse(resp *http.Response) (DataProductsClientListBySubscriptionResponse, error) {
	result := DataProductsClientListBySubscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DataProductListResult); err != nil {
		return DataProductsClientListBySubscriptionResponse{}, err
	}
	return result, nil
}

// ListRolesAssignments - List user roles associated with the data product.
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - dataProductName - The data product resource name
//   - body - The content of the action request
//   - options - DataProductsClientListRolesAssignmentsOptions contains the optional parameters for the DataProductsClient.ListRolesAssignments
//     method.
func (client *DataProductsClient) ListRolesAssignments(ctx context.Context, subscriptionID string, resourceGroupName string, dataProductName string, body ListRolesAssignmentsRequest, options *DataProductsClientListRolesAssignmentsOptions) (DataProductsClientListRolesAssignmentsResponse, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "DataProductsClient.ListRolesAssignments")
	req, err := client.listRolesAssignmentsCreateRequest(ctx, subscriptionID, resourceGroupName, dataProductName, body, options)
	if err != nil {
		return DataProductsClientListRolesAssignmentsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DataProductsClientListRolesAssignmentsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return DataProductsClientListRolesAssignmentsResponse{}, err
	}
	resp, err := client.listRolesAssignmentsHandleResponse(httpResp)
	return resp, err
}

// listRolesAssignmentsCreateRequest creates the ListRolesAssignments request.
func (client *DataProductsClient) listRolesAssignmentsCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, dataProductName string, body ListRolesAssignmentsRequest, options *DataProductsClientListRolesAssignmentsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkAnalytics/dataProducts/{dataProductName}/listRolesAssignments"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if dataProductName == "" {
		return nil, errors.New("parameter dataProductName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{dataProductName}", url.PathEscape(dataProductName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-11-15")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// listRolesAssignmentsHandleResponse handles the ListRolesAssignments response.
func (client *DataProductsClient) listRolesAssignmentsHandleResponse(resp *http.Response) (DataProductsClientListRolesAssignmentsResponse, error) {
	result := DataProductsClientListRolesAssignmentsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ListRoleAssignments); err != nil {
		return DataProductsClientListRolesAssignmentsResponse{}, err
	}
	return result, nil
}

// RemoveUserRole - Remove role from the data product.
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - dataProductName - The data product resource name
//   - body - The content of the action request
//   - options - DataProductsClientRemoveUserRoleOptions contains the optional parameters for the DataProductsClient.RemoveUserRole
//     method.
func (client *DataProductsClient) RemoveUserRole(ctx context.Context, subscriptionID string, resourceGroupName string, dataProductName string, body RoleAssignmentDetail, options *DataProductsClientRemoveUserRoleOptions) (DataProductsClientRemoveUserRoleResponse, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "DataProductsClient.RemoveUserRole")
	req, err := client.removeUserRoleCreateRequest(ctx, subscriptionID, resourceGroupName, dataProductName, body, options)
	if err != nil {
		return DataProductsClientRemoveUserRoleResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DataProductsClientRemoveUserRoleResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return DataProductsClientRemoveUserRoleResponse{}, err
	}
	return DataProductsClientRemoveUserRoleResponse{}, nil
}

// removeUserRoleCreateRequest creates the RemoveUserRole request.
func (client *DataProductsClient) removeUserRoleCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, dataProductName string, body RoleAssignmentDetail, options *DataProductsClientRemoveUserRoleOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkAnalytics/dataProducts/{dataProductName}/removeUserRole"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if dataProductName == "" {
		return nil, errors.New("parameter dataProductName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{dataProductName}", url.PathEscape(dataProductName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-11-15")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// RotateKey - Initiate key rotation on Data Product.
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - dataProductName - The data product resource name
//   - body - The content of the action request
//   - options - DataProductsClientRotateKeyOptions contains the optional parameters for the DataProductsClient.RotateKey method.
func (client *DataProductsClient) RotateKey(ctx context.Context, subscriptionID string, resourceGroupName string, dataProductName string, body KeyVaultInfo, options *DataProductsClientRotateKeyOptions) (DataProductsClientRotateKeyResponse, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "DataProductsClient.RotateKey")
	req, err := client.rotateKeyCreateRequest(ctx, subscriptionID, resourceGroupName, dataProductName, body, options)
	if err != nil {
		return DataProductsClientRotateKeyResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DataProductsClientRotateKeyResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return DataProductsClientRotateKeyResponse{}, err
	}
	return DataProductsClientRotateKeyResponse{}, nil
}

// rotateKeyCreateRequest creates the RotateKey request.
func (client *DataProductsClient) rotateKeyCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, dataProductName string, body KeyVaultInfo, options *DataProductsClientRotateKeyOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkAnalytics/dataProducts/{dataProductName}/rotateKey"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if dataProductName == "" {
		return nil, errors.New("parameter dataProductName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{dataProductName}", url.PathEscape(dataProductName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-11-15")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginUpdate - Update data product resource.
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - dataProductName - The data product resource name
//   - properties - The resource properties to be updated.
//   - options - DataProductsClientUpdateOptions contains the optional parameters for the DataProductsClient.Update method.
func (client *DataProductsClient) BeginUpdate(ctx context.Context, subscriptionID string, resourceGroupName string, dataProductName string, properties DataProductUpdate, options *DataProductsClientUpdateOptions) (*runtime.Poller[DataProductsClientUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.update(ctx, subscriptionID, resourceGroupName, dataProductName, properties, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller[DataProductsClientUpdateResponse](resp, client.internal.Pipeline(), nil)
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken[DataProductsClientUpdateResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// Update - Update data product resource.
func (client *DataProductsClient) update(ctx context.Context, subscriptionID string, resourceGroupName string, dataProductName string, properties DataProductUpdate, options *DataProductsClientUpdateOptions) (*http.Response, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "DataProductsClient.BeginUpdate")
	req, err := client.updateCreateRequest(ctx, subscriptionID, resourceGroupName, dataProductName, properties, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateCreateRequest creates the Update request.
func (client *DataProductsClient) updateCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, dataProductName string, properties DataProductUpdate, options *DataProductsClientUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkAnalytics/dataProducts/{dataProductName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if dataProductName == "" {
		return nil, errors.New("parameter dataProductName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{dataProductName}", url.PathEscape(dataProductName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-11-15")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, properties); err != nil {
		return nil, err
	}
	return req, nil
}
