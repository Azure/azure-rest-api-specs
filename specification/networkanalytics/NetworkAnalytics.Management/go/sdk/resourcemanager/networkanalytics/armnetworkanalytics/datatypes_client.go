// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armnetworkanalytics

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// DataTypesClient - Operations on data type resource.
// Don't use this type directly, use NewDataTypesClient() instead.
type DataTypesClient struct {
	internal *arm.Client
}

// NewDataTypesClient creates a new instance of DataTypesClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewDataTypesClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*DataTypesClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &DataTypesClient{
		internal: cl,
	}
	return client, nil
}

// BeginCreate - Create data type resource.
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - dataProductName - The data product resource name
//   - dataTypeName - The data type name.
//   - resource - Resource create parameters.
//   - options - DataTypesClientCreateOptions contains the optional parameters for the DataTypesClient.Create method.
func (client *DataTypesClient) BeginCreate(ctx context.Context, subscriptionID string, resourceGroupName string, dataProductName string, dataTypeName string, resource DataType, options *DataTypesClientCreateOptions) (*runtime.Poller[DataTypesClientCreateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.create(ctx, subscriptionID, resourceGroupName, dataProductName, dataTypeName, resource, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller[DataTypesClientCreateResponse](resp, client.internal.Pipeline(), nil)
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken[DataTypesClientCreateResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// Create - Create data type resource.
func (client *DataTypesClient) create(ctx context.Context, subscriptionID string, resourceGroupName string, dataProductName string, dataTypeName string, resource DataType, options *DataTypesClientCreateOptions) (*http.Response, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "DataTypesClient.BeginCreate")
	req, err := client.createCreateRequest(ctx, subscriptionID, resourceGroupName, dataProductName, dataTypeName, resource, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createCreateRequest creates the Create request.
func (client *DataTypesClient) createCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, dataProductName string, dataTypeName string, resource DataType, options *DataTypesClientCreateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkAnalytics/dataProducts/{dataProductName}/dataTypes/{dataTypeName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if dataProductName == "" {
		return nil, errors.New("parameter dataProductName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{dataProductName}", url.PathEscape(dataProductName))
	if dataTypeName == "" {
		return nil, errors.New("parameter dataTypeName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{dataTypeName}", url.PathEscape(dataTypeName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-11-15")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginDelete - Delete data type resource.
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - dataProductName - The data product resource name
//   - dataTypeName - The data type name.
//   - options - DataTypesClientDeleteOptions contains the optional parameters for the DataTypesClient.Delete method.
func (client *DataTypesClient) BeginDelete(ctx context.Context, subscriptionID string, resourceGroupName string, dataProductName string, dataTypeName string, options *DataTypesClientDeleteOptions) (*runtime.Poller[DataTypesClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, subscriptionID, resourceGroupName, dataProductName, dataTypeName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller[DataTypesClientDeleteResponse](resp, client.internal.Pipeline(), nil)
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken[DataTypesClientDeleteResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// Delete - Delete data type resource.
func (client *DataTypesClient) deleteOperation(ctx context.Context, subscriptionID string, resourceGroupName string, dataProductName string, dataTypeName string, options *DataTypesClientDeleteOptions) (*http.Response, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "DataTypesClient.BeginDelete")
	req, err := client.deleteCreateRequest(ctx, subscriptionID, resourceGroupName, dataProductName, dataTypeName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *DataTypesClient) deleteCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, dataProductName string, dataTypeName string, options *DataTypesClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkAnalytics/dataProducts/{dataProductName}/dataTypes/{dataTypeName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if dataProductName == "" {
		return nil, errors.New("parameter dataProductName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{dataProductName}", url.PathEscape(dataProductName))
	if dataTypeName == "" {
		return nil, errors.New("parameter dataTypeName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{dataTypeName}", url.PathEscape(dataTypeName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-11-15")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// BeginDeleteData - Delete data for data type.
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - dataProductName - The data product resource name
//   - dataTypeName - The data type name.
//   - body - The content of the action request
//   - options - DataTypesClientDeleteDataOptions contains the optional parameters for the DataTypesClient.DeleteData method.
func (client *DataTypesClient) BeginDeleteData(ctx context.Context, subscriptionID string, resourceGroupName string, dataProductName string, dataTypeName string, body DeleteDataRequest, options *DataTypesClientDeleteDataOptions) (*runtime.Poller[DataTypesClientDeleteDataResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteData(ctx, subscriptionID, resourceGroupName, dataProductName, dataTypeName, body, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller[DataTypesClientDeleteDataResponse](resp, client.internal.Pipeline(), nil)
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken[DataTypesClientDeleteDataResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// DeleteData - Delete data for data type.
func (client *DataTypesClient) deleteData(ctx context.Context, subscriptionID string, resourceGroupName string, dataProductName string, dataTypeName string, body DeleteDataRequest, options *DataTypesClientDeleteDataOptions) (*http.Response, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "DataTypesClient.BeginDeleteData")
	req, err := client.deleteDataCreateRequest(ctx, subscriptionID, resourceGroupName, dataProductName, dataTypeName, body, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteDataCreateRequest creates the DeleteData request.
func (client *DataTypesClient) deleteDataCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, dataProductName string, dataTypeName string, body DeleteDataRequest, options *DataTypesClientDeleteDataOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkAnalytics/dataProducts/{dataProductName}/dataTypes/{dataTypeName}/deleteData"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if dataProductName == "" {
		return nil, errors.New("parameter dataProductName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{dataProductName}", url.PathEscape(dataProductName))
	if dataTypeName == "" {
		return nil, errors.New("parameter dataTypeName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{dataTypeName}", url.PathEscape(dataTypeName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-11-15")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// GenerateStorageContainerSasToken - Generate sas token for storage container.
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - dataProductName - The data product resource name
//   - dataTypeName - The data type name.
//   - body - The content of the action request
//   - options - DataTypesClientGenerateStorageContainerSasTokenOptions contains the optional parameters for the DataTypesClient.GenerateStorageContainerSasToken
//     method.
func (client *DataTypesClient) GenerateStorageContainerSasToken(ctx context.Context, subscriptionID string, resourceGroupName string, dataProductName string, dataTypeName string, body ContainerSaS, options *DataTypesClientGenerateStorageContainerSasTokenOptions) (DataTypesClientGenerateStorageContainerSasTokenResponse, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "DataTypesClient.GenerateStorageContainerSasToken")
	req, err := client.generateStorageContainerSasTokenCreateRequest(ctx, subscriptionID, resourceGroupName, dataProductName, dataTypeName, body, options)
	if err != nil {
		return DataTypesClientGenerateStorageContainerSasTokenResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DataTypesClientGenerateStorageContainerSasTokenResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return DataTypesClientGenerateStorageContainerSasTokenResponse{}, err
	}
	resp, err := client.generateStorageContainerSasTokenHandleResponse(httpResp)
	return resp, err
}

// generateStorageContainerSasTokenCreateRequest creates the GenerateStorageContainerSasToken request.
func (client *DataTypesClient) generateStorageContainerSasTokenCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, dataProductName string, dataTypeName string, body ContainerSaS, options *DataTypesClientGenerateStorageContainerSasTokenOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkAnalytics/dataProducts/{dataProductName}/dataTypes/{dataTypeName}/generateStorageContainerSasToken"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if dataProductName == "" {
		return nil, errors.New("parameter dataProductName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{dataProductName}", url.PathEscape(dataProductName))
	if dataTypeName == "" {
		return nil, errors.New("parameter dataTypeName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{dataTypeName}", url.PathEscape(dataTypeName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-11-15")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// generateStorageContainerSasTokenHandleResponse handles the GenerateStorageContainerSasToken response.
func (client *DataTypesClient) generateStorageContainerSasTokenHandleResponse(resp *http.Response) (DataTypesClientGenerateStorageContainerSasTokenResponse, error) {
	result := DataTypesClientGenerateStorageContainerSasTokenResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ContainerSasToken); err != nil {
		return DataTypesClientGenerateStorageContainerSasTokenResponse{}, err
	}
	return result, nil
}

// Get - Retrieve data type resource.
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - dataProductName - The data product resource name
//   - dataTypeName - The data type name.
//   - options - DataTypesClientGetOptions contains the optional parameters for the DataTypesClient.Get method.
func (client *DataTypesClient) Get(ctx context.Context, subscriptionID string, resourceGroupName string, dataProductName string, dataTypeName string, options *DataTypesClientGetOptions) (DataTypesClientGetResponse, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "DataTypesClient.Get")
	req, err := client.getCreateRequest(ctx, subscriptionID, resourceGroupName, dataProductName, dataTypeName, options)
	if err != nil {
		return DataTypesClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DataTypesClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return DataTypesClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *DataTypesClient) getCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, dataProductName string, dataTypeName string, options *DataTypesClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkAnalytics/dataProducts/{dataProductName}/dataTypes/{dataTypeName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if dataProductName == "" {
		return nil, errors.New("parameter dataProductName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{dataProductName}", url.PathEscape(dataProductName))
	if dataTypeName == "" {
		return nil, errors.New("parameter dataTypeName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{dataTypeName}", url.PathEscape(dataTypeName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-11-15")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *DataTypesClient) getHandleResponse(resp *http.Response) (DataTypesClientGetResponse, error) {
	result := DataTypesClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DataType); err != nil {
		return DataTypesClientGetResponse{}, err
	}
	return result, nil
}

// NewListByDataProductPager - List data type by parent resource.
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - dataProductName - The data product resource name
//   - options - DataTypesClientListByDataProductOptions contains the optional parameters for the DataTypesClient.NewListByDataProductPager
//     method.
func (client *DataTypesClient) NewListByDataProductPager(subscriptionID string, resourceGroupName string, dataProductName string, options *DataTypesClientListByDataProductOptions) *runtime.Pager[DataTypesClientListByDataProductResponse] {
	return runtime.NewPager(runtime.PagingHandler[DataTypesClientListByDataProductResponse]{
		More: func(page DataTypesClientListByDataProductResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *DataTypesClientListByDataProductResponse) (DataTypesClientListByDataProductResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "DataTypesClient.NewListByDataProductPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByDataProductCreateRequest(ctx, subscriptionID, resourceGroupName, dataProductName, options)
			}, nil)
			if err != nil {
				return DataTypesClientListByDataProductResponse{}, err
			}
			return client.listByDataProductHandleResponse(resp)
		},
	})
}

// listByDataProductCreateRequest creates the ListByDataProduct request.
func (client *DataTypesClient) listByDataProductCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, dataProductName string, options *DataTypesClientListByDataProductOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkAnalytics/dataProducts/{dataProductName}/dataTypes"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if dataProductName == "" {
		return nil, errors.New("parameter dataProductName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{dataProductName}", url.PathEscape(dataProductName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-11-15")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByDataProductHandleResponse handles the ListByDataProduct response.
func (client *DataTypesClient) listByDataProductHandleResponse(resp *http.Response) (DataTypesClientListByDataProductResponse, error) {
	result := DataTypesClientListByDataProductResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DataTypeListResult); err != nil {
		return DataTypesClientListByDataProductResponse{}, err
	}
	return result, nil
}

// BeginUpdate - Update data type resource.
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - dataProductName - The data product resource name
//   - dataTypeName - The data type name.
//   - properties - The resource properties to be updated.
//   - options - DataTypesClientUpdateOptions contains the optional parameters for the DataTypesClient.Update method.
func (client *DataTypesClient) BeginUpdate(ctx context.Context, subscriptionID string, resourceGroupName string, dataProductName string, dataTypeName string, properties DataTypeUpdate, options *DataTypesClientUpdateOptions) (*runtime.Poller[DataTypesClientUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.update(ctx, subscriptionID, resourceGroupName, dataProductName, dataTypeName, properties, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller[DataTypesClientUpdateResponse](resp, client.internal.Pipeline(), nil)
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken[DataTypesClientUpdateResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// Update - Update data type resource.
func (client *DataTypesClient) update(ctx context.Context, subscriptionID string, resourceGroupName string, dataProductName string, dataTypeName string, properties DataTypeUpdate, options *DataTypesClientUpdateOptions) (*http.Response, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "DataTypesClient.BeginUpdate")
	req, err := client.updateCreateRequest(ctx, subscriptionID, resourceGroupName, dataProductName, dataTypeName, properties, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateCreateRequest creates the Update request.
func (client *DataTypesClient) updateCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, dataProductName string, dataTypeName string, properties DataTypeUpdate, options *DataTypesClientUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkAnalytics/dataProducts/{dataProductName}/dataTypes/{dataTypeName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if dataProductName == "" {
		return nil, errors.New("parameter dataProductName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{dataProductName}", url.PathEscape(dataProductName))
	if dataTypeName == "" {
		return nil, errors.New("parameter dataTypeName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{dataTypeName}", url.PathEscape(dataTypeName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-11-15")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, properties); err != nil {
		return nil, err
	}
	return req, nil
}
