import "@cadl-lang/rest";
import "@azure-tools/cadl-providerhub";
import "@azure-tools/cadl-azure-core";
import "@azure-tools/cadl-azure-resource-manager";
import "@azure-tools/cadl-autorest";
import "@cadl-lang/versioning";
using Cadl.Versioning;

using Cadl.Http;
using Cadl.Rest;
using Azure.ResourceManager;
using Autorest;
using OpenAPI;

@armProviderNamespace()
@serviceTitle("Microsoft.NetworkAnalytics")
@serviceVersion("2022-11-15-preview")
@versionedDependency(Azure.ResourceManager.Versions.v1_0_Preview_1)
namespace Microsoft.NetworkAnalytics;


@doc("A NetworkAnalyticsProviderHub resource")
model DataLakeHouseResources is TrackedResource < StorageProperties > {
    @doc("Storage resource Properties")
    @key("storageName")
    @segment("dataLakeHouses")
    @path
    name: string;
}

@doc("Details of the NetworkAnalytics Storage.")
model StorageProperties {
    @doc("StorageProperties")
    @visibility("read")
    provisioningState ?: ProvisioningState;
    @doc("Managed Resource Group Configuration.")
    managedResourceGroupConfiguration?: ManagedResourceGroupConfiguration;
    @visibility("create")
    @doc("unique Identifier Name")
    uniqueIdentifierName: string;
    @doc("Common Storage Account Properties.")
    commonStorageAccountProperties: CommonStorageAccountProperties;
    @visibility("create")
    @doc("Bronze Storage Account Properties.")
    bronzeStorageAccountProperties?: BronzeStorageAccountProperties;
    @doc("Azure DataExplorer Cluster Properties.")
    azureDataExplorerProperties: AzureDataExplorerProperties;
}

@doc("The status of the current operation.")
@knownValues(ProvisioningStateKV)
model ProvisioningState is string { }
enum ProvisioningStateKV {
    Succeeded,
    Failed,
    Canceled,
    Provisioning,
    Updating,
    Deleting,
    Accepted,
}

@doc("ManagedResourceGroup related Properties")
model ManagedResourceGroupConfiguration {
    @doc("Name of MRG")
    name: string;
    @doc("MRG location")
    location: string;
}

@doc("Common Storage Account Properties.")
model CommonStorageAccountProperties {
    @visibility("create")
    @doc("Allow or disallow public network access to Storage Account.")
    publicNetworkAccess?: string;
    @doc("Network rule set")
    networkacls ?: NetworkAcls;
    @visibility("create")
    @doc("Blob Services")
    blobServices?: BlobServices;
    @doc("Private End Point")
    privateEndPoint?: PrivateEndPoint;
}

@doc("Configuration for BronzeAccount")
model BronzeStorageAccountProperties {
    @doc("Enables Secure File Transfer Protocol, if set to true")
    isSftpEnabled: boolean;
}

@doc("ADx Properties")
model AzureDataExplorerProperties {
    @visibility("create")
    @doc("Virtual Network Configuration")
    virtualNetworkConfiguration?: VirtualNetworkConfiguration;
    @doc("Kusto Cluster Principal Assignments")
    kustoClusterPrincipalAssignments: KustoClusterPrincipalAssignments;
}

enum KustoRoleType {
  AllDatabasesAdmin,
  AllDatabasesViewer
}
@knownValues(KustoRoleType)
model KustoRole is string {}

enum PrincipalTypeValues {
    App,
    Group,
    User,
}
@knownValues(PrincipalTypeValues)
model PrincipalType is string {}

@doc("ADx Role assignments")
model KustoClusterPrincipalAssignments {
    @visibility("create")
    @doc("system Identity Name")
    systemIdentityName?: string;
    @doc("Kusto roles")
    role: KustoRole;
    @doc("Principal type.")
    principalType: PrincipalType;
}

@doc("Private End Point Resource")
model PrivateEndPoint {
    @doc("Resource ID of a subnet")
    subnetId: string;
    @doc("The private link resource service id")
    privateLinkServiceId: string;
    @doc("The private link resource group id.")
    groupIds: string[];
    @doc("The private link resource customDnsConfigs.")
    customDnsConfigs: string;
}

@doc("Resource Location")
model Location is string { }

@doc("Virtual Network Rule")
model VirtualNetworkRule {
    @doc("Resource ID of a subnet")
    id: string;
    @doc("The action of virtual network rule.")
    action ?: string;
    @doc("Gets the state of virtual network rule.")
    state ?: string;
}

@doc("IP rule with specific IP or IP range in CIDR format.")
model IPRules {
    @doc("IP Rules Value")
    value ? : string;
    @doc("The action of virtual network rule.")
    action: string;
}

@doc("Resource Access Rules.")
model ResourceAccessRules {
    @doc("The tenant ID of resource.")
    tenantId: string;
    @doc("Resource ID")
    resourceId: string;
}

enum BypassType {
   None,
   Logging,
   Metrics,
   AzureServices
}
@knownValues(BypassType)
model Bypass is string {}

enum DefaultActionType {
  Allow,
  Deny
}
@knownValues(DefaultActionType)
model DefaultAction is string {}

@doc("Network rule set")
model NetworkAcls {
    @doc("Specifies whether traffic is bypassed for Logging/Metrics/AzureServices")
    bypass: Bypass;
    @doc("Virtual Network Rule")
    virtualNetworkRule: VirtualNetworkRule[];
    @doc("IP rule with specific IP or IP range in CIDR format.")
    @extension("x-ms-identifiers", [])
    ipRules: IPRules[];
    @doc("Resource Access Rules.")
     @extension("x-ms-identifiers", [])
    resourceAccessRules: ResourceAccessRules[];
    @doc("Default Action")
    defaultAction: DefaultAction;
}

@doc("Restore Policy")
model RestorePolicy {
    @doc("Restore Policy enabled or disabled boolean value")
    enabled: boolean;
    @doc("Restore Policy in days")
    days: int32;
}

@doc("Configuration for creating Blob Service")
model BlobServices {
    @doc("Restore Policy")
    restorePolicy: RestorePolicy;
}

@doc("Virtual Network Configuration")
model VirtualNetworkConfiguration {
    @doc("Resource ID of a subnet")
    subnetId: string;
    @doc("Engine Public IP ID")
    enginePublicIpId: string;
    @doc("Data Management Public Ip ID")
    dataManagementPublicIpId: string;
}

@armResourceOperations
interface Storage extends ResourceOperations<DataLakeHouseResources, StorageProperties> { }
