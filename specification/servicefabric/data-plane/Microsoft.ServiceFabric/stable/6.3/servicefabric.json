{
  "swagger": "2.0",
  "info": {
    "title": "Service Fabric Client APIs",
    "description": "Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.",
    "version": "6.3.0.9"
  },
  "host": "localhost:19080",
  "schemes": [
    "http",
    "https"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/$/GetClusterManifest": {
      "get": {
        "operationId": "GetClusterManifest",
        "summary": "Get the Service Fabric cluster manifest.",
        "description": "Get the Service Fabric cluster manifest. The cluster manifest contains properties of the cluster that include different node types on the cluster,\nsecurity configurations, fault, and upgrade domain topologies, etc.\n\nThese properties are specified as part of the ClusterConfig.JSON file while deploying a stand-alone cluster. However, most of the information in the cluster manifest\nis generated internally by service fabric during cluster deployment in other deployment scenarios (e.g. when using Azure portal).\n\nThe contents of the cluster manifest are for informational purposes only and users are not expected to take a dependency on the format of the file contents or its interpretation.",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code and the requested cluster manifest information.",
            "schema": {
              "$ref": "#/definitions/ClusterManifest"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/$/GetClusterHealth": {
      "get": {
        "operationId": "GetClusterHealth",
        "summary": "Gets the health of a Service Fabric cluster.",
        "description": "Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health state.\nSimilarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to filter the collection of nodes and applications returned based on their aggregated health state.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/NodesHealthStateFilterOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/ApplicationsHealthStateFilterOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/EventsHealthStateFilterOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/ExcludeHealthStatisticsOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/IncludeSystemApplicationHealthStatisticsOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Cluster"
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code and the requested cluster health information.",
            "schema": {
              "$ref": "#/definitions/ClusterHealth"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      },
      "post": {
        "operationId": "GetClusterHealthUsingPolicy",
        "summary": "Gets the health of a Service Fabric cluster using the specified policy.",
        "description": "Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health state.\nSimilarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to filter the collection of nodes and applications returned based on their aggregated health state.\nUse ClusterHealthPolicies to override the health policies used to evaluate the health.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/NodesHealthStateFilterOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/ApplicationsHealthStateFilterOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/EventsHealthStateFilterOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/ExcludeHealthStatisticsOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/IncludeSystemApplicationHealthStatisticsOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/ClusterHealthPoliciesOptionalBodyParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Cluster"
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code and the requested cluster health information.",
            "schema": {
              "$ref": "#/definitions/ClusterHealth"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/$/GetClusterHealthChunk": {
      "get": {
        "operationId": "GetClusterHealthChunk",
        "summary": "Gets the health of a Service Fabric cluster using health chunks.",
        "description": "Gets the health of a Service Fabric cluster using health chunks. Includes the aggregated health state of the cluster, but none of the cluster entities.\nTo expand the cluster health and get the health state of all or some of the entities, use the POST URI and specify the cluster health chunk query description.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Cluster"
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code and the requested cluster health chunk information.",
            "schema": {
              "$ref": "#/definitions/ClusterHealthChunk"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      },
      "post": {
        "operationId": "GetClusterHealthChunkUsingPolicyAndAdvancedFilters",
        "summary": "Gets the health of a Service Fabric cluster using health chunks.",
        "description": "Gets the health of a Service Fabric cluster using health chunks. The health evaluation is done based on the input cluster health chunk query description.\nThe query description allows users to specify health policies for evaluating the cluster and its children.\nUsers can specify very flexible filters to select which cluster entities to return. The selection can be done based on the entities health state and based on the hierarchy.\nThe query can return multi-level children of the entities based on the specified filters. For example, it can return one application with a specified name, and for this application, return\nonly services that are in Error or Warning, and all partitions and replicas for one of these services.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ClusterHealthChunkQueryDescriptionOptionalBodyParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Cluster"
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code and the requested cluster health chunk information.",
            "schema": {
              "$ref": "#/definitions/ClusterHealthChunk"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/$/ReportClusterHealth": {
      "post": {
        "operationId": "ReportClusterHealth",
        "summary": "Sends a health report on the Service Fabric cluster.",
        "description": "Sends a health report on a Service Fabric cluster. The report must contain the information about the source of the health report and property on which it is reported.\nThe report is sent to a Service Fabric gateway node, which forwards to the health store.\nThe report may be accepted by the gateway, but rejected by the health store after extra validation.\nFor example, the health store may reject the report because of an invalid parameter, like a stale sequence number.\nTo see whether the report was applied in the health store, run GetClusterHealth and check that the report appears in the HealthEvents section.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/HealthInformationRequiredBodyParam"
          },
          {
            "$ref": "#/parameters/ImmediateOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Cluster"
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code when the cluster health report is accepted for processing."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/$/GetProvisionedCodeVersions": {
      "get": {
        "operationId": "GetProvisionedFabricCodeVersionInfoList",
        "summary": "Gets a list of fabric code versions that are provisioned in a Service Fabric cluster.",
        "description": "Gets a list of information about fabric code versions that are provisioned in the cluster. The parameter CodeVersion can be used to optionally filter the output to only that particular version.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/CodeVersionOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Cluster"
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code and the requested provisioned code versions information.",
            "schema": {
              "$ref": "#/definitions/FabricCodeVersionInfoList"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/$/GetProvisionedConfigVersions": {
      "get": {
        "operationId": "GetProvisionedFabricConfigVersionInfoList",
        "summary": "Gets a list of fabric config versions that are provisioned in a Service Fabric cluster.",
        "description": "Gets a list of information about fabric config versions that are provisioned in the cluster. The parameter ConfigVersion can be used to optionally filter the output to only that particular version.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ConfigVersionOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Cluster"
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code and the requested provisioned config versions information.",
            "schema": {
              "$ref": "#/definitions/FabricConfigVersionInfoList"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/$/GetUpgradeProgress": {
      "get": {
        "operationId": "GetClusterUpgradeProgress",
        "summary": "Gets the progress of the current cluster upgrade.",
        "description": "Gets the current progress of the ongoing cluster upgrade. If no upgrade is currently in progress, get the last state of the previous cluster upgrade.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Cluster"
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code and the requested cluster upgrade progress.",
            "schema": {
              "$ref": "#/definitions/ClusterUpgradeProgressObject"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/$/GetClusterConfiguration": {
      "get": {
        "operationId": "GetClusterConfiguration",
        "summary": "Get the Service Fabric standalone cluster configuration.",
        "description": "The cluster configuration contains properties of the cluster that include different node types on the cluster,\nsecurity configurations, fault, and upgrade domain topologies, etc.",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ConfigurationApiVersionRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code and the requested cluster configuration information.",
            "schema": {
              "$ref": "#/definitions/ClusterConfiguration"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/$/GetClusterConfigurationUpgradeStatus": {
      "get": {
        "operationId": "GetClusterConfigurationUpgradeStatus",
        "summary": "Get the cluster configuration upgrade status of a Service Fabric standalone cluster.",
        "description": "Get the cluster configuration upgrade status details of a Service Fabric standalone cluster.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Cluster"
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code and the requested cluster configuration upgrade status.",
            "schema": {
              "$ref": "#/definitions/ClusterConfigurationUpgradeStatusInfo"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/$/GetUpgradeOrchestrationServiceState": {
      "get": {
        "operationId": "GetUpgradeOrchestrationServiceState",
        "summary": "Get the service state of Service Fabric Upgrade Orchestration Service.",
        "description": "Get the service state of Service Fabric Upgrade Orchestration Service. This API is internally used for support purposes.",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code and the requested service state of Service Fabric Upgrade Orchestration Service.",
            "schema": {
              "$ref": "#/definitions/UpgradeOrchestrationServiceState"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/$/SetUpgradeOrchestrationServiceState": {
      "post": {
        "operationId": "SetUpgradeOrchestrationServiceState",
        "summary": "Update the service state of Service Fabric Upgrade Orchestration Service.",
        "description": "Update the service state of Service Fabric Upgrade Orchestration Service. This API is internally used for support purposes.",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/UpgradeOrchestrationServiceStateRequiredBodyParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response means that the service state of Service Fabric Upgrade Orchestration Service has been updated.",
            "schema": {
              "$ref": "#/definitions/UpgradeOrchestrationServiceStateSummary"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/$/Provision": {
      "post": {
        "summary": "Provision the code or configuration packages of a Service Fabric cluster.",
        "description": "Validate and provision the code or configuration packages of a Service Fabric cluster.",
        "operationId": "ProvisionCluster",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ProvisionFabricDescriptionRequiredBodyParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Cluster"
        ],
        "responses": {
          "200": {
            "description": "A successful response means that the code or configuration packages have been provisioned."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/$/Unprovision": {
      "post": {
        "summary": "Unprovision the code or configuration packages of a Service Fabric cluster.",
        "description": "It is supported to unprovision code and configuration separately.",
        "operationId": "UnprovisionCluster",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/UnprovisionFabricDescriptionRequiredBodyParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Cluster"
        ],
        "responses": {
          "200": {
            "description": "A successful response means that the code or configuration packages have been unprovisioned."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/$/RollbackUpgrade": {
      "post": {
        "summary": "Rollback the upgrade of a Service Fabric cluster.",
        "description": "Rollback the code or configuration upgrade of a Service Fabric cluster.",
        "operationId": "RollbackClusterUpgrade",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Cluster"
        ],
        "responses": {
          "202": {
            "description": "A successful response means that the rollback of a cluster upgrade has been initiated."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/$/MoveToNextUpgradeDomain": {
      "post": {
        "summary": "Make the cluster upgrade move on to the next upgrade domain.",
        "description": "Make the cluster code or configuration upgrade move on to the next upgrade domain if appropriate.",
        "operationId": "ResumeClusterUpgrade",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ResumeClusterUpgradeDescriptionRequiredBodyParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Cluster"
        ],
        "responses": {
          "200": {
            "description": "A successful response means that the cluster upgrade has moved on to the next upgrade domain."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/$/Upgrade": {
      "post": {
        "summary": "Start upgrading the code or configuration version of a Service Fabric cluster.",
        "description": "Validate the supplied upgrade parameters and start upgrading the code or configuration version of a Service Fabric cluster if the parameters are valid.",
        "operationId": "StartClusterUpgrade",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/StartClusterUpgradeDescriptionRequiredBodyParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Cluster"
        ],
        "responses": {
          "202": {
            "description": "A successful response means that the cluster code or configuration upgrade has started. Use GetUpgradeProgress operation to get the status of the upgrade."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/$/StartClusterConfigurationUpgrade": {
      "post": {
        "summary": "Start upgrading the configuration of a Service Fabric standalone cluster.",
        "description": "Validate the supplied configuration upgrade parameters and start upgrading the cluster configuration if the parameters are valid.",
        "operationId": "StartClusterConfigurationUpgrade",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ClusterConfigurationUpgradeDescriptionRequiredBodyParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Cluster"
        ],
        "x-ms-examples": {
          "Start upgrading the configuration of a Service Fabric standalone cluster": {
            "$ref": "./examples/StartClusterConfigurationUpgrade-1.json"
          }
        },
        "responses": {
          "202": {
            "description": "A successful response means that the cluster configuration upgrade has started. Use GetClusterConfigurationUpgradeStatus operation to get the status of the upgrade."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/$/UpdateUpgrade": {
      "post": {
        "operationId": "UpdateClusterUpgrade",
        "summary": "Update the upgrade parameters of a Service Fabric cluster upgrade.",
        "description": "Update the upgrade parameters used during a Service Fabric cluster upgrade.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/UpdateClusterUpgradeDescriptionRequiredBodyParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Cluster"
        ],
        "responses": {
          "200": {
            "description": "A successful operation returns 200 status code."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/$/GetAadMetadata": {
      "get": {
        "operationId": "GetAadMetadata",
        "summary": "Gets the Azure Active Directory metadata used for secured connection to cluster.",
        "description": "Gets the Azure Active Directory metadata used for secured connection to cluster.\nThis API is not supposed to be called separately. It provides information needed to set up an Azure Active Directory secured connection with a Service Fabric cluster.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "Cluster"
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code and the Azure Active Directory metadata.",
            "schema": {
              "$ref": "#/definitions/AadMetadataObject"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Nodes": {
      "get": {
        "summary": "Gets the list of nodes in the Service Fabric cluster.",
        "description": "The response includes the name, status, ID, health, uptime, and other details about the nodes.",
        "operationId": "GetNodeInfoList",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-3_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ContinuationTokenOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/NodeStatusFilterOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/MaxResultsOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Node"
        ],
        "x-ms-examples": {
          "Get information about all nodes": {
            "$ref": "./examples/GetNodeInfoList.json"
          },
          "Limit maximum results": {
            "$ref": "./examples/GetNodeInfoList-1.json"
          },
          "Page using continuation token": {
            "$ref": "./examples/GetNodeInfoList-2.json"
          }
        },
        "responses": {
          "200": {
            "description": "List of nodes in the cluster.",
            "schema": {
              "$ref": "#/definitions/PagedNodeInfoList"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Nodes/{nodeName}": {
      "get": {
        "summary": "Gets the information about a specific node in the Service Fabric cluster.",
        "description": "The response includes the name, status, ID, health, uptime, and other details about the node.",
        "operationId": "GetNodeInfo",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/NodeNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Node"
        ],
        "x-ms-examples": {
          "Get a specific node by node name": {
            "$ref": "./examples/GetNodeInfo-1.json"
          }
        },
        "responses": {
          "200": {
            "description": "A successful operation will return information about the node with the specified nodeName.",
            "schema": {
              "$ref": "#/definitions/NodeInfo"
            }
          },
          "204": {
            "description": "An empty response is returned if the specified nodeName is not found."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Nodes/{nodeName}/$/GetHealth": {
      "get": {
        "operationId": "GetNodeHealth",
        "summary": "Gets the health of a Service Fabric node.",
        "description": "Gets the health of a Service Fabric node. Use EventsHealthStateFilter to filter the collection of health events reported on the node based on the health state. If the node that you specify by name does not exist in the health store, this returns an error.",
        "tags": [
          "Node"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/NodeNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/EventsHealthStateFilterOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code and the requested node health information.",
            "schema": {
              "$ref": "#/definitions/NodeHealth"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      },
      "post": {
        "operationId": "GetNodeHealthUsingPolicy",
        "summary": "Gets the health of a Service Fabric node, by using the specified health policy.",
        "description": "Gets the health of a Service Fabric node. Use EventsHealthStateFilter to filter the collection of health events reported on the node based on the health state. Use ClusterHealthPolicy in the POST body to override the health policies used to evaluate the health. If the node that you specify by name does not exist in the health store, this returns an error.",
        "tags": [
          "Node"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/NodeNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/EventsHealthStateFilterOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/ClusterHealthPolicyOptionalBodyParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code and the requested node health information.",
            "schema": {
              "$ref": "#/definitions/NodeHealth"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Nodes/{nodeName}/$/ReportHealth": {
      "post": {
        "operationId": "ReportNodeHealth",
        "summary": "Sends a health report on the Service Fabric node.",
        "description": "Reports health state of the specified Service Fabric node. The report must contain the information about the source of the health report and property on which it is reported.\nThe report is sent to a Service Fabric gateway node, which forwards to the health store.\nThe report may be accepted by the gateway, but rejected by the health store after extra validation.\nFor example, the health store may reject the report because of an invalid parameter, like a stale sequence number.\nTo see whether the report was applied in the health store, run GetNodeHealth and check that the report appears in the HealthEvents section.",
        "tags": [
          "Node"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/NodeNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/HealthInformationRequiredBodyParam"
          },
          {
            "$ref": "#/parameters/ImmediateOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Nodes/{nodeName}/$/GetLoadInformation": {
      "get": {
        "operationId": "GetNodeLoadInfo",
        "summary": "Gets the load information of a Service Fabric node.",
        "description": "Retrieves the load information of a Service Fabric node for all the metrics that have load or capacity defined.",
        "tags": [
          "Node"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/NodeNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code and the requested node load information.",
            "schema": {
              "$ref": "#/definitions/NodeLoadInfo"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Nodes/{nodeName}/$/Deactivate": {
      "post": {
        "operationId": "DisableNode",
        "summary": "Deactivate a Service Fabric cluster node with the specified deactivation intent.",
        "description": "Deactivate a Service Fabric cluster node with the specified deactivation intent. Once the deactivation is in progress, the deactivation intent can be increased, but not decreased (for example, a node that is deactivated with the Pause intent can be deactivated further with Restart, but not the other way around. Nodes may be reactivated using the Activate a node operation any time after they are deactivated. If the deactivation is not complete, this will cancel the deactivation. A node that goes down and comes back up while deactivated will still need to be reactivated before services will be placed on that node.",
        "tags": [
          "Node"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/NodeNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/DeactivationIntentDescriptionRequiredBodyParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Nodes/{nodeName}/$/Activate": {
      "post": {
        "operationId": "EnableNode",
        "summary": "Activate a Service Fabric cluster node that is currently deactivated.",
        "description": "Activates a Service Fabric cluster node that is currently deactivated. Once activated, the node will again become a viable target for placing new replicas, and any deactivated replicas remaining on the node will be reactivated.",
        "tags": [
          "Node"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/NodeNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Nodes/{nodeName}/$/RemoveNodeState": {
      "post": {
        "operationId": "RemoveNodeState",
        "summary": "Notifies Service Fabric that the persisted state on a node has been permanently removed or lost.",
        "description": "This implies that it is not possible to recover the persisted state of that node. This generally happens if a hard disk has been wiped clean, or if a hard disk crashes. The node has to be down for this operation to be successful. This operation lets Service Fabric know that the replicas on that node no longer exist, and that Service Fabric should stop waiting for those replicas to come back up. Do not run this cmdlet if the state on the node has not been removed and the node can come back up with its state intact.",
        "tags": [
          "Node"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/NodeNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Nodes/{nodeName}/$/Restart": {
      "post": {
        "operationId": "RestartNode",
        "summary": "Restarts a Service Fabric cluster node.",
        "description": "Restarts a Service Fabric cluster node that is already started.",
        "tags": [
          "Node"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/NodeNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/RestartNodeDescriptionRequiredBodyParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code. A successful operation means that the restart command was received by the node and it is in the process of restarting. Check the status of the node by calling GetNode operation."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/ApplicationTypes": {
      "get": {
        "summary": "Gets the list of application types in the Service Fabric cluster.",
        "description": "Returns the information about the application types that are provisioned or in the process of being provisioned in the Service Fabric cluster. Each version of an application type is returned as one application type. The response includes the name, version, status, and other details about the application type. This is a paged query, meaning that if not all of the application types fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. For example, if there are 10 application types but a page only fits the first three application types, or if max results is set to 3, then three is returned. To access the rest of the results, retrieve subsequent pages by using the returned continuation token in the next query. An empty continuation token is returned if there are no subsequent pages.",
        "operationId": "GetApplicationTypeInfoList",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ApplicationTypeDefinitionKindFilterOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/ExcludeApplicationParametersOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/ContinuationTokenOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/MaxResultsOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "x-ms-examples": {
          "Limit maximum results": {
            "$ref": "./examples/GetApplicationTypeInfoList-1.json"
          },
          "Page using continuation token": {
            "$ref": "./examples/GetApplicationTypeInfoList-2.json"
          },
          "Exclude application parameters from the result": {
            "$ref": "./examples/GetApplicationTypeInfoList-3.json"
          }
        },
        "tags": [
          "ApplicationType"
        ],
        "responses": {
          "200": {
            "description": "List of application types in the cluster.",
            "schema": {
              "$ref": "#/definitions/PagedApplicationTypeInfoList"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/ApplicationTypes/{applicationTypeName}": {
      "get": {
        "summary": "Gets the list of application types in the Service Fabric cluster matching exactly the specified name.",
        "description": "Returns the information about the application types that are provisioned or in the process of being provisioned in the Service Fabric cluster. These results are of application types whose name match exactly the one specified as the parameter, and which comply with the given query parameters. All versions of the application type matching the application type name are returned, with each version returned as one application type. The response includes the name, version, status, and other details about the application type. This is a paged query, meaning that if not all of the application types fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. For example, if there are 10 application types but a page only fits the first three application types, or if max results is set to 3, then three is returned. To access the rest of the results, retrieve subsequent pages by using the returned continuation token in the next query. An empty continuation token is returned if there are no subsequent pages.",
        "operationId": "GetApplicationTypeInfoListByName",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ApplicationTypeNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ApplicationTypeVersionOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/ExcludeApplicationParametersOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/ContinuationTokenOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/MaxResultsOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "ApplicationType"
        ],
        "responses": {
          "200": {
            "description": "List of application types in the cluster.",
            "schema": {
              "$ref": "#/definitions/PagedApplicationTypeInfoList"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/ApplicationTypes/$/Provision": {
      "post": {
        "operationId": "ProvisionApplicationType",
        "summary": "Provisions or registers a Service Fabric application type with the cluster using the '.sfpkg' package in the external store or using the application package in the image store.",
        "description": "Provisions a Service Fabric application type with the cluster. The provision is required before any new applications can be instantiated.\nThe provision operation can be performed either on the application package specified by the relativePathInImageStore, or by using the URI of the external '.sfpkg'.",
        "tags": [
          "ApplicationType"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-2_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ProvisionApplicationTypeDescriptionBaseRequiredBodyParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful provision will return 200 status code."
          },
          "202": {
            "description": "A 202 status code indicates the operation was accepted and the provision operation has been initiated."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/ApplicationTypes/{applicationTypeName}/$/Unprovision": {
      "post": {
        "operationId": "UnprovisionApplicationType",
        "summary": "Removes or unregisters a Service Fabric application type from the cluster.",
        "description": "This operation can only be performed if all application instances of the application type have been deleted. Once the application type is unregistered, no new application instances can be created for this particular application type.",
        "tags": [
          "ApplicationType"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ApplicationTypeNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/UnprovisionApplicationTypeRequiredBodyParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful provision will return 200 status code."
          },
          "202": {
            "description": "A 202 status code indicates the operation was accepted."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/ApplicationTypes/{applicationTypeName}/$/GetServiceTypes": {
      "get": {
        "summary": "Gets the list containing the information about service types that are supported by a provisioned application type in a Service Fabric cluster.",
        "description": "Gets the list containing the information about service types that are supported by a provisioned application type in a Service Fabric cluster. The provided application type must exist. Otherwise, a 404 status is returned.",
        "operationId": "GetServiceTypeInfoList",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ApplicationTypeNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ApplicationTypeVersionRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "ServiceType"
        ],
        "x-ms-examples": {
          "Get information about all nodes.": {
            "$ref": "./examples/GetServiceTypeInfoList-1.json"
          }
        },
        "responses": {
          "200": {
            "description": "List of service types that are supported by a provisioned application type.",
            "schema": {
              "$ref": "#/definitions/ServiceTypeInfoList"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/ApplicationTypes/{applicationTypeName}/$/GetServiceTypes/{serviceTypeName}": {
      "get": {
        "summary": "Gets the information about a specific service type that is supported by a provisioned application type in a Service Fabric cluster.",
        "description": "Gets the information about a specific service type that is supported by a provisioned application type in a Service Fabric cluster. The provided application type must exist. Otherwise, a 404 status is returned. A 204 response is returned if the specificed service type is not found in the cluster.",
        "operationId": "GetServiceTypeInfoByName",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ApplicationTypeNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ApplicationTypeVersionRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ServiceTypeNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "ServiceType"
        ],
        "x-ms-examples": {
          "Get information about all nodes.": {
            "$ref": "./examples/GetServiceTypeInfoByName-1.json"
          }
        },
        "responses": {
          "200": {
            "description": "A specific service type which supported by a provisioned application type.",
            "schema": {
              "$ref": "#/definitions/ServiceTypeInfo"
            }
          },
          "204": {
            "description": "A 204 response is returned if the specified service type is not found in the cluster."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/ApplicationTypes/{applicationTypeName}/$/GetServiceManifest": {
      "get": {
        "summary": "Gets the manifest describing a service type.",
        "description": "Gets the manifest describing a service type. The response contains the service manifest XML as a string.",
        "operationId": "GetServiceManifest",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ApplicationTypeNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ApplicationTypeVersionRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ServiceManifestNameRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "ServiceType"
        ],
        "responses": {
          "200": {
            "description": "Information about the service type.",
            "schema": {
              "$ref": "#/definitions/ServiceTypeManifest"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServiceTypes": {
      "get": {
        "summary": "Gets the list containing the information about service types from the applications deployed on a node in a Service Fabric cluster.",
        "description": "Gets the list containing the information about service types from the applications deployed on a node in a Service Fabric cluster. The response includes the name of the service type, its registration status, the code package that registered it and activation ID of the service package.",
        "operationId": "GetDeployedServiceTypeInfoList",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/NodeNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ApplicationIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/DeployedServiceType_ServiceManifestNameOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "ServiceType"
        ],
        "responses": {
          "200": {
            "description": "List of information about service types of an application deployed on a node.",
            "schema": {
              "$ref": "#/definitions/DeployedServiceTypeInfoList"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServiceTypes/{serviceTypeName}": {
      "get": {
        "summary": "Gets the information about a specified service type of the application deployed on a node in a Service Fabric cluster.",
        "description": "Gets the list containing the information about a specific service type from the applications deployed on a node in a Service Fabric cluster. The response includes the name of the service type, its registration status, the code package that registered it and activation ID of the service package. Each entry represents one activation of a service type, differentiated by the activation ID.",
        "operationId": "GetDeployedServiceTypeInfoByName",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/NodeNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ApplicationIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ServiceTypeNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/DeployedServiceType_ServiceManifestNameOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "ServiceType"
        ],
        "responses": {
          "200": {
            "description": "Information about service types of an application deployed on a node.",
            "schema": {
              "$ref": "#/definitions/DeployedServiceTypeInfoList"
            }
          },
          "204": {
            "description": "An empty response is returned if the specified service type of the application is not deployed on the node."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Applications/$/Create": {
      "post": {
        "summary": "Creates a Service Fabric application.",
        "description": "Creates a Service Fabric application using the specified description.",
        "operationId": "CreateApplication",
        "x-ms-examples": {
          "Create application.": {
            "$ref": "./examples/CreateApplication-1.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ApplicationDescriptionRequiredBodyParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Application"
        ],
        "responses": {
          "201": {
            "description": "A successful response means that the application creation has been started. Use GetApplication operation to get the status of the application. Once GetApplicationInfo successfully returns application information, the application is created. If the application has default services those may be in the process of being created. Use GetServiceInfo operation to get the status of the service within the application."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Applications/{applicationId}/$/Delete": {
      "post": {
        "summary": "Deletes an existing Service Fabric application.",
        "description": "An application must be created before it can be deleted. Deleting an application will delete all services that are part of that application. By default, Service Fabric will try to close service replicas in a graceful manner and then delete the service. However, if a service is having issues closing the replica gracefully, the delete operation may take a long time or get stuck. Use the optional ForceRemove flag to skip the graceful close sequence and forcefully delete the application and all of its services.",
        "operationId": "DeleteApplication",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ApplicationIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ForceRemoveOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Application"
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Applications/{applicationId}/$/GetLoadInformation": {
      "get": {
        "summary": "Gets load information about a Service Fabric application.",
        "description": "Returns the load information about the application that was created or in the process of being created in the Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, minimum nodes, maximum nodes, the number of nodes the application is occupying currently, and application load metric information about the application.",
        "operationId": "GetApplicationLoadInfo",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ApplicationIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Application"
        ],
        "responses": {
          "200": {
            "description": "Information about the application load.",
            "schema": {
              "$ref": "#/definitions/ApplicationLoadInfo"
            }
          },
          "204": {
            "description": "An empty response is returned if the specified applicationId is not found in the cluster."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Applications": {
      "get": {
        "summary": "Gets the list of applications created in the Service Fabric cluster that match the specified filters.",
        "description": "Gets the information about the applications that were created or in the process of being created in the Service Fabric cluster and match the specified filters. The response includes the name, type, status, parameters, and other details about the application. If the applications do not fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. Filters ApplicationTypeName and ApplicationDefinitionKindFilter cannot be specified at the same time.",
        "operationId": "GetApplicationInfoList",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-1_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ApplicationDefinitionKindFilterOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/ApplicationTypeNameOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/ExcludeApplicationParametersOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/ContinuationTokenOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/MaxResultsOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Application"
        ],
        "x-ms-examples": {
          "Limit maximum results": {
            "$ref": "./examples/GetApplicationInfoList-1.json"
          },
          "Page using continuation token": {
            "$ref": "./examples/GetApplicationInfoList-2.json"
          }
        },
        "responses": {
          "200": {
            "description": "List of applications created in the cluster.",
            "schema": {
              "$ref": "#/definitions/PagedApplicationInfoList"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Applications/{applicationId}": {
      "get": {
        "summary": "Gets information about a Service Fabric application.",
        "description": "Returns the information about the application that was created or in the process of being created in the Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, type, status, parameters, and other details about the application.",
        "operationId": "GetApplicationInfo",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ApplicationIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ExcludeApplicationParametersOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Application"
        ],
        "x-ms-examples": {
          "Get a specific application by application id": {
            "$ref": "./examples/GetApplicationInfoByName-1.json"
          }
        },
        "responses": {
          "200": {
            "description": "Information about the application.",
            "schema": {
              "$ref": "#/definitions/ApplicationInfo"
            }
          },
          "204": {
            "description": "An empty response is returned if the specified applicationId is not found in the cluster."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Applications/{applicationId}/$/GetHealth": {
      "get": {
        "summary": "Gets the health of the service fabric application.",
        "description": "Returns the heath state of the service fabric application. The response reports either Ok, Error or Warning health state. If the entity is not found in the health store, it will return Error.",
        "operationId": "GetApplicationHealth",
        "parameters": [
          {
            "$ref": "#/parameters/ApplicationIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/EventsHealthStateFilterOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/DeployedApplicationsHealthStateFilterOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/ServicesHealthStateFilterOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/ExcludeHealthStatisticsOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Application"
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code and the requested application health information.",
            "schema": {
              "$ref": "#/definitions/ApplicationHealth"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      },
      "post": {
        "operationId": "GetApplicationHealthUsingPolicy",
        "summary": "Gets the health of a Service Fabric application using the specified policy.",
        "description": "Gets the health of a Service Fabric application. Use EventsHealthStateFilter to filter the collection of health events reported on the node based on the health state. Use ClusterHealthPolicies to override the health policies used to evaluate the health.",
        "parameters": [
          {
            "$ref": "#/parameters/ApplicationIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/EventsHealthStateFilterOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/DeployedApplicationsHealthStateFilterOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/ServicesHealthStateFilterOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/ExcludeHealthStatisticsOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/ApplicationHealthPolicyOptionalBodyParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Application"
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code and the requested node health information.",
            "schema": {
              "$ref": "#/definitions/ApplicationHealth"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Applications/{applicationId}/$/ReportHealth": {
      "post": {
        "operationId": "ReportApplicationHealth",
        "summary": "Sends a health report on the Service Fabric application.",
        "description": "Reports health state of the specified Service Fabric application. The report must contain the information about the source of the health report and property on which it is reported.\nThe report is sent to a Service Fabric gateway Application, which forwards to the health store.\nThe report may be accepted by the gateway, but rejected by the health store after extra validation.\nFor example, the health store may reject the report because of an invalid parameter, like a stale sequence number.\nTo see whether the report was applied in the health store, get application health and check that the report appears in the HealthEvents section.",
        "tags": [
          "Application"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ApplicationIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/HealthInformationRequiredBodyParam"
          },
          {
            "$ref": "#/parameters/ImmediateOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Applications/{applicationId}/$/Upgrade": {
      "post": {
        "summary": "Starts upgrading an application in the Service Fabric cluster.",
        "description": "Validates the supplied application upgrade parameters and starts upgrading the application if the parameters are valid.",
        "operationId": "StartApplicationUpgrade",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ApplicationIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ApplicationUpgradeDescriptionRequiredBodyParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Application"
        ],
        "responses": {
          "200": {
            "description": "A successful response means that the application upgrade has started. Use GetApplicationUpgrade operation to get the status of the upgrade."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Applications/{applicationId}/$/GetUpgradeProgress": {
      "get": {
        "summary": "Gets details for the latest upgrade performed on this application.",
        "description": "Returns information about the state of the latest application upgrade along with details to aid debugging application health issues.",
        "operationId": "GetApplicationUpgrade",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ApplicationIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Application"
        ],
        "responses": {
          "200": {
            "description": "The application upgrade details.",
            "schema": {
              "$ref": "#/definitions/ApplicationUpgradeProgressInfo"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Applications/{applicationId}/$/UpdateUpgrade": {
      "post": {
        "summary": "Updates an ongoing application upgrade in the Service Fabric cluster.",
        "description": "Updates the parameters of an ongoing application upgrade from the ones specified at the time of starting the application upgrade. This may be required to mitigate stuck application upgrades due to incorrect parameters or issues in the application to make progress.",
        "operationId": "UpdateApplicationUpgrade",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ApplicationIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ApplicationUpgradeUpdateDescriptionRequiredBodyParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Application"
        ],
        "responses": {
          "200": {
            "description": "A successful response means that the application upgrade has updated with the specified parameters. Use GetApplicationUpgrade operation to get the status of the upgrade."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Applications/{applicationId}/$/MoveToNextUpgradeDomain": {
      "post": {
        "summary": "Resumes upgrading an application in the Service Fabric cluster.",
        "description": "Resumes an unmonitored manual Service Fabric application upgrade. Service Fabric upgrades one upgrade domain at a time. For unmonitored manual upgrades, after Service Fabric finishes an upgrade domain, it waits for you to call this API before proceeding to the next upgrade domain.",
        "operationId": "ResumeApplicationUpgrade",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ApplicationIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ResumeApplicationUpgradeDescriptionRequiredBodyParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Application"
        ],
        "responses": {
          "200": {
            "description": "A successful response means that the application upgrade has been resumed in the specified upgrade domain. Use GetApplicationUpgrade operation to get the status of the upgrade."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Applications/{applicationId}/$/RollbackUpgrade": {
      "post": {
        "summary": "Starts rolling back the currently on-going upgrade of an application in the Service Fabric cluster.",
        "description": "Starts rolling back the current application upgrade to the previous version. This API can only be used to roll back the current in-progress upgrade that is rolling forward to new version. If the application is not currently being upgraded use StartApplicationUpgrade API to upgrade it to desired version, including rolling back to a previous version.",
        "operationId": "RollbackApplicationUpgrade",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ApplicationIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Application"
        ],
        "responses": {
          "200": {
            "description": "A successful response means that the application has started to roll back. Use GetApplicationUpgrade operation to get the status of the upgrade."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Nodes/{nodeName}/$/GetApplications": {
      "get": {
        "operationId": "GetDeployedApplicationInfoList",
        "summary": "Gets the list of applications deployed on a Service Fabric node.",
        "description": "Gets the list of applications deployed on a Service Fabric node. The results do not include information about deployed system applications unless explicitly queried for by ID. Results encompass deployed applications in active, activating, and downloading states. This query requires that the node name corresponds to a node on the cluster. The query fails if the provided node name does not point to any active Service Fabric nodes on the cluster.",
        "tags": [
          "Application"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-1_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/NodeNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/IncludeHealthStateOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/ContinuationTokenOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/MaxResultsOptionalQueryParam"
          }
        ],
        "x-ms-examples": {
          "Limit maximum results": {
            "$ref": "./examples/GetDeployedApplicationInfoList-1.json"
          },
          "Page using continuation token": {
            "$ref": "./examples/GetDeployedApplicationInfoList-2.json"
          },
          "Include health state in the result": {
            "$ref": "./examples/GetDeployedApplicationInfoList-3.json"
          }
        },
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code and the list of deployed application information.",
            "schema": {
              "$ref": "#/definitions/PagedDeployedApplicationInfoList"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Nodes/{nodeName}/$/GetApplications/{applicationId}": {
      "get": {
        "operationId": "GetDeployedApplicationInfo",
        "summary": "Gets the information about an application deployed on a Service Fabric node.",
        "description": "This query returns system application information if the application ID provided is for system application. Results encompass deployed applications in active, activating, and downloading states. This query requires that the node name corresponds to a node on the cluster. The query fails if the provided node name does not point to any active Service Fabric nodes on the cluster.",
        "tags": [
          "Application"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-1_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/NodeNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ApplicationIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/IncludeHealthStateOptionalQueryParam"
          }
        ],
        "x-ms-examples": {
          "Get a specific deployed application by application ID and include the health state in the result": {
            "$ref": "./examples/GetDeployedApplicationInfoByName-1.json"
          }
        },
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code and the information about the deployed application.",
            "schema": {
              "$ref": "#/definitions/DeployedApplicationInfo"
            }
          },
          "204": {
            "description": "An empty response is returned if the specified application is not deployed on the node."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetHealth": {
      "get": {
        "operationId": "GetDeployedApplicationHealth",
        "summary": "Gets the information about health of an application deployed on a Service Fabric node.",
        "description": "Gets the information about health of an application deployed on a Service Fabric node. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed application based on health state. Use DeployedServicePackagesHealthStateFilter to optionally filter for DeployedServicePackageHealth children based on health state.",
        "tags": [
          "Application"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/NodeNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ApplicationIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/EventsHealthStateFilterOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/DeployedServicePackagesHealthStateFilterOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/ExcludeHealthStatisticsOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code and the health information of the deployed application.",
            "schema": {
              "$ref": "#/definitions/DeployedApplicationHealth"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      },
      "post": {
        "operationId": "GetDeployedApplicationHealthUsingPolicy",
        "summary": "Gets the information about health of an application deployed on a Service Fabric node. using the specified policy.",
        "description": "Gets the information about health of an application deployed on a Service Fabric node using the specified policy. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed application based on health state. Use DeployedServicePackagesHealthStateFilter to optionally filter for DeployedServicePackageHealth children based on health state. Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health. This API only uses 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the deployed application.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/NodeNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ApplicationIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/EventsHealthStateFilterOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/DeployedServicePackagesHealthStateFilterOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/ApplicationHealthPolicyOptionalBodyParam"
          },
          {
            "$ref": "#/parameters/ExcludeHealthStatisticsOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Application"
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code and the health information of the deployed application.",
            "schema": {
              "$ref": "#/definitions/DeployedApplicationHealth"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/ReportHealth": {
      "post": {
        "operationId": "ReportDeployedApplicationHealth",
        "summary": "Sends a health report on the Service Fabric application deployed on a Service Fabric node.",
        "description": "Reports health state of the application deployed on a Service Fabric node. The report must contain the information about the source of the health report and property on which it is reported.\nThe report is sent to a Service Fabric gateway Service, which forwards to the health store.\nThe report may be accepted by the gateway, but rejected by the health store after extra validation.\nFor example, the health store may reject the report because of an invalid parameter, like a stale sequence number.\nTo see whether the report was applied in the health store, get deployed application health and check that the report appears in the HealthEvents section.",
        "tags": [
          "Application"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/NodeNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ApplicationIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/HealthInformationRequiredBodyParam"
          },
          {
            "$ref": "#/parameters/ImmediateOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/ApplicationTypes/{applicationTypeName}/$/GetApplicationManifest": {
      "get": {
        "summary": "Gets the manifest describing an application type.",
        "description": "The response contains the application manifest XML as a string.",
        "operationId": "GetApplicationManifest",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ApplicationTypeNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ApplicationTypeVersionRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "ApplicationType"
        ],
        "responses": {
          "200": {
            "description": "Information about the node.",
            "schema": {
              "$ref": "#/definitions/ApplicationTypeManifest"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Applications/{applicationId}/$/GetServices": {
      "get": {
        "summary": "Gets the information about all services belonging to the application specified by the application ID.",
        "description": "Returns the information about all services belonging to the application specified by the application ID.",
        "operationId": "GetServiceInfoList",
        "parameters": [
          {
            "$ref": "#/parameters/ApplicationIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ServiceTypeNameOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ContinuationTokenOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Service"
        ],
        "responses": {
          "200": {
            "description": "List of services in the cluster for the specified application.",
            "schema": {
              "$ref": "#/definitions/PagedServiceInfoList"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Applications/{applicationId}/$/GetServices/{serviceId}": {
      "get": {
        "summary": "Gets the information about the specific service belonging to the Service Fabric application.",
        "description": "Returns the information about the specified service belonging to the specified Service Fabric application.",
        "operationId": "GetServiceInfo",
        "parameters": [
          {
            "$ref": "#/parameters/ApplicationIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ServiceIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Service"
        ],
        "responses": {
          "200": {
            "description": "Information about the specified service.",
            "schema": {
              "$ref": "#/definitions/ServiceInfo"
            }
          },
          "204": {
            "description": "An empty response is returned if the specified service is not part of the specified application."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Services/{serviceId}/$/GetApplicationName": {
      "get": {
        "summary": "Gets the name of the Service Fabric application for a service.",
        "description": "Gets the name of the application for the specified service. A 404 FABRIC_E_SERVICE_DOES_NOT_EXIST error is returned if a service with the provided service ID does not exist.",
        "operationId": "GetApplicationNameInfo",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ServiceIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Service"
        ],
        "responses": {
          "200": {
            "description": "Information about the name of the application for the specified service.",
            "schema": {
              "$ref": "#/definitions/ApplicationNameInfo"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Applications/{applicationId}/$/GetServices/$/Create": {
      "post": {
        "operationId": "CreateService",
        "summary": "Creates the specified Service Fabric service.",
        "description": "This api allows creating a new Service Fabric stateless or stateful service under a specified Service Fabric application. The description for creating the service includes partitioning information and optional properties for placement and load balancing. Some of the properties can later be modified using `UpdateService` API.",
        "x-ms-examples": {
          "Basic stateless service": {
            "$ref": "./examples/CreateService-1.json"
          },
          "Basic stateful service": {
            "$ref": "./examples/CreateService-2.json"
          },
          "Stateless service with dns name and auto scaling": {
            "$ref": "./examples/CreateService-3.json"
          },
          "Stateful service with named partitions and auto scaling": {
            "$ref": "./examples/CreateService-4.json"
          }
        },
        "tags": [
          "Service"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ApplicationIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ServiceDescriptionRequiredBodyParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "responses": {
          "202": {
            "description": "A successful operation will return 202 status code."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Applications/{applicationId}/$/GetServices/$/CreateFromTemplate": {
      "post": {
        "summary": "Creates a Service Fabric service from the service template.",
        "description": "Creates a Service Fabric service from the service template defined in the application manifest. A service template contains the properties that will be same for the service instance of the same type. The API allows overriding the properties that are usually different for different services of the same service type.",
        "operationId": "CreateServiceFromTemplate",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ApplicationIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/CreateServiceFromTemplateRequiredBodyParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Service"
        ],
        "responses": {
          "202": {
            "description": "A successful operation will return 202 status code."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Services/{serviceId}/$/Delete": {
      "post": {
        "summary": "Deletes an existing Service Fabric service.",
        "description": "A service must be created before it can be deleted. By default, Service Fabric will try to close service replicas in a graceful manner and then delete the service. However, if the service is having issues closing the replica gracefully, the delete operation may take a long time or get stuck. Use the optional ForceRemove flag to skip the graceful close sequence and forcefully delete the service.",
        "operationId": "DeleteService",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ServiceIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ForceRemoveOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Service"
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Services/{serviceId}/$/Update": {
      "post": {
        "operationId": "UpdateService",
        "summary": "Updates a Service Fabric service using the specified update description.",
        "description": "This API allows updating properties of a running Service Fabric service. The set of properties that can be updated are a subset of the properties that were specified at the time of creating the service. The current set of properties can be obtained using `GetServiceDescription` API. Note that updating the properties of a running service is different than upgrading your application using `StartApplicationUpgrade` API. The upgrade is a long running background operation that involves moving the application from one version to another, one upgrade domain at a time, whereas update applies the new properties immediately to the service.",
        "x-ms-examples": {
          "Stateless service": {
            "$ref": "./examples/UpdateService-1.json"
          },
          "Stateful service": {
            "$ref": "./examples/UpdateService-2.json"
          }
        },
        "tags": [
          "Service"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ServiceIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ServiceUpdateDescriptionRequiredBodyParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 202 status code."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Services/{serviceId}/$/GetDescription": {
      "get": {
        "summary": "Gets the description of an existing Service Fabric service.",
        "description": "Gets the description of an existing Service Fabric service. A service must be created before its description can be obtained.",
        "operationId": "GetServiceDescription",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ServiceIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Service"
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code.",
            "schema": {
              "$ref": "#/definitions/ServiceDescription"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Services/{serviceId}/$/GetHealth": {
      "get": {
        "summary": "Gets the health of the specified Service Fabric service.",
        "description": "Gets the health information of the specified service.\nUse EventsHealthStateFilter to filter the collection of health events reported on the service based on the health state.\nUse PartitionsHealthStateFilter to filter the collection of partitions returned.\nIf you specify a service that does not exist in the health store, this request returns an error.",
        "operationId": "GetServiceHealth",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ServiceIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/EventsHealthStateFilterOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/PartitionsHealthStateFilterOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/ExcludeHealthStatisticsOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Service"
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code and the health information of the specified service.",
            "schema": {
              "$ref": "#/definitions/ServiceHealth"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      },
      "post": {
        "summary": "Gets the health of the specified Service Fabric service, by using the specified health policy.",
        "description": "Gets the health information of the specified service.\nIf the application health policy is specified, the health evaluation uses it to get the aggregated health state.\nIf the policy is not specified, the health evaluation uses the application health policy defined in the application manifest, or the default health policy, if no policy is defined in the manifest.\nUse EventsHealthStateFilter to filter the collection of health events reported on the service based on the health state.\nUse PartitionsHealthStateFilter to filter the collection of partitions returned.\nIf you specify a service that does not exist in the health store, this request returns an error.",
        "operationId": "GetServiceHealthUsingPolicy",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ServiceIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/EventsHealthStateFilterOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/PartitionsHealthStateFilterOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/ApplicationHealthPolicyOptionalBodyParam"
          },
          {
            "$ref": "#/parameters/ExcludeHealthStatisticsOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Service"
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code and the health information of the specified service.",
            "schema": {
              "$ref": "#/definitions/ServiceHealth"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Services/{serviceId}/$/ReportHealth": {
      "post": {
        "operationId": "ReportServiceHealth",
        "summary": "Sends a health report on the Service Fabric service.",
        "description": "Reports health state of the specified Service Fabric service. The report must contain the information about the source of the health report and property on which it is reported.\nThe report is sent to a Service Fabric gateway Service, which forwards to the health store.\nThe report may be accepted by the gateway, but rejected by the health store after extra validation.\nFor example, the health store may reject the report because of an invalid parameter, like a stale sequence number.\nTo see whether the report was applied in the health store, run GetServiceHealth and check that the report appears in the HealthEvents section.",
        "tags": [
          "Service"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ServiceIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/HealthInformationRequiredBodyParam"
          },
          {
            "$ref": "#/parameters/ImmediateOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Services/{serviceId}/$/ResolvePartition": {
      "get": {
        "operationId": "ResolveService",
        "summary": "Resolve a Service Fabric partition.",
        "description": "Resolve a Service Fabric service partition to get the endpoints of the service replicas.",
        "tags": [
          "Service"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ServiceIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/PartitionKeyTypeOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/PartitionKeyValueOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/PreviousRspVersionOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code.",
            "schema": {
              "$ref": "#/definitions/ResolvedServicePartition"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Services/{serviceId}/$/GetPartitions": {
      "get": {
        "summary": "Gets the list of partitions of a Service Fabric service.",
        "description": "The response includes the partition ID, partitioning scheme information, keys supported by the partition, status, health, and other details about the partition.",
        "operationId": "GetPartitionInfoList",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ServiceIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ContinuationTokenOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Partition"
        ],
        "responses": {
          "200": {
            "description": "List of partitions of a Service Fabric service.",
            "schema": {
              "$ref": "#/definitions/PagedServicePartitionInfoList"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Partitions/{partitionId}": {
      "get": {
        "summary": "Gets the information about a Service Fabric partition.",
        "description": "Gets the information about the specified partition. The response includes the partition ID, partitioning scheme information, keys supported by the partition, status, health, and other details about the partition.",
        "operationId": "GetPartitionInfo",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/PartitionIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Partition"
        ],
        "responses": {
          "200": {
            "description": "Information about the specified partition.",
            "schema": {
              "$ref": "#/definitions/ServicePartitionInfo"
            }
          },
          "204": {
            "description": "An empty response is returned if the specified partitionId is not found in the cluster."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Partitions/{partitionId}/$/GetServiceName": {
      "get": {
        "summary": "Gets the name of the Service Fabric service for a partition.",
        "description": "Gets name of the service for the specified partition. A 404 error is returned if the partition ID does not exist in the cluster.",
        "operationId": "GetServiceNameInfo",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/PartitionIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Partition"
        ],
        "responses": {
          "200": {
            "description": "Information about the name of the service for the specified partition.",
            "schema": {
              "$ref": "#/definitions/ServiceNameInfo"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Partitions/{partitionId}/$/GetHealth": {
      "get": {
        "summary": "Gets the health of the specified Service Fabric partition.",
        "description": "Use EventsHealthStateFilter to filter the collection of health events reported on the service based on the health state.\nUse ReplicasHealthStateFilter to filter the collection of ReplicaHealthState objects on the partition.\nIf you specify a partition that does not exist in the health store, this request returns an error.",
        "operationId": "GetPartitionHealth",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/PartitionIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/EventsHealthStateFilterOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/ReplicasHealthStateFilerOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/ExcludeHealthStatisticsOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Partition"
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code and the health information about the specified partition.",
            "schema": {
              "$ref": "#/definitions/PartitionHealth"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      },
      "post": {
        "summary": "Gets the health of the specified Service Fabric partition, by using the specified health policy.",
        "description": "Gets the health information of the specified partition.\nIf the application health policy is specified, the health evaluation uses it to get the aggregated health state.\nIf the policy is not specified, the health evaluation uses the application health policy defined in the application manifest, or the default health policy, if no policy is defined in the manifest.\nUse EventsHealthStateFilter to filter the collection of health events reported on the partition based on the health state.\nUse ReplicasHealthStateFilter to filter the collection of ReplicaHealthState objects on the partition. Use ApplicationHealthPolicy in the POST body to override the health policies used to evaluate the health.\nIf you specify a partition that does not exist in the health store, this request returns an error.",
        "operationId": "GetPartitionHealthUsingPolicy",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/PartitionIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/EventsHealthStateFilterOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/ReplicasHealthStateFilerOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/ApplicationHealthPolicyOptionalBodyParam"
          },
          {
            "$ref": "#/parameters/ExcludeHealthStatisticsOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Partition"
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code and the health information about the specified partition.",
            "schema": {
              "$ref": "#/definitions/PartitionHealth"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Partitions/{partitionId}/$/ReportHealth": {
      "post": {
        "operationId": "ReportPartitionHealth",
        "summary": "Sends a health report on the Service Fabric partition.",
        "description": "Reports health state of the specified Service Fabric partition. The report must contain the information about the source of the health report and property on which it is reported.\nThe report is sent to a Service Fabric gateway Partition, which forwards to the health store.\nThe report may be accepted by the gateway, but rejected by the health store after extra validation.\nFor example, the health store may reject the report because of an invalid parameter, like a stale sequence number.\nTo see whether the report was applied in the health store, run GetPartitionHealth and check that the report appears in the HealthEvents section.",
        "tags": [
          "Partition"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/PartitionIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/HealthInformationRequiredBodyParam"
          },
          {
            "$ref": "#/parameters/ImmediateOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Partitions/{partitionId}/$/GetLoadInformation": {
      "get": {
        "summary": "Gets the load information of the specified Service Fabric partition.",
        "description": "Returns information about the load of a specified partition.\nThe response includes a list of load reports for a Service Fabric partition.\nEach report includes the load metric name, value, and last reported time in UTC.",
        "operationId": "GetPartitionLoadInformation",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/PartitionIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Partition"
        ],
        "responses": {
          "200": {
            "description": "Information about the specified partition's last reported load metrics.",
            "schema": {
              "$ref": "#/definitions/PartitionLoadInformation"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Partitions/{partitionId}/$/ResetLoad": {
      "post": {
        "operationId": "ResetPartitionLoad",
        "summary": "Resets the current load of a Service Fabric partition.",
        "description": "Resets the current load of a Service Fabric partition to the default load for the service.",
        "tags": [
          "Partition"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/PartitionIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful operation request will return 200 status code."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Partitions/{partitionId}/$/Recover": {
      "post": {
        "operationId": "RecoverPartition",
        "summary": "Indicates to the Service Fabric cluster that it should attempt to recover a specific partition that is currently stuck in quorum loss.",
        "description": "This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.",
        "tags": [
          "Partition"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/PartitionIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful operation request will return 200 status code."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Services/$/{serviceId}/$/GetPartitions/$/Recover": {
      "post": {
        "operationId": "RecoverServicePartitions",
        "summary": "Indicates to the Service Fabric cluster that it should attempt to recover the specified service that is currently stuck in quorum loss.",
        "description": "Indicates to the Service Fabric cluster that it should attempt to recover the specified service that is currently stuck in quorum loss. This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.",
        "tags": [
          "Partition"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ServiceIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful operation request will return 200 status code."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/$/RecoverSystemPartitions": {
      "post": {
        "operationId": "RecoverSystemPartitions",
        "summary": "Indicates to the Service Fabric cluster that it should attempt to recover the system services that are currently stuck in quorum loss.",
        "description": "Indicates to the Service Fabric cluster that it should attempt to recover the system services that are currently stuck in quorum loss. This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.",
        "tags": [
          "Partition"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful operation request will return 200 status code."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/$/RecoverAllPartitions": {
      "post": {
        "operationId": "RecoverAllPartitions",
        "summary": "Indicates to the Service Fabric cluster that it should attempt to recover any services (including system services) which are currently stuck in quorum loss.",
        "description": "This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.",
        "tags": [
          "Partition"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful operation request will return 200 status code."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/$/CreateRepairTask": {
      "post": {
        "operationId": "CreateRepairTask",
        "summary": "Creates a new repair task.",
        "description": "For clusters that have the Repair Manager Service configured,\nthis API provides a way to create repair tasks that run automatically or manually.\nFor repair tasks that run automatically, an appropriate repair executor\nmust be running for each repair action to run automatically.\nThese are currently only available in specially-configured Azure Cloud Services.\n\nTo create a manual repair task, provide the set of impacted node names and the\nexpected impact. When the state of the created repair task changes to approved,\nyou can safely perform repair actions on those nodes.\n\nThis API supports the Service Fabric platform; it is not meant to be used directly from your code.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/RepairTaskRequiredBodyParam"
          }
        ],
        "tags": [
          "RepairManagement"
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code.\nThe response body provides information about the created repair task.",
            "schema": {
              "$ref": "#/definitions/RepairTaskUpdateInfo"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/$/CancelRepairTask": {
      "post": {
        "operationId": "CancelRepairTask",
        "summary": "Requests the cancellation of the given repair task.",
        "description": "This API supports the Service Fabric platform; it is not meant to be used directly from your code.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/RepairTaskCancelDescriptionRequiredBodyParam"
          }
        ],
        "tags": [
          "RepairManagement"
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code.\nThe response body provides information about the updated repair task.\nSuccess indicates that the cancellation request was recorded, but does not guarantee that the repair task will be cancelled.\nClients may use the State property of the repair task to determine the current state of the repair task.",
            "schema": {
              "$ref": "#/definitions/RepairTaskUpdateInfo"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/$/DeleteRepairTask": {
      "post": {
        "operationId": "DeleteRepairTask",
        "summary": "Deletes a completed repair task.",
        "description": "This API supports the Service Fabric platform; it is not meant to be used directly from your code.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/RepairTaskDeleteDescriptionRequiredBodyParam"
          }
        ],
        "tags": [
          "RepairManagement"
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/$/GetRepairTaskList": {
      "get": {
        "operationId": "GetRepairTaskList",
        "summary": "Gets a list of repair tasks matching the given filters.",
        "description": "This API supports the Service Fabric platform; it is not meant to be used directly from your code.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/RepairTaskIdFilterOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/RepairTaskStateFilterOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/RepairTaskExecutorFilterOptionalQueryParam"
          }
        ],
        "tags": [
          "RepairManagement"
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code.\nThe response body provides a list of repair tasks matching all of the given filters.",
            "schema": {
              "$ref": "#/definitions/RepairTaskList"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/$/ForceApproveRepairTask": {
      "post": {
        "operationId": "ForceApproveRepairTask",
        "summary": "Forces the approval of the given repair task.",
        "description": "This API supports the Service Fabric platform; it is not meant to be used directly from your code.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/RepairTaskApproveDescriptionRequiredBodyParam"
          }
        ],
        "tags": [
          "RepairManagement"
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code.\nThe response body provides information about the updated repair task.",
            "schema": {
              "$ref": "#/definitions/RepairTaskUpdateInfo"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/$/UpdateRepairTaskHealthPolicy": {
      "post": {
        "operationId": "UpdateRepairTaskHealthPolicy",
        "summary": "Updates the health policy of the given repair task.",
        "description": "This API supports the Service Fabric platform; it is not meant to be used directly from your code.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/RepairTaskUpdateHealthPolicyDescriptionRequiredBodyParam"
          }
        ],
        "tags": [
          "RepairManagement"
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code.\nThe response body provides information about the updated repair task.",
            "schema": {
              "$ref": "#/definitions/RepairTaskUpdateInfo"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/$/UpdateRepairExecutionState": {
      "post": {
        "operationId": "UpdateRepairExecutionState",
        "summary": "Updates the execution state of a repair task.",
        "description": "This API supports the Service Fabric platform; it is not meant to be used directly from your code.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/RepairTaskRequiredBodyParam"
          }
        ],
        "tags": [
          "RepairManagement"
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code.\nThe response body provides information about the updated repair task.",
            "schema": {
              "$ref": "#/definitions/RepairTaskUpdateInfo"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Partitions/{partitionId}/$/GetReplicas": {
      "get": {
        "summary": "Gets the information about replicas of a Service Fabric service partition.",
        "description": "The GetReplicas endpoint returns information about the replicas of the specified partition. The response includes the ID, role, status, health, node name, uptime, and other details about the replica.",
        "operationId": "GetReplicaInfoList",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/PartitionIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ContinuationTokenOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Replica"
        ],
        "responses": {
          "200": {
            "description": "Information about the replicas of the specified partition.",
            "schema": {
              "$ref": "#/definitions/PagedReplicaInfoList"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Partitions/{partitionId}/$/GetReplicas/{replicaId}": {
      "get": {
        "summary": "Gets the information about a replica of a Service Fabric partition.",
        "description": "The response includes the ID, role, status, health, node name, uptime, and other details about the replica.",
        "operationId": "GetReplicaInfo",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/PartitionIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ReplicaIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Replica"
        ],
        "responses": {
          "200": {
            "description": "Information about the specified replicas of the specified partition of a Service Fabric service.",
            "schema": {
              "$ref": "#/definitions/ReplicaInfo"
            }
          },
          "204": {
            "description": "An empty response is returned if the specified replicaId is not a replica of the specified partition."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Partitions/{partitionId}/$/GetReplicas/{replicaId}/$/GetHealth": {
      "get": {
        "operationId": "GetReplicaHealth",
        "summary": "Gets the health of a Service Fabric stateful service replica or stateless service instance.",
        "description": "Gets the health of a Service Fabric replica.\nUse EventsHealthStateFilter to filter the collection of health events reported on the replica based on the health state.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/PartitionIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ReplicaIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/EventsHealthStateFilterOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Replica"
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code and the requested replica health.",
            "schema": {
              "$ref": "#/definitions/ReplicaHealth"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      },
      "post": {
        "operationId": "GetReplicaHealthUsingPolicy",
        "summary": "Gets the health of a Service Fabric stateful service replica or stateless service instance using the specified policy.",
        "description": "Gets the health of a Service Fabric stateful service replica or stateless service instance.\nUse EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health state.\nUse ApplicationHealthPolicy to optionally override the health policies used to evaluate the health. This API only uses 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the replica.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/PartitionIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ReplicaIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/EventsHealthStateFilterOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/ApplicationHealthPolicyOptionalBodyParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Replica"
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code and the requested replica health information.",
            "schema": {
              "$ref": "#/definitions/ReplicaHealth"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Partitions/{partitionId}/$/GetReplicas/{replicaId}/$/ReportHealth": {
      "post": {
        "operationId": "ReportReplicaHealth",
        "summary": "Sends a health report on the Service Fabric replica.",
        "description": "Reports health state of the specified Service Fabric replica. The report must contain the information about the source of the health report and property on which it is reported.\nThe report is sent to a Service Fabric gateway Replica, which forwards to the health store.\nThe report may be accepted by the gateway, but rejected by the health store after extra validation.\nFor example, the health store may reject the report because of an invalid parameter, like a stale sequence number.\nTo see whether the report was applied in the health store, run GetReplicaHealth and check that the report appears in the HealthEvents section.",
        "tags": [
          "Replica"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/PartitionIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ReplicaIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ReplicaHealthReportServiceKindRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/HealthInformationRequiredBodyParam"
          },
          {
            "$ref": "#/parameters/ImmediateOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetReplicas": {
      "get": {
        "operationId": "GetDeployedServiceReplicaInfoList",
        "summary": "Gets the list of replicas deployed on a Service Fabric node.",
        "description": "Gets the list containing the information about replicas deployed on a Service Fabric node. The information include partition ID, replica ID, status of the replica, name of the service, name of the service type, and other information. Use PartitionId or ServiceManifestName query parameters to return information about the deployed replicas matching the specified values for those parameters.",
        "tags": [
          "Replica"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/NodeNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ApplicationIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/PartitionIdOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/ServiceManifestNameOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code and the list of deployed service replica information.",
            "schema": {
              "$ref": "#/definitions/DeployedServiceReplicaInfoList"
            }
          },
          "204": {
            "description": "An empty response is returned if the specified applicationId is not found on the specified node. An empty response is also returned if there are no replicas matching the specified filter values for PartitionId or ServiceManifestName query parameters."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Nodes/{nodeName}/$/GetPartitions/{partitionId}/$/GetReplicas/{replicaId}/$/GetDetail": {
      "get": {
        "operationId": "GetDeployedServiceReplicaDetailInfo",
        "summary": "Gets the details of replica deployed on a Service Fabric node.",
        "description": "Gets the details of the replica deployed on a Service Fabric node. The information includes service kind, service name, current service operation, current service operation start date time, partition ID, replica/instance ID, reported load, and other information.",
        "tags": [
          "Replica"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/NodeNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/PartitionIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ReplicaIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code and the list of deployed service replica information.",
            "schema": {
              "$ref": "#/definitions/DeployedServiceReplicaDetailInfo"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Nodes/{nodeName}/$/GetPartitions/{partitionId}/$/GetReplicas": {
      "get": {
        "operationId": "GetDeployedServiceReplicaDetailInfoByPartitionId",
        "summary": "Gets the details of replica deployed on a Service Fabric node.",
        "description": "Gets the details of the replica deployed on a Service Fabric node. The information includes service kind, service name, current service operation, current service operation start date time, partition ID, replica/instance ID, reported load, and other information.",
        "tags": [
          "Replica"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/NodeNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/PartitionIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code and the list of deployed service replica information.",
            "schema": {
              "$ref": "#/definitions/DeployedServiceReplicaDetailInfo"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Nodes/{nodeName}/$/GetPartitions/{partitionId}/$/GetReplicas/{replicaId}/$/Restart": {
      "post": {
        "operationId": "RestartReplica",
        "summary": "Restarts a service replica of a persisted service running on a node.",
        "description": "Restarts a service replica of a persisted service running on a node. Warning - There are no safety checks performed when this API is used. Incorrect use of this API can lead to availability loss for stateful services.",
        "tags": [
          "Replica"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/NodeNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/PartitionIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ReplicaIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code. A successful operation means that the restart command was received by the replica on the node and it is in the process of restarting."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Nodes/{nodeName}/$/GetPartitions/{partitionId}/$/GetReplicas/{replicaId}/$/Delete": {
      "post": {
        "operationId": "RemoveReplica",
        "summary": "Removes a service replica running on a node.",
        "description": "This API simulates a Service Fabric replica failure by removing a replica from a Service Fabric cluster. The removal closes the replica, transitions the replica to the role None, and then removes all of the state information of the replica from the cluster. This API tests the replica state removal path, and simulates the report fault permanent path through client APIs. Warning - There are no safety checks performed when this API is used. Incorrect use of this API can lead to data loss for stateful services. In addition, the forceRemove flag impacts all other replicas hosted in the same process.",
        "tags": [
          "Replica"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/NodeNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/PartitionIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ReplicaIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ForceRemoveReplicaOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code. A successful operation means that the restart command was received by the replica on the node and it is in the process of restarting."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServicePackages": {
      "get": {
        "operationId": "GetDeployedServicePackageInfoList",
        "summary": "Gets the list of service packages deployed on a Service Fabric node.",
        "description": "Returns the information about the service packages deployed on a Service Fabric node for the given application.",
        "tags": [
          "Service Package"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/NodeNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ApplicationIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code and the list of deployed service packages information.",
            "schema": {
              "$ref": "#/definitions/DeployedServicePackageInfoList"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServicePackages/{servicePackageName}": {
      "get": {
        "operationId": "GetDeployedServicePackageInfoListByName",
        "summary": "Gets the list of service packages deployed on a Service Fabric node matching exactly the specified name.",
        "description": "Returns the information about the service packages deployed on a Service Fabric node for the given application. These results are of service packages whose name match exactly the service package name specified as the parameter.",
        "tags": [
          "Service Package"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/NodeNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ApplicationIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ServicePackageNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code and the list of deployed service packages information.",
            "schema": {
              "$ref": "#/definitions/DeployedServicePackageInfoList"
            }
          },
          "204": {
            "description": "An empty response is returned if the specified service package from the application is not deployed on the node."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServicePackages/{servicePackageName}/$/GetHealth": {
      "get": {
        "operationId": "GetDeployedServicePackageHealth",
        "summary": "Gets the information about health of a service package for a specific application deployed for a Service Fabric node and application.",
        "description": "Gets the information about health of a service package for a specific application deployed on a Service Fabric node. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed service package based on health state.",
        "tags": [
          "Service Package"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/NodeNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ApplicationIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ServicePackageNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/EventsHealthStateFilterOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code and the health information of the deployed service package for a specific node and application.",
            "schema": {
              "$ref": "#/definitions/DeployedServicePackageHealth"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      },
      "post": {
        "operationId": "GetDeployedServicePackageHealthUsingPolicy",
        "summary": "Gets the information about health of service package for a specific application deployed on a Service Fabric node using the specified policy.",
        "description": "Gets the information about health of a service package for a specific application deployed on a Service Fabric node. using the specified policy. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed service package based on health state. Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health. This API only uses 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the deployed service package.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/NodeNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ApplicationIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ServicePackageNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/EventsHealthStateFilterOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/ApplicationHealthPolicyOptionalBodyParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Service Package"
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code and the health information of the deployed service package for a specific node and application.",
            "schema": {
              "$ref": "#/definitions/DeployedServicePackageHealth"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServicePackages/{servicePackageName}/$/ReportHealth": {
      "post": {
        "operationId": "ReportDeployedServicePackageHealth",
        "summary": "Sends a health report on the Service Fabric deployed service package.",
        "description": "Reports health state of the service package of the application deployed on a Service Fabric node. The report must contain the information about the source of the health report and property on which it is reported.\nThe report is sent to a Service Fabric gateway Service, which forwards to the health store.\nThe report may be accepted by the gateway, but rejected by the health store after extra validation.\nFor example, the health store may reject the report because of an invalid parameter, like a stale sequence number.\nTo see whether the report was applied in the health store, get deployed service package health and check that the report appears in the HealthEvents section.",
        "tags": [
          "Service Package"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/NodeNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ApplicationIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ServicePackageNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/HealthInformationRequiredBodyParam"
          },
          {
            "$ref": "#/parameters/ImmediateOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Nodes/{nodeName}/$/DeployServicePackage": {
      "post": {
        "operationId": "DeployServicePackageToNode",
        "summary": "Downloads all of the code packages associated with specified service manifest on the specified node.",
        "description": "This API provides a way to download code packages including the container images on a specific node outside of the normal application deployment and upgrade path. This is useful for the large code packages and container images to be present on the node before the actual application deployment and upgrade, thus significantly reducing the total time required for the deployment or upgrade.",
        "tags": [
          "Service Package"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/NodeNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/DeployServicePackageToNodeRequiredBodyParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetCodePackages": {
      "get": {
        "operationId": "GetDeployedCodePackageInfoList",
        "summary": "Gets the list of code packages deployed on a Service Fabric node.",
        "description": "Gets the list of code packages deployed on a Service Fabric node for the given application.",
        "tags": [
          "Code Package"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/NodeNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ApplicationIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ServiceManifestNameOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/CodePackageNameOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code and the list of deployed code packages information.",
            "schema": {
              "$ref": "#/definitions/DeployedCodePackageInfoList"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetCodePackages/$/Restart": {
      "post": {
        "operationId": "RestartDeployedCodePackage",
        "summary": "Restarts a code package deployed on a Service Fabric node in a cluster.",
        "description": "Restarts a code package deployed on a Service Fabric node in a cluster. This aborts the code package process, which will restart all the user service replicas hosted in that process.",
        "tags": [
          "Code Package"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/NodeNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ApplicationIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/RestartDeployedCodePackageRequiredBodyParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetCodePackages/$/ContainerLogs": {
      "get": {
        "operationId": "GetContainerLogsDeployedOnNode",
        "summary": "Gets the container logs for container deployed on a Service Fabric node.",
        "description": "Gets the container logs for container deployed on a Service Fabric node for the given code package.",
        "tags": [
          "Code Package"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-2_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/NodeNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ApplicationIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ServiceManifestNameRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/CodePackageNameRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TailOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/PreviousOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "x-ms-examples": {
          "Get container logs for given code package": {
            "$ref": "./examples/GetContainerLogsDeployedOnNode-1.json"
          },
          "Get last 10 lines of container logs": {
            "$ref": "./examples/GetContainerLogsDeployedOnNode-2.json"
          },
          "Get container logs of previous dead container for given code package": {
            "$ref": "./examples/GetContainerLogsDeployedOnNode-3.json"
          }
        },
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code and the container logs for container deployed on a Service Fabric node for the given code package.",
            "schema": {
              "$ref": "#/definitions/ContainerLogs"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetCodePackages/$/ContainerApi": {
      "post": {
        "operationId": "InvokeContainerApi",
        "summary": "Invoke container API on a container deployed on a Service Fabric node.",
        "description": "Invoke container API on a container deployed on a Service Fabric node for the given code package.",
        "x-ms-examples": {
          "Get container logs": {
            "$ref": "./examples/InvokeContainerApi.json"
          },
          "Update container": {
            "$ref": "./examples/InvokeContainerApi_Post.json"
          }
        },
        "tags": [
          "Code Package"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-2_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/NodeNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ApplicationIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ServiceManifestNameRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/CodePackageNameRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/CodePackageInstanceIdRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/ContainerApiRequiredBodyParam"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code and container API response for a container deployed on a Service Fabric node for the given code package.",
            "schema": {
              "$ref": "#/definitions/ContainerApiResponse"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/ComposeDeployments/$/Create": {
      "put": {
        "summary": "Creates a Service Fabric compose deployment.",
        "description": "Compose is a file format that describes multi-container applications. This API allows deploying container based applications defined in compose format in a Service Fabric cluster. Once the deployment is created, its status can be tracked via the `GetComposeDeploymentStatus` API.",
        "operationId": "CreateComposeDeployment",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0-Preview_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/CreateComposeDeploymentRequiredBodyParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Compose Deployment"
        ],
        "responses": {
          "202": {
            "description": "A successful operation will return 202 status code."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/ComposeDeployments/{deploymentName}": {
      "get": {
        "summary": "Gets information about a Service Fabric compose deployment.",
        "description": "Returns the status of the compose deployment that was created or in the process of being created in the Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, status, and other details about the deployment.",
        "operationId": "GetComposeDeploymentStatus",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0-Preview_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/DeploymentNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Compose Deployment"
        ],
        "responses": {
          "200": {
            "description": "Information about the compose deployment.",
            "schema": {
              "$ref": "#/definitions/ComposeDeploymentStatusInfo"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/ComposeDeployments": {
      "get": {
        "summary": "Gets the list of compose deployments created in the Service Fabric cluster.",
        "description": "Gets the status about the compose deployments that were created or in the process of being created in the Service Fabric cluster. The response includes the name, status, and other details about the compose deployments. If the list of deployments do not fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page.",
        "operationId": "GetComposeDeploymentStatusList",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0-Preview_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ContinuationTokenOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/MaxResultsOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Compose Deployment"
        ],
        "responses": {
          "200": {
            "description": "List of status of compose deployments in the cluster.",
            "schema": {
              "$ref": "#/definitions/PagedComposeDeploymentStatusInfoList"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/ComposeDeployments/{deploymentName}/$/GetUpgradeProgress": {
      "get": {
        "summary": "Gets details for the latest upgrade performed on this Service Fabric compose deployment.",
        "description": "Returns the information about the state of the compose deployment upgrade along with details to aid debugging application health issues.",
        "operationId": "GetComposeDeploymentUpgradeProgress",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0-Preview_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/DeploymentNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Compose Deployment"
        ],
        "responses": {
          "200": {
            "description": "Details about the compose deployment upgrade.",
            "schema": {
              "$ref": "#/definitions/ComposeDeploymentUpgradeProgressInfo"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/ComposeDeployments/{deploymentName}/$/Delete": {
      "post": {
        "summary": "Deletes an existing Service Fabric compose deployment from cluster.",
        "description": "Deletes an existing Service Fabric compose deployment.",
        "operationId": "RemoveComposeDeployment",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0-Preview_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/DeploymentNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Compose Deployment"
        ],
        "responses": {
          "202": {
            "description": "A successful operation will return 202 status code."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/ComposeDeployments/{deploymentName}/$/Upgrade": {
      "post": {
        "summary": "Starts upgrading a compose deployment in the Service Fabric cluster.",
        "description": "Validates the supplied upgrade parameters and starts upgrading the deployment if the parameters are valid.",
        "operationId": "StartComposeDeploymentUpgrade",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0-Preview_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/DeploymentNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ComposeDeploymentUpgradeDescriptionRequiredBodyParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Compose Deployment"
        ],
        "responses": {
          "202": {
            "description": "A successful response means that the upgrade has started. Use GetComposeDeploymentUpgrade operation to get the status of the upgrade."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Tools/Chaos": {
      "get": {
        "operationId": "GetChaos",
        "summary": "Get the status of Chaos.",
        "description": "Get the status of Chaos indicating whether or not Chaos is running, the Chaos parameters used for running Chaos and the status of the Chaos Schedule.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-2_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Chaos"
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code and the status of Chaos.",
            "schema": {
              "$ref": "#/definitions/Chaos"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Tools/Chaos/$/Start": {
      "post": {
        "operationId": "StartChaos",
        "summary": "Starts Chaos in the cluster.",
        "description": "If Chaos is not already running in the cluster, it starts Chaos with the passed in Chaos parameters.\nIf Chaos is already running when this call is made, the call fails with the error code FABRIC_E_CHAOS_ALREADY_RUNNING.\nRefer to the article [Induce controlled Chaos in Service Fabric clusters](https://docs.microsoft.com/azure/service-fabric/service-fabric-controlled-chaos) for more details.",
        "tags": [
          "Chaos"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ChaosParametersRequiredBodyParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Tools/Chaos/$/Stop": {
      "post": {
        "operationId": "StopChaos",
        "summary": "Stops Chaos if it is running in the cluster and put the Chaos Schedule in a stopped state.",
        "description": "Stops Chaos from executing new faults. In-flight faults will continue to execute until they are complete. The current Chaos Schedule is put into a stopped state.\nOnce a schedule is stopped, it will stay in the stopped state and not be used to Chaos Schedule new runs of Chaos. A new Chaos Schedule must be set in order to resume scheduling.",
        "tags": [
          "Chaos"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Tools/Chaos/Events": {
      "get": {
        "operationId": "GetChaosEvents",
        "summary": "Gets the next segment of the Chaos events based on the continuation token or the time range.",
        "description": "To get the next segment of the Chaos events, you can specify the ContinuationToken. To get the start of a new segment of Chaos events, you can specify the time range\nthrough StartTimeUtc and EndTimeUtc. You cannot specify both the ContinuationToken and the time range in the same call.\nWhen there are more than 100 Chaos events, the Chaos events are returned in multiple segments where a segment contains no more than 100 Chaos events and to get the next segment you make a call to this API with the continuation token.",
        "x-ms-examples": {
          "Get Chaos events given a time range": {
            "$ref": "./examples/GetChaosEvents.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-2_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ContinuationTokenOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/StartTimeUtcOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/EndTimeUtcOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/MaxResultsOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Chaos"
        ],
        "responses": {
          "200": {
            "description": "Next segment of Chaos events.",
            "schema": {
              "$ref": "#/definitions/ChaosEventsSegment"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Tools/Chaos/Schedule": {
      "get": {
        "operationId": "GetChaosSchedule",
        "summary": "Get the Chaos Schedule defining when and how to run Chaos.",
        "description": "Gets the version of the Chaos Schedule in use and the Chaos Schedule that defines when and how to run Chaos.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-2_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Chaos"
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code and the schedule description including a Chaos Schedule used by Chaos and the version the Chaos Schedule is on.",
            "schema": {
              "$ref": "#/definitions/ChaosScheduleDescription"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      },
      "post": {
        "operationId": "PostChaosSchedule",
        "summary": "Set the schedule used by Chaos.",
        "description": "Chaos will automatically schedule runs based on the Chaos Schedule.\nThe Chaos Schedule will be updated if the provided version matches the version on the server.\nWhen updating the Chaos Schedule, the version on the server is incremented by 1.\nThe version on the server will wrap back to 0 after reaching a large number.\nIf Chaos is running when this call is made, the call will fail.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-2_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/ChaosScheduleRequiredBodyParam"
          }
        ],
        "tags": [
          "Chaos"
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/ImageStore/{contentPath}": {
      "put": {
        "summary": "Uploads contents of the file to the image store.",
        "description": "Uploads contents of the file to the image store. Use this API if the file is small enough to upload again if the connection fails. The file's data needs to be added to the request body. The contents will be uploaded to the specified path. Image store service uses a mark file to indicate the availability of the folder. The mark file is an empty file named \"_.dir\". The mark file is generated by the image store service when all files in a folder are uploaded. When using File-by-File approach to upload application package in REST, the image store service isn't aware of the file hierarchy of the application package; you need to create a mark file per folder and upload it last, to let the image store service know that the folder is complete.",
        "operationId": "UploadFile",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ImageStoreContentPathRequiredPathParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "ImageStore"
        ],
        "responses": {
          "200": {
            "description": "If the upload request succeeds, the server returns the HTTP 200 OK status code."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      },
      "get": {
        "summary": "Gets the image store content information.",
        "description": "Returns the information about the image store content at the specified contentPath. The contentPath is relative to the root of the image store.",
        "operationId": "GetImageStoreContent",
        "x-ms-examples": {
          "Get information about image store content under a given relative path": {
            "$ref": "./examples/GetImageStoreContent.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-2_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ImageStoreContentPathRequiredPathParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "ImageStore"
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code and the requested image store content information.",
            "schema": {
              "$ref": "#/definitions/ImageStoreContent"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      },
      "delete": {
        "summary": "Deletes existing image store content.",
        "description": "Deletes existing image store content being found within the given image store relative path. This can be used to delete uploaded application packages once they are provisioned.",
        "operationId": "DeleteImageStoreContent",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ImageStoreContentPathRequiredPathParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "ImageStore"
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/ImageStore": {
      "get": {
        "summary": "Gets the content information at the root of the image store.",
        "description": "Returns the information about the image store content at the root of the image store.",
        "operationId": "GetImageStoreRootContent",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "ImageStore"
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code and the requested image store content information.",
            "schema": {
              "$ref": "#/definitions/ImageStoreContent"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/ImageStore/$/Copy": {
      "post": {
        "summary": "Copies image store content internally",
        "description": "Copies the image store content from the source image store relative path to the destination image store relative path.",
        "operationId": "CopyImageStoreContent",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ImageStoreCopyDescriptionRequiredBodyParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "ImageStore"
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/ImageStore/$/DeleteUploadSession": {
      "delete": {
        "summary": "Cancels an image store upload session.",
        "description": "The DELETE request will cause the existing upload session to expire and remove any previously uploaded file chunks.",
        "operationId": "DeleteImageStoreUploadSession",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/UploadSessionIdRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "ImageStore"
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/ImageStore/$/CommitUploadSession": {
      "post": {
        "summary": "Commit an image store upload session.",
        "description": "When all file chunks have been uploaded, the upload session needs to be committed explicitly to complete the upload. Image store preserves the upload session until the expiration time, which is 30 minutes after the last chunk received. ",
        "operationId": "CommitImageStoreUploadSession",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/UploadSessionIdRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "ImageStore"
        ],
        "responses": {
          "200": {
            "description": "If the commit request succeeds, the server returns the HTTP 200 OK status code."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/ImageStore/$/GetUploadSession": {
      "get": {
        "summary": "Get the image store upload session by ID.",
        "description": "Gets the image store upload session identified by the given ID. User can query the upload session at any time during uploading. ",
        "operationId": "GetImageStoreUploadSessionById",
        "x-ms-examples": {
          "Get information about image store upload session by a given ID": {
            "$ref": "./examples/GetUploadSessionById.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/UploadSessionIdRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "ImageStore"
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code and the requested image store upload session information.",
            "schema": {
              "$ref": "#/definitions/UploadSession"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/ImageStore/{contentPath}/$/GetUploadSession": {
      "get": {
        "summary": "Get the image store upload session by relative path.",
        "description": "Gets the image store upload session associated with the given image store relative path. User can query the upload session at any time during uploading. ",
        "operationId": "GetImageStoreUploadSessionByPath",
        "x-ms-examples": {
          "Get information about image store upload session by a given relative path": {
            "$ref": "./examples/GetUploadSessionByPath.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ImageStoreContentPathRequiredPathParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "ImageStore"
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code and the requested image store upload session information.",
            "schema": {
              "$ref": "#/definitions/UploadSession"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/ImageStore/{contentPath}/$/UploadChunk": {
      "put": {
        "summary": "Uploads a file chunk to the image store relative path.",
        "description": "Uploads a file chunk to the image store with the specified upload session ID and image store relative path. This API allows user to resume the file upload operation. user doesn't have to restart the file upload from scratch whenever there is a network interruption. Use this option if the file size is large.\n\nTo perform a resumable file upload, user need to break the file into multiple chunks and upload these chunks to the image store one-by-one. Chunks don't have to be uploaded in order. If the file represented by the image store relative path already exists, it will be overwritten when the upload session commits.",
        "operationId": "UploadFileChunk",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ImageStoreContentPathRequiredPathParam"
          },
          {
            "$ref": "#/parameters/UploadSessionIdRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/UploadFileChunkContentRangeHeaderParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "ImageStore"
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return the HTTP 200 OK status code."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/$/InvokeInfrastructureCommand": {
      "post": {
        "operationId": "InvokeInfrastructureCommand",
        "summary": "Invokes an administrative command on the given Infrastructure Service instance.",
        "description": "For clusters that have one or more instances of the Infrastructure Service configured,\nthis API provides a way to send infrastructure-specific commands to a particular\ninstance of the Infrastructure Service.\n\nAvailable commands and their corresponding response formats vary depending upon\nthe infrastructure on which the cluster is running.\n\nThis API supports the Service Fabric platform; it is not meant to be used directly from your code.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/InfrastructureCommandRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/InfrastructureServiceIdOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Infrastructure"
        ],
        "responses": {
          "200": {
            "description": "The response from the infrastructure service. The response format is a JSON stream.\nThe contents of the response depend on which command was issued.",
            "schema": {
              "$ref": "#/definitions/InfrastructureServiceResponse"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/$/InvokeInfrastructureQuery": {
      "get": {
        "operationId": "InvokeInfrastructureQuery",
        "summary": "Invokes a read-only query on the given infrastructure service instance.",
        "description": "For clusters that have one or more instances of the Infrastructure Service configured,\nthis API provides a way to send infrastructure-specific queries to a particular\ninstance of the Infrastructure Service.\n\nAvailable commands and their corresponding response formats vary depending upon\nthe infrastructure on which the cluster is running.\n\nThis API supports the Service Fabric platform; it is not meant to be used directly from your code.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/InfrastructureCommandRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/InfrastructureServiceIdOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Infrastructure"
        ],
        "responses": {
          "200": {
            "description": "The response from the infrastructure service. The response format is a JSON stream.\nThe contents of the response depend on which command was issued.",
            "schema": {
              "$ref": "#/definitions/InfrastructureServiceResponse"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/StartDataLoss": {
      "post": {
        "operationId": "StartDataLoss",
        "summary": "This API will induce data loss for the specified partition. It will trigger a call to the OnDataLossAsync API of the partition.",
        "description": "This API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the partition.\nActual data loss will depend on the specified DataLossMode.\n\n- PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual data loss depends on the presence of in-flight replication.\n- FullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.\n\nThis API should only be called with a stateful service as the target.\n\nCalling this API with a system service as the target is not advised.\n\nNote:  Once this API has been called, it cannot be reversed. Calling CancelOperation will only stop execution and clean up internal system state.\nIt will not restore data if the command has progressed far enough to cause data loss.\n\nCall the GetDataLossProgress API with the same OperationId to return information on the operation started with this API.",
        "tags": [
          "Faults"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ServiceIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/PartitionIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/FaultOperationIdRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/DataLossModeRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "responses": {
          "202": {
            "description": "A 202 status code indicates the operation was accepted.  Call the GetDataLossProgress API to get the progress."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/GetDataLossProgress": {
      "get": {
        "summary": "Gets the progress of a partition data loss operation started using the StartDataLoss API.",
        "description": "Gets the progress of a data loss operation started with StartDataLoss, using the OperationId.",
        "operationId": "GetDataLossProgress",
        "x-ms-examples": {
          "Gets information about a partition data loss operation.  In this case the operation has a State of Completed": {
            "$ref": "./examples/GetDataLossProgress.json"
          },
          "Get information about a partition data loss operation.  In this case the operation is a State of Running": {
            "$ref": "./examples/GetDataLossProgress-Running.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ServiceIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/PartitionIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/FaultOperationIdRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Faults"
        ],
        "responses": {
          "200": {
            "description": "Information about the progress of the partition data loss operation.",
            "schema": {
              "$ref": "#/definitions/PartitionDataLossProgress"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/StartQuorumLoss": {
      "post": {
        "operationId": "StartQuorumLoss",
        "summary": "Induces quorum loss for a given stateful service partition.",
        "description": "This API is useful for a temporary quorum loss situation on your service.\n\nCall the GetQuorumLossProgress API with the same OperationId to return information on the operation started with this API.\n\nThis can only be called on stateful persisted (HasPersistedState==true) services.  Do not use this API on stateless services or stateful in-memory only services.",
        "tags": [
          "Faults"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ServiceIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/PartitionIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/FaultOperationIdRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/QuorumLossModeRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/QuorumLossDurationRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "responses": {
          "202": {
            "description": "A 202 status code indicates the operation was accepted.  Call the GetQuorumLossProgress API to get the progress."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/GetQuorumLossProgress": {
      "get": {
        "summary": "Gets the progress of a quorum loss operation on a partition started using the StartQuorumLoss API.",
        "description": "Gets the progress of a quorum loss operation started with StartQuorumLoss, using the provided OperationId.",
        "operationId": "GetQuorumLossProgress",
        "x-ms-examples": {
          "Gets information about a completed quorum loss operation": {
            "$ref": "./examples/GetQuorumLossProgress.json"
          },
          "Gets information about a running quorum operation operation": {
            "$ref": "./examples/GetQuorumLossProgress-Running.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ServiceIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/PartitionIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/FaultOperationIdRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Faults"
        ],
        "responses": {
          "200": {
            "description": "Information about the progress of a partition quorum loss operation.",
            "schema": {
              "$ref": "#/definitions/PartitionQuorumLossProgress"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/StartRestart": {
      "post": {
        "operationId": "StartPartitionRestart",
        "summary": "This API will restart some or all replicas or instances of the specified partition.",
        "description": "This API is useful for testing failover.\n\nIf used to target a stateless service partition, RestartPartitionMode must be AllReplicasOrInstances.\n\nCall the GetPartitionRestartProgress API using the same OperationId to get the progress.",
        "tags": [
          "Faults"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ServiceIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/PartitionIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/FaultOperationIdRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/RestartPartitionModeRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "responses": {
          "202": {
            "description": "A 202 status code indicates the operation was accepted.  Call the GetPartitionRestartProgress API to get the progress."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/GetRestartProgress": {
      "get": {
        "summary": "Gets the progress of a PartitionRestart operation started using StartPartitionRestart.",
        "description": "Gets the progress of a PartitionRestart started with StartPartitionRestart using the provided OperationId.",
        "operationId": "GetPartitionRestartProgress",
        "x-ms-examples": {
          "Get information a completed PartitionRestart operation": {
            "$ref": "./examples/GetPartitionRestartProgress.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ServiceIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/PartitionIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/FaultOperationIdRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Faults"
        ],
        "responses": {
          "200": {
            "description": "Information about the progress of a partition restart operation.",
            "schema": {
              "$ref": "#/definitions/PartitionRestartProgress"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Faults/Nodes/{nodeName}/$/StartTransition/": {
      "post": {
        "operationId": "StartNodeTransition",
        "summary": "Starts or stops a cluster node.",
        "description": "Starts or stops a cluster node.  A cluster node is a process, not the OS instance itself.  To start a node, pass in \"Start\" for the NodeTransitionType parameter.\nTo stop a node, pass in \"Stop\" for the NodeTransitionType parameter.  This API starts the operation - when the API returns the node may not have finished transitioning yet.\nCall GetNodeTransitionProgress with the same OperationId to get the progress of the operation.",
        "tags": [
          "Faults"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/NodeNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/FaultOperationIdRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/NodeTransitionTypeRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/NodeInstanceIdRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/StopDurationInSecondsRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "responses": {
          "202": {
            "description": "A 202 status code indicates the operation was accepted.  Call the GetNodeTransitionProgress API to get the progress."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Faults/Nodes/{nodeName}/$/GetTransitionProgress": {
      "get": {
        "summary": "Gets the progress of an operation started using StartNodeTransition.",
        "description": "Gets the progress of an operation started with StartNodeTransition using the provided OperationId.",
        "operationId": "GetNodeTransitionProgress",
        "x-ms-examples": {
          "Gets information about a completed NodeTransition operation": {
            "$ref": "./examples/GetNodeTransitionProgress.json"
          },
          "Gets information about a running NodeTransition operation": {
            "$ref": "./examples/GetNodeTransitionProgress-Running.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/NodeNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/FaultOperationIdRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Faults"
        ],
        "responses": {
          "200": {
            "description": "Information about the progress of a node transition operation.",
            "schema": {
              "$ref": "#/definitions/NodeTransitionProgress"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Faults/": {
      "get": {
        "operationId": "GetFaultOperationList",
        "summary": "Gets a list of user-induced fault operations filtered by provided input.",
        "description": "Gets the a list of user-induced fault operations filtered by provided input.",
        "x-ms-examples": {
          "Gets information on fault operations": {
            "$ref": "./examples/GetFaultOperationList.json"
          }
        },
        "tags": [
          "Faults"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TypeFilterRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/StateFilterRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code.",
            "schema": {
              "$ref": "#/definitions/OperationStatusList"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Faults/$/Cancel": {
      "post": {
        "operationId": "CancelOperation",
        "summary": "Cancels a user-induced fault operation.",
        "description": "The following APIs start fault operations that may be cancelled by using CancelOperation: StartDataLoss, StartQuorumLoss, StartPartitionRestart, StartNodeTransition.\n\nIf force is false, then the specified user-induced operation will be gracefully stopped and cleaned up.  If force is true, the command will be aborted, and some internal state\nmay be left behind.  Specifying force as true should be used with care.  Calling this API with force set to true is not allowed until this API has already\nbeen called on the same test command with force set to false first, or unless the test command already has an OperationState of OperationState.RollingBack.\nClarification: OperationState.RollingBack means that the system will be/is cleaning up internal system state caused by executing the command.  It will not restore data if the\ntest command was to cause data loss.  For example, if you call StartDataLoss then call this API, the system will only clean up internal state from running the command.\nIt will not restore the target partition's data, if the command progressed far enough to cause data loss.\n\nImportant note:  if this API is invoked with force==true, internal state may be left behind.",
        "tags": [
          "Faults"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/FaultOperationIdRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ForceRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/BackupRestore/BackupPolicies/$/Create": {
      "post": {
        "operationId": "CreateBackupPolicy",
        "summary": "Creates a backup policy.",
        "description": "Creates a backup policy which can be associated later with a Service Fabric application, service or a partition for periodic backup.",
        "x-ms-examples": {
          "Create a time based backup policy with Azure as backup location": {
            "$ref": "./examples/CreateBackupPolicy-1.json"
          },
          "Create a frequency based backup policy with file share as backup location": {
            "$ref": "./examples/CreateBackupPolicy-2.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/BackupPolicyDescriptionRequiredBodyParam"
          },
          {
            "$ref": "#/parameters/ApiVersion_6-2-Preview_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "BackupRestore"
        ],
        "responses": {
          "201": {
            "description": "A sucessful operation returns 201 status code and creates a new backup policy."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/BackupRestore/BackupPolicies/{backupPolicyName}/$/Delete": {
      "post": {
        "operationId": "DeleteBackupPolicy",
        "summary": "Deletes the backup policy.",
        "description": "Deletes an existing backup policy. A backup policy must be created before it can be deleted. A currently active backup policy, associated with any Service Fabric application, service or partition, cannot be deleted without first deleting the mapping.",
        "x-ms-examples": {
          "Delete backup policy": {
            "$ref": "./examples/DeleteBackupPolicy.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/BackupPolicyNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ApiVersion_6-2-Preview_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "BackupRestore"
        ],
        "responses": {
          "200": {
            "description": "A successful operation returns 200 status code and deletes the backup policy."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/BackupRestore/BackupPolicies": {
      "get": {
        "operationId": "GetBackupPolicyList",
        "summary": "Gets all the backup policies configured.",
        "description": "Get a list of all the backup policies configured.",
        "x-ms-examples": {
          "Limit maximum results": {
            "$ref": "./examples/GetBackupPolicyList-1.json"
          },
          "Page using continuation token": {
            "$ref": "./examples/GetBackupPolicyList-2.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-2-Preview_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ContinuationTokenOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/MaxResultsOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "BackupRestore"
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code and paged list of backup policies.",
            "schema": {
              "$ref": "#/definitions/PagedBackupPolicyDescriptionList"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/BackupRestore/BackupPolicies/{backupPolicyName}": {
      "get": {
        "operationId": "GetBackupPolicyByName",
        "summary": "Gets a particular backup policy by name.",
        "description": "Gets a particular backup policy identified by {backupPolicyName}",
        "x-ms-examples": {
          "Get backup policy by name": {
            "$ref": "./examples/GetBackupPolicyByName.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/BackupPolicyNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ApiVersion_6-2-Preview_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "BackupRestore"
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code and the backup policy description.",
            "schema": {
              "$ref": "#/definitions/BackupPolicyDescription"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/BackupRestore/BackupPolicies/{backupPolicyName}/$/GetBackupEnabledEntities": {
      "get": {
        "operationId": "GetAllEntitiesBackedUpByPolicy",
        "summary": "Gets the list of backup entities that are associated with this policy.",
        "description": "Returns a list of Service Fabric application, service or partition which are associated with this backup policy.",
        "x-ms-examples": {
          "Limit maximum results": {
            "$ref": "./examples/GetAllEntitiesBackedUpByPolicy-1.json"
          },
          "Page using continuation token": {
            "$ref": "./examples/GetAllEntitiesBackedUpByPolicy-2.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/BackupPolicyNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ApiVersion_6-2-Preview_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ContinuationTokenOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/MaxResultsOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "BackupRestore"
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code and a paged list of Service Fabric entities that are associated with this policy.",
            "schema": {
              "$ref": "#/definitions/PagedBackupEntityList"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/BackupRestore/BackupPolicies/{backupPolicyName}/$/Update": {
      "post": {
        "operationId": "UpdateBackupPolicy",
        "summary": "Updates the backup policy.",
        "description": "Updates the backup policy identified by {backupPolicyName}",
        "x-ms-examples": {
          "Update backup policy": {
            "$ref": "./examples/UpdateBackupPolicy.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/BackupPolicyDescriptionRequiredBodyParam"
          },
          {
            "$ref": "#/parameters/BackupPolicyNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ApiVersion_6-2-Preview_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "BackupRestore"
        ],
        "responses": {
          "200": {
            "description": "A sucessful operation resturns 200 status code and updates the backup policy description."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Applications/{applicationId}/$/EnableBackup": {
      "post": {
        "operationId": "EnableApplicationBackup",
        "summary": "Enables periodic backup of stateful partitions under this Service Fabric application.",
        "description": "Enables periodic backup of stateful partitions which are part of this Service Fabric application. Each partition is backed up individually as per the specified backup policy description. \nNote only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.",
        "x-ms-examples": {
          "Enable application backup": {
            "$ref": "./examples/EnableApplicationBackup.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ApplicationIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/EnableBackupDescriptionRequiredBodyParam"
          },
          {
            "$ref": "#/parameters/ApiVersion_6-2-Preview_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "BackupRestore"
        ],
        "responses": {
          "202": {
            "description": "A 202 status code indicates the request to enable application backup has been accepted."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Applications/{applicationId}/$/DisableBackup": {
      "post": {
        "operationId": "DisableApplicationBackup",
        "summary": "Disables periodic backup of Service Fabric application.",
        "description": "Disables periodic backup of Service Fabric application which was previously enabled.",
        "x-ms-examples": {
          "Disable application backup": {
            "$ref": "./examples/DisableApplicationBackup.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ApplicationIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ApiVersion_6-2-Preview_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "BackupRestore"
        ],
        "responses": {
          "202": {
            "description": "A 202 status code indicates the request to disable application backup has been accepted."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Applications/{applicationId}/$/GetBackupConfigurationInfo": {
      "get": {
        "operationId": "GetApplicationBackupConfigurationInfo",
        "summary": "Gets the Service Fabric application backup configuration information.",
        "description": "Gets the Service Fabric backup configuration information for the application and the services and partitions under this application.",
        "x-ms-examples": {
          "Limit maximum results": {
            "$ref": "./examples/GetApplicationBackupConfigurationInfo-1.json"
          },
          "Page using continuation token": {
            "$ref": "./examples/GetApplicationBackupConfigurationInfo-2.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ApplicationIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ApiVersion_6-2-Preview_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ContinuationTokenOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/MaxResultsOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "BackupRestore"
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code and a paged list of backup configuration information for the application, and the services and partitions under this application, for which backup configuration has been overridden.",
            "schema": {
              "$ref": "#/definitions/PagedBackupConfigurationInfoList"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Applications/{applicationId}/$/GetBackups": {
      "get": {
        "operationId": "GetApplicationBackupList",
        "summary": "Gets the list of backups available for every partition in this application.",
        "description": "Returns a list of backups available for every partition in this Service Fabric application. The server enumerates all the backups available at the backup location configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for every partition.",
        "x-ms-examples": {
          "Get application backups within a time range": {
            "$ref": "./examples/GetApplicationBackupList-1.json"
          },
          "Get latest backup": {
            "$ref": "./examples/GetApplicationBackupList-2.json"
          },
          "Limit maximum results": {
            "$ref": "./examples/GetApplicationBackupList-3.json"
          },
          "Page using continuation token": {
            "$ref": "./examples/GetApplicationBackupList-4.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ApplicationIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ApiVersion_6-2-Preview_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/LatestOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/StartDateTimeFilterOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/EndDateTimeFilterOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/ContinuationTokenOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/MaxResultsOptionalQueryParam"
          }
        ],
        "tags": [
          "BackupRestore"
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code and a paged list of backup information.",
            "schema": {
              "$ref": "#/definitions/PagedBackupInfoList"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Applications/{applicationId}/$/SuspendBackup": {
      "post": {
        "operationId": "SuspendApplicationBackup",
        "summary": "Suspends periodic backup for the specified Service Fabric application.",
        "description": "The application which is configured to take periodic backups, is suspended for taking further backups till it is resumed again. This operation applies to the entire application's hierarchy. It means all the services and partitions under this application are now suspended for backup.",
        "x-ms-examples": {
          "Suspend application backup": {
            "$ref": "./examples/SuspendApplicationBackup.json"
          }
        },
        "tags": [
          "BackupRestore"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApplicationIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ApiVersion_6-2-Preview_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "responses": {
          "202": {
            "description": "A 202 status code indicates the operation request was accepted and application backup will be suspended."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Applications/{applicationId}/$/ResumeBackup": {
      "post": {
        "operationId": "ResumeApplicationBackup",
        "summary": "Resumes periodic backup of a Service Fabric application which was previously suspended.",
        "description": "The previously suspended Service Fabric application resumes taking periodic backup as per the backup policy currently configured for the same.",
        "x-ms-examples": {
          "Resume application backup": {
            "$ref": "./examples/ResumeApplicationBackup.json"
          }
        },
        "tags": [
          "BackupRestore"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApplicationIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ApiVersion_6-2-Preview_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "responses": {
          "202": {
            "description": "A 202 status code indicates the operation request was accepted and application backup will be resumed."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Services/{serviceId}/$/EnableBackup": {
      "post": {
        "operationId": "EnableServiceBackup",
        "summary": "Enables periodic backup of stateful partitions under this Service Fabric service.",
        "description": "Enables periodic backup of stateful partitions which are part of this Service Fabric service. Each partition is backed up individually as per the specified backup policy description. In case the application, which the service is part of, is already enabled for backup then this operation would override the policy being used to take the periodic backup for this service and its partitions (unless explicitly overridden at the partition level).\nNote only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.",
        "x-ms-examples": {
          "Enable service backup": {
            "$ref": "./examples/EnableServiceBackup.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ServiceIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/EnableBackupDescriptionRequiredBodyParam"
          },
          {
            "$ref": "#/parameters/ApiVersion_6-2-Preview_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "BackupRestore"
        ],
        "responses": {
          "202": {
            "description": "A 202 status code indicates the request to enable service backup has been accepted."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Services/{serviceId}/$/DisableBackup": {
      "post": {
        "operationId": "DisableServiceBackup",
        "summary": "Disables periodic backup of Service Fabric service which was previously enabled.",
        "description": "Disables periodic backup of Service Fabric service which was previously enabled. Backup must be explicitly enabled before it can be disabled.\nIn case the backup is enabled for the Service Fabric application, which this service is part of, this service would continue to be periodically backed up as per the policy mapped at the application level.",
        "x-ms-examples": {
          "Disable service backup": {
            "$ref": "./examples/DisableServiceBackup.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ServiceIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ApiVersion_6-2-Preview_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "BackupRestore"
        ],
        "responses": {
          "202": {
            "description": "A 202 status code indicates the request to disable service backup has been accepted."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Services/{serviceId}/$/GetBackupConfigurationInfo": {
      "get": {
        "operationId": "GetServiceBackupConfigurationInfo",
        "summary": "Gets the Service Fabric service backup configuration information.",
        "description": "Gets the Service Fabric backup configuration information for the service and the partitions under this service.",
        "x-ms-examples": {
          "Limit maximum results": {
            "$ref": "./examples/GetServiceBackupConfigurationInfo-1.json"
          },
          "Page using continuation token": {
            "$ref": "./examples/GetServiceBackupConfigurationInfo-2.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ServiceIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ApiVersion_6-2-Preview_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ContinuationTokenOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/MaxResultsOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "BackupRestore"
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code and a paged list of backup configuration information for the service, and the partitions under this service, for which backup configuration has been overridden.",
            "schema": {
              "$ref": "#/definitions/PagedBackupConfigurationInfoList"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Services/{serviceId}/$/GetBackups": {
      "get": {
        "operationId": "GetServiceBackupList",
        "summary": "Gets the list of backups available for every partition in this service.",
        "description": "Returns a list of backups available for every partition in this Service Fabric service. The server enumerates all the backups available in the backup store configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for every partition.",
        "x-ms-examples": {
          "Get application backups within a time range": {
            "$ref": "./examples/GetServiceBackupList-1.json"
          },
          "Get latest backup": {
            "$ref": "./examples/GetServiceBackupList-2.json"
          },
          "Limit maximum results": {
            "$ref": "./examples/GetServiceBackupList-3.json"
          },
          "Page using continuation token": {
            "$ref": "./examples/GetServiceBackupList-4.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ServiceIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ApiVersion_6-2-Preview_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/LatestOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/StartDateTimeFilterOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/EndDateTimeFilterOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/ContinuationTokenOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/MaxResultsOptionalQueryParam"
          }
        ],
        "tags": [
          "BackupRestore"
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code and a paged list of backup information.",
            "schema": {
              "$ref": "#/definitions/PagedBackupInfoList"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Services/{serviceId}/$/SuspendBackup": {
      "post": {
        "operationId": "SuspendServiceBackup",
        "summary": "Suspends periodic backup for the specified Service Fabric service.",
        "description": "The service which is configured to take periodic backups, is suspended for taking further backups till it is resumed again. This operation applies to the entire service's hierarchy. It means all the partitions under this service are now suspended for backup.",
        "x-ms-examples": {
          "Suspend service backup": {
            "$ref": "./examples/SuspendServiceBackup.json"
          }
        },
        "tags": [
          "BackupRestore"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ServiceIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ApiVersion_6-2-Preview_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "responses": {
          "202": {
            "description": "A 202 status code indicates the operation request was accepted and service backup will be suspended."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Services/{serviceId}/$/ResumeBackup": {
      "post": {
        "operationId": "ResumeServiceBackup",
        "summary": "Resumes periodic backup of a Service Fabric service which was previously suspended.",
        "description": "The previously suspended Service Fabric service resumes taking periodic backup as per the backup policy currently configured for the same.",
        "x-ms-examples": {
          "Resume service backup": {
            "$ref": "./examples/ResumeServiceBackup.json"
          }
        },
        "tags": [
          "BackupRestore"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ServiceIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ApiVersion_6-2-Preview_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "responses": {
          "202": {
            "description": "A 202 status code indicates the operation request was accepted and service backup will be resumed."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Partitions/{partitionId}/$/EnableBackup": {
      "post": {
        "operationId": "EnablePartitionBackup",
        "summary": "Enables periodic backup of the stateful persisted partition.",
        "description": "Enables periodic backup of stateful persisted partition. Each partition is backed up as per the specified backup policy description. In case the application or service, which is partition is part of, is already enabled for backup then this operation would override the policy being used to take the periodic backup of this partition.\nNote only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.",
        "x-ms-examples": {
          "Enable partition backup": {
            "$ref": "./examples/EnablePartitionBackup.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/PartitionIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/EnableBackupDescriptionRequiredBodyParam"
          },
          {
            "$ref": "#/parameters/ApiVersion_6-2-Preview_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "BackupRestore"
        ],
        "responses": {
          "202": {
            "description": "A 202 status code indicates the request to enable partition backup has been accepted."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Partitions/{partitionId}/$/DisableBackup": {
      "post": {
        "operationId": "DisablePartitionBackup",
        "summary": "Disables periodic backup of Service Fabric partition which was previously enabled.",
        "description": "Disables periodic backup of partition which was previously enabled. Backup must be explicitly enabled before it can be disabled. \nIn case the backup is enabled for the Service Fabric application or service, which this partition is part of, this partition would continue to be periodically backed up as per the policy mapped at the higher level entity.",
        "x-ms-examples": {
          "Disable partition backup": {
            "$ref": "./examples/DisablePartitionBackup.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/PartitionIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ApiVersion_6-2-Preview_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "BackupRestore"
        ],
        "responses": {
          "202": {
            "description": "A 202 status code indicates the request to disable partition backup has been accepted."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Partitions/{partitionId}/$/GetBackupConfigurationInfo": {
      "get": {
        "operationId": "GetPartitionBackupConfigurationInfo",
        "summary": "Gets the partition backup configuration information",
        "description": "Gets the Service Fabric Backup configuration information for the specified partition.",
        "x-ms-examples": {
          "Get partition backup configuration information": {
            "$ref": "./examples/GetPartitionBackupConfigurationInfo.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/PartitionIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ApiVersion_6-2-Preview_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "BackupRestore"
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code and gets the partition's backup configuration information.",
            "schema": {
              "$ref": "#/definitions/PartitionBackupConfigurationInfo"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Partitions/{partitionId}/$/GetBackups": {
      "get": {
        "operationId": "GetPartitionBackupList",
        "summary": "Gets the list of backups available for the specified partition.",
        "description": "Returns a list of backups available for the specified partition. The server enumerates all the backups available in the backup store configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for the partition.",
        "x-ms-examples": {
          "Get application backups within a time range": {
            "$ref": "./examples/GetPartitionBackupList-1.json"
          },
          "Get latest backup": {
            "$ref": "./examples/GetPartitionBackupList-2.json"
          },
          "Limit maximum results": {
            "$ref": "./examples/GetPartitionBackupList-3.json"
          },
          "Page using continuation token": {
            "$ref": "./examples/GetPartitionBackupList-4.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/PartitionIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ApiVersion_6-2-Preview_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/LatestOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/StartDateTimeFilterOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/EndDateTimeFilterOptionalQueryParam"
          }
        ],
        "tags": [
          "BackupRestore"
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code and a paged list of backup information.",
            "schema": {
              "$ref": "#/definitions/PagedBackupInfoList"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Partitions/{partitionId}/$/SuspendBackup": {
      "post": {
        "operationId": "SuspendPartitionBackup",
        "summary": "Suspends periodic backup for the specified partition.",
        "description": "The partition which is configured to take periodic backups, is suspended for taking further backups till it is resumed again.",
        "x-ms-examples": {
          "Suspend partition backup": {
            "$ref": "./examples/SuspendPartitionBackup.json"
          }
        },
        "tags": [
          "BackupRestore"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/PartitionIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ApiVersion_6-2-Preview_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "responses": {
          "202": {
            "description": "A 202 status code indicates the operation request was accepted and partition backup will be suspended."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Partitions/{partitionId}/$/ResumeBackup": {
      "post": {
        "operationId": "ResumePartitionBackup",
        "summary": "Resumes periodic backup of partition which was previously suspended.",
        "description": "The previously suspended partition resumes taking periodic backup as per the backup policy currently configured for the same.",
        "x-ms-examples": {
          "Resume partition backup": {
            "$ref": "./examples/ResumePartitionBackup.json"
          }
        },
        "tags": [
          "BackupRestore"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/PartitionIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ApiVersion_6-2-Preview_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "responses": {
          "202": {
            "description": "A 202 status code indicates the operation request was accepted and partition backup will be resumed."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Partitions/{partitionId}/$/Backup": {
      "post": {
        "operationId": "BackupPartition",
        "summary": "Triggers backup of the partition's state.",
        "description": "Creates a backup of the stateful persisted partition's state. In case the partition is already being periodically backed up, then by default the new backup is created at the same backup storage. One can also override the same by specifying the backup storage details as part of the request body. Once the backup is initiated, its progress can be tracked using the GetBackupProgress operation. \nIn case, the operation times out, specify a greater backup timeout value in the query parameter.",
        "x-ms-examples": {
          "Backup partition": {
            "$ref": "./examples/BackupPartition-1.json"
          },
          "Backup partition to a specific Azure storage account": {
            "$ref": "./examples/BackupPartition-2.json"
          },
          "Backup partition to a specific on-premise file share": {
            "$ref": "./examples/BackupPartition-3.json"
          }
        },
        "tags": [
          "BackupRestore"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/PartitionIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/BackupPartitionDescriptionOptionalBodyParam"
          },
          {
            "$ref": "#/parameters/BackupTimeoutOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/ApiVersion_6-2-Preview_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "responses": {
          "202": {
            "description": "A 202 status code indicates the operation request was accepted and backup will be initiated. Use GetPartitionBackupProgress operation to get the status of the backup operation."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Partitions/{partitionId}/$/GetBackupProgress": {
      "get": {
        "operationId": "GetPartitionBackupProgress",
        "summary": "Gets details for the latest backup triggered for this partition.",
        "description": "Returns information about the state of the latest backup along with details or failure reason in case of completion.",
        "x-ms-examples": {
          "Get backup operation progress": {
            "$ref": "./examples/GetPartitionBackupProgress.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/PartitionIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ApiVersion_6-2-Preview_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "BackupRestore"
        ],
        "responses": {
          "200": {
            "description": "A successful operation returns 200 status code and backup progress details.",
            "schema": {
              "$ref": "#/definitions/BackupProgressInfo"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Partitions/{partitionId}/$/Restore": {
      "post": {
        "operationId": "RestorePartition",
        "summary": "Triggers restore of the state of the partition using the specified restore partition description.",
        "description": "Restores the state of a of the stateful persisted partition using the specified backup point. In case the partition is already being periodically backed up, then by default the backup point is looked for in the storage specified in backup policy. One can also override the same by specifying the backup storage details as part of the restore partition description in body. Once the restore is initiated, its progress can be tracked using the GetRestoreProgress operation. \nIn case, the operation times out, specify a greater restore timeout value in the query parameter.",
        "x-ms-examples": {
          "Trigger partition restore": {
            "$ref": "./examples/RestorePartition.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/PartitionIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/RestorePartitionDescriptionRequiredBodyParam"
          },
          {
            "$ref": "#/parameters/RestoreTimeoutOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/ApiVersion_6-2-Preview_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "BackupRestore"
        ],
        "responses": {
          "202": {
            "description": "A 202 status code indicates the operation request was accepted and restore will be initiated. Use GetPartitionRestoreProgress operation to get the status of the restore operation."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Partitions/{partitionId}/$/GetRestoreProgress": {
      "get": {
        "operationId": "GetPartitionRestoreProgress",
        "summary": "Gets details for the latest restore operation triggered for this partition.",
        "description": "Returns information about the state of the latest restore operation along with details or failure reason in case of completion.",
        "x-ms-examples": {
          "Get restore operation progress": {
            "$ref": "./examples/GetPartitionRestoreProgress.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/PartitionIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ApiVersion_6-2-Preview_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "BackupRestore"
        ],
        "responses": {
          "200": {
            "description": "A successful operation returns 200 status code and restore progress details.",
            "schema": {
              "$ref": "#/definitions/RestoreProgressInfo"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/BackupRestore/$/GetBackups": {
      "post": {
        "operationId": "GetBackupsFromBackupLocation",
        "summary": "Gets the list of backups available for the specified backed up entity at the specified backup location.",
        "description": "Gets the list of backups available for the specified backed up entity (Application, Service or Partition) at the specified backup location (FileShare or Azure Blob Storage).",
        "x-ms-examples": {
          "Limit maximum results": {
            "$ref": "./examples/GetBackupsFromBackupLocation-1.json"
          },
          "Page using continuation token": {
            "$ref": "./examples/GetBackupsFromBackupLocation-2.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-2-Preview_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/ContinuationTokenOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/MaxResultsOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/GetBackupByStorageQueryDescriptionRequiredBodyParam"
          }
        ],
        "tags": [
          "BackupRestore"
        ],
        "responses": {
          "200": {
            "description": "A successful operation will return 200 status code and a paged list of backup information.",
            "schema": {
              "$ref": "#/definitions/PagedBackupInfoList"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Names/$/Create": {
      "post": {
        "summary": "Creates a Service Fabric name.",
        "description": "Creates the specified Service Fabric name.",
        "operationId": "CreateName",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/NameDescriptionRequiredBodyParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "x-ms-examples": {
          "Create new name": {
            "$ref": "examples/CreateName-1.json"
          }
        },
        "tags": [
          "Property Management"
        ],
        "responses": {
          "201": {
            "description": "A successful response means that the name has been created."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Names/{nameId}": {
      "get": {
        "summary": "Returns whether the Service Fabric name exists.",
        "description": "Returns whether the specified Service Fabric name exists.",
        "operationId": "GetNameExistsInfo",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/NameIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Property Management"
        ],
        "responses": {
          "200": {
            "description": "A successful response means that the Service Fabric name exists."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      },
      "delete": {
        "summary": "Deletes a Service Fabric name.",
        "description": "Deletes the specified Service Fabric name. A name must be created before it can be deleted. Deleting a name with child properties will fail.",
        "operationId": "DeleteName",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/NameIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Property Management"
        ],
        "responses": {
          "200": {
            "description": "A successful response means that the Service Fabric name has been deleted."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Names/{nameId}/$/GetSubNames": {
      "get": {
        "summary": "Enumerates all the Service Fabric names under a given name.",
        "description": "Enumerates all the Service Fabric names under a given name. If the subnames do not fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. Querying a name that doesn't exist will fail.",
        "operationId": "GetSubNameInfoList",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/NameIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/RecursiveOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/ContinuationTokenOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "x-ms-examples": {
          "Get sub names": {
            "$ref": "examples/GetSubNameInfoList-1.json"
          },
          "Recursively search sub names": {
            "$ref": "examples/GetSubNameInfoList-2.json"
          },
          "Page using continuation token": {
            "$ref": "examples/GetSubNameInfoList-3.json"
          }
        },
        "tags": [
          "Property Management"
        ],
        "responses": {
          "200": {
            "description": "A paged list of Service Fabric names.",
            "schema": {
              "$ref": "#/definitions/PagedSubNameInfoList"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Names/{nameId}/$/GetProperties": {
      "get": {
        "summary": "Gets information on all Service Fabric properties under a given name.",
        "description": "A Service Fabric name can have one or more named properties that store custom information. This operation gets the information about these properties in a paged list. The information includes name, value, and metadata about each of the properties.",
        "operationId": "GetPropertyInfoList",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/NameIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/IncludeValuesOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/ContinuationTokenOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "x-ms-examples": {
          "Get property info list": {
            "$ref": "examples/GetPropertyInfoList-1.json"
          },
          "Get property info list with values": {
            "$ref": "examples/GetPropertyInfoList-2.json"
          },
          "Page using continuation token": {
            "$ref": "examples/GetPropertyInfoList-3.json"
          }
        },
        "tags": [
          "Property Management"
        ],
        "responses": {
          "200": {
            "description": "A paged list of Service Fabric properties.",
            "schema": {
              "$ref": "#/definitions/PagedPropertyInfoList"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Names/{nameId}/$/GetProperty": {
      "put": {
        "summary": "Creates or updates a Service Fabric property.",
        "description": "Creates or updates the specified Service Fabric property under a given name.",
        "operationId": "PutProperty",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/NameIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/PropertyDescriptionRequiredBodyParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "x-ms-examples": {
          "Put property": {
            "$ref": "examples/PutProperty-1.json"
          },
          "Put custom property": {
            "$ref": "examples/PutProperty-2.json"
          }
        },
        "tags": [
          "Property Management"
        ],
        "responses": {
          "200": {
            "description": "A successful response means that the property has been created or updated."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      },
      "get": {
        "summary": "Gets the specified Service Fabric property.",
        "description": "Gets the specified Service Fabric property under a given name. This will always return both value and metadata.",
        "operationId": "GetPropertyInfo",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/NameIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/PropertyNameRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "x-ms-examples": {
          "Get property info": {
            "$ref": "examples/GetPropertyInfo-1.json"
          }
        },
        "tags": [
          "Property Management"
        ],
        "responses": {
          "200": {
            "description": "Details on the Service Fabric property.",
            "schema": {
              "$ref": "#/definitions/PropertyInfo"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      },
      "delete": {
        "summary": "Deletes the specified Service Fabric property.",
        "description": "Deletes the specified Service Fabric property under a given name. A property must be created before it can be deleted.",
        "operationId": "DeleteProperty",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/NameIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/PropertyNameRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "Property Management"
        ],
        "responses": {
          "200": {
            "description": "A successful response means that the property has been deleted."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Names/{nameId}/$/GetProperties/$/SubmitBatch": {
      "post": {
        "summary": "Submits a property batch.",
        "description": "Submits a batch of property operations. Either all or none of the operations will be committed.",
        "operationId": "SubmitPropertyBatch",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-0_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/NameIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/PropertyBatchDescriptionListRequiredBodyParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "x-ms-examples": {
          "Property batch operation": {
            "$ref": "examples/SubmitPropertyBatch-1.json"
          }
        },
        "tags": [
          "Property Management"
        ],
        "responses": {
          "200": {
            "description": "A successful response means that the property batch succeeded.",
            "schema": {
              "$ref": "#/definitions/SuccessfulPropertyBatchInfo"
            }
          },
          "409": {
            "description": "A 409 response means that one of the property batch operations failed, and contains more information about the failure. None of the operations were commited.",
            "schema": {
              "$ref": "#/definitions/FailedPropertyBatchInfo"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/EventsStore/Cluster/Events": {
      "get": {
        "summary": "Gets all Cluster-related events.",
        "description": "The response is list of ClusterEvent objects.",
        "operationId": "GetClusterEventList",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-2-Preview_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/StartTimeUtcRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/EndTimeUtcRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/EventsTypesFilterOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/ExcludeAnalysisEventsOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/SkipCorrelationLookupOptionalQueryParam"
          }
        ],
        "tags": [
          "EventsStore"
        ],
        "x-ms-examples": {
          "Get Cluster-related events": {
            "$ref": "./examples/GetClusterEventList.json"
          }
        },
        "responses": {
          "200": {
            "description": "List of events objects with base type ClusterEvent.",
            "schema": {
              "$ref": "#/definitions/ClusterEventList"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/EventsStore/Containers/Events": {
      "get": {
        "summary": "Gets all Containers-related events.",
        "description": "The response is list of ContainerInstanceEvent objects.",
        "operationId": "GetContainersEventList",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-2-Preview_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/StartTimeUtcRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/EndTimeUtcRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/EventsTypesFilterOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/ExcludeAnalysisEventsOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/SkipCorrelationLookupOptionalQueryParam"
          }
        ],
        "tags": [
          "EventsStore"
        ],
        "responses": {
          "200": {
            "description": "List of events objects with base type ContainerInstanceEvent.",
            "schema": {
              "$ref": "#/definitions/ContainerInstanceEventList"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/EventsStore/Nodes/{nodeName}/$/Events": {
      "get": {
        "summary": "Gets a Node-related events.",
        "description": "The response is list of NodeEvent objects.",
        "operationId": "GetNodeEventList",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-2-Preview_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/NodeNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/StartTimeUtcRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/EndTimeUtcRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/EventsTypesFilterOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/ExcludeAnalysisEventsOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/SkipCorrelationLookupOptionalQueryParam"
          }
        ],
        "tags": [
          "EventsStore"
        ],
        "x-ms-examples": {
          "Get Node-related events": {
            "$ref": "./examples/GetNodeEventList.json"
          }
        },
        "responses": {
          "200": {
            "description": "List of events objects with base type NodeEvent.",
            "schema": {
              "$ref": "#/definitions/NodeEventList"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/EventsStore/Nodes/Events": {
      "get": {
        "summary": "Gets all Nodes-related Events.",
        "description": "The response is list of NodeEvent objects.",
        "operationId": "GetNodesEventList",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-2-Preview_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/StartTimeUtcRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/EndTimeUtcRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/EventsTypesFilterOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/ExcludeAnalysisEventsOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/SkipCorrelationLookupOptionalQueryParam"
          }
        ],
        "tags": [
          "EventsStore"
        ],
        "x-ms-examples": {
          "Get Nodes-related events": {
            "$ref": "./examples/GetNodesEventList.json"
          }
        },
        "responses": {
          "200": {
            "description": "List of events objects with base type NodeEvent.",
            "schema": {
              "$ref": "#/definitions/NodeEventList"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/EventsStore/Applications/{applicationId}/$/Events": {
      "get": {
        "summary": "Gets an Application-related events.",
        "description": "The response is list of ApplicationEvent objects.",
        "operationId": "GetApplicationEventList",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-2-Preview_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ApplicationIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/StartTimeUtcRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/EndTimeUtcRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/EventsTypesFilterOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/ExcludeAnalysisEventsOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/SkipCorrelationLookupOptionalQueryParam"
          }
        ],
        "tags": [
          "EventsStore"
        ],
        "x-ms-examples": {
          "Get Application-related events": {
            "$ref": "./examples/GetApplicationEventList.json"
          }
        },
        "responses": {
          "200": {
            "description": "List of events objects with base type ApplicationEvent.",
            "schema": {
              "$ref": "#/definitions/ApplicationEventList"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/EventsStore/Applications/Events": {
      "get": {
        "summary": "Gets all Applications-related events.",
        "description": "The response is list of ApplicationEvent objects.",
        "operationId": "GetApplicationsEventList",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-2-Preview_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/StartTimeUtcRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/EndTimeUtcRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/EventsTypesFilterOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/ExcludeAnalysisEventsOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/SkipCorrelationLookupOptionalQueryParam"
          }
        ],
        "tags": [
          "EventsStore"
        ],
        "x-ms-examples": {
          "Get Applications-related events": {
            "$ref": "./examples/GetApplicationsEventList.json"
          }
        },
        "responses": {
          "200": {
            "description": "List of events objects with base type ApplicationEvent.",
            "schema": {
              "$ref": "#/definitions/ApplicationEventList"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/EventsStore/Services/{serviceId}/$/Events": {
      "get": {
        "summary": "Gets a Service-related events.",
        "description": "The response is list of ServiceEvent objects.",
        "operationId": "GetServiceEventList",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-2-Preview_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ServiceIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/StartTimeUtcRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/EndTimeUtcRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/EventsTypesFilterOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/ExcludeAnalysisEventsOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/SkipCorrelationLookupOptionalQueryParam"
          }
        ],
        "tags": [
          "EventsStore"
        ],
        "x-ms-examples": {
          "Get Service-related events": {
            "$ref": "./examples/GetServiceEventList.json"
          }
        },
        "responses": {
          "200": {
            "description": "List of events objects with base type ServiceEvent.",
            "schema": {
              "$ref": "#/definitions/ServiceEventList"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/EventsStore/Services/Events": {
      "get": {
        "summary": "Gets all Services-related events.",
        "description": "The response is list of ServiceEvent objects.",
        "operationId": "GetServicesEventList",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-2-Preview_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/StartTimeUtcRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/EndTimeUtcRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/EventsTypesFilterOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/ExcludeAnalysisEventsOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/SkipCorrelationLookupOptionalQueryParam"
          }
        ],
        "tags": [
          "EventsStore"
        ],
        "x-ms-examples": {
          "Get Services-related events": {
            "$ref": "./examples/GetServicesEventList.json"
          }
        },
        "responses": {
          "200": {
            "description": "List of events objects with base type ServiceEvent.",
            "schema": {
              "$ref": "#/definitions/ServiceEventList"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/EventsStore/Partitions/{partitionId}/$/Events": {
      "get": {
        "summary": "Gets a Partition-related events.",
        "description": "The response is list of PartitionEvent objects.",
        "operationId": "GetPartitionEventList",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-2-Preview_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/PartitionIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/StartTimeUtcRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/EndTimeUtcRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/EventsTypesFilterOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/ExcludeAnalysisEventsOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/SkipCorrelationLookupOptionalQueryParam"
          }
        ],
        "tags": [
          "EventsStore"
        ],
        "x-ms-examples": {
          "Get Partition-related events": {
            "$ref": "./examples/GetPartitionEventList.json"
          }
        },
        "responses": {
          "200": {
            "description": "List of events objects with base type PartitionEvent.",
            "schema": {
              "$ref": "#/definitions/PartitionEventList"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/EventsStore/Partitions/Events": {
      "get": {
        "summary": "Gets all Partitions-related events.",
        "description": "The response is list of PartitionEvent objects.",
        "operationId": "GetPartitionsEventList",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-2-Preview_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/StartTimeUtcRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/EndTimeUtcRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/EventsTypesFilterOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/ExcludeAnalysisEventsOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/SkipCorrelationLookupOptionalQueryParam"
          }
        ],
        "tags": [
          "EventsStore"
        ],
        "x-ms-examples": {
          "Get Partitions-related events": {
            "$ref": "./examples/GetPartitionsEventList.json"
          }
        },
        "responses": {
          "200": {
            "description": "List of events objects with base type PartitionEvent.",
            "schema": {
              "$ref": "#/definitions/PartitionEventList"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/EventsStore/Partitions/{partitionId}/$/Replicas/{replicaId}/$/Events": {
      "get": {
        "summary": "Gets a Partition Replica-related events.",
        "description": "The response is list of ReplicaEvent objects.",
        "operationId": "GetPartitionReplicaEventList",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-2-Preview_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/PartitionIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ReplicaIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/StartTimeUtcRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/EndTimeUtcRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/EventsTypesFilterOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/ExcludeAnalysisEventsOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/SkipCorrelationLookupOptionalQueryParam"
          }
        ],
        "tags": [
          "EventsStore"
        ],
        "x-ms-examples": {
          "Get Partition Replica-related events": {
            "$ref": "./examples/GetReplicaEventList.json"
          }
        },
        "responses": {
          "200": {
            "description": "List of events objects with base type ReplicaEvent.",
            "schema": {
              "$ref": "#/definitions/ReplicaEventList"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/EventsStore/Partitions/{partitionId}/$/Replicas/Events": {
      "get": {
        "summary": "Gets all Replicas-related events for a Partition.",
        "description": "The response is list of ReplicaEvent objects.",
        "operationId": "GetPartitionReplicasEventList",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-2-Preview_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/PartitionIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/StartTimeUtcRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/EndTimeUtcRequiredQueryParam"
          },
          {
            "$ref": "#/parameters/EventsTypesFilterOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/ExcludeAnalysisEventsOptionalQueryParam"
          },
          {
            "$ref": "#/parameters/SkipCorrelationLookupOptionalQueryParam"
          }
        ],
        "tags": [
          "EventsStore"
        ],
        "x-ms-examples": {
          "Get Partition Replicas-related events": {
            "$ref": "./examples/GetReplicasEventList.json"
          }
        },
        "responses": {
          "200": {
            "description": "List of events objects with base type ReplicaEvent.",
            "schema": {
              "$ref": "#/definitions/ReplicaEventList"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/EventsStore/CorrelatedEvents/{eventInstanceId}/$/Events": {
      "get": {
        "summary": "Gets all correlated events for a given event.",
        "description": "The response is list of FabricEvents.",
        "operationId": "GetCorrelatedEventList",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-2-Preview_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/EventInstanceIdRequiredPathParam"
          },
          {
            "$ref": "#/parameters/TimeoutOptionalQueryParam"
          }
        ],
        "tags": [
          "EventsStore"
        ],
        "x-ms-examples": {
          "Get Correlated events": {
            "$ref": "./examples/GetCorrelatedEventList.json"
          }
        },
        "responses": {
          "200": {
            "description": "List of events objects with base type FabricEvent.",
            "schema": {
              "$ref": "#/definitions/EventList"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Resources/Applications/{applicationResourceName}": {
      "put": {
        "operationId": "CreateApplicationResource",
        "x-ms-examples": {
          "CreateOrUpdateApplicationResource": {
            "$ref": "./examples/Resource/CreateOrUpdateApplicationResource.json"
          }
        },
        "summary": "Creates or updates an application resource.",
        "description": "Creates an application with the specified name and description. If an application with the same name already exists, then its description are updated to the one indicated in this request.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-3-Preview_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ApplicationResourceNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ApplicationResourceDescriptionRequiredBodyParam"
          }
        ],
        "tags": [
          "ApplicationResource"
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "202": {
            "description": "Accepted"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      },
      "get": {
        "operationId": "GetApplicationResource",
        "x-ms-examples": {
          "GetApplicationResource": {
            "$ref": "./examples/Resource/GetApplicationResource.json"
          }
        },
        "summary": "Gets the application with the given name.",
        "description": "Gets the application with the given name. This includes the information about the application's services and other runtime information.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-3-Preview_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ApplicationResourceNameRequiredPathParam"
          }
        ],
        "tags": [
          "ApplicationResource"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApplicationResourceDescription"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteApplicationResource",
        "x-ms-examples": {
          "DeleteApplicationResource": {
            "$ref": "./examples/Resource/DeleteApplicationResource.json"
          }
        },
        "summary": "Deletes the specified application.",
        "description": "Deletes the application identified by the name.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-3-Preview_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ApplicationResourceNameRequiredPathParam"
          }
        ],
        "tags": [
          "ApplicationResource"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "202": {
            "description": "Accepted"
          },
          "204": {
            "description": "No Content - the specified application was not found."
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    },
    "/Resources/Applications/{applicationResourceName}/Services": {
      "get": {
        "operationId": "GetServices",
        "x-ms-examples": {
          "GetServices": {
            "$ref": "./examples/Resource/GetServices.json"
          }
        },
        "summary": "Gets all the services in the application resource.",
        "description": "The operation returns the service descriptions of all the services in the application resource. ",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-3-Preview_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ApplicationResourceNameRequiredPathParam"
          }
        ],
        "tags": [
          "ApplicationResource"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedServiceResourceDescriptionList"
            }
          }
        }
      }
    },
    "/Resources/Applications/{applicationResourceName}/Services/{serviceResourceName}": {
      "get": {
        "operationId": "GetService",
        "x-ms-examples": {
          "GetService": {
            "$ref": "./examples/Resource/GetService.json"
          }
        },
        "summary": "Gets the description of the specified service in an application resource.",
        "description": "Gets the description of the service resource.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-3-Preview_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ApplicationResourceNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ServiceResourceNameRequiredPathParam"
          }
        ],
        "tags": [
          "ApplicationResource"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ServiceResourceDescription"
            }
          }
        }
      }
    },
    "/Resources/Applications/{applicationResourceName}/Services/{serviceResourceName}/replicas": {
      "get": {
        "operationId": "GetReplicas",
        "x-ms-examples": {
          "GetReplicas": {
            "$ref": "./examples/Resource/GetReplicas.json"
          }
        },
        "summary": "Gets replicas of a given service in an applciation resource.",
        "description": "Gets the information about all replicas of a given service of an application. The information includes the runtime properties of the replica instance.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-3-Preview_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ApplicationResourceNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ServiceResourceNameRequiredPathParam"
          }
        ],
        "tags": [
          "ApplicationResource"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedServiceResourceReplicaDescriptionList"
            }
          }
        }
      }
    },
    "/Resources/Applications/{applicationResourceName}/Services/{serviceResourceName}/Replicas/{replicaName}": {
      "get": {
        "operationId": "GetReplica",
        "x-ms-examples": {
          "GetReplica": {
            "$ref": "./examples/Resource/GetReplica.json"
          }
        },
        "summary": "Gets a specific replica of a given service in an application resource.",
        "description": "Gets the information about the specified replica of a given service of an application. The information includes the runtime properties of the replica instance.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-3-Preview_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/ApplicationResourceNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ServiceResourceNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/ReplicaNameRequiredPathParam"
          }
        ],
        "tags": [
          "ApplicationResource"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ServiceResourceReplicaDescription"
            }
          }
        }
      }
    },
    "/Resources/Volumes/{volumeResourceName}": {
      "put": {
        "operationId": "CreateVolumeResource",
        "x-ms-examples": {
          "CreateOrUpdateVolumeResource": {
            "$ref": "./examples/Resource/CreateOrUpdateVolumeResource.json"
          }
        },
        "summary": "Creates or updates a volume resource.",
        "description": "Creates a volume resource with the specified name and description. If a volume with the same name already exists, then its description is updated to the one indicated in this request.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-3-Preview_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/VolumeResourceNameRequiredPathParam"
          },
          {
            "$ref": "#/parameters/VolumeResourceDescriptionRequiredBodyParam"
          }
        ],
        "tags": [
          "VolumeResource"
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "202": {
            "description": "Accepted"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      },
      "get": {
        "operationId": "GetVolumeResource",
        "x-ms-examples": {
          "GetVolumeResource": {
            "$ref": "./examples/Resource/GetVolumeResource.json"
          }
        },
        "summary": "Gets the volume resource.",
        "description": "Gets the information about the volume resource with a given name. This information includes the volume description and other runtime information.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-3-Preview_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/VolumeResourceNameRequiredPathParam"
          }
        ],
        "tags": [
          "VolumeResource"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VolumeResourceDescription"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteVolumeResource",
        "x-ms-examples": {
          "DeleteVolumeResource": {
            "$ref": "./examples/Resource/DeleteVolumeResource.json"
          }
        },
        "summary": "Deletes the volume resource.",
        "description": "Deletes the volume identified by the name.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion_6-3-Preview_RequiredQueryParam"
          },
          {
            "$ref": "#/parameters/VolumeResourceNameRequiredPathParam"
          }
        ],
        "tags": [
          "VolumeResource"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "202": {
            "description": "Accepted"
          },
          "204": {
            "description": "No Content - the specified volume was not found."
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/FabricError"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AadMetadata": {
      "type": "object",
      "description": "Azure Active Directory metadata used for secured connection to cluster.",
      "properties": {
        "authority": {
          "type": "string",
          "description": "The AAD authority url."
        },
        "client": {
          "type": "string",
          "description": "The AAD client application Id."
        },
        "cluster": {
          "type": "string",
          "description": "The AAD cluster application Id."
        },
        "login": {
          "type": "string",
          "description": "The AAD login url."
        },
        "redirect": {
          "type": "string",
          "description": "The client application redirect address."
        },
        "tenant": {
          "type": "string",
          "description": "The AAD tenant Id."
        }
      }
    },
    "AadMetadataObject": {
      "type": "object",
      "description": "Azure Active Directory metadata object used for secured connection to cluster.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The client authentication method."
        },
        "metadata": {
          "$ref": "#/definitions/AadMetadata",
          "description": "Azure Active Directory metadata used for secured connection to cluster."
        }
      }
    },
    "AnalysisEventMetadata": {
      "type": "object",
      "description": "Metadata about an Analysis Event.",
      "properties": {
        "Delay": {
          "type": "string",
          "format": "duration",
          "description": "The analysis delay."
        },
        "Duration": {
          "type": "string",
          "format": "duration",
          "description": "The duration of analysis."
        }
      }
    },
    "ApplicationDefinitionKind": {
      "type": "string",
      "description": "The mechanism used to define a Service Fabric application.",
      "enum": [
        "Invalid",
        "ServiceFabricApplicationDescription",
        "Compose"
      ],
      "x-ms-enum": {
        "name": "ApplicationDefinitionKind",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Indicates the application definition kind is invalid. All Service Fabric enumerations have the invalid type. The value is 65535."
          },
          {
            "value": "ServiceFabricApplicationDescription",
            "description": "Indicates the application is defined by a Service Fabric application description. The value is 0."
          },
          {
            "value": "Compose",
            "description": "Indicates the application is defined by compose file(s). The value is 1."
          }
        ]
      }
    },
    "ApplicationEvent": {
      "description": "Represents the base for all Application Events.",
      "allOf": [
        {
          "$ref": "#/definitions/FabricEvent"
        },
        {
          "type": "object",
          "description": "ApplicationEvent",
          "properties": {
            "ApplicationId": {
              "$ref": "#/definitions/ApplicationId",
              "description": "The identity of the application. This is an encoded representation of the application name. This is used in the REST APIs to identify the application resource.\nStarting in version 6.0, hierarchical names are delimited with the \"\\~\" character. For example, if the application name is \"fabric:/myapp/app1\",\nthe application identity would be \"myapp\\~app1\" in 6.0+ and \"myapp/app1\" in previous versions."
            }
          },
          "required": [
            "ApplicationId"
          ]
        }
      ],
      "x-ms-discriminator-value": "ApplicationEvent"
    },
    "ApplicationEventList": {
      "description": "A list of ApplicationEvent objects.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/ApplicationEvent"
      }
    },
    "ApplicationHealth": {
      "description": "Represents the health of the application. Contains the application aggregated health state and the service and deployed application health states.",
      "allOf": [
        {
          "$ref": "#/definitions/EntityHealth"
        },
        {
          "type": "object",
          "description": "ApplicationHealth",
          "properties": {
            "Name": {
              "$ref": "#/definitions/ApplicationName",
              "description": "The name of the application, including the 'fabric:' URI scheme."
            },
            "ServiceHealthStates": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServiceHealthState"
              },
              "description": "Service health states as found in the health store."
            },
            "DeployedApplicationHealthStates": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeployedApplicationHealthState"
              },
              "description": "Deployed application health states as found in the health store."
            }
          }
        }
      ]
    },
    "ApplicationHealthEvaluation": {
      "x-ms-discriminator-value": "Application",
      "description": "Represents health evaluation for an application, containing information about the data and the algorithm used by the health store to evaluate health.",
      "allOf": [
        {
          "$ref": "#/definitions/HealthEvaluation"
        },
        {
          "type": "object",
          "description": "ApplicationHealthEvaluation",
          "properties": {
            "ApplicationName": {
              "$ref": "#/definitions/ApplicationName",
              "description": "The name of the application, including the 'fabric:' URI scheme."
            },
            "UnhealthyEvaluations": {
              "$ref": "#/definitions/UnhealthyEvaluations",
              "description": "List of unhealthy evaluations that led to the current aggregated health state of the application. The types of the unhealthy evaluations can be DeployedApplicationsHealthEvaluation, ServicesHealthEvaluation or EventHealthEvaluation."
            }
          }
        }
      ]
    },
    "ApplicationHealthPolicies": {
      "type": "object",
      "description": "Defines the application health policy map used to evaluate the health of an application or one of its children entities.",
      "properties": {
        "ApplicationHealthPolicyMap": {
          "$ref": "#/definitions/ApplicationHealthPolicyMap",
          "description": "The wrapper that contains the map with application health policies used to evaluate specific applications in the cluster."
        }
      }
    },
    "ApplicationHealthPolicy": {
      "type": "object",
      "description": "Defines a health policy used to evaluate the health of an application or one of its children entities.",
      "properties": {
        "ConsiderWarningAsError": {
          "type": "boolean",
          "description": "Indicates whether warnings are treated with the same severity as errors.",
          "default": false
        },
        "MaxPercentUnhealthyDeployedApplications": {
          "type": "integer",
          "description": "The maximum allowed percentage of unhealthy deployed applications. Allowed values are Byte values from zero to 100.\nThe percentage represents the maximum tolerated percentage of deployed applications that can be unhealthy before the application is considered in error.\nThis is calculated by dividing the number of unhealthy deployed applications over the number of nodes where the application is currently deployed on in the cluster.\nThe computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.",
          "default": 0
        },
        "DefaultServiceTypeHealthPolicy": {
          "$ref": "#/definitions/ServiceTypeHealthPolicy",
          "description": "The health policy used by default to evaluate the health of a service type."
        },
        "ServiceTypeHealthPolicyMap": {
          "$ref": "#/definitions/ServiceTypeHealthPolicyMap",
          "description": "The map with service type health policy per service type name. The map is empty by default."
        }
      }
    },
    "ApplicationHealthPolicyMap": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ApplicationHealthPolicyMapItem"
      },
      "description": "Defines a map that contains specific application health policies for different applications.\nEach entry specifies as key the application name and as value an ApplicationHealthPolicy used to evaluate the application health.\nIf an application is not specified in the map, the application health evaluation uses the ApplicationHealthPolicy found in its application manifest or the default application health policy (if no health policy is defined in the manifest).\nThe map is empty by default."
    },
    "ApplicationHealthPolicyMapItem": {
      "type": "object",
      "description": "Defines an item in ApplicationHealthPolicyMap.",
      "required": [
        "Key",
        "Value"
      ],
      "properties": {
        "Key": {
          "$ref": "#/definitions/ApplicationName",
          "description": "The key of the application health policy map item. This is the name of the application."
        },
        "Value": {
          "$ref": "#/definitions/ApplicationHealthPolicy",
          "description": "The value of the application health policy map item. This is the ApplicationHealthPolicy for this application."
        }
      }
    },
    "ApplicationHealthState": {
      "description": "Represents the health state of an application, which contains the application identifier and the aggregated health state.",
      "allOf": [
        {
          "$ref": "#/definitions/EntityHealthState"
        },
        {
          "type": "object",
          "description": "ApplicationHealthState",
          "properties": {
            "Name": {
              "$ref": "#/definitions/ApplicationName",
              "description": "The name of the application, including the 'fabric:' URI scheme."
            }
          }
        }
      ]
    },
    "ApplicationHealthStateChunk": {
      "description": "Represents the health state chunk of a application.\nThe application health state chunk contains the application name, its aggregated health state and any children services and deployed applications that respect the filters in cluster health chunk query description.",
      "allOf": [
        {
          "$ref": "#/definitions/EntityHealthStateChunk"
        },
        {
          "type": "object",
          "description": "ApplicationHealthStateChunk",
          "properties": {
            "ApplicationName": {
              "$ref": "#/definitions/ApplicationName",
              "description": "The name of the application, including the 'fabric:' URI scheme."
            },
            "ApplicationTypeName": {
              "$ref": "#/definitions/ApplicationTypeName",
              "description": "The application type name as defined in the application manifest."
            },
            "ServiceHealthStateChunks": {
              "$ref": "#/definitions/ServiceHealthStateChunkList",
              "description": "The list of service health state chunks in the cluster that respect the filters in the cluster health chunk query description."
            },
            "DeployedApplicationHealthStateChunks": {
              "$ref": "#/definitions/DeployedApplicationHealthStateChunkList",
              "description": "The list of deployed application health state chunks in the cluster that respect the filters in the cluster health chunk query description."
            }
          }
        }
      ]
    },
    "ApplicationHealthStateChunkList": {
      "type": "object",
      "description": "The list of application health state chunks in the cluster that respect the input filters in the chunk query. Returned by get cluster health state chunks query.",
      "allOf": [
        {
          "$ref": "#/definitions/EntityHealthStateChunkList"
        },
        {
          "type": "object",
          "description": "ApplicationHealthStateChunkList",
          "properties": {
            "Items": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ApplicationHealthStateChunk"
              },
              "description": "The list of application health state chunks that respect the input filters in the chunk query."
            }
          }
        }
      ]
    },
    "ApplicationHealthStateFilter": {
      "type": "object",
      "description": "Defines matching criteria to determine whether a application should be included in the cluster health chunk.\nOne filter can match zero, one or multiple applications, depending on its properties.",
      "properties": {
        "ApplicationNameFilter": {
          "type": "string",
          "description": "The name of the application that matches the filter, as a fabric uri. The filter is applied only to the specified application, if it exists.\nIf the application doesn't exist, no application is returned in the cluster health chunk based on this filter.\nIf the application exists, it is included in the cluster health chunk if it respects the other filter properties.\nIf not specified, all applications are matched against the other filter members, like health state filter."
        },
        "ApplicationTypeNameFilter": {
          "type": "string",
          "description": "The name of the application type that matches the filter.\nIf specified, the filter is applied only to applications of the selected application type, if any exists.\nIf no applications of the specified application type exists, no application is returned in the cluster health chunk based on this filter.\nEach application of the specified application type is included in the cluster health chunk if it respects the other filter properties.\nIf not specified, all applications are matched against the other filter members, like health state filter."
        },
        "HealthStateFilter": {
          "type": "integer",
          "default": 0,
          "description": "The filter for the health state of the applications. It allows selecting applications if they match the desired health states.\nThe possible values are integer value of one of the following health states. Only applications that match the filter are returned. All applications are used to evaluate the cluster aggregated health state.\nIf not specified, default value is None, unless the application name or the application type name are specified. If the filter has default value and application name is specified, the matching application is returned.\nThe state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.\nFor example, if the provided value is 6, it matches applications with HealthState value of OK (2) and Warning (4).\n\n- Default - Default value. Matches any HealthState. The value is zero.\n- None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.\n- Ok - Filter that matches input with HealthState value Ok. The value is 2.\n- Warning - Filter that matches input with HealthState value Warning. The value is 4.\n- Error - Filter that matches input with HealthState value Error. The value is 8.\n- All - Filter that matches input with any HealthState value. The value is 65535."
        },
        "ServiceFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceHealthStateFilter"
          },
          "description": "Defines a list of filters that specify which services to be included in the returned cluster health chunk as children of the application. The services are returned only if the parent application matches a filter.\nIf the list is empty, no services are returned. All the services are used to evaluate the parent application aggregated health state, regardless of the input filters.\nThe application filter may specify multiple service filters.\nFor example, it can specify a filter to return all services with health state Error and another filter to always include a service identified by its service name."
        },
        "DeployedApplicationFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeployedApplicationHealthStateFilter"
          },
          "description": "Defines a list of filters that specify which deployed applications to be included in the returned cluster health chunk as children of the application. The deployed applications are returned only if the parent application matches a filter.\nIf the list is empty, no deployed applications are returned. All the deployed applications are used to evaluate the parent application aggregated health state, regardless of the input filters.\nThe application filter may specify multiple deployed application filters.\nFor example, it can specify a filter to return all deployed applications with health state Error and another filter to always include a deployed application on a specified node."
        }
      }
    },
    "ApplicationId": {
      "type": "string",
      "description": "The identity of the application. This is an encoded representation of the application name. This is used in the REST APIs to identify the application resource.\nStarting in version 6.0, hierarchical names are delimited with the \"\\~\" character. For example, if the application name is \"fabric:/myapp/app1\",\nthe application identity would be \"myapp\\~app1\" in 6.0+ and \"myapp/app1\" in previous versions."
    },
    "ApplicationInfo": {
      "type": "object",
      "description": "Information about a Service Fabric application.",
      "properties": {
        "Id": {
          "$ref": "#/definitions/ApplicationId",
          "description": "The identity of the application. This is an encoded representation of the application name. This is used in the REST APIs to identify the application resource.\nStarting in version 6.0, hierarchical names are delimited with the \"\\~\" character. For example, if the application name is \"fabric:/myapp/app1\",\nthe application identity would be \"myapp\\~app1\" in 6.0+ and \"myapp/app1\" in previous versions."
        },
        "Name": {
          "$ref": "#/definitions/ApplicationName",
          "description": "The name of the application, including the 'fabric:' URI scheme."
        },
        "TypeName": {
          "$ref": "#/definitions/ApplicationTypeName",
          "description": "The application type name as defined in the application manifest."
        },
        "TypeVersion": {
          "$ref": "#/definitions/ApplicationTypeVersion",
          "description": "The version of the application type as defined in the application manifest."
        },
        "Status": {
          "$ref": "#/definitions/ApplicationStatus",
          "description": "The status of the application."
        },
        "Parameters": {
          "$ref": "#/definitions/ApplicationParameterList",
          "description": "List of application parameters with overridden values from their default values specified in the application manifest."
        },
        "HealthState": {
          "$ref": "#/definitions/HealthState",
          "description": "The health state of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica etc."
        },
        "ApplicationDefinitionKind": {
          "$ref": "#/definitions/ApplicationDefinitionKind",
          "description": "The mechanism used to define a Service Fabric application."
        }
      }
    },
    "ApplicationLoadInfo": {
      "type": "object",
      "description": "Load Information about a Service Fabric application.",
      "properties": {
        "Id": {
          "$ref": "#/definitions/ApplicationId",
          "description": "The identity of the application. This is an encoded representation of the application name. This is used in the REST APIs to identify the application resource.\nStarting in version 6.0, hierarchical names are delimited with the \"\\~\" character. For example, if the application name is \"fabric:/myapp/app1\",\nthe application identity would be \"myapp\\~app1\" in 6.0+ and \"myapp/app1\" in previous versions."
        },
        "MinimumNodes": {
          "type": "integer",
          "format": "int64",
          "description": "The minimum number of nodes for this application.\nIt is the number of nodes where Service Fabric will reserve Capacity in the cluster which equals to ReservedLoad * MinimumNodes for this Application instance.\nFor applications that do not have application capacity defined this value will be zero."
        },
        "MaximumNodes": {
          "type": "integer",
          "format": "int64",
          "description": "The maximum number of nodes where this application can be instantiated.\nIt is the number of nodes this application is allowed to span.\nFor applications that do not have application capacity defined this value will be zero."
        },
        "NodeCount": {
          "type": "integer",
          "format": "int64",
          "description": "The number of nodes on which this application is instantiated.\nFor applications that do not have application capacity defined this value will be zero."
        },
        "ApplicationLoadMetricInformation": {
          "$ref": "#/definitions/ApplicationMetricDescriptionList",
          "description": "List of application capacity metric description."
        }
      }
    },
    "ApplicationName": {
      "type": "string",
      "description": "The name of the application, including the 'fabric:' URI scheme."
    },
    "ApplicationNameInfo": {
      "type": "object",
      "description": "Information about the application name.",
      "properties": {
        "Id": {
          "$ref": "#/definitions/ApplicationId",
          "description": "The identity of the application. This is an encoded representation of the application name. This is used in the REST APIs to identify the application resource.\nStarting in version 6.0, hierarchical names are delimited with the \"\\~\" character. For example, if the application name is \"fabric:/myapp/app1\",\nthe application identity would be \"myapp\\~app1\" in 6.0+ and \"myapp/app1\" in previous versions."
        },
        "Name": {
          "$ref": "#/definitions/ApplicationName",
          "description": "The name of the application, including the 'fabric:' URI scheme."
        }
      }
    },
    "ApplicationPackageCleanupPolicy": {
      "type": "string",
      "description": "The kind of action that needs to be taken for cleaning up the application package after successful provision.",
      "enum": [
        "Invalid",
        "Default",
        "Automatic",
        "Manual"
      ],
      "x-ms-enum": {
        "name": "ApplicationPackageCleanupPolicy",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Indicates that the application package cleanup policy is invalid. This value is default. The value is zero."
          },
          {
            "value": "Default",
            "description": "Indicates that the cleanup policy of application packages is based on the cluster setting \"CleanupApplicationPackageOnProvisionSuccess.\" The value is 1."
          },
          {
            "value": "Automatic",
            "description": "Indicates that the service fabric runtime determines when to do the application package cleanup. By default, cleanup is done on successful provision. The value is 2."
          },
          {
            "value": "Manual",
            "description": "Indicates that the user has to explicitly clean up the application package. The value is 3."
          }
        ]
      }
    },
    "ApplicationParameter": {
      "type": "object",
      "description": "Describes an application parameter override to be applied when creating or upgrading an application.",
      "required": [
        "Key",
        "Value"
      ],
      "properties": {
        "Key": {
          "type": "string",
          "description": "The name of the parameter."
        },
        "Value": {
          "type": "string",
          "description": "The value of the parameter."
        }
      }
    },
    "ApplicationParameterList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ApplicationParameter"
      },
      "description": "List of application parameters with overridden values from their default values specified in the application manifest."
    },
    "ApplicationsHealthEvaluation": {
      "x-ms-discriminator-value": "Applications",
      "description": "Represents health evaluation for applications, containing health evaluations for each unhealthy application that impacted current aggregated health state.",
      "allOf": [
        {
          "$ref": "#/definitions/HealthEvaluation"
        },
        {
          "type": "object",
          "description": "ApplicationsHealthEvaluation",
          "properties": {
            "MaxPercentUnhealthyApplications": {
              "type": "integer",
              "description": "Maximum allowed percentage of unhealthy applications from the ClusterHealthPolicy."
            },
            "TotalCount": {
              "type": "integer",
              "format": "int64",
              "description": "Total number of applications from the health store."
            },
            "UnhealthyEvaluations": {
              "$ref": "#/definitions/UnhealthyEvaluations",
              "description": "List of unhealthy evaluations that led to the aggregated health state. Includes all the unhealthy ApplicationHealthEvaluation that impacted the aggregated health."
            }
          }
        }
      ]
    },
    "ApplicationStatus": {
      "type": "string",
      "description": "The status of the application.",
      "enum": [
        "Invalid",
        "Ready",
        "Upgrading",
        "Creating",
        "Deleting",
        "Failed"
      ],
      "x-ms-enum": {
        "name": "ApplicationStatus",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Indicates the application status is invalid. All Service Fabric enumerations have the invalid type. The value is zero."
          },
          {
            "value": "Ready",
            "description": "Indicates the application status is ready. The value is 1."
          },
          {
            "value": "Upgrading",
            "description": "Indicates the application status is upgrading. The value is 2."
          },
          {
            "value": "Creating",
            "description": "Indicates the application status is creating. The value is 3."
          },
          {
            "value": "Deleting",
            "description": "Indicates the application status is deleting. The value is 4."
          },
          {
            "value": "Failed",
            "description": "Indicates the creation or deletion of application was terminated due to persistent failures. Another create/delete request can be accepted to resume a failed application. The value is 5."
          }
        ]
      }
    },
    "ApplicationTypeApplicationsHealthEvaluation": {
      "x-ms-discriminator-value": "ApplicationTypeApplications",
      "description": "Represents health evaluation for applications of a particular application type. The application type applications evaluation can be returned when cluster health evaluation returns unhealthy aggregated health state, either Error or Warning. It contains health evaluations for each unhealthy application of the included application type that impacted current aggregated health state.",
      "allOf": [
        {
          "$ref": "#/definitions/HealthEvaluation"
        },
        {
          "type": "object",
          "description": "ApplicationTypeApplicationsHealthEvaluation",
          "properties": {
            "ApplicationTypeName": {
              "$ref": "#/definitions/ApplicationTypeName",
              "description": "The application type name as defined in the application manifest."
            },
            "MaxPercentUnhealthyApplications": {
              "type": "integer",
              "description": "Maximum allowed percentage of unhealthy applications for the application type, specified as an entry in ApplicationTypeHealthPolicyMap."
            },
            "TotalCount": {
              "type": "integer",
              "format": "int64",
              "description": "Total number of applications of the application type found in the health store."
            },
            "UnhealthyEvaluations": {
              "$ref": "#/definitions/UnhealthyEvaluations",
              "description": "List of unhealthy evaluations that led to the aggregated health state. Includes all the unhealthy ApplicationHealthEvaluation of this application type that impacted the aggregated health."
            }
          }
        }
      ]
    },
    "ApplicationTypeDefinitionKind": {
      "type": "string",
      "description": "The mechanism used to define a Service Fabric application type.",
      "enum": [
        "Invalid",
        "ServiceFabricApplicationPackage",
        "Compose"
      ],
      "x-ms-enum": {
        "name": "ApplicationTypeDefinitionKind",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Indicates the application type definition kind is invalid. All Service Fabric enumerations have the invalid type. The value is 0."
          },
          {
            "value": "ServiceFabricApplicationPackage",
            "description": "Indicates the application type is defined and created by a Service Fabric application package provided by the user. The value is 1."
          },
          {
            "value": "Compose",
            "description": "Indicates the application type is defined and created implicitly as part of a compose deployment. The value is 2."
          }
        ]
      }
    },
    "ApplicationTypeHealthPolicyMap": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ApplicationTypeHealthPolicyMapItem"
      },
      "description": "Defines a map with max percentage unhealthy applications for specific application types.\nEach entry specifies as key the application type name and as value an integer that represents the MaxPercentUnhealthyApplications percentage used to evaluate the applications of the specified application type.\n\nThe application type health policy map can be used during cluster health evaluation to describe special application types.\nThe application types included in the map are evaluated against the percentage specified in the map, and not with the global MaxPercentUnhealthyApplications defined in the cluster health policy.\nThe applications of application types specified in the map are not counted against the global pool of applications.\nFor example, if some applications of a type are critical, the cluster administrator can add an entry to the map for that application type\nand assign it a value of 0% (that is, do not tolerate any failures).\nAll other applications can be evaluated with MaxPercentUnhealthyApplications set to 20% to tolerate some failures out of the thousands of application instances.\nThe application type health policy map is used only if the cluster manifest enables application type health evaluation using the configuration entry for HealthManager/EnableApplicationTypeHealthEvaluation."
    },
    "ApplicationTypeHealthPolicyMapItem": {
      "type": "object",
      "description": "Defines an item in ApplicationTypeHealthPolicyMap.",
      "required": [
        "Key",
        "Value"
      ],
      "properties": {
        "Key": {
          "type": "string",
          "description": "The key of the application type health policy map item. This is the name of the application type."
        },
        "Value": {
          "type": "integer",
          "description": "The value of the application type health policy map item.\nThe max percent unhealthy applications allowed for the application type. Must be between zero and 100."
        }
      }
    },
    "ApplicationTypeInfo": {
      "type": "object",
      "description": "Information about an application type.",
      "properties": {
        "Name": {
          "$ref": "#/definitions/ApplicationTypeName",
          "description": "The application type name as defined in the application manifest."
        },
        "Version": {
          "$ref": "#/definitions/ApplicationTypeVersion",
          "description": "The version of the application type as defined in the application manifest."
        },
        "DefaultParameterList": {
          "$ref": "#/definitions/ApplicationTypeParameterList",
          "description": "List of application type parameters that can be overridden when creating or updating the application."
        },
        "Status": {
          "$ref": "#/definitions/ApplicationTypeStatus",
          "description": "The status of the application type."
        },
        "StatusDetails": {
          "type": "string",
          "description": "Additional detailed information about the status of the application type."
        },
        "ApplicationTypeDefinitionKind": {
          "$ref": "#/definitions/ApplicationTypeDefinitionKind",
          "description": "The mechanism used to define a Service Fabric application type."
        }
      }
    },
    "PagedApplicationTypeInfoList": {
      "type": "object",
      "description": "The list of application types that are provisioned or being provisioned in the cluster. The list is paged when all of the results cannot fit in a single message. The next set of results can be obtained by executing the same query with the continuation token provided in this list.",
      "properties": {
        "ContinuationToken": {
          "$ref": "#/definitions/ContinuationToken",
          "description": "The continuation token parameter is used to obtain next set of results. The continuation token is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token is not included in the response."
        },
        "Items": {
          "type": "array",
          "description": "List of application type information.",
          "items": {
            "$ref": "#/definitions/ApplicationTypeInfo"
          }
        }
      }
    },
    "ApplicationTypeManifest": {
      "type": "object",
      "description": "Contains the manifest describing an application type registered in a Service Fabric cluster.",
      "properties": {
        "Manifest": {
          "type": "string",
          "description": "The XML manifest as a string."
        }
      }
    },
    "ApplicationTypeName": {
      "type": "string",
      "description": "The application type name as defined in the application manifest."
    },
    "ApplicationTypeParameterList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ApplicationParameter"
      },
      "description": "List of application type parameters that can be overridden when creating or updating the application."
    },
    "ApplicationTypeStatus": {
      "type": "string",
      "description": "The status of the application type.",
      "enum": [
        "Invalid",
        "Provisioning",
        "Available",
        "Unprovisioning",
        "Failed"
      ],
      "x-ms-enum": {
        "name": "ApplicationTypeStatus",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Indicates the application type status is invalid. All Service Fabric enumerations have the invalid type. The value is zero."
          },
          {
            "value": "Provisioning",
            "description": "Indicates that the application type is being provisioned in the cluster. The value is 1."
          },
          {
            "value": "Available",
            "description": "Indicates that the application type is fully provisioned and is available for use. An application of this type and version can be created. The value is 2."
          },
          {
            "value": "Unprovisioning",
            "description": "Indicates that the application type is in process of being unprovisioned from the cluster. The value is 3."
          },
          {
            "value": "Failed",
            "description": "Indicates that the application type provisioning failed and it is unavailable for use. The failure details can be obtained from the application type information query. The failed application type information remains in the cluster until it is unprovisioned or reprovisioned successfully. The value is 4."
          }
        ]
      }
    },
    "ApplicationUnhealthyEvaluations": {
      "description": "List of health evaluations that resulted in the current aggregated health state.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/HealthEvaluationWrapper"
      }
    },
    "ApplicationUpgradeDescription": {
      "type": "object",
      "description": "Describes the parameters for an application upgrade. Note that upgrade description replaces the existing application description. This means that if the parameters are not specified, the existing parameters on the applications will be overwritten with the empty parameters list. This would result in the application using the default value of the parameters from the application manifest. If you do not want to change any existing parameter values, please get the application parameters first using the GetApplicationInfo query and then supply those values as Parameters in this ApplicationUpgradeDescription.",
      "properties": {
        "Name": {
          "$ref": "#/definitions/TargetApplicationName",
          "description": "The name of the target application, including the 'fabric:' URI scheme."
        },
        "TargetApplicationTypeVersion": {
          "$ref": "#/definitions/TargetApplicationTypeVersion",
          "description": "The target application type version (found in the application manifest) for the application upgrade."
        },
        "Parameters": {
          "$ref": "#/definitions/ApplicationParameterList",
          "description": "List of application parameters with overridden values from their default values specified in the application manifest."
        },
        "UpgradeKind": {
          "$ref": "#/definitions/UpgradeKind",
          "description": "The kind of upgrade out of the following possible values."
        },
        "RollingUpgradeMode": {
          "$ref": "#/definitions/UpgradeMode",
          "description": "The mode used to monitor health during a rolling upgrade. The values are UnmonitoredAuto, UnmonitoredManual, and Monitored."
        },
        "UpgradeReplicaSetCheckTimeoutInSeconds": {
          "$ref": "#/definitions/UpgradeReplicaSetCheckTimeout",
          "description": "The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer)."
        },
        "ForceRestart": {
          "$ref": "#/definitions/ForceRestart",
          "description": "If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data)."
        },
        "MonitoringPolicy": {
          "$ref": "#/definitions/MonitoringPolicyDescription",
          "description": "Describes the parameters for monitoring an upgrade in Monitored mode."
        },
        "ApplicationHealthPolicy": {
          "$ref": "#/definitions/ApplicationHealthPolicy",
          "description": "Defines a health policy used to evaluate the health of an application or one of its children entities."
        }
      },
      "required": [
        "Name",
        "TargetApplicationTypeVersion",
        "UpgradeKind",
        "Parameters"
      ]
    },
    "ApplicationUpgradeProgressInfo": {
      "type": "object",
      "description": "Describes the parameters for an application upgrade.",
      "properties": {
        "Name": {
          "$ref": "#/definitions/TargetApplicationName",
          "description": "The name of the target application, including the 'fabric:' URI scheme."
        },
        "TypeName": {
          "$ref": "#/definitions/ApplicationTypeName",
          "description": "The application type name as defined in the application manifest."
        },
        "TargetApplicationTypeVersion": {
          "$ref": "#/definitions/TargetApplicationTypeVersion",
          "description": "The target application type version (found in the application manifest) for the application upgrade."
        },
        "UpgradeDomains": {
          "$ref": "#/definitions/UpgradeDomainInfoList",
          "description": "List of upgrade domains and their statuses."
        },
        "UpgradeState": {
          "$ref": "#/definitions/UpgradeState",
          "description": "The state of the upgrade domain."
        },
        "NextUpgradeDomain": {
          "$ref": "#/definitions/NextUpgradeDomain",
          "description": "The name of the next upgrade domain to be processed."
        },
        "RollingUpgradeMode": {
          "$ref": "#/definitions/UpgradeMode",
          "description": "The mode used to monitor health during a rolling upgrade. The values are UnmonitoredAuto, UnmonitoredManual, and Monitored."
        },
        "UpgradeDescription": {
          "$ref": "#/definitions/ApplicationUpgradeDescription",
          "description": "Describes the parameters for an application upgrade. Note that upgrade description replaces the existing application description. This means that if the parameters are not specified, the existing parameters on the applications will be overwritten with the empty parameters list. This would result in the application using the default value of the parameters from the application manifest. If you do not want to change any existing parameter values, please get the application parameters first using the GetApplicationInfo query and then supply those values as Parameters in this ApplicationUpgradeDescription."
        },
        "UpgradeDurationInMilliseconds": {
          "type": "string",
          "description": "The estimated total amount of time spent processing the overall upgrade."
        },
        "UpgradeDomainDurationInMilliseconds": {
          "type": "string",
          "description": "The estimated total amount of time spent processing the current upgrade domain."
        },
        "UnhealthyEvaluations": {
          "$ref": "#/definitions/UnhealthyEvaluations",
          "description": "List of health evaluations that resulted in the current aggregated health state."
        },
        "CurrentUpgradeDomainProgress": {
          "$ref": "#/definitions/CurrentUpgradeDomainProgressInfo",
          "description": "Information about the current in-progress upgrade domain."
        },
        "StartTimestampUtc": {
          "type": "string",
          "description": "The estimated UTC datetime when the upgrade started."
        },
        "FailureTimestampUtc": {
          "type": "string",
          "description": "The estimated UTC datetime when the upgrade failed and FailureAction was executed."
        },
        "FailureReason": {
          "$ref": "#/definitions/FailureReason",
          "description": "The cause of an upgrade failure that resulted in FailureAction being executed."
        },
        "UpgradeDomainProgressAtFailure": {
          "$ref": "#/definitions/FailureUpgradeDomainProgressInfo",
          "description": "Information about the upgrade domain progress at the time of upgrade failure."
        },
        "UpgradeStatusDetails": {
          "type": "string",
          "description": "Additional detailed information about the status of the pending upgrade."
        }
      }
    },
    "ByteArray": {
      "description": "Array of bytes to be sent as an integer array. Each element of array is a number between 0 and 255.",
      "type": "array",
      "items": {
        "type": "integer"
      }
    },
    "ClusterConfiguration": {
      "type": "object",
      "description": "Information about the standalone cluster configuration.",
      "properties": {
        "ClusterConfiguration": {
          "type": "string",
          "description": "The contents of the cluster configuration file."
        }
      }
    },
    "ClusterEvent": {
      "description": "Represents the base for all Cluster Events.",
      "allOf": [
        {
          "$ref": "#/definitions/FabricEvent"
        },
        {
          "type": "object",
          "description": "ClusterEvent"
        }
      ],
      "x-ms-discriminator-value": "ClusterEvent"
    },
    "ClusterEventList": {
      "description": "A list of ClusterEvent objects.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/ClusterEvent"
      }
    },
    "ClusterHealth": {
      "description": "Represents the health of the cluster.\nContains the cluster aggregated health state, the cluster application and node health states as well as the health events and the unhealthy evaluations.",
      "allOf": [
        {
          "$ref": "#/definitions/EntityHealth"
        },
        {
          "type": "object",
          "description": "ClusterHealth",
          "properties": {
            "NodeHealthStates": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NodeHealthState"
              },
              "description": "Cluster node health states as found in the health store."
            },
            "ApplicationHealthStates": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ApplicationHealthState"
              },
              "description": "Cluster application health states as found in the health store."
            }
          }
        }
      ]
    },
    "ClusterHealthChunk": {
      "description": "Represents the health chunk of the cluster.\nContains the cluster aggregated health state, and the cluster entities that respect the input filter.",
      "type": "object",
      "properties": {
        "HealthState": {
          "$ref": "#/definitions/HealthState",
          "description": "The HealthState representing the aggregated health state of the cluster computed by Health Manager.\nThe health evaluation of the entity reflects all events reported on the entity and its children (if any).\nThe aggregation is done by applying the desired cluster health policy and the application health policies."
        },
        "NodeHealthStateChunks": {
          "$ref": "#/definitions/NodeHealthStateChunkList",
          "description": "The list of node health state chunks in the cluster that respect the filters in the cluster health chunk query description."
        },
        "ApplicationHealthStateChunks": {
          "$ref": "#/definitions/ApplicationHealthStateChunkList",
          "description": "The list of application health state chunks in the cluster that respect the filters in the cluster health chunk query description."
        }
      }
    },
    "ClusterHealthChunkQueryDescription": {
      "description": "The cluster health chunk query description, which can specify the health policies to evaluate cluster health and very expressive filters to select which cluster entities to include in response.",
      "properties": {
        "NodeFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NodeHealthStateFilter"
          },
          "description": "Defines a list of filters that specify which nodes to be included in the returned cluster health chunk.\nIf no filters are specified, no nodes are returned. All the nodes are used to evaluate the cluster's aggregated health state, regardless of the input filters.\nThe cluster health chunk query may specify multiple node filters.\nFor example, it can specify a filter to return all nodes with health state Error and another filter to always include a node identified by its NodeName."
        },
        "ApplicationFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApplicationHealthStateFilter"
          },
          "description": "Defines a list of filters that specify which applications to be included in the returned cluster health chunk.\nIf no filters are specified, no applications are returned. All the applications are used to evaluate the cluster's aggregated health state, regardless of the input filters.\nThe cluster health chunk query may specify multiple application filters.\nFor example, it can specify a filter to return all applications with health state Error and another filter to always include applications of a specified application type."
        },
        "ClusterHealthPolicy": {
          "$ref": "#/definitions/ClusterHealthPolicy",
          "description": "Defines a health policy used to evaluate the health of the cluster or of a cluster node."
        },
        "ApplicationHealthPolicies": {
          "$ref": "#/definitions/ApplicationHealthPolicies",
          "description": "Defines the application health policy map used to evaluate the health of an application or one of its children entities."
        }
      }
    },
    "ClusterHealthPolicies": {
      "description": "Health policies to evaluate cluster health.",
      "properties": {
        "ApplicationHealthPolicyMap": {
          "$ref": "#/definitions/ApplicationHealthPolicyMap",
          "description": "Defines a map that contains specific application health policies for different applications.\nEach entry specifies as key the application name and as value an ApplicationHealthPolicy used to evaluate the application health.\nIf an application is not specified in the map, the application health evaluation uses the ApplicationHealthPolicy found in its application manifest or the default application health policy (if no health policy is defined in the manifest).\nThe map is empty by default."
        },
        "ClusterHealthPolicy": {
          "$ref": "#/definitions/ClusterHealthPolicy",
          "description": "Defines a health policy used to evaluate the health of the cluster or of a cluster node."
        }
      }
    },
    "ClusterHealthPolicy": {
      "type": "object",
      "description": "Defines a health policy used to evaluate the health of the cluster or of a cluster node.",
      "properties": {
        "ConsiderWarningAsError": {
          "type": "boolean",
          "description": "Indicates whether warnings are treated with the same severity as errors.",
          "default": false
        },
        "MaxPercentUnhealthyNodes": {
          "type": "integer",
          "description": "The maximum allowed percentage of unhealthy nodes before reporting an error. For example, to allow 10% of nodes to be unhealthy, this value would be 10.\n\nThe percentage represents the maximum tolerated percentage of nodes that can be unhealthy before the cluster is considered in error.\nIf the percentage is respected but there is at least one unhealthy node, the health is evaluated as Warning.\nThe percentage is calculated by dividing the number of unhealthy nodes over the total number of nodes in the cluster.\nThe computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.\n\nIn large clusters, some nodes will always be down or out for repairs, so this percentage should be configured to tolerate that.",
          "default": 0
        },
        "MaxPercentUnhealthyApplications": {
          "type": "integer",
          "description": "The maximum allowed percentage of unhealthy applications before reporting an error. For example, to allow 10% of applications to be unhealthy, this value would be 10.\n\nThe percentage represents the maximum tolerated percentage of applications that can be unhealthy before the cluster is considered in error.\nIf the percentage is respected but there is at least one unhealthy application, the health is evaluated as Warning.\nThis is calculated by dividing the number of unhealthy applications over the total number of application instances in the cluster, excluding applications of application types that are included in the ApplicationTypeHealthPolicyMap.\nThe computation rounds up to tolerate one failure on small numbers of applications. Default percentage is zero.",
          "default": 0
        },
        "ApplicationTypeHealthPolicyMap": {
          "$ref": "#/definitions/ApplicationTypeHealthPolicyMap",
          "description": "Defines a map with max percentage unhealthy applications for specific application types.\nEach entry specifies as key the application type name and as value an integer that represents the MaxPercentUnhealthyApplications percentage used to evaluate the applications of the specified application type.\n\nThe application type health policy map can be used during cluster health evaluation to describe special application types.\nThe application types included in the map are evaluated against the percentage specified in the map, and not with the global MaxPercentUnhealthyApplications defined in the cluster health policy.\nThe applications of application types specified in the map are not counted against the global pool of applications.\nFor example, if some applications of a type are critical, the cluster administrator can add an entry to the map for that application type\nand assign it a value of 0% (that is, do not tolerate any failures).\nAll other applications can be evaluated with MaxPercentUnhealthyApplications set to 20% to tolerate some failures out of the thousands of application instances.\nThe application type health policy map is used only if the cluster manifest enables application type health evaluation using the configuration entry for HealthManager/EnableApplicationTypeHealthEvaluation."
        }
      }
    },
    "ClusterManifest": {
      "type": "object",
      "description": "Information about the cluster manifest.",
      "properties": {
        "Manifest": {
          "type": "string",
          "description": "The contents of the cluster manifest file."
        }
      }
    },
    "ContainerApiRequestBody": {
      "type": "object",
      "description": "parameters for making container API call.",
      "properties": {
        "HttpVerb": {
          "type": "string",
          "description": "HTTP verb of container REST API, defaults to \"GET\""
        },
        "UriPath": {
          "type": "string",
          "description": "URI path of container REST API"
        },
        "Content-Type": {
          "type": "string",
          "description": "Content type of container REST API request, defaults to \"application/json\""
        },
        "Body": {
          "type": "string",
          "description": "HTTP request body of container REST API"
        }
      },
      "required": [
        "UriPath"
      ]
    },
    "ContainerApiResponse": {
      "type": "object",
      "description": "Response body that wraps container API result.",
      "properties": {
        "ContainerApiResult": {
          "$ref": "#/definitions/ContainerApiResult",
          "description": "Container API result."
        }
      },
      "required": [
        "ContainerApiResult"
      ]
    },
    "ContainerApiResult": {
      "type": "object",
      "description": "Container API result.",
      "properties": {
        "Status": {
          "type": "integer",
          "description": "HTTP status code returned by the target container API"
        },
        "Content-Type": {
          "type": "string",
          "description": "HTTP content type"
        },
        "Content-Encoding": {
          "type": "string",
          "description": "HTTP content encoding"
        },
        "Body": {
          "type": "string",
          "description": "container API result body"
        }
      },
      "required": [
        "Status"
      ]
    },
    "ContainerInstanceEvent": {
      "description": "Represents the base for all Container Events.",
      "allOf": [
        {
          "$ref": "#/definitions/FabricEvent"
        },
        {
          "type": "object",
          "description": "ContainerInstanceEvent"
        }
      ],
      "x-ms-discriminator-value": "ContainerInstanceEvent"
    },
    "ContainerInstanceEventList": {
      "description": "A list of ContainerInstanceEvent objects.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/ContainerInstanceEvent"
      }
    },
    "ContinuationToken": {
      "type": "string",
      "description": "The continuation token parameter is used to obtain next set of results. The continuation token is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token is not included in the response."
    },
    "CurrentUpgradeDomainProgressInfo": {
      "type": "object",
      "description": "Information about the current in-progress upgrade domain.",
      "properties": {
        "DomainName": {
          "$ref": "#/definitions/UpgradeDomainName",
          "description": "The name of the upgrade domain"
        },
        "NodeUpgradeProgressList": {
          "$ref": "#/definitions/NodeUpgradeProgressInfoList",
          "description": "List of upgrading nodes and their statuses"
        }
      }
    },
    "CurrentUpgradeDomainDuration": {
      "type": "string",
      "description": "The estimated amount of time spent processing current Upgrade Domain. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.",
      "default": "PT0H2M0S"
    },
    "DeactivationIntentDescription": {
      "description": "Describes the intent or reason for deactivating the node.",
      "properties": {
        "DeactivationIntent": {
          "type": "string",
          "description": "Describes the intent or reason for deactivating the node. The possible values are following.",
          "enum": [
            "Pause",
            "Restart",
            "RemoveData"
          ],
          "x-ms-enum": {
            "name": "DeactivationIntent",
            "modelAsString": true,
            "values": [
              {
                "value": "Pause",
                "description": "Indicates that the node should be paused. The value is 1."
              },
              {
                "value": "Restart",
                "description": "Indicates that the intent is for the node to be restarted after a short period of time. The value is 2."
              },
              {
                "value": "RemoveData",
                "description": "Indicates the intent is for the node to remove data. The value is 3."
              }
            ]
          }
        }
      }
    },
    "DeltaNodesCheckHealthEvaluation": {
      "x-ms-discriminator-value": "DeltaNodesCheck",
      "description": "Represents health evaluation for delta nodes, containing health evaluations for each unhealthy node that impacted current aggregated health state.\nCan be returned during cluster upgrade when the aggregated health state of the cluster is Warning or Error.",
      "allOf": [
        {
          "$ref": "#/definitions/HealthEvaluation"
        },
        {
          "type": "object",
          "description": "DeltaNodesCheckHealthEvaluation",
          "properties": {
            "BaselineErrorCount": {
              "type": "integer",
              "format": "int64",
              "description": "Number of nodes with aggregated heath state Error in the health store at the beginning of the cluster upgrade."
            },
            "BaselineTotalCount": {
              "type": "integer",
              "format": "int64",
              "description": "Total number of nodes in the health store at the beginning of the cluster upgrade."
            },
            "MaxPercentDeltaUnhealthyNodes": {
              "type": "integer",
              "description": "Maximum allowed percentage of delta unhealthy nodes from the ClusterUpgradeHealthPolicy."
            },
            "TotalCount": {
              "type": "integer",
              "format": "int64",
              "description": "Total number of nodes in the health store."
            },
            "UnhealthyEvaluations": {
              "$ref": "#/definitions/UnhealthyEvaluations",
              "description": "List of unhealthy evaluations that led to the aggregated health state.\nIncludes all the unhealthy NodeHealthEvaluation that impacted the aggregated health."
            }
          }
        }
      ]
    },
    "DeployedApplicationHealth": {
      "description": "Information about the health of an application deployed on a Service Fabric node.",
      "allOf": [
        {
          "$ref": "#/definitions/EntityHealth"
        },
        {
          "type": "object",
          "description": "DeployedApplicationHealth",
          "properties": {
            "Name": {
              "$ref": "#/definitions/ApplicationName",
              "description": "Name of the application deployed on the node whose health information is described by this object."
            },
            "NodeName": {
              "$ref": "#/definitions/NodeName",
              "description": "Name of the node where this application is deployed."
            },
            "DeployedServicePackageHealthStates": {
              "$ref": "#/definitions/DeployedServicePackageHealthStateList",
              "description": "Deployed service package health states for the current deployed application as found in the health store."
            }
          }
        }
      ]
    },
    "DeployedApplicationHealthEvaluation": {
      "x-ms-discriminator-value": "DeployedApplication",
      "description": "Represents health evaluation for a deployed application, containing information about the data and the algorithm used by the health store to evaluate health.",
      "allOf": [
        {
          "$ref": "#/definitions/HealthEvaluation"
        },
        {
          "type": "object",
          "description": "DeployedApplicationHealthEvaluation",
          "properties": {
            "NodeName": {
              "$ref": "#/definitions/NodeName",
              "description": "Name of the node where the application is deployed to."
            },
            "ApplicationName": {
              "$ref": "#/definitions/ApplicationName",
              "description": "The name of the application, including the 'fabric:' URI scheme."
            },
            "UnhealthyEvaluations": {
              "$ref": "#/definitions/UnhealthyEvaluations",
              "description": "List of  unhealthy evaluations that led to the current aggregated health state of the deployed application.\nThe types of the unhealthy evaluations can be DeployedServicePackagesHealthEvaluation or EventHealthEvaluation."
            }
          }
        }
      ]
    },
    "DeployedApplicationHealthState": {
      "description": "Represents the health state of a deployed application, which contains the entity identifier and the aggregated health state.",
      "allOf": [
        {
          "$ref": "#/definitions/EntityHealthState"
        },
        {
          "type": "object",
          "description": "DeployedApplicationHealthState",
          "properties": {
            "NodeName": {
              "$ref": "#/definitions/NodeName",
              "description": "Name of the node on which the service package is deployed."
            },
            "ApplicationName": {
              "$ref": "#/definitions/ApplicationName",
              "description": "The name of the application, including the 'fabric:' URI scheme."
            }
          }
        }
      ]
    },
    "DeployedApplicationHealthStateChunk": {
      "description": "Represents the health state chunk of a deployed application, which contains the node where the application is deployed, the aggregated health state and any deployed service packages that respect the chunk query description filters.",
      "allOf": [
        {
          "$ref": "#/definitions/EntityHealthStateChunk"
        },
        {
          "type": "object",
          "description": "DeployedApplicationHealthStateChunk",
          "properties": {
            "NodeName": {
              "type": "string",
              "description": "The name of node where the application is deployed."
            },
            "DeployedServicePackageHealthStateChunks": {
              "$ref": "#/definitions/DeployedServicePackageHealthStateChunkList",
              "description": "The list of deployed service package health state chunks belonging to the deployed application that respect the filters in the cluster health chunk query description."
            }
          }
        }
      ]
    },
    "DeployedApplicationHealthStateChunkList": {
      "type": "object",
      "description": "The list of deployed application health state chunks that respect the input filters in the chunk query. Returned by get cluster health state chunks query.",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeployedApplicationHealthStateChunk"
          },
          "description": "The list of deployed application health state chunks that respect the input filters in the chunk query."
        }
      }
    },
    "DeployedApplicationHealthStateFilter": {
      "type": "object",
      "description": "Defines matching criteria to determine whether a deployed application should be included as a child of an application in the cluster health chunk.\nThe deployed applications are only returned if the parent application matches a filter specified in the cluster health chunk query description.\nOne filter can match zero, one or multiple deployed applications, depending on its properties.",
      "properties": {
        "NodeNameFilter": {
          "type": "string",
          "description": "The name of the node where the application is deployed in order to match the filter.\nIf specified, the filter is applied only to the application deployed on the specified node.\nIf the application is not deployed on the node with the specified name, no deployed application is returned in the cluster health chunk based on this filter.\nOtherwise, the deployed application is included in the cluster health chunk if it respects the other filter properties.\nIf not specified, all deployed applications that match the parent filters (if any) are taken into consideration and matched against the other filter members, like health state filter."
        },
        "HealthStateFilter": {
          "type": "integer",
          "default": 0,
          "description": "The filter for the health state of the deployed applications. It allows selecting deployed applications if they match the desired health states.\nThe possible values are integer value of one of the following health states. Only deployed applications that match the filter are returned. All deployed applications are used to evaluate the cluster aggregated health state.\nIf not specified, default value is None, unless the node name is specified. If the filter has default value and node name is specified, the matching deployed application is returned.\nThe state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.\nFor example, if the provided value is 6, it matches deployed applications with HealthState value of OK (2) and Warning (4).\n\n- Default - Default value. Matches any HealthState. The value is zero.\n- None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.\n- Ok - Filter that matches input with HealthState value Ok. The value is 2.\n- Warning - Filter that matches input with HealthState value Warning. The value is 4.\n- Error - Filter that matches input with HealthState value Error. The value is 8.\n- All - Filter that matches input with any HealthState value. The value is 65535."
        },
        "DeployedServicePackageFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeployedServicePackageHealthStateFilter"
          },
          "description": "Defines a list of filters that specify which deployed service packages to be included in the returned cluster health chunk as children of the parent deployed application. The deployed service packages are returned only if the parent deployed application matches a filter.\nIf the list is empty, no deployed service packages are returned. All the deployed service packages are used to evaluate the parent deployed application aggregated health state, regardless of the input filters.\nThe deployed application filter may specify multiple deployed service package filters.\nFor example, it can specify a filter to return all deployed service packages with health state Error and another filter to always include a deployed service package on a node."
        }
      }
    },
    "DeployedApplicationInfo": {
      "type": "object",
      "description": "Information about application deployed on the node.",
      "properties": {
        "Id": {
          "$ref": "#/definitions/ApplicationId",
          "description": "The identity of the application. This is an encoded representation of the application name. This is used in the REST APIs to identify the application resource.\nStarting in version 6.0, hierarchical names are delimited with the \"\\~\" character. For example, if the application name is \"fabric:/myapp/app1\",\nthe application identity would be \"myapp\\~app1\" in 6.0+ and \"myapp/app1\" in previous versions."
        },
        "Name": {
          "$ref": "#/definitions/ApplicationName",
          "description": "The name of the application, including the 'fabric:' URI scheme."
        },
        "TypeName": {
          "$ref": "#/definitions/ApplicationTypeName",
          "description": "The application type name as defined in the application manifest."
        },
        "Status": {
          "$ref": "#/definitions/DeployedApplicationStatus",
          "description": "The status of the application deployed on the node. Following are the possible values."
        },
        "WorkDirectory": {
          "type": "string",
          "description": "The work directory of the application on the node. The work directory can be used to store application data."
        },
        "LogDirectory": {
          "type": "string",
          "description": "The log directory of the application on the node. The log directory can be used to store application logs."
        },
        "TempDirectory": {
          "type": "string",
          "description": "The temp directory of the application on the node. The code packages belonging to the application are forked with this directory set as their temporary directory."
        },
        "HealthState": {
          "$ref": "#/definitions/HealthState",
          "description": "The health state of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica etc."
        }
      }
    },
    "DeployedApplicationInfoList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/DeployedApplicationInfo"
      },
      "description": "List of deployed application information."
    },
    "DeployedApplicationsHealthEvaluation": {
      "x-ms-discriminator-value": "DeployedApplications",
      "description": "Represents health evaluation for deployed applications, containing health evaluations for each unhealthy deployed application that impacted current aggregated health state.\nCan be returned when evaluating application health and the aggregated health state is either Error or Warning.",
      "allOf": [
        {
          "$ref": "#/definitions/HealthEvaluation"
        },
        {
          "type": "object",
          "description": "DeployedApplicationsHealthEvaluation",
          "properties": {
            "MaxPercentUnhealthyDeployedApplications": {
              "type": "integer",
              "description": "Maximum allowed percentage of unhealthy deployed applications from the ApplicationHealthPolicy."
            },
            "TotalCount": {
              "type": "integer",
              "format": "int64",
              "description": "Total number of deployed applications of the application in the health store."
            },
            "UnhealthyEvaluations": {
              "$ref": "#/definitions/UnhealthyEvaluations",
              "description": "List of unhealthy evaluations that led to the aggregated health state. Includes all the unhealthy DeployedApplicationHealthEvaluation that impacted the aggregated health."
            }
          }
        }
      ]
    },
    "DeployedApplicationStatus": {
      "type": "string",
      "description": "The status of the application deployed on the node. Following are the possible values.",
      "enum": [
        "Invalid",
        "Downloading",
        "Activating",
        "Active",
        "Upgrading",
        "Deactivating"
      ],
      "x-ms-enum": {
        "name": "DeployedApplicationStatus",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Indicates that deployment status is not valid. All Service Fabric enumerations have the invalid type. The value is zero."
          },
          {
            "value": "Downloading",
            "description": "Indicates that the package is downloading from the ImageStore. The value is 1."
          },
          {
            "value": "Activating",
            "description": "Indicates that the package is activating. The value is 2."
          },
          {
            "value": "Active",
            "description": "Indicates that the package is active. The value is 3."
          },
          {
            "value": "Upgrading",
            "description": "Indicates that the package is upgrading. The value is 4."
          },
          {
            "value": "Deactivating",
            "description": "Indicates that the package is deactivating. The value is 5."
          }
        ]
      }
    },
    "DeployedServicePackageHealth": {
      "description": "Information about the health of a service package for a specific application deployed on a Service Fabric node.",
      "allOf": [
        {
          "$ref": "#/definitions/EntityHealth"
        },
        {
          "type": "object",
          "description": "DeployedServicePackageHealth",
          "properties": {
            "ApplicationName": {
              "$ref": "#/definitions/ApplicationName",
              "description": "The name of the application, including the 'fabric:' URI scheme."
            },
            "ServiceManifestName": {
              "$ref": "#/definitions/ServiceManifestName",
              "description": "Name of the service manifest."
            },
            "NodeName": {
              "$ref": "#/definitions/NodeName",
              "description": "Name of the node where this service package is deployed."
            }
          }
        }
      ]
    },
    "DeployedServicePackageHealthEvaluation": {
      "x-ms-discriminator-value": "DeployedServicePackage",
      "description": "Represents health evaluation for a deployed service package, containing information about the data and the algorithm used by health store to evaluate health. The evaluation is returned only when the aggregated health state is either Error or Warning.",
      "allOf": [
        {
          "$ref": "#/definitions/HealthEvaluation"
        },
        {
          "type": "object",
          "description": "DeployedServicePackageHealthEvaluation",
          "properties": {
            "NodeName": {
              "$ref": "#/definitions/NodeName",
              "description": "The name of a Service Fabric node."
            },
            "ApplicationName": {
              "$ref": "#/definitions/ApplicationName",
              "description": "The name of the application, including the 'fabric:' URI scheme."
            },
            "ServiceManifestName": {
              "$ref": "#/definitions/ServiceManifestName",
              "description": "The name of the service manifest."
            },
            "UnhealthyEvaluations": {
              "$ref": "#/definitions/UnhealthyEvaluations",
              "description": "List of unhealthy evaluations that led to the current aggregated health state. The type of the unhealthy evaluations can be EventHealthEvaluation."
            }
          }
        }
      ]
    },
    "DeployedServicePackageHealthState": {
      "description": "Represents the health state of a deployed service package, containing the entity identifier and the aggregated health state.",
      "allOf": [
        {
          "$ref": "#/definitions/EntityHealthState"
        },
        {
          "type": "object",
          "description": "DeployedServicePackageHealthState",
          "properties": {
            "NodeName": {
              "$ref": "#/definitions/NodeName",
              "description": "Name of the node on which the service package is deployed."
            },
            "ApplicationName": {
              "$ref": "#/definitions/ApplicationName",
              "description": "The name of the application, including the 'fabric:' URI scheme."
            },
            "ServiceManifestName": {
              "$ref": "#/definitions/ServiceManifestName",
              "description": "Name of the manifest describing the service package."
            },
            "ServicePackageActivationId": {
              "$ref": "#/definitions/ServicePackageActivationId",
              "description": "The ActivationId of a deployed service package. If ServicePackageActivationMode specified at the time of creating the service\nis 'SharedProcess' (or if it is not specified, in which case it defaults to 'SharedProcess'), then value of ServicePackageActivationId\nis always an empty string."
            }
          }
        }
      ]
    },
    "DeployedServicePackageHealthStateChunk": {
      "description": "Represents the health state chunk of a deployed service package, which contains the service manifest name and the service package aggregated health state.",
      "allOf": [
        {
          "$ref": "#/definitions/EntityHealthStateChunk"
        },
        {
          "type": "object",
          "description": "DeployedServicePackageHealthStateChunk",
          "properties": {
            "ServiceManifestName": {
              "$ref": "#/definitions/ServiceManifestName",
              "description": "The name of the service manifest."
            },
            "ServicePackageActivationId": {
              "$ref": "#/definitions/ServicePackageActivationId",
              "description": "The ActivationId of a deployed service package. If ServicePackageActivationMode specified at the time of creating the service\nis 'SharedProcess' (or if it is not specified, in which case it defaults to 'SharedProcess'), then value of ServicePackageActivationId\nis always an empty string."
            }
          }
        }
      ]
    },
    "DeployedServicePackageHealthStateChunkList": {
      "type": "object",
      "description": "The list of deployed service package health state chunks that respect the input filters in the chunk query. Returned by get cluster health state chunks query.",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeployedServicePackageHealthStateChunk"
          },
          "description": "The list of deployed service package health state chunks that respect the input filters in the chunk query."
        }
      }
    },
    "DeployedServicePackageHealthStateFilter": {
      "type": "object",
      "description": "Defines matching criteria to determine whether a deployed service package should be included as a child of a deployed application in the cluster health chunk.\nThe deployed service packages are only returned if the parent entities match a filter specified in the cluster health chunk query description. The parent deployed application and its parent application must be included in the cluster health chunk.\nOne filter can match zero, one or multiple deployed service packages, depending on its properties.",
      "properties": {
        "ServiceManifestNameFilter": {
          "type": "string",
          "description": "The name of the service manifest which identifies the deployed service packages that matches the filter.\nIf specified, the filter is applied only to the specified deployed service packages, if any.\nIf no deployed service packages with specified manifest name exist, nothing is returned in the cluster health chunk based on this filter.\nIf any deployed service package exists, they are included in the cluster health chunk if it respects the other filter properties.\nIf not specified, all deployed service packages that match the parent filters (if any) are taken into consideration and matched against the other filter members, like health state filter."
        },
        "ServicePackageActivationIdFilter": {
          "type": "string",
          "description": "The activation ID of a deployed service package that matches the filter.\nIf not specified, the filter applies to all deployed service packages that match the other parameters.\nIf specified, the filter matches only the deployed service package with the specified activation ID."
        },
        "HealthStateFilter": {
          "type": "integer",
          "default": 0,
          "description": "The filter for the health state of the deployed service packages. It allows selecting deployed service packages if they match the desired health states.\nThe possible values are integer value of one of the following health states. Only deployed service packages that match the filter are returned. All deployed service packages are used to evaluate the parent deployed application aggregated health state.\nIf not specified, default value is None, unless the deployed service package ID is specified. If the filter has default value and deployed service package ID is specified, the matching deployed service package is returned.\nThe state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.\nFor example, if the provided value is 6, it matches deployed service packages with HealthState value of OK (2) and Warning (4).\n\n- Default - Default value. Matches any HealthState. The value is zero.\n- None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.\n- Ok - Filter that matches input with HealthState value Ok. The value is 2.\n- Warning - Filter that matches input with HealthState value Warning. The value is 4.\n- Error - Filter that matches input with HealthState value Error. The value is 8.\n- All - Filter that matches input with any HealthState value. The value is 65535."
        }
      }
    },
    "DeployedServicePackageHealthStateList": {
      "description": "List of health states for a service package deployed on a Service Fabric node.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/DeployedServicePackageHealthState"
      }
    },
    "DeployedServicePackagesHealthEvaluation": {
      "x-ms-discriminator-value": "DeployedServicePackages",
      "description": "Represents health evaluation for deployed service packages, containing health evaluations for each unhealthy deployed service package that impacted current aggregated health state. Can be returned when evaluating deployed application health and the aggregated health state is either Error or Warning.",
      "allOf": [
        {
          "$ref": "#/definitions/HealthEvaluation"
        },
        {
          "type": "object",
          "description": "DeployedServicePackagesHealthEvaluation",
          "properties": {
            "TotalCount": {
              "type": "integer",
              "format": "int64",
              "description": "Total number of deployed service packages of the deployed application in the health store."
            },
            "UnhealthyEvaluations": {
              "$ref": "#/definitions/UnhealthyEvaluations",
              "description": "List of unhealthy evaluations that led to the aggregated health state. Includes all the unhealthy DeployedServicePackageHealthEvaluation that impacted the aggregated health."
            }
          }
        }
      ]
    },
    "DeployedServiceReplicaInfo": {
      "type": "object",
      "discriminator": "ServiceKind",
      "description": "Information about a Service Fabric service replica deployed on a node.",
      "required": [
        "ServiceKind"
      ],
      "properties": {
        "ServiceKind": {
          "$ref": "#/definitions/ServiceKind",
          "description": "The kind of service (Stateless or Stateful)."
        },
        "ServiceName": {
          "$ref": "#/definitions/ServiceName",
          "description": "The full name of the service with 'fabric:' URI scheme."
        },
        "ServiceTypeName": {
          "$ref": "#/definitions/ServiceTypeName",
          "description": "Name of the service type as specified in the service manifest."
        },
        "ServiceManifestName": {
          "$ref": "#/definitions/ServiceManifestName",
          "description": "The name of the service manifest in which this service type is defined."
        },
        "CodePackageName": {
          "$ref": "#/definitions/CodePackageName",
          "description": "The name of the code package that hosts this replica."
        },
        "PartitionId": {
          "$ref": "#/definitions/PartitionId",
          "description": "An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be different."
        },
        "ReplicaStatus": {
          "$ref": "#/definitions/ReplicaStatus",
          "description": "The status of a replica of a service."
        },
        "Address": {
          "type": "string",
          "description": "The last address returned by the replica in Open or ChangeRole."
        },
        "ServicePackageActivationId": {
          "$ref": "#/definitions/ServicePackageActivationId",
          "description": "The ActivationId of a deployed service package. If ServicePackageActivationMode specified at the time of creating the service\nis 'SharedProcess' (or if it is not specified, in which case it defaults to 'SharedProcess'), then value of ServicePackageActivationId\nis always an empty string."
        },
        "HostProcessId": {
          "type": "string",
          "description": "Host process ID of the process that is hosting the replica. This will be zero if the replica is down. In hyper-v containers this host process ID will be from different kernel."
        }
      }
    },
    "DeployedServiceReplicaInfoList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/DeployedServiceReplicaInfo"
      },
      "description": "List of deployed service replica information."
    },
    "DeployedStatefulServiceReplicaInfo": {
      "description": "Information about a stateful service replica deployed on a node.",
      "x-ms-discriminator-value": "Stateful",
      "allOf": [
        {
          "$ref": "#/definitions/DeployedServiceReplicaInfo"
        },
        {
          "type": "object",
          "description": "DeployedStatefulServiceReplicaInfo",
          "properties": {
            "ReplicaId": {
              "$ref": "#/definitions/ReplicaId",
              "description": "Id of a stateful service replica. ReplicaId is used by Service Fabric to uniquely identify a replica of a partition. It is unique within a partition and does not change for the lifetime of the replica. If a replica gets dropped and another replica gets created on the same node for the same partition, it will get a different value for the id. Sometimes the id of a stateless service instance is also referred as a replica id."
            },
            "ReplicaRole": {
              "$ref": "#/definitions/ReplicaRole",
              "description": "The role of a replica of a stateful service."
            },
            "ReconfigurationInformation": {
              "$ref": "#/definitions/ReconfigurationInformation",
              "description": "Information about current reconfiguration like phase, type, previous configuration role of replica and reconfiguration start date time."
            }
          }
        }
      ]
    },
    "DeployedStatelessServiceInstanceInfo": {
      "description": "Information about a stateless service instance deployed on a node.",
      "x-ms-discriminator-value": "Stateless",
      "allOf": [
        {
          "$ref": "#/definitions/DeployedServiceReplicaInfo"
        },
        {
          "type": "object",
          "description": "DeployedStatelessServiceInstanceInfo",
          "properties": {
            "InstanceId": {
              "$ref": "#/definitions/InstanceId",
              "description": "Id of a stateless service instance. InstanceId is used by Service Fabric to uniquely identify an instance of a partition of a stateless service. It is unique within a partition and does not change for the lifetime of the instance. If the instance has failed over on the same or different node, it will get a different value for the InstanceId."
            }
          }
        }
      ]
    },
    "EntityHealth": {
      "type": "object",
      "description": "Health information common to all entities in the cluster. It contains the aggregated health state, health events and unhealthy evaluation.",
      "properties": {
        "AggregatedHealthState": {
          "$ref": "#/definitions/HealthState",
          "description": "The HealthState representing the aggregated health state of the entity computed by Health Manager.\nThe health evaluation of the entity reflects all events reported on the entity and its children (if any).\nThe aggregation is done by applying the desired health policy."
        },
        "HealthEvents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HealthEvent"
          },
          "description": "The list of health events reported on the entity."
        },
        "UnhealthyEvaluations": {
          "$ref": "#/definitions/UnhealthyEvaluations",
          "description": "The unhealthy evaluations that show why the current aggregated health state was returned by Health Manager."
        },
        "HealthStatistics": {
          "$ref": "#/definitions/HealthStatistics",
          "description": "Shows the health statistics for all children types of the queried entity."
        }
      }
    },
    "EntityHealthState": {
      "type": "object",
      "description": "A base type for the health state of various entities in the cluster. It contains the aggregated health state.",
      "properties": {
        "AggregatedHealthState": {
          "$ref": "#/definitions/HealthState",
          "description": "The health state of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica etc."
        }
      }
    },
    "EntityHealthStateChunk": {
      "type": "object",
      "description": "A base type for the health state chunk of various entities in the cluster. It contains the aggregated health state.",
      "properties": {
        "HealthState": {
          "$ref": "#/definitions/HealthState",
          "description": "The health state of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica etc."
        }
      }
    },
    "EntityHealthStateChunkList": {
      "type": "object",
      "description": "A base type for the list of health state chunks found in the cluster. It contains the total number of health states that match the input filters.",
      "properties": {
        "TotalCount": {
          "type": "integer",
          "format": "int64",
          "description": "Total number of entity health state objects that match the specified filters from the cluster health chunk query description."
        }
      }
    },
    "Epoch": {
      "type": "object",
      "description": "An Epoch is a configuration number for the partition as a whole. When the configuration of the replica set changes, for example when the Primary replica changes, the operations that are replicated from the new Primary replica are said to be a new Epoch from the ones which were sent by the old Primary replica.",
      "properties": {
        "ConfigurationVersion": {
          "type": "string",
          "description": "The current configuration number of this Epoch. The configuration number is an increasing value that is updated whenever the configuration of this replica set changes."
        },
        "DataLossVersion": {
          "type": "string",
          "description": "The current dataloss number of this Epoch. The data loss number property is an increasing value which is updated whenever data loss is suspected, as when loss of a quorum of replicas in the replica set that includes the Primary replica."
        }
      }
    },
    "BackupEpoch": {
      "type": "object",
      "description": "An Epoch is a configuration number for the partition as a whole. When the configuration of the replica set changes, for example when the Primary replica changes, the operations that are replicated from the new Primary replica are said to be a new Epoch from the ones which were sent by the old Primary replica.",
      "properties": {
        "ConfigurationNumber": {
          "type": "string",
          "description": "The current configuration number of this Epoch. The configuration number is an increasing value that is updated whenever the configuration of this replica set changes."
        },
        "DataLossNumber": {
          "type": "string",
          "description": "The current dataloss number of this Epoch. The data loss number property is an increasing value which is updated whenever data loss is suspected, as when loss of a quorum of replicas in the replica set that includes the Primary replica."
        }
      }
    },
    "EventHealthEvaluation": {
      "x-ms-discriminator-value": "Event",
      "description": "Represents health evaluation of a HealthEvent that was reported on the entity.\nThe health evaluation is returned when evaluating health of an entity results in Error or Warning.",
      "allOf": [
        {
          "$ref": "#/definitions/HealthEvaluation"
        },
        {
          "type": "object",
          "description": "EventHealthEvaluation",
          "properties": {
            "ConsiderWarningAsError": {
              "type": "boolean",
              "description": "Indicates whether warnings are treated with the same severity as errors. The field is specified in the health policy used to evaluate the entity."
            },
            "UnhealthyEvent": {
              "$ref": "#/definitions/HealthEvent",
              "description": "Represents health information reported on a health entity, such as cluster, application or node, with additional metadata added by the Health Manager."
            }
          }
        }
      ]
    },
    "EventList": {
      "description": "A list of FabricEvent objects.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/FabricEvent"
      }
    },
    "FabricCodeVersionInfo": {
      "type": "object",
      "description": "Information about a Service Fabric code version.",
      "properties": {
        "CodeVersion": {
          "description": "The product version of Service Fabric.",
          "type": "string"
        }
      }
    },
    "FabricCodeVersionInfoList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/FabricCodeVersionInfo"
      },
      "description": "List of all Service Fabric code versions."
    },
    "FabricConfigVersionInfo": {
      "type": "object",
      "description": "Information about a Service Fabric config version.",
      "properties": {
        "ConfigVersion": {
          "description": "The config version of Service Fabric.",
          "type": "string"
        }
      }
    },
    "FabricConfigVersionInfoList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/FabricConfigVersionInfo"
      },
      "description": "List of all Service Fabric config versions."
    },
    "FabricError": {
      "type": "object",
      "description": "The REST API operations for Service Fabric return standard HTTP status codes. This type defines the additional information returned from the Service Fabric API operations that are not successful.",
      "properties": {
        "Error": {
          "$ref": "#/definitions/FabricErrorError",
          "description": "Error object containing error code and error message."
        }
      },
      "required": [
        "Error"
      ]
    },
    "FabricErrorError": {
      "type": "object",
      "description": "Error object containing error code and error message.",
      "properties": {
        "Code": {
          "$ref": "#/definitions/FabricErrorCodes",
          "description": "Defines the fabric error codes that be returned as part of the error object in response to Service Fabric API operations that are not successful. Following are the error code values that can be returned for a specific HTTP status code.\n\n  - Possible values of the error code for HTTP status code 400 (Bad Request)\n    - \"FABRIC_E_INVALID_PARTITION_KEY\"\n    - \"FABRIC_E_IMAGEBUILDER_VALIDATION_ERROR\"\n    - \"FABRIC_E_INVALID_ADDRESS\"\n    - \"FABRIC_E_APPLICATION_NOT_UPGRADING\"\n    - \"FABRIC_E_APPLICATION_UPGRADE_VALIDATION_ERROR\"\n    - \"FABRIC_E_FABRIC_NOT_UPGRADING\"\n    - \"FABRIC_E_FABRIC_UPGRADE_VALIDATION_ERROR\"\n    - \"FABRIC_E_INVALID_CONFIGURATION\"\n    - \"FABRIC_E_INVALID_NAME_URI\"\n    - \"FABRIC_E_PATH_TOO_LONG\"\n    - \"FABRIC_E_KEY_TOO_LARGE\"\n    - \"FABRIC_E_SERVICE_AFFINITY_CHAIN_NOT_SUPPORTED\"\n    - \"FABRIC_E_INVALID_ATOMIC_GROUP\"\n    - \"FABRIC_E_VALUE_EMPTY\"\n    - \"FABRIC_E_BACKUP_IS_ENABLED\"\n    - \"FABRIC_E_RESTORE_SOURCE_TARGET_PARTITION_MISMATCH\"\n    - \"FABRIC_E_INVALID_FOR_STATELESS_SERVICES\"\n    - \"FABRIC_E_INVALID_SERVICE_SCALING_POLICY\"\n    - \"E_INVALIDARG\"\n\n  - Possible values of the error code for HTTP status code 404 (Not Found)\n    - \"FABRIC_E_NODE_NOT_FOUND\"\n    - \"FABRIC_E_APPLICATION_TYPE_NOT_FOUND\"\n    - \"FABRIC_E_APPLICATION_NOT_FOUND\"\n    - \"FABRIC_E_SERVICE_TYPE_NOT_FOUND\"\n    - \"FABRIC_E_SERVICE_DOES_NOT_EXIST\"\n    - \"FABRIC_E_SERVICE_TYPE_TEMPLATE_NOT_FOUND\"\n    - \"FABRIC_E_CONFIGURATION_SECTION_NOT_FOUND\"\n    - \"FABRIC_E_PARTITION_NOT_FOUND\"\n    - \"FABRIC_E_REPLICA_DOES_NOT_EXIST\"\n    - \"FABRIC_E_SERVICE_GROUP_DOES_NOT_EXIST\"\n    - \"FABRIC_E_CONFIGURATION_PARAMETER_NOT_FOUND\"\n    - \"FABRIC_E_DIRECTORY_NOT_FOUND\"\n    - \"FABRIC_E_FABRIC_VERSION_NOT_FOUND\"\n    - \"FABRIC_E_FILE_NOT_FOUND\"\n    - \"FABRIC_E_NAME_DOES_NOT_EXIST\"\n    - \"FABRIC_E_PROPERTY_DOES_NOT_EXIST\"\n    - \"FABRIC_E_ENUMERATION_COMPLETED\"\n    - \"FABRIC_E_SERVICE_MANIFEST_NOT_FOUND\"\n    - \"FABRIC_E_KEY_NOT_FOUND\"\n    - \"FABRIC_E_HEALTH_ENTITY_NOT_FOUND\"\n    - \"FABRIC_E_BACKUP_NOT_ENABLED\"\n    - \"FABRIC_E_BACKUP_POLICY_NOT_EXISTING\"\n    - \"FABRIC_E_FAULT_ANALYSIS_SERVICE_NOT_EXISTING\"\n\n  - Possible values of the error code for HTTP status code 409 (Conflict)\n    - \"FABRIC_E_APPLICATION_TYPE_ALREADY_EXISTS\"\n    - \"FABRIC_E_APPLICATION_ALREADY_EXISTS\"\n    - \"FABRIC_E_APPLICATION_ALREADY_IN_TARGET_VERSION\"\n    - \"FABRIC_E_APPLICATION_TYPE_PROVISION_IN_PROGRESS\"\n    - \"FABRIC_E_APPLICATION_UPGRADE_IN_PROGRESS\"\n    - \"FABRIC_E_SERVICE_ALREADY_EXISTS\"\n    - \"FABRIC_E_SERVICE_GROUP_ALREADY_EXISTS\"\n    - \"FABRIC_E_APPLICATION_TYPE_IN_USE\"\n    - \"FABRIC_E_FABRIC_ALREADY_IN_TARGET_VERSION\"\n    - \"FABRIC_E_FABRIC_VERSION_ALREADY_EXISTS\"\n    - \"FABRIC_E_FABRIC_VERSION_IN_USE\"\n    - \"FABRIC_E_FABRIC_UPGRADE_IN_PROGRESS\"\n    - \"FABRIC_E_NAME_ALREADY_EXISTS\"\n    - \"FABRIC_E_NAME_NOT_EMPTY\"\n    - \"FABRIC_E_PROPERTY_CHECK_FAILED\"\n    - \"FABRIC_E_SERVICE_METADATA_MISMATCH\"\n    - \"FABRIC_E_SERVICE_TYPE_MISMATCH\"\n    - \"FABRIC_E_HEALTH_STALE_REPORT\"\n    - \"FABRIC_E_SEQUENCE_NUMBER_CHECK_FAILED\"\n    - \"FABRIC_E_NODE_HAS_NOT_STOPPED_YET\"\n    - \"FABRIC_E_INSTANCE_ID_MISMATCH\"\n    - \"FABRIC_E_BACKUP_IN_PROGRESS\"\n    - \"FABRIC_E_RESTORE_IN_PROGRESS\"\n    - \"FABRIC_E_BACKUP_POLICY_ALREADY_EXISTING\"\n\n  - Possible values of the error code for HTTP status code 413 (Request Entity Too Large)\n    - \"FABRIC_E_VALUE_TOO_LARGE\"\n\n  - Possible values of the error code for HTTP status code 500 (Internal Server Error)\n    - \"FABRIC_E_NODE_IS_UP\"\n    - \"E_FAIL\"\n    - \"FABRIC_E_SINGLE_INSTANCE_APPLICATION_ALREADY_EXISTS\"\n    - \"FABRIC_E_SINGLE_INSTANCE_APPLICATION_NOT_FOUND\"\n    - \"FABRIC_E_VOLUME_ALREADY_EXISTS\"\n    - \"ABRIC_E_VOLUME_NOT_FOUND\"\n    - \"SerializationError\"\n\n  - Possible values of the error code for HTTP status code 503 (Service Unavailable)\n    - \"FABRIC_E_NO_WRITE_QUORUM\"\n    - \"FABRIC_E_NOT_PRIMARY\"\n    - \"FABRIC_E_NOT_READY\"\n    - \"FABRIC_E_RECONFIGURATION_PENDING\"\n    - \"FABRIC_E_SERVICE_OFFLINE\"\n    - \"E_ABORT\"\n    - \"FABRIC_E_VALUE_TOO_LARGE\"\n\n  - Possible values of the error code for HTTP status code 504 (Gateway Timeout)\n    - \"FABRIC_E_COMMUNICATION_ERROR\"\n    - \"FABRIC_E_OPERATION_NOT_COMPLETE\"\n    - \"FABRIC_E_TIMEOUT\""
        },
        "Message": {
          "type": "string",
          "description": "Error message."
        }
      },
      "required": [
        "Code"
      ]
    },
    "FabricErrorCodes": {
      "type": "string",
      "description": "Defines the fabric error codes that be returned as part of the error object in response to Service Fabric API operations that are not successful. Following are the error code values that can be returned for a specific HTTP status code.\n\n  - Possible values of the error code for HTTP status code 400 (Bad Request)\n    - \"FABRIC_E_INVALID_PARTITION_KEY\"\n    - \"FABRIC_E_IMAGEBUILDER_VALIDATION_ERROR\"\n    - \"FABRIC_E_INVALID_ADDRESS\"\n    - \"FABRIC_E_APPLICATION_NOT_UPGRADING\"\n    - \"FABRIC_E_APPLICATION_UPGRADE_VALIDATION_ERROR\"\n    - \"FABRIC_E_FABRIC_NOT_UPGRADING\"\n    - \"FABRIC_E_FABRIC_UPGRADE_VALIDATION_ERROR\"\n    - \"FABRIC_E_INVALID_CONFIGURATION\"\n    - \"FABRIC_E_INVALID_NAME_URI\"\n    - \"FABRIC_E_PATH_TOO_LONG\"\n    - \"FABRIC_E_KEY_TOO_LARGE\"\n    - \"FABRIC_E_SERVICE_AFFINITY_CHAIN_NOT_SUPPORTED\"\n    - \"FABRIC_E_INVALID_ATOMIC_GROUP\"\n    - \"FABRIC_E_VALUE_EMPTY\"\n    - \"FABRIC_E_BACKUP_IS_ENABLED\"\n    - \"FABRIC_E_RESTORE_SOURCE_TARGET_PARTITION_MISMATCH\"\n    - \"FABRIC_E_INVALID_FOR_STATELESS_SERVICES\"\n    - \"FABRIC_E_INVALID_SERVICE_SCALING_POLICY\"\n    - \"E_INVALIDARG\"\n\n  - Possible values of the error code for HTTP status code 404 (Not Found)\n    - \"FABRIC_E_NODE_NOT_FOUND\"\n    - \"FABRIC_E_APPLICATION_TYPE_NOT_FOUND\"\n    - \"FABRIC_E_APPLICATION_NOT_FOUND\"\n    - \"FABRIC_E_SERVICE_TYPE_NOT_FOUND\"\n    - \"FABRIC_E_SERVICE_DOES_NOT_EXIST\"\n    - \"FABRIC_E_SERVICE_TYPE_TEMPLATE_NOT_FOUND\"\n    - \"FABRIC_E_CONFIGURATION_SECTION_NOT_FOUND\"\n    - \"FABRIC_E_PARTITION_NOT_FOUND\"\n    - \"FABRIC_E_REPLICA_DOES_NOT_EXIST\"\n    - \"FABRIC_E_SERVICE_GROUP_DOES_NOT_EXIST\"\n    - \"FABRIC_E_CONFIGURATION_PARAMETER_NOT_FOUND\"\n    - \"FABRIC_E_DIRECTORY_NOT_FOUND\"\n    - \"FABRIC_E_FABRIC_VERSION_NOT_FOUND\"\n    - \"FABRIC_E_FILE_NOT_FOUND\"\n    - \"FABRIC_E_NAME_DOES_NOT_EXIST\"\n    - \"FABRIC_E_PROPERTY_DOES_NOT_EXIST\"\n    - \"FABRIC_E_ENUMERATION_COMPLETED\"\n    - \"FABRIC_E_SERVICE_MANIFEST_NOT_FOUND\"\n    - \"FABRIC_E_KEY_NOT_FOUND\"\n    - \"FABRIC_E_HEALTH_ENTITY_NOT_FOUND\"\n    - \"FABRIC_E_BACKUP_NOT_ENABLED\"\n    - \"FABRIC_E_BACKUP_POLICY_NOT_EXISTING\"\n    - \"FABRIC_E_FAULT_ANALYSIS_SERVICE_NOT_EXISTING\"\n\n  - Possible values of the error code for HTTP status code 409 (Conflict)\n    - \"FABRIC_E_APPLICATION_TYPE_ALREADY_EXISTS\"\n    - \"FABRIC_E_APPLICATION_ALREADY_EXISTS\"\n    - \"FABRIC_E_APPLICATION_ALREADY_IN_TARGET_VERSION\"\n    - \"FABRIC_E_APPLICATION_TYPE_PROVISION_IN_PROGRESS\"\n    - \"FABRIC_E_APPLICATION_UPGRADE_IN_PROGRESS\"\n    - \"FABRIC_E_SERVICE_ALREADY_EXISTS\"\n    - \"FABRIC_E_SERVICE_GROUP_ALREADY_EXISTS\"\n    - \"FABRIC_E_APPLICATION_TYPE_IN_USE\"\n    - \"FABRIC_E_FABRIC_ALREADY_IN_TARGET_VERSION\"\n    - \"FABRIC_E_FABRIC_VERSION_ALREADY_EXISTS\"\n    - \"FABRIC_E_FABRIC_VERSION_IN_USE\"\n    - \"FABRIC_E_FABRIC_UPGRADE_IN_PROGRESS\"\n    - \"FABRIC_E_NAME_ALREADY_EXISTS\"\n    - \"FABRIC_E_NAME_NOT_EMPTY\"\n    - \"FABRIC_E_PROPERTY_CHECK_FAILED\"\n    - \"FABRIC_E_SERVICE_METADATA_MISMATCH\"\n    - \"FABRIC_E_SERVICE_TYPE_MISMATCH\"\n    - \"FABRIC_E_HEALTH_STALE_REPORT\"\n    - \"FABRIC_E_SEQUENCE_NUMBER_CHECK_FAILED\"\n    - \"FABRIC_E_NODE_HAS_NOT_STOPPED_YET\"\n    - \"FABRIC_E_INSTANCE_ID_MISMATCH\"\n    - \"FABRIC_E_BACKUP_IN_PROGRESS\"\n    - \"FABRIC_E_RESTORE_IN_PROGRESS\"\n    - \"FABRIC_E_BACKUP_POLICY_ALREADY_EXISTING\"\n\n  - Possible values of the error code for HTTP status code 413 (Request Entity Too Large)\n    - \"FABRIC_E_VALUE_TOO_LARGE\"\n\n  - Possible values of the error code for HTTP status code 500 (Internal Server Error)\n    - \"FABRIC_E_NODE_IS_UP\"\n    - \"E_FAIL\"\n    - \"FABRIC_E_SINGLE_INSTANCE_APPLICATION_ALREADY_EXISTS\"\n    - \"FABRIC_E_SINGLE_INSTANCE_APPLICATION_NOT_FOUND\"\n    - \"FABRIC_E_VOLUME_ALREADY_EXISTS\"\n    - \"ABRIC_E_VOLUME_NOT_FOUND\"\n    - \"SerializationError\"\n\n  - Possible values of the error code for HTTP status code 503 (Service Unavailable)\n    - \"FABRIC_E_NO_WRITE_QUORUM\"\n    - \"FABRIC_E_NOT_PRIMARY\"\n    - \"FABRIC_E_NOT_READY\"\n    - \"FABRIC_E_RECONFIGURATION_PENDING\"\n    - \"FABRIC_E_SERVICE_OFFLINE\"\n    - \"E_ABORT\"\n    - \"FABRIC_E_VALUE_TOO_LARGE\"\n\n  - Possible values of the error code for HTTP status code 504 (Gateway Timeout)\n    - \"FABRIC_E_COMMUNICATION_ERROR\"\n    - \"FABRIC_E_OPERATION_NOT_COMPLETE\"\n    - \"FABRIC_E_TIMEOUT\"",
      "enum": [
        "FABRIC_E_INVALID_PARTITION_KEY",
        "FABRIC_E_IMAGEBUILDER_VALIDATION_ERROR",
        "FABRIC_E_INVALID_ADDRESS",
        "FABRIC_E_APPLICATION_NOT_UPGRADING",
        "FABRIC_E_APPLICATION_UPGRADE_VALIDATION_ERROR",
        "FABRIC_E_FABRIC_NOT_UPGRADING",
        "FABRIC_E_FABRIC_UPGRADE_VALIDATION_ERROR",
        "FABRIC_E_INVALID_CONFIGURATION",
        "FABRIC_E_INVALID_NAME_URI",
        "FABRIC_E_PATH_TOO_LONG",
        "FABRIC_E_KEY_TOO_LARGE",
        "FABRIC_E_SERVICE_AFFINITY_CHAIN_NOT_SUPPORTED",
        "FABRIC_E_INVALID_ATOMIC_GROUP",
        "FABRIC_E_VALUE_EMPTY",
        "FABRIC_E_NODE_NOT_FOUND",
        "FABRIC_E_APPLICATION_TYPE_NOT_FOUND",
        "FABRIC_E_APPLICATION_NOT_FOUND",
        "FABRIC_E_SERVICE_TYPE_NOT_FOUND",
        "FABRIC_E_SERVICE_DOES_NOT_EXIST",
        "FABRIC_E_SERVICE_TYPE_TEMPLATE_NOT_FOUND",
        "FABRIC_E_CONFIGURATION_SECTION_NOT_FOUND",
        "FABRIC_E_PARTITION_NOT_FOUND",
        "FABRIC_E_REPLICA_DOES_NOT_EXIST",
        "FABRIC_E_SERVICE_GROUP_DOES_NOT_EXIST",
        "FABRIC_E_CONFIGURATION_PARAMETER_NOT_FOUND",
        "FABRIC_E_DIRECTORY_NOT_FOUND",
        "FABRIC_E_FABRIC_VERSION_NOT_FOUND",
        "FABRIC_E_FILE_NOT_FOUND",
        "FABRIC_E_NAME_DOES_NOT_EXIST",
        "FABRIC_E_PROPERTY_DOES_NOT_EXIST",
        "FABRIC_E_ENUMERATION_COMPLETED",
        "FABRIC_E_SERVICE_MANIFEST_NOT_FOUND",
        "FABRIC_E_KEY_NOT_FOUND",
        "FABRIC_E_HEALTH_ENTITY_NOT_FOUND",
        "FABRIC_E_APPLICATION_TYPE_ALREADY_EXISTS",
        "FABRIC_E_APPLICATION_ALREADY_EXISTS",
        "FABRIC_E_APPLICATION_ALREADY_IN_TARGET_VERSION",
        "FABRIC_E_APPLICATION_TYPE_PROVISION_IN_PROGRESS",
        "FABRIC_E_APPLICATION_UPGRADE_IN_PROGRESS",
        "FABRIC_E_SERVICE_ALREADY_EXISTS",
        "FABRIC_E_SERVICE_GROUP_ALREADY_EXISTS",
        "FABRIC_E_APPLICATION_TYPE_IN_USE",
        "FABRIC_E_FABRIC_ALREADY_IN_TARGET_VERSION",
        "FABRIC_E_FABRIC_VERSION_ALREADY_EXISTS",
        "FABRIC_E_FABRIC_VERSION_IN_USE",
        "FABRIC_E_FABRIC_UPGRADE_IN_PROGRESS",
        "FABRIC_E_NAME_ALREADY_EXISTS",
        "FABRIC_E_NAME_NOT_EMPTY",
        "FABRIC_E_PROPERTY_CHECK_FAILED",
        "FABRIC_E_SERVICE_METADATA_MISMATCH",
        "FABRIC_E_SERVICE_TYPE_MISMATCH",
        "FABRIC_E_HEALTH_STALE_REPORT",
        "FABRIC_E_SEQUENCE_NUMBER_CHECK_FAILED",
        "FABRIC_E_NODE_HAS_NOT_STOPPED_YET",
        "FABRIC_E_INSTANCE_ID_MISMATCH",
        "FABRIC_E_VALUE_TOO_LARGE",
        "FABRIC_E_NO_WRITE_QUORUM",
        "FABRIC_E_NOT_PRIMARY",
        "FABRIC_E_NOT_READY",
        "FABRIC_E_RECONFIGURATION_PENDING",
        "FABRIC_E_SERVICE_OFFLINE",
        "E_ABORT",
        "FABRIC_E_COMMUNICATION_ERROR",
        "FABRIC_E_OPERATION_NOT_COMPLETE",
        "FABRIC_E_TIMEOUT",
        "FABRIC_E_NODE_IS_UP",
        "E_FAIL",
        "FABRIC_E_BACKUP_IS_ENABLED",
        "FABRIC_E_RESTORE_SOURCE_TARGET_PARTITION_MISMATCH",
        "FABRIC_E_INVALID_FOR_STATELESS_SERVICES",
        "FABRIC_E_BACKUP_NOT_ENABLED",
        "FABRIC_E_BACKUP_POLICY_NOT_EXISTING",
        "FABRIC_E_FAULT_ANALYSIS_SERVICE_NOT_EXISTING",
        "FABRIC_E_BACKUP_IN_PROGRESS",
        "FABRIC_E_RESTORE_IN_PROGRESS",
        "FABRIC_E_BACKUP_POLICY_ALREADY_EXISTING",
        "FABRIC_E_INVALID_SERVICE_SCALING_POLICY",
        "E_INVALIDARG",
        "FABRIC_E_SINGLE_INSTANCE_APPLICATION_ALREADY_EXISTS",
        "FABRIC_E_SINGLE_INSTANCE_APPLICATION_NOT_FOUND",
        "FABRIC_E_VOLUME_ALREADY_EXISTS",
        "FABRIC_E_VOLUME_NOT_FOUND",
        "SerializationError"
      ],
      "x-ms-enum": {
        "name": "FabricErrorCodes",
        "modelAsString": true,
        "values": [
          {
            "value": "FABRIC_E_INVALID_PARTITION_KEY"
          },
          {
            "value": "FABRIC_E_IMAGEBUILDER_VALIDATION_ERROR"
          },
          {
            "value": "FABRIC_E_INVALID_ADDRESS"
          },
          {
            "value": "FABRIC_E_APPLICATION_NOT_UPGRADING"
          },
          {
            "value": "FABRIC_E_APPLICATION_UPGRADE_VALIDATION_ERROR"
          },
          {
            "value": "FABRIC_E_FABRIC_NOT_UPGRADING"
          },
          {
            "value": "FABRIC_E_FABRIC_UPGRADE_VALIDATION_ERROR"
          },
          {
            "value": "FABRIC_E_INVALID_CONFIGURATION"
          },
          {
            "value": "FABRIC_E_INVALID_NAME_URI"
          },
          {
            "value": "FABRIC_E_PATH_TOO_LONG"
          },
          {
            "value": "FABRIC_E_KEY_TOO_LARGE"
          },
          {
            "value": "FABRIC_E_SERVICE_AFFINITY_CHAIN_NOT_SUPPORTED"
          },
          {
            "value": "FABRIC_E_INVALID_ATOMIC_GROUP"
          },
          {
            "value": "FABRIC_E_VALUE_EMPTY"
          },
          {
            "value": "FABRIC_E_NODE_NOT_FOUND"
          },
          {
            "value": "FABRIC_E_APPLICATION_TYPE_NOT_FOUND"
          },
          {
            "value": "FABRIC_E_APPLICATION_NOT_FOUND"
          },
          {
            "value": "FABRIC_E_SERVICE_TYPE_NOT_FOUND"
          },
          {
            "value": "FABRIC_E_SERVICE_DOES_NOT_EXIST"
          },
          {
            "value": "FABRIC_E_SERVICE_TYPE_TEMPLATE_NOT_FOUND"
          },
          {
            "value": "FABRIC_E_CONFIGURATION_SECTION_NOT_FOUND"
          },
          {
            "value": "FABRIC_E_PARTITION_NOT_FOUND"
          },
          {
            "value": "FABRIC_E_REPLICA_DOES_NOT_EXIST"
          },
          {
            "value": "FABRIC_E_SERVICE_GROUP_DOES_NOT_EXIST"
          },
          {
            "value": "FABRIC_E_CONFIGURATION_PARAMETER_NOT_FOUND"
          },
          {
            "value": "FABRIC_E_DIRECTORY_NOT_FOUND"
          },
          {
            "value": "FABRIC_E_FABRIC_VERSION_NOT_FOUND"
          },
          {
            "value": "FABRIC_E_FILE_NOT_FOUND"
          },
          {
            "value": "FABRIC_E_NAME_DOES_NOT_EXIST"
          },
          {
            "value": "FABRIC_E_PROPERTY_DOES_NOT_EXIST"
          },
          {
            "value": "FABRIC_E_ENUMERATION_COMPLETED"
          },
          {
            "value": "FABRIC_E_SERVICE_MANIFEST_NOT_FOUND"
          },
          {
            "value": "FABRIC_E_KEY_NOT_FOUND"
          },
          {
            "value": "FABRIC_E_HEALTH_ENTITY_NOT_FOUND"
          },
          {
            "value": "FABRIC_E_APPLICATION_TYPE_ALREADY_EXISTS"
          },
          {
            "value": "FABRIC_E_APPLICATION_ALREADY_EXISTS"
          },
          {
            "value": "FABRIC_E_APPLICATION_ALREADY_IN_TARGET_VERSION"
          },
          {
            "value": "FABRIC_E_APPLICATION_TYPE_PROVISION_IN_PROGRESS"
          },
          {
            "value": "FABRIC_E_APPLICATION_UPGRADE_IN_PROGRESS"
          },
          {
            "value": "FABRIC_E_SERVICE_ALREADY_EXISTS"
          },
          {
            "value": "FABRIC_E_SERVICE_GROUP_ALREADY_EXISTS"
          },
          {
            "value": "FABRIC_E_APPLICATION_TYPE_IN_USE"
          },
          {
            "value": "FABRIC_E_FABRIC_ALREADY_IN_TARGET_VERSION"
          },
          {
            "value": "FABRIC_E_FABRIC_VERSION_ALREADY_EXISTS"
          },
          {
            "value": "FABRIC_E_FABRIC_VERSION_IN_USE"
          },
          {
            "value": "FABRIC_E_FABRIC_UPGRADE_IN_PROGRESS"
          },
          {
            "value": "FABRIC_E_NAME_ALREADY_EXISTS"
          },
          {
            "value": "FABRIC_E_NAME_NOT_EMPTY"
          },
          {
            "value": "FABRIC_E_PROPERTY_CHECK_FAILED"
          },
          {
            "value": "FABRIC_E_SERVICE_METADATA_MISMATCH"
          },
          {
            "value": "FABRIC_E_SERVICE_TYPE_MISMATCH"
          },
          {
            "value": "FABRIC_E_HEALTH_STALE_REPORT"
          },
          {
            "value": "FABRIC_E_SEQUENCE_NUMBER_CHECK_FAILED"
          },
          {
            "value": "FABRIC_E_NODE_HAS_NOT_STOPPED_YET"
          },
          {
            "value": "FABRIC_E_INSTANCE_ID_MISMATCH"
          },
          {
            "value": "FABRIC_E_VALUE_TOO_LARGE"
          },
          {
            "value": "FABRIC_E_NO_WRITE_QUORUM"
          },
          {
            "value": "FABRIC_E_NOT_PRIMARY"
          },
          {
            "value": "FABRIC_E_NOT_READY"
          },
          {
            "value": "FABRIC_E_RECONFIGURATION_PENDING"
          },
          {
            "value": "FABRIC_E_SERVICE_OFFLINE"
          },
          {
            "value": "E_ABORT"
          },
          {
            "value": "FABRIC_E_COMMUNICATION_ERROR"
          },
          {
            "value": "FABRIC_E_OPERATION_NOT_COMPLETE"
          },
          {
            "value": "FABRIC_E_TIMEOUT"
          },
          {
            "value": "FABRIC_E_NODE_IS_UP"
          },
          {
            "value": "E_FAIL"
          },
          {
            "value": "FABRIC_E_BACKUP_IS_ENABLED"
          },
          {
            "value": "FABRIC_E_RESTORE_SOURCE_TARGET_PARTITION_MISMATCH"
          },
          {
            "value": "FABRIC_E_INVALID_FOR_STATELESS_SERVICES"
          },
          {
            "value": "FABRIC_E_BACKUP_NOT_ENABLED"
          },
          {
            "value": "FABRIC_E_BACKUP_POLICY_NOT_EXISTING"
          },
          {
            "value": "FABRIC_E_FAULT_ANALYSIS_SERVICE_NOT_EXISTING"
          },
          {
            "value": "FABRIC_E_BACKUP_IN_PROGRESS"
          },
          {
            "value": "FABRIC_E_RESTORE_IN_PROGRESS"
          },
          {
            "value": "FABRIC_E_BACKUP_POLICY_ALREADY_EXISTING"
          },
          {
            "value": "FABRIC_E_INVALID_SERVICE_SCALING_POLICY"
          },
          {
            "value": "E_INVALIDARG"
          },
          {
            "value": "FABRIC_E_SINGLE_INSTANCE_APPLICATION_ALREADY_EXISTS"
          },
          {
            "value": "FABRIC_E_SINGLE_INSTANCE_APPLICATION_NOT_FOUND"
          },
          {
            "value": "FABRIC_E_VOLUME_ALREADY_EXISTS"
          },
          {
            "value": "FABRIC_E_VOLUME_NOT_FOUND"
          },
          {
            "value": "SerializationError"
          }
        ]
      }
    },
    "FabricEvent": {
      "type": "object",
      "discriminator": "Kind",
      "description": "Represents the base for all Fabric Events.",
      "properties": {
        "Kind": {
          "$ref": "#/definitions/FabricEventKind",
          "description": "The kind of FabricEvent."
        },
        "EventInstanceId": {
          "type": "string",
          "format": "uuid",
          "description": "The identifier for the FabricEvent instance."
        },
        "TimeStamp": {
          "type": "string",
          "format": "date-time",
          "description": "The time event was logged."
        },
        "HasCorrelatedEvents": {
          "type": "boolean",
          "description": "Shows there is existing related events available."
        }
      },
      "required": [
        "Kind",
        "EventInstanceId",
        "TimeStamp"
      ]
    },
    "FabricEventKind": {
      "type": "string",
      "description": "The kind of FabricEvent.",
      "enum": [
        "ClusterEvent",
        "ContainerInstanceEvent",
        "NodeEvent",
        "ApplicationEvent",
        "ServiceEvent",
        "PartitionEvent",
        "ReplicaEvent",
        "PartitionAnalysisEvent",
        "ApplicationCreated",
        "ApplicationDeleted",
        "ApplicationHealthReportCreated",
        "ApplicationHealthReportExpired",
        "ApplicationUpgradeComplete",
        "ApplicationUpgradeDomainComplete",
        "ApplicationUpgradeRollbackComplete",
        "ApplicationUpgradeRollbackStart",
        "ApplicationUpgradeStart",
        "DeployedApplicationHealthReportCreated",
        "DeployedApplicationHealthReportExpired",
        "ProcessDeactivated",
        "ContainerDeactivated",
        "NodeAborted",
        "NodeAborting",
        "NodeAdded",
        "NodeClose",
        "NodeClosing",
        "NodeDeactivateComplete",
        "NodeDeactivateStart",
        "NodeDown",
        "NodeHealthReportCreated",
        "NodeHealthReportExpired",
        "NodeOpenedSuccess",
        "NodeOpenFailed",
        "NodeOpening",
        "NodeRemoved",
        "NodeUp",
        "PartitionHealthReportCreated",
        "PartitionHealthReportExpired",
        "PartitionReconfigurationCompleted",
        "PartitionPrimaryMoveAnalysis",
        "ServiceCreated",
        "ServiceDeleted",
        "ServiceHealthReportCreated",
        "ServiceHealthReportExpired",
        "DeployedServiceHealthReportCreated",
        "DeployedServiceHealthReportExpired",
        "StatefulReplicaHealthReportCreated",
        "StatefulReplicaHealthReportExpired",
        "StatelessReplicaHealthReportCreated",
        "StatelessReplicaHealthReportExpired",
        "ClusterHealthReportCreated",
        "ClusterHealthReportExpired",
        "ClusterUpgradeComplete",
        "ClusterUpgradeDomainComplete",
        "ClusterUpgradeRollbackComplete",
        "ClusterUpgradeRollbackStart",
        "ClusterUpgradeStart",
        "ChaosStopped",
        "ChaosStarted",
        "ChaosRestartNodeFaultCompleted",
        "ChaosRestartCodePackageFaultScheduled",
        "ChaosRestartCodePackageFaultCompleted",
        "ChaosRemoveReplicaFaultScheduled",
        "ChaosRemoveReplicaFaultCompleted",
        "ChaosMoveSecondaryFaultScheduled",
        "ChaosMovePrimaryFaultScheduled",
        "ChaosRestartReplicaFaultScheduled",
        "ChaosRestartNodeFaultScheduled"
      ],
      "x-ms-enum": {
        "name": "FabricEventKind",
        "modelAsString": true,
        "values": [
          {
            "value": "ClusterEvent"
          },
          {
            "value": "ContainerInstanceEvent"
          },
          {
            "value": "NodeEvent"
          },
          {
            "value": "ApplicationEvent"
          },
          {
            "value": "ServiceEvent"
          },
          {
            "value": "PartitionEvent"
          },
          {
            "value": "ReplicaEvent"
          },
          {
            "value": "PartitionAnalysisEvent"
          },
          {
            "value": "ApplicationCreated"
          },
          {
            "value": "ApplicationDeleted"
          },
          {
            "value": "ApplicationHealthReportCreated"
          },
          {
            "value": "ApplicationHealthReportExpired"
          },
          {
            "value": "ApplicationUpgradeComplete"
          },
          {
            "value": "ApplicationUpgradeDomainComplete"
          },
          {
            "value": "ApplicationUpgradeRollbackComplete"
          },
          {
            "value": "ApplicationUpgradeRollbackStart"
          },
          {
            "value": "ApplicationUpgradeStart"
          },
          {
            "value": "DeployedApplicationHealthReportCreated"
          },
          {
            "value": "DeployedApplicationHealthReportExpired"
          },
          {
            "value": "ProcessDeactivated"
          },
          {
            "value": "ContainerDeactivated"
          },
          {
            "value": "NodeAborted"
          },
          {
            "value": "NodeAborting"
          },
          {
            "value": "NodeAdded"
          },
          {
            "value": "NodeClose"
          },
          {
            "value": "NodeClosing"
          },
          {
            "value": "NodeDeactivateComplete"
          },
          {
            "value": "NodeDeactivateStart"
          },
          {
            "value": "NodeDown"
          },
          {
            "value": "NodeHealthReportCreated"
          },
          {
            "value": "NodeHealthReportExpired"
          },
          {
            "value": "NodeOpenedSuccess"
          },
          {
            "value": "NodeOpenFailed"
          },
          {
            "value": "NodeOpening"
          },
          {
            "value": "NodeRemoved"
          },
          {
            "value": "NodeUp"
          },
          {
            "value": "PartitionHealthReportCreated"
          },
          {
            "value": "PartitionHealthReportExpired"
          },
          {
            "value": "PartitionReconfigurationCompleted"
          },
          {
            "value": "PartitionPrimaryMoveAnalysis"
          },
          {
            "value": "ServiceCreated"
          },
          {
            "value": "ServiceDeleted"
          },
          {
            "value": "ServiceHealthReportCreated"
          },
          {
            "value": "ServiceHealthReportExpired"
          },
          {
            "value": "DeployedServiceHealthReportCreated"
          },
          {
            "value": "DeployedServiceHealthReportExpired"
          },
          {
            "value": "StatefulReplicaHealthReportCreated"
          },
          {
            "value": "StatefulReplicaHealthReportExpired"
          },
          {
            "value": "StatelessReplicaHealthReportCreated"
          },
          {
            "value": "StatelessReplicaHealthReportExpired"
          },
          {
            "value": "ClusterHealthReportCreated"
          },
          {
            "value": "ClusterHealthReportExpired"
          },
          {
            "value": "ClusterUpgradeComplete"
          },
          {
            "value": "ClusterUpgradeDomainComplete"
          },
          {
            "value": "ClusterUpgradeRollbackComplete"
          },
          {
            "value": "ClusterUpgradeRollbackStart"
          },
          {
            "value": "ClusterUpgradeStart"
          },
          {
            "value": "ChaosStopped"
          },
          {
            "value": "ChaosStarted"
          },
          {
            "value": "ChaosRestartNodeFaultCompleted"
          },
          {
            "value": "ChaosRestartCodePackageFaultScheduled"
          },
          {
            "value": "ChaosRestartCodePackageFaultCompleted"
          },
          {
            "value": "ChaosRemoveReplicaFaultScheduled"
          },
          {
            "value": "ChaosRemoveReplicaFaultCompleted"
          },
          {
            "value": "ChaosMoveSecondaryFaultScheduled"
          },
          {
            "value": "ChaosMovePrimaryFaultScheduled"
          },
          {
            "value": "ChaosRestartReplicaFaultScheduled"
          },
          {
            "value": "ChaosRestartNodeFaultScheduled"
          }
        ]
      }
    },
    "ClusterConfigurationUpgradeStatusInfo": {
      "type": "object",
      "description": "Information about a standalone cluster configuration upgrade status.",
      "properties": {
        "UpgradeState": {
          "$ref": "#/definitions/UpgradeState",
          "description": "The state of the upgrade domain."
        },
        "ProgressStatus": {
          "type": "integer",
          "description": "The cluster manifest version."
        },
        "ConfigVersion": {
          "type": "string",
          "description": "The cluster configuration version."
        },
        "Details": {
          "type": "string",
          "description": "The cluster upgrade status details."
        }
      }
    },
    "FailureAction": {
      "type": "string",
      "description": "The compensating action to perform when a Monitored upgrade encounters monitoring policy or health policy violations.\nInvalid indicates the failure action is invalid. Rollback specifies that the upgrade will start rolling back automatically.\nManual indicates that the upgrade will switch to UnmonitoredManual upgrade mode.",
      "enum": [
        "Invalid",
        "Rollback",
        "Manual"
      ],
      "x-ms-enum": {
        "name": "FailureAction",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Indicates the failure action is invalid. All Service Fabric enumerations have the invalid type. The value is zero."
          },
          {
            "value": "Rollback",
            "description": "The upgrade will start rolling back automatically. The value is 1"
          },
          {
            "value": "Manual",
            "description": "The upgrade will switch to UnmonitoredManual upgrade mode. The value is 2"
          }
        ]
      }
    },
    "FailureReason": {
      "type": "string",
      "description": "The cause of an upgrade failure that resulted in FailureAction being executed.",
      "enum": [
        "None",
        "Interrupted",
        "HealthCheck",
        "UpgradeDomainTimeout",
        "OverallUpgradeTimeout"
      ],
      "x-ms-enum": {
        "name": "FailureReason",
        "modelAsString": true,
        "values": [
          {
            "value": "None",
            "description": "Indicates the reason is invalid or unknown. All Service Fabric enumerations have the invalid type. The value is zero."
          },
          {
            "value": "Interrupted",
            "description": "There was an external request to roll back the upgrade. The value is 1"
          },
          {
            "value": "HealthCheck",
            "description": "The upgrade failed due to health policy violations. The value is 2"
          },
          {
            "value": "UpgradeDomainTimeout",
            "description": "An upgrade domain took longer than the allowed upgrade domain timeout to process. The value is 3"
          },
          {
            "value": "OverallUpgradeTimeout",
            "description": "The overall upgrade took longer than the allowed upgrade timeout to process. The value is 4"
          }
        ]
      }
    },
    "FailureUpgradeDomainProgressInfo": {
      "type": "object",
      "description": "Information about the upgrade domain progress at the time of upgrade failure.",
      "properties": {
        "DomainName": {
          "$ref": "#/definitions/UpgradeDomainName",
          "description": "The name of the upgrade domain"
        },
        "NodeUpgradeProgressList": {
          "$ref": "#/definitions/NodeUpgradeProgressInfoList",
          "description": "List of upgrading nodes and their statuses"
        }
      }
    },
    "ForceRestart": {
      "type": "boolean",
      "description": "If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).",
      "default": false
    },
    "HealthCheckRetryTimeout": {
      "type": "string",
      "description": "The amount of time to retry health evaluation when the application or cluster is unhealthy before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.",
      "default": "PT0H10M0S"
    },
    "HealthCheckStableDuration": {
      "type": "string",
      "description": "The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.",
      "default": "PT0H2M0S"
    },
    "HealthCheckWaitDuration": {
      "type": "string",
      "description": "The amount of time to wait after completing an upgrade domain before applying health policies. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.",
      "default": "0"
    },
    "HealthEvaluation": {
      "type": "object",
      "discriminator": "Kind",
      "description": "Represents a health evaluation which describes the data and the algorithm used by health manager to evaluate the health of an entity.",
      "properties": {
        "Kind": {
          "$ref": "#/definitions/HealthEvaluationKind",
          "description": "The health manager in the cluster performs health evaluations in determining the aggregated health state of an entity. This enumeration provides information on the kind of evaluation that was performed. Following are the possible values."
        },
        "AggregatedHealthState": {
          "$ref": "#/definitions/HealthState",
          "description": "The health state of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica etc."
        },
        "Description": {
          "type": "string",
          "description": "Description of the health evaluation, which represents a summary of the evaluation process."
        }
      },
      "required": [
        "Kind"
      ]
    },
    "HealthEvaluationKind": {
      "type": "string",
      "description": "The health manager in the cluster performs health evaluations in determining the aggregated health state of an entity. This enumeration provides information on the kind of evaluation that was performed. Following are the possible values.",
      "enum": [
        "Invalid",
        "Event",
        "Replicas",
        "Partitions",
        "DeployedServicePackages",
        "DeployedApplications",
        "Services",
        "Nodes",
        "Applications",
        "SystemApplication",
        "UpgradeDomainDeployedApplications",
        "UpgradeDomainNodes",
        "Replica",
        "Partition",
        "DeployedServicePackage",
        "DeployedApplication",
        "Service",
        "Node",
        "Application",
        "DeltaNodesCheck",
        "UpgradeDomainDeltaNodesCheck",
        "ApplicationTypeApplications"
      ],
      "x-ms-enum": {
        "name": "HealthEvaluationKind",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Indicates that the health evaluation is invalid. The value is zero."
          },
          {
            "value": "Event",
            "description": "Indicates that the health evaluation is for a health event. The value is 1."
          },
          {
            "value": "Replicas",
            "description": "Indicates that the health evaluation is for the replicas of a partition. The value is 2."
          },
          {
            "value": "Partitions",
            "description": "Indicates that the health evaluation is for the partitions of a service. The value is 3."
          },
          {
            "value": "DeployedServicePackages",
            "description": "Indicates that the health evaluation is for the deployed service packages of a deployed application. The value is 4."
          },
          {
            "value": "DeployedApplications",
            "description": "Indicates that the health evaluation is for the deployed applications of an application. The value is 5."
          },
          {
            "value": "Services",
            "description": "Indicates that the health evaluation is for services of an application. The value is 6."
          },
          {
            "value": "Nodes",
            "description": "Indicates that the health evaluation is for the cluster nodes. The value is 7."
          },
          {
            "value": "Applications",
            "description": "Indicates that the health evaluation is for the cluster applications. The value is 8."
          },
          {
            "value": "SystemApplication",
            "description": "Indicates that the health evaluation is for the system application. The value is 9."
          },
          {
            "value": "UpgradeDomainDeployedApplications",
            "description": "Indicates that the health evaluation is for the deployed applications of an application in an upgrade domain. The value is 10."
          },
          {
            "value": "UpgradeDomainNodes",
            "description": "Indicates that the health evaluation is for the cluster nodes in an upgrade domain. The value is 11."
          },
          {
            "value": "Replica",
            "description": "Indicates that the health evaluation is for a replica. The value is 13."
          },
          {
            "value": "Partition",
            "description": "Indicates that the health evaluation is for a partition. The value is 14."
          },
          {
            "value": "DeployedServicePackage",
            "description": "Indicates that the health evaluation is for a deployed service package. The value is 16."
          },
          {
            "value": "DeployedApplication",
            "description": "Indicates that the health evaluation is for a deployed application. The value is 17."
          },
          {
            "value": "Service",
            "description": "Indicates that the health evaluation is for a service. The value is 15."
          },
          {
            "value": "Node",
            "description": "Indicates that the health evaluation is for a node. The value is 12."
          },
          {
            "value": "Application",
            "description": "Indicates that the health evaluation is for an application. The value is 18."
          },
          {
            "value": "DeltaNodesCheck",
            "description": "Indicates that the health evaluation is for the delta of unhealthy cluster nodes. The value is 19."
          },
          {
            "value": "UpgradeDomainDeltaNodesCheck",
            "description": "Indicates that the health evaluation is for the delta of unhealthy upgrade domain cluster nodes. The value is 20."
          },
          {
            "value": "ApplicationTypeApplications",
            "description": "– Indicates that the health evaluation is for applications of an application type. The value is 21."
          }
        ]
      }
    },
    "HealthEvaluationWrapper": {
      "type": "object",
      "description": "Wrapper object for health evaluation.",
      "properties": {
        "HealthEvaluation": {
          "$ref": "#/definitions/HealthEvaluation",
          "description": "Represents a health evaluation which describes the data and the algorithm used by health manager to evaluate the health of an entity."
        }
      }
    },
    "HealthEvent": {
      "description": "Represents health information reported on a health entity, such as cluster, application or node, with additional metadata added by the Health Manager.",
      "allOf": [
        {
          "$ref": "#/definitions/HealthInformation"
        },
        {
          "type": "object",
          "description": "HealthEvent",
          "properties": {
            "IsExpired": {
              "type": "boolean",
              "description": "Returns true if the health event is expired, otherwise false."
            },
            "SourceUtcTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "The date and time when the health report was sent by the source."
            },
            "LastModifiedUtcTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "The date and time when the health report was last modified by the health store."
            },
            "LastOkTransitionAt": {
              "type": "string",
              "format": "date-time",
              "description": "If the current health state is 'Ok', this property returns the time at which the health report was first reported with 'Ok'.\nFor periodic reporting, many reports with the same state may have been generated.\nThis property returns the date and time when the first 'Ok' health report was received.\n\nIf the current health state is 'Error' or 'Warning', returns the date and time at which the health state was last in 'Ok', before transitioning to a different state.\n\nIf the health state was never 'Ok', the value will be zero date-time."
            },
            "LastWarningTransitionAt": {
              "type": "string",
              "format": "date-time",
              "description": "If the current health state is 'Warning', this property returns the time at which the health report was first reported with 'Warning'. For periodic reporting, many reports with the same state may have been generated however, this property returns only the date and time at the first 'Warning' health report was received.\n\nIf the current health state is 'Ok' or 'Error', returns the date and time at which the health state was last in 'Warning', before transitioning to a different state.\n\nIf the health state was never 'Warning', the value will be zero date-time."
            },
            "LastErrorTransitionAt": {
              "type": "string",
              "format": "date-time",
              "description": "If the current health state is 'Error', this property returns the time at which the health report was first reported with 'Error'. For periodic reporting, many reports with the same state may have been generated however, this property returns only the date and time at the first 'Error' health report was received.\n\nIf the current health state is 'Ok' or 'Warning', returns the date and time at which the health state was last in 'Error', before transitioning to a different state.\n\nIf the health state was never 'Error', the value will be zero date-time."
            }
          }
        }
      ]
    },
    "HealthInformation": {
      "type": "object",
      "description": "Represents common health report information. It is included in all health reports sent to health store and in all health events returned by health queries.",
      "required": [
        "SourceId",
        "Property",
        "HealthState"
      ],
      "properties": {
        "SourceId": {
          "type": "string",
          "description": "The source name that identifies the client/watchdog/system component that generated the health information."
        },
        "Property": {
          "type": "string",
          "description": "The property of the health information. An entity can have health reports for different properties.\nThe property is a string and not a fixed enumeration to allow the reporter flexibility to categorize the state condition that triggers the report.\nFor example, a reporter with SourceId \"LocalWatchdog\" can monitor the state of the available disk on a node,\nso it can report \"AvailableDisk\" property on that node.\nThe same reporter can monitor the node connectivity, so it can report a property \"Connectivity\" on the same node.\nIn the health store, these reports are treated as separate health events for the specified node.\n\nTogether with the SourceId, the property uniquely identifies the health information."
        },
        "HealthState": {
          "$ref": "#/definitions/HealthState",
          "description": "The health state of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica etc."
        },
        "TimeToLiveInMilliSeconds": {
          "type": "string",
          "format": "duration",
          "description": "The duration for which this health report is valid. This field uses ISO8601 format for specifying the duration.\nWhen clients report periodically, they should send reports with higher frequency than time to live.\nIf clients report on transition, they can set the time to live to infinite.\nWhen time to live expires, the health event that contains the health information\nis either removed from health store, if RemoveWhenExpired is true, or evaluated at error, if RemoveWhenExpired false.\n\nIf not specified, time to live defaults to infinite value."
        },
        "Description": {
          "type": "string",
          "description": "The description of the health information. It represents free text used to add human readable information about the report.\nThe maximum string length for the description is 4096 characters.\nIf the provided string is longer, it will be automatically truncated.\nWhen truncated, the last characters of the description contain a marker \"[Truncated]\", and total string size is 4096 characters.\nThe presence of the marker indicates to users that truncation occurred.\nNote that when truncated, the description has less than 4096 characters from the original string."
        },
        "SequenceNumber": {
          "type": "string",
          "description": "The sequence number for this health report as a numeric string.\nThe report sequence number is used by the health store to detect stale reports.\nIf not specified, a sequence number is auto-generated by the health client when a report is added."
        },
        "RemoveWhenExpired": {
          "type": "boolean",
          "description": "Value that indicates whether the report is removed from health store when it expires.\nIf set to true, the report is removed from the health store after it expires.\nIf set to false, the report is treated as an error when expired. The value of this property is false by default.\nWhen clients report periodically, they should set RemoveWhenExpired false (default).\nThis way, is the reporter has issues (eg. deadlock) and can't report, the entity is evaluated at error when the health report expires.\nThis flags the entity as being in Error health state."
        }
      }
    },
    "HealthState": {
      "type": "string",
      "description": "The health state of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica etc.",
      "enum": [
        "Invalid",
        "Ok",
        "Warning",
        "Error",
        "Unknown"
      ],
      "x-ms-enum": {
        "name": "HealthState",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Indicates an invalid health state. All Service Fabric enumerations have the invalid type. The value is zero."
          },
          {
            "value": "Ok",
            "description": "Indicates the health state is okay. The value is 1."
          },
          {
            "value": "Warning",
            "description": "Indicates the health state is at a warning level. The value is 2."
          },
          {
            "value": "Error",
            "description": "Indicates the health state is at an error level. Error health state should be investigated, as they can impact the correct functionality of the cluster. The value is 3."
          },
          {
            "value": "Unknown",
            "description": "Indicates an unknown health status. The value is 65535."
          }
        ]
      }
    },
    "Int64RangePartitionInformation": {
      "description": "Describes the partition information for the integer range that is based on partition schemes.",
      "allOf": [
        {
          "$ref": "#/definitions/PartitionInformation"
        },
        {
          "type": "object",
          "description": "StatelessServicePartitionInfo"
        }
      ],
      "x-ms-discriminator-value": "Int64Range",
      "properties": {
        "LowKey": {
          "type": "string",
          "description": "Specifies the minimum key value handled by this partition."
        },
        "HighKey": {
          "type": "string",
          "description": "Specifies the maximum key value handled by this partition."
        }
      }
    },
    "MonitoringPolicyDescription": {
      "type": "object",
      "description": "Describes the parameters for monitoring an upgrade in Monitored mode.",
      "properties": {
        "FailureAction": {
          "$ref": "#/definitions/FailureAction",
          "description": "The compensating action to perform when a Monitored upgrade encounters monitoring policy or health policy violations.\nInvalid indicates the failure action is invalid. Rollback specifies that the upgrade will start rolling back automatically.\nManual indicates that the upgrade will switch to UnmonitoredManual upgrade mode."
        },
        "HealthCheckWaitDurationInMilliseconds": {
          "$ref": "#/definitions/HealthCheckWaitDuration",
          "description": "The amount of time to wait after completing an upgrade domain before applying health policies. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds."
        },
        "HealthCheckStableDurationInMilliseconds": {
          "$ref": "#/definitions/HealthCheckStableDuration",
          "description": "The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds."
        },
        "HealthCheckRetryTimeoutInMilliseconds": {
          "$ref": "#/definitions/HealthCheckRetryTimeout",
          "description": "The amount of time to retry health evaluation when the application or cluster is unhealthy before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds."
        },
        "UpgradeTimeoutInMilliseconds": {
          "$ref": "#/definitions/UpgradeTimeout",
          "description": "The amount of time the overall upgrade has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds."
        },
        "UpgradeDomainTimeoutInMilliseconds": {
          "$ref": "#/definitions/UpgradeDomainTimeout",
          "description": "The amount of time each upgrade domain has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds."
        }
      }
    },
    "NamedPartitionInformation": {
      "description": "Describes the partition information for the name as a string that is based on partition schemes.",
      "allOf": [
        {
          "$ref": "#/definitions/PartitionInformation"
        },
        {
          "type": "object",
          "description": "StatelessServicePartitionInfo"
        }
      ],
      "x-ms-discriminator-value": "Named",
      "properties": {
        "Name": {
          "type": "string",
          "description": "Name of the partition."
        }
      }
    },
    "NextUpgradeDomain": {
      "type": "string",
      "description": "The name of the next upgrade domain to be processed."
    },
    "NodeDeactivationInfo": {
      "type": "object",
      "description": "Information about the node deactivation. This information is valid for a node that is undergoing deactivation or has already been deactivated.",
      "properties": {
        "NodeDeactivationIntent": {
          "$ref": "#/definitions/NodeDeactivationIntent",
          "description": "The intent or the reason for deactivating the node. Following are the possible values for it."
        },
        "NodeDeactivationStatus": {
          "$ref": "#/definitions/NodeDeactivationStatus",
          "description": "The status of node deactivation operation. Following are the possible values."
        },
        "NodeDeactivationTask": {
          "$ref": "#/definitions/NodeDeactivationTaskList",
          "description": "List of tasks representing the deactivation operation on the node."
        },
        "PendingSafetyChecks": {
          "$ref": "#/definitions/SafetyCheckInfoList",
          "description": "List of pending safety checks"
        }
      }
    },
    "NodeDeactivationIntent": {
      "type": "string",
      "description": "The intent or the reason for deactivating the node. Following are the possible values for it.",
      "enum": [
        "Invalid",
        "Pause",
        "Restart",
        "RemoveData",
        "RemoveNode"
      ],
      "x-ms-enum": {
        "name": "NodeDeactivationIntent",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Indicates the node deactivation intent is invalid. All Service Fabric enumerations have the invalid type. The value is zero. This value is not used."
          },
          {
            "value": "Pause",
            "description": "Indicates that the node should be paused. The value is 1."
          },
          {
            "value": "Restart",
            "description": "Indicates that the intent is for the node to be restarted after a short period of time. Service Fabric does not restart the node, this action is done outside of Service Fabric. The value is 2."
          },
          {
            "value": "RemoveData",
            "description": "Indicates that the intent is to reimage the node. Service Fabric does not reimage the node, this action is done outside of Service Fabric. The value is 3."
          },
          {
            "value": "RemoveNode",
            "description": "Indicates that the node is being decommissioned and is not expected to return. Service Fabric does not decommission the node, this action is done outside of Service Fabric. The value is 4."
          }
        ]
      }
    },
    "NodeDeactivationStatus": {
      "type": "string",
      "description": "The status of node deactivation operation. Following are the possible values.",
      "enum": [
        "None",
        "SafetyCheckInProgress",
        "SafetyCheckComplete",
        "Completed"
      ],
      "x-ms-enum": {
        "name": "NodeDeactivationStatus",
        "modelAsString": true,
        "values": [
          {
            "value": "None",
            "description": "No status is associated with the task. The value is zero."
          },
          {
            "value": "SafetyCheckInProgress",
            "description": "When a node is deactivated Service Fabric performs checks to ensure that the operation is safe to proceed to ensure availability of the service and reliability of the state. This value indicates that one or more safety checks are in progress. The value is 1."
          },
          {
            "value": "SafetyCheckComplete",
            "description": "When a node is deactivated Service Fabric performs checks to ensure that the operation is safe to proceed to ensure availability of the service and reliability of the state. This value indicates that all safety checks have been completed. The value is 2."
          },
          {
            "value": "Completed",
            "description": "The task is completed. The value is 3."
          }
        ]
      }
    },
    "NodeDeactivationTask": {
      "type": "object",
      "description": "The task representing the deactivation operation on the node.",
      "properties": {
        "NodeDeactivationTaskId": {
          "$ref": "#/definitions/NodeDeactivationTaskId",
          "description": "Identity of the task related to deactivation operation on the node."
        },
        "NodeDeactivationIntent": {
          "$ref": "#/definitions/NodeDeactivationIntent",
          "description": "The intent or the reason for deactivating the node. Following are the possible values for it."
        }
      }
    },
    "NodeDeactivationTaskId": {
      "type": "object",
      "description": "Identity of the task related to deactivation operation on the node.",
      "properties": {
        "Id": {
          "type": "string",
          "description": "Value of the task id."
        },
        "NodeDeactivationTaskType": {
          "$ref": "#/definitions/NodeDeactivationTaskType",
          "description": "The type of the task that performed the node deactivation. Following are the possible values."
        }
      }
    },
    "NodeDeactivationTaskList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/NodeDeactivationTask"
      },
      "description": "List of tasks representing the deactivation operation on the node."
    },
    "NodeDeactivationTaskType": {
      "type": "string",
      "description": "The type of the task that performed the node deactivation. Following are the possible values.",
      "enum": [
        "Invalid",
        "Infrastructure",
        "Repair",
        "Client"
      ],
      "x-ms-enum": {
        "name": "NodeDeactivationTaskType",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Indicates the node deactivation task type is invalid. All Service Fabric enumerations have the invalid type. The value is zero. This value is not used."
          },
          {
            "value": "Infrastructure",
            "description": "Specifies the task created by Infrastructure hosting the nodes. The value is 1."
          },
          {
            "value": "Repair",
            "description": "Specifies the task that was created by the Repair Manager service. The value is 2."
          },
          {
            "value": "Client",
            "description": "Specifies that the task was created by using the public API. The value is 3."
          }
        ]
      }
    },
    "NodeEvent": {
      "description": "Represents the base for all Node Events.",
      "allOf": [
        {
          "$ref": "#/definitions/FabricEvent"
        },
        {
          "type": "object",
          "description": "NodeEvent",
          "properties": {
            "NodeName": {
              "$ref": "#/definitions/NodeName",
              "description": "The name of a Service Fabric node."
            }
          },
          "required": [
            "NodeName"
          ]
        }
      ],
      "x-ms-discriminator-value": "NodeEvent"
    },
    "NodeEventList": {
      "description": "A list of NodeEvent objects.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/NodeEvent"
      }
    },
    "NodeHealth": {
      "description": "Information about the health of a Service Fabric node.",
      "allOf": [
        {
          "$ref": "#/definitions/EntityHealth"
        },
        {
          "type": "object",
          "description": "NodeHealth",
          "properties": {
            "Name": {
              "$ref": "#/definitions/NodeName",
              "description": "Name of the node whose health information is described by this object."
            }
          }
        }
      ]
    },
    "NodeHealthEvaluation": {
      "x-ms-discriminator-value": "Node",
      "description": "Represents health evaluation for a node, containing information about the data and the algorithm used by health store to evaluate health. The evaluation is returned only when the aggregated health state is either Error or Warning.",
      "allOf": [
        {
          "$ref": "#/definitions/HealthEvaluation"
        },
        {
          "type": "object",
          "description": "NodeHealthEvaluation",
          "properties": {
            "NodeName": {
              "$ref": "#/definitions/NodeName",
              "description": "The name of a Service Fabric node."
            },
            "UnhealthyEvaluations": {
              "$ref": "#/definitions/UnhealthyEvaluations",
              "description": "List of unhealthy evaluations that led to the current aggregated health state of the node. The types of the unhealthy evaluations can be EventHealthEvaluation."
            }
          }
        }
      ]
    },
    "NodeHealthState": {
      "description": "Represents the health state of a node, which contains the node identifier and its aggregated health state.",
      "allOf": [
        {
          "$ref": "#/definitions/EntityHealthState"
        },
        {
          "type": "object",
          "description": "NodeHealthState",
          "properties": {
            "Name": {
              "$ref": "#/definitions/NodeName",
              "description": "The name of a Service Fabric node."
            },
            "Id": {
              "$ref": "#/definitions/NodeId",
              "description": "An internal ID used by Service Fabric to uniquely identify a node. Node Id is deterministically generated from node name."
            }
          }
        }
      ]
    },
    "NodeHealthStateChunk": {
      "description": "Represents the health state chunk of a node, which contains the node name and its aggregated health state.",
      "allOf": [
        {
          "$ref": "#/definitions/EntityHealthStateChunk"
        },
        {
          "type": "object",
          "description": "NodeHealthStateChunk",
          "properties": {
            "NodeName": {
              "$ref": "#/definitions/NodeName",
              "description": "The name of a Service Fabric node."
            }
          }
        }
      ]
    },
    "NodeHealthStateChunkList": {
      "type": "object",
      "description": "The list of node health state chunks in the cluster that respect the input filters in the chunk query. Returned by get cluster health state chunks query.",
      "allOf": [
        {
          "$ref": "#/definitions/EntityHealthStateChunkList"
        },
        {
          "type": "object",
          "description": "NodeHealthStateChunkList",
          "properties": {
            "Items": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NodeHealthStateChunk"
              },
              "description": "The list of node health state chunks that respect the input filters in the chunk query."
            }
          }
        }
      ]
    },
    "NodeHealthStateFilter": {
      "type": "object",
      "description": "Defines matching criteria to determine whether a node should be included in the returned cluster health chunk.\nOne filter can match zero, one or multiple nodes, depending on its properties.\nCan be specified in the cluster health chunk query description.",
      "properties": {
        "NodeNameFilter": {
          "type": "string",
          "description": "Name of the node that matches the filter. The filter is applied only to the specified node, if it exists.\nIf the node doesn't exist, no node is returned in the cluster health chunk based on this filter.\nIf the node exists, it is included in the cluster health chunk if the health state matches the other filter properties.\nIf not specified, all nodes that match the parent filters (if any) are taken into consideration and matched against the other filter members, like health state filter."
        },
        "HealthStateFilter": {
          "type": "integer",
          "default": 0,
          "description": "The filter for the health state of the nodes. It allows selecting nodes if they match the desired health states.\nThe possible values are integer value of one of the following health states. Only nodes that match the filter are returned. All nodes are used to evaluate the cluster aggregated health state.\nIf not specified, default value is None, unless the node name is specified. If the filter has default value and node name is specified, the matching node is returned.\nThe state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.\nFor example, if the provided value is 6, it matches nodes with HealthState value of OK (2) and Warning (4).\n\n- Default - Default value. Matches any HealthState. The value is zero.\n- None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.\n- Ok - Filter that matches input with HealthState value Ok. The value is 2.\n- Warning - Filter that matches input with HealthState value Warning. The value is 4.\n- Error - Filter that matches input with HealthState value Error. The value is 8.\n- All - Filter that matches input with any HealthState value. The value is 65535."
        }
      }
    },
    "NodeId": {
      "type": "object",
      "description": "An internal ID used by Service Fabric to uniquely identify a node. Node Id is deterministically generated from node name.",
      "properties": {
        "Id": {
          "type": "string",
          "description": "Value of the node Id. This is a 128 bit integer."
        }
      }
    },
    "NodeIdList": {
      "description": "A list of NodeIds.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/NodeId"
      }
    },
    "NodeInfo": {
      "type": "object",
      "description": "Information about a node in Service Fabric cluster.",
      "properties": {
        "Name": {
          "$ref": "#/definitions/NodeName",
          "description": "The name of a Service Fabric node."
        },
        "IpAddressOrFQDN": {
          "type": "string",
          "description": "The IP address or fully qualified domain name of the node."
        },
        "Type": {
          "type": "string",
          "description": "The type of the node."
        },
        "CodeVersion": {
          "type": "string",
          "description": "The version of Service Fabric binaries that the node is running."
        },
        "ConfigVersion": {
          "type": "string",
          "description": "The version of Service Fabric cluster manifest that the node is using."
        },
        "NodeStatus": {
          "$ref": "#/definitions/NodeStatus",
          "description": "The status of the node."
        },
        "NodeUpTimeInSeconds": {
          "type": "string",
          "description": "Time in seconds since the node has been in NodeStatus Up. Value zero indicates that the node is not Up."
        },
        "HealthState": {
          "$ref": "#/definitions/HealthState",
          "description": "The health state of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica etc."
        },
        "IsSeedNode": {
          "type": "boolean",
          "description": "Indicates if the node is a seed node or not. Returns true if the node is a seed node, otherwise false. A quorum of seed nodes are required for proper operation of Service Fabric cluster."
        },
        "UpgradeDomain": {
          "type": "string",
          "description": "The upgrade domain of the node."
        },
        "FaultDomain": {
          "type": "string",
          "description": "The fault domain of the node."
        },
        "Id": {
          "$ref": "#/definitions/NodeId",
          "description": "An internal ID used by Service Fabric to uniquely identify a node. Node Id is deterministically generated from node name."
        },
        "InstanceId": {
          "type": "string",
          "description": "The ID representing the node instance. While the ID of the node is deterministically generated from the node name and remains same across restarts, the InstanceId changes every time node restarts."
        },
        "NodeDeactivationInfo": {
          "$ref": "#/definitions/NodeDeactivationInfo",
          "description": "Information about the node deactivation. This information is valid for a node that is undergoing deactivation or has already been deactivated."
        },
        "IsStopped": {
          "type": "boolean",
          "description": "Indicates if the node is stopped by calling stop node API or not. Returns true if the node is stopped, otherwise false."
        },
        "NodeDownTimeInSeconds": {
          "type": "string",
          "description": "Time in seconds since the node has been in NodeStatus Down. Value zero indicates node is not NodeStatus Down."
        },
        "NodeUpAt": {
          "type": "string",
          "format": "date-time",
          "description": "Date time in UTC when the node came up. If the node has never been up then this value will be zero date time."
        },
        "NodeDownAt": {
          "type": "string",
          "format": "date-time",
          "description": "Date time in UTC when the node went down. If node has never been down then this value will be zero date time."
        }
      }
    },
    "NodeLoadInfo": {
      "type": "object",
      "description": "Information about load on a Service Fabric node. It holds a summary of all metrics and their load on a node.",
      "properties": {
        "NodeName": {
          "$ref": "#/definitions/NodeName",
          "description": "Name of the node for which the load information is provided by this object."
        },
        "NodeLoadMetricInformation": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NodeLoadMetricInformation"
          },
          "description": "List that contains metrics and their load information on this node."
        }
      }
    },
    "NodeLoadMetricInformation": {
      "type": "object",
      "description": "Represents data structure that contains load information for a certain metric on a node.",
      "properties": {
        "Name": {
          "type": "string",
          "description": "Name of the metric for which this load information is provided."
        },
        "NodeCapacity": {
          "type": "string",
          "description": "Total capacity on the node for this metric."
        },
        "NodeLoad": {
          "type": "string",
          "description": "Current load on the node for this metric."
        },
        "NodeRemainingCapacity": {
          "type": "string",
          "description": "The remaining capacity on the node for this metric."
        },
        "IsCapacityViolation": {
          "type": "boolean",
          "description": "Indicates if there is a capacity violation for this metric on the node."
        },
        "NodeBufferedCapacity": {
          "type": "string",
          "description": "The value that indicates the reserved capacity for this metric on the node."
        },
        "NodeRemainingBufferedCapacity": {
          "type": "string",
          "description": "The remaining reserved capacity for this metric on the node."
        }
      }
    },
    "NodeName": {
      "type": "string",
      "description": "The name of a Service Fabric node."
    },
    "NodeType": {
      "type": "string",
      "description": "The type name of a Service Fabric node.\nRefer to the article [The relationship between Service Fabric node types and Virtual Machine Scale Sets](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-nodetypes) for more details."
    },
    "NodesHealthEvaluation": {
      "x-ms-discriminator-value": "Nodes",
      "description": "Represents health evaluation for nodes, containing health evaluations for each unhealthy node that impacted current aggregated health state. Can be returned when evaluating cluster health and the aggregated health state is either Error or Warning.",
      "allOf": [
        {
          "$ref": "#/definitions/HealthEvaluation"
        },
        {
          "type": "object",
          "description": "NodesHealthEvaluation",
          "properties": {
            "MaxPercentUnhealthyNodes": {
              "type": "integer",
              "description": "Maximum allowed percentage of unhealthy nodes from the ClusterHealthPolicy."
            },
            "TotalCount": {
              "type": "integer",
              "format": "int64",
              "description": "Total number of nodes found in the health store."
            },
            "UnhealthyEvaluations": {
              "$ref": "#/definitions/UnhealthyEvaluations",
              "description": "List of unhealthy evaluations that led to the aggregated health state. Includes all the unhealthy NodeHealthEvaluation that impacted the aggregated health."
            }
          }
        }
      ]
    },
    "NodeStatus": {
      "type": "string",
      "description": "The status of the node.",
      "enum": [
        "Invalid",
        "Up",
        "Down",
        "Enabling",
        "Disabling",
        "Disabled",
        "Unknown",
        "Removed"
      ],
      "x-ms-enum": {
        "name": "NodeStatus",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Indicates the node status is invalid. All Service Fabric enumerations have the invalid type. The value is zero."
          },
          {
            "value": "Up",
            "description": "Indicates the node is up. The value is 1."
          },
          {
            "value": "Down",
            "description": "Indicates the node is down. The value is 2."
          },
          {
            "value": "Enabling",
            "description": "Indicates the node is in process of being enabled. The value is 3."
          },
          {
            "value": "Disabling",
            "description": "Indicates the node is in the process of being disabled. The value is 4."
          },
          {
            "value": "Disabled",
            "description": "Indicates the node is disabled. The value is 5."
          },
          {
            "value": "Unknown",
            "description": "Indicates the node is unknown. A node would be in Unknown state if Service Fabric does not have authoritative information about that node. This can happen if the system learns about a node at runtime.The value is 6."
          },
          {
            "value": "Removed",
            "description": "Indicates the node is removed. A node would be in Removed state if NodeStateRemoved API has been called for this node. In other words, Service Fabric has been informed that the persisted state on the node has been permanently lost. The value is 7."
          }
        ]
      }
    },
    "NodeUpgradePhase": {
      "type": "string",
      "description": "The state of the upgrading node.",
      "enum": [
        "Invalid",
        "PreUpgradeSafetyCheck",
        "Upgrading",
        "PostUpgradeSafetyCheck"
      ],
      "x-ms-enum": {
        "name": "NodeUpgradePhase",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Indicates the upgrade state is invalid. All Service Fabric enumerations have the invalid type. The value is zero."
          },
          {
            "value": "PreUpgradeSafetyCheck",
            "description": "The upgrade has not started yet due to pending safety checks. The value is 1"
          },
          {
            "value": "Upgrading",
            "description": "The upgrade is in progress. The value is 2"
          },
          {
            "value": "PostUpgradeSafetyCheck",
            "description": "The upgrade has completed and post upgrade safety checks are being performed. The value is 3"
          }
        ]
      }
    },
    "NodeUpgradeProgressInfo": {
      "type": "object",
      "description": "Information about the upgrading node and its status",
      "properties": {
        "NodeName": {
          "$ref": "#/definitions/NodeName",
          "description": "The name of a Service Fabric node."
        },
        "UpgradePhase": {
          "$ref": "#/definitions/NodeUpgradePhase",
          "description": "The state of the upgrading node."
        },
        "PendingSafetyChecks": {
          "$ref": "#/definitions/SafetyCheckInfoList",
          "description": "List of pending safety checks"
        }
      }
    },
    "NodeUpgradeProgressInfoList": {
      "type": "array",
      "description": "List of upgrading nodes and their statuses",
      "items": {
        "$ref": "#/definitions/NodeUpgradeProgressInfo"
      }
    },
    "PagedApplicationInfoList": {
      "type": "object",
      "description": "The list of applications in the cluster. The list is paged when all of the results cannot fit in a single message. The next set of results can be obtained by executing the same query with the continuation token provided in this list.",
      "properties": {
        "ContinuationToken": {
          "$ref": "#/definitions/ContinuationToken",
          "description": "The continuation token parameter is used to obtain next set of results. The continuation token is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token is not included in the response."
        },
        "Items": {
          "type": "array",
          "description": "List of application information.",
          "items": {
            "$ref": "#/definitions/ApplicationInfo"
          }
        }
      }
    },
    "PagedDeployedApplicationInfoList": {
      "type": "object",
      "description": "The list of deployed applications in activating, downloading, or active states on a node.\nThe list is paged when all of the results cannot fit in a single message.\nThe next set of results can be obtained by executing the same query with the continuation token provided in this list.",
      "properties": {
        "ContinuationToken": {
          "$ref": "#/definitions/ContinuationToken",
          "description": "The continuation token parameter is used to obtain next set of results. The continuation token is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token is not included in the response."
        },
        "Items": {
          "type": "array",
          "description": "List of deployed application information.",
          "items": {
            "$ref": "#/definitions/DeployedApplicationInfo"
          }
        }
      }
    },
    "PagedNodeInfoList": {
      "type": "object",
      "description": "The list of nodes in the cluster. The list is paged when all of the results cannot fit in a single message. The next set of results can be obtained by executing the same query with the continuation token provided in this list.",
      "properties": {
        "ContinuationToken": {
          "$ref": "#/definitions/ContinuationToken",
          "description": "The continuation token parameter is used to obtain next set of results. The continuation token is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token is not included in the response."
        },
        "Items": {
          "type": "array",
          "description": "List of node information.",
          "items": {
            "$ref": "#/definitions/NodeInfo"
          }
        }
      }
    },
    "PagedServicePartitionInfoList": {
      "type": "object",
      "description": "The list of partition in the cluster for a service. The list is paged when all of the results cannot fit in a single message. The next set of results can be obtained by executing the same query with the continuation token provided in this list.",
      "properties": {
        "ContinuationToken": {
          "$ref": "#/definitions/ContinuationToken",
          "description": "The continuation token parameter is used to obtain next set of results. The continuation token is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token is not included in the response."
        },
        "Items": {
          "type": "array",
          "description": "List of service partition information.",
          "items": {
            "$ref": "#/definitions/ServicePartitionInfo"
          }
        }
      }
    },
    "PagedReplicaInfoList": {
      "type": "object",
      "description": "The list of replicas in the cluster for a given partition. The list is paged when all of the results cannot fit in a single message. The next set of results can be obtained by executing the same query with the continuation token provided in this list.",
      "properties": {
        "ContinuationToken": {
          "$ref": "#/definitions/ContinuationToken",
          "description": "The continuation token parameter is used to obtain next set of results. The continuation token is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token is not included in the response."
        },
        "Items": {
          "type": "array",
          "description": "List of replica information.",
          "items": {
            "$ref": "#/definitions/ReplicaInfo"
          }
        }
      }
    },
    "PagedServiceInfoList": {
      "type": "object",
      "description": "The list of services in the cluster for an application. The list is paged when all of the results cannot fit in a single message. The next set of results can be obtained by executing the same query with the continuation token provided in this list.",
      "properties": {
        "ContinuationToken": {
          "$ref": "#/definitions/ContinuationToken",
          "description": "The continuation token parameter is used to obtain next set of results. The continuation token is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token is not included in the response."
        },
        "Items": {
          "type": "array",
          "description": "List of service information.",
          "items": {
            "$ref": "#/definitions/ServiceInfo"
          }
        }
      }
    },
    "PartitionAnalysisEvent": {
      "description": "Represents the base for all Partition Analysis Events.",
      "allOf": [
        {
          "$ref": "#/definitions/PartitionEvent"
        },
        {
          "type": "object",
          "description": "PartitionAnalysisEvent",
          "properties": {
            "Metadata": {
              "$ref": "#/definitions/AnalysisEventMetadata",
              "description": "Metadata about an Analysis Event."
            }
          },
          "required": [
            "Metadata"
          ]
        }
      ],
      "x-ms-discriminator-value": "PartitionAnalysisEvent"
    },
    "PartitionEvent": {
      "description": "Represents the base for all Partition Events.",
      "allOf": [
        {
          "$ref": "#/definitions/FabricEvent"
        },
        {
          "type": "object",
          "description": "PartitionEvent",
          "properties": {
            "PartitionId": {
              "$ref": "#/definitions/PartitionId",
              "description": "An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be different."
            }
          },
          "required": [
            "PartitionId"
          ]
        }
      ],
      "x-ms-discriminator-value": "PartitionEvent"
    },
    "PartitionEventList": {
      "description": "A list of PartitionEvent objects.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/PartitionEvent"
      }
    },
    "PartitionHealth": {
      "description": "Information about the health of a Service Fabric partition.",
      "allOf": [
        {
          "$ref": "#/definitions/EntityHealth"
        },
        {
          "type": "object",
          "description": "PartitionHealth",
          "properties": {
            "PartitionId": {
              "$ref": "#/definitions/PartitionId",
              "description": "ID of the partition whose health information is described by this object."
            },
            "ReplicaHealthStates": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ReplicaHealthState"
              },
              "description": "The list of replica health states associated with the partition."
            }
          }
        }
      ]
    },
    "PartitionHealthEvaluation": {
      "x-ms-discriminator-value": "Partition",
      "description": "Represents health evaluation for a partition, containing information about the data and the algorithm used by health store to evaluate health. The evaluation is returned only when the aggregated health state is either Error or Warning.",
      "allOf": [
        {
          "$ref": "#/definitions/HealthEvaluation"
        },
        {
          "type": "object",
          "description": "PartitionHealthEvaluation",
          "properties": {
            "PartitionId": {
              "$ref": "#/definitions/PartitionId",
              "description": "Id of the partition whose health evaluation is described by this object."
            },
            "UnhealthyEvaluations": {
              "$ref": "#/definitions/UnhealthyEvaluations",
              "description": "List of unhealthy evaluations that led to the current aggregated health state of the partition. The types of the unhealthy evaluations can be ReplicasHealthEvaluation or EventHealthEvaluation."
            }
          }
        }
      ]
    },
    "PartitionHealthState": {
      "description": "Represents the health state of a partition, which contains the partition identifier and its aggregated health state.",
      "allOf": [
        {
          "$ref": "#/definitions/EntityHealthState"
        },
        {
          "type": "object",
          "description": "PartitionHealthState",
          "properties": {
            "PartitionId": {
              "$ref": "#/definitions/PartitionId",
              "description": "Id of the partition whose health state is described by this object."
            }
          }
        }
      ]
    },
    "PartitionHealthStateChunk": {
      "description": "Represents the health state chunk of a partition, which contains the partition ID, its aggregated health state and any replicas that respect the filters in the cluster health chunk query description.",
      "allOf": [
        {
          "$ref": "#/definitions/EntityHealthStateChunk"
        },
        {
          "type": "object",
          "description": "PartitionHealthStateChunk",
          "properties": {
            "PartitionId": {
              "$ref": "#/definitions/PartitionId",
              "description": "The Id of the partition."
            },
            "ReplicaHealthStateChunks": {
              "$ref": "#/definitions/ReplicaHealthStateChunkList",
              "description": "The list of replica health state chunks belonging to the partition that respect the filters in the cluster health chunk query description."
            }
          }
        }
      ]
    },
    "PartitionHealthStateChunkList": {
      "type": "object",
      "description": "The list of partition health state chunks that respect the input filters in the chunk query description.\nReturned by get cluster health state chunks query as part of the parent application hierarchy.",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PartitionHealthStateChunk"
          },
          "description": "The list of partition health state chunks that respect the input filters in the chunk query."
        }
      }
    },
    "PartitionHealthStateFilter": {
      "type": "object",
      "description": "Defines matching criteria to determine whether a partition should be included as a child of a service in the cluster health chunk.\nThe partitions are only returned if the parent entities match a filter specified in the cluster health chunk query description. The parent service and application must be included in the cluster health chunk.\nOne filter can match zero, one or multiple partitions, depending on its properties.",
      "properties": {
        "PartitionIdFilter": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the partition that matches the filter. The filter is applied only to the specified partition, if it exists.\nIf the partition doesn't exist, no partition is returned in the cluster health chunk based on this filter.\nIf the partition exists, it is included in the cluster health chunk if it respects the other filter properties.\nIf not specified, all partitions that match the parent filters (if any) are taken into consideration and matched against the other filter members, like health state filter."
        },
        "HealthStateFilter": {
          "type": "integer",
          "default": 0,
          "description": "The filter for the health state of the partitions. It allows selecting partitions if they match the desired health states.\nThe possible values are integer value of one of the following health states. Only partitions that match the filter are returned. All partitions are used to evaluate the cluster aggregated health state.\nIf not specified, default value is None, unless the partition ID is specified. If the filter has default value and partition ID is specified, the matching partition is returned.\nThe state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.\nFor example, if the provided value is 6, it matches partitions with HealthState value of OK (2) and Warning (4).\n\n- Default - Default value. Matches any HealthState. The value is zero.\n- None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.\n- Ok - Filter that matches input with HealthState value Ok. The value is 2.\n- Warning - Filter that matches input with HealthState value Warning. The value is 4.\n- Error - Filter that matches input with HealthState value Error. The value is 8.\n- All - Filter that matches input with any HealthState value. The value is 65535."
        },
        "ReplicaFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReplicaHealthStateFilter"
          },
          "description": "Defines a list of filters that specify which replicas to be included in the returned cluster health chunk as children of the parent partition. The replicas are returned only if the parent partition matches a filter.\nIf the list is empty, no replicas are returned. All the replicas are used to evaluate the parent partition aggregated health state, regardless of the input filters.\nThe partition filter may specify multiple replica filters.\nFor example, it can specify a filter to return all replicas with health state Error and another filter to always include a replica identified by its replica id."
        }
      }
    },
    "PartitionId": {
      "type": "string",
      "format": "uuid",
      "description": "An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be different."
    },
    "PartitionInformation": {
      "type": "object",
      "discriminator": "ServicePartitionKind",
      "description": "Information about the partition identity, partitioning scheme and keys supported by it.",
      "required": [
        "ServicePartitionKind"
      ],
      "properties": {
        "ServicePartitionKind": {
          "$ref": "#/definitions/ServicePartitionKind",
          "description": "The kind of partitioning scheme used to partition the service."
        },
        "Id": {
          "$ref": "#/definitions/PartitionId",
          "description": "An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be different."
        }
      }
    },
    "ProvisionFabricDescription": {
      "type": "object",
      "description": "Describes the parameters for provisioning a cluster.",
      "properties": {
        "CodeFilePath": {
          "type": "string",
          "description": "The cluster code package file path."
        },
        "ClusterManifestFilePath": {
          "type": "string",
          "description": "The cluster manifest file path."
        }
      }
    },
    "ProvisionApplicationTypeKind": {
      "type": "string",
      "description": "The kind of application type registration or provision requested. The application package can be registered or provisioned either from the image store or from an external store. Following are the kinds of the application type provision.",
      "enum": [
        "Invalid",
        "ImageStorePath",
        "ExternalStore"
      ],
      "x-ms-enum": {
        "name": "ProvisionApplicationTypeKind",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Indicates that the provision kind is invalid. This value is default and should not be used. The value is zero."
          },
          {
            "value": "ImageStorePath",
            "description": "Indicates that the provision is for a package that was previously uploaded to the image store. The value is 1."
          },
          {
            "value": "ExternalStore",
            "description": "Indicates that the provision is for an application package that was previously uploaded to an external store. The application package ends with the extension *.sfpkg. The value is 2."
          }
        ]
      }
    },
    "ProvisionApplicationTypeDescriptionBase": {
      "type": "object",
      "discriminator": "Kind",
      "description": "Represents the type of registration or provision requested, and if the operation needs to be asynchronous or not. Supported types of provision operations are from either image store or external store.",
      "properties": {
        "Kind": {
          "$ref": "#/definitions/ProvisionApplicationTypeKind",
          "description": "The kind of application type registration or provision requested. The application package can be registered or provisioned either from the image store or from an external store. Following are the kinds of the application type provision."
        },
        "Async": {
          "type": "boolean",
          "description": "Indicates whether or not provisioning should occur asynchronously. When set to true, the provision operation returns when the request is accepted by the system, and the provision operation continues without any timeout limit. The default value is false. For large application packages, we recommend setting the value to true."
        }
      },
      "required": [
        "Kind",
        "Async"
      ]
    },
    "ProvisionApplicationTypeDescription": {
      "description": "Describes the operation to register or provision an application type using an application package uploaded to the Service Fabric image store.",
      "required": [
        "ApplicationTypeBuildPath"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ProvisionApplicationTypeDescriptionBase"
        },
        {
          "type": "object",
          "description": "ProvisionApplicationTypeDescription",
          "properties": {
            "ApplicationTypeBuildPath": {
              "description": "The relative path for the application package in the image store specified during the prior upload operation.",
              "type": "string"
            },
            "ApplicationPackageCleanupPolicy": {
              "$ref": "#/definitions/ApplicationPackageCleanupPolicy",
              "description": "The kind of action that needs to be taken for cleaning up the application package after successful provision."
            }
          }
        }
      ],
      "x-ms-discriminator-value": "ImageStorePath"
    },
    "ExternalStoreProvisionApplicationTypeDescription": {
      "description": "Describes the operation to register or provision an application type using an application package from an external store instead of a package uploaded to the Service Fabric image store.",
      "allOf": [
        {
          "$ref": "#/definitions/ProvisionApplicationTypeDescriptionBase"
        },
        {
          "type": "object",
          "description": "ExternalStoreProvisionApplicationTypeDescription",
          "properties": {
            "ApplicationPackageDownloadUri": {
              "description": "The path to the '.sfpkg' application package from where the application package can be downloaded using HTTP or HTTPS protocols. The application package can be stored in an external store that provides GET operation to download the file. Supported protocols are HTTP and HTTPS, and the path must allow READ access.",
              "type": "string"
            },
            "ApplicationTypeName": {
              "description": "The application type name represents the name of the application type found in the application manifest.",
              "type": "string"
            },
            "ApplicationTypeVersion": {
              "description": "The application type version represents the version of the application type found in the application manifest.",
              "type": "string"
            }
          }
        }
      ],
      "x-ms-discriminator-value": "ExternalStore",
      "required": [
        "ApplicationPackageDownloadUri",
        "ApplicationTypeName",
        "ApplicationTypeVersion"
      ]
    },
    "UnprovisionFabricDescription": {
      "type": "object",
      "description": "Describes the parameters for unprovisioning a cluster.",
      "properties": {
        "CodeVersion": {
          "type": "string",
          "description": "The cluster code package version."
        },
        "ConfigVersion": {
          "type": "string",
          "description": "The cluster manifest version."
        }
      }
    },
    "ResumeClusterUpgradeDescription": {
      "type": "object",
      "description": "Describes the parameters for resuming a cluster upgrade.",
      "properties": {
        "UpgradeDomain": {
          "type": "string",
          "description": "The next upgrade domain for this cluster upgrade."
        }
      },
      "required": [
        "UpgradeDomain"
      ]
    },
    "StartClusterUpgradeDescription": {
      "type": "object",
      "description": "Describes the parameters for starting a cluster upgrade.",
      "properties": {
        "CodeVersion": {
          "type": "string",
          "description": "The cluster code version."
        },
        "ConfigVersion": {
          "type": "string",
          "description": "The cluster configuration version."
        },
        "UpgradeKind": {
          "$ref": "#/definitions/UpgradeKind",
          "description": "The kind of upgrade out of the following possible values."
        },
        "RollingUpgradeMode": {
          "$ref": "#/definitions/UpgradeMode",
          "description": "The mode used to monitor health during a rolling upgrade. The values are UnmonitoredAuto, UnmonitoredManual, and Monitored."
        },
        "UpgradeReplicaSetCheckTimeoutInSeconds": {
          "$ref": "#/definitions/UpgradeReplicaSetCheckTimeout",
          "description": "The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer)."
        },
        "ForceRestart": {
          "$ref": "#/definitions/ForceRestart",
          "description": "If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data)."
        },
        "MonitoringPolicy": {
          "$ref": "#/definitions/MonitoringPolicyDescription",
          "description": "Describes the parameters for monitoring an upgrade in Monitored mode."
        },
        "ClusterHealthPolicy": {
          "$ref": "#/definitions/ClusterHealthPolicy",
          "description": "Defines a health policy used to evaluate the health of the cluster or of a cluster node."
        },
        "EnableDeltaHealthEvaluation": {
          "type": "boolean",
          "description": "When true, enables delta health evaluation rather than absolute health evaluation after completion of each upgrade domain."
        },
        "ClusterUpgradeHealthPolicy": {
          "$ref": "#/definitions/ClusterUpgradeHealthPolicyObject",
          "description": "Defines a health policy used to evaluate the health of the cluster during a cluster upgrade."
        },
        "ApplicationHealthPolicyMap": {
          "$ref": "#/definitions/ApplicationHealthPolicies",
          "description": "Defines the application health policy map used to evaluate the health of an application or one of its children entities."
        }
      }
    },
    "UpdateClusterUpgradeDescription": {
      "description": "Parameters for updating a cluster upgrade.",
      "properties": {
        "UpgradeKind": {
          "$ref": "#/definitions/UpgradeType",
          "description": "The type of upgrade out of the following possible values."
        },
        "UpdateDescription": {
          "$ref": "#/definitions/RollingUpgradeUpdateDescription",
          "description": "Describes the parameters for updating a rolling upgrade of application or cluster."
        },
        "ClusterHealthPolicy": {
          "$ref": "#/definitions/ClusterHealthPolicy",
          "description": "Defines a health policy used to evaluate the health of the cluster or of a cluster node."
        },
        "EnableDeltaHealthEvaluation": {
          "$ref": "#/definitions/DeltaHealthEvaluationBool",
          "description": "When true, enables delta health evaluation rather than absolute health evaluation after completion of each upgrade domain."
        },
        "ClusterUpgradeHealthPolicy": {
          "$ref": "#/definitions/ClusterUpgradeHealthPolicyObject",
          "description": "Defines a health policy used to evaluate the health of the cluster during a cluster upgrade."
        },
        "ApplicationHealthPolicyMap": {
          "$ref": "#/definitions/ApplicationHealthPolicies",
          "description": "Defines the application health policy map used to evaluate the health of an application or one of its children entities."
        }
      }
    },
    "SafetyCheckKind": {
      "type": "string",
      "description": "The kind of safety check performed by service fabric before continuing with the operations. These checks ensure the availability of the service and the reliability of the state. Following are the kinds of safety checks.",
      "enum": [
        "Invalid",
        "EnsureSeedNodeQuorum",
        "EnsurePartitionQuorum",
        "WaitForPrimaryPlacement",
        "WaitForPrimarySwap",
        "WaitForReconfiguration",
        "WaitForInbuildReplica",
        "EnsureAvailability"
      ],
      "x-ms-enum": {
        "name": "SafetyCheckKind",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Indicates that the upgrade safety check kind is invalid. All Service Fabric enumerations have the invalid type. The value is zero."
          },
          {
            "value": "EnsureSeedNodeQuorum",
            "description": "Indicates that if we bring down the node then this will result in global seed node quorum loss. The value is 1."
          },
          {
            "value": "EnsurePartitionQuorum",
            "description": "Indicates that there is some partition for which if we bring down the replica on the node, it will result in quorum loss for that partition. The value is 2."
          },
          {
            "value": "WaitForPrimaryPlacement",
            "description": "Indicates that there is some replica on the node that was moved out of this node due to upgrade. Service Fabric is now waiting for the primary to be moved back to this node. The value is 3."
          },
          {
            "value": "WaitForPrimarySwap",
            "description": "Indicates that Service Fabric is waiting for a primary replica to be moved out of the node before starting upgrade on that node. The value is 4."
          },
          {
            "value": "WaitForReconfiguration",
            "description": "Indicates that there is some replica on the node that is involved in a reconfiguration. Service Fabric is waiting for the reconfiguration to be complete before staring upgrade on that node. The value is 5."
          },
          {
            "value": "WaitForInbuildReplica",
            "description": "Indicates that there is either a replica on the node that is going through copy, or there is a primary replica on the node that is copying data to some other replica. In both cases, bringing down the replica on the node due to upgrade will abort the copy. The value is 6."
          },
          {
            "value": "EnsureAvailability",
            "description": "Indicates that there is either a stateless service partition on the node having exactly one instance, or there is a primary replica on the node for which the partition is quorum loss. In both cases, bringing down the replicas due to upgrade will result in loss of availability. The value is 7."
          }
        ]
      }
    },
    "SafetyCheck": {
      "type": "object",
      "discriminator": "Kind",
      "description": "Represents a safety check performed by service fabric before continuing with the operations. These checks ensure the availability of the service and the reliability of the state.",
      "properties": {
        "Kind": {
          "$ref": "#/definitions/SafetyCheckKind",
          "description": "The kind of safety check performed by service fabric before continuing with the operations. These checks ensure the availability of the service and the reliability of the state. Following are the kinds of safety checks."
        }
      },
      "required": [
        "Kind"
      ]
    },
    "PartitionSafetyCheck": {
      "description": "Represents a safety check for the service partition being performed by service fabric before continuing with operations.",
      "allOf": [
        {
          "$ref": "#/definitions/SafetyCheck"
        },
        {
          "type": "object",
          "description": "PartitionSafetyCheck",
          "properties": {
            "PartitionId": {
              "$ref": "#/definitions/PartitionId",
              "description": "Id of the partition which is undergoing the safety check."
            }
          }
        }
      ]
    },
    "EnsureAvailabilitySafetyCheck": {
      "description": "Safety check that waits to ensure the availability of the partition. It waits until there are replicas available such that bringing down this replica will not cause availability loss for the partition.",
      "allOf": [
        {
          "$ref": "#/definitions/PartitionSafetyCheck"
        },
        {
          "type": "object",
          "description": "EnsureAvailabilitySafetyCheck"
        }
      ],
      "x-ms-discriminator-value": "EnsureAvailability"
    },
    "EnsurePartitionQurumSafetyCheck": {
      "description": "Safety check that ensures that a quorum of replicas are not lost for a partition.",
      "allOf": [
        {
          "$ref": "#/definitions/PartitionSafetyCheck"
        },
        {
          "type": "object",
          "description": "EnsurePartitionQurumSafetyCheck"
        }
      ],
      "x-ms-discriminator-value": "EnsurePartitionQuorum"
    },
    "SeedNodeSafetyCheck": {
      "description": "Represents a safety check for the seed nodes being performed by service fabric before continuing with node level operations.",
      "allOf": [
        {
          "$ref": "#/definitions/SafetyCheck"
        },
        {
          "type": "object",
          "description": "SeedNodeSafetyCheck"
        }
      ],
      "x-ms-discriminator-value": "EnsureSeedNodeQuorum"
    },
    "PartitionsHealthEvaluation": {
      "x-ms-discriminator-value": "Partitions",
      "description": "Represents health evaluation for the partitions of a service, containing health evaluations for each unhealthy partition that impacts current aggregated health state. Can be returned when evaluating service health and the aggregated health state is either Error or Warning.",
      "allOf": [
        {
          "$ref": "#/definitions/HealthEvaluation"
        },
        {
          "type": "object",
          "description": "PartitionsHealthEvaluation",
          "properties": {
            "MaxPercentUnhealthyPartitionsPerService": {
              "type": "integer",
              "description": "Maximum allowed percentage of unhealthy partitions per service from the ServiceTypeHealthPolicy."
            },
            "TotalCount": {
              "type": "integer",
              "format": "int64",
              "description": "Total number of partitions of the service from the health store."
            },
            "UnhealthyEvaluations": {
              "$ref": "#/definitions/UnhealthyEvaluations",
              "description": "List of unhealthy evaluations that led to the aggregated health state. Includes all the unhealthy PartitionHealthEvaluation that impacted the aggregated health."
            }
          }
        }
      ]
    },
    "ReplicaEvent": {
      "description": "Represents the base for all Replica Events.",
      "allOf": [
        {
          "$ref": "#/definitions/FabricEvent"
        },
        {
          "type": "object",
          "description": "ReplicaEvent",
          "properties": {
            "PartitionId": {
              "$ref": "#/definitions/PartitionId",
              "description": "An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be different."
            },
            "ReplicaId": {
              "$ref": "#/definitions/ReplicaId_Integer",
              "description": "Id of a stateful service replica. ReplicaId is used by Service Fabric to uniquely identify a replica of a partition. It is unique within a partition and does not change for the lifetime of the replica. If a replica gets dropped and another replica gets created on the same node for the same partition, it will get a different value for the id. Sometimes the id of a stateless service instance is also referred as a replica id."
            }
          },
          "required": [
            "PartitionId",
            "ReplicaId"
          ]
        }
      ],
      "x-ms-discriminator-value": "ReplicaEvent"
    },
    "ReplicaEventList": {
      "description": "A list of ReplicaEvent objects.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/ReplicaEvent"
      }
    },
    "ReplicaHealth": {
      "discriminator": "ServiceKind",
      "description": "Represents a base class for stateful service replica or stateless service instance health.\nContains the replica aggregated health state, the health events and the unhealthy evaluations.",
      "allOf": [
        {
          "$ref": "#/definitions/EntityHealth"
        },
        {
          "type": "object",
          "description": "ReplicaHealth",
          "properties": {
            "ServiceKind": {
              "$ref": "#/definitions/ServiceKind",
              "description": "The kind of service (Stateless or Stateful)."
            },
            "PartitionId": {
              "$ref": "#/definitions/PartitionId",
              "description": "Id of the partition to which this replica belongs."
            }
          },
          "required": [
            "ServiceKind"
          ]
        }
      ]
    },
    "ReplicaHealthEvaluation": {
      "x-ms-discriminator-value": "Replica",
      "description": "Represents health evaluation for a replica, containing information about the data and the algorithm used by health store to evaluate health. The evaluation is returned only when the aggregated health state is either Error or Warning.",
      "allOf": [
        {
          "$ref": "#/definitions/HealthEvaluation"
        },
        {
          "type": "object",
          "description": "ReplicaHealthEvaluation",
          "properties": {
            "PartitionId": {
              "$ref": "#/definitions/PartitionId",
              "description": "Id of the partition to which the replica belongs."
            },
            "ReplicaOrInstanceId": {
              "$ref": "#/definitions/ReplicaOrInstanceId",
              "description": "Id of a stateful service replica or a stateless service instance. This ID is used in the queries that apply to both stateful and stateless services. It is used by Service Fabric to uniquely identify a replica of a partition of a stateful service or an instance of a stateless service partition. It is unique within a partition and does not change for the lifetime of the replica or the instance. If a stateful replica gets dropped and another replica gets created on the same node for the same partition, it will get a different value for the ID. If a stateless instance is failed over on the same or different node it will get a different value for the ID."
            },
            "UnhealthyEvaluations": {
              "$ref": "#/definitions/UnhealthyEvaluations",
              "description": "List of unhealthy evaluations that led to the current aggregated health state of the replica. The types of the unhealthy evaluations can be EventHealthEvaluation."
            }
          }
        }
      ]
    },
    "ReplicaHealthState": {
      "type": "object",
      "discriminator": "ServiceKind",
      "required": [
        "ServiceKind"
      ],
      "description": "Represents a base class for stateful service replica or stateless service instance health state.",
      "allOf": [
        {
          "$ref": "#/definitions/EntityHealthState"
        },
        {
          "type": "object",
          "description": "ReplicaHealthState",
          "properties": {
            "ServiceKind": {
              "$ref": "#/definitions/ServiceKind",
              "description": "The kind of service (Stateless or Stateful)."
            },
            "PartitionId": {
              "$ref": "#/definitions/PartitionId",
              "description": "The ID of the partition to which this replica belongs."
            }
          }
        }
      ]
    },
    "ReplicaHealthStateChunk": {
      "description": "Represents the health state chunk of a stateful service replica or a stateless service instance.\nThe replica health state contains the replica ID and its aggregated health state.",
      "allOf": [
        {
          "$ref": "#/definitions/EntityHealthStateChunk"
        },
        {
          "type": "object",
          "description": "ReplicaHealthStateChunk",
          "properties": {
            "ReplicaOrInstanceId": {
              "$ref": "#/definitions/ReplicaOrInstanceId",
              "description": "Id of a stateful service replica or a stateless service instance. This ID is used in the queries that apply to both stateful and stateless services. It is used by Service Fabric to uniquely identify a replica of a partition of a stateful service or an instance of a stateless service partition. It is unique within a partition and does not change for the lifetime of the replica or the instance. If a stateful replica gets dropped and another replica gets created on the same node for the same partition, it will get a different value for the ID. If a stateless instance is failed over on the same or different node it will get a different value for the ID."
            }
          }
        }
      ]
    },
    "ReplicaHealthStateChunkList": {
      "type": "object",
      "description": "The list of replica health state chunks that respect the input filters in the chunk query. Returned by get cluster health state chunks query.",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReplicaHealthStateChunk"
          },
          "description": "The list of replica health state chunks that respect the input filters in the chunk query."
        }
      }
    },
    "ReplicaHealthStateFilter": {
      "type": "object",
      "description": "Defines matching criteria to determine whether a replica should be included as a child of a partition in the cluster health chunk.\nThe replicas are only returned if the parent entities match a filter specified in the cluster health chunk query description. The parent partition, service and application must be included in the cluster health chunk.\nOne filter can match zero, one or multiple replicas, depending on its properties.",
      "properties": {
        "ReplicaOrInstanceIdFilter": {
          "type": "string",
          "description": "Id of the stateful service replica or stateless service instance that matches the filter. The filter is applied only to the specified replica, if it exists.\nIf the replica doesn't exist, no replica is returned in the cluster health chunk based on this filter.\nIf the replica exists, it is included in the cluster health chunk if it respects the other filter properties.\nIf not specified, all replicas that match the parent filters (if any) are taken into consideration and matched against the other filter members, like health state filter."
        },
        "HealthStateFilter": {
          "type": "integer",
          "default": 0,
          "description": "The filter for the health state of the replicas. It allows selecting replicas if they match the desired health states.\nThe possible values are integer value of one of the following health states. Only replicas that match the filter are returned. All replicas are used to evaluate the parent partition aggregated health state.\nIf not specified, default value is None, unless the replica ID is specified. If the filter has default value and replica ID is specified, the matching replica is returned.\nThe state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.\nFor example, if the provided value is 6, it matches replicas with HealthState value of OK (2) and Warning (4).\n\n- Default - Default value. Matches any HealthState. The value is zero.\n- None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.\n- Ok - Filter that matches input with HealthState value Ok. The value is 2.\n- Warning - Filter that matches input with HealthState value Warning. The value is 4.\n- Error - Filter that matches input with HealthState value Error. The value is 8.\n- All - Filter that matches input with any HealthState value. The value is 65535."
        }
      }
    },
    "ReplicaId": {
      "type": "string",
      "description": "Id of a stateful service replica. ReplicaId is used by Service Fabric to uniquely identify a replica of a partition. It is unique within a partition and does not change for the lifetime of the replica. If a replica gets dropped and another replica gets created on the same node for the same partition, it will get a different value for the id. Sometimes the id of a stateless service instance is also referred as a replica id."
    },
    "ReplicaId_Integer": {
      "type": "integer",
      "format": "int64",
      "description": "Id of a stateful service replica. ReplicaId is used by Service Fabric to uniquely identify a replica of a partition. It is unique within a partition and does not change for the lifetime of the replica. If a replica gets dropped and another replica gets created on the same node for the same partition, it will get a different value for the id. Sometimes the id of a stateless service instance is also referred as a replica id."
    },
    "ReplicaOrInstanceId": {
      "type": "string",
      "description": "Id of a stateful service replica or a stateless service instance. This ID is used in the queries that apply to both stateful and stateless services. It is used by Service Fabric to uniquely identify a replica of a partition of a stateful service or an instance of a stateless service partition. It is unique within a partition and does not change for the lifetime of the replica or the instance. If a stateful replica gets dropped and another replica gets created on the same node for the same partition, it will get a different value for the ID. If a stateless instance is failed over on the same or different node it will get a different value for the ID."
    },
    "ReplicaInfo": {
      "type": "object",
      "discriminator": "ServiceKind",
      "description": "Information about the identity, status, health, node name, uptime, and other details about the replica.",
      "required": [
        "ServiceKind"
      ],
      "properties": {
        "ServiceKind": {
          "$ref": "#/definitions/ServiceKind",
          "description": "The kind of service (Stateless or Stateful)."
        },
        "ReplicaStatus": {
          "$ref": "#/definitions/ReplicaStatus",
          "description": "The status of a replica of a service."
        },
        "HealthState": {
          "$ref": "#/definitions/HealthState",
          "description": "The health state of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica etc."
        },
        "NodeName": {
          "$ref": "#/definitions/NodeName",
          "description": "The name of a Service Fabric node."
        },
        "Address": {
          "type": "string",
          "description": "The address the replica is listening on."
        },
        "LastInBuildDurationInSeconds": {
          "type": "string",
          "description": "The last in build duration of the replica in seconds."
        }
      }
    },
    "ReplicaRole": {
      "type": "string",
      "description": "The role of a replica of a stateful service.",
      "enum": [
        "Unknown",
        "None",
        "Primary",
        "IdleSecondary",
        "ActiveSecondary"
      ],
      "x-ms-enum": {
        "name": "ReplicaRole",
        "modelAsString": true,
        "values": [
          {
            "value": "Unknown",
            "description": "Indicates the initial role that a replica is created in. The value is zero."
          },
          {
            "value": "None",
            "description": "Specifies that the replica has no responsibility in regard to the replica set. The value is 1"
          },
          {
            "value": "Primary",
            "description": "Refers to the replica in the set on which all read and write operations are complete in order to enforce strong consistency semantics. Read operations are handled directly by the Primary replica, while write operations must be acknowledged by a quorum of the replicas in the replica set. There can only be one Primary replica in a replica set at a time. The value is 2."
          },
          {
            "value": "IdleSecondary",
            "description": "Refers to a replica in the set that receives a state transfer from the Primary replica to prepare for becoming an active Secondary replica. There can be multiple Idle Secondary replicas in a replica set at a time. Idle Secondary replicas do not count as a part of a write quorum. The value is 3."
          },
          {
            "value": "ActiveSecondary",
            "description": "Refers to a replica in the set that receives state updates from the Primary replica, applies them, and sends acknowledgements back. Secondary replicas must participate in the write quorum for a replica set. There can be multiple active Secondary replicas in a replica set at a time. The number of active Secondary replicas is configurable that the reliability subsystem should maintain. The value is 4."
          }
        ]
      }
    },
    "ReplicasHealthEvaluation": {
      "x-ms-discriminator-value": "Replicas",
      "description": "Represents health evaluation for replicas, containing health evaluations for each unhealthy replica that impacted current aggregated health state. Can be returned when evaluating partition health and the aggregated health state is either Error or Warning.",
      "allOf": [
        {
          "$ref": "#/definitions/HealthEvaluation"
        },
        {
          "type": "object",
          "description": "ReplicasHealthEvaluation",
          "properties": {
            "MaxPercentUnhealthyReplicasPerPartition": {
              "type": "integer",
              "description": "Maximum allowed percentage of unhealthy replicas per partition from the ApplicationHealthPolicy."
            },
            "TotalCount": {
              "type": "integer",
              "format": "int64",
              "description": "Total number of replicas in the partition from the health store."
            },
            "UnhealthyEvaluations": {
              "$ref": "#/definitions/UnhealthyEvaluations",
              "description": "List of unhealthy evaluations that led to the aggregated health state. Includes all the unhealthy ReplicaHealthEvaluation that impacted the aggregated health."
            }
          }
        }
      ]
    },
    "ReplicaStatus": {
      "type": "string",
      "description": "The status of a replica of a service.",
      "enum": [
        "Invalid",
        "InBuild",
        "Standby",
        "Ready",
        "Down",
        "Dropped"
      ],
      "x-ms-enum": {
        "name": "ReplicaStatus",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Indicates the replica status is invalid. All Service Fabric enumerations have the invalid type. The value is zero."
          },
          {
            "value": "InBuild",
            "description": "The replica is being built. This means that a primary replica is seeding this replica. The value is 1."
          },
          {
            "value": "Standby",
            "description": "The replica is in standby. The value is 2."
          },
          {
            "value": "Ready",
            "description": "The replica is ready. The value is 3."
          },
          {
            "value": "Down",
            "description": "The replica is down. The value is 4."
          },
          {
            "value": "Dropped",
            "description": "Replica is dropped. This means that the replica has been removed from the replica set. If it is persisted, its state has been deleted. The value is 5."
          }
        ]
      }
    },
    "RestartNodeDescription": {
      "description": "Describes the parameters to restart a Service Fabric node.",
      "properties": {
        "NodeInstanceId": {
          "type": "string",
          "description": "The instance ID of the target node. If instance ID is specified the node is restarted only if it matches with the current instance of the node. A default value of \"0\" would match any instance ID. The instance ID can be obtained using get node query.",
          "default": "0"
        },
        "CreateFabricDump": {
          "type": "string",
          "description": "Specify True to create a dump of the fabric node process. This is case-sensitive.",
          "enum": [
            "False",
            "True"
          ],
          "default": "False",
          "x-ms-enum": {
            "name": "CreateFabricDump",
            "modelAsString": true,
            "values": [
              {
                "value": "False"
              },
              {
                "value": "True"
              }
            ]
          }
        }
      },
      "required": [
        "NodeInstanceId"
      ]
    },
    "SafetyCheckInfoList": {
      "type": "array",
      "description": "List of pending safety checks",
      "items": {
        "$ref": "#/definitions/SafetyCheckWrapper"
      }
    },
    "SafetyCheckWrapper": {
      "type": "object",
      "description": "A wrapper for the safety check object. Safety checks are performed by service fabric before continuing with the operations. These checks ensure the availability of the service and the reliability of the state.",
      "properties": {
        "SafetyCheck": {
          "$ref": "#/definitions/SafetyCheck",
          "description": "Represents a safety check performed by service fabric before continuing with the operations. These checks ensure the availability of the service and the reliability of the state."
        }
      }
    },
    "ServiceEvent": {
      "description": "Represents the base for all Service Events.",
      "allOf": [
        {
          "$ref": "#/definitions/FabricEvent"
        },
        {
          "type": "object",
          "description": "ServiceEvent",
          "properties": {
            "ServiceId": {
              "$ref": "#/definitions/ServiceId",
              "description": "The identity of the service. This ID is an encoded representation of the service name. This is used in the REST APIs to identify the service resource.\nStarting in version 6.0, hierarchical names are delimited with the \"\\~\" character. For example, if the service name is \"fabric:/myapp/app1/svc1\",\nthe service identity would be \"myapp~app1\\~svc1\" in 6.0+ and \"myapp/app1/svc1\" in previous versions."
            }
          },
          "required": [
            "ServiceId"
          ]
        }
      ],
      "x-ms-discriminator-value": "ServiceEvent"
    },
    "ServiceEventList": {
      "description": "A list of ServiceEvent objects.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/ServiceEvent"
      }
    },
    "ServiceFromTemplateDescription": {
      "type": "object",
      "description": "Defines description for creating a Service Fabric service from a template defined in the application manifest.",
      "required": [
        "ApplicationName",
        "ServiceName",
        "ServiceTypeName"
      ],
      "properties": {
        "ApplicationName": {
          "$ref": "#/definitions/ApplicationName",
          "description": "The name of the application, including the 'fabric:' URI scheme."
        },
        "ServiceName": {
          "$ref": "#/definitions/ServiceName",
          "description": "The full name of the service with 'fabric:' URI scheme."
        },
        "ServiceTypeName": {
          "$ref": "#/definitions/ServiceTypeName",
          "description": "Name of the service type as specified in the service manifest."
        },
        "InitializationData": {
          "$ref": "#/definitions/ByteArray",
          "description": "The initialization data for the newly created service instance."
        },
        "ServicePackageActivationMode": {
          "$ref": "#/definitions/ServicePackageActivationMode",
          "description": "The activation mode of service package to be used for a service."
        },
        "ServiceDnsName": {
          "type": "string",
          "description": "The DNS name of the service. It requires the DNS system service to be enabled in Service Fabric cluster."
        }
      }
    },
    "ServiceHealthEvaluation": {
      "x-ms-discriminator-value": "Service",
      "description": "Represents health evaluation for a service, containing information about the data and the algorithm used by health store to evaluate health. The evaluation is returned only when the aggregated health state is either Error or Warning.",
      "allOf": [
        {
          "$ref": "#/definitions/HealthEvaluation"
        },
        {
          "type": "object",
          "description": "ServiceHealthEvaluation",
          "properties": {
            "ServiceName": {
              "$ref": "#/definitions/ServiceName",
              "description": "Name of the service whose health evaluation is described by this object."
            },
            "UnhealthyEvaluations": {
              "$ref": "#/definitions/UnhealthyEvaluations",
              "description": "List of unhealthy evaluations that led to the current aggregated health state of the service. The types of the unhealthy evaluations can be PartitionsHealthEvaluation or EventHealthEvaluation."
            }
          }
        }
      ]
    },
    "ServiceHealthState": {
      "description": "Represents the health state of a service, which contains the service identifier and its aggregated health state.",
      "allOf": [
        {
          "$ref": "#/definitions/EntityHealthState"
        },
        {
          "type": "object",
          "description": "ServiceHealthState",
          "properties": {
            "ServiceName": {
              "$ref": "#/definitions/ServiceName",
              "description": "Name of the service whose health state is represented by this object."
            }
          }
        }
      ]
    },
    "ServiceHealthStateChunk": {
      "description": "Represents the health state chunk of a service, which contains the service name, its aggregated health state and any partitions that respect the filters in the cluster health chunk query description.",
      "allOf": [
        {
          "$ref": "#/definitions/EntityHealthStateChunk"
        },
        {
          "type": "object",
          "description": "ServiceHealthStateChunk",
          "properties": {
            "ServiceName": {
              "$ref": "#/definitions/ServiceName",
              "description": "The name of the service whose health state chunk is provided in this object."
            },
            "PartitionHealthStateChunks": {
              "$ref": "#/definitions/PartitionHealthStateChunkList",
              "description": "The list of partition health state chunks belonging to the service that respect the filters in the cluster health chunk query description."
            }
          }
        }
      ]
    },
    "ServiceHealthStateChunkList": {
      "type": "object",
      "description": "The list of service health state chunks that respect the input filters in the chunk query. Returned by get cluster health state chunks query.",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceHealthStateChunk"
          },
          "description": "The list of service health state chunks that respect the input filters in the chunk query."
        }
      }
    },
    "ServiceHealthStateFilter": {
      "type": "object",
      "description": "Defines matching criteria to determine whether a service should be included as a child of an application in the cluster health chunk.\nThe services are only returned if the parent application matches a filter specified in the cluster health chunk query description.\nOne filter can match zero, one or multiple services, depending on its properties.",
      "properties": {
        "ServiceNameFilter": {
          "type": "string",
          "description": "The name of the service that matches the filter. The filter is applied only to the specified service, if it exists.\nIf the service doesn't exist, no service is returned in the cluster health chunk based on this filter.\nIf the service exists, it is included as the application's child if the health state matches the other filter properties.\nIf not specified, all services that match the parent filters (if any) are taken into consideration and matched against the other filter members, like health state filter."
        },
        "HealthStateFilter": {
          "type": "integer",
          "default": 0,
          "description": "The filter for the health state of the services. It allows selecting services if they match the desired health states.\nThe possible values are integer value of one of the following health states. Only services that match the filter are returned. All services are used to evaluate the cluster aggregated health state.\nIf not specified, default value is None, unless the service name is specified. If the filter has default value and service name is specified, the matching service is returned.\nThe state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.\nFor example, if the provided value is 6, it matches services with HealthState value of OK (2) and Warning (4).\n\n- Default - Default value. Matches any HealthState. The value is zero.\n- None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.\n- Ok - Filter that matches input with HealthState value Ok. The value is 2.\n- Warning - Filter that matches input with HealthState value Warning. The value is 4.\n- Error - Filter that matches input with HealthState value Error. The value is 8.\n- All - Filter that matches input with any HealthState value. The value is 65535."
        },
        "PartitionFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PartitionHealthStateFilter"
          },
          "description": "Defines a list of filters that specify which partitions to be included in the returned cluster health chunk as children of the service. The partitions are returned only if the parent service matches a filter.\nIf the list is empty, no partitions are returned. All the partitions are used to evaluate the parent service aggregated health state, regardless of the input filters.\nThe service filter may specify multiple partition filters.\nFor example, it can specify a filter to return all partitions with health state Error and another filter to always include a partition identified by its partition ID."
        }
      }
    },
    "ServiceHealth": {
      "description": "Information about the health of a Service Fabric service.",
      "allOf": [
        {
          "$ref": "#/definitions/EntityHealth"
        },
        {
          "type": "object",
          "description": "ServiceHealth",
          "properties": {
            "Name": {
              "$ref": "#/definitions/ServiceName",
              "description": "The name of the service whose health information is described by this object."
            },
            "PartitionHealthStates": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PartitionHealthState"
              },
              "description": "The list of partition health states associated with the service."
            }
          }
        }
      ]
    },
    "ServiceId": {
      "type": "string",
      "description": "The identity of the service. This ID is an encoded representation of the service name. This is used in the REST APIs to identify the service resource.\nStarting in version 6.0, hierarchical names are delimited with the \"\\~\" character. For example, if the service name is \"fabric:/myapp/app1/svc1\",\nthe service identity would be \"myapp~app1\\~svc1\" in 6.0+ and \"myapp/app1/svc1\" in previous versions."
    },
    "ServiceName": {
      "type": "string",
      "description": "The full name of the service with 'fabric:' URI scheme."
    },
    "ServiceManifestName": {
      "type": "string",
      "description": "The name of the service manifest."
    },
    "ServiceTypeName": {
      "type": "string",
      "description": "Name of the service type as specified in the service manifest."
    },
    "ServiceInfo": {
      "type": "object",
      "discriminator": "ServiceKind",
      "description": "Information about a Service Fabric service.",
      "properties": {
        "Id": {
          "$ref": "#/definitions/ServiceId",
          "description": "The identity of the service. This ID is an encoded representation of the service name. This is used in the REST APIs to identify the service resource.\nStarting in version 6.0, hierarchical names are delimited with the \"\\~\" character. For example, if the service name is \"fabric:/myapp/app1/svc1\",\nthe service identity would be \"myapp~app1\\~svc1\" in 6.0+ and \"myapp/app1/svc1\" in previous versions."
        },
        "ServiceKind": {
          "$ref": "#/definitions/ServiceKind",
          "description": "The kind of service (Stateless or Stateful)."
        },
        "Name": {
          "$ref": "#/definitions/ServiceName",
          "description": "The full name of the service with 'fabric:' URI scheme."
        },
        "TypeName": {
          "$ref": "#/definitions/ServiceTypeName",
          "description": "Name of the service type as specified in the service manifest."
        },
        "ManifestVersion": {
          "description": "The version of the service manifest.",
          "type": "string"
        },
        "HealthState": {
          "$ref": "#/definitions/HealthState",
          "description": "The health state of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica etc."
        },
        "ServiceStatus": {
          "$ref": "#/definitions/ServiceStatus",
          "description": "The status of the application."
        },
        "IsServiceGroup": {
          "description": "Whether the service is in a service group.",
          "type": "boolean"
        }
      },
      "required": [
        "ServiceKind"
      ]
    },
    "ServiceKind": {
      "type": "string",
      "description": "The kind of service (Stateless or Stateful).",
      "enum": [
        "Invalid",
        "Stateless",
        "Stateful"
      ],
      "x-ms-enum": {
        "name": "ServiceKind",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Indicates the service kind is invalid. All Service Fabric enumerations have the invalid type. The value is zero."
          },
          {
            "value": "Stateless",
            "description": "Does not use Service Fabric to make its state highly available or reliable. The value is 1."
          },
          {
            "value": "Stateful",
            "description": "Uses Service Fabric to make its state or part of its state highly available and reliable. The value is 2."
          }
        ]
      }
    },
    "ServiceNameInfo": {
      "type": "object",
      "description": "Information about the service name.",
      "properties": {
        "Id": {
          "$ref": "#/definitions/ServiceId",
          "description": "The identity of the service. This ID is an encoded representation of the service name. This is used in the REST APIs to identify the service resource.\nStarting in version 6.0, hierarchical names are delimited with the \"\\~\" character. For example, if the service name is \"fabric:/myapp/app1/svc1\",\nthe service identity would be \"myapp~app1\\~svc1\" in 6.0+ and \"myapp/app1/svc1\" in previous versions."
        },
        "Name": {
          "$ref": "#/definitions/ServiceName",
          "description": "The full name of the service with 'fabric:' URI scheme."
        }
      }
    },
    "ServicePackageActivationId": {
      "type": "string",
      "description": "The ActivationId of a deployed service package. If ServicePackageActivationMode specified at the time of creating the service\nis 'SharedProcess' (or if it is not specified, in which case it defaults to 'SharedProcess'), then value of ServicePackageActivationId\nis always an empty string."
    },
    "ServicePartitionInfo": {
      "type": "object",
      "discriminator": "ServiceKind",
      "description": "Information about a partition of a Service Fabric service.",
      "required": [
        "ServiceKind"
      ],
      "properties": {
        "ServiceKind": {
          "$ref": "#/definitions/ServiceKind",
          "description": "The kind of service (Stateless or Stateful)."
        },
        "HealthState": {
          "$ref": "#/definitions/HealthState",
          "description": "The health state of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica etc."
        },
        "PartitionStatus": {
          "$ref": "#/definitions/ServicePartitionStatus",
          "description": "The status of the service fabric service partition."
        },
        "PartitionInformation": {
          "$ref": "#/definitions/PartitionInformation",
          "description": "Information about the partition identity, partitioning scheme and keys supported by it."
        }
      }
    },
    "ServicePartitionKind": {
      "type": "string",
      "description": "The kind of partitioning scheme used to partition the service.",
      "enum": [
        "Invalid",
        "Singleton",
        "Int64Range",
        "Named"
      ],
      "x-ms-enum": {
        "name": "ServicePartitionKind",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Indicates the partition kind is invalid. All Service Fabric enumerations have the invalid type. The value is zero."
          },
          {
            "value": "Singleton",
            "description": "Indicates that there is only one partition, and SingletonPartitionSchemeDescription was specified while creating the service. The value is 1."
          },
          {
            "value": "Int64Range",
            "description": "Indicates that the partition is based on Int64 key ranges, and UniformInt64RangePartitionSchemeDescription was specified while creating the service. The value is 2."
          },
          {
            "value": "Named",
            "description": "Indicates that the partition is based on string names, and NamedPartitionInformation  was specified while creating the service. The value is 3."
          }
        ]
      }
    },
    "ServicePartitionStatus": {
      "type": "string",
      "description": "The status of the service fabric service partition.",
      "enum": [
        "Invalid",
        "Ready",
        "NotReady",
        "InQuorumLoss",
        "Reconfiguring",
        "Deleting"
      ],
      "x-ms-enum": {
        "name": "ServicePartitionStatus",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Indicates the partition status is invalid. All Service Fabric enumerations have the invalid type. The value is zero."
          },
          {
            "value": "Ready",
            "description": "Indicates that the partition is ready. This means that for a stateless service partition there is at least one instance that is up and for a stateful service partition the number of ready replicas is greater than or equal to the MinReplicaSetSize. The value is 1."
          },
          {
            "value": "NotReady",
            "description": "Indicates that the partition is not ready. This status is returned when none of the other states apply. The value is 2."
          },
          {
            "value": "InQuorumLoss",
            "description": "Indicates that the partition is in quorum loss. This means that number of replicas that are up and participating in a replica set is less than MinReplicaSetSize for this partition. The value is 3."
          },
          {
            "value": "Reconfiguring",
            "description": "Indicates that the partition is undergoing reconfiguration of its replica sets. This can happen due to failover, upgrade, load balancing or addition or removal of replicas from the replica set. The value is 4."
          },
          {
            "value": "Deleting",
            "description": "Indicates that the partition is being deleted. The value is 5."
          }
        ]
      }
    },
    "ServicePlacementInvalidDomainPolicyDescription": {
      "x-ms-discriminator-value": "InvalidDomain",
      "description": "Describes the policy to be used for placement of a Service Fabric service where a particular fault or upgrade domain should not be used for placement of the instances or replicas of that service.",
      "allOf": [
        {
          "$ref": "#/definitions/ServicePlacementPolicyDescription"
        },
        {
          "type": "object",
          "description": "ServicePlacementInvalidDomainPolicyDescription",
          "properties": {
            "DomainName": {
              "type": "string",
              "description": "The name of the domain that should not be used for placement."
            }
          }
        }
      ]
    },
    "ServicePlacementNonPartiallyPlaceServicePolicyDescription": {
      "x-ms-discriminator-value": "NonPartiallyPlaceService",
      "description": "Describes the policy to be used for placement of a Service Fabric service where all replicas must be able to be placed in order for any replicas to be created.",
      "allOf": [
        {
          "$ref": "#/definitions/ServicePlacementPolicyDescription"
        },
        {
          "type": "object",
          "description": "ServicePlacementNonPartiallyPlaceServicePolicyDescription"
        }
      ]
    },
    "ServicePlacementPolicyDescription": {
      "type": "object",
      "discriminator": "Type",
      "description": "Describes the policy to be used for placement of a Service Fabric service.",
      "required": [
        "Type"
      ],
      "properties": {
        "Type": {
          "$ref": "#/definitions/ServicePlacementPolicyType",
          "description": "The type of placement policy for a service fabric service. Following are the possible values."
        }
      }
    },
    "ServicePlacementPolicyDescriptionList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ServicePlacementPolicyDescription"
      },
      "description": "List of service placement policy descriptions."
    },
    "ServicePlacementPolicyType": {
      "type": "string",
      "description": "The type of placement policy for a service fabric service. Following are the possible values.",
      "enum": [
        "Invalid",
        "InvalidDomain",
        "RequiredDomain",
        "PreferredPrimaryDomain",
        "RequiredDomainDistribution",
        "NonPartiallyPlaceService"
      ],
      "x-ms-enum": {
        "name": "ServicePlacementPolicyType",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Indicates the type of the placement policy is invalid. All Service Fabric enumerations have the invalid type. The value is zero."
          },
          {
            "value": "InvalidDomain",
            "description": "Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementInvalidDomainPolicyDescription, which indicates that a particular fault or upgrade domain cannot be used for placement of this service. The value is 1."
          },
          {
            "value": "RequiredDomain",
            "description": "Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementRequireDomainDistributionPolicyDescription indicating that the replicas of the service must be placed in a specific domain. The value is 2."
          },
          {
            "value": "PreferredPrimaryDomain",
            "description": "Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementPreferPrimaryDomainPolicyDescription, which indicates that if possible the Primary replica for the partitions of the service should be located in a particular domain as an optimization. The value is 3."
          },
          {
            "value": "RequiredDomainDistribution",
            "description": "Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementRequireDomainDistributionPolicyDescription, indicating that the system will disallow placement of any two replicas from the same partition in the same domain at any time. The value is 4."
          },
          {
            "value": "NonPartiallyPlaceService",
            "description": "Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementNonPartiallyPlaceServicePolicyDescription, which indicates that if possible all replicas of a particular partition of the service should be placed atomically. The value is 5."
          }
        ]
      }
    },
    "ServicePlacementPreferPrimaryDomainPolicyDescription": {
      "x-ms-discriminator-value": "PreferredPrimaryDomain",
      "description": "Describes the policy to be used for placement of a Service Fabric service where the service's Primary replicas should optimally be placed in a particular domain.\n\nThis placement policy is usually used with fault domains in scenarios where the Service Fabric cluster is geographically distributed in order to indicate that a service's primary replica should be located in a particular fault domain, which in geo-distributed scenarios usually aligns with regional or datacenter boundaries. Note that since this is an optimization it is possible that the Primary replica may not end up located in this domain due to failures, capacity limits, or other constraints.",
      "allOf": [
        {
          "$ref": "#/definitions/ServicePlacementPolicyDescription"
        },
        {
          "type": "object",
          "description": "ServicePlacementPreferPrimaryDomainPolicyDescription",
          "properties": {
            "DomainName": {
              "type": "string",
              "description": "The name of the domain that should used for placement as per this policy."
            }
          }
        }
      ]
    },
    "ServicePlacementRequiredDomainPolicyDescription": {
      "x-ms-discriminator-value": "RequiredDomain",
      "description": "Describes the policy to be used for placement of a Service Fabric service where the instances or replicas of that service must be placed in a particular domain",
      "allOf": [
        {
          "$ref": "#/definitions/ServicePlacementPolicyDescription"
        },
        {
          "type": "object",
          "description": "ServicePlacementRequiredDomainPolicyDescription",
          "properties": {
            "DomainName": {
              "type": "string",
              "description": "The name of the domain that should used for placement as per this policy."
            }
          }
        }
      ]
    },
    "ServicePlacementRequireDomainDistributionPolicyDescription": {
      "x-ms-discriminator-value": "RequiredDomainDistribution",
      "description": "Describes the policy to be used for placement of a Service Fabric service where two replicas from the same partition should never be placed in the same fault or upgrade domain.\n\nWhile this is not common it can expose the service to an increased risk of concurrent failures due to unplanned outages or other cases of subsequent/concurrent failures. As an example, consider a case where replicas are deployed across different data center, with one replica per location. In the event that one of the datacenters goes offline, normally the replica that was placed in that datacenter will be packed into one of the remaining datacenters. If this is not desirable then this policy should be set.",
      "allOf": [
        {
          "$ref": "#/definitions/ServicePlacementPolicyDescription"
        },
        {
          "type": "object",
          "description": "ServicePlacementRequireDomainDistributionPolicyDescription",
          "properties": {
            "DomainName": {
              "type": "string",
              "description": "The name of the domain that should used for placement as per this policy."
            }
          }
        }
      ]
    },
    "ServicesHealthEvaluation": {
      "x-ms-discriminator-value": "Services",
      "description": "Represents health evaluation for services of a certain service type belonging to an application, containing health evaluations for each unhealthy service that impacted current aggregated health state. Can be returned when evaluating application health and the aggregated health state is either Error or Warning.",
      "allOf": [
        {
          "$ref": "#/definitions/HealthEvaluation"
        },
        {
          "type": "object",
          "description": "ServicesHealthEvaluation",
          "properties": {
            "ServiceTypeName": {
              "type": "string",
              "description": "Name of the service type of the services."
            },
            "MaxPercentUnhealthyServices": {
              "type": "integer",
              "description": "Maximum allowed percentage of unhealthy services from the ServiceTypeHealthPolicy."
            },
            "TotalCount": {
              "type": "integer",
              "format": "int64",
              "description": "Total number of services of the current service type in the application from the health store."
            },
            "UnhealthyEvaluations": {
              "$ref": "#/definitions/UnhealthyEvaluations",
              "description": "List of unhealthy evaluations that led to the aggregated health state. Includes all the unhealthy ServiceHealthEvaluation that impacted the aggregated health."
            }
          }
        }
      ]
    },
    "ServiceStatus": {
      "type": "string",
      "description": "The status of the application.",
      "enum": [
        "Unknown",
        "Active",
        "Upgrading",
        "Deleting",
        "Creating",
        "Failed"
      ],
      "x-ms-enum": {
        "name": "ServiceStatus",
        "modelAsString": true,
        "values": [
          {
            "value": "Unknown",
            "description": "Indicates the service status is unknown. The value is zero."
          },
          {
            "value": "Active",
            "description": "Indicates the service status is active. The value is 1."
          },
          {
            "value": "Upgrading",
            "description": "Indicates the service is upgrading. The value is 2."
          },
          {
            "value": "Deleting",
            "description": "Indicates the service is being deleted. The value is 3."
          },
          {
            "value": "Creating",
            "description": "Indicates the service is being created. The value is 4."
          },
          {
            "value": "Failed",
            "description": "Indicates creation or deletion was terminated due to persistent failures. Another create/delete request can be accepted. The value is 5."
          }
        ]
      }
    },
    "ServiceTypeDescription": {
      "type": "object",
      "discriminator": "Kind",
      "description": "Describes a service type defined in the service manifest of a provisioned application type. The properties the ones defined in the service manifest.",
      "required": [
        "Kind"
      ],
      "properties": {
        "Kind": {
          "$ref": "#/definitions/ServiceKind",
          "description": "The kind of service (Stateless or Stateful)."
        },
        "IsStateful": {
          "type": "boolean",
          "description": "Indicates whether the service type is a stateful service type or a stateless service type. This property is true if the service type is a stateful service type, false otherwise."
        },
        "ServiceTypeName": {
          "$ref": "#/definitions/ServiceTypeName",
          "description": "Name of the service type as specified in the service manifest."
        },
        "PlacementConstraints": {
          "type": "string",
          "description": "The placement constraint to be used when instantiating this service in a Service Fabric cluster."
        },
        "LoadMetrics": {
          "$ref": "#/definitions/ServiceLoadMetricsList",
          "description": "The service load metrics is given as an array of ServiceLoadMetricDescription objects."
        },
        "ServicePlacementPolicies": {
          "$ref": "#/definitions/ServicePlacementPolicyDescriptionList",
          "description": "List of service placement policy descriptions."
        },
        "Extensions": {
          "$ref": "#/definitions/ServiceTypeExtensionDescriptionList",
          "description": "List of service type extensions."
        }
      }
    },
    "ServiceTypeExtensionDescription": {
      "type": "object",
      "description": "Describes extension of a service type defined in the service manifest.",
      "properties": {
        "Key": {
          "type": "string",
          "description": "The name of the extension."
        },
        "Value": {
          "type": "string",
          "description": "The extension value."
        }
      }
    },
    "ServiceTypeExtensionDescriptionList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ServiceTypeExtensionDescription"
      },
      "description": "List of service type extensions."
    },
    "ServiceTypeHealthPolicy": {
      "type": "object",
      "description": "Represents the health policy used to evaluate the health of services belonging to a service type.",
      "properties": {
        "MaxPercentUnhealthyPartitionsPerService": {
          "type": "integer",
          "description": "The maximum allowed percentage of unhealthy partitions per service. Allowed values are Byte values from zero to 100\n\nThe percentage represents the maximum tolerated percentage of partitions that can be unhealthy before the service is considered in error.\nIf the percentage is respected but there is at least one unhealthy partition, the health is evaluated as Warning.\nThe percentage is calculated by dividing the number of unhealthy partitions over the total number of partitions in the service.\nThe computation rounds up to tolerate one failure on small numbers of partitions. Default percentage is zero.",
          "default": 0
        },
        "MaxPercentUnhealthyReplicasPerPartition": {
          "type": "integer",
          "description": "The maximum allowed percentage of unhealthy replicas per partition. Allowed values are Byte values from zero to 100.\n\nThe percentage represents the maximum tolerated percentage of replicas that can be unhealthy before the partition is considered in error.\nIf the percentage is respected but there is at least one unhealthy replica, the health is evaluated as Warning.\nThe percentage is calculated by dividing the number of unhealthy replicas over the total number of replicas in the partition.\nThe computation rounds up to tolerate one failure on small numbers of replicas. Default percentage is zero.",
          "default": 0
        },
        "MaxPercentUnhealthyServices": {
          "type": "integer",
          "description": "The maximum maximum allowed percentage of unhealthy services. Allowed values are Byte values from zero to 100.\n\nThe percentage represents the maximum tolerated percentage of services that can be unhealthy before the application is considered in error.\nIf the percentage is respected but there is at least one unhealthy service, the health is evaluated as Warning.\nThis is calculated by dividing the number of unhealthy services of the specific service type over the total number of services of the specific service type.\nThe computation rounds up to tolerate one failure on small numbers of services. Default percentage is zero.",
          "default": 0
        }
      }
    },
    "ServiceTypeHealthPolicyMap": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ServiceTypeHealthPolicyMapItem"
      },
      "description": "Defines a ServiceTypeHealthPolicy per service type name.\n\nThe entries in the map replace the default service type health policy for each specified service type. For example, in an application that contains both a stateless gateway service type and a stateful engine service type, the health policies for the stateless and stateful services can be configured differently. With policy per service type, there's more granular control of the health of the service.\n\nIf no policy is specified for a service type name, the DefaultServiceTypeHealthPolicy is used for evaluation."
    },
    "ServiceTypeHealthPolicyMapItem": {
      "type": "object",
      "description": "Defines an item in ServiceTypeHealthPolicyMap.",
      "required": [
        "Key",
        "Value"
      ],
      "properties": {
        "Key": {
          "type": "string",
          "description": "The key of the service type health policy map item. This is the name of the service type."
        },
        "Value": {
          "$ref": "#/definitions/ServiceTypeHealthPolicy",
          "description": "The value of the service type health policy map item. This is the ServiceTypeHealthPolicy for this service type."
        }
      }
    },
    "ServiceTypeInfo": {
      "type": "object",
      "description": "Information about a service type that is defined in a service manifest of a provisioned application type.",
      "properties": {
        "ServiceTypeDescription": {
          "$ref": "#/definitions/ServiceTypeDescription",
          "description": "Describes a service type defined in the service manifest of a provisioned application type. The properties the ones defined in the service manifest."
        },
        "ServiceManifestName": {
          "$ref": "#/definitions/ServiceManifestName",
          "description": "The name of the service manifest in which this service type is defined."
        },
        "ServiceManifestVersion": {
          "type": "string",
          "description": "The version of the service manifest in which this service type is defined."
        },
        "IsServiceGroup": {
          "type": "boolean",
          "description": "Indicates whether the service is a service group. If it is, the property value is true otherwise false."
        }
      }
    },
    "ServiceTypeInfoList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ServiceTypeInfo"
      },
      "description": "List of service type information."
    },
    "ServiceTypeManifest": {
      "type": "object",
      "description": "Contains the manifest describing a service type registered as part of an application in a Service Fabric cluster.",
      "properties": {
        "Manifest": {
          "type": "string",
          "description": "The XML manifest as a string."
        }
      }
    },
    "SingletonPartitionInformation": {
      "description": "Information about a partition that is singleton. The services with singleton partitioning scheme are effectively non-partitioned. They only have one partition.",
      "allOf": [
        {
          "$ref": "#/definitions/PartitionInformation"
        },
        {
          "type": "object",
          "description": "StatelessServicePartitionInfo"
        }
      ],
      "x-ms-discriminator-value": "Singleton"
    },
    "StatefulServiceInfo": {
      "description": "Information about a stateful Service Fabric service.",
      "allOf": [
        {
          "$ref": "#/definitions/ServiceInfo"
        },
        {
          "type": "object",
          "description": "StatefulService",
          "properties": {
            "HasPersistedState": {
              "description": "Whether the service has persisted state.",
              "type": "boolean"
            }
          }
        }
      ],
      "x-ms-discriminator-value": "Stateful"
    },
    "StatefulServicePartitionInfo": {
      "description": "Information about a partition of a stateful Service Fabric service..",
      "allOf": [
        {
          "$ref": "#/definitions/ServicePartitionInfo"
        },
        {
          "type": "object",
          "description": "StatefulServicePartitionInfo"
        }
      ],
      "x-ms-discriminator-value": "Stateful",
      "properties": {
        "TargetReplicaSetSize": {
          "type": "integer",
          "format": "int64",
          "description": "The target replica set size as a number."
        },
        "MinReplicaSetSize": {
          "type": "integer",
          "format": "int64",
          "description": "The minimum replica set size as a number."
        },
        "LastQuorumLossDuration": {
          "type": "string",
          "format": "duration",
          "description": "The duration for which this partition was in quorum loss. If the partition is currently in quorum loss, it returns the duration since it has been in that state. This field is using ISO8601 format for specifying the duration."
        },
        "CurrentConfigurationEpoch": {
          "$ref": "#/definitions/Epoch",
          "description": "An Epoch is a configuration number for the partition as a whole. When the configuration of the replica set changes, for example when the Primary replica changes, the operations that are replicated from the new Primary replica are said to be a new Epoch from the ones which were sent by the old Primary replica."
        }
      }
    },
    "StatefulServiceReplicaHealth": {
      "description": "Represents the health of the stateful service replica.\nContains the replica aggregated health state, the health events and the unhealthy evaluations.",
      "x-ms-discriminator-value": "Stateful",
      "allOf": [
        {
          "$ref": "#/definitions/ReplicaHealth"
        },
        {
          "type": "object",
          "description": "StatefulServiceReplicaHealth",
          "properties": {
            "ReplicaId": {
              "$ref": "#/definitions/ReplicaId",
              "description": "Id of a stateful service replica. ReplicaId is used by Service Fabric to uniquely identify a replica of a partition. It is unique within a partition and does not change for the lifetime of the replica. If a replica gets dropped and another replica gets created on the same node for the same partition, it will get a different value for the id. Sometimes the id of a stateless service instance is also referred as a replica id."
            }
          }
        }
      ]
    },
    "StatefulServiceReplicaHealthState": {
      "x-ms-discriminator-value": "Stateful",
      "description": "Represents the health state of the stateful service replica, which contains the replica ID and the aggregated health state.",
      "allOf": [
        {
          "$ref": "#/definitions/ReplicaHealthState"
        },
        {
          "type": "object",
          "description": "StatefulServiceReplicaHealthState",
          "properties": {
            "ReplicaId": {
              "$ref": "#/definitions/ReplicaId",
              "description": "Id of a stateful service replica. ReplicaId is used by Service Fabric to uniquely identify a replica of a partition. It is unique within a partition and does not change for the lifetime of the replica. If a replica gets dropped and another replica gets created on the same node for the same partition, it will get a different value for the id. Sometimes the id of a stateless service instance is also referred as a replica id."
            }
          }
        }
      ]
    },
    "StatefulServiceTypeDescription": {
      "description": "Describes a stateful service type defined in the service manifest of a provisioned application type.",
      "allOf": [
        {
          "$ref": "#/definitions/ServiceTypeDescription"
        },
        {
          "type": "object",
          "description": "StatefulServiceTypeDescription"
        }
      ],
      "x-ms-discriminator-value": "Stateful",
      "properties": {
        "HasPersistedState": {
          "type": "boolean",
          "description": "A flag indicating whether this is a persistent service which stores states on the local disk. If it is then the value of this property is true, if not it is false."
        }
      }
    },
    "StatelessServiceInfo": {
      "description": "Information about a stateless Service Fabric service.",
      "allOf": [
        {
          "$ref": "#/definitions/ServiceInfo"
        },
        {
          "type": "object",
          "description": "StatelessService"
        }
      ],
      "x-ms-discriminator-value": "Stateless"
    },
    "StatelessServiceInstanceHealth": {
      "description": "Represents the health of the stateless service instance.\nContains the instance aggregated health state, the health events and the unhealthy evaluations.",
      "x-ms-discriminator-value": "Stateless",
      "allOf": [
        {
          "$ref": "#/definitions/ReplicaHealth"
        },
        {
          "type": "object",
          "description": "StatelessServiceInstanceHealth",
          "properties": {
            "InstanceId": {
              "$ref": "#/definitions/InstanceId",
              "description": "Id of a stateless service instance. InstanceId is used by Service Fabric to uniquely identify an instance of a partition of a stateless service. It is unique within a partition and does not change for the lifetime of the instance. If the instance has failed over on the same or different node, it will get a different value for the InstanceId."
            }
          }
        }
      ]
    },
    "StatelessServiceInstanceHealthState": {
      "x-ms-discriminator-value": "Stateless",
      "description": "Represents the health state of the stateless service instance, which contains the instance ID and the aggregated health state.",
      "allOf": [
        {
          "$ref": "#/definitions/ReplicaHealthState"
        },
        {
          "type": "object",
          "description": "StatelessServiceInstanceHealthState",
          "properties": {
            "ReplicaId": {
              "$ref": "#/definitions/ReplicaId",
              "description": "Id of the stateless service instance on the wire this field is called ReplicaId."
            }
          }
        }
      ]
    },
    "StatelessServicePartitionInfo": {
      "description": "Information about a partition of a stateless Service Fabric service.",
      "allOf": [
        {
          "$ref": "#/definitions/ServicePartitionInfo"
        },
        {
          "type": "object",
          "description": "StatelessServicePartitionInfo"
        }
      ],
      "x-ms-discriminator-value": "Stateless",
      "properties": {
        "InstanceCount": {
          "type": "integer",
          "format": "int64",
          "description": "Number of instances of this partition."
        }
      }
    },
    "StatelessServiceTypeDescription": {
      "description": "Describes a stateless service type defined in the service manifest of a provisioned application type.",
      "allOf": [
        {
          "$ref": "#/definitions/ServiceTypeDescription"
        },
        {
          "type": "object",
          "description": "StatelessServiceTypeDescription"
        }
      ],
      "x-ms-discriminator-value": "Stateless",
      "properties": {
        "UseImplicitHost": {
          "type": "boolean",
          "description": "A flag indicating if this type is not implemented and hosted by a user service process, but is implicitly hosted by a system created process. This value is true for services using the guest executable services, false otherwise."
        }
      }
    },
    "SystemApplicationHealthEvaluation": {
      "x-ms-discriminator-value": "SystemApplication",
      "description": "Represents health evaluation for the fabric:/System application, containing information about the data and the algorithm used by health store to evaluate health. The evaluation is returned only when the aggregated health state of the cluster is either Error or Warning.",
      "allOf": [
        {
          "$ref": "#/definitions/HealthEvaluation"
        },
        {
          "type": "object",
          "description": "SystemApplicationHealthEvaluation",
          "properties": {
            "UnhealthyEvaluations": {
              "$ref": "#/definitions/UnhealthyEvaluations",
              "description": "List of unhealthy evaluations that led to the current aggregated health state of the system application. The types of the unhealthy evaluations can be DeployedApplicationsHealthEvaluation, ServicesHealthEvaluation or EventHealthEvaluation."
            }
          }
        }
      ]
    },
    "TargetApplicationName": {
      "type": "string",
      "description": "The name of the target application, including the 'fabric:' URI scheme."
    },
    "TargetApplicationTypeVersion": {
      "type": "string",
      "description": "The target application type version (found in the application manifest) for the application upgrade."
    },
    "TargetDeploymentName": {
      "type": "string",
      "description": "The name of the target deployment."
    },
    "UnhealthyEvaluations": {
      "description": "List of health evaluations that resulted in the current aggregated health state.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/HealthEvaluationWrapper"
      }
    },
    "UpgradeDomainDeltaNodesCheckHealthEvaluation": {
      "x-ms-discriminator-value": "UpgradeDomainDeltaNodesCheck",
      "description": "Represents health evaluation for delta unhealthy cluster nodes in an upgrade domain, containing health evaluations for each unhealthy node that impacted current aggregated health state.\nCan be returned during cluster upgrade when cluster aggregated health state is Warning or Error.",
      "allOf": [
        {
          "$ref": "#/definitions/HealthEvaluation"
        },
        {
          "type": "object",
          "description": "UpgradeDomainDeltaNodesCheckHealthEvaluation",
          "properties": {
            "UpgradeDomainName": {
              "type": "string",
              "description": "Name of the upgrade domain where nodes health is currently evaluated."
            },
            "BaselineErrorCount": {
              "type": "integer",
              "format": "int64",
              "description": "Number of upgrade domain nodes with aggregated heath state Error in the health store at the beginning of the cluster upgrade."
            },
            "BaselineTotalCount": {
              "type": "integer",
              "format": "int64",
              "description": "Total number of upgrade domain nodes in the health store at the beginning of the cluster upgrade."
            },
            "MaxPercentDeltaUnhealthyNodes": {
              "type": "integer",
              "description": "Maximum allowed percentage of upgrade domain delta unhealthy nodes from the ClusterUpgradeHealthPolicy."
            },
            "TotalCount": {
              "type": "integer",
              "format": "int64",
              "description": "Total number of upgrade domain nodes in the health store."
            },
            "UnhealthyEvaluations": {
              "$ref": "#/definitions/UnhealthyEvaluations",
              "description": "List of unhealthy evaluations that led to the aggregated health state. Includes all the unhealthy NodeHealthEvaluation that impacted the aggregated health."
            }
          }
        }
      ]
    },
    "UpgradeDomainInfo": {
      "type": "object",
      "description": "Information about an upgrade domain.",
      "properties": {
        "Name": {
          "$ref": "#/definitions/UpgradeDomainName",
          "description": "The name of the upgrade domain"
        },
        "State": {
          "$ref": "#/definitions/UpgradeDomainState",
          "description": "The state of the upgrade domain."
        }
      }
    },
    "UpgradeDomainInfoList": {
      "type": "array",
      "description": "List of upgrade domains and their statuses.",
      "items": {
        "$ref": "#/definitions/UpgradeDomainInfo"
      }
    },
    "UpgradeDomainName": {
      "type": "string",
      "description": "The name of the upgrade domain"
    },
    "UpgradeDomainNodesHealthEvaluation": {
      "x-ms-discriminator-value": "UpgradeDomainNodes",
      "description": "Represents health evaluation for cluster nodes in an upgrade domain, containing health evaluations for each unhealthy node that impacted current aggregated health state. Can be returned when evaluating cluster health during cluster upgrade and the aggregated health state is either Error or Warning.",
      "allOf": [
        {
          "$ref": "#/definitions/HealthEvaluation"
        },
        {
          "type": "object",
          "description": "UpgradeDomainNodesHealthEvaluation",
          "properties": {
            "UpgradeDomainName": {
              "type": "string",
              "description": "Name of the upgrade domain where nodes health is currently evaluated."
            },
            "MaxPercentUnhealthyNodes": {
              "type": "integer",
              "description": "Maximum allowed percentage of unhealthy nodes from the ClusterHealthPolicy."
            },
            "TotalCount": {
              "type": "integer",
              "format": "int64",
              "description": "Total number of nodes in the current upgrade domain."
            },
            "UnhealthyEvaluations": {
              "$ref": "#/definitions/UnhealthyEvaluations",
              "description": "List of unhealthy evaluations that led to the aggregated health state. Includes all the unhealthy NodeHealthEvaluation that impacted the aggregated health."
            }
          }
        }
      ]
    },
    "UpgradeDomainState": {
      "type": "string",
      "description": "The state of the upgrade domain.",
      "enum": [
        "Invalid",
        "Pending",
        "InProgress",
        "Completed"
      ],
      "x-ms-enum": {
        "name": "UpgradeDomainState",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Indicates the upgrade domain state is invalid. All Service Fabric enumerations have the invalid type. The value is zero."
          },
          {
            "value": "Pending",
            "description": "The upgrade domain has not started upgrading yet. The value is 1"
          },
          {
            "value": "InProgress",
            "description": "The upgrade domain is being upgraded but not complete yet. The value is 2"
          },
          {
            "value": "Completed",
            "description": "The upgrade domain has completed upgrade. The value is 3"
          }
        ]
      }
    },
    "UpgradeDomainTimeout": {
      "type": "string",
      "description": "The amount of time each upgrade domain has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.",
      "default": "P10675199DT02H48M05.4775807S"
    },
    "UpgradeDuration": {
      "type": "string",
      "description": "The estimated amount of time that the overall upgrade elapsed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.",
      "default": "PT0H2M0S"
    },
    "UpgradeKind": {
      "type": "string",
      "description": "The kind of upgrade out of the following possible values.",
      "default": "Rolling",
      "enum": [
        "Invalid",
        "Rolling"
      ],
      "x-ms-enum": {
        "name": "UpgradeKind",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Indicates the upgrade kind is invalid. All Service Fabric enumerations have the invalid type. The value is zero."
          },
          {
            "value": "Rolling",
            "description": "The upgrade progresses one upgrade domain at a time. The value is 1"
          }
        ]
      }
    },
    "UpgradeMode": {
      "type": "string",
      "description": "The mode used to monitor health during a rolling upgrade. The values are UnmonitoredAuto, UnmonitoredManual, and Monitored.",
      "enum": [
        "Invalid",
        "UnmonitoredAuto",
        "UnmonitoredManual",
        "Monitored"
      ],
      "default": "UnmonitoredAuto",
      "x-ms-enum": {
        "name": "UpgradeMode",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Indicates the upgrade mode is invalid. All Service Fabric enumerations have the invalid type. The value is zero."
          },
          {
            "value": "UnmonitoredAuto",
            "description": "The upgrade will proceed automatically without performing any health monitoring. The value is 1"
          },
          {
            "value": "UnmonitoredManual",
            "description": "The upgrade will stop after completing each upgrade domain, giving the opportunity to manually monitor health before proceeding. The value is 2"
          },
          {
            "value": "Monitored",
            "description": "The upgrade will stop after completing each upgrade domain and automatically monitor health before proceeding. The value is 3"
          }
        ]
      }
    },
    "UpgradeType": {
      "type": "string",
      "description": "The type of upgrade out of the following possible values.",
      "default": "Rolling",
      "enum": [
        "Invalid",
        "Rolling",
        "Rolling_ForceRestart"
      ],
      "x-ms-enum": {
        "name": "UpgradeType",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Indicates the upgrade kind is invalid. All Service Fabric enumerations have the invalid type. The value is zero."
          },
          {
            "value": "Rolling",
            "description": "The upgrade progresses one upgrade domain at a time. The value is 1."
          },
          {
            "value": "Rolling_ForceRestart",
            "description": "The upgrade gets restarted by force. The value is 2."
          }
        ]
      }
    },
    "UpgradeReplicaSetCheckTimeout": {
      "type": "integer",
      "format": "int64",
      "description": "The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).",
      "default": 42949672925
    },
    "UpgradeState": {
      "type": "string",
      "description": "The state of the upgrade domain.",
      "enum": [
        "Invalid",
        "RollingBackInProgress",
        "RollingBackCompleted",
        "RollingForwardPending",
        "RollingForwardInProgress",
        "RollingForwardCompleted",
        "Failed"
      ],
      "x-ms-enum": {
        "name": "UpgradeState",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Indicates the upgrade state is invalid. All Service Fabric enumerations have the invalid type. The value is zero."
          },
          {
            "value": "RollingBackInProgress",
            "description": "The upgrade is rolling back to the previous version but is not complete yet. The value is 1"
          },
          {
            "value": "RollingBackCompleted",
            "description": "The upgrade has finished rolling back. The value is 2"
          },
          {
            "value": "RollingForwardPending",
            "description": "The current upgrade domain has finished upgrading. The overall upgrade is waiting for an explicit move next request in UnmonitoredManual mode or performing health checks in Monitored mode. The value is 3"
          },
          {
            "value": "RollingForwardInProgress",
            "description": "The upgrade is rolling forward to the target version but is not complete yet. The value is 4"
          },
          {
            "value": "RollingForwardCompleted",
            "description": "The upgrade has finished rolling forward. The value is 5"
          },
          {
            "value": "Failed",
            "description": "The upgrade has failed and is unable to execute FailureAction. The value is 6"
          }
        ]
      }
    },
    "UpgradeTimeout": {
      "type": "string",
      "description": "The amount of time the overall upgrade has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.",
      "default": "P10675199DT02H48M05.4775807S"
    },
    "WaitForInbuildReplicaSafetyCheck": {
      "description": "Safety check that waits for the replica build operation to finish. This indicates that there is a replica that is going through the copy or is providing data for building another replica. Bring the node down will abort this copy operation which are typically expensive involving data movements.",
      "allOf": [
        {
          "$ref": "#/definitions/PartitionSafetyCheck"
        },
        {
          "type": "object",
          "description": "WaitForInbuildReplicaSafetyCheck"
        }
      ],
      "x-ms-discriminator-value": "WaitForInbuildReplica"
    },
    "WaitForPrimaryPlacementSafetyCheck": {
      "description": "Safety check that waits for the primary replica that was moved out of the node due to upgrade to be placed back again on that node.",
      "allOf": [
        {
          "$ref": "#/definitions/PartitionSafetyCheck"
        },
        {
          "type": "object",
          "description": "WaitForPrimaryPlacementSafetyCheck"
        }
      ],
      "x-ms-discriminator-value": "WaitForPrimaryPlacement"
    },
    "WaitForPrimarySwapSafetyCheck": {
      "description": "Safety check that waits for the primary replica to be moved out of the node before starting an upgrade to ensure the availability of the primary replica for the partition.",
      "allOf": [
        {
          "$ref": "#/definitions/PartitionSafetyCheck"
        },
        {
          "type": "object",
          "description": "WaitForPrimarySwapSafetyCheck"
        }
      ],
      "x-ms-discriminator-value": "WaitForPrimarySwap"
    },
    "WaitForReconfigurationSafetyCheck": {
      "description": "Safety check that waits for the current reconfiguration of the partition to be completed before starting an upgrade.",
      "allOf": [
        {
          "$ref": "#/definitions/PartitionSafetyCheck"
        },
        {
          "type": "object",
          "description": "WaitForReconfigurationSafetyCheck"
        }
      ],
      "x-ms-discriminator-value": "WaitForReconfiguration"
    },
    "LoadMetricReport": {
      "type": "object",
      "description": "Represents the load metric report which contains the time metric was reported, its name and value.",
      "properties": {
        "LastReportedUtc": {
          "type": "string",
          "format": "date-time",
          "description": "Gets the UTC time when the load was reported."
        },
        "Name": {
          "type": "string",
          "description": "The name of the load metric."
        },
        "Value": {
          "type": "string",
          "format": "int32",
          "description": "The value of the load metric."
        }
      }
    },
    "PartitionLoadInformation": {
      "type": "object",
      "description": "Represents load information for a partition, which contains the primary and secondary reported load metrics.\nIn case there is no load reported, PartitionLoadInformation will contain the default load for the service of the partition.\nFor default loads, LoadMetricReport's LastReportedUtc is set to 0.",
      "properties": {
        "PartitionId": {
          "$ref": "#/definitions/PartitionId",
          "description": "Id of the partition."
        },
        "PrimaryLoadMetricReports": {
          "type": "array",
          "description": "Array of load reports from the primary replica for this partition.",
          "items": {
            "$ref": "#/definitions/LoadMetricReport"
          }
        },
        "SecondaryLoadMetricReports": {
          "type": "array",
          "description": "Array of aggregated load reports from all secondary replicas for this partition.\nArray only contains the latest reported load for each metric.",
          "items": {
            "$ref": "#/definitions/LoadMetricReport"
          }
        }
      }
    },
    "StatefulServiceReplicaInfo": {
      "x-ms-discriminator-value": "Stateful",
      "description": "Represents a stateful service replica. This includes information about the identity, role, status, health, node name, uptime, and other details about the replica.",
      "allOf": [
        {
          "$ref": "#/definitions/ReplicaInfo"
        },
        {
          "type": "object",
          "description": "StatefulServiceReplicaInfo",
          "properties": {
            "ReplicaRole": {
              "$ref": "#/definitions/ReplicaRole",
              "description": "The role of a replica of a stateful service."
            },
            "ReplicaId": {
              "$ref": "#/definitions/ReplicaId",
              "description": "Id of a stateful service replica. ReplicaId is used by Service Fabric to uniquely identify a replica of a partition. It is unique within a partition and does not change for the lifetime of the replica. If a replica gets dropped and another replica gets created on the same node for the same partition, it will get a different value for the id. Sometimes the id of a stateless service instance is also referred as a replica id."
            }
          }
        }
      ]
    },
    "StatelessServiceInstanceInfo": {
      "x-ms-discriminator-value": "Stateless",
      "description": "Represents a stateless service instance. This includes information about the identity, status, health, node name, uptime, and other details about the instance.",
      "allOf": [
        {
          "$ref": "#/definitions/ReplicaInfo"
        },
        {
          "type": "object",
          "description": "StatelessServiceInstanceInfo",
          "properties": {
            "InstanceId": {
              "$ref": "#/definitions/InstanceId",
              "description": "Id of a stateless service instance. InstanceId is used by Service Fabric to uniquely identify an instance of a partition of a stateless service. It is unique within a partition and does not change for the lifetime of the instance. If the instance has failed over on the same or different node, it will get a different value for the InstanceId."
            }
          }
        }
      ]
    },
    "ClusterFabricCodeVersionString": {
      "type": "string",
      "description": "The ServiceFabric code version of the cluster."
    },
    "ClusterFabricConfigVersionString": {
      "type": "string",
      "description": "The cluster configuration version (specified in the cluster manifest)."
    },
    "ClusterUpgradeDescriptionObject": {
      "type": "object",
      "description": "Represents a ServiceFabric cluster upgrade",
      "properties": {
        "ConfigVersion": {
          "$ref": "#/definitions/ClusterFabricConfigVersionString",
          "description": "The cluster configuration version (specified in the cluster manifest)."
        },
        "CodeVersion": {
          "$ref": "#/definitions/ClusterFabricCodeVersionString",
          "description": "The ServiceFabric code version of the cluster."
        },
        "UpgradeKind": {
          "$ref": "#/definitions/UpgradeKind",
          "description": "The kind of upgrade out of the following possible values."
        },
        "RollingUpgradeMode": {
          "$ref": "#/definitions/UpgradeMode",
          "description": "The mode used to monitor health during a rolling upgrade. The values are UnmonitoredAuto, UnmonitoredManual, and Monitored."
        },
        "UpgradeReplicaSetCheckTimeoutInSeconds": {
          "$ref": "#/definitions/UpgradeReplicaSetCheckTimeout",
          "description": "The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer)."
        },
        "ForceRestart": {
          "$ref": "#/definitions/ForceRestart",
          "description": "If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data)."
        },
        "EnableDeltaHealthEvaluation": {
          "$ref": "#/definitions/DeltaHealthEvaluationBool",
          "description": "When true, enables delta health evaluation rather than absolute health evaluation after completion of each upgrade domain."
        },
        "MonitoringPolicy": {
          "$ref": "#/definitions/MonitoringPolicyDescription",
          "description": "Describes the parameters for monitoring an upgrade in Monitored mode."
        },
        "ClusterHealthPolicy": {
          "$ref": "#/definitions/ClusterHealthPolicy",
          "description": "Defines a health policy used to evaluate the health of the cluster or of a cluster node."
        },
        "ClusterUpgradeHealthPolicy": {
          "$ref": "#/definitions/ClusterUpgradeHealthPolicyObject",
          "description": "Defines a health policy used to evaluate the health of the cluster during a cluster upgrade."
        },
        "ApplicationHealthPolicyMap": {
          "$ref": "#/definitions/ApplicationHealthPolicyMap",
          "description": "Defines a map that contains specific application health policies for different applications.\nEach entry specifies as key the application name and as value an ApplicationHealthPolicy used to evaluate the application health.\nIf an application is not specified in the map, the application health evaluation uses the ApplicationHealthPolicy found in its application manifest or the default application health policy (if no health policy is defined in the manifest).\nThe map is empty by default."
        }
      }
    },
    "ClusterUpgradeHealthPolicyObject": {
      "type": "object",
      "description": "Defines a health policy used to evaluate the health of the cluster during a cluster upgrade.",
      "properties": {
        "MaxPercentDeltaUnhealthyNodes": {
          "type": "integer",
          "description": "The maximum allowed percentage of nodes health degradation allowed during cluster upgrades. The delta is measured between the state of the nodes at the beginning of upgrade and the state of the nodes at the time of the health evaluation. The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits. The default value is 10%.",
          "maximum": 100,
          "minimum": 0
        },
        "MaxPercentUpgradeDomainDeltaUnhealthyNodes": {
          "type": "integer",
          "description": "The maximum allowed percentage of upgrade domain nodes health degradation allowed during cluster upgrades. The delta is measured between the state of the upgrade domain nodes at the beginning of upgrade and the state of the upgrade domain nodes at the time of the health evaluation. The check is performed after every upgrade domain upgrade completion for all completed upgrade domains to make sure the state of the upgrade domains is within tolerated limits. The default value is 15%.",
          "maximum": 100,
          "minimum": 0
        }
      }
    },
    "ClusterUpgradeProgressObject": {
      "type": "object",
      "description": "Information about a cluster upgrade.",
      "properties": {
        "CodeVersion": {
          "$ref": "#/definitions/ClusterFabricCodeVersionString",
          "description": "The ServiceFabric code version of the cluster."
        },
        "ConfigVersion": {
          "$ref": "#/definitions/ClusterFabricConfigVersionString",
          "description": "The cluster configuration version (specified in the cluster manifest)."
        },
        "UpgradeDomains": {
          "$ref": "#/definitions/UpgradeDomainInfoList",
          "description": "List of upgrade domains and their statuses."
        },
        "UpgradeState": {
          "$ref": "#/definitions/UpgradeState",
          "description": "The state of the upgrade domain."
        },
        "NextUpgradeDomain": {
          "$ref": "#/definitions/NextUpgradeDomain",
          "description": "The name of the next upgrade domain to be processed."
        },
        "RollingUpgradeMode": {
          "$ref": "#/definitions/UpgradeMode",
          "description": "The mode used to monitor health during a rolling upgrade. The values are UnmonitoredAuto, UnmonitoredManual, and Monitored."
        },
        "UpgradeDescription": {
          "$ref": "#/definitions/ClusterUpgradeDescriptionObject",
          "description": "Represents a ServiceFabric cluster upgrade"
        },
        "UpgradeDurationInMilliseconds": {
          "$ref": "#/definitions/UpgradeDurationString",
          "description": "The estimated elapsed time spent processing the current overall upgrade."
        },
        "UpgradeDomainDurationInMilliseconds": {
          "$ref": "#/definitions/UpgradeDomainDurationString",
          "description": "The estimated elapsed time spent processing the current upgrade domain."
        },
        "UnhealthyEvaluations": {
          "$ref": "#/definitions/UnhealthyEvaluations",
          "description": "List of health evaluations that resulted in the current aggregated health state."
        },
        "CurrentUpgradeDomainProgress": {
          "$ref": "#/definitions/CurrentUpgradeDomainProgressInfo",
          "description": "Information about the current in-progress upgrade domain."
        },
        "StartTimestampUtc": {
          "$ref": "#/definitions/UpgradeStartTimeUTCString",
          "description": "The start time of the upgrade in UTC."
        },
        "FailureTimestampUtc": {
          "$ref": "#/definitions/UpgradeFailureTimeUTCString",
          "description": "The failure time of the upgrade in UTC."
        },
        "FailureReason": {
          "$ref": "#/definitions/FailureReason",
          "description": "The cause of an upgrade failure that resulted in FailureAction being executed."
        },
        "UpgradeDomainProgressAtFailure": {
          "$ref": "#/definitions/FailedUpgradeDomainProgressObject",
          "description": "The detailed upgrade progress for nodes in the current upgrade domain at the point of failure."
        }
      }
    },
    "ClusterConfigurationUpgradeDescription": {
      "type": "object",
      "description": "Describes the parameters for a standalone cluster configuration upgrade.",
      "properties": {
        "ClusterConfig": {
          "type": "string",
          "description": "The cluster configuration."
        },
        "HealthCheckRetryTimeout": {
          "type": "string",
          "format": "duration",
          "description": "The length of time between attempts to perform a health checks if the application or cluster is not healthy.",
          "default": "PT0H0M0S"
        },
        "HealthCheckWaitDurationInSeconds": {
          "type": "string",
          "format": "duration",
          "description": "The length of time to wait after completing an upgrade domain before starting the health checks process.",
          "default": "PT0H0M0S"
        },
        "HealthCheckStableDurationInSeconds": {
          "type": "string",
          "format": "duration",
          "description": "The length of time that the application or cluster must remain healthy.",
          "default": "PT0H0M0S"
        },
        "UpgradeDomainTimeoutInSeconds": {
          "type": "string",
          "format": "duration",
          "description": "The timeout for the upgrade domain.",
          "default": "PT0H0M0S"
        },
        "UpgradeTimeoutInSeconds": {
          "type": "string",
          "format": "duration",
          "description": "The upgrade timeout.",
          "default": "PT0H0M0S"
        },
        "MaxPercentUnhealthyApplications": {
          "type": "integer",
          "description": "The maximum allowed percentage of unhealthy applications during the upgrade. Allowed values are integer values from zero to 100.",
          "default": 0
        },
        "MaxPercentUnhealthyNodes": {
          "type": "integer",
          "description": "The maximum allowed percentage of unhealthy nodes during the upgrade. Allowed values are integer values from zero to 100.",
          "default": 0
        },
        "MaxPercentDeltaUnhealthyNodes": {
          "type": "integer",
          "description": "The maximum allowed percentage of delta health degradation during the upgrade. Allowed values are integer values from zero to 100.",
          "default": 0
        },
        "MaxPercentUpgradeDomainDeltaUnhealthyNodes": {
          "type": "integer",
          "description": "The maximum allowed percentage of upgrade domain delta health degradation during the upgrade. Allowed values are integer values from zero to 100.",
          "default": 0
        },
        "ApplicationHealthPolicies": {
          "$ref": "#/definitions/ApplicationHealthPolicies",
          "description": "Defines the application health policy map used to evaluate the health of an application or one of its children entities."
        }
      },
      "required": [
        "ClusterConfig"
      ]
    },
    "DeltaHealthEvaluationBool": {
      "type": "boolean",
      "description": "When true, enables delta health evaluation rather than absolute health evaluation after completion of each upgrade domain."
    },
    "FailedUpgradeDomainProgressObject": {
      "type": "object",
      "description": "The detailed upgrade progress for nodes in the current upgrade domain at the point of failure.",
      "properties": {
        "DomainName": {
          "$ref": "#/definitions/UpgradeDomainName",
          "description": "The name of the upgrade domain"
        },
        "NodeUpgradeProgressList": {
          "$ref": "#/definitions/NodeUpgradeProgressInfoList",
          "description": "List of upgrading nodes and their statuses"
        }
      }
    },
    "UpgradeDomainDurationString": {
      "type": "string",
      "description": "The estimated elapsed time spent processing the current upgrade domain."
    },
    "UpgradeDurationString": {
      "type": "string",
      "description": "The estimated elapsed time spent processing the current overall upgrade."
    },
    "UpgradeFailureTimeUTCString": {
      "type": "string",
      "description": "The failure time of the upgrade in UTC."
    },
    "UpgradeStartTimeUTCString": {
      "type": "string",
      "description": "The start time of the upgrade in UTC."
    },
    "UpgradeOrchestrationServiceState": {
      "type": "object",
      "description": "Service state of Service Fabric Upgrade Orchestration Service.",
      "properties": {
        "ServiceState": {
          "type": "string",
          "description": "The state of Service Fabric Upgrade Orchestration Service."
        }
      }
    },
    "UpgradeOrchestrationServiceStateSummary": {
      "type": "object",
      "description": "Service state summary of Service Fabric Upgrade Orchestration Service.",
      "properties": {
        "CurrentCodeVersion": {
          "type": "string",
          "description": "The current code version of the cluster."
        },
        "CurrentManifestVersion": {
          "type": "string",
          "description": "The current manifest version of the cluster."
        },
        "TargetCodeVersion": {
          "type": "string",
          "description": "The target code version of  the cluster."
        },
        "TargetManifestVersion": {
          "type": "string",
          "description": "The target manifest version of the cluster."
        },
        "PendingUpgradeType": {
          "type": "string",
          "description": "The type of the pending upgrade of the cluster."
        }
      }
    },
    "ApplicationTypeImageStorePath": {
      "description": "Path description for the application package in the image store specified during the prior copy operation.",
      "required": [
        "ApplicationTypeBuildPath"
      ],
      "properties": {
        "ApplicationTypeBuildPath": {
          "type": "string",
          "description": "The relative image store path to the application package."
        }
      }
    },
    "UnprovisionApplicationTypeDescriptionInfo": {
      "type": "object",
      "description": "Describes the operation to unregister or unprovision an application type and its version that was registered with the Service Fabric.",
      "required": [
        "ApplicationTypeVersion"
      ],
      "properties": {
        "ApplicationTypeVersion": {
          "$ref": "#/definitions/ApplicationTypeVersion",
          "description": "The version of the application type as defined in the application manifest."
        },
        "Async": {
          "type": "boolean",
          "description": "The flag indicating whether or not unprovision should occur asynchronously. When set to true, the unprovision operation returns when the request is accepted by the system, and the unprovision operation continues without any timeout limit. The default value is false. However, we recommend setting it to true for large application packages that were provisioned."
        }
      }
    },
    "CodePackageName": {
      "type": "string",
      "description": "The name of the code package defined in the service manifest."
    },
    "CodePackageEntryPointStatistics": {
      "type": "object",
      "description": "Statistics about setup or main entry point  of a code package deployed on a Service Fabric node.",
      "properties": {
        "LastExitCode": {
          "type": "string",
          "description": "The last exit code of the entry point."
        },
        "LastActivationTime": {
          "type": "string",
          "format": "date-time",
          "description": "The last time (in UTC) when Service Fabric attempted to run the entry point."
        },
        "LastExitTime": {
          "type": "string",
          "format": "date-time",
          "description": "The last time (in UTC) when the entry point finished running."
        },
        "LastSuccessfulActivationTime": {
          "type": "string",
          "format": "date-time",
          "description": "The last time (in UTC) when the entry point ran successfully."
        },
        "LastSuccessfulExitTime": {
          "type": "string",
          "format": "date-time",
          "description": "The last time (in UTC) when the entry point finished running gracefully."
        },
        "ActivationCount": {
          "type": "string",
          "description": "Number of times the entry point has run."
        },
        "ActivationFailureCount": {
          "type": "string",
          "description": "Number of times the entry point failed to run."
        },
        "ContinuousActivationFailureCount": {
          "type": "string",
          "description": "Number of times the entry point continuously failed to run."
        },
        "ExitCount": {
          "type": "string",
          "description": "Number of times the entry point finished running."
        },
        "ExitFailureCount": {
          "type": "string",
          "description": "Number of times the entry point failed to exit gracefully."
        },
        "ContinuousExitFailureCount": {
          "type": "string",
          "description": "Number of times the entry point continuously failed to exit gracefully."
        }
      }
    },
    "DeployedCodePackageInfoList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/DeployedCodePackageInfo"
      },
      "description": "List of deployed code package information."
    },
    "DeployedCodePackageInfo": {
      "type": "object",
      "description": "Information about code package deployed on a Service Fabric node.",
      "properties": {
        "Name": {
          "$ref": "#/definitions/CodePackageName",
          "description": "The name of the code package."
        },
        "Version": {
          "type": "string",
          "description": "The version of the code package specified in service manifest."
        },
        "ServiceManifestName": {
          "$ref": "#/definitions/ServiceManifestName",
          "description": "The name of service manifest that specified this code package."
        },
        "ServicePackageActivationId": {
          "$ref": "#/definitions/ServicePackageActivationId",
          "description": "The ActivationId of a deployed service package. If ServicePackageActivationMode specified at the time of creating the service\nis 'SharedProcess' (or if it is not specified, in which case it defaults to 'SharedProcess'), then value of ServicePackageActivationId\nis always an empty string."
        },
        "HostType": {
          "$ref": "#/definitions/HostType",
          "description": "Specifies the type of host for main entry point of a code package as specified in service manifest."
        },
        "HostIsolationMode": {
          "$ref": "#/definitions/HostIsolationMode",
          "description": "Specifies the isolation mode of main entry point of a code package when it's host type is ContainerHost. This is specified as part of container host policies in application manifest while importing service manifest."
        },
        "Status": {
          "$ref": "#/definitions/DeploymentStatus",
          "description": "Specifies the status of a deployed application or service package on a Service Fabric node."
        },
        "RunFrequencyInterval": {
          "type": "string",
          "description": "The interval at which code package is run. This is used for periodic code package."
        },
        "SetupEntryPoint": {
          "$ref": "#/definitions/CodePackageEntryPoint",
          "description": "Information about setup or main entry point of a code package deployed on a Service Fabric node."
        },
        "MainEntryPoint": {
          "$ref": "#/definitions/CodePackageEntryPoint",
          "description": "Information about setup or main entry point of a code package deployed on a Service Fabric node."
        }
      }
    },
    "DeploymentStatus": {
      "type": "string",
      "description": "Specifies the status of a deployed application or service package on a Service Fabric node.",
      "enum": [
        "Invalid",
        "Downloading",
        "Activating",
        "Active",
        "Upgrading",
        "Deactivating"
      ],
      "x-ms-enum": {
        "name": "DeploymentStatus",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Indicates status of the application or service package is not known or invalid. The value is 0."
          },
          {
            "value": "Downloading",
            "description": "Indicates the application or service package is being downloaded to the node from the ImageStore. The value is 1."
          },
          {
            "value": "Activating",
            "description": "Indicates the application or service package is being activated. The value is 2."
          },
          {
            "value": "Active",
            "description": "Indicates the application or service package is active the node. The value is 3."
          },
          {
            "value": "Upgrading",
            "description": "Indicates the application or service package is being upgraded. The value is 4."
          },
          {
            "value": "Deactivating",
            "description": "Indicates the application or service package is being deactivated. The value is 5."
          }
        ]
      }
    },
    "EntryPointStatus": {
      "type": "string",
      "description": "Specifies the status of the code package entry point deployed on a Service Fabric node.",
      "enum": [
        "Invalid",
        "Pending",
        "Starting",
        "Started",
        "Stopping",
        "Stopped"
      ],
      "x-ms-enum": {
        "name": "EntryPointStatus",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Indicates status of entry point is not known or invalid. The value is 0."
          },
          {
            "value": "Pending",
            "description": "Indicates the entry point is scheduled to be started. The value is 1."
          },
          {
            "value": "Starting",
            "description": "Indicates the entry point is being started. The value is 2."
          },
          {
            "value": "Started",
            "description": "Indicates the entry point was started successfully and is running. The value is 3."
          },
          {
            "value": "Stopping",
            "description": "Indicates the entry point is being stopped. The value is 4."
          },
          {
            "value": "Stopped",
            "description": "Indicates the entry point is not running. The value is 5."
          }
        ]
      }
    },
    "CodePackageEntryPoint": {
      "type": "object",
      "description": "Information about setup or main entry point of a code package deployed on a Service Fabric node.",
      "properties": {
        "EntryPointLocation": {
          "type": "string",
          "description": "The location of entry point executable on the node."
        },
        "ProcessId": {
          "type": "string",
          "description": "The process ID of the entry point."
        },
        "RunAsUserName": {
          "type": "string",
          "description": "The user name under which entry point executable is run on the node."
        },
        "CodePackageEntryPointStatistics": {
          "$ref": "#/definitions/CodePackageEntryPointStatistics",
          "description": "Statistics about setup or main entry point  of a code package deployed on a Service Fabric node."
        },
        "Status": {
          "$ref": "#/definitions/EntryPointStatus",
          "description": "Specifies the status of the code package entry point deployed on a Service Fabric node."
        },
        "NextActivationTime": {
          "type": "string",
          "format": "date-time",
          "description": "The time (in UTC) when the entry point executable will be run next."
        },
        "InstanceId": {
          "$ref": "#/definitions/CodePackageInstanceId",
          "description": "The instance ID for current running entry point. For a code package setup entry point (if specified) runs first and after it finishes main entry point is started. Each time entry point executable is run, its instance id will change."
        }
      }
    },
    "Chaos": {
      "type": "object",
      "description": "Contains a description of Chaos.",
      "properties": {
        "ChaosParameters": {
          "$ref": "#/definitions/ChaosParameters",
          "description": "If Chaos is running, these are the parameters Chaos is running with."
        },
        "Status": {
          "$ref": "#/definitions/ChaosStatus",
          "description": "Current status of the Chaos run."
        },
        "ScheduleStatus": {
          "$ref": "#/definitions/ChaosScheduleStatus",
          "description": "Current status of the schedule."
        }
      }
    },
    "ChaosStatus": {
      "type": "string",
      "description": "Current status of the Chaos run.",
      "enum": [
        "Invalid",
        "Running",
        "Stopped"
      ],
      "x-ms-enum": {
        "name": "ChaosStatus",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Indicates an invalid Chaos status. All Service Fabric enumerations have the invalid type. The valus is zero."
          },
          {
            "value": "Running",
            "description": "Indicates that Chaos is not stopped. The value is one."
          },
          {
            "value": "Stopped",
            "description": "Indicates that Chaos is not scheduling further faults. The value is two."
          }
        ]
      }
    },
    "ChaosScheduleStatus": {
      "type": "string",
      "description": "Current status of the schedule.",
      "enum": [
        "Invalid",
        "Stopped",
        "Active",
        "Expired",
        "Pending"
      ],
      "x-ms-enum": {
        "name": "ChaosScheduleStatus",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Indicates an invalid Chaos Schedule status. All Service Fabric enumerations have the invalid type. The valus is zero."
          },
          {
            "value": "Stopped",
            "description": "Indicates that the schedule is stopped and not being used to schedule runs of chaos. The value is one."
          },
          {
            "value": "Active",
            "description": "Indicates that the schedule is active and is being used to schedule runs of Chaos. The value is two."
          },
          {
            "value": "Expired",
            "description": "Indicates that the schedule is expired and will no longer be used to schedule runs of Chaos. The value is three."
          },
          {
            "value": "Pending",
            "description": "Indicates that the schedule is pending and is not yet being used to schedule runs of Chaos but will be used when the start time is passed. The value is four."
          }
        ]
      }
    },
    "ChaosContextMap": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      },
      "description": "Describes a map that contains a collection of ChaosContextMapItem's."
    },
    "ChaosContext": {
      "type": "object",
      "description": "Describes a map, which is a collection of (string, string) type key-value pairs. The map can be used to record information about\nthe Chaos run. There cannot be more than 100 such pairs and each string (key or value) can be at most 4095 characters long.\nThis map is set by the starter of the Chaos run to optionally store the context about the specific run.",
      "properties": {
        "Map": {
          "$ref": "#/definitions/ChaosContextMap",
          "description": "Describes a map that contains a collection of ChaosContextMapItem's."
        }
      }
    },
    "ChaosParameters": {
      "type": "object",
      "description": "Defines all the parameters to configure a Chaos run.",
      "properties": {
        "TimeToRunInSeconds": {
          "type": "string",
          "description": "Total time (in seconds) for which Chaos will run before automatically stopping. The maximum allowed value is 4,294,967,295 (System.UInt32.MaxValue).",
          "default": "4294967295"
        },
        "MaxClusterStabilizationTimeoutInSeconds": {
          "type": "integer",
          "format": "int64",
          "description": "The maximum amount of time to wait for all cluster entities to become stable and healthy. Chaos executes in iterations and at the start of each iteration it validates the health of cluster entities.\nDuring validation if a cluster entity is not stable and healthy within MaxClusterStabilizationTimeoutInSeconds, Chaos generates a validation failed event.",
          "default": 60,
          "minimum": 0,
          "maximum": 4294967295
        },
        "MaxConcurrentFaults": {
          "type": "integer",
          "format": "int64",
          "description": "MaxConcurrentFaults is the maximum number of concurrent faults induced per iteration.\nChaos executes in iterations and two consecutive iterations are separated by a validation phase.\nThe higher the concurrency, the more aggressive the injection of faults, leading to inducing more complex series of states to uncover bugs.\nThe recommendation is to start with a value of 2 or 3 and to exercise caution while moving up.",
          "default": 1,
          "minimum": 0,
          "maximum": 4294967295
        },
        "EnableMoveReplicaFaults": {
          "type": "boolean",
          "description": "Enables or disables the move primary and move secondary faults.",
          "default": true
        },
        "WaitTimeBetweenFaultsInSeconds": {
          "type": "integer",
          "format": "int64",
          "description": "Wait time (in seconds) between consecutive faults within a single iteration.\nThe larger the value, the lower the overlapping between faults and the simpler the sequence of state transitions that the cluster goes through.\nThe recommendation is to start with a value between 1 and 5 and exercise caution while moving up.",
          "default": 20,
          "minimum": 0,
          "maximum": 4294967295
        },
        "WaitTimeBetweenIterationsInSeconds": {
          "type": "integer",
          "format": "int64",
          "description": "Time-separation (in seconds) between two consecutive iterations of Chaos.\nThe larger the value, the lower the fault injection rate.",
          "default": 30,
          "minimum": 0,
          "maximum": 4294967295
        },
        "ClusterHealthPolicy": {
          "$ref": "#/definitions/ClusterHealthPolicy",
          "description": "Passed-in cluster health policy is used to validate health of the cluster in between Chaos iterations. If the cluster health is in error or if an unexpected exception happens during fault execution--to provide the cluster with some time to recuperate--Chaos will wait for 30 minutes before the next health-check."
        },
        "Context": {
          "$ref": "#/definitions/ChaosContext",
          "description": "Describes a map, which is a collection of (string, string) type key-value pairs. The map can be used to record information about\nthe Chaos run. There cannot be more than 100 such pairs and each string (key or value) can be at most 4095 characters long.\nThis map is set by the starter of the Chaos run to optionally store the context about the specific run."
        },
        "ChaosTargetFilter": {
          "$ref": "#/definitions/ChaosTargetFilter",
          "description": "List of cluster entities to target for Chaos faults.\nThis filter can be used to target Chaos faults only to certain node types or only to certain application instances. If ChaosTargetFilter is not used, Chaos faults all cluster entities.\nIf ChaosTargetFilter is used, Chaos faults only the entities that meet the ChaosTargetFilter specification."
        }
      }
    },
    "ChaosParametersDictionaryItem": {
      "type": "object",
      "description": "Defines an item in ChaosParametersDictionary of the Chaos Schedule.",
      "required": [
        "Key",
        "Value"
      ],
      "properties": {
        "Key": {
          "type": "string",
          "description": "The key identifying the Chaos Parameter in the dictionary. This key is referenced by Chaos Schedule Jobs."
        },
        "Value": {
          "$ref": "#/definitions/ChaosParameters",
          "description": "Defines all the parameters to configure a Chaos run."
        }
      }
    },
    "ChaosEvent": {
      "type": "object",
      "discriminator": "Kind",
      "description": "Represents an event generated during a Chaos run.",
      "properties": {
        "Kind": {
          "$ref": "#/definitions/ChaosEventKind",
          "description": "The kind of Chaos event."
        },
        "TimeStampUtc": {
          "type": "string",
          "description": "The UTC timestamp when this Chaos event was generated.",
          "format": "date-time"
        }
      },
      "required": [
        "Kind",
        "TimeStampUtc"
      ]
    },
    "ChaosEventWrapper": {
      "type": "object",
      "description": "Wrapper object for Chaos event.",
      "properties": {
        "ChaosEvent": {
          "$ref": "#/definitions/ChaosEvent",
          "description": "Represents an event generated during a Chaos run."
        }
      }
    },
    "ChaosEventKind": {
      "type": "string",
      "description": "The kind of Chaos event.",
      "enum": [
        "Invalid",
        "Started",
        "ExecutingFaults",
        "Waiting",
        "ValidationFailed",
        "TestError",
        "Stopped"
      ],
      "x-ms-enum": {
        "name": "ChaosEventKind",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Indicates an invalid Chaos event kind. All Service Fabric enumerations have the invalid type."
          },
          {
            "value": "Started",
            "description": "Indicates a Chaos event that gets generated when Chaos is started."
          },
          {
            "value": "ExecutingFaults",
            "description": "Indicates a Chaos event that gets generated when Chaos has decided on the faults for an iteration. This Chaos event contains the details of the faults as a list of strings."
          },
          {
            "value": "Waiting",
            "description": "Indicates a Chaos event that gets generated when Chaos is waiting for the cluster to become ready for faulting, for example, Chaos may be waiting for the on-going upgrade to finish."
          },
          {
            "value": "ValidationFailed",
            "description": "Indicates a Chaos event that gets generated when the cluster entities do not become stable and healthy within ChaosParameters.MaxClusterStabilizationTimeoutInSeconds."
          },
          {
            "value": "TestError",
            "description": "Indicates a Chaos event that gets generated when an unexpected event has occurred in the Chaos engine, for example, due to the cluster snapshot being inconsistent, while faulting a faultable entity Chaos found that the entity was already faulted."
          },
          {
            "value": "Stopped",
            "description": "Indicates a Chaos event that gets generated when Chaos stops because either the user issued a stop or the time to run was up."
          }
        ]
      }
    },
    "ChaosEventsSegment": {
      "type": "object",
      "description": "Contains the list of Chaos events and the continuation token to get the next segment.",
      "properties": {
        "ContinuationToken": {
          "$ref": "#/definitions/ContinuationToken",
          "description": "The continuation token parameter is used to obtain next set of results. The continuation token is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token is not included in the response."
        },
        "History": {
          "$ref": "#/definitions/ChaosEventHistory",
          "description": "List of Chaos events that meet the user-supplied criteria."
        }
      }
    },
    "ChaosScheduleDescription": {
      "type": "object",
      "description": "Defines the Chaos Schedule used by Chaos and the version of the Chaos Schedule. The version value wraps back to 0 after surpassing 2,147,483,647.",
      "properties": {
        "Version": {
          "description": "The version number of the Schedule.",
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "Schedule": {
          "$ref": "#/definitions/ChaosSchedule",
          "description": "Defines the schedule used by Chaos."
        }
      }
    },
    "ChaosSchedule": {
      "type": "object",
      "description": "Defines the schedule used by Chaos.",
      "properties": {
        "StartDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time Chaos will start using this schedule.",
          "default": "1601-01-01T00:00:00Z"
        },
        "ExpiryDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time Chaos will continue to use this schedule until.",
          "default": "9999-12-31T23:59:59.999Z"
        },
        "ChaosParametersDictionary": {
          "type": "array",
          "description": "A mapping of string names to Chaos Parameters to be referenced by Chaos Schedule Jobs.",
          "items": {
            "$ref": "#/definitions/ChaosParametersDictionaryItem"
          }
        },
        "Jobs": {
          "description": "A list of all Chaos Schedule Jobs that will be automated by the schedule.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChaosScheduleJob"
          }
        }
      }
    },
    "ChaosScheduleJob": {
      "type": "object",
      "description": "Defines a repetition rule and parameters of Chaos to be used with the Chaos Schedule.",
      "properties": {
        "ChaosParameters": {
          "type": "string",
          "description": "A reference to which Chaos Parameters of the Chaos Schedule to use."
        },
        "Days": {
          "$ref": "#/definitions/ChaosScheduleJobActiveDaysOfWeek",
          "description": "Defines the days of the week that a Chaos Schedule Job will run for."
        },
        "Times": {
          "description": "A list of Time Ranges that specify when during active days that this job will run. The times are interpreted as UTC.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimeRange"
          }
        }
      }
    },
    "ChaosScheduleJobActiveDaysOfWeek": {
      "type": "object",
      "description": "Defines the days of the week that a Chaos Schedule Job will run for.",
      "properties": {
        "Sunday": {
          "type": "boolean",
          "description": "Indicates if the Chaos Schedule Job will run on Sunday",
          "default": false
        },
        "Monday": {
          "type": "boolean",
          "description": "Indicates if the Chaos Schedule Job will run on Monday",
          "default": false
        },
        "Tuesday": {
          "type": "boolean",
          "description": "Indicates if the Chaos Schedule Job will run on Tuesday",
          "default": false
        },
        "Wednesday": {
          "type": "boolean",
          "description": "Indicates if the Chaos Schedule Job will run on Wednesday",
          "default": false
        },
        "Thursday": {
          "type": "boolean",
          "description": "Indicates if the Chaos Schedule Job will run on Thursday",
          "default": false
        },
        "Friday": {
          "type": "boolean",
          "description": "Indicates if the Chaos Schedule Job will run on Friday",
          "default": false
        },
        "Saturday": {
          "type": "boolean",
          "description": "Indicates if the Chaos Schedule Job will run on Saturday",
          "default": false
        }
      }
    },
    "TimeRange": {
      "type": "object",
      "description": "Defines a time range in a 24 hour day specified by a start and end time.",
      "properties": {
        "StartTime": {
          "$ref": "#/definitions/TimeOfDay",
          "description": "Defines an hour and minute of the day specified in 24 hour time."
        },
        "EndTime": {
          "$ref": "#/definitions/TimeOfDay",
          "description": "Defines an hour and minute of the day specified in 24 hour time."
        }
      }
    },
    "TimeOfDay": {
      "type": "object",
      "description": "Defines an hour and minute of the day specified in 24 hour time.",
      "properties": {
        "Hour": {
          "type": "integer",
          "format": "int32",
          "description": "Represents the hour of the day. Value must be between 0 and 23 inclusive.",
          "minimum": 0,
          "maximum": 23
        },
        "Minute": {
          "type": "integer",
          "format": "int32",
          "description": "Represents the minute of the hour. Value must be between 0 to 59 inclusive.",
          "minimum": 0,
          "maximum": 59
        }
      }
    },
    "ExecutingFaultsChaosEvent": {
      "description": "Describes a Chaos event that gets generated when Chaos has decided on the faults for an iteration. This Chaos event contains the details of the faults as a list of strings.",
      "x-ms-discriminator-value": "ExecutingFaults",
      "allOf": [
        {
          "$ref": "#/definitions/ChaosEvent"
        },
        {
          "type": "object",
          "description": "ExecutingFaultsChaosEvent",
          "properties": {
            "Faults": {
              "type": "array",
              "description": "List of string description of the faults that Chaos decided to execute in an iteration.",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "StartedChaosEvent": {
      "description": "Describes a Chaos event that gets generated when Chaos is started.",
      "x-ms-discriminator-value": "Started",
      "allOf": [
        {
          "$ref": "#/definitions/ChaosEvent"
        },
        {
          "type": "object",
          "description": "StartedChaosEvent",
          "properties": {
            "ChaosParameters": {
              "$ref": "#/definitions/ChaosParameters",
              "description": "Defines all the parameters to configure a Chaos run."
            }
          }
        }
      ]
    },
    "StoppedChaosEvent": {
      "description": "Describes a Chaos event that gets generated when Chaos stops because either the user issued a stop or the time to run was up.",
      "x-ms-discriminator-value": "Stopped",
      "allOf": [
        {
          "$ref": "#/definitions/ChaosEvent"
        },
        {
          "type": "object",
          "description": "StoppedChaosEvent",
          "properties": {
            "Reason": {
              "type": "string",
              "description": "Describes why Chaos stopped. Chaos can stop because of StopChaos API call or the timeToRun provided in ChaosParameters is over."
            }
          }
        }
      ]
    },
    "TestErrorChaosEvent": {
      "description": "Describes a Chaos event that gets generated when an unexpected event occurs in the Chaos engine.\nFor example, due to the cluster snapshot being inconsistent, while faulting an entity, Chaos found that the entity was already faulted -- which would be an unexpected event.",
      "x-ms-discriminator-value": "TestError",
      "allOf": [
        {
          "$ref": "#/definitions/ChaosEvent"
        },
        {
          "type": "object",
          "description": "TestErrorChaosEvent",
          "properties": {
            "Reason": {
              "type": "string",
              "description": "Describes why TestErrorChaosEvent was generated. For example, Chaos tries to fault a partition but finds that the partition is no longer fault tolerant, then a TestErrorEvent gets generated with the reason stating that the partition is not fault tolerant."
            }
          }
        }
      ]
    },
    "ValidationFailedChaosEvent": {
      "description": "Chaos event corresponding to a failure during validation.",
      "x-ms-discriminator-value": "ValidationFailed",
      "allOf": [
        {
          "$ref": "#/definitions/ChaosEvent"
        },
        {
          "type": "object",
          "description": "ValidationFailedChaosEvent",
          "properties": {
            "Reason": {
              "type": "string",
              "description": "Describes why the ValidationFailedChaosEvent was generated. This may happen because more than MaxPercentUnhealthyNodes are unhealthy for more than MaxClusterStabilizationTimeout. This reason will be in the Reason property of the ValidationFailedChaosEvent as a string."
            }
          }
        }
      ]
    },
    "WaitingChaosEvent": {
      "description": "Describes a Chaos event that gets generated when Chaos is waiting for the cluster to become ready for faulting, for example, Chaos may be waiting for the on-going upgrade to finish.",
      "x-ms-discriminator-value": "Waiting",
      "allOf": [
        {
          "$ref": "#/definitions/ChaosEvent"
        },
        {
          "type": "object",
          "description": "WaitingChaosEvent",
          "properties": {
            "Reason": {
              "type": "string",
              "description": "Describes why the WaitingChaosEvent was generated, for example, due to a cluster upgrade."
            }
          }
        }
      ]
    },
    "ChaosEventHistory": {
      "type": "array",
      "description": "An list of Chaos events that were generated during the time range passed into the GetChaosReport API call.",
      "items": {
        "$ref": "#/definitions/ChaosEventWrapper"
      }
    },
    "ChaosTargetFilter": {
      "type": "object",
      "description": "Defines all filters for targeted Chaos faults, for example, faulting only certain node types or faulting only certain applications.\nIf ChaosTargetFilter is not used, Chaos faults all cluster entities. If ChaosTargetFilter is used, Chaos faults only the entities that meet the ChaosTargetFilter\nspecification. NodeTypeInclusionList and ApplicationInclusionList allow a union semantics only. It is not possible to specify an intersection\nof NodeTypeInclusionList and ApplicationInclusionList. For example, it is not possible to specify \"fault this application only when it is on that node type.\"\nOnce an entity is included in either NodeTypeInclusionList or ApplicationInclusionList, that entity cannot be excluded using ChaosTargetFilter. Even if\napplicationX does not appear in ApplicationInclusionList, in some Chaos iteration applicationX can be faulted because it happens to be on a node of nodeTypeY that is included\nin NodeTypeInclusionList. If both NodeTypeInclusionList and ApplicationInclusionList are null or empty, an ArgumentException is thrown.",
      "properties": {
        "NodeTypeInclusionList": {
          "type": "array",
          "description": "A list of node types to include in Chaos faults.\nAll types of faults (restart node, restart code package, remove replica, restart replica, move primary, and move secondary) are enabled for the nodes of these node types.\nIf a nodetype (say NodeTypeX) does not appear in the NodeTypeInclusionList, then node level faults (like NodeRestart) will never be enabled for the nodes of\nNodeTypeX, but code package and replica faults can still be enabled for NodeTypeX if an application in the ApplicationInclusionList.\nhappens to reside on a node of NodeTypeX.\nAt most 100 node type names can be included in this list, to increase this number, a config upgrade is required for MaxNumberOfNodeTypesInChaosEntityFilter configuration.",
          "items": {
            "$ref": "#/definitions/NodeType"
          }
        },
        "ApplicationInclusionList": {
          "type": "array",
          "description": "A list of application URI's to include in Chaos faults.\nAll replicas belonging to services of these applications are amenable to replica faults (restart replica, remove replica, move primary, and move secondary) by Chaos.\nChaos may restart a code package only if the code package hosts replicas of these applications only.\nIf an application does not appear in this list, it can still be faulted in some Chaos iteration if the application ends up on a node of a node type that is included in NodeTypeInclusionList.\nHowever, if applicationX is tied to nodeTypeY through placement constraints and applicationX is absent from ApplicationInclusionList and nodeTypeY is absent from NodeTypeInclusionList, then applicationX will never be faulted.\nAt most 1000 application names can be included in this list, to increase this number, a config upgrade is required for MaxNumberOfApplicationsInChaosEntityFilter configuration.",
          "items": {
            "$ref": "#/definitions/ApplicationName"
          }
        }
      }
    },
    "ApplicationTypeVersion": {
      "type": "string",
      "description": "The version of the application type as defined in the application manifest."
    },
    "ApplicationCapacityDescription": {
      "type": "object",
      "description": "Describes capacity information for services of this application. This description can be used for describing the following.\n- Reserving the capacity for the services on the nodes\n- Limiting the total number of nodes that services of this application can run on\n- Limiting the custom capacity metrics to limit the total consumption of this metric by the services of this application",
      "properties": {
        "MinimumNodes": {
          "type": "integer",
          "format": "int64",
          "description": "The minimum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. If this property is set to zero, no capacity will be reserved. The value of this property cannot be more than the value of the MaximumNodes property.",
          "minimum": 0
        },
        "MaximumNodes": {
          "type": "integer",
          "format": "int64",
          "description": "The maximum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. By default, the value of this property is zero and it means that the services can be placed on any node.",
          "minimum": 0,
          "default": 0
        },
        "ApplicationMetrics": {
          "$ref": "#/definitions/ApplicationMetricDescriptionList",
          "description": "List of application capacity metric description."
        }
      }
    },
    "ApplicationDescription": {
      "type": "object",
      "description": "Describes a Service Fabric application.",
      "properties": {
        "Name": {
          "$ref": "#/definitions/ApplicationName",
          "description": "The name of the application, including the 'fabric:' URI scheme."
        },
        "TypeName": {
          "$ref": "#/definitions/ApplicationTypeName",
          "description": "The application type name as defined in the application manifest."
        },
        "TypeVersion": {
          "$ref": "#/definitions/ApplicationTypeVersion",
          "description": "The version of the application type as defined in the application manifest."
        },
        "ParameterList": {
          "$ref": "#/definitions/ApplicationParameterList",
          "description": "List of application parameters with overridden values from their default values specified in the application manifest."
        },
        "ApplicationCapacity": {
          "$ref": "#/definitions/ApplicationCapacityDescription",
          "description": "Describes capacity information for services of this application. This description can be used for describing the following.\n- Reserving the capacity for the services on the nodes\n- Limiting the total number of nodes that services of this application can run on\n- Limiting the custom capacity metrics to limit the total consumption of this metric by the services of this application"
        }
      },
      "required": [
        "Name",
        "TypeName",
        "TypeVersion"
      ]
    },
    "ApplicationMetricDescription": {
      "type": "object",
      "description": "Describes capacity information for a custom resource balancing metric. This can be used to limit the total consumption of this metric by the services of this application.",
      "properties": {
        "Name": {
          "type": "string",
          "description": "The name of the metric."
        },
        "MaximumCapacity": {
          "type": "integer",
          "format": "int64",
          "description": "The maximum node capacity for Service Fabric application.\nThis is the maximum Load for an instance of this application on a single node. Even if the capacity of node is greater than this value, Service Fabric will limit the total load of services within the application on each node to this value.\nIf set to zero, capacity for this metric is unlimited on each node.\nWhen creating a new application with application capacity defined, the product of MaximumNodes and this value must always be smaller than or equal to TotalApplicationCapacity.\nWhen updating existing application with application capacity, the product of MaximumNodes and this value must always be smaller than or equal to TotalApplicationCapacity."
        },
        "ReservationCapacity": {
          "type": "integer",
          "format": "int64",
          "description": "The node reservation capacity for Service Fabric application.\nThis is the amount of load which is reserved on nodes which have instances of this application.\nIf MinimumNodes is specified, then the product of these values will be the capacity reserved in the cluster for the application.\nIf set to zero, no capacity is reserved for this metric.\nWhen setting application capacity or when updating application capacity; this value must be smaller than or equal to MaximumCapacity for each metric."
        },
        "TotalApplicationCapacity": {
          "description": "The total metric capacity for Service Fabric application.\nThis is the total metric capacity for this application in the cluster. Service Fabric will try to limit the sum of loads of services within the application to this value.\nWhen creating a new application with application capacity defined, the product of MaximumNodes and MaximumCapacity must always be smaller than or equal to this value.",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ApplicationMetricDescriptionList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ApplicationMetricDescription"
      },
      "description": "List of application capacity metric description."
    },
    "ComposeDeploymentStatus": {
      "type": "string",
      "description": "The status of the compose deployment.",
      "enum": [
        "Invalid",
        "Provisioning",
        "Creating",
        "Ready",
        "Unprovisioning",
        "Deleting",
        "Failed",
        "Upgrading"
      ],
      "x-ms-enum": {
        "name": "ComposeDeploymentStatus",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Indicates that the compose deployment status is invalid. The value is zero."
          },
          {
            "value": "Provisioning",
            "description": "Indicates that the compose deployment is being provisioned in background. The value is 1."
          },
          {
            "value": "Creating",
            "description": "Indicates that the compose deployment is being created in background. The value is 2."
          },
          {
            "value": "Ready",
            "description": "Indicates that the compose deployment has been successfully created or upgraded. The value is 3."
          },
          {
            "value": "Unprovisioning",
            "description": "Indicates that the compose deployment is being unprovisioned in background. The value is 4."
          },
          {
            "value": "Deleting",
            "description": "Indicates that the compose deployment is being deleted in background. The value is 5."
          },
          {
            "value": "Failed",
            "description": "Indicates that the compose deployment was terminated due to persistent failures. The value is 6."
          },
          {
            "value": "Upgrading",
            "description": "Indicates that the compose deployment is being upgraded in the background. The value is 7."
          }
        ]
      }
    },
    "ComposeDeploymentStatusInfo": {
      "type": "object",
      "description": "Information about a Service Fabric compose deployment.",
      "properties": {
        "Name": {
          "$ref": "#/definitions/DeploymentName",
          "description": "The name of the deployment."
        },
        "ApplicationName": {
          "$ref": "#/definitions/ApplicationName",
          "description": "The name of the application, including the 'fabric:' URI scheme."
        },
        "Status": {
          "$ref": "#/definitions/ComposeDeploymentStatus",
          "description": "The status of the compose deployment."
        },
        "StatusDetails": {
          "description": "The status details of compose deployment including failure message.",
          "type": "string"
        }
      }
    },
    "ComposeDeploymentUpgradeDescription": {
      "type": "object",
      "description": "Describes the parameters for a compose deployment upgrade.",
      "properties": {
        "DeploymentName": {
          "$ref": "#/definitions/DeploymentName",
          "description": "The name of the deployment."
        },
        "ComposeFileContent": {
          "type": "string",
          "description": "The content of the compose file that describes the deployment to create."
        },
        "RegistryCredential": {
          "$ref": "#/definitions/RegistryCredential",
          "description": "Credential information to connect to container registry."
        },
        "UpgradeKind": {
          "$ref": "#/definitions/UpgradeKind",
          "description": "The kind of upgrade out of the following possible values."
        },
        "RollingUpgradeMode": {
          "$ref": "#/definitions/UpgradeMode",
          "description": "The mode used to monitor health during a rolling upgrade. The values are UnmonitoredAuto, UnmonitoredManual, and Monitored."
        },
        "UpgradeReplicaSetCheckTimeoutInSeconds": {
          "$ref": "#/definitions/UpgradeReplicaSetCheckTimeout",
          "description": "The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer)."
        },
        "ForceRestart": {
          "$ref": "#/definitions/ForceRestart",
          "description": "If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data)."
        },
        "MonitoringPolicy": {
          "$ref": "#/definitions/MonitoringPolicyDescription",
          "description": "Describes the parameters for monitoring an upgrade in Monitored mode."
        },
        "ApplicationHealthPolicy": {
          "$ref": "#/definitions/ApplicationHealthPolicy",
          "description": "Defines a health policy used to evaluate the health of an application or one of its children entities."
        }
      },
      "required": [
        "DeploymentName",
        "ComposeFileContent",
        "UpgradeKind"
      ]
    },
    "ComposeDeploymentUpgradeProgressInfo": {
      "type": "object",
      "description": "Describes the parameters for a compose deployment upgrade.",
      "properties": {
        "DeploymentName": {
          "$ref": "#/definitions/TargetDeploymentName",
          "description": "The name of the target deployment."
        },
        "ApplicationName": {
          "$ref": "#/definitions/TargetApplicationName",
          "description": "The name of the target application, including the 'fabric:' URI scheme."
        },
        "UpgradeState": {
          "$ref": "#/definitions/ComposeDeploymentUpgradeState",
          "description": "The state of the compose deployment upgrade."
        },
        "UpgradeStatusDetails": {
          "type": "string",
          "description": "Additional detailed information about the status of the pending upgrade."
        },
        "UpgradeKind": {
          "$ref": "#/definitions/UpgradeKind",
          "description": "The kind of upgrade out of the following possible values."
        },
        "RollingUpgradeMode": {
          "$ref": "#/definitions/UpgradeMode",
          "description": "The mode used to monitor health during a rolling upgrade. The values are UnmonitoredAuto, UnmonitoredManual, and Monitored."
        },
        "ForceRestart": {
          "$ref": "#/definitions/ForceRestart",
          "description": "If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data)."
        },
        "UpgradeReplicaSetCheckTimeoutInSeconds": {
          "$ref": "#/definitions/UpgradeReplicaSetCheckTimeout",
          "description": "The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer)."
        },
        "MonitoringPolicy": {
          "$ref": "#/definitions/MonitoringPolicyDescription",
          "description": "Describes the parameters for monitoring an upgrade in Monitored mode."
        },
        "ApplicationHealthPolicy": {
          "$ref": "#/definitions/ApplicationHealthPolicy",
          "description": "Defines a health policy used to evaluate the health of an application or one of its children entities."
        },
        "TargetApplicationTypeVersion": {
          "$ref": "#/definitions/TargetApplicationTypeVersion",
          "description": "The target application type version (found in the application manifest) for the application upgrade."
        },
        "UpgradeDuration": {
          "$ref": "#/definitions/UpgradeDuration",
          "description": "The estimated amount of time that the overall upgrade elapsed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds."
        },
        "CurrentUpgradeDomainDuration": {
          "$ref": "#/definitions/CurrentUpgradeDomainDuration",
          "description": "The estimated amount of time spent processing current Upgrade Domain. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds."
        },
        "ApplicationUnhealthyEvaluations": {
          "$ref": "#/definitions/ApplicationUnhealthyEvaluations",
          "description": "List of health evaluations that resulted in the current aggregated health state."
        },
        "CurrentUpgradeDomainProgress": {
          "$ref": "#/definitions/CurrentUpgradeDomainProgressInfo",
          "description": "Information about the current in-progress upgrade domain."
        },
        "StartTimestampUtc": {
          "type": "string",
          "description": "The estimated UTC datetime when the upgrade started."
        },
        "FailureTimestampUtc": {
          "type": "string",
          "description": "The estimated UTC datetime when the upgrade failed and FailureAction was executed."
        },
        "FailureReason": {
          "$ref": "#/definitions/FailureReason",
          "description": "The cause of an upgrade failure that resulted in FailureAction being executed."
        },
        "UpgradeDomainProgressAtFailure": {
          "$ref": "#/definitions/FailureUpgradeDomainProgressInfo",
          "description": "Information about the upgrade domain progress at the time of upgrade failure."
        },
        "ApplicationUpgradeStatusDetails": {
          "type": "string",
          "description": "Additional details of application upgrade including failure message."
        }
      }
    },
    "ComposeDeploymentUpgradeState": {
      "type": "string",
      "description": "The state of the compose deployment upgrade.",
      "enum": [
        "Invalid",
        "ProvisioningTarget",
        "RollingForwardInProgress",
        "RollingForwardPending",
        "UnprovisioningCurrent",
        "RollingForwardCompleted",
        "RollingBackInProgress",
        "UnprovisioningTarget",
        "RollingBackCompleted",
        "Failed"
      ],
      "x-ms-enum": {
        "name": "ComposeDeploymentUpgradeState",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Indicates the upgrade state is invalid. All Service Fabric enumerations have the invalid type. The value is zero."
          },
          {
            "value": "ProvisioningTarget",
            "description": "The upgrade is in the progress of provisioning target application type version. The value is 1."
          },
          {
            "value": "RollingForwardInProgress",
            "description": "The upgrade is rolling forward to the target version but is not complete yet. The value is 2."
          },
          {
            "value": "RollingForwardPending",
            "description": "The current upgrade domain has finished upgrading. The overall upgrade is waiting for an explicit move next request in UnmonitoredManual mode or performing health checks in Monitored mode. The value is 3"
          },
          {
            "value": "UnprovisioningCurrent",
            "description": "The upgrade is in the progress of unprovisioning current application type version and rolling forward to the target version is completed. The value is 4."
          },
          {
            "value": "RollingForwardCompleted",
            "description": "The upgrade has finished rolling forward. The value is 5."
          },
          {
            "value": "RollingBackInProgress",
            "description": "The upgrade is rolling back to the previous version but is not complete yet. The value is 6."
          },
          {
            "value": "UnprovisioningTarget",
            "description": "The upgrade is in the progress of unprovisioning target application type version and rolling back to the current version is completed. The value is 7."
          },
          {
            "value": "RollingBackCompleted",
            "description": "The upgrade has finished rolling back. The value is 8."
          },
          {
            "value": "Failed",
            "description": "The upgrade has failed and is unable to execute FailureAction. The value is 9."
          }
        ]
      }
    },
    "PagedComposeDeploymentStatusInfoList": {
      "type": "object",
      "description": "The list of compose deployments in the cluster. The list is paged when all of the results cannot fit in a single message. The next set of results can be obtained by executing the same query with the continuation token provided in this list.",
      "properties": {
        "ContinuationToken": {
          "$ref": "#/definitions/ContinuationToken",
          "description": "The continuation token parameter is used to obtain next set of results. The continuation token is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token is not included in the response."
        },
        "Items": {
          "type": "array",
          "description": "List of compose deployment status information.",
          "items": {
            "$ref": "#/definitions/ComposeDeploymentStatusInfo"
          }
        }
      }
    },
    "CreateComposeDeploymentDescription": {
      "type": "object",
      "description": "Defines description for creating a Service Fabric compose deployment.",
      "properties": {
        "DeploymentName": {
          "$ref": "#/definitions/DeploymentName",
          "description": "The name of the deployment."
        },
        "ComposeFileContent": {
          "type": "string",
          "description": "The content of the compose file that describes the deployment to create."
        },
        "RegistryCredential": {
          "$ref": "#/definitions/RegistryCredential",
          "description": "Credential information to connect to container registry."
        }
      },
      "required": [
        "DeploymentName",
        "ComposeFileContent"
      ]
    },
    "RegistryCredential": {
      "type": "object",
      "description": "Credential information to connect to container registry.",
      "properties": {
        "RegistryUserName": {
          "type": "string",
          "description": "The user name to connect to container registry."
        },
        "RegistryPassword": {
          "type": "string",
          "description": "The password for supplied username to connect to container registry."
        },
        "PasswordEncrypted": {
          "type": "boolean",
          "description": "Indicates that supplied container registry password is encrypted."
        }
      }
    },
    "DeployedServicePackageInfoList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/DeployedServicePackageInfo"
      },
      "description": "List of deployed service package information."
    },
    "DeployedServicePackageInfo": {
      "type": "object",
      "description": "Information about service package deployed on a Service Fabric node.",
      "properties": {
        "Name": {
          "$ref": "#/definitions/ServiceManifestName",
          "description": "The name of the service package as specified in the service manifest."
        },
        "Version": {
          "type": "string",
          "description": "The version of the service package specified in service manifest."
        },
        "Status": {
          "$ref": "#/definitions/DeploymentStatus",
          "description": "Specifies the status of a deployed application or service package on a Service Fabric node."
        },
        "ServicePackageActivationId": {
          "$ref": "#/definitions/ServicePackageActivationId",
          "description": "The ActivationId of a deployed service package. If ServicePackageActivationMode specified at the time of creating the service\nis 'SharedProcess' (or if it is not specified, in which case it defaults to 'SharedProcess'), then value of ServicePackageActivationId\nis always an empty string."
        }
      }
    },
    "DeploymentName": {
      "type": "string",
      "description": "The name of the deployment."
    },
    "CorrelationSchemeList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ServiceCorrelationDescription"
      },
      "description": "A list that describes the correlation of the service with other services."
    },
    "MoveCost": {
      "type": "string",
      "description": "Specifies the move cost for the service.",
      "enum": [
        "Zero",
        "Low",
        "Medium",
        "High"
      ],
      "x-ms-enum": {
        "name": "MoveCost",
        "modelAsString": true,
        "values": [
          {
            "value": "Zero",
            "description": "Zero move cost. This value is zero."
          },
          {
            "value": "Low",
            "description": "Specifies the move cost of the service as Low. The value is 1."
          },
          {
            "value": "Medium",
            "description": "Specifies the move cost of the service as Medium. The value is 2."
          },
          {
            "value": "High",
            "description": "Specifies the move cost of the service as High. The value is 3."
          }
        ]
      }
    },
    "PartitionScheme": {
      "type": "string",
      "description": "Enumerates the ways that a service can be partitioned.",
      "enum": [
        "Invalid",
        "Singleton",
        "UniformInt64Range",
        "Named"
      ],
      "x-ms-enum": {
        "name": "PartitionScheme",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Indicates the partition kind is invalid. All Service Fabric enumerations have the invalid type. The value is zero."
          },
          {
            "value": "Singleton",
            "description": "Indicates that the partition is based on string names, and is a SingletonPartitionSchemeDescription object, The value is 1."
          },
          {
            "value": "UniformInt64Range",
            "description": "Indicates that the partition is based on Int64 key ranges, and is a UniformInt64RangePartitionSchemeDescription object. The value is 2."
          },
          {
            "value": "Named",
            "description": "Indicates that the partition is based on string names, and is a NamedPartitionSchemeDescription object. The value is 3"
          }
        ]
      }
    },
    "ServiceCorrelationDescription": {
      "type": "object",
      "description": "Creates a particular correlation between services.",
      "required": [
        "Scheme",
        "ServiceName"
      ],
      "properties": {
        "Scheme": {
          "$ref": "#/definitions/ServiceCorrelationScheme",
          "description": "The ServiceCorrelationScheme which describes the relationship between this service and the service specified via ServiceName."
        },
        "ServiceName": {
          "$ref": "#/definitions/ServiceName",
          "description": "The name of the service that the correlation relationship is established with."
        }
      }
    },
    "ServiceCorrelationScheme": {
      "type": "string",
      "description": "The service correlation scheme.",
      "enum": [
        "Invalid",
        "Affinity",
        "AlignedAffinity",
        "NonAlignedAffinity"
      ],
      "x-ms-enum": {
        "name": "ServiceCorrelationScheme",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "An invalid correlation scheme. Cannot be used. The value is zero."
          },
          {
            "value": "Affinity",
            "description": "Indicates that this service has an affinity relationship with another service. Provided for backwards compatibility, consider preferring the Aligned or NonAlignedAffinity options. The value is 1."
          },
          {
            "value": "AlignedAffinity",
            "description": "Aligned affinity ensures that the primaries of the partitions of the affinitized services are collocated on the same nodes. This is the default and is the same as selecting the Affinity scheme. The value is 2."
          },
          {
            "value": "NonAlignedAffinity",
            "description": "Non-Aligned affinity guarantees that all replicas of each service will be placed on the same nodes. Unlike Aligned Affinity, this does not guarantee that replicas of particular role will be collocated. The value is 3."
          }
        ]
      }
    },
    "ServiceLoadMetricsList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ServiceLoadMetricDescription"
      },
      "description": "The service load metrics is given as an array of ServiceLoadMetricDescription objects."
    },
    "ServiceLoadMetricDescription": {
      "type": "object",
      "description": "Specifies a metric to load balance a service during runtime.",
      "required": [
        "Name"
      ],
      "properties": {
        "Name": {
          "type": "string",
          "description": "The name of the metric. If the service chooses to report load during runtime, the load metric name should match the name that is specified in Name exactly. Note that metric names are case-sensitive."
        },
        "Weight": {
          "$ref": "#/definitions/ServiceLoadMetricWeight",
          "description": "The service load metric relative weight, compared to other metrics configured for this service, as a number."
        },
        "PrimaryDefaultLoad": {
          "type": "integer",
          "description": "Used only for Stateful services. The default amount of load, as a number, that this service creates for this metric when it is a Primary replica."
        },
        "SecondaryDefaultLoad": {
          "type": "integer",
          "description": "Used only for Stateful services. The default amount of load, as a number, that this service creates for this metric when it is a Secondary replica."
        },
        "DefaultLoad": {
          "type": "integer",
          "description": "Used only for Stateless services. The default amount of load, as a number, that this service creates for this metric."
        }
      }
    },
    "ServiceLoadMetricWeight": {
      "type": "string",
      "description": "Determines the metric weight relative to the other metrics that are configured for this service. During runtime, if two metrics end up in conflict, the Cluster Resource Manager prefers the metric with the higher weight.",
      "enum": [
        "Zero",
        "Low",
        "Medium",
        "High"
      ],
      "x-ms-enum": {
        "name": "ServiceLoadMetricWeight",
        "modelAsString": true,
        "values": [
          {
            "value": "Zero",
            "description": "Disables resource balancing for this metric. This value is zero."
          },
          {
            "value": "Low",
            "description": "Specifies the metric weight of the service load as Low. The value is 1."
          },
          {
            "value": "Medium",
            "description": "Specifies the metric weight of the service load as Medium. The value is 2."
          },
          {
            "value": "High",
            "description": "Specifies the metric weight of the service load as High. The value is 3."
          }
        ]
      }
    },
    "ServicePackageActivationMode": {
      "type": "string",
      "description": "The activation mode of service package to be used for a Service Fabric service. This is specified at the time of creating the Service.",
      "enum": [
        "SharedProcess",
        "ExclusiveProcess"
      ],
      "x-ms-enum": {
        "name": "ServicePackageActivationMode",
        "modelAsString": true,
        "values": [
          {
            "value": "SharedProcess",
            "description": "This is the default activation mode. With this activation mode, replicas or instances from different partition(s) of service, on a given node, will share same activation of service package on a node. The value is zero."
          },
          {
            "value": "ExclusiveProcess",
            "description": "With this activation mode, each replica or instance of service, on a given node, will have its own dedicated activation of service package on a node. The value is 1."
          }
        ]
      }
    },
    "ServicePlacementPoliciesList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ServicePlacementPolicyDescription"
      },
      "description": "A list that describes the correlation of the service with other services."
    },
    "PartitionSchemeDescription": {
      "type": "object",
      "discriminator": "PartitionScheme",
      "description": "Describes how the service is partitioned.",
      "required": [
        "PartitionScheme"
      ],
      "properties": {
        "PartitionScheme": {
          "$ref": "#/definitions/PartitionScheme",
          "description": "Specifies how the service is partitioned."
        }
      }
    },
    "NamedPartitionSchemeDescription": {
      "description": "Describes the named partition scheme of the service.",
      "allOf": [
        {
          "$ref": "#/definitions/PartitionSchemeDescription"
        },
        {
          "type": "object",
          "description": "NamedPartitionSchemeDescription"
        }
      ],
      "x-ms-discriminator-value": "Named",
      "required": [
        "Count",
        "Names"
      ],
      "properties": {
        "Count": {
          "type": "integer",
          "description": "The number of partitions."
        },
        "Names": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Array of size specified by the ‘Count’ parameter, for the names of the partitions."
        }
      }
    },
    "SingletonPartitionSchemeDescription": {
      "description": "Describes the partition scheme of a singleton-partitioned, or non-partitioned service.",
      "allOf": [
        {
          "$ref": "#/definitions/PartitionSchemeDescription"
        },
        {
          "type": "object",
          "description": "SingletonPartitionSchemeDescription"
        }
      ],
      "x-ms-discriminator-value": "Singleton"
    },
    "UniformInt64RangePartitionSchemeDescription": {
      "description": "Describes a partitioning scheme where an integer range is allocated evenly across a number of partitions.",
      "allOf": [
        {
          "$ref": "#/definitions/PartitionSchemeDescription"
        },
        {
          "type": "object",
          "description": "UniformInt64RangePartitionSchemeDescription"
        }
      ],
      "x-ms-discriminator-value": "UniformInt64Range",
      "required": [
        "Count",
        "LowKey",
        "HighKey"
      ],
      "properties": {
        "Count": {
          "type": "integer",
          "description": "The number of partitions."
        },
        "LowKey": {
          "type": "string",
          "description": "String indicating the lower bound of the partition key range that\nshould be split between the partitions."
        },
        "HighKey": {
          "type": "string",
          "description": "String indicating the upper bound of the partition key range that\nshould be split between the partitions."
        }
      }
    },
    "ServiceDescription": {
      "type": "object",
      "discriminator": "ServiceKind",
      "description": "A ServiceDescription contains all of the information necessary to create a service.",
      "required": [
        "ServiceKind",
        "ServiceName",
        "ServiceTypeName",
        "PartitionDescription"
      ],
      "properties": {
        "ServiceKind": {
          "$ref": "#/definitions/ServiceKind",
          "description": "The service kind."
        },
        "ApplicationName": {
          "$ref": "#/definitions/ApplicationName",
          "description": "The name of the application, including the 'fabric:' URI scheme."
        },
        "ServiceName": {
          "$ref": "#/definitions/ServiceName",
          "description": "The full name of the service with 'fabric:' URI scheme."
        },
        "ServiceTypeName": {
          "$ref": "#/definitions/ServiceTypeName",
          "description": "Name of the service type as specified in the service manifest."
        },
        "InitializationData": {
          "$ref": "#/definitions/ByteArray",
          "description": "The initialization data as an array of bytes. Initialization data is passed to service instances or replicas when they are created."
        },
        "PartitionDescription": {
          "$ref": "#/definitions/PartitionSchemeDescription",
          "description": "The partition description as an object."
        },
        "PlacementConstraints": {
          "type": "string",
          "description": "The placement constraints as a string. Placement constraints are boolean expressions on node properties and allow for restricting a service to particular nodes based on the service requirements. For example, to place a service on nodes where NodeType is blue specify the following: \"NodeColor == blue)\"."
        },
        "CorrelationScheme": {
          "$ref": "#/definitions/CorrelationSchemeList",
          "description": "The correlation scheme."
        },
        "ServiceLoadMetrics": {
          "$ref": "#/definitions/ServiceLoadMetricsList",
          "description": "The service load metrics."
        },
        "ServicePlacementPolicies": {
          "$ref": "#/definitions/ServicePlacementPoliciesList",
          "description": "The service placement policies."
        },
        "DefaultMoveCost": {
          "$ref": "#/definitions/MoveCost",
          "description": "The move cost for the service."
        },
        "IsDefaultMoveCostSpecified": {
          "type": "boolean",
          "description": "Indicates if the DefaultMoveCost property is specified."
        },
        "ServicePackageActivationMode": {
          "$ref": "#/definitions/ServicePackageActivationMode",
          "description": "The activation mode of service package to be used for a service."
        },
        "ServiceDnsName": {
          "type": "string",
          "description": "The DNS name of the service. It requires the DNS system service to be enabled in Service Fabric cluster."
        },
        "ScalingPolicies": {
          "$ref": "#/definitions/ScalingPolicyDescriptionList",
          "description": "Scaling policies for this service."
        }
      }
    },
    "StatefulServiceDescription": {
      "description": "Describes a stateful service.",
      "allOf": [
        {
          "$ref": "#/definitions/ServiceDescription"
        },
        {
          "type": "object",
          "description": "StatefulServiceDescription"
        }
      ],
      "x-ms-discriminator-value": "Stateful",
      "required": [
        "TargetReplicaSetSize",
        "MinReplicaSetSize",
        "HasPersistedState"
      ],
      "properties": {
        "TargetReplicaSetSize": {
          "type": "integer",
          "minimum": 1,
          "description": "The target replica set size as a number."
        },
        "MinReplicaSetSize": {
          "type": "integer",
          "minimum": 1,
          "description": "The minimum replica set size as a number."
        },
        "HasPersistedState": {
          "type": "boolean",
          "description": "A flag indicating whether this is a persistent service which stores states on the local disk. If it is then the value of this property is true, if not it is false."
        },
        "Flags": {
          "type": "integer",
          "description": "Flags indicating whether other properties are set. Each of the associated properties corresponds to a flag, specified below, which, if set, indicate that the property is specified.\nThis property can be a combination of those flags obtained using bitwise 'OR' operator.\nFor example, if the provided value is 6 then the flags for QuorumLossWaitDuration (2) and StandByReplicaKeepDuration(4) are set.\n\n- None - Does not indicate any other properties are set. The value is zero.\n- ReplicaRestartWaitDuration - Indicates the ReplicaRestartWaitDuration property is set. The value is 1.\n- QuorumLossWaitDuration - Indicates the QuorumLossWaitDuration property is set. The value is 2.\n- StandByReplicaKeepDuration - Indicates the StandByReplicaKeepDuration property is set. The value is 4."
        },
        "ReplicaRestartWaitDurationSeconds": {
          "type": "integer",
          "format": "int64",
          "minimum": 0,
          "maximum": 4294967295,
          "description": "The duration, in seconds, between when a replica goes down and when a new replica is created."
        },
        "QuorumLossWaitDurationSeconds": {
          "type": "integer",
          "format": "int64",
          "minimum": 0,
          "maximum": 4294967295,
          "description": "The maximum duration, in seconds, for which a partition is allowed to be in a state of quorum loss."
        },
        "StandByReplicaKeepDurationSeconds": {
          "type": "integer",
          "format": "int64",
          "minimum": 0,
          "maximum": 4294967295,
          "description": "The definition on how long StandBy replicas should be maintained before being removed."
        }
      }
    },
    "StatelessServiceDescription": {
      "description": "Describes a stateless service.",
      "allOf": [
        {
          "$ref": "#/definitions/ServiceDescription"
        },
        {
          "type": "object",
          "description": "StatelessServiceDescription"
        }
      ],
      "x-ms-discriminator-value": "Stateless",
      "required": [
        "InstanceCount"
      ],
      "properties": {
        "InstanceCount": {
          "type": "integer",
          "minimum": -1,
          "description": "The instance count."
        }
      }
    },
    "ReplicatorQueueStatus": {
      "type": "object",
      "description": "Provides various statistics of the queue used in the service fabric replicator.\nContains information about the service fabric replicator like the replication/copy queue utilization, last acknowledgement received timestamp, etc.\nDepending on the role of the replicator, the properties in this type imply different meanings.",
      "properties": {
        "QueueUtilizationPercentage": {
          "type": "integer",
          "format": "int32",
          "description": "Represents the utilization of the queue. A value of 0 indicates that the queue is empty and a value of 100 indicates the queue is full."
        },
        "QueueMemorySize": {
          "type": "string",
          "description": "Represents the virtual memory consumed by the queue in bytes."
        },
        "FirstSequenceNumber": {
          "type": "string",
          "description": "On a primary replicator, this is semantically the sequence number of the operation for which all the secondary replicas have sent an acknowledgement.\nOn a secondary replicator, this is the smallest sequence number of the operation that is present in the queue."
        },
        "CompletedSequenceNumber": {
          "type": "string",
          "description": "On a primary replicator, this is semantically the highest sequence number of the operation for which all the secondary replicas have sent an acknowledgement.\nOn a secondary replicator, this is semantically the highest sequence number that has been applied to the persistent state."
        },
        "CommittedSequenceNumber": {
          "type": "string",
          "description": "On a primary replicator, this is semantically the highest sequence number of the operation for which a write quorum of the secondary replicas have sent an acknowledgement.\nOn a secondary replicator, this is semantically the highest sequence number of the in-order operation received from the primary."
        },
        "LastSequenceNumber": {
          "type": "string",
          "description": "Represents the latest sequence number of the operation that is available in the queue."
        }
      }
    },
    "ReplicatorStatus": {
      "type": "object",
      "discriminator": "Kind",
      "description": "Represents a base class for primary or secondary replicator status.\nContains information about the service fabric replicator like the replication/copy queue utilization, last acknowledgement received timestamp, etc.",
      "required": [
        "Kind"
      ],
      "properties": {
        "Kind": {
          "$ref": "#/definitions/ReplicaRole",
          "description": "The role of a replica of a stateful service."
        }
      }
    },
    "PrimaryReplicatorStatus": {
      "x-ms-discriminator-value": "Primary",
      "type": "object",
      "description": "Provides statistics about the Service Fabric Replicator, when it is functioning in a Primary role.",
      "allOf": [
        {
          "$ref": "#/definitions/ReplicatorStatus"
        },
        {
          "type": "object",
          "description": "Status of the primary replicator.",
          "properties": {
            "ReplicationQueueStatus": {
              "$ref": "#/definitions/ReplicatorQueueStatus",
              "description": "Details about the replication queue on the primary replicator."
            },
            "RemoteReplicators": {
              "$ref": "#/definitions/RemoteReplicatorStatusList",
              "description": "The status of all the active and idle secondary replicators that the primary is aware of."
            }
          }
        }
      ]
    },
    "SecondaryReplicatorStatus": {
      "type": "object",
      "description": "Provides statistics about the Service Fabric Replicator, when it is functioning in a ActiveSecondary role.",
      "allOf": [
        {
          "$ref": "#/definitions/ReplicatorStatus"
        },
        {
          "type": "object",
          "description": "Represents a base class for secondary replicator status.",
          "properties": {
            "ReplicationQueueStatus": {
              "$ref": "#/definitions/ReplicatorQueueStatus",
              "description": "Details about the replication queue on the secondary replicator."
            },
            "LastReplicationOperationReceivedTimeUtc": {
              "type": "string",
              "format": "date-time",
              "description": "The last time-stamp (UTC) at which a replication operation was received from the primary.\nUTC 0 represents an invalid value, indicating that a replication operation message was never received."
            },
            "IsInBuild": {
              "type": "boolean",
              "description": "Value that indicates whether the replica is currently being built."
            },
            "CopyQueueStatus": {
              "$ref": "#/definitions/ReplicatorQueueStatus",
              "description": "Details about the copy queue on the secondary replicator."
            },
            "LastCopyOperationReceivedTimeUtc": {
              "type": "string",
              "format": "date-time",
              "description": "The last time-stamp (UTC) at which a copy operation was received from the primary.\nUTC 0 represents an invalid value, indicating that a copy operation message was never received."
            },
            "LastAcknowledgementSentTimeUtc": {
              "type": "string",
              "format": "date-time",
              "description": "The last time-stamp (UTC) at which an acknowledgment was sent to the primary replicator.\nUTC 0 represents an invalid value, indicating that an acknowledgment message was never sent."
            }
          }
        }
      ]
    },
    "SecondaryActiveReplicatorStatus": {
      "x-ms-discriminator-value": "ActiveSecondary",
      "description": "Status of the secondary replicator when it is in active mode and is part of the replica set.",
      "allOf": [
        {
          "$ref": "#/definitions/SecondaryReplicatorStatus"
        },
        {
          "type": "object"
        }
      ]
    },
    "SecondaryIdleReplicatorStatus": {
      "x-ms-discriminator-value": "IdleSecondary",
      "description": "Status of the secondary replicator when it is in idle mode and is being built by the primary.",
      "allOf": [
        {
          "$ref": "#/definitions/SecondaryReplicatorStatus"
        },
        {
          "type": "object"
        }
      ]
    },
    "RemoteReplicatorStatus": {
      "type": "object",
      "description": "Represents the state of the secondary replicator from the primary replicator’s point of view.",
      "properties": {
        "ReplicaId": {
          "$ref": "#/definitions/ReplicaId",
          "description": "Represents the replica ID of the remote secondary replicator."
        },
        "LastAcknowledgementProcessedTimeUtc": {
          "type": "string",
          "format": "date-time",
          "description": "The last timestamp (in UTC) when an acknowledgement from the secondary replicator was processed on the primary.\nUTC 0 represents an invalid value, indicating that no acknowledgement messages were ever processed."
        },
        "LastReceivedReplicationSequenceNumber": {
          "type": "string",
          "description": "The highest replication operation sequence number that the secondary has received from the primary."
        },
        "LastAppliedReplicationSequenceNumber": {
          "type": "string",
          "description": "The highest replication operation sequence number that the secondary has applied to its state."
        },
        "IsInBuild": {
          "type": "boolean",
          "description": "A value that indicates whether the secondary replica is in the process of being built."
        },
        "LastReceivedCopySequenceNumber": {
          "type": "string",
          "description": "The highest copy operation sequence number that the secondary has received from the primary.\nA value of -1 implies that the secondary has received all copy operations."
        },
        "LastAppliedCopySequenceNumber": {
          "type": "string",
          "description": "The highest copy operation sequence number that the secondary has applied to its state.\nA value of -1 implies that the secondary has applied all copy operations and the copy process is complete."
        },
        "RemoteReplicatorAcknowledgementStatus": {
          "$ref": "#/definitions/RemoteReplicatorAcknowledgementStatus",
          "description": "Represents the acknowledgment status for the remote secondary replicator."
        }
      }
    },
    "RemoteReplicatorStatusList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/RemoteReplicatorStatus"
      },
      "description": "List of remote replicator status"
    },
    "RemoteReplicatorAcknowledgementStatus": {
      "type": "object",
      "description": "Provides details about the remote replicators from the primary replicator's point of view.",
      "properties": {
        "ReplicationStreamAcknowledgementDetail": {
          "$ref": "#/definitions/RemoteReplicatorAcknowledgementDetail",
          "description": "Details about the acknowledgements for operations that are part of the replication stream data."
        },
        "CopyStreamAcknowledgementDetail": {
          "$ref": "#/definitions/RemoteReplicatorAcknowledgementDetail",
          "description": "Details about the acknowledgements for operations that are part of the copy stream data."
        }
      }
    },
    "RemoteReplicatorAcknowledgementDetail": {
      "type": "object",
      "description": "Provides various statistics of the acknowledgements that are being received from the remote replicator.",
      "properties": {
        "AverageReceiveDuration": {
          "type": "string",
          "description": "Represents the average duration it takes for the remote replicator to receive an operation."
        },
        "AverageApplyDuration": {
          "type": "string",
          "description": "Represents the average duration it takes for the remote replicator to apply an operation. This usually entails writing the operation to disk."
        },
        "NotReceivedCount": {
          "type": "string",
          "description": "Represents the number of operations not yet received by a remote replicator."
        },
        "ReceivedAndNotAppliedCount": {
          "type": "string",
          "description": "Represents the number of operations received and not yet applied by a remote replicator."
        }
      }
    },
    "DeployedServiceReplicaDetailInfo": {
      "type": "object",
      "discriminator": "ServiceKind",
      "description": "Information about a Service Fabric service replica deployed on a node.",
      "required": [
        "ServiceKind"
      ],
      "properties": {
        "ServiceKind": {
          "$ref": "#/definitions/ServiceKind",
          "description": "The kind of service (Stateless or Stateful)."
        },
        "ServiceName": {
          "$ref": "#/definitions/ServiceName",
          "description": "Full hierarchical name of the service in URI format starting with `fabric:`."
        },
        "PartitionId": {
          "$ref": "#/definitions/PartitionId",
          "description": "An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be different."
        },
        "CurrentServiceOperation": {
          "$ref": "#/definitions/ServiceOperationName",
          "description": "Specifies the current active life-cycle operation on a stateful service replica or stateless service instance."
        },
        "CurrentServiceOperationStartTimeUtc": {
          "type": "string",
          "format": "date-time",
          "description": "The start time of the current service operation in UTC format."
        },
        "ReportedLoad": {
          "$ref": "#/definitions/LoadMetricReportInfoList",
          "description": "List of load reported by replica."
        }
      }
    },
    "DeployedStatefulServiceReplicaDetailInfo": {
      "description": "Information about a stateful replica running in a code package. Note DeployedServiceReplicaQueryResult will contain duplicate data like ServiceKind, ServiceName, PartitionId and replicaId.",
      "x-ms-discriminator-value": "Stateful",
      "allOf": [
        {
          "$ref": "#/definitions/DeployedServiceReplicaDetailInfo"
        },
        {
          "type": "object",
          "description": "DeployedStatefulServiceReplicaDetailInfo",
          "properties": {
            "ReplicaId": {
              "$ref": "#/definitions/ReplicaId",
              "description": "Id of a stateful service replica. ReplicaId is used by Service Fabric to uniquely identify a replica of a partition. It is unique within a partition and does not change for the lifetime of the replica. If a replica gets dropped and another replica gets created on the same node for the same partition, it will get a different value for the id. Sometimes the id of a stateless service instance is also referred as a replica id."
            },
            "CurrentReplicatorOperation": {
              "$ref": "#/definitions/ReplicatorOperationName",
              "description": "Specifies the operation currently being executed by the Replicator."
            },
            "ReadStatus": {
              "$ref": "#/definitions/PartitionAccessStatus",
              "description": "Specifies the access status of the partition."
            },
            "WriteStatus": {
              "$ref": "#/definitions/PartitionAccessStatus",
              "description": "Specifies the access status of the partition."
            },
            "ReplicatorStatus": {
              "$ref": "#/definitions/ReplicatorStatus",
              "description": "Represents a base class for primary or secondary replicator status.\nContains information about the service fabric replicator like the replication/copy queue utilization, last acknowledgement received timestamp, etc."
            },
            "ReplicaStatus": {
              "$ref": "#/definitions/KeyValueStoreReplicaStatus",
              "description": "Key value store related information for the replica."
            },
            "DeployedServiceReplicaQueryResult": {
              "$ref": "#/definitions/DeployedStatefulServiceReplicaInfo",
              "description": "Information about a stateful service replica deployed on a node."
            }
          }
        }
      ]
    },
    "DeployedStatelessServiceInstanceDetailInfo": {
      "description": "Information about a stateless instance running in a code package. Note that DeployedServiceReplicaQueryResult will contain duplicate data like ServiceKind, ServiceName, PartitionId and InstanceId.",
      "x-ms-discriminator-value": "Stateless",
      "allOf": [
        {
          "$ref": "#/definitions/DeployedServiceReplicaDetailInfo"
        },
        {
          "type": "object",
          "description": "DeployedStatelessServiceInstanceDetailInfo",
          "properties": {
            "InstanceId": {
              "$ref": "#/definitions/InstanceId",
              "description": "Id of a stateless service instance. InstanceId is used by Service Fabric to uniquely identify an instance of a partition of a stateless service. It is unique within a partition and does not change for the lifetime of the instance. If the instance has failed over on the same or different node, it will get a different value for the InstanceId."
            },
            "DeployedServiceReplicaQueryResult": {
              "$ref": "#/definitions/DeployedStatelessServiceInstanceInfo",
              "description": "Information about a stateless service instance deployed on a node."
            }
          }
        }
      ]
    },
    "FabricReplicaStatus": {
      "type": "string",
      "description": "Specifies the status of the replica.",
      "enum": [
        "Invalid",
        "Down",
        "Up"
      ],
      "x-ms-enum": {
        "name": "FabricReplicaStatus",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Indicates that the read or write operation access status is not valid. This value is not returned to the caller."
          },
          {
            "value": "Down",
            "description": "Indicates that the replica is down."
          },
          {
            "value": "Up",
            "description": "Indicates that the replica is up."
          }
        ]
      }
    },
    "LoadMetricReportInfoList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/LoadMetricReportInfo"
      },
      "description": "List of load reported by replica."
    },
    "LoadMetricReportInfo": {
      "type": "object",
      "description": "Information about load reported by replica.",
      "properties": {
        "Name": {
          "type": "string",
          "description": "The name of the metric."
        },
        "Value": {
          "type": "integer",
          "format": "int32",
          "description": "The value of the load for the metric.."
        },
        "LastReportedUtc": {
          "type": "string",
          "format": "date-time",
          "description": "The UTC time when the load is reported."
        }
      }
    },
    "PartitionAccessStatus": {
      "type": "string",
      "description": "Specifies the access status of the partition.",
      "enum": [
        "Invalid",
        "Granted",
        "ReconfigurationPending",
        "NotPrimary",
        "NoWriteQuorum"
      ],
      "x-ms-enum": {
        "name": "PartitionAccessStatus",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Indicates that the read or write operation access status is not valid. This value is not returned to the caller."
          },
          {
            "value": "Granted",
            "description": "Indicates that the read or write operation access is granted and the operation is allowed."
          },
          {
            "value": "ReconfigurationPending",
            "description": "Indicates that the client should try again later, because a reconfiguration is in progress."
          },
          {
            "value": "NotPrimary",
            "description": "Indicates that this client request was received by a replica that is not a Primary replica."
          },
          {
            "value": "NoWriteQuorum",
            "description": "Indicates that no write quorum is available and, therefore, no write operation can be accepted."
          }
        ]
      }
    },
    "ReplicatorOperationName": {
      "type": "string",
      "description": "Specifies the operation currently being executed by the Replicator.",
      "enum": [
        "Invalid",
        "None",
        "Open",
        "ChangeRole",
        "UpdateEpoch",
        "Close",
        "Abort",
        "OnDataLoss",
        "WaitForCatchup",
        "Build"
      ],
      "x-ms-enum": {
        "name": "ReplicatorOperationName",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Default value if the replicator is not yet ready."
          },
          {
            "value": "None",
            "description": "Replicator is not running any operation from Service Fabric perspective."
          },
          {
            "value": "Open",
            "description": "Replicator is opening."
          },
          {
            "value": "ChangeRole",
            "description": "Replicator is in the process of changing its role."
          },
          {
            "value": "UpdateEpoch",
            "description": "Due to a change in the replica set, replicator is being updated with its Epoch."
          },
          {
            "value": "Close",
            "description": "Replicator is closing."
          },
          {
            "value": "Abort",
            "description": "Replicator is being aborted."
          },
          {
            "value": "OnDataLoss",
            "description": "Replicator is handling the data loss condition, where the user service may potentially be recovering state from an external source."
          },
          {
            "value": "WaitForCatchup",
            "description": "Replicator is waiting for a quorum of replicas to be caught up to the latest state."
          },
          {
            "value": "Build",
            "description": "Replicator is in the process of building one or more replicas."
          }
        ]
      }
    },
    "ServiceOperationName": {
      "type": "string",
      "description": "Specifies the current active life-cycle operation on a stateful service replica or stateless service instance.",
      "enum": [
        "Unknown",
        "None",
        "Open",
        "ChangeRole",
        "Close",
        "Abort"
      ],
      "x-ms-enum": {
        "name": "ServiceOperationName",
        "modelAsString": true,
        "values": [
          {
            "value": "Unknown",
            "description": "Reserved for future use."
          },
          {
            "value": "None",
            "description": "The service replica or instance is not going through any life-cycle changes."
          },
          {
            "value": "Open",
            "description": "The service replica or instance is being opened."
          },
          {
            "value": "ChangeRole",
            "description": "The service replica is changing roles."
          },
          {
            "value": "Close",
            "description": "The service replica or instance is being closed."
          },
          {
            "value": "Abort",
            "description": "The service replica or instance is being aborted."
          }
        ]
      }
    },
    "ReplicaKind": {
      "type": "string",
      "description": "The role of a replica of a stateful service.",
      "enum": [
        "Invalid",
        "KeyValueStore"
      ],
      "x-ms-enum": {
        "name": "ReplicaKind",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Represents an invalid replica kind. The value is zero."
          },
          {
            "value": "KeyValueStore",
            "description": "Represents a key value store replica. The value is 1"
          }
        ]
      }
    },
    "ReplicaStatusBase": {
      "type": "object",
      "discriminator": "Kind",
      "description": "Information about the replica.",
      "required": [
        "Kind"
      ],
      "properties": {
        "Kind": {
          "$ref": "#/definitions/ReplicaKind",
          "description": "The role of a replica of a stateful service."
        }
      }
    },
    "KeyValueStoreReplicaStatus": {
      "description": "Key value store related information for the replica.",
      "x-ms-discriminator-value": "KeyValueStore",
      "allOf": [
        {
          "$ref": "#/definitions/ReplicaStatusBase"
        },
        {
          "type": "object",
          "description": "KeyValueStoreReplicaStatus",
          "properties": {
            "DatabaseRowCountEstimate": {
              "type": "string",
              "description": "Value indicating the estimated number of rows in the underlying database."
            },
            "DatabaseLogicalSizeEstimate": {
              "type": "string",
              "description": "Value indicating the estimated size of the underlying database."
            },
            "CopyNotificationCurrentKeyFilter": {
              "type": "string",
              "description": "Value indicating the latest key-prefix filter applied to enumeration during the callback. Null if there is no pending callback."
            },
            "CopyNotificationCurrentProgress": {
              "type": "string",
              "description": "Value indicating the latest number of keys enumerated during the callback. 0 if there is no pending callback."
            },
            "StatusDetails": {
              "type": "string",
              "description": "Value indicating the current status details of the replica."
            }
          }
        }
      ]
    },
    "ServiceUpdateDescription": {
      "type": "object",
      "discriminator": "ServiceKind",
      "description": "A ServiceUpdateDescription contains all of the information necessary to update a service.",
      "required": [
        "ServiceKind"
      ],
      "properties": {
        "ServiceKind": {
          "$ref": "#/definitions/ServiceKind",
          "description": "The service kind."
        },
        "Flags": {
          "type": "string",
          "description": "Flags indicating whether other properties are set. Each of the associated properties corresponds to a flag, specified below, which, if set, indicate that the property is specified.\nThis property can be a combination of those flags obtained using bitwise 'OR' operator.\nFor example, if the provided value is 6 then the flags for ReplicaRestartWaitDuration (2) and QuorumLossWaitDuration (4) are set.\n\n- None - Does not indicate any other properties are set. The value is zero.\n- TargetReplicaSetSize/InstanceCount - Indicates whether the TargetReplicaSetSize property (for Stateful services) or the InstanceCount property (for Stateless services) is set. The value is 1.\n- ReplicaRestartWaitDuration - Indicates the ReplicaRestartWaitDuration property is set. The value is  2.\n- QuorumLossWaitDuration - Indicates the QuorumLossWaitDuration property is set. The value is 4.\n- StandByReplicaKeepDuration - Indicates the StandByReplicaKeepDuration property is set. The value is 8.\n- MinReplicaSetSize - Indicates the MinReplicaSetSize property is set. The value is 16.\n- PlacementConstraints - Indicates the PlacementConstraints property is set. The value is 32.\n- PlacementPolicyList - Indicates the ServicePlacementPolicies property is set. The value is 64.\n- Correlation - Indicates the CorrelationScheme property is set. The value is 128.\n- Metrics - Indicates the ServiceLoadMetrics property is set. The value is 256.\n- DefaultMoveCost - Indicates the DefaultMoveCost property is set. The value is 512.\n- ScalingPolicy - Indicates the ScalingPolicies property is set. The value is 1024."
        },
        "PlacementConstraints": {
          "type": "string",
          "description": "The placement constraints as a string. Placement constraints are boolean expressions on node properties and allow for restricting a service to particular nodes based on the service requirements. For example, to place a service on nodes where NodeType is blue specify the following: \"NodeColor == blue)\"."
        },
        "CorrelationScheme": {
          "$ref": "#/definitions/CorrelationSchemeList",
          "description": "The correlation scheme."
        },
        "LoadMetrics": {
          "$ref": "#/definitions/ServiceLoadMetricsList",
          "description": "The service load metrics."
        },
        "ServicePlacementPolicies": {
          "$ref": "#/definitions/ServicePlacementPoliciesList",
          "description": "The service placement policies."
        },
        "DefaultMoveCost": {
          "$ref": "#/definitions/MoveCost",
          "description": "The move cost for the service."
        },
        "ScalingPolicies": {
          "$ref": "#/definitions/ScalingPolicyDescriptionList",
          "description": "Scaling policies for this service."
        }
      }
    },
    "StatefulServiceUpdateDescription": {
      "description": "Describes an update for a stateful service.",
      "allOf": [
        {
          "$ref": "#/definitions/ServiceUpdateDescription"
        },
        {
          "type": "object",
          "description": "StatefulServiceUpdateDescription"
        }
      ],
      "x-ms-discriminator-value": "Stateful",
      "properties": {
        "TargetReplicaSetSize": {
          "type": "integer",
          "minimum": 1,
          "description": "The target replica set size as a number."
        },
        "MinReplicaSetSize": {
          "type": "integer",
          "minimum": 1,
          "description": "The minimum replica set size as a number."
        },
        "ReplicaRestartWaitDurationSeconds": {
          "type": "string",
          "description": "The duration, in seconds, between when a replica goes down and when a new replica is created."
        },
        "QuorumLossWaitDurationSeconds": {
          "type": "string",
          "description": "The maximum duration, in seconds, for which a partition is allowed to be in a state of quorum loss."
        },
        "StandByReplicaKeepDurationSeconds": {
          "type": "string",
          "description": "The definition on how long StandBy replicas should be maintained before being removed."
        }
      }
    },
    "StatelessServiceUpdateDescription": {
      "description": "Describes an update for a stateless service.",
      "allOf": [
        {
          "$ref": "#/definitions/ServiceUpdateDescription"
        },
        {
          "type": "object",
          "description": "StatelessServiceUpdateDescription"
        }
      ],
      "x-ms-discriminator-value": "Stateless",
      "properties": {
        "InstanceCount": {
          "type": "integer",
          "minimum": -1,
          "description": "The instance count."
        }
      }
    },
    "ImageStoreRelativePath": {
      "type": "string",
      "description": "The remote location within image store. This path is relative to the image store root."
    },
    "FileVersion": {
      "type": "object",
      "description": "Information about the version of image store file.",
      "properties": {
        "VersionNumber": {
          "type": "string",
          "description": "The current image store version number for the file is used in image store for checking whether it need to be updated."
        },
        "EpochDataLossNumber": {
          "type": "string",
          "description": "The epoch data loss number of image store replica when this file entry was updated or created."
        },
        "EpochConfigurationNumber": {
          "type": "string",
          "description": "The epoch configuration version number of the image store replica when this file entry was created or updated."
        }
      }
    },
    "FileInfo": {
      "type": "object",
      "description": "Information about a image store file.",
      "properties": {
        "FileSize": {
          "type": "string",
          "description": "The size of file in bytes."
        },
        "FileVersion": {
          "$ref": "#/definitions/FileVersion",
          "description": "Information about the version of image store file."
        },
        "ModifiedDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time when the image store file was last modified."
        },
        "StoreRelativePath": {
          "type": "string",
          "description": "The file path relative to the image store root path."
        }
      }
    },
    "FolderInfo": {
      "type": "object",
      "description": "Information about a image store folder. It includes how many files this folder contains and its image store relative path.",
      "properties": {
        "StoreRelativePath": {
          "$ref": "#/definitions/ImageStoreRelativePath",
          "description": "The remote location within image store. This path is relative to the image store root."
        },
        "FileCount": {
          "type": "string",
          "description": "The number of files from within the image store folder."
        }
      }
    },
    "ImageStoreContent": {
      "type": "object",
      "description": "Information about the image store content.",
      "properties": {
        "StoreFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FileInfo"
          },
          "description": "The list of image store file info objects represents files found under the given image store relative path."
        },
        "StoreFolders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FolderInfo"
          },
          "description": "The list of image store folder info objects represents subfolders found under the given image store relative path."
        }
      }
    },
    "ImageStoreCopyDescription": {
      "type": "object",
      "description": "Information about how to copy image store content from one image store relative path to another image store relative path.",
      "required": [
        "RemoteSource",
        "RemoteDestination"
      ],
      "properties": {
        "RemoteSource": {
          "type": "string",
          "description": "The relative path of source image store content to be copied from."
        },
        "RemoteDestination": {
          "type": "string",
          "description": "The relative path of destination image store content to be copied to."
        },
        "SkipFiles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of the file names to be skipped for copying."
        },
        "CheckMarkFile": {
          "type": "boolean",
          "description": "Indicates whether to check mark file during copying. The property is true if checking mark file is required, false otherwise. The mark file is used to check whether the folder is well constructed. If the property is true and mark file does not exist, the copy is skipped."
        }
      }
    },
    "InstanceId": {
      "type": "string",
      "description": "Id of a stateless service instance. InstanceId is used by Service Fabric to uniquely identify an instance of a partition of a stateless service. It is unique within a partition and does not change for the lifetime of the instance. If the instance has failed over on the same or different node, it will get a different value for the InstanceId."
    },
    "CodePackageInstanceId": {
      "type": "string",
      "description": "The instance ID for current running entry point. For a code package setup entry point (if specified) runs first and after it finishes main entry point is started. Each time entry point executable is run, its instance id will change."
    },
    "HostIsolationMode": {
      "type": "string",
      "description": "Specifies the isolation mode of main entry point of a code package when it's host type is ContainerHost. This is specified as part of container host policies in application manifest while importing service manifest.",
      "enum": [
        "None",
        "Process",
        "HyperV"
      ],
      "x-ms-enum": {
        "name": "HostIsolationMode",
        "modelAsString": true,
        "values": [
          {
            "value": "None",
            "description": "Indicates the isolation mode is not applicable for given HostType. The value is 0."
          },
          {
            "value": "Process",
            "description": "This is the default isolation mode for a ContainerHost. The value is 1."
          },
          {
            "value": "HyperV",
            "description": "Indicates the ContainerHost is a Hyper-V container. This applies to only Windows containers. The value is 2."
          }
        ]
      }
    },
    "HostType": {
      "type": "string",
      "description": "Specifies the type of host for main entry point of a code package as specified in service manifest.",
      "enum": [
        "Invalid",
        "ExeHost",
        "ContainerHost"
      ],
      "x-ms-enum": {
        "name": "HostType",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Indicates the type of host is not known or invalid. The value is 0."
          },
          {
            "value": "ExeHost",
            "description": "Indicates the host is an executable. The value is 1."
          },
          {
            "value": "ContainerHost",
            "description": "Indicates the host is a container. The value is 2."
          }
        ]
      }
    },
    "RestartDeployedCodePackageDescription": {
      "type": "object",
      "description": "Defines description for restarting a deployed code package on Service Fabric node.",
      "required": [
        "ServiceManifestName",
        "CodePackageName",
        "CodePackageInstanceId"
      ],
      "properties": {
        "ServiceManifestName": {
          "$ref": "#/definitions/ServiceManifestName",
          "description": "The name of service manifest that specified this code package."
        },
        "ServicePackageActivationId": {
          "$ref": "#/definitions/ServicePackageActivationId",
          "description": "The ActivationId of a deployed service package. If ServicePackageActivationMode specified at the time of creating the service\nis 'SharedProcess' (or if it is not specified, in which case it defaults to 'SharedProcess'), then value of ServicePackageActivationId\nis always an empty string."
        },
        "CodePackageName": {
          "$ref": "#/definitions/CodePackageName",
          "description": "The name of the code package defined in the service manifest."
        },
        "CodePackageInstanceId": {
          "$ref": "#/definitions/CodePackageInstanceId",
          "description": "The instance ID for currently running entry point. For a code package setup entry point (if specified) runs first and after it finishes main entry point is started.\nEach time entry point executable is run, its instance ID will change. If 0 is passed in as the code package instance ID, the API will restart the code package with whatever instance ID it is currently running.\nIf an instance ID other than 0 is passed in, the API will restart the code package only if the current Instance ID matches the passed in instance ID.\nNote, passing in the exact instance ID (not 0) in the API is safer, because if ensures at most one restart of the code package."
        }
      }
    },
    "DeployedServiceTypeInfo": {
      "type": "object",
      "description": "Information about service type deployed on a node, information such as the status of the service type registration on a node.",
      "properties": {
        "ServiceTypeName": {
          "$ref": "#/definitions/ServiceTypeName",
          "description": "Name of the service type as specified in the service manifest."
        },
        "ServiceManifestName": {
          "$ref": "#/definitions/ServiceManifestName",
          "description": "The name of the service manifest in which this service type is defined."
        },
        "CodePackageName": {
          "$ref": "#/definitions/CodePackageName",
          "description": "The name of the code package that registered the service type."
        },
        "Status": {
          "$ref": "#/definitions/ServiceTypeRegistrationStatus",
          "description": "The status of the service type registration on the node."
        },
        "ServicePackageActivationId": {
          "$ref": "#/definitions/ServicePackageActivationId",
          "description": "The ActivationId of a deployed service package. If ServicePackageActivationMode specified at the time of creating the service\nis 'SharedProcess' (or if it is not specified, in which case it defaults to 'SharedProcess'), then value of ServicePackageActivationId\nis always an empty string."
        }
      }
    },
    "DeployedServiceTypeInfoList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/DeployedServiceTypeInfo"
      },
      "description": "List of information about service type deployed on a node."
    },
    "ServiceTypeRegistrationStatus": {
      "type": "string",
      "description": "The status of the service type registration on the node.",
      "enum": [
        "Invalid",
        "Disabled",
        "Enabled",
        "Registered"
      ],
      "x-ms-enum": {
        "name": "ServiceTypeRegistrationStatus",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Indicates the registration status is invalid. All Service Fabric enumerations have the invalid type. The value is zero."
          },
          {
            "value": "Disabled",
            "description": "Indicates that the service type is disabled on this node. A type gets disabled when there are too many failures of the code package hosting the service type. If the service type is disabled, new replicas of that service type will not be placed on the node until it is enabled again. The service type is enabled again after the process hosting it comes up and re-registers the type or a preconfigured time interval has passed. The value is 1."
          },
          {
            "value": "Enabled",
            "description": "Indicates that the service type is enabled on this node. Replicas of this service type can be placed on this node when the code package registers the service type. The value is 2."
          },
          {
            "value": "Registered",
            "description": "Indicates that the service type is enabled and registered on the node by a code package. Replicas of this service type can now be placed on this node. The value is 3."
          }
        ]
      }
    },
    "ServiceEndpointRole": {
      "type": "string",
      "description": "The role of the replica where the endpoint is reported.",
      "enum": [
        "Invalid",
        "Stateless",
        "StatefulPrimary",
        "StatefulSecondary"
      ],
      "x-ms-enum": {
        "name": "ServiceEndpointRole",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Indicates the service endpoint role is invalid. All Service Fabric enumerations have the invalid type. The value is zero."
          },
          {
            "value": "Stateless",
            "description": "Indicates that the service endpoint is of a stateless service. The value is 1."
          },
          {
            "value": "StatefulPrimary",
            "description": "Indicates that the service endpoint is of a primary replica of a stateful service. The value is 2."
          },
          {
            "value": "StatefulSecondary",
            "description": "Indicates that the service endpoint is of a secondary replica of a stateful service. The value is 3."
          }
        ]
      }
    },
    "ResolvedServiceEndpoint": {
      "type": "object",
      "description": "Endpoint of a resolved service partition.",
      "properties": {
        "Kind": {
          "$ref": "#/definitions/ServiceEndpointRole",
          "description": "The role of the replica where the endpoint is reported."
        },
        "Address": {
          "type": "string",
          "description": "The address of the endpoint. If the endpoint has multiple listeners the address is a JSON object with one property per listener with the value as the address of that listener."
        }
      }
    },
    "ResolvedServicePartition": {
      "type": "object",
      "description": "Information about a service partition and its associated endpoints.",
      "required": [
        "Name",
        "PartitionInformation",
        "Endpoints",
        "Version"
      ],
      "properties": {
        "Name": {
          "$ref": "#/definitions/ServiceName",
          "description": "The full name of the service with 'fabric:' URI scheme."
        },
        "PartitionInformation": {
          "$ref": "#/definitions/PartitionInformation",
          "description": "A representation of the resolved partition."
        },
        "Endpoints": {
          "$ref": "#/definitions/ResolvedServiceEndpointList",
          "description": "List of resolved service endpoints of a service partition."
        },
        "Version": {
          "type": "string",
          "description": "The version of this resolved service partition result. This version should be passed in the next time the ResolveService call is made via the PreviousRspVersion query parameter."
        }
      }
    },
    "ResolvedServiceEndpointList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ResolvedServiceEndpoint"
      },
      "description": "List of resolved service endpoints of a service partition."
    },
    "InvokeDataLossResult": {
      "type": "object",
      "description": "Represents information about an operation in a terminal state (Completed or Faulted).",
      "properties": {
        "ErrorCode": {
          "type": "integer",
          "format": "int32",
          "description": "If OperationState is Completed, this is 0.  If OperationState is Faulted, this is an error code indicating the reason."
        },
        "SelectedPartition": {
          "$ref": "#/definitions/SelectedPartition",
          "description": "This class returns information about the partition that the user-induced operation acted upon."
        }
      }
    },
    "InvokeQuorumLossResult": {
      "type": "object",
      "description": "Represents information about an operation in a terminal state (Completed or Faulted).",
      "properties": {
        "ErrorCode": {
          "type": "integer",
          "format": "int32",
          "description": "If OperationState is Completed, this is 0.  If OperationState is Faulted, this is an error code indicating the reason."
        },
        "SelectedPartition": {
          "$ref": "#/definitions/SelectedPartition",
          "description": "This class returns information about the partition that the user-induced operation acted upon."
        }
      }
    },
    "NodeResult": {
      "type": "object",
      "description": "Contains information about a node that was targeted by a user-induced operation.",
      "properties": {
        "NodeName": {
          "$ref": "#/definitions/NodeName",
          "description": "The name of a Service Fabric node."
        },
        "NodeInstanceId": {
          "type": "string",
          "description": "The node instance id."
        }
      }
    },
    "NodeTransitionProgress": {
      "type": "object",
      "description": "Information about an NodeTransition operation.  This class contains an OperationState and a NodeTransitionResult.  The NodeTransitionResult is not valid until OperationState\nis Completed or Faulted.",
      "properties": {
        "State": {
          "$ref": "#/definitions/OperationState",
          "description": "The state of the operation."
        },
        "NodeTransitionResult": {
          "$ref": "#/definitions/NodeTransitionResult",
          "description": "Represents information about an operation in a terminal state (Completed or Faulted)."
        }
      }
    },
    "NodeTransitionResult": {
      "type": "object",
      "description": "Represents information about an operation in a terminal state (Completed or Faulted).",
      "properties": {
        "ErrorCode": {
          "type": "integer",
          "format": "int32",
          "description": "If OperationState is Completed, this is 0.  If OperationState is Faulted, this is an error code indicating the reason."
        },
        "NodeResult": {
          "$ref": "#/definitions/NodeResult",
          "description": "Contains information about a node that was targeted by a user-induced operation."
        }
      }
    },
    "OperationId": {
      "type": "string",
      "format": "uuid",
      "description": "A GUID that identifies a call to this API.  This is also passed into the corresponding GetProgress API."
    },
    "OperationState": {
      "type": "string",
      "description": "The state of the operation.",
      "enum": [
        "Invalid",
        "Running",
        "RollingBack",
        "Completed",
        "Faulted",
        "Cancelled",
        "ForceCancelled"
      ],
      "x-ms-enum": {
        "name": "OperationState",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "The operation state is invalid."
          },
          {
            "value": "Running",
            "description": "The operation is in progress."
          },
          {
            "value": "RollingBack",
            "description": "The operation is rolling back internal system state because it encountered a fatal error or was cancelled by the user.  \"RollingBack\"     does not refer to user state.  For example, if CancelOperation is called on a command of type PartitionDataLoss, state of \"RollingBack\" does not mean service data is being restored (assuming the command has progressed far enough to cause data loss). It means the system is rolling back/cleaning up internal system state associated with the command."
          },
          {
            "value": "Completed",
            "description": "The operation has completed successfully and is no longer running."
          },
          {
            "value": "Faulted",
            "description": "The operation has failed and is no longer running."
          },
          {
            "value": "Cancelled",
            "description": "The operation was cancelled by the user using CancelOperation, and is no longer running."
          },
          {
            "value": "ForceCancelled",
            "description": "The operation was cancelled by the user using CancelOperation, with the force parameter set to true.  It is no longer running.  Refer to CancelOperation for more details."
          }
        ]
      }
    },
    "OperationStatus": {
      "type": "object",
      "description": "Contains the OperationId, OperationState, and OperationType for user-induced operations.",
      "properties": {
        "OperationId": {
          "$ref": "#/definitions/OperationId",
          "description": "A GUID that identifies a call to this API.  This is also passed into the corresponding GetProgress API."
        },
        "State": {
          "$ref": "#/definitions/OperationState",
          "description": "The state of the operation."
        },
        "Type": {
          "$ref": "#/definitions/OperationType",
          "description": "The type of the operation."
        }
      }
    },
    "OperationStatusList": {
      "type": "array",
      "description": "A list of OperationStatus objects.",
      "items": {
        "$ref": "#/definitions/OperationStatus"
      }
    },
    "OperationType": {
      "type": "string",
      "description": "The type of the operation.",
      "enum": [
        "Invalid",
        "PartitionDataLoss",
        "PartitionQuorumLoss",
        "PartitionRestart",
        "NodeTransition"
      ],
      "x-ms-enum": {
        "name": "OperationType",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "The operation state is invalid."
          },
          {
            "value": "PartitionDataLoss",
            "description": "An operation started using the StartDataLoss API."
          },
          {
            "value": "PartitionQuorumLoss",
            "description": "An operation started using the StartQuorumLoss API."
          },
          {
            "value": "PartitionRestart",
            "description": "An operation started using the StartPartitionRestart API."
          },
          {
            "value": "NodeTransition",
            "description": "An operation started using the StartNodeTransition API."
          }
        ]
      }
    },
    "PartitionDataLossProgress": {
      "type": "object",
      "description": "Information about a partition data loss user-induced operation.",
      "properties": {
        "State": {
          "$ref": "#/definitions/OperationState",
          "description": "The state of the operation."
        },
        "InvokeDataLossResult": {
          "$ref": "#/definitions/InvokeDataLossResult",
          "description": "Represents information about an operation in a terminal state (Completed or Faulted)."
        }
      }
    },
    "PartitionQuorumLossProgress": {
      "type": "object",
      "description": "Information about a partition quorum loss user-induced operation.",
      "properties": {
        "State": {
          "$ref": "#/definitions/OperationState",
          "description": "The state of the operation."
        },
        "InvokeQuorumLossResult": {
          "$ref": "#/definitions/InvokeQuorumLossResult",
          "description": "Represents information about an operation in a terminal state (Completed or Faulted)."
        }
      }
    },
    "PartitionRestartProgress": {
      "type": "object",
      "description": "Information about a partition restart user-induced operation.",
      "properties": {
        "State": {
          "$ref": "#/definitions/OperationState",
          "description": "The state of the operation."
        },
        "RestartPartitionResult": {
          "$ref": "#/definitions/RestartPartitionResult",
          "description": "Represents information about an operation in a terminal state (Completed or Faulted)."
        }
      }
    },
    "RestartPartitionResult": {
      "type": "object",
      "description": "Represents information about an operation in a terminal state (Completed or Faulted).",
      "properties": {
        "ErrorCode": {
          "type": "integer",
          "format": "int32",
          "description": "If OperationState is Completed, this is 0.  If OperationState is Faulted, this is an error code indicating the reason."
        },
        "SelectedPartition": {
          "$ref": "#/definitions/SelectedPartition",
          "description": "This class returns information about the partition that the user-induced operation acted upon."
        }
      }
    },
    "SelectedPartition": {
      "type": "object",
      "description": "This class returns information about the partition that the user-induced operation acted upon.",
      "properties": {
        "ServiceName": {
          "$ref": "#/definitions/ServiceName",
          "description": "The name of the service the partition belongs to."
        },
        "PartitionId": {
          "$ref": "#/definitions/PartitionId",
          "description": "An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be different."
        }
      }
    },
    "DeployServicePackageToNodeDescription": {
      "type": "object",
      "description": "Defines description for downloading packages associated with a service manifest to image cache on a Service Fabric node.",
      "properties": {
        "ServiceManifestName": {
          "$ref": "#/definitions/ServiceManifestName",
          "description": "The name of service manifest whose packages need to be downloaded."
        },
        "ApplicationTypeName": {
          "$ref": "#/definitions/ApplicationTypeName",
          "description": "The application type name as defined in the application manifest."
        },
        "ApplicationTypeVersion": {
          "$ref": "#/definitions/ApplicationTypeVersion",
          "description": "The version of the application type as defined in the application manifest."
        },
        "NodeName": {
          "$ref": "#/definitions/NodeName",
          "description": "The name of a Service Fabric node."
        },
        "PackageSharingPolicy": {
          "$ref": "#/definitions/PackageSharingPolicyInfoList",
          "description": "List of package sharing policy information."
        }
      },
      "required": [
        "ServiceManifestName",
        "ApplicationTypeName",
        "ApplicationTypeVersion",
        "NodeName"
      ]
    },
    "PackageSharingPolicyInfo": {
      "type": "object",
      "description": "Represents a policy for the package sharing.",
      "properties": {
        "SharedPackageName": {
          "type": "string",
          "description": "The name of code, configuration or data package that should be shared."
        },
        "PackageSharingScope": {
          "$ref": "#/definitions/PackageSharingPolicyScope",
          "description": "Represents the scope for PackageSharingPolicy. This is specified during DeployServicePackageToNode operation."
        }
      }
    },
    "PackageSharingPolicyInfoList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PackageSharingPolicyInfo"
      },
      "description": "List of package sharing policy information."
    },
    "PackageSharingPolicyScope": {
      "type": "string",
      "description": "Represents the scope for PackageSharingPolicy. This is specified during DeployServicePackageToNode operation.",
      "enum": [
        "None",
        "All",
        "Code",
        "Config",
        "Data"
      ],
      "x-ms-enum": {
        "name": "PackageSharingPolicyScope",
        "modelAsString": true,
        "values": [
          {
            "value": "None",
            "description": "No package sharing policy scope. The value is 0."
          },
          {
            "value": "All",
            "description": "Share all code, config and data packages from corresponding service manifest. The value is 1."
          },
          {
            "value": "Code",
            "description": "Share all code packages from corresponding service manifest. The value is 2."
          },
          {
            "value": "Config",
            "description": "Share all config packages from corresponding service manifest. The value is 3."
          },
          {
            "value": "Data",
            "description": "Share all data packages from corresponding service manifest. The value is 4."
          }
        ]
      }
    },
    "ResumeApplicationUpgradeDescription": {
      "type": "object",
      "description": "Describes the parameters for resuming an unmonitored manual Service Fabric application upgrade",
      "properties": {
        "UpgradeDomainName": {
          "type": "string",
          "description": "The name of the upgrade domain in which to resume the upgrade."
        }
      },
      "required": [
        "UpgradeDomainName"
      ]
    },
    "ApplicationUpgradeUpdateDescription": {
      "type": "object",
      "description": "Describes the parameters for updating an ongoing application upgrade.",
      "properties": {
        "Name": {
          "$ref": "#/definitions/ApplicationName",
          "description": "The name of the application, including the 'fabric:' URI scheme."
        },
        "UpgradeKind": {
          "$ref": "#/definitions/UpgradeKind",
          "description": "The kind of upgrade out of the following possible values."
        },
        "ApplicationHealthPolicy": {
          "$ref": "#/definitions/ApplicationHealthPolicy",
          "description": "Defines a health policy used to evaluate the health of an application or one of its children entities."
        },
        "UpdateDescription": {
          "$ref": "#/definitions/RollingUpgradeUpdateDescription",
          "description": "Describes the parameters for updating a rolling upgrade of application or cluster."
        }
      },
      "required": [
        "Name",
        "UpgradeKind"
      ]
    },
    "RollingUpgradeUpdateDescription": {
      "type": "object",
      "description": "Describes the parameters for updating a rolling upgrade of application or cluster.",
      "properties": {
        "RollingUpgradeMode": {
          "$ref": "#/definitions/UpgradeMode",
          "description": "The mode used to monitor health during a rolling upgrade. The values are UnmonitoredAuto, UnmonitoredManual, and Monitored."
        },
        "ForceRestart": {
          "$ref": "#/definitions/ForceRestart",
          "description": "If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data)."
        },
        "ReplicaSetCheckTimeoutInMilliseconds": {
          "$ref": "#/definitions/UpgradeReplicaSetCheckTimeout",
          "description": "The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer)."
        },
        "FailureAction": {
          "$ref": "#/definitions/FailureAction",
          "description": "The compensating action to perform when a Monitored upgrade encounters monitoring policy or health policy violations.\nInvalid indicates the failure action is invalid. Rollback specifies that the upgrade will start rolling back automatically.\nManual indicates that the upgrade will switch to UnmonitoredManual upgrade mode."
        },
        "HealthCheckWaitDurationInMilliseconds": {
          "$ref": "#/definitions/HealthCheckWaitDuration",
          "description": "The amount of time to wait after completing an upgrade domain before applying health policies. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds."
        },
        "HealthCheckStableDurationInMilliseconds": {
          "$ref": "#/definitions/HealthCheckStableDuration",
          "description": "The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds."
        },
        "HealthCheckRetryTimeoutInMilliseconds": {
          "$ref": "#/definitions/HealthCheckRetryTimeout",
          "description": "The amount of time to retry health evaluation when the application or cluster is unhealthy before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds."
        },
        "UpgradeTimeoutInMilliseconds": {
          "$ref": "#/definitions/UpgradeTimeout",
          "description": "The amount of time the overall upgrade has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds."
        },
        "UpgradeDomainTimeoutInMilliseconds": {
          "$ref": "#/definitions/UpgradeDomainTimeout",
          "description": "The amount of time each upgrade domain has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds."
        }
      },
      "required": [
        "RollingUpgradeMode"
      ]
    },
    "NameDescription": {
      "type": "object",
      "description": "Describes a Service Fabric name.",
      "properties": {
        "Name": {
          "$ref": "#/definitions/FabricName",
          "description": "The Service Fabric name, including the 'fabric:' URI scheme."
        }
      },
      "required": [
        "Name"
      ]
    },
    "FabricName": {
      "type": "string",
      "description": "The Service Fabric name, including the 'fabric:' URI scheme."
    },
    "PagedSubNameInfoList": {
      "type": "object",
      "description": "A paged list of Service Fabric names. The list is paged when all of the results cannot fit in a single message. The next set of results can be obtained by executing the same query with the continuation token provided in this list.",
      "properties": {
        "ContinuationToken": {
          "$ref": "#/definitions/ContinuationToken",
          "description": "The continuation token parameter is used to obtain next set of results. The continuation token is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token is not included in the response."
        },
        "IsConsistent": {
          "type": "boolean",
          "description": "Indicates whether any name under the given name has been modified during the enumeration. If there was a modification, this property value is false."
        },
        "SubNames": {
          "type": "array",
          "description": "List of the child names.",
          "items": {
            "$ref": "#/definitions/FabricName"
          }
        }
      }
    },
    "PropertyValueKind": {
      "type": "string",
      "description": "The kind of property, determined by the type of data. Following are the possible values.",
      "enum": [
        "Invalid",
        "Binary",
        "Int64",
        "Double",
        "String",
        "Guid"
      ],
      "x-ms-enum": {
        "name": "PropertyValueKind",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Indicates the property is invalid. All Service Fabric enumerations have the invalid type. The value is zero."
          },
          {
            "value": "Binary",
            "description": "The data inside the property is a binary blob. The value is 1."
          },
          {
            "value": "Int64",
            "description": "The data inside the property is an int64. The value is 2."
          },
          {
            "value": "Double",
            "description": "The data inside the property is a double. The value is 3."
          },
          {
            "value": "String",
            "description": "The data inside the property is a string. The value is 4."
          },
          {
            "value": "Guid",
            "description": "The data inside the property is a guid. The value is 5."
          }
        ]
      }
    },
    "PropertyValue": {
      "type": "object",
      "discriminator": "Kind",
      "description": "Describes a Service Fabric property value.",
      "properties": {
        "Kind": {
          "$ref": "#/definitions/PropertyValueKind",
          "description": "The kind of property, determined by the type of data. Following are the possible values."
        }
      },
      "required": [
        "Kind"
      ]
    },
    "BinaryPropertyValue": {
      "description": "Describes a Service Fabric property value of type Binary.",
      "allOf": [
        {
          "$ref": "#/definitions/PropertyValue"
        },
        {
          "type": "object",
          "description": "BinaryPropertyValue"
        }
      ],
      "x-ms-discriminator-value": "Binary",
      "required": [
        "Data"
      ],
      "properties": {
        "Data": {
          "$ref": "#/definitions/ByteArray",
          "description": "Array of bytes to be sent as an integer array. Each element of array is a number between 0 and 255."
        }
      }
    },
    "Int64PropertyValue": {
      "description": "Describes a Service Fabric property value of type Int64.",
      "allOf": [
        {
          "$ref": "#/definitions/PropertyValue"
        },
        {
          "type": "object",
          "description": "Int64PropertyValue"
        }
      ],
      "x-ms-discriminator-value": "Int64",
      "required": [
        "Data"
      ],
      "properties": {
        "Data": {
          "type": "string",
          "description": "The data of the property value."
        }
      }
    },
    "DoublePropertyValue": {
      "description": "Describes a Service Fabric property value of type Double.",
      "allOf": [
        {
          "$ref": "#/definitions/PropertyValue"
        },
        {
          "type": "object",
          "description": "DoublePropertyValue"
        }
      ],
      "x-ms-discriminator-value": "Double",
      "required": [
        "Data"
      ],
      "properties": {
        "Data": {
          "type": "number",
          "format": "double",
          "description": "The data of the property value."
        }
      }
    },
    "StringPropertyValue": {
      "description": "Describes a Service Fabric property value of type String.",
      "allOf": [
        {
          "$ref": "#/definitions/PropertyValue"
        },
        {
          "type": "object",
          "description": "StringPropertyValue"
        }
      ],
      "x-ms-discriminator-value": "String",
      "required": [
        "Data"
      ],
      "properties": {
        "Data": {
          "type": "string",
          "description": "The data of the property value."
        }
      }
    },
    "GuidPropertyValue": {
      "description": "Describes a Service Fabric property value of type Guid.",
      "allOf": [
        {
          "$ref": "#/definitions/PropertyValue"
        },
        {
          "type": "object",
          "description": "GuidPropertyValue"
        }
      ],
      "x-ms-discriminator-value": "Guid",
      "required": [
        "Data"
      ],
      "properties": {
        "Data": {
          "type": "string",
          "format": "uuid",
          "description": "The data of the property value."
        }
      }
    },
    "PropertyInfo": {
      "type": "object",
      "discriminator": "Kind",
      "description": "Information about a Service Fabric property.",
      "properties": {
        "Name": {
          "$ref": "#/definitions/PropertyName",
          "description": "The name of the Service Fabric property."
        },
        "Value": {
          "$ref": "#/definitions/PropertyValue",
          "description": "Describes a Service Fabric property value."
        },
        "Metadata": {
          "$ref": "#/definitions/PropertyMetadata",
          "description": "The metadata associated with a property, including the property's name."
        }
      },
      "required": [
        "Name",
        "Metadata"
      ]
    },
    "PagedPropertyInfoList": {
      "type": "object",
      "description": "The paged list of Service Fabric properties under a given name. The list is paged when all of the results cannot fit in a single message. The next set of results can be obtained by executing the same query with the continuation token provided in this list.",
      "properties": {
        "ContinuationToken": {
          "$ref": "#/definitions/ContinuationToken",
          "description": "The continuation token parameter is used to obtain next set of results. The continuation token is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token is not included in the response."
        },
        "IsConsistent": {
          "type": "boolean",
          "description": "Indicates whether any property under the given name has been modified during the enumeration. If there was a modification, this property value is false."
        },
        "Properties": {
          "type": "array",
          "description": "List of property information.",
          "items": {
            "$ref": "#/definitions/PropertyInfo"
          }
        }
      }
    },
    "PropertyDescription": {
      "type": "object",
      "description": "Description of a Service Fabric property.",
      "properties": {
        "PropertyName": {
          "$ref": "#/definitions/PropertyName",
          "description": "The name of the Service Fabric property."
        },
        "CustomTypeId": {
          "$ref": "#/definitions/PropertyCustomTypeId",
          "description": "The property's custom type ID. Using this property, the user is able to tag the type of the value of the property."
        },
        "Value": {
          "$ref": "#/definitions/PropertyValue",
          "description": "Describes a Service Fabric property value."
        }
      },
      "required": [
        "PropertyName",
        "Value"
      ]
    },
    "PropertyName": {
      "type": "string",
      "description": "The name of the Service Fabric property."
    },
    "PropertyMetadata": {
      "type": "object",
      "description": "The metadata associated with a property, including the property's name.",
      "properties": {
        "TypeId": {
          "$ref": "#/definitions/PropertyValueKind",
          "description": "The kind of property, determined by the type of data. Following are the possible values."
        },
        "CustomTypeId": {
          "$ref": "#/definitions/PropertyCustomTypeId",
          "description": "The property's custom type ID."
        },
        "Parent": {
          "$ref": "#/definitions/FabricName",
          "description": "The name of the parent Service Fabric Name for the property. It could be thought of as the name-space/table under which the property exists."
        },
        "SizeInBytes": {
          "type": "integer",
          "description": "The length of the serialized property value."
        },
        "LastModifiedUtcTimestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Represents when the Property was last modified. Only write operations will cause this field to be updated."
        },
        "SequenceNumber": {
          "type": "string",
          "description": "The version of the property. Every time a property is modified, its sequence number is increased."
        }
      }
    },
    "PropertyCustomTypeId": {
      "type": "string",
      "description": "The property's custom type ID. Using this property, the user is able to tag the type of the value of the property."
    },
    "PropertyBatchDescriptionList": {
      "type": "object",
      "description": "Describes a list of property batch operations to be executed. Either all or none of the operations will be committed.",
      "properties": {
        "Operations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PropertyBatchOperation"
          },
          "description": "A list of the property batch operations to be executed."
        }
      }
    },
    "PropertyBatchOperationKind": {
      "type": "string",
      "description": "The kind of property batch operation, determined by the operation to be performed. The following are the possible values.",
      "enum": [
        "Invalid",
        "Put",
        "Get",
        "CheckExists",
        "CheckSequence",
        "Delete",
        "CheckValue"
      ],
      "x-ms-enum": {
        "name": "PropertyBatchOperationKind",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Indicates the property operation is invalid. All Service Fabric enumerations have the invalid type. The value is zero."
          },
          {
            "value": "Put",
            "description": "The operation will create or edit a property. The value is 1."
          },
          {
            "value": "Get",
            "description": "The operation will get a property. The value is 2."
          },
          {
            "value": "CheckExists",
            "description": "The operation will check that a property exists or doesn't exists, depending on the provided value. The value is 3."
          },
          {
            "value": "CheckSequence",
            "description": "The operation will ensure that the sequence number is equal to the provided value. The value is 4."
          },
          {
            "value": "Delete",
            "description": "The operation will delete a property. The value is 5."
          },
          {
            "value": "CheckValue",
            "description": "The operation will ensure that the value of a property is equal to the provided value. The value is 7."
          }
        ]
      }
    },
    "PropertyBatchOperation": {
      "type": "object",
      "discriminator": "Kind",
      "description": "Represents the base type for property operations that can be put into a batch and submitted.",
      "properties": {
        "Kind": {
          "$ref": "#/definitions/PropertyBatchOperationKind",
          "description": "The kind of property batch operation, determined by the operation to be performed. The following are the possible values."
        },
        "PropertyName": {
          "$ref": "#/definitions/PropertyName",
          "description": "The name of the Service Fabric property."
        }
      },
      "required": [
        "Kind",
        "PropertyName"
      ]
    },
    "CheckExistsPropertyBatchOperation": {
      "description": "Represents a PropertyBatchOperation that compares the Boolean existence of a property with the Exists argument.\nThe PropertyBatchOperation operation fails if the property's existence is not equal to the Exists argument.\nThe CheckExistsPropertyBatchOperation is generally used as a precondition for the write operations in the batch.\nNote that if one PropertyBatchOperation in a PropertyBatch fails,\nthe entire batch fails and cannot be committed in a transactional manner.",
      "allOf": [
        {
          "$ref": "#/definitions/PropertyBatchOperation"
        },
        {
          "type": "object",
          "description": "CheckExistsPropertyBatchOperation"
        }
      ],
      "x-ms-discriminator-value": "CheckExists",
      "properties": {
        "Exists": {
          "type": "boolean",
          "description": "Whether or not the property should exist for the operation to pass."
        }
      },
      "required": [
        "Exists"
      ]
    },
    "CheckSequencePropertyBatchOperation": {
      "description": "Compares the Sequence Number of a property with the SequenceNumber argument.\nA property's sequence number can be thought of as that property's version.\nEvery time the property is modified, its sequence number is increased.\nThe sequence number can be found in a property's metadata.\nThe comparison fails if the sequence numbers are not equal.\nCheckSequencePropertyBatchOperation is generally used as a precondition for the write operations in the batch.\nNote that if one PropertyBatchOperation in a PropertyBatch fails,\nthe entire batch fails and cannot be committed in a transactional manner.",
      "allOf": [
        {
          "$ref": "#/definitions/PropertyBatchOperation"
        },
        {
          "type": "object",
          "description": "CheckSequencePropertyBatchOperation"
        }
      ],
      "x-ms-discriminator-value": "CheckSequence",
      "properties": {
        "SequenceNumber": {
          "type": "string",
          "description": "The expected sequence number."
        }
      },
      "required": [
        "SequenceNumber"
      ]
    },
    "CheckValuePropertyBatchOperation": {
      "description": "Represents a PropertyBatchOperation that compares the value of the property with the expected value.\nThe CheckValuePropertyBatchOperation is generally used as a precondition for the write operations in the batch.\nNote that if one PropertyBatchOperation in a PropertyBatch fails,\nthe entire batch fails and cannot be committed in a transactional manner.",
      "allOf": [
        {
          "$ref": "#/definitions/PropertyBatchOperation"
        },
        {
          "type": "object",
          "description": "CheckValuePropertyBatchOperation"
        }
      ],
      "x-ms-discriminator-value": "CheckValue",
      "properties": {
        "Value": {
          "$ref": "#/definitions/PropertyValue",
          "description": "The expected property value."
        }
      },
      "required": [
        "Value"
      ]
    },
    "DeletePropertyBatchOperation": {
      "description": "Represents a PropertyBatchOperation that deletes a specified property if it exists.\nNote that if one PropertyBatchOperation in a PropertyBatch fails,\nthe entire batch fails and cannot be committed in a transactional manner.",
      "allOf": [
        {
          "$ref": "#/definitions/PropertyBatchOperation"
        },
        {
          "type": "object",
          "description": "DeletePropertyBatchOperation"
        }
      ],
      "x-ms-discriminator-value": "Delete"
    },
    "GetPropertyBatchOperation": {
      "description": "Represents a PropertyBatchOperation that gets the specified property if it exists.\nNote that if one PropertyBatchOperation in a PropertyBatch fails,\nthe entire batch fails and cannot be committed in a transactional manner.",
      "allOf": [
        {
          "$ref": "#/definitions/PropertyBatchOperation"
        },
        {
          "type": "object",
          "description": "GetPropertyBatchOperation"
        }
      ],
      "x-ms-discriminator-value": "Get",
      "properties": {
        "IncludeValue": {
          "type": "boolean",
          "default": false,
          "description": "Whether or not to return the property value with the metadata.\nTrue if values should be returned with the metadata; False to return only property metadata."
        }
      }
    },
    "PutPropertyBatchOperation": {
      "description": "Puts the specified property under the specified name.\nNote that if one PropertyBatchOperation in a PropertyBatch fails,\nthe entire batch fails and cannot be committed in a transactional manner.",
      "allOf": [
        {
          "$ref": "#/definitions/PropertyBatchOperation"
        },
        {
          "type": "object",
          "description": "PutPropertyBatchOperation"
        }
      ],
      "x-ms-discriminator-value": "Put",
      "properties": {
        "Value": {
          "$ref": "#/definitions/PropertyValue",
          "description": "Describes a Service Fabric property value."
        },
        "CustomTypeId": {
          "$ref": "#/definitions/PropertyCustomTypeId",
          "description": "The property's custom type ID. Using this property, the user is able to tag the type of the value of the property."
        }
      },
      "required": [
        "Value"
      ]
    },
    "PropertyBatchInfoKind": {
      "type": "string",
      "description": "The kind of property batch info, determined by the results of a property batch. The following are the possible values.",
      "enum": [
        "Invalid",
        "Successful",
        "Failed"
      ],
      "x-ms-enum": {
        "name": "PropertyBatchInfoKind",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Indicates the property batch info is invalid. All Service Fabric enumerations have the invalid type."
          },
          {
            "value": "Successful",
            "description": "The property batch succeeded."
          },
          {
            "value": "Failed",
            "description": "The property batch failed."
          }
        ]
      }
    },
    "PropertyBatchInfo": {
      "type": "object",
      "discriminator": "Kind",
      "description": "Information about the results of a property batch.",
      "properties": {
        "Kind": {
          "$ref": "#/definitions/PropertyBatchInfoKind",
          "description": "The kind of property batch info, determined by the results of a property batch. The following are the possible values."
        }
      },
      "required": [
        "Kind"
      ]
    },
    "SuccessfulPropertyBatchInfo": {
      "description": "Derived from PropertyBatchInfo. Represents the property batch succeeding. Contains the results of any \"Get\" operations in the batch.",
      "allOf": [
        {
          "$ref": "#/definitions/PropertyBatchInfo"
        },
        {
          "type": "object",
          "description": "SuccessfulPropertyBatchInfo"
        }
      ],
      "x-ms-discriminator-value": "Successful",
      "properties": {
        "Properties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/PropertyInfo"
          },
          "description": "A map containing the properties that were requested through any \"Get\" property batch operations. The key represents the index of the \"Get\" operation in the original request, in string form. The value is the property. If a property is not found, it will not be in the map."
        }
      }
    },
    "FailedPropertyBatchInfo": {
      "description": "Derived from PropertyBatchInfo. Represents the property batch failing. Contains information about the specific batch failure.",
      "allOf": [
        {
          "$ref": "#/definitions/PropertyBatchInfo"
        },
        {
          "type": "object",
          "description": "FailedPropertyBatchInfo"
        }
      ],
      "x-ms-discriminator-value": "Failed",
      "properties": {
        "ErrorMessage": {
          "type": "string",
          "description": "The error message of the failed operation. Describes the exception thrown due to the first unsuccessful operation in the property batch."
        },
        "OperationIndex": {
          "type": "integer",
          "description": "The index of the unsuccessful operation in the property batch."
        }
      }
    },
    "EntityKind": {
      "type": "string",
      "description": "The entity type of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica etc.",
      "enum": [
        "Invalid",
        "Node",
        "Partition",
        "Service",
        "Application",
        "Replica",
        "DeployedApplication",
        "DeployedServicePackage",
        "Cluster"
      ],
      "x-ms-enum": {
        "name": "EntityKind",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Indicates an invalid entity kind. All Service Fabric enumerations have the invalid type. The value is zero."
          },
          {
            "value": "Node",
            "description": "Indicates the entity is a Service Fabric node. The value is 1."
          },
          {
            "value": "Partition",
            "description": "Indicates the entity is a Service Fabric partition. The value is 2."
          },
          {
            "value": "Service",
            "description": "Indicates the entity is a Service Fabric service. The value is 3."
          },
          {
            "value": "Application",
            "description": "Indicates the entity is a Service Fabric application. The value is 4."
          },
          {
            "value": "Replica",
            "description": "Indicates the entity is a Service Fabric replica. The value is 5."
          },
          {
            "value": "DeployedApplication",
            "description": "Indicates the entity is a Service Fabric deployed application. The value is 6."
          },
          {
            "value": "DeployedServicePackage",
            "description": "Indicates the entity is a Service Fabric deployed service package. The value is 7."
          },
          {
            "value": "Cluster",
            "description": "Indicates the entity is a Service Fabric cluster. The value is 8."
          }
        ]
      }
    },
    "HealthStateCount": {
      "type": "object",
      "description": "Represents information about how many health entities are in Ok, Warning and Error health state.",
      "properties": {
        "OkCount": {
          "type": "integer",
          "format": "int64",
          "description": "The number of health entities with aggregated health state Ok.",
          "minimum": 0
        },
        "WarningCount": {
          "type": "integer",
          "format": "int64",
          "description": "The number of health entities with aggregated health state Warning.",
          "minimum": 0
        },
        "ErrorCount": {
          "type": "integer",
          "format": "int64",
          "description": "The number of health entities with aggregated health state Error.",
          "minimum": 0
        }
      }
    },
    "EntityKindHealthStateCount": {
      "type": "object",
      "description": "Represents health state count for entities of the specified entity kind.",
      "properties": {
        "EntityKind": {
          "$ref": "#/definitions/EntityKind",
          "description": "The entity kind for which health states are evaluated."
        },
        "HealthStateCount": {
          "$ref": "#/definitions/HealthStateCount",
          "description": "The health state count for the entities of the specified kind."
        }
      }
    },
    "HealthStatistics": {
      "type": "object",
      "description": "The health statistics of an entity, returned as part of the health query result when the query description is configured to include statistics.\nThe statistics include health state counts for all children types of the current entity.\nFor example, for cluster, the health statistics include health state counts for nodes, applications, services, partitions, replicas, deployed applications and deployed service packages.\nFor partition, the health statistics include health counts for replicas.",
      "properties": {
        "HealthStateCountList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntityKindHealthStateCount"
          },
          "description": "List of health state counts per entity kind, which keeps track of how many children of the queried entity are in Ok, Warning and Error state."
        }
      }
    },
    "BackupPolicyDescription": {
      "type": "object",
      "description": "Describes a backup policy for configuring periodic backup.",
      "required": [
        "Name",
        "AutoRestoreOnDataLoss",
        "Schedule",
        "MaxIncrementalBackups",
        "Storage"
      ],
      "properties": {
        "Name": {
          "type": "string",
          "description": "The unique name identifying this backup policy."
        },
        "AutoRestoreOnDataLoss": {
          "type": "boolean",
          "description": "Specifies whether to trigger restore automatically using the latest available backup in case the partition experiences a data loss event."
        },
        "MaxIncrementalBackups": {
          "type": "integer",
          "minimum": 0,
          "maximum": 255,
          "description": "Defines the maximum number of incremental backups to be taken between two full backups. This is just the upper limit. A full backup may be taken before specified number of incremental backups are completed in one of the following conditions\n- The replica has never taken a full backup since it has become primary,\n- Some of the log records since the last backup has been truncated, or\n- Replica passed the MaxAccumulatedBackupLogSizeInMB limit."
        },
        "Schedule": {
          "$ref": "#/definitions/BackupScheduleDescription",
          "description": "Describes the backup schedule parameters."
        },
        "Storage": {
          "$ref": "#/definitions/BackupStorageDescription",
          "description": "Describes the details of backup storage where to store the periodic backups."
        }
      }
    },
    "PagedBackupPolicyDescriptionList": {
      "type": "object",
      "description": "The list of backup policies configured in the cluster. The list is paged when all of the results cannot fit in a single message. The next set of results can be obtained by executing the same query with the continuation token provided in this list.",
      "properties": {
        "ContinuationToken": {
          "$ref": "#/definitions/ContinuationToken",
          "description": "The continuation token parameter is used to obtain next set of results. The continuation token is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token is not included in the response."
        },
        "Items": {
          "type": "array",
          "description": "The list of backup policies information.",
          "items": {
            "$ref": "#/definitions/BackupPolicyDescription"
          }
        }
      }
    },
    "BackupStorageDescription": {
      "type": "object",
      "required": [
        "StorageKind"
      ],
      "discriminator": "StorageKind",
      "properties": {
        "StorageKind": {
          "$ref": "#/definitions/BackupStorageKind",
          "description": "The kind of backup storage, where backups are saved."
        },
        "FriendlyName": {
          "type": "string",
          "description": "Friendly name for this backup storage."
        }
      },
      "description": "Describes the parameters for the backup storage."
    },
    "BackupStorageKind": {
      "type": "string",
      "description": "The kind of backup storage, where backups are saved.",
      "enum": [
        "Invalid",
        "FileShare",
        "AzureBlobStore"
      ],
      "x-ms-enum": {
        "name": "BackupStorageKind",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Indicates an invalid backup storage kind. All Service Fabric enumerations have the invalid type."
          },
          {
            "value": "FileShare",
            "description": "Indicates file/ SMB share to be used as backup storage."
          },
          {
            "value": "AzureBlobStore",
            "description": "Indicates Azure blob store to be used as backup storage."
          }
        ]
      }
    },
    "BackupScheduleDescription": {
      "type": "object",
      "description": "Describes the backup schedule parameters.",
      "required": [
        "ScheduleKind"
      ],
      "discriminator": "ScheduleKind",
      "properties": {
        "ScheduleKind": {
          "$ref": "#/definitions/BackupScheduleKind",
          "description": "The kind of backup schedule, time based or frequency based."
        }
      }
    },
    "BackupScheduleKind": {
      "type": "string",
      "description": "The kind of backup schedule, time based or frequency based.",
      "enum": [
        "Invalid",
        "TimeBased",
        "FrequencyBased"
      ],
      "x-ms-enum": {
        "name": "BackupScheduleKind",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Indicates an invalid backup schedule kind. All Service Fabric enumerations have the invalid type."
          },
          {
            "value": "TimeBased",
            "description": "Indicates a time-based backup schedule."
          },
          {
            "value": "FrequencyBased",
            "description": "Indicates a frequency-based backup schedule."
          }
        ]
      }
    },
    "ApplicationBackupConfigurationInfo": {
      "description": "Backup configuration information for a specific Service Fabric application specifying what backup policy is being applied and suspend description, if any.",
      "allOf": [
        {
          "$ref": "#/definitions/BackupConfigurationInfo"
        },
        {
          "type": "object",
          "description": "Application backup configuration information.",
          "properties": {
            "ApplicationName": {
              "$ref": "#/definitions/ApplicationName",
              "description": "The name of the application, including the 'fabric:' URI scheme."
            }
          }
        }
      ],
      "x-ms-discriminator-value": "Application"
    },
    "ServiceBackupConfigurationInfo": {
      "description": "Backup configuration information for a specific Service Fabric service specifying what backup policy is being applied and suspend description, if any.",
      "allOf": [
        {
          "$ref": "#/definitions/BackupConfigurationInfo"
        },
        {
          "type": "object",
          "description": "Service backup configuration info",
          "properties": {
            "ServiceName": {
              "$ref": "#/definitions/ServiceName",
              "description": "The full name of the service with 'fabric:' URI scheme."
            }
          }
        }
      ],
      "x-ms-discriminator-value": "Service"
    },
    "PagedBackupConfigurationInfoList": {
      "description": "The list of backup configuration information. The list is paged when all of the results cannot fit in a single message. The next set of results can be obtained by executing the same query with the continuation token provided in this list.",
      "properties": {
        "ContinuationToken": {
          "$ref": "#/definitions/ContinuationToken",
          "description": "The continuation token parameter is used to obtain next set of results. The continuation token is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token is not included in the response."
        },
        "Items": {
          "type": "array",
          "description": "List of backup configuration information.",
          "items": {
            "$ref": "#/definitions/BackupConfigurationInfo"
          }
        }
      }
    },
    "BackupPolicyScope": {
      "type": "string",
      "description": "Specifies the scope at which the backup policy is applied.",
      "enum": [
        "Invalid",
        "Partition",
        "Service",
        "Application"
      ],
      "x-ms-enum": {
        "name": "BackupPolicyScope",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Indicates an invalid backup policy scope type. All Service Fabric enumerations have the invalid type."
          },
          {
            "value": "Partition",
            "description": "Indicates the backup policy is applied at partition level. Hence overriding any policy which may have applied at partition's service or application level."
          },
          {
            "value": "Service",
            "description": "Indicates the backup policy is applied at service level. All partitions of the service inherit this policy unless explicitly overridden at partition level."
          },
          {
            "value": "Application",
            "description": "Indicates the backup policy is applied at application level. All services and partitions of the application inherit this policy unless explicitly overridden at service or partition level."
          }
        ]
      }
    },
    "BackupSuspensionScope": {
      "type": "string",
      "description": "Specifies the scope at which the backup suspension was applied.",
      "enum": [
        "Invalid",
        "Partition",
        "Service",
        "Application"
      ],
      "x-ms-enum": {
        "name": "BackupSuspensionScope",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Indicates an invalid backup suspension scope type also indicating entity is not suspended. All Service Fabric enumerations have the invalid type."
          },
          {
            "value": "Partition",
            "description": "Indicates the backup suspension is applied at partition level."
          },
          {
            "value": "Service",
            "description": "Indicates the backup suspension is applied at service level. All partitions of the service are hence suspended for backup."
          },
          {
            "value": "Application",
            "description": "Indicates the backup suspension is applied at application level. All services and partitions of the application are hence suspended for backup."
          }
        ]
      }
    },
    "RestorePartitionDescription": {
      "type": "object",
      "description": "Specifies the parameters needed to trigger a restore of a specific partition.",
      "required": [
        "BackupId",
        "BackupLocation"
      ],
      "properties": {
        "BackupId": {
          "type": "string",
          "format": "uuid",
          "description": "Unique backup ID."
        },
        "BackupLocation": {
          "type": "string",
          "description": "Location of the backup relative to the backup storage specified/ configured."
        },
        "BackupStorage": {
          "$ref": "#/definitions/BackupStorageDescription",
          "description": "Location of the backup from where the partition will be restored."
        }
      }
    },
    "RestoreProgressInfo": {
      "type": "object",
      "description": "Describes the progress of a restore operation on a partition.",
      "properties": {
        "RestoreState": {
          "$ref": "#/definitions/RestoreState",
          "description": "Represents the current state of the partition restore operation."
        },
        "TimeStampUtc": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when operation succeeded or failed."
        },
        "RestoredEpoch": {
          "$ref": "#/definitions/BackupEpoch",
          "description": "Describes the epoch at which the partition is restored."
        },
        "RestoredLsn": {
          "type": "string",
          "description": "Restored LSN."
        },
        "FailureError": {
          "$ref": "#/definitions/FabricErrorError",
          "description": "Denotes the failure encountered in performing restore operation."
        }
      }
    },
    "RestoreState": {
      "type": "string",
      "description": "Represents the current state of the partition restore operation.",
      "enum": [
        "Invalid",
        "Accepted",
        "RestoreInProgress",
        "Success",
        "Failure",
        "Timeout"
      ],
      "x-ms-enum": {
        "name": "RestoreState",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Indicates an invalid restore state. All Service Fabric enumerations have the invalid type."
          },
          {
            "value": "Accepted",
            "description": "Operation has been validated and accepted. Restore is yet to be triggered."
          },
          {
            "value": "RestoreInProgress",
            "description": "Restore operation has been triggered and is under process."
          },
          {
            "value": "Success",
            "description": "Operation completed with success."
          },
          {
            "value": "Failure",
            "description": "Operation completed with failure."
          },
          {
            "value": "Timeout",
            "description": "Operation timed out."
          }
        ]
      }
    },
    "BackupPartitionDescription": {
      "type": "object",
      "description": "Describes the parameters for triggering partition's backup.",
      "properties": {
        "BackupStorage": {
          "$ref": "#/definitions/BackupStorageDescription",
          "description": "Specifies the details of the backup storage where to save the backup."
        }
      }
    },
    "BackupInfo": {
      "type": "object",
      "description": "Represents a backup point which can be used to trigger a restore.",
      "properties": {
        "BackupId": {
          "type": "string",
          "format": "uuid",
          "description": "Unique backup ID ."
        },
        "BackupChainId": {
          "type": "string",
          "format": "uuid",
          "description": "Unique backup chain ID. All backups part of the same chain has the same backup chain id. A backup chain is comprised of 1 full backup and multiple incremental backups."
        },
        "ApplicationName": {
          "type": "string",
          "description": "Name of the Service Fabric application this partition backup belongs to."
        },
        "ServiceName": {
          "type": "string",
          "description": "Name of the Service Fabric service this partition backup belongs to."
        },
        "PartitionInformation": {
          "$ref": "#/definitions/PartitionInformation",
          "description": "Information about the partition to which this backup belongs to"
        },
        "BackupLocation": {
          "type": "string",
          "description": "Location of the backup, relative to the backup store."
        },
        "BackupType": {
          "$ref": "#/definitions/BackupType",
          "description": "Describes the type of backup, whether its full or incremental."
        },
        "EpochOfLastBackupRecord": {
          "$ref": "#/definitions/BackupEpoch",
          "description": "Epoch of the last record in this backup."
        },
        "LsnOfLastBackupRecord": {
          "type": "string",
          "description": "LSN of the last record in this backup."
        },
        "CreationTimeUtc": {
          "type": "string",
          "format": "date-time",
          "description": "The date time when this backup was taken."
        },
        "FailureError": {
          "$ref": "#/definitions/FabricErrorError",
          "description": "Denotes the failure encountered in getting backup point information."
        }
      }
    },
    "PagedBackupInfoList": {
      "type": "object",
      "description": "The list of backups. The list is paged when all of the results cannot fit in a single message. The next set of results can be obtained by executing the same query with the continuation token provided in this list.",
      "properties": {
        "ContinuationToken": {
          "$ref": "#/definitions/ContinuationToken",
          "description": "The continuation token parameter is used to obtain next set of results. The continuation token is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token is not included in the response."
        },
        "Items": {
          "type": "array",
          "description": "List of backup information.",
          "items": {
            "$ref": "#/definitions/BackupInfo"
          }
        }
      }
    },
    "BackupType": {
      "type": "string",
      "description": "Describes the type of backup, whether its full or incremental.",
      "enum": [
        "Invalid",
        "Full",
        "Incremental"
      ],
      "x-ms-enum": {
        "name": "BackupType",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Indicates an invalid backup type. All Service Fabric enumerations have the invalid type."
          },
          {
            "value": "Full",
            "description": "Indicates a full backup."
          },
          {
            "value": "Incremental",
            "description": "Indicates an incremental backup. A backup chain is comprised of a full backup followed by 0 or more incremental backups."
          }
        ]
      }
    },
    "AzureBlobBackupStorageDescription": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/BackupStorageDescription"
        },
        {
          "type": "object"
        },
        {
          "description": "AzureBlobBackupStorageDescription"
        }
      ],
      "x-ms-discriminator-value": "AzureBlobStore",
      "required": [
        "ConnectionString",
        "ContainerName"
      ],
      "properties": {
        "ConnectionString": {
          "type": "string",
          "description": "The connection string to connect to the Azure blob store."
        },
        "ContainerName": {
          "type": "string",
          "description": "The name of the container in the blob store to store and enumerate backups from."
        }
      },
      "description": "Describes the parameters for Azure blob store used for storing and enumerating backups."
    },
    "FileShareBackupStorageDescription": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/BackupStorageDescription"
        },
        {
          "type": "object"
        },
        {
          "description": "FileShareBackupStorageDescription"
        }
      ],
      "x-ms-discriminator-value": "FileShare",
      "required": [
        "Path"
      ],
      "description": "Describes the parameters for file share storage used for storing or enumerating backups.",
      "properties": {
        "Path": {
          "type": "string",
          "description": "UNC path of the file share where to store or enumerate backups from."
        },
        "PrimaryUserName": {
          "type": "string",
          "description": "Primary user name to access the file share."
        },
        "PrimaryPassword": {
          "type": "string",
          "description": "Primary password to access the share location."
        },
        "SecondaryUserName": {
          "type": "string",
          "description": "Secondary user name to access the file share."
        },
        "SecondaryPassword": {
          "type": "string",
          "description": "Secondary password to access the share location"
        }
      }
    },
    "FrequencyBasedBackupScheduleDescription": {
      "type": "object",
      "description": "Describes the frequency based backup schedule.",
      "allOf": [
        {
          "$ref": "#/definitions/BackupScheduleDescription"
        },
        {
          "type": "object"
        },
        {
          "description": "FrequencyBasedBackupScheduleDescription"
        }
      ],
      "x-ms-discriminator-value": "FrequencyBased",
      "required": [
        "Interval"
      ],
      "properties": {
        "Interval": {
          "type": "string",
          "format": "duration",
          "description": "Defines the interval with which backups are periodically taken. It should be specified in ISO8601 format. Timespan in seconds is not supported and will be ignored while creating the policy."
        }
      }
    },
    "TimeBasedBackupScheduleDescription": {
      "type": "object",
      "description": "Describes the time based backup schedule.",
      "allOf": [
        {
          "$ref": "#/definitions/BackupScheduleDescription"
        },
        {
          "type": "object"
        },
        {
          "description": "TimeBasedBackupScheduleDescription"
        }
      ],
      "x-ms-discriminator-value": "TimeBased",
      "required": [
        "ScheduleFrequencyType",
        "RunTimes"
      ],
      "properties": {
        "ScheduleFrequencyType": {
          "$ref": "#/definitions/BackupScheduleFrequencyType",
          "description": "Describes the frequency with which to run the time based backup schedule."
        },
        "RunDays": {
          "$ref": "#/definitions/DayOfWeekList",
          "description": "List of days of a week when to trigger the periodic backup. This is valid only when the backup schedule frequency type is weekly."
        },
        "RunTimes": {
          "$ref": "#/definitions/TimeList",
          "description": "Represents the list of exact time during the day in ISO8601 format. Like '19:00:00' will represent '7PM' during the day. Date specified along with time will be ignored."
        }
      }
    },
    "BackupScheduleFrequencyType": {
      "type": "string",
      "description": "Describes the frequency with which to run the time based backup schedule.",
      "enum": [
        "Invalid",
        "Daily",
        "Weekly"
      ],
      "x-ms-enum": {
        "name": "BackupScheduleFrequencyType",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Indicates an invalid backup schedule frequency type. All Service Fabric enumerations have the invalid type."
          },
          {
            "value": "Daily",
            "description": "Indicates that the time based backup schedule is repeated at a daily frequency."
          },
          {
            "value": "Weekly",
            "description": "Indicates that the time based backup schedule is repeated at a weekly frequency."
          }
        ]
      }
    },
    "TimeList": {
      "type": "array",
      "items": {
        "type": "string",
        "format": "date-time"
      },
      "description": "Represents the list of exact time during the day in ISO8601 format. Like '19:00:00' will represent '7PM' during the day. Date specified along with time will be ignored."
    },
    "DayOfWeekList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/DayOfWeek"
      },
      "description": "List of days of a week when to trigger the periodic backup. This is valid only when the backup schedule frequency type is weekly."
    },
    "DayOfWeek": {
      "type": "string",
      "description": "Describes the days in a week.",
      "enum": [
        "Sunday",
        "Monday",
        "Tuesday",
        "Wednesday",
        "Thursday",
        "Friday",
        "Saturday"
      ],
      "x-ms-enum": {
        "name": "DayOfWeek",
        "modelAsString": true,
        "values": [
          {
            "value": "Sunday",
            "description": "Indicates the Day referred is Sunday."
          },
          {
            "value": "Monday",
            "description": "Indicates the Day referred is Monday."
          },
          {
            "value": "Tuesday",
            "description": "Indicates the Day referred is Tuesday."
          },
          {
            "value": "Wednesday",
            "description": "Indicates the Day referred is Wednesday."
          },
          {
            "value": "Thursday",
            "description": "Indicates the Day referred is Thursday."
          },
          {
            "value": "Friday",
            "description": "Indicates the Day referred is Friday."
          },
          {
            "value": "Saturday",
            "description": "Indicates the Day referred is Saturday."
          }
        ]
      }
    },
    "BackupProgressInfo": {
      "type": "object",
      "description": "Describes the progress of a partition's backup.",
      "properties": {
        "BackupState": {
          "$ref": "#/definitions/BackupState",
          "description": "Represents the current state of the partition backup operation."
        },
        "TimeStampUtc": {
          "type": "string",
          "format": "date-time",
          "description": "TimeStamp in UTC when operation succeeded or failed."
        },
        "BackupId": {
          "type": "string",
          "format": "uuid",
          "description": "Unique ID of the newly created backup."
        },
        "BackupLocation": {
          "type": "string",
          "description": "Location, relative to the backup store, of the newly created backup."
        },
        "EpochOfLastBackupRecord": {
          "$ref": "#/definitions/BackupEpoch",
          "description": "Specifies the epoch of the last record included in backup."
        },
        "LsnOfLastBackupRecord": {
          "type": "string",
          "description": "The LSN of last record included in backup."
        },
        "FailureError": {
          "$ref": "#/definitions/FabricErrorError",
          "description": "Denotes the failure encountered in performing backup operation."
        }
      }
    },
    "BackupConfigurationInfo": {
      "type": "object",
      "discriminator": "Kind",
      "description": "Describes the backup configuration information.",
      "properties": {
        "Kind": {
          "$ref": "#/definitions/BackupEntityKind",
          "description": "The entity type of a Service Fabric entity such as Application, Service or a Partition where periodic backups can be enabled."
        },
        "PolicyName": {
          "description": "The name of the backup policy which is applicable to this Service Fabric application or service or partition.",
          "type": "string"
        },
        "PolicyInheritedFrom": {
          "$ref": "#/definitions/BackupPolicyScope",
          "description": "Specifies the scope at which the backup policy is applied."
        },
        "SuspensionInfo": {
          "$ref": "#/definitions/BackupSuspensionInfo",
          "description": "Describes the backup suspension details."
        }
      },
      "required": [
        "Kind"
      ]
    },
    "PartitionBackupConfigurationInfo": {
      "description": "Backup configuration information, for a specific partition, specifying what backup policy is being applied and suspend description, if any.",
      "allOf": [
        {
          "$ref": "#/definitions/BackupConfigurationInfo"
        },
        {
          "type": "object",
          "description": "Partition backup configuration info",
          "properties": {
            "ServiceName": {
              "$ref": "#/definitions/ServiceName",
              "description": "The full name of the service with 'fabric:' URI scheme."
            },
            "PartitionId": {
              "$ref": "#/definitions/PartitionId",
              "description": "An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be different."
            }
          }
        }
      ],
      "x-ms-discriminator-value": "Partition"
    },
    "BackupState": {
      "type": "string",
      "description": "Represents the current state of the partition backup operation.",
      "enum": [
        "Invalid",
        "Accepted",
        "BackupInProgress",
        "Success",
        "Failure",
        "Timeout"
      ],
      "x-ms-enum": {
        "name": "BackupState",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Indicates an invalid backup state. All Service Fabric enumerations have the invalid type."
          },
          {
            "value": "Accepted",
            "description": "Operation has been validated and accepted. Backup is yet to be triggered."
          },
          {
            "value": "BackupInProgress",
            "description": "Backup operation has been triggered and is under process."
          },
          {
            "value": "Success",
            "description": "Operation completed with success."
          },
          {
            "value": "Failure",
            "description": "Operation completed with failure."
          },
          {
            "value": "Timeout",
            "description": "Operation timed out."
          }
        ]
      }
    },
    "BackupEntity": {
      "type": "object",
      "discriminator": "EntityKind",
      "description": "Describes the Service Fabric entity that is configured for backup.",
      "properties": {
        "EntityKind": {
          "$ref": "#/definitions/BackupEntityKind",
          "description": "The entity type of a Service Fabric entity such as Application, Service or a Partition where periodic backups can be enabled."
        }
      },
      "required": [
        "EntityKind"
      ]
    },
    "ApplicationBackupEntity": {
      "type": "object",
      "description": "Identifies the Service Fabric application which is being backed up.",
      "allOf": [
        {
          "$ref": "#/definitions/BackupEntity"
        },
        {
          "type": "object",
          "description": "ApplicationBackupEntity",
          "properties": {
            "ApplicationName": {
              "$ref": "#/definitions/ApplicationName",
              "description": "The name of the application, including the 'fabric:' URI scheme."
            }
          }
        }
      ],
      "x-ms-discriminator-value": "Application"
    },
    "ServiceBackupEntity": {
      "type": "object",
      "description": "Identifies the Service Fabric stateful service which is being backed up.",
      "allOf": [
        {
          "$ref": "#/definitions/BackupEntity"
        },
        {
          "type": "object",
          "description": "ServiceBackupEntity",
          "properties": {
            "ServiceName": {
              "$ref": "#/definitions/ServiceName",
              "description": "The full name of the service with 'fabric:' URI scheme."
            }
          }
        }
      ],
      "x-ms-discriminator-value": "Service"
    },
    "PartitionBackupEntity": {
      "type": "object",
      "description": "Identifies the Service Fabric stateful partition which is being backed up.",
      "allOf": [
        {
          "$ref": "#/definitions/BackupEntity"
        },
        {
          "type": "object",
          "description": "PartitionBackupEntity",
          "properties": {
            "ServiceName": {
              "$ref": "#/definitions/ServiceName",
              "description": "The full name of the service with 'fabric:' URI scheme."
            },
            "PartitionId": {
              "$ref": "#/definitions/PartitionId",
              "description": "An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be different."
            }
          }
        }
      ],
      "x-ms-discriminator-value": "Partition"
    },
    "EnableBackupDescription": {
      "description": "Specifies the parameters needed to enable periodic backup.",
      "required": [
        "BackupPolicyName"
      ],
      "properties": {
        "BackupPolicyName": {
          "type": "string",
          "description": "Name of the backup policy to be used for enabling periodic backups."
        }
      }
    },
    "PagedBackupEntityList": {
      "type": "object",
      "description": "The list of backup entities that are being periodically backed. The list is paged when all of the results cannot fit in a single message. The next set of results can be obtained by executing the same query with the continuation token provided in this list.",
      "properties": {
        "ContinuationToken": {
          "$ref": "#/definitions/ContinuationToken",
          "description": "The continuation token parameter is used to obtain next set of results. The continuation token is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token is not included in the response."
        },
        "Items": {
          "type": "array",
          "description": "List of backup entity information.",
          "items": {
            "$ref": "#/definitions/BackupEntity"
          }
        }
      }
    },
    "BackupSuspensionInfo": {
      "type": "object",
      "description": "Describes the backup suspension details.",
      "properties": {
        "IsSuspended": {
          "type": "boolean",
          "description": "Indicates whether periodic backup is suspended at this level or not."
        },
        "SuspensionInheritedFrom": {
          "$ref": "#/definitions/BackupSuspensionScope",
          "description": "Specifies the scope at which the backup suspension was applied."
        }
      }
    },
    "BackupEntityKind": {
      "type": "string",
      "description": "The entity type of a Service Fabric entity such as Application, Service or a Partition where periodic backups can be enabled.",
      "enum": [
        "Invalid",
        "Partition",
        "Service",
        "Application"
      ],
      "x-ms-enum": {
        "name": "BackupEntityKind",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Indicates an invalid entity kind. All Service Fabric enumerations have the invalid type."
          },
          {
            "value": "Partition",
            "description": "Indicates the entity is a Service Fabric partition."
          },
          {
            "value": "Service",
            "description": "Indicates the entity is a Service Fabric service."
          },
          {
            "value": "Application",
            "description": "Indicates the entity is a Service Fabric application."
          }
        ]
      }
    },
    "GetBackupByStorageQueryDescription": {
      "type": "object",
      "description": "Describes additional filters to be applied, while listing backups, and backup storage details from where to fetch the backups.",
      "required": [
        "Storage",
        "BackupEntity"
      ],
      "properties": {
        "StartDateTimeFilter": {
          "type": "string",
          "format": "date-time",
          "description": "Specifies the start date time in ISO8601 from which to enumerate backups. If not specified, backups are enumerated from the beginning."
        },
        "EndDateTimeFilter": {
          "type": "string",
          "format": "date-time",
          "description": "Specifies the end date time in ISO8601 till which to enumerate backups. If not specified, backups are enumerated till the end."
        },
        "Latest": {
          "type": "boolean",
          "default": false,
          "description": "If specified as true, gets the most recent backup (within the specified time range) for every partition under the specified backup entity."
        },
        "Storage": {
          "$ref": "#/definitions/BackupStorageDescription",
          "description": "Describes the parameters for the backup storage from where to enumerate backups. This is optional and by default backups are enumerated from the backup storage where this backup entity is currently being backed up (as specified in backup policy). This parameter is useful to be able to enumerate backups from another cluster where you may intend to restore."
        },
        "BackupEntity": {
          "$ref": "#/definitions/BackupEntity",
          "description": "Indicates the entity for which to enumerate backups."
        }
      }
    },
    "NodeImpact": {
      "type": "object",
      "description": "Describes the expected impact of a repair to a particular node.\n\nThis type supports the Service Fabric platform; it is not meant to be used directly from your code.",
      "properties": {
        "NodeName": {
          "type": "string",
          "description": "The name of the impacted node."
        },
        "ImpactLevel": {
          "type": "string",
          "enum": [
            "Invalid",
            "None",
            "Restart",
            "RemoveData",
            "RemoveNode"
          ],
          "description": "The level of impact expected.",
          "x-ms-enum": {
            "name": "ImpactLevel",
            "modelAsString": true,
            "values": [
              {
                "value": "Invalid"
              },
              {
                "value": "None"
              },
              {
                "value": "Restart"
              },
              {
                "value": "RemoveData"
              },
              {
                "value": "RemoveNode"
              }
            ]
          }
        }
      },
      "required": [
        "NodeName"
      ]
    },
    "NodeRepairImpactDescription": {
      "description": "Describes the expected impact of a repair on a set of nodes.\n\nThis type supports the Service Fabric platform; it is not meant to be used directly from your code.",
      "x-ms-discriminator-value": "Node",
      "allOf": [
        {
          "$ref": "#/definitions/RepairImpactDescriptionBase"
        },
        {
          "type": "object",
          "description": "NodeRepairImpactDescription",
          "properties": {
            "NodeImpactList": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NodeImpact"
              },
              "description": "The list of nodes impacted by a repair action and their respective expected impact."
            }
          }
        }
      ]
    },
    "NodeRepairTargetDescription": {
      "description": "Describes the list of nodes targeted by a repair action.\n\nThis type supports the Service Fabric platform; it is not meant to be used directly from your code.",
      "x-ms-discriminator-value": "Node",
      "allOf": [
        {
          "$ref": "#/definitions/RepairTargetDescriptionBase"
        },
        {
          "type": "object",
          "description": "NodeRepairTargetDescription",
          "properties": {
            "NodeNames": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The list of nodes targeted by a repair action."
            }
          }
        }
      ]
    },
    "RepairImpactDescriptionBase": {
      "type": "object",
      "discriminator": "Kind",
      "description": "Describes the expected impact of executing a repair task.\n\nThis type supports the Service Fabric platform; it is not meant to be used directly from your code.",
      "properties": {
        "Kind": {
          "$ref": "#/definitions/RepairImpactKind",
          "description": "The kind of repair impact represented by the current object."
        }
      },
      "required": [
        "Kind"
      ]
    },
    "RepairImpactKind": {
      "description": "Specifies the kind of the impact. This type supports the Service Fabric platform; it is not meant to be used directly from your code.'",
      "type": "string",
      "enum": [
        "Invalid",
        "Node"
      ],
      "x-ms-enum": {
        "name": "RepairImpactKind",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "The repair impact is not valid or is of an unknown type."
          },
          {
            "value": "Node",
            "description": "The repair impact affects a set of Service Fabric nodes."
          }
        ]
      }
    },
    "RepairTargetDescriptionBase": {
      "type": "object",
      "discriminator": "Kind",
      "description": "Describes the entities targeted by a repair action.\n\nThis type supports the Service Fabric platform; it is not meant to be used directly from your code.",
      "properties": {
        "Kind": {
          "$ref": "#/definitions/RepairTargetKind",
          "description": "The kind of repair target described by the current object."
        }
      },
      "required": [
        "Kind"
      ]
    },
    "RepairTargetKind": {
      "description": "Specifies the kind of the repair target. This type supports the Service Fabric platform; it is not meant to be used directly from your code.'",
      "type": "string",
      "enum": [
        "Invalid",
        "Node"
      ],
      "x-ms-enum": {
        "name": "RepairTargetKind",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "The repair target is not valid or is of an unknown type."
          },
          {
            "value": "Node",
            "description": "The repair target is a set of Service Fabric nodes."
          }
        ]
      }
    },
    "RepairTask": {
      "type": "object",
      "description": "Represents a repair task, which includes information about what kind of repair was requested, what its progress is, and what its final result was.\n\nThis type supports the Service Fabric platform; it is not meant to be used directly from your code.",
      "properties": {
        "TaskId": {
          "type": "string",
          "description": "The ID of the repair task."
        },
        "Version": {
          "type": "string",
          "description": "The version of the repair task.\nWhen creating a new repair task, the version must be set to zero.  When updating a repair task,\nthe version is used for optimistic concurrency checks.  If the version is\nset to zero, the update will not check for write conflicts.  If the version is set to a non-zero value, then the\nupdate will only succeed if the actual current version of the repair task matches this value."
        },
        "Description": {
          "type": "string",
          "description": "A description of the purpose of the repair task, or other informational details.\nMay be set when the repair task is created, and is immutable once set."
        },
        "State": {
          "type": "string",
          "enum": [
            "Invalid",
            "Created",
            "Claimed",
            "Preparing",
            "Approved",
            "Executing",
            "Restoring",
            "Completed"
          ],
          "description": "The workflow state of the repair task. Valid initial states are Created, Claimed, and Preparing.",
          "x-ms-enum": {
            "name": "State",
            "modelAsString": true,
            "values": [
              {
                "value": "Invalid",
                "description": "Indicates that the repair task state is invalid. All Service Fabric enumerations have the invalid value."
              },
              {
                "value": "Created",
                "description": "Indicates that the repair task has been created."
              },
              {
                "value": "Claimed",
                "description": "Indicates that the repair task has been claimed by a repair executor."
              },
              {
                "value": "Preparing",
                "description": "Indicates that the Repair Manager is preparing the system to handle the impact of the repair task, usually by taking resources offline gracefully."
              },
              {
                "value": "Approved",
                "description": "Indicates that the repair task has been approved by the Repair Manager and is safe to execute."
              },
              {
                "value": "Executing",
                "description": "Indicates that execution of the repair task is in progress."
              },
              {
                "value": "Restoring",
                "description": "Indicates that the Repair Manager is restoring the system to its pre-repair state, usually by bringing resources back online."
              },
              {
                "value": "Completed",
                "description": "Indicates that the repair task has completed, and no further state changes will occur."
              }
            ]
          }
        },
        "Flags": {
          "type": "integer",
          "description": "A bitwise-OR of the following values, which gives additional details about the status of the repair task.\n- 1 - Cancellation of the repair has been requested\n- 2 - Abort of the repair has been requested\n- 4 - Approval of the repair was forced via client request"
        },
        "Action": {
          "type": "string",
          "description": "The requested repair action. Must be specified when the repair task is created, and is immutable once set."
        },
        "Target": {
          "$ref": "#/definitions/RepairTargetDescriptionBase",
          "description": "The target object determines what actions the system will take to prepare for the impact of the repair, prior to approving execution of the repair.\nMay be set when the repair task is created, and is immutable once set."
        },
        "Executor": {
          "type": "string",
          "description": "The name of the repair executor. Must be specified in Claimed and later states, and is immutable once set."
        },
        "ExecutorData": {
          "type": "string",
          "description": "A data string that the repair executor can use to store its internal state."
        },
        "Impact": {
          "$ref": "#/definitions/RepairImpactDescriptionBase",
          "description": "The impact object determines what actions the system will take to prepare for the impact of the repair, prior to approving execution of the repair.\nImpact must be specified by the repair executor when transitioning to the Preparing state, and is immutable once set."
        },
        "ResultStatus": {
          "type": "string",
          "enum": [
            "Invalid",
            "Succeeded",
            "Cancelled",
            "Interrupted",
            "Failed",
            "Pending"
          ],
          "description": "A value describing the overall result of the repair task execution. Must be specified in the Restoring and later states, and is immutable once set.",
          "x-ms-enum": {
            "name": "ResultStatus",
            "modelAsString": true,
            "values": [
              {
                "value": "Invalid",
                "description": "Indicates that the repair task result is invalid. All Service Fabric enumerations have the invalid value."
              },
              {
                "value": "Succeeded",
                "description": "Indicates that the repair task completed execution successfully."
              },
              {
                "value": "Cancelled",
                "description": "Indicates that the repair task was cancelled prior to execution."
              },
              {
                "value": "Interrupted",
                "description": "Indicates that execution of the repair task was interrupted by a cancellation request after some work had already been performed."
              },
              {
                "value": "Failed",
                "description": "Indicates that there was a failure during execution of the repair task. Some work may have been performed."
              },
              {
                "value": "Pending",
                "description": "Indicates that the repair task result is not yet available, because the repair task has not finished executing."
              }
            ]
          }
        },
        "ResultCode": {
          "type": "integer",
          "description": "A numeric value providing additional details about the result of the repair task execution.\nMay be specified in the Restoring and later states, and is immutable once set."
        },
        "ResultDetails": {
          "type": "string",
          "description": "A string providing additional details about the result of the repair task execution.\nMay be specified in the Restoring and later states, and is immutable once set."
        },
        "History": {
          "$ref": "#/definitions/RepairTaskHistory",
          "description": "An object that contains timestamps of the repair task's state transitions.\nThese timestamps are updated by the system, and cannot be directly modified."
        },
        "PreparingHealthCheckState": {
          "$ref": "#/definitions/RepairTaskHealthCheckState",
          "description": "The workflow state of the health check when the repair task is in the Preparing state."
        },
        "RestoringHealthCheckState": {
          "$ref": "#/definitions/RepairTaskHealthCheckState",
          "description": "The workflow state of the health check when the repair task is in the Restoring state."
        },
        "PerformPreparingHealthCheck": {
          "type": "boolean",
          "description": "A value to determine if health checks will be performed when the repair task enters the Preparing state."
        },
        "PerformRestoringHealthCheck": {
          "type": "boolean",
          "description": "A value to determine if health checks will be performed when the repair task enters the Restoring state."
        }
      },
      "required": [
        "TaskId",
        "Action",
        "State"
      ]
    },
    "RepairTaskApproveDescription": {
      "type": "object",
      "description": "Describes a request for forced approval of a repair task.\n\nThis type supports the Service Fabric platform; it is not meant to be used directly from your code.",
      "properties": {
        "TaskId": {
          "type": "string",
          "description": "The ID of the repair task."
        },
        "Version": {
          "type": "string",
          "description": "The current version number of the repair task. If non-zero, then the request will only succeed if this value matches the actual current version of the repair task. If zero, then no version check is performed."
        }
      },
      "required": [
        "TaskId"
      ]
    },
    "RepairTaskCancelDescription": {
      "type": "object",
      "description": "Describes a request to cancel a repair task.\n\nThis type supports the Service Fabric platform; it is not meant to be used directly from your code.",
      "properties": {
        "TaskId": {
          "type": "string",
          "description": "The ID of the repair task."
        },
        "Version": {
          "type": "string",
          "description": "The current version number of the repair task. If non-zero, then the request will only succeed if this value matches the actual current version of the repair task. If zero, then no version check is performed."
        },
        "RequestAbort": {
          "type": "boolean",
          "description": "_True_ if the repair should be stopped as soon as possible even if it has already started executing. _False_ if the repair should be cancelled only if execution has not yet started."
        }
      },
      "required": [
        "TaskId"
      ]
    },
    "RepairTaskDeleteDescription": {
      "type": "object",
      "description": "Describes a request to delete a completed repair task.\n\nThis type supports the Service Fabric platform; it is not meant to be used directly from your code.",
      "properties": {
        "TaskId": {
          "type": "string",
          "description": "The ID of the completed repair task to be deleted."
        },
        "Version": {
          "type": "string",
          "description": "The current version number of the repair task. If non-zero, then the request will only succeed if this value matches the actual current version of the repair task. If zero, then no version check is performed."
        }
      },
      "required": [
        "TaskId"
      ]
    },
    "RepairTaskHealthCheckState": {
      "description": "Specifies the workflow state of a repair task's health check. This type supports the Service Fabric platform; it is not meant to be used directly from your code.",
      "type": "string",
      "enum": [
        "NotStarted",
        "InProgress",
        "Succeeded",
        "Skipped",
        "TimedOut"
      ],
      "x-ms-enum": {
        "name": "RepairTaskHealthCheckState",
        "modelAsString": true,
        "values": [
          {
            "value": "NotStarted",
            "description": "Indicates that the health check has not started."
          },
          {
            "value": "InProgress",
            "description": "Indicates that the health check is in progress."
          },
          {
            "value": "Succeeded",
            "description": "Indicates that the health check succeeded."
          },
          {
            "value": "Skipped",
            "description": "Indicates that the health check was skipped."
          },
          {
            "value": "TimedOut",
            "description": "Indicates that the health check timed out."
          }
        ]
      }
    },
    "RepairTaskHistory": {
      "type": "object",
      "description": "A record of the times when the repair task entered each state.\n\nThis type supports the Service Fabric platform; it is not meant to be used directly from your code.",
      "properties": {
        "CreatedUtcTimestamp": {
          "type": "string",
          "format": "date-time",
          "description": "The time when the repair task entered the Created state."
        },
        "ClaimedUtcTimestamp": {
          "type": "string",
          "format": "date-time",
          "description": "The time when the repair task entered the Claimed state."
        },
        "PreparingUtcTimestamp": {
          "type": "string",
          "format": "date-time",
          "description": "The time when the repair task entered the Preparing state."
        },
        "ApprovedUtcTimestamp": {
          "type": "string",
          "format": "date-time",
          "description": "The time when the repair task entered the Approved state"
        },
        "ExecutingUtcTimestamp": {
          "type": "string",
          "format": "date-time",
          "description": "The time when the repair task entered the Executing state"
        },
        "RestoringUtcTimestamp": {
          "type": "string",
          "format": "date-time",
          "description": "The time when the repair task entered the Restoring state"
        },
        "CompletedUtcTimestamp": {
          "type": "string",
          "format": "date-time",
          "description": "The time when the repair task entered the Completed state"
        },
        "PreparingHealthCheckStartUtcTimestamp": {
          "type": "string",
          "format": "date-time",
          "description": "The time when the repair task started the health check in the Preparing state."
        },
        "PreparingHealthCheckEndUtcTimestamp": {
          "type": "string",
          "format": "date-time",
          "description": "The time when the repair task completed the health check in the Preparing state."
        },
        "RestoringHealthCheckStartUtcTimestamp": {
          "type": "string",
          "format": "date-time",
          "description": "The time when the repair task started the health check in the Restoring state."
        },
        "RestoringHealthCheckEndUtcTimestamp": {
          "type": "string",
          "format": "date-time",
          "description": "The time when the repair task completed the health check in the Restoring state."
        }
      }
    },
    "RepairTaskList": {
      "type": "array",
      "description": "A list of repair tasks.",
      "items": {
        "$ref": "#/definitions/RepairTask"
      }
    },
    "RepairTaskUpdateHealthPolicyDescription": {
      "type": "object",
      "description": "Describes a request to update the health policy of a repair task.\n\nThis type supports the Service Fabric platform; it is not meant to be used directly from your code.",
      "properties": {
        "TaskId": {
          "type": "string",
          "description": "The ID of the repair task to be updated."
        },
        "Version": {
          "type": "string",
          "description": "The current version number of the repair task. If non-zero, then the request will only succeed if this value matches the actual current value of the repair task. If zero, then no version check is performed."
        },
        "PerformPreparingHealthCheck": {
          "type": "boolean",
          "description": "A boolean indicating if health check is to be performed in the Preparing stage of the repair task. If not specified the existing value should not be altered. Otherwise, specify the desired new value."
        },
        "PerformRestoringHealthCheck": {
          "type": "boolean",
          "description": "A boolean indicating if health check is to be performed in the Restoring stage of the repair task. If not specified the existing value should not be altered. Otherwise, specify the desired new value."
        }
      },
      "required": [
        "TaskId"
      ]
    },
    "RepairTaskUpdateInfo": {
      "type": "object",
      "description": "Describes the result of an operation that created or updated a repair task.\n\nThis type supports the Service Fabric platform; it is not meant to be used directly from your code.",
      "properties": {
        "Version": {
          "type": "string",
          "description": "The new version of the repair task."
        }
      },
      "required": [
        "Version"
      ]
    },
    "ReconfigurationInformation": {
      "description": "Information about current reconfiguration like phase, type, previous configuration role of replica and reconfiguration start date time.",
      "properties": {
        "PreviousConfigurationRole": {
          "$ref": "#/definitions/ReplicaRole",
          "description": "Replica role before reconfiguration started."
        },
        "ReconfigurationPhase": {
          "$ref": "#/definitions/ReconfigurationPhase",
          "description": "Current phase of ongoing reconfiguration. If no reconfiguration is taking place then this value will be \"None\"."
        },
        "ReconfigurationType": {
          "$ref": "#/definitions/ReconfigurationType",
          "description": "Type of current ongoing reconfiguration. If no reconfiguration is taking place then this value will be \"None\"."
        },
        "ReconfigurationStartTimeUtc": {
          "type": "string",
          "format": "date-time",
          "description": "Start time (in UTC) of the ongoing reconfiguration. If no reconfiguration is taking place then this value will be zero date-time."
        }
      }
    },
    "ReconfigurationPhase": {
      "type": "string",
      "description": "The reconfiguration phase of a replica of a stateful service.",
      "enum": [
        "Unknown",
        "None",
        "Phase0",
        "Phase1",
        "Phase2",
        "Phase3",
        "Phase4",
        "AbortPhaseZero"
      ],
      "x-ms-enum": {
        "name": "ReconfigurationPhase",
        "modelAsString": true,
        "values": [
          {
            "value": "Unknown",
            "description": "Indicates the invalid reconfiguration phase."
          },
          {
            "value": "None",
            "description": "Specifies that there is no reconfiguration in progress."
          },
          {
            "value": "Phase0",
            "description": "Refers to the phase where the reconfiguration is transferring data from the previous primary to the new primary."
          },
          {
            "value": "Phase1",
            "description": "Refers to the phase where the reconfiguration is querying the replica set for the progress."
          },
          {
            "value": "Phase2",
            "description": "Refers to the phase where the reconfiguration is ensuring that data from the current primary is present in a majority of the replica set."
          },
          {
            "value": "Phase3",
            "description": "This phase is for internal use only."
          },
          {
            "value": "Phase4",
            "description": "This phase is for internal use only."
          },
          {
            "value": "AbortPhaseZero",
            "description": "This phase is for internal use only."
          }
        ]
      }
    },
    "ReconfigurationType": {
      "type": "string",
      "description": "The type of reconfiguration for replica of a stateful service.",
      "enum": [
        "Unknown",
        "SwapPrimary",
        "Failover",
        "Other"
      ],
      "x-ms-enum": {
        "name": "ReconfigurationType",
        "modelAsString": true,
        "values": [
          {
            "value": "Unknown",
            "description": "Indicates the invalid reconfiguration type."
          },
          {
            "value": "SwapPrimary",
            "description": "Specifies that the primary replica is being swapped with a different replica."
          },
          {
            "value": "Failover",
            "description": "Reconfiguration triggered in response to a primary going down. This could be due to many reasons such as primary replica crashing etc."
          },
          {
            "value": "Other",
            "description": "Reconfigurations where the primary replica is not changing."
          }
        ]
      }
    },
    "InfrastructureServiceResponse": {
      "type": "string",
      "format": "binary",
      "description": "This is a weakly-typed response stream to the client. It contains the JSON response from the infrastructure service without deserialization.\nThe content of the response depends on which command was issued to the infrastructure service."
    },
    "UploadChunkRange": {
      "type": "object",
      "description": "Information about which portion of the file to upload.",
      "properties": {
        "StartPosition": {
          "type": "string",
          "description": "The start position of the portion of the file. It's represented by the number of bytes."
        },
        "EndPosition": {
          "type": "string",
          "description": "The end position of the portion of the file. It's represented by the number of bytes."
        }
      }
    },
    "UploadSessionInfo": {
      "type": "object",
      "description": "Information about an image store upload session. A session is associated with a relative path in the image store.",
      "properties": {
        "StoreRelativePath": {
          "type": "string",
          "description": "The remote location within image store. This path is relative to the image store root."
        },
        "SessionId": {
          "type": "string",
          "format": "uuid",
          "description": "A unique ID of the upload session. A session ID can be reused only if the session was committed or removed."
        },
        "ModifiedDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time when the upload session was last modified."
        },
        "FileSize": {
          "type": "string",
          "description": "The size in bytes of the uploading file."
        },
        "ExpectedRanges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UploadChunkRange"
          },
          "description": "List of chunk ranges that image store has not received yet."
        }
      }
    },
    "UploadSession": {
      "type": "object",
      "description": "Information about a image store upload session",
      "properties": {
        "UploadSessions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UploadSessionInfo"
          },
          "description": "When querying upload session by upload session ID, the result contains only one upload session. When querying upload session by image store relative path, the result might contain multiple upload sessions."
        }
      }
    },
    "ContainerLogs": {
      "type": "object",
      "description": "Container logs.",
      "properties": {
        "Content": {
          "type": "string",
          "description": "Container logs."
        }
      }
    },
    "ScalingPolicyDescription": {
      "type": "object",
      "description": "Describes how the scaling should be performed",
      "required": [
        "ScalingTrigger",
        "ScalingMechanism"
      ],
      "properties": {
        "ScalingTrigger": {
          "$ref": "#/definitions/ScalingTriggerDescription",
          "description": "Specifies the trigger associated with this scaling policy"
        },
        "ScalingMechanism": {
          "$ref": "#/definitions/ScalingMechanismDescription",
          "description": "Specifies the mechanism associated with this scaling policy"
        }
      }
    },
    "ScalingPolicyDescriptionList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ScalingPolicyDescription"
      },
      "description": "A list that describes the scaling policies."
    },
    "ScalingTriggerDescription": {
      "type": "object",
      "discriminator": "Kind",
      "description": "Describes the trigger for performing a scaling operation.",
      "required": [
        "Kind"
      ],
      "properties": {
        "Kind": {
          "$ref": "#/definitions/ScalingTriggerKind",
          "description": "Specifies the kind of scaling trigger"
        }
      }
    },
    "ScalingMechanismDescription": {
      "type": "object",
      "discriminator": "Kind",
      "description": "Describes the mechanism for performing a scaling operation.",
      "required": [
        "Kind"
      ],
      "properties": {
        "Kind": {
          "$ref": "#/definitions/ScalingMechanismKind",
          "description": "Specifies the kind of scaling mechanism"
        }
      }
    },
    "ScalingTriggerKind": {
      "type": "string",
      "description": "Enumerates the ways that a service can be scaled.",
      "enum": [
        "Invalid",
        "AveragePartitionLoad",
        "AverageServiceLoad"
      ],
      "x-ms-enum": {
        "name": "ScalingTriggerKind",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Indicates the scaling trigger is invalid. All Service Fabric enumerations have the invalid type. The value is zero."
          },
          {
            "value": "AveragePartitionLoad",
            "description": "Indicates a trigger where scaling decisions are made based on average load of a partition. The value is 1."
          },
          {
            "value": "AverageServiceLoad",
            "description": "Indicates a trigger where scaling decisions are made based on average load of a service. The value is 2."
          }
        ]
      }
    },
    "ScalingMechanismKind": {
      "type": "string",
      "description": "Enumerates the ways that a service can be scaled.",
      "enum": [
        "Invalid",
        "PartitionInstanceCount",
        "AddRemoveIncrementalNamedPartition"
      ],
      "x-ms-enum": {
        "name": "ScalingMechanismKind",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Indicates the scaling mechanism is invalid. All Service Fabric enumerations have the invalid type. The value is zero."
          },
          {
            "value": "PartitionInstanceCount",
            "description": "Indicates a mechanism for scaling where new instances are added or removed from a partition. The value is 1."
          },
          {
            "value": "AddRemoveIncrementalNamedPartition",
            "description": "Indicates a mechanism for scaling where new named partitions are added or removed from a service. The value is 2."
          }
        ]
      }
    },
    "AveragePartitionLoadScalingTrigger": {
      "description": "Represents a scaling trigger related to an average load of a metric/resource of a partition.",
      "allOf": [
        {
          "$ref": "#/definitions/ScalingTriggerDescription"
        },
        {
          "type": "object"
        }
      ],
      "x-ms-discriminator-value": "AveragePartitionLoad",
      "required": [
        "MetricName",
        "LowerLoadThreshold",
        "UpperLoadThreshold",
        "ScaleIntervalInSeconds"
      ],
      "properties": {
        "MetricName": {
          "type": "string",
          "description": "The name of the metric for which usage should be tracked."
        },
        "LowerLoadThreshold": {
          "type": "string",
          "format": "double",
          "description": "The lower limit of the load below which a scale in operation should be performed."
        },
        "UpperLoadThreshold": {
          "type": "string",
          "format": "double",
          "description": "The upper limit of the load beyond which a scale out operation should be performed."
        },
        "ScaleIntervalInSeconds": {
          "type": "integer",
          "format": "int64",
          "minimum": 0,
          "maximum": 4294967295,
          "description": "The period in seconds on which a decision is made whether to scale or not."
        }
      }
    },
    "AverageServiceLoadScalingTrigger": {
      "description": "Represents a scaling policy related to an average load of a metric/resource of a service.",
      "allOf": [
        {
          "$ref": "#/definitions/ScalingTriggerDescription"
        },
        {
          "type": "object"
        }
      ],
      "x-ms-discriminator-value": "AverageServiceLoad",
      "required": [
        "MetricName",
        "LowerLoadThreshold",
        "UpperLoadThreshold",
        "ScaleIntervalInSeconds"
      ],
      "properties": {
        "MetricName": {
          "type": "string",
          "description": "The name of the metric for which usage should be tracked."
        },
        "LowerLoadThreshold": {
          "type": "string",
          "format": "double",
          "description": "The lower limit of the load below which a scale in operation should be performed."
        },
        "UpperLoadThreshold": {
          "type": "string",
          "format": "double",
          "description": "The upper limit of the load beyond which a scale out operation should be performed."
        },
        "ScaleIntervalInSeconds": {
          "type": "integer",
          "format": "int64",
          "minimum": 0,
          "maximum": 4294967295,
          "description": "The period in seconds on which a decision is made whether to scale or not."
        }
      }
    },
    "PartitionInstanceCountScaleMechanism": {
      "description": "Represents a scaling mechanism for adding or removing instances of stateless service partition.",
      "allOf": [
        {
          "$ref": "#/definitions/ScalingMechanismDescription"
        },
        {
          "type": "object"
        }
      ],
      "x-ms-discriminator-value": "PartitionInstanceCount",
      "required": [
        "MinInstanceCount",
        "MaxInstanceCount",
        "ScaleIncrement"
      ],
      "properties": {
        "MinInstanceCount": {
          "type": "integer",
          "description": "Minimum number of instances of the partition."
        },
        "MaxInstanceCount": {
          "type": "integer",
          "description": "Maximum number of instances of the partition."
        },
        "ScaleIncrement": {
          "type": "integer",
          "description": "The number of instances to add or remove during a scaling operation."
        }
      }
    },
    "AddRemoveIncrementalNamedPartitionScalingMechanism": {
      "description": "Represents a scaling mechanism for adding or removing named partitions of a stateless service. Partition names are in the format '0','1''N-1'",
      "allOf": [
        {
          "$ref": "#/definitions/ScalingMechanismDescription"
        },
        {
          "type": "object"
        }
      ],
      "x-ms-discriminator-value": "AddRemoveIncrementalNamedPartition",
      "required": [
        "MinPartitionCount",
        "MaxPartitionCount",
        "ScaleIncrement"
      ],
      "properties": {
        "MinPartitionCount": {
          "type": "integer",
          "description": "Minimum number of named partitions of the service."
        },
        "MaxPartitionCount": {
          "type": "integer",
          "description": "Maximum number of named partitions of the service."
        },
        "ScaleIncrement": {
          "type": "integer",
          "description": "The number of instances to add or remove during a scaling operation."
        }
      }
    },
    "ApplicationCreatedEvent": {
      "description": "Application Created event.",
      "allOf": [
        {
          "$ref": "#/definitions/ApplicationEvent"
        },
        {
          "type": "object",
          "properties": {
            "ApplicationTypeName": {
              "type": "string",
              "description": "Application type name."
            },
            "ApplicationTypeVersion": {
              "type": "string",
              "description": "Application type version."
            },
            "ApplicationDefinitionKind": {
              "type": "string",
              "description": "Application definition kind."
            }
          },
          "required": [
            "ApplicationTypeName",
            "ApplicationTypeVersion",
            "ApplicationDefinitionKind"
          ]
        }
      ],
      "x-ms-discriminator-value": "ApplicationCreated"
    },
    "ApplicationDeletedEvent": {
      "description": "Application Deleted event.",
      "allOf": [
        {
          "$ref": "#/definitions/ApplicationEvent"
        },
        {
          "type": "object",
          "properties": {
            "ApplicationTypeName": {
              "type": "string",
              "description": "Application type name."
            },
            "ApplicationTypeVersion": {
              "type": "string",
              "description": "Application type version."
            }
          },
          "required": [
            "ApplicationTypeName",
            "ApplicationTypeVersion"
          ]
        }
      ],
      "x-ms-discriminator-value": "ApplicationDeleted"
    },
    "ApplicationHealthReportCreatedEvent": {
      "description": "Application Health Report Created event.",
      "allOf": [
        {
          "$ref": "#/definitions/ApplicationEvent"
        },
        {
          "type": "object",
          "properties": {
            "ApplicationInstanceId": {
              "type": "integer",
              "format": "int64",
              "description": "Id of Application instance."
            },
            "SourceId": {
              "type": "string",
              "description": "Id of report source."
            },
            "Property": {
              "type": "string",
              "description": "Describes the property."
            },
            "HealthState": {
              "type": "string",
              "description": "Describes the property health state."
            },
            "TimeToLiveMs": {
              "type": "integer",
              "format": "int64",
              "description": "Time to live in milli-seconds."
            },
            "SequenceNumber": {
              "type": "integer",
              "format": "int64",
              "description": "Sequence number of report."
            },
            "Description": {
              "type": "string",
              "description": "Description of report."
            },
            "RemoveWhenExpired": {
              "type": "boolean",
              "description": "Indicates the removal when it expires."
            },
            "SourceUtcTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Source time."
            }
          },
          "required": [
            "ApplicationInstanceId",
            "SourceId",
            "Property",
            "HealthState",
            "TimeToLiveMs",
            "SequenceNumber",
            "Description",
            "RemoveWhenExpired",
            "SourceUtcTimestamp"
          ]
        }
      ],
      "x-ms-discriminator-value": "ApplicationHealthReportCreated"
    },
    "ApplicationHealthReportExpiredEvent": {
      "description": "Application Health Report Expired event.",
      "allOf": [
        {
          "$ref": "#/definitions/ApplicationEvent"
        },
        {
          "type": "object",
          "properties": {
            "ApplicationInstanceId": {
              "type": "integer",
              "format": "int64",
              "description": "Id of Application instance."
            },
            "SourceId": {
              "type": "string",
              "description": "Id of report source."
            },
            "Property": {
              "type": "string",
              "description": "Describes the property."
            },
            "HealthState": {
              "type": "string",
              "description": "Describes the property health state."
            },
            "TimeToLiveMs": {
              "type": "integer",
              "format": "int64",
              "description": "Time to live in milli-seconds."
            },
            "SequenceNumber": {
              "type": "integer",
              "format": "int64",
              "description": "Sequence number of report."
            },
            "Description": {
              "type": "string",
              "description": "Description of report."
            },
            "RemoveWhenExpired": {
              "type": "boolean",
              "description": "Indicates the removal when it expires."
            },
            "SourceUtcTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Source time."
            }
          },
          "required": [
            "ApplicationInstanceId",
            "SourceId",
            "Property",
            "HealthState",
            "TimeToLiveMs",
            "SequenceNumber",
            "Description",
            "RemoveWhenExpired",
            "SourceUtcTimestamp"
          ]
        }
      ],
      "x-ms-discriminator-value": "ApplicationHealthReportExpired"
    },
    "ApplicationUpgradeCompleteEvent": {
      "description": "Application Upgrade Complete event.",
      "allOf": [
        {
          "$ref": "#/definitions/ApplicationEvent"
        },
        {
          "type": "object",
          "properties": {
            "ApplicationTypeName": {
              "type": "string",
              "description": "Application type name."
            },
            "ApplicationTypeVersion": {
              "type": "string",
              "description": "Application type version."
            },
            "OverallUpgradeElapsedTimeInMs": {
              "type": "number",
              "format": "double",
              "description": "Overall upgrade time in milli-seconds."
            }
          },
          "required": [
            "ApplicationTypeName",
            "ApplicationTypeVersion",
            "OverallUpgradeElapsedTimeInMs"
          ]
        }
      ],
      "x-ms-discriminator-value": "ApplicationUpgradeComplete"
    },
    "ApplicationUpgradeDomainCompleteEvent": {
      "description": "Application Upgrade Domain Complete event.",
      "allOf": [
        {
          "$ref": "#/definitions/ApplicationEvent"
        },
        {
          "type": "object",
          "properties": {
            "ApplicationTypeName": {
              "type": "string",
              "description": "Application type name."
            },
            "CurrentApplicationTypeVersion": {
              "type": "string",
              "description": "Current Application type version."
            },
            "ApplicationTypeVersion": {
              "type": "string",
              "description": "Target Application type version."
            },
            "UpgradeState": {
              "type": "string",
              "description": "State of upgrade."
            },
            "UpgradeDomains": {
              "type": "string",
              "description": "Upgrade domains."
            },
            "UpgradeDomainElapsedTimeInMs": {
              "type": "number",
              "format": "double",
              "description": "Upgrade time of domain in milli-seconds."
            }
          },
          "required": [
            "ApplicationTypeName",
            "CurrentApplicationTypeVersion",
            "ApplicationTypeVersion",
            "UpgradeState",
            "UpgradeDomains",
            "UpgradeDomainElapsedTimeInMs"
          ]
        }
      ],
      "x-ms-discriminator-value": "ApplicationUpgradeDomainComplete"
    },
    "ApplicationUpgradeRollbackCompleteEvent": {
      "description": "Application Upgrade Rollback Complete event.",
      "allOf": [
        {
          "$ref": "#/definitions/ApplicationEvent"
        },
        {
          "type": "object",
          "properties": {
            "ApplicationTypeName": {
              "type": "string",
              "description": "Application type name."
            },
            "ApplicationTypeVersion": {
              "type": "string",
              "description": "Application type version."
            },
            "FailureReason": {
              "type": "string",
              "description": "Describes reason of failure."
            },
            "OverallUpgradeElapsedTimeInMs": {
              "type": "number",
              "format": "double",
              "description": "Overall upgrade time in milli-seconds."
            }
          },
          "required": [
            "ApplicationTypeName",
            "ApplicationTypeVersion",
            "FailureReason",
            "OverallUpgradeElapsedTimeInMs"
          ]
        }
      ],
      "x-ms-discriminator-value": "ApplicationUpgradeRollbackComplete"
    },
    "ApplicationUpgradeRollbackStartEvent": {
      "description": "Application Upgrade Rollback Start event.",
      "allOf": [
        {
          "$ref": "#/definitions/ApplicationEvent"
        },
        {
          "type": "object",
          "properties": {
            "ApplicationTypeName": {
              "type": "string",
              "description": "Application type name."
            },
            "CurrentApplicationTypeVersion": {
              "type": "string",
              "description": "Current Application type version."
            },
            "ApplicationTypeVersion": {
              "type": "string",
              "description": "Target Application type version."
            },
            "FailureReason": {
              "type": "string",
              "description": "Describes reason of failure."
            },
            "OverallUpgradeElapsedTimeInMs": {
              "type": "number",
              "format": "double",
              "description": "Overall upgrade time in milli-seconds."
            }
          },
          "required": [
            "ApplicationTypeName",
            "CurrentApplicationTypeVersion",
            "ApplicationTypeVersion",
            "FailureReason",
            "OverallUpgradeElapsedTimeInMs"
          ]
        }
      ],
      "x-ms-discriminator-value": "ApplicationUpgradeRollbackStart"
    },
    "ApplicationUpgradeStartEvent": {
      "description": "Application Upgrade Start event.",
      "allOf": [
        {
          "$ref": "#/definitions/ApplicationEvent"
        },
        {
          "type": "object",
          "properties": {
            "ApplicationTypeName": {
              "type": "string",
              "description": "Application type name."
            },
            "CurrentApplicationTypeVersion": {
              "type": "string",
              "description": "Current Application type version."
            },
            "ApplicationTypeVersion": {
              "type": "string",
              "description": "Target Application type version."
            },
            "UpgradeType": {
              "type": "string",
              "description": "Type of upgrade."
            },
            "RollingUpgradeMode": {
              "type": "string",
              "description": "Mode of upgrade."
            },
            "FailureAction": {
              "type": "string",
              "description": "Action if failed."
            }
          },
          "required": [
            "ApplicationTypeName",
            "CurrentApplicationTypeVersion",
            "ApplicationTypeVersion",
            "UpgradeType",
            "RollingUpgradeMode",
            "FailureAction"
          ]
        }
      ],
      "x-ms-discriminator-value": "ApplicationUpgradeStart"
    },
    "DeployedApplicationHealthReportCreatedEvent": {
      "description": "Deployed Application Health Report Created event.",
      "allOf": [
        {
          "$ref": "#/definitions/ApplicationEvent"
        },
        {
          "type": "object",
          "properties": {
            "ApplicationInstanceId": {
              "type": "integer",
              "format": "int64",
              "description": "Id of Application instance."
            },
            "NodeName": {
              "$ref": "#/definitions/NodeName",
              "description": "The name of a Service Fabric node."
            },
            "SourceId": {
              "type": "string",
              "description": "Id of report source."
            },
            "Property": {
              "type": "string",
              "description": "Describes the property."
            },
            "HealthState": {
              "type": "string",
              "description": "Describes the property health state."
            },
            "TimeToLiveMs": {
              "type": "integer",
              "format": "int64",
              "description": "Time to live in milli-seconds."
            },
            "SequenceNumber": {
              "type": "integer",
              "format": "int64",
              "description": "Sequence number of report."
            },
            "Description": {
              "type": "string",
              "description": "Description of report."
            },
            "RemoveWhenExpired": {
              "type": "boolean",
              "description": "Indicates the removal when it expires."
            },
            "SourceUtcTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Source time."
            }
          },
          "required": [
            "ApplicationInstanceId",
            "NodeName",
            "SourceId",
            "Property",
            "HealthState",
            "TimeToLiveMs",
            "SequenceNumber",
            "Description",
            "RemoveWhenExpired",
            "SourceUtcTimestamp"
          ]
        }
      ],
      "x-ms-discriminator-value": "DeployedApplicationHealthReportCreated"
    },
    "DeployedApplicationHealthReportExpiredEvent": {
      "description": "Deployed Application Health Report Expired event.",
      "allOf": [
        {
          "$ref": "#/definitions/ApplicationEvent"
        },
        {
          "type": "object",
          "properties": {
            "ApplicationInstanceId": {
              "type": "integer",
              "format": "int64",
              "description": "Id of Application instance."
            },
            "NodeName": {
              "$ref": "#/definitions/NodeName",
              "description": "The name of a Service Fabric node."
            },
            "SourceId": {
              "type": "string",
              "description": "Id of report source."
            },
            "Property": {
              "type": "string",
              "description": "Describes the property."
            },
            "HealthState": {
              "type": "string",
              "description": "Describes the property health state."
            },
            "TimeToLiveMs": {
              "type": "integer",
              "format": "int64",
              "description": "Time to live in milli-seconds."
            },
            "SequenceNumber": {
              "type": "integer",
              "format": "int64",
              "description": "Sequence number of report."
            },
            "Description": {
              "type": "string",
              "description": "Description of report."
            },
            "RemoveWhenExpired": {
              "type": "boolean",
              "description": "Indicates the removal when it expires."
            },
            "SourceUtcTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Source time."
            }
          },
          "required": [
            "ApplicationInstanceId",
            "NodeName",
            "SourceId",
            "Property",
            "HealthState",
            "TimeToLiveMs",
            "SequenceNumber",
            "Description",
            "RemoveWhenExpired",
            "SourceUtcTimestamp"
          ]
        }
      ],
      "x-ms-discriminator-value": "DeployedApplicationHealthReportExpired"
    },
    "ProcessDeactivatedEvent": {
      "description": "Process Deactivated event.",
      "allOf": [
        {
          "$ref": "#/definitions/ApplicationEvent"
        },
        {
          "type": "object",
          "properties": {
            "ServiceName": {
              "type": "string",
              "description": "Name of Service."
            },
            "ServicePackageName": {
              "type": "string",
              "description": "Name of Service package."
            },
            "ServicePackageActivationId": {
              "type": "string",
              "description": "Activation Id of Service package."
            },
            "IsExclusive": {
              "type": "boolean",
              "description": "Indicates IsExclusive flag."
            },
            "CodePackageName": {
              "type": "string",
              "description": "Name of Code package."
            },
            "EntryPointType": {
              "type": "string",
              "description": "Type of EntryPoint."
            },
            "ExeName": {
              "type": "string",
              "description": "Name of executable."
            },
            "ProcessId": {
              "type": "integer",
              "format": "int64",
              "description": "Process Id."
            },
            "HostId": {
              "type": "string",
              "description": "Host Id."
            },
            "ExitCode": {
              "type": "integer",
              "format": "int64",
              "description": "Exit code of process."
            },
            "UnexpectedTermination": {
              "type": "boolean",
              "description": "Indicates if termination is unexpected."
            },
            "StartTime": {
              "type": "string",
              "format": "date-time",
              "description": "Start time of process."
            }
          },
          "required": [
            "ServiceName",
            "ServicePackageName",
            "ServicePackageActivationId",
            "IsExclusive",
            "CodePackageName",
            "EntryPointType",
            "ExeName",
            "ProcessId",
            "HostId",
            "ExitCode",
            "UnexpectedTermination",
            "StartTime"
          ]
        }
      ],
      "x-ms-discriminator-value": "ProcessDeactivated"
    },
    "ContainerDeactivatedEvent": {
      "description": "Container Deactivated event.",
      "allOf": [
        {
          "$ref": "#/definitions/ApplicationEvent"
        },
        {
          "type": "object",
          "properties": {
            "ServiceName": {
              "type": "string",
              "description": "Name of Service."
            },
            "ServicePackageName": {
              "type": "string",
              "description": "Name of Service package."
            },
            "ServicePackageActivationId": {
              "type": "string",
              "description": "Activation Id of Service package."
            },
            "IsExclusive": {
              "type": "boolean",
              "description": "Indicates IsExclusive flag."
            },
            "CodePackageName": {
              "type": "string",
              "description": "Name of Code package."
            },
            "EntryPointType": {
              "type": "string",
              "description": "Type of EntryPoint."
            },
            "ImageName": {
              "type": "string",
              "description": "Name of Container image."
            },
            "ContainerName": {
              "type": "string",
              "description": "Name of Container."
            },
            "HostId": {
              "type": "string",
              "description": "Host Id."
            },
            "ExitCode": {
              "type": "integer",
              "format": "int64",
              "description": "Exit code of process."
            },
            "UnexpectedTermination": {
              "type": "boolean",
              "description": "Indicates if termination is unexpected."
            },
            "StartTime": {
              "type": "string",
              "format": "date-time",
              "description": "Start time of process."
            }
          },
          "required": [
            "ServiceName",
            "ServicePackageName",
            "ServicePackageActivationId",
            "IsExclusive",
            "CodePackageName",
            "EntryPointType",
            "ImageName",
            "ContainerName",
            "HostId",
            "ExitCode",
            "UnexpectedTermination",
            "StartTime"
          ]
        }
      ],
      "x-ms-discriminator-value": "ContainerDeactivated"
    },
    "NodeAbortedEvent": {
      "description": "Node Aborted event.",
      "allOf": [
        {
          "$ref": "#/definitions/NodeEvent"
        },
        {
          "type": "object",
          "properties": {
            "NodeInstance": {
              "type": "integer",
              "format": "int64",
              "description": "Id of Node instance."
            },
            "NodeId": {
              "type": "string",
              "description": "Id of Node."
            },
            "UpgradeDomain": {
              "type": "string",
              "description": "Upgrade domain of Node."
            },
            "FaultDomain": {
              "type": "string",
              "description": "Fault domain of Node."
            },
            "IpAddressOrFQDN": {
              "type": "string",
              "description": "IP address or FQDN."
            },
            "Hostname": {
              "type": "string",
              "description": "Name of Host."
            },
            "IsSeedNode": {
              "type": "boolean",
              "description": "Indicates if it is seed node."
            },
            "NodeVersion": {
              "type": "string",
              "description": "Version of Node."
            }
          },
          "required": [
            "NodeInstance",
            "NodeId",
            "UpgradeDomain",
            "FaultDomain",
            "IpAddressOrFQDN",
            "Hostname",
            "IsSeedNode",
            "NodeVersion"
          ]
        }
      ],
      "x-ms-discriminator-value": "NodeAborted"
    },
    "NodeAbortingEvent": {
      "description": "Node Aborting event.",
      "allOf": [
        {
          "$ref": "#/definitions/NodeEvent"
        },
        {
          "type": "object",
          "properties": {
            "NodeInstance": {
              "type": "integer",
              "format": "int64",
              "description": "Id of Node instance."
            },
            "NodeId": {
              "type": "string",
              "description": "Id of Node."
            },
            "UpgradeDomain": {
              "type": "string",
              "description": "Upgrade domain of Node."
            },
            "FaultDomain": {
              "type": "string",
              "description": "Fault domain of Node."
            },
            "IpAddressOrFQDN": {
              "type": "string",
              "description": "IP address or FQDN."
            },
            "Hostname": {
              "type": "string",
              "description": "Name of Host."
            },
            "IsSeedNode": {
              "type": "boolean",
              "description": "Indicates if it is seed node."
            },
            "NodeVersion": {
              "type": "string",
              "description": "Version of Node."
            }
          },
          "required": [
            "NodeInstance",
            "NodeId",
            "UpgradeDomain",
            "FaultDomain",
            "IpAddressOrFQDN",
            "Hostname",
            "IsSeedNode",
            "NodeVersion"
          ]
        }
      ],
      "x-ms-discriminator-value": "NodeAborting"
    },
    "NodeAddedEvent": {
      "description": "Node Added event.",
      "allOf": [
        {
          "$ref": "#/definitions/NodeEvent"
        },
        {
          "type": "object",
          "properties": {
            "NodeId": {
              "type": "string",
              "description": "Id of Node."
            },
            "NodeInstance": {
              "type": "integer",
              "format": "int64",
              "description": "Id of Node instance."
            },
            "NodeType": {
              "type": "string",
              "description": "Type of Node."
            },
            "FabricVersion": {
              "type": "string",
              "description": "Fabric version."
            },
            "IpAddressOrFQDN": {
              "type": "string",
              "description": "IP address or FQDN."
            },
            "NodeCapacities": {
              "type": "string",
              "description": "Capacities."
            }
          },
          "required": [
            "NodeId",
            "NodeInstance",
            "NodeType",
            "FabricVersion",
            "IpAddressOrFQDN",
            "NodeCapacities"
          ]
        }
      ],
      "x-ms-discriminator-value": "NodeAdded"
    },
    "NodeCloseEvent": {
      "description": "Node Close event.",
      "allOf": [
        {
          "$ref": "#/definitions/NodeEvent"
        },
        {
          "type": "object",
          "properties": {
            "NodeId": {
              "type": "string",
              "description": "Id of Node."
            },
            "NodeInstance": {
              "type": "string",
              "description": "Id of Node instance."
            },
            "Error": {
              "type": "string",
              "description": "Describes error."
            }
          },
          "required": [
            "NodeId",
            "NodeInstance",
            "Error"
          ]
        }
      ],
      "x-ms-discriminator-value": "NodeClose"
    },
    "NodeClosingEvent": {
      "description": "Node Closing event.",
      "allOf": [
        {
          "$ref": "#/definitions/NodeEvent"
        },
        {
          "type": "object",
          "properties": {
            "NodeInstance": {
              "type": "integer",
              "format": "int64",
              "description": "Id of Node instance."
            },
            "NodeId": {
              "type": "string",
              "description": "Id of Node."
            },
            "UpgradeDomain": {
              "type": "string",
              "description": "Upgrade domain of Node."
            },
            "FaultDomain": {
              "type": "string",
              "description": "Fault domain of Node."
            },
            "IpAddressOrFQDN": {
              "type": "string",
              "description": "IP address or FQDN."
            },
            "Hostname": {
              "type": "string",
              "description": "Name of Host."
            },
            "IsSeedNode": {
              "type": "boolean",
              "description": "Indicates if it is seed node."
            },
            "NodeVersion": {
              "type": "string",
              "description": "Version of Node."
            }
          },
          "required": [
            "NodeInstance",
            "NodeId",
            "UpgradeDomain",
            "FaultDomain",
            "IpAddressOrFQDN",
            "Hostname",
            "IsSeedNode",
            "NodeVersion"
          ]
        }
      ],
      "x-ms-discriminator-value": "NodeClosing"
    },
    "NodeDeactivateCompleteEvent": {
      "description": "Node Deactivate Complete event.",
      "allOf": [
        {
          "$ref": "#/definitions/NodeEvent"
        },
        {
          "type": "object",
          "properties": {
            "NodeInstance": {
              "type": "integer",
              "format": "int64",
              "description": "Id of Node instance."
            },
            "EffectiveDeactivateIntent": {
              "type": "string",
              "description": "Describes deactivate intent."
            },
            "BatchIdsWithDeactivateIntent": {
              "type": "string",
              "description": "Batch Ids."
            },
            "StartTime": {
              "type": "string",
              "format": "date-time",
              "description": "Start time."
            }
          },
          "required": [
            "NodeInstance",
            "EffectiveDeactivateIntent",
            "BatchIdsWithDeactivateIntent",
            "StartTime"
          ]
        }
      ],
      "x-ms-discriminator-value": "NodeDeactivateComplete"
    },
    "NodeDeactivateStartEvent": {
      "description": "Node Deactivate Start event.",
      "allOf": [
        {
          "$ref": "#/definitions/NodeEvent"
        },
        {
          "type": "object",
          "properties": {
            "NodeInstance": {
              "type": "integer",
              "format": "int64",
              "description": "Id of Node instance."
            },
            "BatchId": {
              "type": "string",
              "description": "Batch Id."
            },
            "DeactivateIntent": {
              "type": "string",
              "description": "Describes deactivate intent."
            }
          },
          "required": [
            "NodeInstance",
            "BatchId",
            "DeactivateIntent"
          ]
        }
      ],
      "x-ms-discriminator-value": "NodeDeactivateStart"
    },
    "NodeDownEvent": {
      "description": "Node Down event.",
      "allOf": [
        {
          "$ref": "#/definitions/NodeEvent"
        },
        {
          "type": "object",
          "properties": {
            "NodeInstance": {
              "type": "integer",
              "format": "int64",
              "description": "Id of Node instance."
            },
            "LastNodeUpAt": {
              "type": "string",
              "format": "date-time",
              "description": "Time when Node was last up."
            }
          },
          "required": [
            "NodeInstance",
            "LastNodeUpAt"
          ]
        }
      ],
      "x-ms-discriminator-value": "NodeDown"
    },
    "NodeHealthReportCreatedEvent": {
      "description": "Node Health Report Created event.",
      "allOf": [
        {
          "$ref": "#/definitions/NodeEvent"
        },
        {
          "type": "object",
          "properties": {
            "NodeInstanceId": {
              "type": "integer",
              "format": "int64",
              "description": "Id of Node instance."
            },
            "SourceId": {
              "type": "string",
              "description": "Id of report source."
            },
            "Property": {
              "type": "string",
              "description": "Describes the property."
            },
            "HealthState": {
              "type": "string",
              "description": "Describes the property health state."
            },
            "TimeToLiveMs": {
              "type": "integer",
              "format": "int64",
              "description": "Time to live in milli-seconds."
            },
            "SequenceNumber": {
              "type": "integer",
              "format": "int64",
              "description": "Sequence number of report."
            },
            "Description": {
              "type": "string",
              "description": "Description of report."
            },
            "RemoveWhenExpired": {
              "type": "boolean",
              "description": "Indicates the removal when it expires."
            },
            "SourceUtcTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Source time."
            }
          },
          "required": [
            "NodeInstanceId",
            "SourceId",
            "Property",
            "HealthState",
            "TimeToLiveMs",
            "SequenceNumber",
            "Description",
            "RemoveWhenExpired",
            "SourceUtcTimestamp"
          ]
        }
      ],
      "x-ms-discriminator-value": "NodeHealthReportCreated"
    },
    "NodeHealthReportExpiredEvent": {
      "description": "Node Health Report Expired event.",
      "allOf": [
        {
          "$ref": "#/definitions/NodeEvent"
        },
        {
          "type": "object",
          "properties": {
            "NodeInstanceId": {
              "type": "integer",
              "format": "int64",
              "description": "Id of Node instance."
            },
            "SourceId": {
              "type": "string",
              "description": "Id of report source."
            },
            "Property": {
              "type": "string",
              "description": "Describes the property."
            },
            "HealthState": {
              "type": "string",
              "description": "Describes the property health state."
            },
            "TimeToLiveMs": {
              "type": "integer",
              "format": "int64",
              "description": "Time to live in milli-seconds."
            },
            "SequenceNumber": {
              "type": "integer",
              "format": "int64",
              "description": "Sequence number of report."
            },
            "Description": {
              "type": "string",
              "description": "Description of report."
            },
            "RemoveWhenExpired": {
              "type": "boolean",
              "description": "Indicates the removal when it expires."
            },
            "SourceUtcTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Source time."
            }
          },
          "required": [
            "NodeInstanceId",
            "SourceId",
            "Property",
            "HealthState",
            "TimeToLiveMs",
            "SequenceNumber",
            "Description",
            "RemoveWhenExpired",
            "SourceUtcTimestamp"
          ]
        }
      ],
      "x-ms-discriminator-value": "NodeHealthReportExpired"
    },
    "NodeOpenedSuccessEvent": {
      "description": "Node Opened Success event.",
      "allOf": [
        {
          "$ref": "#/definitions/NodeEvent"
        },
        {
          "type": "object",
          "properties": {
            "NodeInstance": {
              "type": "integer",
              "format": "int64",
              "description": "Id of Node instance."
            },
            "NodeId": {
              "type": "string",
              "description": "Id of Node."
            },
            "UpgradeDomain": {
              "type": "string",
              "description": "Upgrade domain of Node."
            },
            "FaultDomain": {
              "type": "string",
              "description": "Fault domain of Node."
            },
            "IpAddressOrFQDN": {
              "type": "string",
              "description": "IP address or FQDN."
            },
            "Hostname": {
              "type": "string",
              "description": "Name of Host."
            },
            "IsSeedNode": {
              "type": "boolean",
              "description": "Indicates if it is seed node."
            },
            "NodeVersion": {
              "type": "string",
              "description": "Version of Node."
            }
          },
          "required": [
            "NodeInstance",
            "NodeId",
            "UpgradeDomain",
            "FaultDomain",
            "IpAddressOrFQDN",
            "Hostname",
            "IsSeedNode",
            "NodeVersion"
          ]
        }
      ],
      "x-ms-discriminator-value": "NodeOpenedSuccess"
    },
    "NodeOpenFailedEvent": {
      "description": "Node Open Failed event.",
      "allOf": [
        {
          "$ref": "#/definitions/NodeEvent"
        },
        {
          "type": "object",
          "properties": {
            "NodeInstance": {
              "type": "integer",
              "format": "int64",
              "description": "Id of Node instance."
            },
            "NodeId": {
              "type": "string",
              "description": "Id of Node."
            },
            "UpgradeDomain": {
              "type": "string",
              "description": "Upgrade domain of Node."
            },
            "FaultDomain": {
              "type": "string",
              "description": "Fault domain of Node."
            },
            "IpAddressOrFQDN": {
              "type": "string",
              "description": "IP address or FQDN."
            },
            "Hostname": {
              "type": "string",
              "description": "Name of Host."
            },
            "IsSeedNode": {
              "type": "boolean",
              "description": "Indicates if it is seed node."
            },
            "NodeVersion": {
              "type": "string",
              "description": "Version of Node."
            },
            "Error": {
              "type": "string",
              "description": "Describes the error."
            }
          },
          "required": [
            "NodeInstance",
            "NodeId",
            "UpgradeDomain",
            "FaultDomain",
            "IpAddressOrFQDN",
            "Hostname",
            "IsSeedNode",
            "NodeVersion",
            "Error"
          ]
        }
      ],
      "x-ms-discriminator-value": "NodeOpenFailed"
    },
    "NodeOpeningEvent": {
      "description": "Node Opening event.",
      "allOf": [
        {
          "$ref": "#/definitions/NodeEvent"
        },
        {
          "type": "object",
          "properties": {
            "NodeInstance": {
              "type": "integer",
              "format": "int64",
              "description": "Id of Node instance."
            },
            "NodeId": {
              "type": "string",
              "description": "Id of Node."
            },
            "UpgradeDomain": {
              "type": "string",
              "description": "Upgrade domain of Node."
            },
            "FaultDomain": {
              "type": "string",
              "description": "Fault domain of Node."
            },
            "IpAddressOrFQDN": {
              "type": "string",
              "description": "IP address or FQDN."
            },
            "Hostname": {
              "type": "string",
              "description": "Name of Host."
            },
            "IsSeedNode": {
              "type": "boolean",
              "description": "Indicates if it is seed node."
            },
            "NodeVersion": {
              "type": "string",
              "description": "Version of Node."
            }
          },
          "required": [
            "NodeInstance",
            "NodeId",
            "UpgradeDomain",
            "FaultDomain",
            "IpAddressOrFQDN",
            "Hostname",
            "IsSeedNode",
            "NodeVersion"
          ]
        }
      ],
      "x-ms-discriminator-value": "NodeOpening"
    },
    "NodeRemovedEvent": {
      "description": "Node Removed event.",
      "allOf": [
        {
          "$ref": "#/definitions/NodeEvent"
        },
        {
          "type": "object",
          "properties": {
            "NodeId": {
              "type": "string",
              "description": "Id of Node."
            },
            "NodeInstance": {
              "type": "integer",
              "format": "int64",
              "description": "Id of Node instance."
            },
            "NodeType": {
              "type": "string",
              "description": "Type of Node."
            },
            "FabricVersion": {
              "type": "string",
              "description": "Fabric version."
            },
            "IpAddressOrFQDN": {
              "type": "string",
              "description": "IP address or FQDN."
            },
            "NodeCapacities": {
              "type": "string",
              "description": "Capacities."
            }
          },
          "required": [
            "NodeId",
            "NodeInstance",
            "NodeType",
            "FabricVersion",
            "IpAddressOrFQDN",
            "NodeCapacities"
          ]
        }
      ],
      "x-ms-discriminator-value": "NodeRemoved"
    },
    "NodeUpEvent": {
      "description": "Node Up event.",
      "allOf": [
        {
          "$ref": "#/definitions/NodeEvent"
        },
        {
          "type": "object",
          "properties": {
            "NodeInstance": {
              "type": "integer",
              "format": "int64",
              "description": "Id of Node instance."
            },
            "LastNodeDownAt": {
              "type": "string",
              "format": "date-time",
              "description": "Time when Node was last down."
            }
          },
          "required": [
            "NodeInstance",
            "LastNodeDownAt"
          ]
        }
      ],
      "x-ms-discriminator-value": "NodeUp"
    },
    "PartitionHealthReportCreatedEvent": {
      "description": "Partition Health Report Created event.",
      "allOf": [
        {
          "$ref": "#/definitions/PartitionEvent"
        },
        {
          "type": "object",
          "properties": {
            "SourceId": {
              "type": "string",
              "description": "Id of report source."
            },
            "Property": {
              "type": "string",
              "description": "Describes the property."
            },
            "HealthState": {
              "type": "string",
              "description": "Describes the property health state."
            },
            "TimeToLiveMs": {
              "type": "integer",
              "format": "int64",
              "description": "Time to live in milli-seconds."
            },
            "SequenceNumber": {
              "type": "integer",
              "format": "int64",
              "description": "Sequence number of report."
            },
            "Description": {
              "type": "string",
              "description": "Description of report."
            },
            "RemoveWhenExpired": {
              "type": "boolean",
              "description": "Indicates the removal when it expires."
            },
            "SourceUtcTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Source time."
            }
          },
          "required": [
            "SourceId",
            "Property",
            "HealthState",
            "TimeToLiveMs",
            "SequenceNumber",
            "Description",
            "RemoveWhenExpired",
            "SourceUtcTimestamp"
          ]
        }
      ],
      "x-ms-discriminator-value": "PartitionHealthReportCreated"
    },
    "PartitionHealthReportExpiredEvent": {
      "description": "Partition Health Report Expired event.",
      "allOf": [
        {
          "$ref": "#/definitions/PartitionEvent"
        },
        {
          "type": "object",
          "properties": {
            "SourceId": {
              "type": "string",
              "description": "Id of report source."
            },
            "Property": {
              "type": "string",
              "description": "Describes the property."
            },
            "HealthState": {
              "type": "string",
              "description": "Describes the property health state."
            },
            "TimeToLiveMs": {
              "type": "integer",
              "format": "int64",
              "description": "Time to live in milli-seconds."
            },
            "SequenceNumber": {
              "type": "integer",
              "format": "int64",
              "description": "Sequence number of report."
            },
            "Description": {
              "type": "string",
              "description": "Description of report."
            },
            "RemoveWhenExpired": {
              "type": "boolean",
              "description": "Indicates the removal when it expires."
            },
            "SourceUtcTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Source time."
            }
          },
          "required": [
            "SourceId",
            "Property",
            "HealthState",
            "TimeToLiveMs",
            "SequenceNumber",
            "Description",
            "RemoveWhenExpired",
            "SourceUtcTimestamp"
          ]
        }
      ],
      "x-ms-discriminator-value": "PartitionHealthReportExpired"
    },
    "PartitionReconfigurationCompletedEvent": {
      "description": "Partition Reconfiguration Completed event.",
      "allOf": [
        {
          "$ref": "#/definitions/PartitionEvent"
        },
        {
          "type": "object",
          "properties": {
            "NodeName": {
              "$ref": "#/definitions/NodeName",
              "description": "The name of a Service Fabric node."
            },
            "NodeInstanceId": {
              "type": "string",
              "description": "Id of Node instance."
            },
            "ServiceType": {
              "type": "string",
              "description": "Type of Service."
            },
            "CcEpochDataLossVersion": {
              "type": "integer",
              "format": "int64",
              "description": "CcEpochDataLoss version."
            },
            "CcEpochConfigVersion": {
              "type": "integer",
              "format": "int64",
              "description": "CcEpochConfig version."
            },
            "ReconfigType": {
              "type": "string",
              "description": "Type of reconfiguration."
            },
            "Result": {
              "type": "string",
              "description": "Describes reconfiguration result."
            },
            "Phase0DurationMs": {
              "type": "number",
              "format": "double",
              "description": "Duration of Phase0 in milli-seconds."
            },
            "Phase1DurationMs": {
              "type": "number",
              "format": "double",
              "description": "Duration of Phase1 in milli-seconds."
            },
            "Phase2DurationMs": {
              "type": "number",
              "format": "double",
              "description": "Duration of Phase2 in milli-seconds."
            },
            "Phase3DurationMs": {
              "type": "number",
              "format": "double",
              "description": "Duration of Phase3 in milli-seconds."
            },
            "Phase4DurationMs": {
              "type": "number",
              "format": "double",
              "description": "Duration of Phase4 in milli-seconds."
            },
            "TotalDurationMs": {
              "type": "number",
              "format": "double",
              "description": "Total duration in milli-seconds."
            }
          },
          "required": [
            "NodeName",
            "NodeInstanceId",
            "ServiceType",
            "CcEpochDataLossVersion",
            "CcEpochConfigVersion",
            "ReconfigType",
            "Result",
            "Phase0DurationMs",
            "Phase1DurationMs",
            "Phase2DurationMs",
            "Phase3DurationMs",
            "Phase4DurationMs",
            "TotalDurationMs"
          ]
        }
      ],
      "x-ms-discriminator-value": "PartitionReconfigurationCompleted"
    },
    "PartitionPrimaryMoveAnalysisEvent": {
      "description": "Partition Primary Move Analysis event.",
      "allOf": [
        {
          "$ref": "#/definitions/PartitionAnalysisEvent"
        },
        {
          "type": "object",
          "properties": {
            "WhenMoveCompleted": {
              "type": "string",
              "format": "date-time",
              "description": "Time when the move was completed."
            },
            "PreviousNode": {
              "$ref": "#/definitions/NodeName",
              "description": "The name of a Service Fabric node."
            },
            "CurrentNode": {
              "$ref": "#/definitions/NodeName",
              "description": "The name of a Service Fabric node."
            },
            "MoveReason": {
              "type": "string",
              "description": "Move reason."
            },
            "RelevantTraces": {
              "type": "string",
              "description": "Relevant traces."
            }
          },
          "required": [
            "WhenMoveCompleted",
            "PreviousNode",
            "CurrentNode",
            "MoveReason",
            "RelevantTraces"
          ]
        }
      ],
      "x-ms-discriminator-value": "PartitionPrimaryMoveAnalysis"
    },
    "ServiceCreatedEvent": {
      "description": "Service Created event.",
      "allOf": [
        {
          "$ref": "#/definitions/ServiceEvent"
        },
        {
          "type": "object",
          "properties": {
            "ServiceTypeName": {
              "type": "string",
              "description": "Service type name."
            },
            "ApplicationName": {
              "type": "string",
              "description": "Application name."
            },
            "ApplicationTypeName": {
              "type": "string",
              "description": "Application type name."
            },
            "ServiceInstance": {
              "type": "integer",
              "format": "int64",
              "description": "Id of Service instance."
            },
            "IsStateful": {
              "type": "boolean",
              "description": "Indicates if Service is stateful."
            },
            "PartitionCount": {
              "type": "integer",
              "format": "int32",
              "description": "Number of partitions."
            },
            "TargetReplicaSetSize": {
              "type": "integer",
              "format": "int32",
              "description": "Size of target replicas set."
            },
            "MinReplicaSetSize": {
              "type": "integer",
              "format": "int32",
              "description": "Minimum size of replicas set."
            },
            "ServicePackageVersion": {
              "type": "string",
              "description": "Version of Service package."
            },
            "PartitionId": {
              "$ref": "#/definitions/PartitionId",
              "description": "An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be different."
            }
          },
          "required": [
            "ServiceTypeName",
            "ApplicationName",
            "ApplicationTypeName",
            "ServiceInstance",
            "IsStateful",
            "PartitionCount",
            "TargetReplicaSetSize",
            "MinReplicaSetSize",
            "ServicePackageVersion",
            "PartitionId"
          ]
        }
      ],
      "x-ms-discriminator-value": "ServiceCreated"
    },
    "ServiceDeletedEvent": {
      "description": "Service Deleted event.",
      "allOf": [
        {
          "$ref": "#/definitions/ServiceEvent"
        },
        {
          "type": "object",
          "properties": {
            "ServiceTypeName": {
              "type": "string",
              "description": "Service type name."
            },
            "ApplicationName": {
              "type": "string",
              "description": "Application name."
            },
            "ApplicationTypeName": {
              "type": "string",
              "description": "Application type name."
            },
            "ServiceInstance": {
              "type": "integer",
              "format": "int64",
              "description": "Id of Service instance."
            },
            "IsStateful": {
              "type": "boolean",
              "description": "Indicates if Service is stateful."
            },
            "PartitionCount": {
              "type": "integer",
              "format": "int32",
              "description": "Number of partitions."
            },
            "TargetReplicaSetSize": {
              "type": "integer",
              "format": "int32",
              "description": "Size of target replicas set."
            },
            "MinReplicaSetSize": {
              "type": "integer",
              "format": "int32",
              "description": "Minimum size of replicas set."
            },
            "ServicePackageVersion": {
              "type": "string",
              "description": "Version of Service package."
            }
          },
          "required": [
            "ServiceTypeName",
            "ApplicationName",
            "ApplicationTypeName",
            "ServiceInstance",
            "IsStateful",
            "PartitionCount",
            "TargetReplicaSetSize",
            "MinReplicaSetSize",
            "ServicePackageVersion"
          ]
        }
      ],
      "x-ms-discriminator-value": "ServiceDeleted"
    },
    "ServiceHealthReportCreatedEvent": {
      "description": "Service Health Report Created event.",
      "allOf": [
        {
          "$ref": "#/definitions/ServiceEvent"
        },
        {
          "type": "object",
          "properties": {
            "InstanceId": {
              "type": "integer",
              "format": "int64",
              "description": "Id of Service instance."
            },
            "SourceId": {
              "type": "string",
              "description": "Id of report source."
            },
            "Property": {
              "type": "string",
              "description": "Describes the property."
            },
            "HealthState": {
              "type": "string",
              "description": "Describes the property health state."
            },
            "TimeToLiveMs": {
              "type": "integer",
              "format": "int64",
              "description": "Time to live in milli-seconds."
            },
            "SequenceNumber": {
              "type": "integer",
              "format": "int64",
              "description": "Sequence number of report."
            },
            "Description": {
              "type": "string",
              "description": "Description of report."
            },
            "RemoveWhenExpired": {
              "type": "boolean",
              "description": "Indicates the removal when it expires."
            },
            "SourceUtcTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Source time."
            }
          },
          "required": [
            "InstanceId",
            "SourceId",
            "Property",
            "HealthState",
            "TimeToLiveMs",
            "SequenceNumber",
            "Description",
            "RemoveWhenExpired",
            "SourceUtcTimestamp"
          ]
        }
      ],
      "x-ms-discriminator-value": "ServiceHealthReportCreated"
    },
    "ServiceHealthReportExpiredEvent": {
      "description": "Service Health Report Expired event.",
      "allOf": [
        {
          "$ref": "#/definitions/ServiceEvent"
        },
        {
          "type": "object",
          "properties": {
            "InstanceId": {
              "type": "integer",
              "format": "int64",
              "description": "Id of Service instance."
            },
            "SourceId": {
              "type": "string",
              "description": "Id of report source."
            },
            "Property": {
              "type": "string",
              "description": "Describes the property."
            },
            "HealthState": {
              "type": "string",
              "description": "Describes the property health state."
            },
            "TimeToLiveMs": {
              "type": "integer",
              "format": "int64",
              "description": "Time to live in milli-seconds."
            },
            "SequenceNumber": {
              "type": "integer",
              "format": "int64",
              "description": "Sequence number of report."
            },
            "Description": {
              "type": "string",
              "description": "Description of report."
            },
            "RemoveWhenExpired": {
              "type": "boolean",
              "description": "Indicates the removal when it expires."
            },
            "SourceUtcTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Source time."
            }
          },
          "required": [
            "InstanceId",
            "SourceId",
            "Property",
            "HealthState",
            "TimeToLiveMs",
            "SequenceNumber",
            "Description",
            "RemoveWhenExpired",
            "SourceUtcTimestamp"
          ]
        }
      ],
      "x-ms-discriminator-value": "ServiceHealthReportExpired"
    },
    "DeployedServiceHealthReportCreatedEvent": {
      "description": "Deployed Service Health Report Created event.",
      "allOf": [
        {
          "$ref": "#/definitions/ApplicationEvent"
        },
        {
          "type": "object",
          "properties": {
            "ServiceManifestName": {
              "type": "string",
              "description": "Service manifest name."
            },
            "ServicePackageInstanceId": {
              "type": "integer",
              "format": "int64",
              "description": "Id of Service package instance."
            },
            "ServicePackageActivationId": {
              "type": "string",
              "description": "Id of Service package activation."
            },
            "NodeName": {
              "$ref": "#/definitions/NodeName",
              "description": "The name of a Service Fabric node."
            },
            "SourceId": {
              "type": "string",
              "description": "Id of report source."
            },
            "Property": {
              "type": "string",
              "description": "Describes the property."
            },
            "HealthState": {
              "type": "string",
              "description": "Describes the property health state."
            },
            "TTLTimespan": {
              "type": "integer",
              "format": "int64",
              "description": "Time to live in milli-seconds."
            },
            "SequenceNumber": {
              "type": "integer",
              "format": "int64",
              "description": "Sequence number of report."
            },
            "Description": {
              "type": "string",
              "description": "Description of report."
            },
            "RemoveWhenExpired": {
              "type": "boolean",
              "description": "Indicates the removal when it expires."
            },
            "SourceUtcTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Source time."
            }
          },
          "required": [
            "ServiceManifestName",
            "ServicePackageInstanceId",
            "ServicePackageActivationId",
            "NodeName",
            "SourceId",
            "Property",
            "HealthState",
            "TTLTimespan",
            "SequenceNumber",
            "Description",
            "RemoveWhenExpired",
            "SourceUtcTimestamp"
          ]
        }
      ],
      "x-ms-discriminator-value": "DeployedServiceHealthReportCreated"
    },
    "DeployedServiceHealthReportExpiredEvent": {
      "description": "Deployed Service Health Report Expired event.",
      "allOf": [
        {
          "$ref": "#/definitions/ApplicationEvent"
        },
        {
          "type": "object",
          "properties": {
            "ServiceManifest": {
              "type": "string",
              "description": "Service manifest name."
            },
            "ServicePackageInstanceId": {
              "type": "integer",
              "format": "int64",
              "description": "Id of Service package instance."
            },
            "ServicePackageActivationId": {
              "type": "string",
              "description": "Id of Service package activation."
            },
            "NodeName": {
              "$ref": "#/definitions/NodeName",
              "description": "The name of a Service Fabric node."
            },
            "SourceId": {
              "type": "string",
              "description": "Id of report source."
            },
            "Property": {
              "type": "string",
              "description": "Describes the property."
            },
            "HealthState": {
              "type": "string",
              "description": "Describes the property health state."
            },
            "TTLTimespan": {
              "type": "integer",
              "format": "int64",
              "description": "Time to live in milli-seconds."
            },
            "SequenceNumber": {
              "type": "integer",
              "format": "int64",
              "description": "Sequence number of report."
            },
            "Description": {
              "type": "string",
              "description": "Description of report."
            },
            "RemoveWhenExpired": {
              "type": "boolean",
              "description": "Indicates the removal when it expires."
            },
            "SourceUtcTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Source time."
            }
          },
          "required": [
            "ServiceManifest",
            "ServicePackageInstanceId",
            "ServicePackageActivationId",
            "NodeName",
            "SourceId",
            "Property",
            "HealthState",
            "TTLTimespan",
            "SequenceNumber",
            "Description",
            "RemoveWhenExpired",
            "SourceUtcTimestamp"
          ]
        }
      ],
      "x-ms-discriminator-value": "DeployedServiceHealthReportExpired"
    },
    "StatefulReplicaHealthReportCreatedEvent": {
      "description": "Stateful Replica Health Report Created event.",
      "allOf": [
        {
          "$ref": "#/definitions/ReplicaEvent"
        },
        {
          "type": "object",
          "properties": {
            "ReplicaInstanceId": {
              "type": "integer",
              "format": "int64",
              "description": "Id of Replica instance."
            },
            "SourceId": {
              "type": "string",
              "description": "Id of report source."
            },
            "Property": {
              "type": "string",
              "description": "Describes the property."
            },
            "HealthState": {
              "type": "string",
              "description": "Describes the property health state."
            },
            "TimeToLiveMs": {
              "type": "integer",
              "format": "int64",
              "description": "Time to live in milli-seconds."
            },
            "SequenceNumber": {
              "type": "integer",
              "format": "int64",
              "description": "Sequence number of report."
            },
            "Description": {
              "type": "string",
              "description": "Description of report."
            },
            "RemoveWhenExpired": {
              "type": "boolean",
              "description": "Indicates the removal when it expires."
            },
            "SourceUtcTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Source time."
            }
          },
          "required": [
            "ReplicaInstanceId",
            "SourceId",
            "Property",
            "HealthState",
            "TimeToLiveMs",
            "SequenceNumber",
            "Description",
            "RemoveWhenExpired",
            "SourceUtcTimestamp"
          ]
        }
      ],
      "x-ms-discriminator-value": "StatefulReplicaHealthReportCreated"
    },
    "StatefulReplicaHealthReportExpiredEvent": {
      "description": "Stateful Replica Health Report Expired event.",
      "allOf": [
        {
          "$ref": "#/definitions/ReplicaEvent"
        },
        {
          "type": "object",
          "properties": {
            "ReplicaInstanceId": {
              "type": "integer",
              "format": "int64",
              "description": "Id of Replica instance."
            },
            "SourceId": {
              "type": "string",
              "description": "Id of report source."
            },
            "Property": {
              "type": "string",
              "description": "Describes the property."
            },
            "HealthState": {
              "type": "string",
              "description": "Describes the property health state."
            },
            "TimeToLiveMs": {
              "type": "integer",
              "format": "int64",
              "description": "Time to live in milli-seconds."
            },
            "SequenceNumber": {
              "type": "integer",
              "format": "int64",
              "description": "Sequence number of report."
            },
            "Description": {
              "type": "string",
              "description": "Description of report."
            },
            "RemoveWhenExpired": {
              "type": "boolean",
              "description": "Indicates the removal when it expires."
            },
            "SourceUtcTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Source time."
            }
          },
          "required": [
            "ReplicaInstanceId",
            "SourceId",
            "Property",
            "HealthState",
            "TimeToLiveMs",
            "SequenceNumber",
            "Description",
            "RemoveWhenExpired",
            "SourceUtcTimestamp"
          ]
        }
      ],
      "x-ms-discriminator-value": "StatefulReplicaHealthReportExpired"
    },
    "StatelessReplicaHealthReportCreatedEvent": {
      "description": "Stateless Replica Health Report Created event.",
      "allOf": [
        {
          "$ref": "#/definitions/ReplicaEvent"
        },
        {
          "type": "object",
          "properties": {
            "SourceId": {
              "type": "string",
              "description": "Id of report source."
            },
            "Property": {
              "type": "string",
              "description": "Describes the property."
            },
            "HealthState": {
              "type": "string",
              "description": "Describes the property health state."
            },
            "TimeToLiveMs": {
              "type": "integer",
              "format": "int64",
              "description": "Time to live in milli-seconds."
            },
            "SequenceNumber": {
              "type": "integer",
              "format": "int64",
              "description": "Sequence number of report."
            },
            "Description": {
              "type": "string",
              "description": "Description of report."
            },
            "RemoveWhenExpired": {
              "type": "boolean",
              "description": "Indicates the removal when it expires."
            },
            "SourceUtcTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Source time."
            }
          },
          "required": [
            "SourceId",
            "Property",
            "HealthState",
            "TimeToLiveMs",
            "SequenceNumber",
            "Description",
            "RemoveWhenExpired",
            "SourceUtcTimestamp"
          ]
        }
      ],
      "x-ms-discriminator-value": "StatelessReplicaHealthReportCreated"
    },
    "StatelessReplicaHealthReportExpiredEvent": {
      "description": "Stateless Replica Health Report Expired event.",
      "allOf": [
        {
          "$ref": "#/definitions/ReplicaEvent"
        },
        {
          "type": "object",
          "properties": {
            "SourceId": {
              "type": "string",
              "description": "Id of report source."
            },
            "Property": {
              "type": "string",
              "description": "Describes the property."
            },
            "HealthState": {
              "type": "string",
              "description": "Describes the property health state."
            },
            "TimeToLiveMs": {
              "type": "integer",
              "format": "int64",
              "description": "Time to live in milli-seconds."
            },
            "SequenceNumber": {
              "type": "integer",
              "format": "int64",
              "description": "Sequence number of report."
            },
            "Description": {
              "type": "string",
              "description": "Description of report."
            },
            "RemoveWhenExpired": {
              "type": "boolean",
              "description": "Indicates the removal when it expires."
            },
            "SourceUtcTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Source time."
            }
          },
          "required": [
            "SourceId",
            "Property",
            "HealthState",
            "TimeToLiveMs",
            "SequenceNumber",
            "Description",
            "RemoveWhenExpired",
            "SourceUtcTimestamp"
          ]
        }
      ],
      "x-ms-discriminator-value": "StatelessReplicaHealthReportExpired"
    },
    "ClusterHealthReportCreatedEvent": {
      "description": "Cluster Health Report Created event.",
      "allOf": [
        {
          "$ref": "#/definitions/ClusterEvent"
        },
        {
          "type": "object",
          "properties": {
            "SourceId": {
              "type": "string",
              "description": "Id of report source."
            },
            "Property": {
              "type": "string",
              "description": "Describes the property."
            },
            "HealthState": {
              "type": "string",
              "description": "Describes the property health state."
            },
            "TimeToLiveMs": {
              "type": "integer",
              "format": "int64",
              "description": "Time to live in milli-seconds."
            },
            "SequenceNumber": {
              "type": "integer",
              "format": "int64",
              "description": "Sequence number of report."
            },
            "Description": {
              "type": "string",
              "description": "Description of report."
            },
            "RemoveWhenExpired": {
              "type": "boolean",
              "description": "Indicates the removal when it expires."
            },
            "SourceUtcTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Source time."
            }
          },
          "required": [
            "SourceId",
            "Property",
            "HealthState",
            "TimeToLiveMs",
            "SequenceNumber",
            "Description",
            "RemoveWhenExpired",
            "SourceUtcTimestamp"
          ]
        }
      ],
      "x-ms-discriminator-value": "ClusterHealthReportCreated"
    },
    "ClusterHealthReportExpiredEvent": {
      "description": "Cluster Health Report Expired event.",
      "allOf": [
        {
          "$ref": "#/definitions/ClusterEvent"
        },
        {
          "type": "object",
          "properties": {
            "SourceId": {
              "type": "string",
              "description": "Id of report source."
            },
            "Property": {
              "type": "string",
              "description": "Describes the property."
            },
            "HealthState": {
              "type": "string",
              "description": "Describes the property health state."
            },
            "TimeToLiveMs": {
              "type": "integer",
              "format": "int64",
              "description": "Time to live in milli-seconds."
            },
            "SequenceNumber": {
              "type": "integer",
              "format": "int64",
              "description": "Sequence number of report."
            },
            "Description": {
              "type": "string",
              "description": "Description of report."
            },
            "RemoveWhenExpired": {
              "type": "boolean",
              "description": "Indicates the removal when it expires."
            },
            "SourceUtcTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Source time."
            }
          },
          "required": [
            "SourceId",
            "Property",
            "HealthState",
            "TimeToLiveMs",
            "SequenceNumber",
            "Description",
            "RemoveWhenExpired",
            "SourceUtcTimestamp"
          ]
        }
      ],
      "x-ms-discriminator-value": "ClusterHealthReportExpired"
    },
    "ClusterUpgradeCompleteEvent": {
      "description": "Cluster Upgrade Complete event.",
      "allOf": [
        {
          "$ref": "#/definitions/ClusterEvent"
        },
        {
          "type": "object",
          "properties": {
            "TargetClusterVersion": {
              "type": "string",
              "description": "Target Cluster version."
            },
            "OverallUpgradeElapsedTimeInMs": {
              "type": "number",
              "format": "double",
              "description": "Overall duration of upgrade in milli-seconds."
            }
          },
          "required": [
            "TargetClusterVersion",
            "OverallUpgradeElapsedTimeInMs"
          ]
        }
      ],
      "x-ms-discriminator-value": "ClusterUpgradeComplete"
    },
    "ClusterUpgradeDomainCompleteEvent": {
      "description": "Cluster Upgrade Domain Complete event.",
      "allOf": [
        {
          "$ref": "#/definitions/ClusterEvent"
        },
        {
          "type": "object",
          "properties": {
            "TargetClusterVersion": {
              "type": "string",
              "description": "Target Cluster version."
            },
            "UpgradeState": {
              "type": "string",
              "description": "State of upgrade."
            },
            "UpgradeDomains": {
              "type": "string",
              "description": "Upgrade domains."
            },
            "UpgradeDomainElapsedTimeInMs": {
              "type": "number",
              "format": "double",
              "description": "Duration of domain upgrade in milli-seconds."
            }
          },
          "required": [
            "TargetClusterVersion",
            "UpgradeState",
            "UpgradeDomains",
            "UpgradeDomainElapsedTimeInMs"
          ]
        }
      ],
      "x-ms-discriminator-value": "ClusterUpgradeDomainComplete"
    },
    "ClusterUpgradeRollbackCompleteEvent": {
      "description": "Cluster Upgrade Rollback Complete event.",
      "allOf": [
        {
          "$ref": "#/definitions/ClusterEvent"
        },
        {
          "type": "object",
          "properties": {
            "TargetClusterVersion": {
              "type": "string",
              "description": "Target Cluster version."
            },
            "FailureReason": {
              "type": "string",
              "description": "Describes failure."
            },
            "OverallUpgradeElapsedTimeInMs": {
              "type": "number",
              "format": "double",
              "description": "Overall duration of upgrade in milli-seconds."
            }
          },
          "required": [
            "TargetClusterVersion",
            "FailureReason",
            "OverallUpgradeElapsedTimeInMs"
          ]
        }
      ],
      "x-ms-discriminator-value": "ClusterUpgradeRollbackComplete"
    },
    "ClusterUpgradeRollbackStartEvent": {
      "description": "Cluster Upgrade Rollback Start event.",
      "allOf": [
        {
          "$ref": "#/definitions/ClusterEvent"
        },
        {
          "type": "object",
          "properties": {
            "TargetClusterVersion": {
              "type": "string",
              "description": "Target Cluster version."
            },
            "FailureReason": {
              "type": "string",
              "description": "Describes failure."
            },
            "OverallUpgradeElapsedTimeInMs": {
              "type": "number",
              "format": "double",
              "description": "Overall duration of upgrade in milli-seconds."
            }
          },
          "required": [
            "TargetClusterVersion",
            "FailureReason",
            "OverallUpgradeElapsedTimeInMs"
          ]
        }
      ],
      "x-ms-discriminator-value": "ClusterUpgradeRollbackStart"
    },
    "ClusterUpgradeStartEvent": {
      "description": "Cluster Upgrade Start event.",
      "allOf": [
        {
          "$ref": "#/definitions/ClusterEvent"
        },
        {
          "type": "object",
          "properties": {
            "CurrentClusterVersion": {
              "type": "string",
              "description": "Current Cluster version."
            },
            "TargetClusterVersion": {
              "type": "string",
              "description": "Target Cluster version."
            },
            "UpgradeType": {
              "type": "string",
              "description": "Type of upgrade."
            },
            "RollingUpgradeMode": {
              "type": "string",
              "description": "Mode of upgrade."
            },
            "FailureAction": {
              "type": "string",
              "description": "Action if failed."
            }
          },
          "required": [
            "CurrentClusterVersion",
            "TargetClusterVersion",
            "UpgradeType",
            "RollingUpgradeMode",
            "FailureAction"
          ]
        }
      ],
      "x-ms-discriminator-value": "ClusterUpgradeStart"
    },
    "ChaosStoppedEvent": {
      "description": "Chaos Stopped event.",
      "allOf": [
        {
          "$ref": "#/definitions/ClusterEvent"
        },
        {
          "type": "object",
          "properties": {
            "Reason": {
              "type": "string",
              "description": "Describes reason."
            }
          },
          "required": [
            "Reason"
          ]
        }
      ],
      "x-ms-discriminator-value": "ChaosStopped"
    },
    "ChaosStartedEvent": {
      "description": "Chaos Started event.",
      "allOf": [
        {
          "$ref": "#/definitions/ClusterEvent"
        },
        {
          "type": "object",
          "properties": {
            "MaxConcurrentFaults": {
              "type": "integer",
              "format": "int64",
              "description": "Maximum number of concurrent faults."
            },
            "TimeToRunInSeconds": {
              "type": "number",
              "format": "double",
              "description": "Time to run in seconds."
            },
            "MaxClusterStabilizationTimeoutInSeconds": {
              "type": "number",
              "format": "double",
              "description": "Maximum timeout for cluster stabilization in seconds."
            },
            "WaitTimeBetweenIterationsInSeconds": {
              "type": "number",
              "format": "double",
              "description": "Wait time between iterations in seconds."
            },
            "WaitTimeBetweenFautlsInSeconds": {
              "type": "number",
              "format": "double",
              "description": "Wait time between faults in seconds."
            },
            "MoveReplicaFaultEnabled": {
              "type": "boolean",
              "description": "Indicates MoveReplica fault is enabled."
            },
            "IncludedNodeTypeList": {
              "type": "string",
              "description": "List of included Node types."
            },
            "IncludedApplicationList": {
              "type": "string",
              "description": "List of included Applications."
            },
            "ClusterHealthPolicy": {
              "type": "string",
              "description": "Health policy."
            },
            "ChaosContext": {
              "type": "string",
              "description": "Chaos Context."
            }
          },
          "required": [
            "MaxConcurrentFaults",
            "TimeToRunInSeconds",
            "MaxClusterStabilizationTimeoutInSeconds",
            "WaitTimeBetweenIterationsInSeconds",
            "WaitTimeBetweenFautlsInSeconds",
            "MoveReplicaFaultEnabled",
            "IncludedNodeTypeList",
            "IncludedApplicationList",
            "ClusterHealthPolicy",
            "ChaosContext"
          ]
        }
      ],
      "x-ms-discriminator-value": "ChaosStarted"
    },
    "ChaosRestartNodeFaultCompletedEvent": {
      "description": "Chaos Restart Node Fault Completed event.",
      "allOf": [
        {
          "$ref": "#/definitions/NodeEvent"
        },
        {
          "type": "object",
          "properties": {
            "NodeInstanceId": {
              "type": "integer",
              "format": "int64",
              "description": "Id of Node instance."
            },
            "FaultGroupId": {
              "type": "string",
              "format": "uuid",
              "description": "Id of fault group."
            },
            "FaultId": {
              "type": "string",
              "format": "uuid",
              "description": "Id of fault."
            }
          },
          "required": [
            "NodeInstanceId",
            "FaultGroupId",
            "FaultId"
          ]
        }
      ],
      "x-ms-discriminator-value": "ChaosRestartNodeFaultCompleted"
    },
    "ChaosRestartCodePackageFaultScheduledEvent": {
      "description": "Chaos Restart Code Package Fault Scheduled event.",
      "allOf": [
        {
          "$ref": "#/definitions/ApplicationEvent"
        },
        {
          "type": "object",
          "properties": {
            "FaultGroupId": {
              "type": "string",
              "format": "uuid",
              "description": "Id of fault group."
            },
            "FaultId": {
              "type": "string",
              "format": "uuid",
              "description": "Id of fault."
            },
            "NodeName": {
              "$ref": "#/definitions/NodeName",
              "description": "The name of a Service Fabric node."
            },
            "ServiceManifestName": {
              "type": "string",
              "description": "Service manifest name."
            },
            "CodePackageName": {
              "type": "string",
              "description": "Code package name."
            },
            "ServicePackageActivationId": {
              "type": "string",
              "description": "Id of Service package activation."
            }
          },
          "required": [
            "FaultGroupId",
            "FaultId",
            "NodeName",
            "ServiceManifestName",
            "CodePackageName",
            "ServicePackageActivationId"
          ]
        }
      ],
      "x-ms-discriminator-value": "ChaosRestartCodePackageFaultScheduled"
    },
    "ChaosRestartCodePackageFaultCompletedEvent": {
      "description": "Chaos Restart Code Package Fault Completed event.",
      "allOf": [
        {
          "$ref": "#/definitions/ApplicationEvent"
        },
        {
          "type": "object",
          "properties": {
            "FaultGroupId": {
              "type": "string",
              "format": "uuid",
              "description": "Id of fault group."
            },
            "FaultId": {
              "type": "string",
              "format": "uuid",
              "description": "Id of fault."
            },
            "NodeName": {
              "$ref": "#/definitions/NodeName",
              "description": "The name of a Service Fabric node."
            },
            "ServiceManifestName": {
              "type": "string",
              "description": "Service manifest name."
            },
            "CodePackageName": {
              "type": "string",
              "description": "Code package name."
            },
            "ServicePackageActivationId": {
              "type": "string",
              "description": "Id of Service package activation."
            }
          },
          "required": [
            "FaultGroupId",
            "FaultId",
            "NodeName",
            "ServiceManifestName",
            "CodePackageName",
            "ServicePackageActivationId"
          ]
        }
      ],
      "x-ms-discriminator-value": "ChaosRestartCodePackageFaultCompleted"
    },
    "ChaosRemoveReplicaFaultScheduledEvent": {
      "description": "Chaos Remove Replica Fault Scheduled event.",
      "allOf": [
        {
          "$ref": "#/definitions/ReplicaEvent"
        },
        {
          "type": "object",
          "properties": {
            "FaultGroupId": {
              "type": "string",
              "format": "uuid",
              "description": "Id of fault group."
            },
            "FaultId": {
              "type": "string",
              "format": "uuid",
              "description": "Id of fault."
            },
            "ServiceUri": {
              "type": "string",
              "description": "Service name."
            }
          },
          "required": [
            "FaultGroupId",
            "FaultId",
            "ServiceUri"
          ]
        }
      ],
      "x-ms-discriminator-value": "ChaosRemoveReplicaFaultScheduled"
    },
    "ChaosRemoveReplicaFaultCompletedEvent": {
      "description": "Chaos Remove Replica Fault Completed event.",
      "allOf": [
        {
          "$ref": "#/definitions/ReplicaEvent"
        },
        {
          "type": "object",
          "properties": {
            "FaultGroupId": {
              "type": "string",
              "format": "uuid",
              "description": "Id of fault group."
            },
            "FaultId": {
              "type": "string",
              "format": "uuid",
              "description": "Id of fault."
            },
            "ServiceUri": {
              "type": "string",
              "description": "Service name."
            }
          },
          "required": [
            "FaultGroupId",
            "FaultId",
            "ServiceUri"
          ]
        }
      ],
      "x-ms-discriminator-value": "ChaosRemoveReplicaFaultCompleted"
    },
    "ChaosMoveSecondaryFaultScheduledEvent": {
      "description": "Chaos Move Secondary Fault Scheduled event.",
      "allOf": [
        {
          "$ref": "#/definitions/PartitionEvent"
        },
        {
          "type": "object",
          "properties": {
            "FaultGroupId": {
              "type": "string",
              "format": "uuid",
              "description": "Id of fault group."
            },
            "FaultId": {
              "type": "string",
              "format": "uuid",
              "description": "Id of fault."
            },
            "ServiceName": {
              "type": "string",
              "description": "Service name."
            },
            "SourceNode": {
              "$ref": "#/definitions/NodeName",
              "description": "The name of a Service Fabric node."
            },
            "DestinationNode": {
              "$ref": "#/definitions/NodeName",
              "description": "The name of a Service Fabric node."
            },
            "ForcedMove": {
              "type": "boolean",
              "description": "Indicates a forced move."
            }
          },
          "required": [
            "FaultGroupId",
            "FaultId",
            "ServiceName",
            "SourceNode",
            "DestinationNode",
            "ForcedMove"
          ]
        }
      ],
      "x-ms-discriminator-value": "ChaosMoveSecondaryFaultScheduled"
    },
    "ChaosMovePrimaryFaultScheduledEvent": {
      "description": "Chaos Move Primary Fault Scheduled event.",
      "allOf": [
        {
          "$ref": "#/definitions/PartitionEvent"
        },
        {
          "type": "object",
          "properties": {
            "FaultGroupId": {
              "type": "string",
              "format": "uuid",
              "description": "Id of fault group."
            },
            "FaultId": {
              "type": "string",
              "format": "uuid",
              "description": "Id of fault."
            },
            "ServiceName": {
              "type": "string",
              "description": "Service name."
            },
            "NodeTo": {
              "$ref": "#/definitions/NodeName",
              "description": "The name of a Service Fabric node."
            },
            "ForcedMove": {
              "type": "boolean",
              "description": "Indicates a forced move."
            }
          },
          "required": [
            "FaultGroupId",
            "FaultId",
            "ServiceName",
            "NodeTo",
            "ForcedMove"
          ]
        }
      ],
      "x-ms-discriminator-value": "ChaosMovePrimaryFaultScheduled"
    },
    "ChaosRestartReplicaFaultScheduledEvent": {
      "description": "Chaos Restart Replica Fault Scheduled event.",
      "allOf": [
        {
          "$ref": "#/definitions/ReplicaEvent"
        },
        {
          "type": "object",
          "properties": {
            "FaultGroupId": {
              "type": "string",
              "format": "uuid",
              "description": "Id of fault group."
            },
            "FaultId": {
              "type": "string",
              "format": "uuid",
              "description": "Id of fault."
            },
            "ServiceUri": {
              "type": "string",
              "description": "Service name."
            }
          },
          "required": [
            "FaultGroupId",
            "FaultId",
            "ServiceUri"
          ]
        }
      ],
      "x-ms-discriminator-value": "ChaosRestartReplicaFaultScheduled"
    },
    "ChaosRestartNodeFaultScheduledEvent": {
      "description": "Chaos Restart Node Fault Scheduled event.",
      "allOf": [
        {
          "$ref": "#/definitions/NodeEvent"
        },
        {
          "type": "object",
          "properties": {
            "NodeInstanceId": {
              "type": "integer",
              "format": "int64",
              "description": "Id of Node instance."
            },
            "FaultGroupId": {
              "type": "string",
              "format": "uuid",
              "description": "Id of fault group."
            },
            "FaultId": {
              "type": "string",
              "format": "uuid",
              "description": "Id of fault."
            }
          },
          "required": [
            "NodeInstanceId",
            "FaultGroupId",
            "FaultId"
          ]
        }
      ],
      "x-ms-discriminator-value": "ChaosRestartNodeFaultScheduled"
    },
    "ApplicationResourceDescription": {
      "type": "object",
      "description": "Describes a service fabric application resource.",
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/ApplicationProperties",
          "description": "This type describes properties of an application resource."
        },
        "name": {
          "$ref": "#/definitions/ApplicationResourceName",
          "description": "Application resource name."
        }
      },
      "required": [
        "name",
        "properties"
      ]
    },
    "ApplicationResourceName": {
      "type": "string",
      "description": "Application resource name."
    },
    "PagedServiceResourceDescriptionList": {
      "type": "object",
      "description": "The list of service resources in the cluster. The list is paged when all of the results cannot fit in a single message. The next set of results can be obtained by executing the same query with the continuation token provided in this list.",
      "properties": {
        "ContinuationToken": {
          "$ref": "#/definitions/ContinuationToken",
          "description": "The continuation token parameter is used to obtain next set of results. The continuation token is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token is not included in the response."
        },
        "Items": {
          "type": "array",
          "description": "List of service resource description.",
          "items": {
            "$ref": "#/definitions/ServiceResourceDescription"
          }
        }
      },
      "x-sf-clientlib": {
        "TypeName": "PagedData<ServiceResourceDescription>",
        "SkipGeneration": "true"
      }
    },
    "PagedServiceResourceReplicaDescriptionList": {
      "type": "object",
      "description": "The list of service resources in the cluster. The list is paged when all of the results cannot fit in a single message. The next set of results can be obtained by executing the same query with the continuation token provided in this list.",
      "properties": {
        "ContinuationToken": {
          "$ref": "#/definitions/ContinuationToken",
          "description": "The continuation token parameter is used to obtain next set of results. The continuation token is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token is not included in the response."
        },
        "Items": {
          "type": "array",
          "description": "List of service resource description.",
          "items": {
            "$ref": "#/definitions/ServiceResourceReplicaDescription"
          }
        }
      },
      "x-sf-clientlib": {
        "TypeName": "PagedData<ServiceResourceReplicaDescription>",
        "SkipGeneration": "true"
      }
    },
    "ServiceResourceDescription": {
      "type": "object",
      "description": "Describes a service fabric service resource.",
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/ServiceResourceProperties",
          "description": "This type describes properties of a service resource."
        },
        "name": {
          "$ref": "#/definitions/ServiceResourceName",
          "description": "Service resource name."
        }
      },
      "required": [
        "name",
        "properties"
      ]
    },
    "ServiceResourceName": {
      "type": "string",
      "description": "Service resource name."
    },
    "ServiceResourceReplicaDescription": {
      "type": "object",
      "description": "Describes a replica of a service resource.",
      "allOf": [
        {
          "$ref": "#/definitions/ServiceReplicaProperties"
        },
        {
          "type": "object",
          "properties": {
            "replicaName": {
              "type": "string",
              "description": "Name of the replica."
            }
          },
          "required": [
            "replicaName"
          ]
        }
      ]
    },
    "VolumeResourceName": {
      "type": "string",
      "description": "Volume resource name."
    },
    "VolumeResourceDescription": {
      "type": "object",
      "description": "Describes a service fabric volume resource.",
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/VolumeProperties",
          "description": "This type describes properties of a volume resource."
        },
        "name": {
          "$ref": "#/definitions/VolumeResourceName",
          "description": "Volume resource name."
        }
      },
      "required": [
        "name",
        "properties"
      ]
    },
    "ApplicationProperties": {
      "description": "This type describes properties of an application resource.",
      "type": "object",
      "properties": {
        "description": {
          "description": "User readable description of the application.",
          "type": "string"
        },
        "debugParams": {
          "description": "Internal use.",
          "type": "string"
        },
        "services": {
          "type": "array",
          "description": "describes the services in the application.",
          "items": {
            "$ref": "#/definitions/ServiceResourceDescription"
          }
        },
        "healthState": {
          "readOnly": true,
          "$ref": "#/definitions/HealthState",
          "description": "Describes the health state of an application resource."
        },
        "unhealthyEvaluation": {
          "readOnly": true,
          "type": "string",
          "description": "When the application's health state is not 'Ok', this additional details from service fabric Health Manager for the user to know why the application is marked unhealthy."
        },
        "status": {
          "readOnly": true,
          "type": "string",
          "description": "Status of the application resource.",
          "enum": [
            "Invalid",
            "Ready",
            "Upgrading",
            "Creating",
            "Deleting",
            "Failed"
          ],
          "x-ms-enum": {
            "name": "ApplicationResourceStatus",
            "modelAsString": true
          }
        },
        "statusDetails": {
          "readOnly": true,
          "type": "string",
          "description": "Gives additional information about the current status of the application deployment."
        },
        "serviceNames": {
          "readOnly": true,
          "description": "Names of the services in the application.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "diagnostics": {
          "$ref": "#/definitions/DiagnosticsDescription",
          "description": "Describes the diagnostics definition and usage for an application resource."
        }
      }
    },
    "ContainerCodePackageProperties": {
      "description": "Describes a container and its runtime properties.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the code package.",
          "type": "string"
        },
        "image": {
          "description": "The Container image to use.",
          "type": "string"
        },
        "imageRegistryCredential": {
          "$ref": "#/definitions/ImageRegistryCredential",
          "description": "Image registry credential."
        },
        "entrypoint": {
          "description": "Override for the default entry point in the container.",
          "type": "string"
        },
        "commands": {
          "description": "Command array to execute within the container in exec form.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "environmentVariables": {
          "description": "The environment variables to set in this container",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EnvironmentVariable"
          }
        },
        "settings": {
          "description": "The settings to set in this container. The setting file path can be fetched from environment variable \"Fabric_SettingPath\". The path for Windows container is \"C:\\\\secrets\". The path for Linux container is \"/var/secrets\".",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Setting"
          }
        },
        "labels": {
          "description": "The labels to set in this container.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContainerLabel"
          }
        },
        "endpoints": {
          "description": "The endpoints exposed by this container.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EndpointProperties"
          }
        },
        "resources": {
          "$ref": "#/definitions/ResourceRequirements",
          "description": "This type describes the resource requirements for a container or a service."
        },
        "volumeRefs": {
          "description": "The volumes to be attached to the container.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContainerVolume"
          }
        },
        "instanceView": {
          "readOnly": true,
          "$ref": "#/definitions/ContainerInstanceView",
          "description": "Runtime information of a container instance."
        },
        "diagnostics": {
          "$ref": "#/definitions/DiagnosticsRef",
          "description": "Reference to sinks in DiagnosticsDescription."
        }
      },
      "required": [
        "name",
        "image",
        "resources"
      ]
    },
    "ContainerEvent": {
      "description": "A container event.",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the container event."
        },
        "count": {
          "type": "integer",
          "description": "The count of the event."
        },
        "firstTimestamp": {
          "type": "string",
          "description": "Date/time of the first event."
        },
        "lastTimestamp": {
          "type": "string",
          "description": "Date/time of the last event."
        },
        "message": {
          "type": "string",
          "description": "The event message"
        },
        "type": {
          "type": "string",
          "description": "The event type."
        }
      }
    },
    "ContainerInstanceView": {
      "description": "Runtime information of a container instance.",
      "type": "object",
      "properties": {
        "restartCount": {
          "type": "integer",
          "description": "The number of times the container has been restarted."
        },
        "currentState": {
          "$ref": "#/definitions/ContainerState",
          "description": "Current container instance state."
        },
        "previousState": {
          "$ref": "#/definitions/ContainerState",
          "description": "Previous container instance state."
        },
        "events": {
          "description": "The events of this container instance.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContainerEvent"
          }
        }
      }
    },
    "ContainerLabel": {
      "description": "Describes a container label.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the container label.",
          "type": "string"
        },
        "value": {
          "description": "The value of the container label.",
          "type": "string"
        }
      },
      "required": [
        "name",
        "value"
      ]
    },
    "ContainerState": {
      "description": "The container state.",
      "type": "object",
      "properties": {
        "state": {
          "type": "string",
          "description": "The state of this container"
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "description": "Date/time when the container state started."
        },
        "exitCode": {
          "type": "string",
          "description": "The container exit code."
        },
        "finishTime": {
          "type": "string",
          "format": "date-time",
          "description": "Date/time when the container state finished."
        },
        "detailStatus": {
          "description": "Human-readable status of this state.",
          "type": "string"
        }
      }
    },
    "ContainerVolume": {
      "description": "Describes how a volume is attached to a container.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the volume.",
          "type": "string"
        },
        "readOnly": {
          "description": "The flag indicating whether the volume is read only. Default is 'false'.",
          "type": "boolean"
        },
        "destinationPath": {
          "description": "The path within the container at which the volume should be mounted. Only valid path characters are allowed.",
          "type": "string"
        }
      },
      "required": [
        "name",
        "destinationPath"
      ]
    },
    "DiagnosticsDescription": {
      "description": "Describes the diagnostics options available",
      "type": "object",
      "properties": {
        "sinks": {
          "description": "List of supported sinks that can be referenced.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DiagnosticsSinkProperties"
          }
        },
        "enabled": {
          "description": "Status of whether or not sinks are enabled.",
          "type": "boolean"
        },
        "defaultSinkRefs": {
          "description": "The sinks to be used if diagnostics is enabled. Sink choices can be overridden at the service and code package level.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "DiagnosticsRef": {
      "description": "Reference to sinks in DiagnosticsDescription.",
      "type": "object",
      "properties": {
        "enabled": {
          "description": "Status of whether or not sinks are enabled.",
          "type": "boolean"
        },
        "sinkRefs": {
          "description": "List of sinks to be used if enabled. References the list of sinks in DiagnosticsDescription.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "DiagnosticsSinkKind": {
      "type": "string",
      "description": "The kind of DiagnosticsSink.",
      "enum": [
        "Invalid",
        "AzureInternalMonitoringPipeline"
      ],
      "x-ms-enum": {
        "name": "DiagnosticsSinkKind",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Indicates an invalid sink kind. All Service Fabric enumerations have the invalid type."
          },
          {
            "value": "AzureInternalMonitoringPipeline",
            "description": "Diagnostics settings for Geneva."
          }
        ]
      }
    },
    "DiagnosticsSinkProperties": {
      "description": "Properties of a DiagnosticsSink.",
      "type": "object",
      "discriminator": "kind",
      "properties": {
        "kind": {
          "$ref": "#/definitions/DiagnosticsSinkKind",
          "description": "The kind of DiagnosticsSink."
        },
        "name": {
          "description": "Name of the sink. This value is referenced by DiagnosticsReferenceDescription",
          "type": "string"
        },
        "description": {
          "description": "A description of the sink.",
          "type": "string"
        }
      },
      "required": [
        "kind"
      ]
    },
    "EndpointProperties": {
      "description": "Describes a container endpoint.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the endpoint.",
          "type": "string"
        },
        "port": {
          "description": "Port used by the container.",
          "type": "integer"
        }
      },
      "required": [
        "name"
      ]
    },
    "EnvironmentVariable": {
      "description": "Describes an environment variable for the container.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the environment variable.",
          "type": "string"
        },
        "value": {
          "description": "The value of the environment variable.",
          "type": "string"
        }
      }
    },
    "ImageRegistryCredential": {
      "description": "Image registry credential.",
      "type": "object",
      "properties": {
        "server": {
          "type": "string",
          "description": "Docker image registry server, without protocol such as `http` and `https`."
        },
        "username": {
          "type": "string",
          "description": "The username for the private registry."
        },
        "password": {
          "type": "string",
          "description": "The password for the private registry."
        }
      },
      "required": [
        "server",
        "username"
      ]
    },
    "NetworkRef": {
      "description": "Describes a network reference in a service.",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the network."
        }
      }
    },
    "ResourceLimits": {
      "description": "This type describes the resource limits for a given container. It describes the most amount of resources a container is allowed to use before being restarted.",
      "type": "object",
      "properties": {
        "memoryInGB": {
          "description": "The memory limit in GB.",
          "type": "number",
          "format": "double"
        },
        "cpu": {
          "description": "CPU limits in cores. At present, only full cores are supported.",
          "type": "number",
          "format": "double"
        }
      }
    },
    "ResourceRequests": {
      "description": "This type describes the requested resources for a given container. It describes the least amount of resources required for the container. A container can consume more than requested resources up to the specified limits before being restarted. Currently, the requested resources are treated as limits.",
      "type": "object",
      "properties": {
        "memoryInGB": {
          "description": "The memory request in GB for this container.",
          "type": "number",
          "format": "double"
        },
        "cpu": {
          "description": "Requested number of CPU cores. At present, only full cores are supported.",
          "type": "number",
          "format": "double"
        }
      },
      "required": [
        "memoryInGB",
        "cpu"
      ]
    },
    "ResourceRequirements": {
      "description": "This type describes the resource requirements for a container or a service.",
      "type": "object",
      "properties": {
        "requests": {
          "$ref": "#/definitions/ResourceRequests",
          "description": "Describes the requested resources for a given container."
        },
        "limits": {
          "$ref": "#/definitions/ResourceLimits",
          "description": "Describes the maximum limits on the resources for a given container."
        }
      },
      "required": [
        "requests"
      ]
    },
    "ServiceResourceProperties": {
      "description": "This type describes properties of a service resource.",
      "allOf": [
        {
          "$ref": "#/definitions/ServiceReplicaProperties"
        },
        {
          "type": "object",
          "properties": {
            "description": {
              "description": "User readable description of the service.",
              "type": "string"
            },
            "replicaCount": {
              "type": "integer",
              "description": "The number of replicas of the service to create. Defaults to 1 if not specified."
            },
            "healthState": {
              "$ref": "#/definitions/HealthState",
              "description": "The health state of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica etc."
            },
            "status": {
              "readOnly": true,
              "type": "string",
              "description": "Represents the status of the service.",
              "enum": [
                "Unknown",
                "Active",
                "Upgrading",
                "Deleting",
                "Creating",
                "Failed"
              ],
              "x-ms-enum": {
                "name": "ServiceResourceStatus",
                "modelAsString": true
              }
            }
          }
        }
      ]
    },
    "ServiceReplicaProperties": {
      "description": "Describes the properties of a service replica.",
      "type": "object",
      "properties": {
        "osType": {
          "type": "string",
          "description": "The Operating system type required by the code in service.",
          "enum": [
            "Linux",
            "Windows"
          ],
          "x-ms-enum": {
            "name": "OperatingSystemTypes",
            "modelAsString": true
          }
        },
        "codePackages": {
          "description": "Describes the set of code packages that forms the service. A code package describes the container and the properties for running it. All the code packages are started together on the same host and share the same context (network, process etc.).",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContainerCodePackageProperties"
          }
        },
        "networkRefs": {
          "type": "array",
          "description": "The names of the private networks that this service needs to be part of.",
          "items": {
            "$ref": "#/definitions/NetworkRef"
          }
        },
        "diagnostics": {
          "$ref": "#/definitions/DiagnosticsRef",
          "description": "Reference to sinks in DiagnosticsDescription."
        }
      },
      "required": [
        "osType",
        "codePackages"
      ]
    },
    "Setting": {
      "description": "Describes a setting for the container.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the setting.",
          "type": "string"
        },
        "value": {
          "description": "The value of the setting.",
          "type": "string"
        }
      }
    },
    "VolumeProperties": {
      "description": "This type describes properties of a volume resource.",
      "type": "object",
      "properties": {
        "description": {
          "description": "User readable description of the volume.",
          "type": "string"
        },
        "provider": {
          "description": "Provider of the volume.",
          "type": "string",
          "enum": [
            "SFAzureFile"
          ],
          "x-ms-enum": {
            "name": "VolumeProvider",
            "modelAsString": true
          }
        },
        "azureFileParameters": {
          "$ref": "#/definitions/VolumeProviderParametersAzureFile",
          "description": "This type describes a volume provided by an Azure Files file share."
        }
      },
      "required": [
        "provider"
      ]
    },
    "VolumeProviderParametersAzureFile": {
      "description": "This type describes a volume provided by an Azure Files file share.",
      "type": "object",
      "properties": {
        "accountName": {
          "description": "Name of the Azure storage account for the File Share.",
          "type": "string"
        },
        "accountKey": {
          "description": "Access key of the Azure storage account for the File Share.",
          "type": "string"
        },
        "shareName": {
          "description": "Name of the Azure Files file share that provides storage for the volume.",
          "type": "string"
        }
      },
      "required": [
        "accountName",
        "shareName"
      ]
    }
  },
  "parameters": {
    "ApiVersion_6-0-Preview_RequiredQueryParam": {
      "name": "api-version",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "string",
      "enum": [
        "6.0-preview"
      ],
      "required": true,
      "default": "6.0-preview",
      "description": "The version of the API. This parameter is required and its value must be '\"6.0-preview'.",
      "x-ms-enum": {
        "name": "ApiVersion_6-0-Preview_RequiredQueryParam",
        "modelAsString": true,
        "values": [
          {
            "value": "6.0-preview",
            "description": "The version number for the preview functionality of 6.0 runtime."
          }
        ]
      }
    },
    "ApiVersion_6-0_RequiredQueryParam": {
      "name": "api-version",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "string",
      "enum": [
        "6.0"
      ],
      "required": true,
      "default": "6.0",
      "description": "The version of the API. This parameter is required and its value must be '6.0'.\n\nService Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.\n\nAdditionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.",
      "x-ms-enum": {
        "name": "ApiVersion_6-0_RequiredQueryParam",
        "modelAsString": true,
        "values": [
          {
            "value": "6.0",
            "description": "The 6.0 version of the API."
          }
        ]
      }
    },
    "ApiVersion_6-1_RequiredQueryParam": {
      "name": "api-version",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "string",
      "enum": [
        "6.1"
      ],
      "required": true,
      "default": "6.1",
      "description": "The version of the API. This parameter is required and its value must be '6.1'.\n\nService Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.\n\nAdditionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.",
      "x-ms-enum": {
        "name": "ApiVersion_6-1_RequiredQueryParam",
        "modelAsString": true,
        "values": [
          {
            "value": "6.1",
            "description": "The 6.1 version of the API."
          }
        ]
      }
    },
    "ApiVersion_6-2_RequiredQueryParam": {
      "name": "api-version",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "string",
      "enum": [
        "6.2"
      ],
      "required": true,
      "default": "6.2",
      "description": "The version of the API. This parameter is required and its value must be '6.2'.\n\nService Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.\n\nAdditionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.",
      "x-ms-enum": {
        "name": "ApiVersion_6-2_RequiredQueryParam",
        "modelAsString": true,
        "values": [
          {
            "value": "6.2",
            "description": "The 6.2 version of the API."
          }
        ]
      }
    },
    "ApiVersion_6-2-Preview_RequiredQueryParam": {
      "name": "api-version",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "string",
      "enum": [
        "6.2-preview"
      ],
      "required": true,
      "default": "6.2-preview",
      "description": "The version of the API. This parameter is required and its value must be '6.2-preview'.",
      "x-ms-enum": {
        "name": "ApiVersion_6-2-Preview_RequiredQueryParam",
        "modelAsString": true,
        "values": [
          {
            "value": "6.2-preview",
            "description": "The version number for the preview functionality of 6.2 runtime"
          }
        ]
      }
    },
    "ApiVersion_6-3_RequiredQueryParam": {
      "name": "api-version",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "string",
      "enum": [
        "6.3"
      ],
      "required": true,
      "default": "6.3",
      "description": "The version of the API. This parameter is required and its value must be '6.3'.\n\nService Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.\n\nAdditionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.",
      "x-ms-enum": {
        "name": "ApiVersion_6-3_RequiredQueryParam",
        "modelAsString": true,
        "values": [
          {
            "value": "6.3",
            "description": "The 6.3 version of the API."
          }
        ]
      }
    },
    "ApiVersion_6-3-Preview_RequiredQueryParam": {
      "name": "api-version",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "string",
      "enum": [
        "6.3-preview"
      ],
      "required": true,
      "default": "6.3-preview",
      "description": "The version of the API. This parameter is required and its value must be '6.3-preview'.",
      "x-ms-enum": {
        "name": "ApiVersion_6-3-Preview_RequiredQueryParam",
        "modelAsString": true,
        "values": [
          {
            "value": "6.3-preview",
            "description": "The version number for the preview functionality of 6.3 runtime"
          }
        ]
      }
    },
    "ApplicationDefinitionKindFilterOptionalQueryParam": {
      "name": "ApplicationDefinitionKindFilter",
      "description": "Used to filter on ApplicationDefinitionKind, which is the mechanism used to define a Service Fabric application.\n- Default - Default value, which performs the same function as selecting \"All\". The value is 0.\n- All - Filter that matches input with any ApplicationDefinitionKind value. The value is 65535.\n- ServiceFabricApplicationDescription - Filter that matches input with ApplicationDefinitionKind value ServiceFabricApplicationDescription. The value is 1.\n- Compose - Filter that matches input with ApplicationDefinitionKind value Compose. The value is 2.",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "integer",
      "required": false,
      "default": 0
    },
    "ApplicationHealthPolicyOptionalBodyParam": {
      "name": "ApplicationHealthPolicy",
      "in": "body",
      "description": "Describes the health policies used to evaluate the health of an application or one of its children.\nIf not present, the health evaluation uses the health policy from application manifest or the default health policy.",
      "required": false,
      "x-ms-parameter-location": "method",
      "schema": {
        "$ref": "#/definitions/ApplicationHealthPolicy"
      }
    },
    "ApplicationIdRequiredPathParam": {
      "name": "applicationId",
      "in": "path",
      "x-ms-parameter-location": "method",
      "x-ms-skip-url-encoding": true,
      "type": "string",
      "required": true,
      "description": "The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.\nStarting from version 6.0, hierarchical names are delimited with the \"~\" character.\nFor example, if the application name is \"fabric:/myapp/app1\", the application identity would be \"myapp~app1\" in 6.0+ and \"myapp/app1\" in previous versions."
    },
    "ApplicationsHealthStateFilterOptionalQueryParam": {
      "name": "ApplicationsHealthStateFilter",
      "description": "Allows filtering of the application health state objects returned in the result of cluster health\nquery based on their health state.\nThe possible values for this parameter include integer value obtained from members or bitwise operations\non members of HealthStateFilter enumeration. Only applications that match the filter are returned.\nAll applications are used to evaluate the aggregated health state. If not specified, all entries are returned.\nThe state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.\nFor example, if the provided value is 6 then health state of applications with HealthState value of OK (2) and Warning (4) are returned.\n\n- Default - Default value. Matches any HealthState. The value is zero.\n- None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.\n- Ok - Filter that matches input with HealthState value Ok. The value is 2.\n- Warning - Filter that matches input with HealthState value Warning. The value is 4.\n- Error - Filter that matches input with HealthState value Error. The value is 8.\n- All - Filter that matches input with any HealthState value. The value is 65535.",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "integer",
      "required": false,
      "default": 0
    },
    "ApplicationTypeDefinitionKindFilterOptionalQueryParam": {
      "name": "ApplicationTypeDefinitionKindFilter",
      "description": "Used to filter on ApplicationTypeDefinitionKind which is the mechanism used to define a Service Fabric application type.\n- Default - Default value, which performs the same function as selecting \"All\". The value is 0.\n- All - Filter that matches input with any ApplicationTypeDefinitionKind value. The value is 65535.\n- ServiceFabricApplicationPackage - Filter that matches input with ApplicationTypeDefinitionKind value ServiceFabricApplicationPackage. The value is 1.\n- Compose - Filter that matches input with ApplicationTypeDefinitionKind value Compose. The value is 2.",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "integer",
      "required": false,
      "default": 0
    },
    "ApplicationTypeNameOptionalQueryParam": {
      "name": "ApplicationTypeName",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "string",
      "required": false,
      "description": "The application type name used to filter the applications to query for. This value should not contain the application type version."
    },
    "ApplicationTypeNameRequiredPathParam": {
      "name": "applicationTypeName",
      "in": "path",
      "x-ms-parameter-location": "method",
      "type": "string",
      "required": true,
      "description": "The name of the application type."
    },
    "ApplicationTypeVersionOptionalQueryParam": {
      "name": "ApplicationTypeVersion",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "string",
      "required": false,
      "description": "The version of the application type."
    },
    "ApplicationTypeVersionRequiredQueryParam": {
      "name": "ApplicationTypeVersion",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "string",
      "required": true,
      "description": "The version of the application type."
    },
    "ProvisionApplicationTypeDescriptionBaseRequiredBodyParam": {
      "name": "ProvisionApplicationTypeDescriptionBaseRequiredBodyParam",
      "in": "body",
      "description": "The base type of provision application type description which supports either image store-based provision or external store-based provision.",
      "required": true,
      "x-ms-parameter-location": "method",
      "schema": {
        "$ref": "#/definitions/ProvisionApplicationTypeDescriptionBase"
      }
    },
    "ClusterConfigurationUpgradeDescriptionRequiredBodyParam": {
      "name": "ClusterConfigurationUpgradeDescription",
      "in": "body",
      "description": "Parameters for a standalone cluster configuration upgrade.",
      "required": true,
      "x-ms-parameter-location": "method",
      "schema": {
        "$ref": "#/definitions/ClusterConfigurationUpgradeDescription"
      }
    },
    "ClusterHealthPoliciesOptionalBodyParam": {
      "name": "ClusterHealthPolicies",
      "in": "body",
      "description": "Describes the health policies used to evaluate the cluster health.\nIf not present, the health evaluation uses the cluster health policy defined in the cluster manifest or the default cluster health policy.\nBy default, each application is evaluated using its specific application health policy, defined in the application manifest, or the default health policy, if no policy is defined in manifest.\nIf the application health policy map is specified, and it has an entry for an application, the specified application health policy\nis used to evaluate the application health.",
      "required": false,
      "x-ms-parameter-location": "method",
      "schema": {
        "$ref": "#/definitions/ClusterHealthPolicies"
      }
    },
    "ClusterHealthPolicyOptionalBodyParam": {
      "name": "ClusterHealthPolicy",
      "in": "body",
      "description": "Describes the health policies used to evaluate the health of a cluster or node. If not present, the health evaluation uses the health policy from cluster manifest or the default health policy.",
      "required": false,
      "x-ms-parameter-location": "method",
      "schema": {
        "$ref": "#/definitions/ClusterHealthPolicy"
      }
    },
    "ClusterHealthChunkQueryDescriptionOptionalBodyParam": {
      "name": "ClusterHealthChunkQueryDescription",
      "in": "body",
      "description": "Describes the cluster and application health policies used to evaluate the cluster health and the filters to select which cluster entities to be returned.\nIf the cluster health policy is present, it is used to evaluate the cluster events and the cluster nodes. If not present, the health evaluation uses the cluster health policy defined in the cluster manifest or the default cluster health policy.\nBy default, each application is evaluated using its specific application health policy, defined in the application manifest, or the default health policy, if no policy is defined in manifest.\nIf the application health policy map is specified, and it has an entry for an application, the specified application health policy\nis used to evaluate the application health.\nUsers can specify very flexible filters to select which cluster entities to include in response. The selection can be done based on the entities health state and based on the hierarchy.\nThe query can return multi-level children of the entities based on the specified filters. For example, it can return one application with a specified name, and for this application, return\nonly services that are in Error or Warning, and all partitions and replicas for one of these services.",
      "required": false,
      "x-ms-parameter-location": "method",
      "schema": {
        "$ref": "#/definitions/ClusterHealthChunkQueryDescription"
      }
    },
    "CodePackageInstanceIdRequiredQueryParam": {
      "name": "CodePackageInstanceId",
      "description": "ID that uniquely identifies a code package instance deployed on a service fabric node.",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "string",
      "required": true
    },
    "CodeVersionOptionalQueryParam": {
      "name": "CodeVersion",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "string",
      "required": false,
      "description": "The product version of Service Fabric."
    },
    "ConfigVersionOptionalQueryParam": {
      "name": "ConfigVersion",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "string",
      "required": false,
      "description": "The config version of Service Fabric."
    },
    "ConfigurationApiVersionRequiredQueryParam": {
      "name": "ConfigurationApiVersion",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "string",
      "required": true,
      "description": "The API version of the Standalone cluster json configuration."
    },
    "ContainerApiRequiredBodyParam": {
      "name": "ContainerApiRequestBody",
      "in": "body",
      "description": "Parameters for making container API call",
      "required": true,
      "x-ms-parameter-location": "method",
      "schema": {
        "$ref": "#/definitions/ContainerApiRequestBody"
      }
    },
    "ContinuationTokenOptionalQueryParam": {
      "name": "ContinuationToken",
      "in": "query",
      "x-ms-parameter-location": "method",
      "x-ms-skip-url-encoding": true,
      "type": "string",
      "required": false,
      "description": "The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded."
    },
    "DeployedApplicationsHealthStateFilterOptionalQueryParam": {
      "name": "DeployedApplicationsHealthStateFilter",
      "description": "Allows filtering of the deployed applications health state objects returned in the result of application health query based on their health state.\nThe possible values for this parameter include integer value of one of the following health states. Only deployed applications that match the filter will be returned.\nAll deployed applications are used to evaluate the aggregated health state. If not specified, all entries are returned.\nThe state values are flag-based enumeration, so the value could be a combination of these values, obtained using bitwise 'OR' operator.\nFor example, if the provided value is 6 then health state of deployed applications with HealthState value of OK (2) and Warning (4) are returned.\n\n- Default - Default value. Matches any HealthState. The value is zero.\n- None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.\n- Ok - Filter that matches input with HealthState value Ok. The value is 2.\n- Warning - Filter that matches input with HealthState value Warning. The value is 4.\n- Error - Filter that matches input with HealthState value Error. The value is 8.\n- All - Filter that matches input with any HealthState value. The value is 65535.",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "integer",
      "required": false,
      "default": 0
    },
    "DeployedServicePackagesHealthStateFilterOptionalQueryParam": {
      "name": "DeployedServicePackagesHealthStateFilter",
      "description": "Allows filtering of the deployed service package health state objects returned in the result of deployed application health query based on their health state.\nThe possible values for this parameter include integer value of one of the following health states.\nOnly deployed service packages that match the filter are returned. All deployed service packages are used to evaluate the aggregated health state of the deployed application.\nIf not specified, all entries are returned.\nThe state values are flag-based enumeration, so the value can be a combination of these values, obtained using the bitwise 'OR' operator.\nFor example, if the provided value is 6 then health state of service packages with HealthState value of OK (2) and Warning (4) are returned.\n\n- Default - Default value. Matches any HealthState. The value is zero.\n- None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.\n- Ok - Filter that matches input with HealthState value Ok. The value is 2.\n- Warning - Filter that matches input with HealthState value Warning. The value is 4.\n- Error - Filter that matches input with HealthState value Error. The value is 8.\n- All - Filter that matches input with any HealthState value. The value is 65535.",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "integer",
      "required": false,
      "default": 0
    },
    "DeploymentNameRequiredPathParam": {
      "name": "deploymentName",
      "in": "path",
      "x-ms-parameter-location": "method",
      "x-ms-skip-url-encoding": true,
      "type": "string",
      "required": true,
      "description": "The identity of the deployment."
    },
    "EventsHealthStateFilterOptionalQueryParam": {
      "name": "EventsHealthStateFilter",
      "description": "Allows filtering the collection of HealthEvent objects returned based on health state.\nThe possible values for this parameter include integer value of one of the following health states.\nOnly events that match the filter are returned. All events are used to evaluate the aggregated health state.\nIf not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.\n\n- Default - Default value. Matches any HealthState. The value is zero.\n- None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.\n- Ok - Filter that matches input with HealthState value Ok. The value is 2.\n- Warning - Filter that matches input with HealthState value Warning. The value is 4.\n- Error - Filter that matches input with HealthState value Error. The value is 8.\n- All - Filter that matches input with any HealthState value. The value is 65535.",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "integer",
      "required": false,
      "default": 0
    },
    "ExcludeApplicationParametersOptionalQueryParam": {
      "name": "ExcludeApplicationParameters",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "boolean",
      "required": false,
      "default": false,
      "description": "The flag that specifies whether application parameters will be excluded from the result."
    },
    "HealthInformationRequiredBodyParam": {
      "name": "HealthInformation",
      "in": "body",
      "description": "Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.",
      "required": true,
      "x-ms-parameter-location": "method",
      "schema": {
        "$ref": "#/definitions/HealthInformation"
      }
    },
    "NodeNameRequiredPathParam": {
      "name": "nodeName",
      "in": "path",
      "x-ms-parameter-location": "method",
      "type": "string",
      "required": true,
      "description": "The name of the node."
    },
    "NodesHealthStateFilterOptionalQueryParam": {
      "name": "NodesHealthStateFilter",
      "description": "Allows filtering of the node health state objects returned in the result of cluster health query\nbased on their health state. The possible values for this parameter include integer value of one of the\nfollowing health states. Only nodes that match the filter are returned. All nodes are used to evaluate the aggregated health state.\nIf not specified, all entries are returned.\nThe state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.\nFor example, if the provided value is 6 then health state of nodes with HealthState value of OK (2) and Warning (4) are returned.\n\n- Default - Default value. Matches any HealthState. The value is zero.\n- None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.\n- Ok - Filter that matches input with HealthState value Ok. The value is 2.\n- Warning - Filter that matches input with HealthState value Warning. The value is 4.\n- Error - Filter that matches input with HealthState value Error. The value is 8.\n- All - Filter that matches input with any HealthState value. The value is 65535.",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "integer",
      "required": false,
      "default": 0
    },
    "NodeStatusFilterOptionalQueryParam": {
      "name": "NodeStatusFilter",
      "description": "Allows filtering the nodes based on the NodeStatus. Only the nodes that are matching the specified filter value will be returned. The filter value can be one of the following.",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "string",
      "enum": [
        "default",
        "all",
        "up",
        "down",
        "enabling",
        "disabling",
        "disabled",
        "unknown",
        "removed"
      ],
      "required": false,
      "default": "default",
      "x-ms-enum": {
        "name": "NodeStatusFilter",
        "modelAsString": true,
        "values": [
          {
            "value": "default",
            "description": "This filter value will match all of the nodes excepts the ones with with status as Unknown or Removed."
          },
          {
            "value": "all",
            "description": "This filter value will match all of the nodes."
          },
          {
            "value": "up",
            "description": "This filter value will match nodes that are Up."
          },
          {
            "value": "down",
            "description": "This filter value will match nodes that are Down."
          },
          {
            "value": "enabling",
            "description": "This filter value will match nodes that are in the process of being enabled with status as Enabling."
          },
          {
            "value": "disabling",
            "description": "This filter value will match nodes that are in the process of being disabled with status as Disabling."
          },
          {
            "value": "disabled",
            "description": "This filter value will match nodes that are Disabled."
          },
          {
            "value": "unknown",
            "description": "This filter value will match nodes whose status is Unknown. A node would be in Unknown state if Service Fabric does not have authoritative information about that node. This can happen if the system learns about a node at runtime."
          },
          {
            "value": "removed",
            "description": "This filter value will match nodes whose status is Removed. These are the nodes that are removed from the cluster using the RemoveNodeState API."
          }
        ]
      }
    },
    "PartitionIdOptionalQueryParam": {
      "name": "PartitionId",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "string",
      "format": "uuid",
      "required": false,
      "description": "The identity of the partition."
    },
    "PartitionIdRequiredPathParam": {
      "name": "partitionId",
      "in": "path",
      "x-ms-parameter-location": "method",
      "x-ms-skip-url-encoding": true,
      "type": "string",
      "format": "uuid",
      "required": true,
      "description": "The identity of the partition."
    },
    "ProvisionFabricDescriptionRequiredBodyParam": {
      "name": "ProvisionFabricDescription",
      "in": "body",
      "description": "Describes the parameters for provisioning a cluster.",
      "required": true,
      "x-ms-parameter-location": "method",
      "schema": {
        "$ref": "#/definitions/ProvisionFabricDescription"
      }
    },
    "UnprovisionFabricDescriptionRequiredBodyParam": {
      "name": "UnprovisionFabricDescription",
      "in": "body",
      "description": "Describes the parameters for unprovisioning a cluster.",
      "required": true,
      "x-ms-parameter-location": "method",
      "schema": {
        "$ref": "#/definitions/UnprovisionFabricDescription"
      }
    },
    "ResumeClusterUpgradeDescriptionRequiredBodyParam": {
      "name": "ResumeClusterUpgradeDescription",
      "in": "body",
      "description": "Describes the parameters for resuming a cluster upgrade.",
      "required": true,
      "x-ms-parameter-location": "method",
      "schema": {
        "$ref": "#/definitions/ResumeClusterUpgradeDescription"
      }
    },
    "UpdateClusterUpgradeDescriptionRequiredBodyParam": {
      "name": "UpdateClusterUpgradeDescription",
      "in": "body",
      "description": "Parameters for updating a cluster upgrade.",
      "required": true,
      "x-ms-parameter-location": "method",
      "schema": {
        "$ref": "#/definitions/UpdateClusterUpgradeDescription"
      }
    },
    "StartClusterUpgradeDescriptionRequiredBodyParam": {
      "name": "StartClusterUpgradeDescription",
      "in": "body",
      "description": "Describes the parameters for starting a cluster upgrade.",
      "required": true,
      "x-ms-parameter-location": "method",
      "schema": {
        "$ref": "#/definitions/StartClusterUpgradeDescription"
      }
    },
    "ReplicaHealthReportServiceKindRequiredQueryParam": {
      "name": "ReplicaHealthReportServiceKind",
      "in": "query",
      "required": true,
      "x-ms-parameter-location": "method",
      "description": "The kind of service replica (Stateless or Stateful) for which the health is being reported. Following are the possible values.",
      "type": "string",
      "enum": [
        "Stateless",
        "Stateful"
      ],
      "default": "Stateful",
      "x-ms-enum": {
        "name": "ReplicaHealthReportServiceKind",
        "modelAsString": true,
        "values": [
          {
            "value": "Stateless",
            "description": "Does not use Service Fabric to make its state highly available or reliable. The value is 1"
          },
          {
            "value": "Stateful",
            "description": "Uses Service Fabric to make its state or part of its state highly available and reliable. The value is 2."
          }
        ]
      }
    },
    "ReplicaIdRequiredPathParam": {
      "name": "replicaId",
      "in": "path",
      "x-ms-parameter-location": "method",
      "x-ms-skip-url-encoding": true,
      "type": "string",
      "required": true,
      "description": "The identifier of the replica."
    },
    "ReplicasHealthStateFilerOptionalQueryParam": {
      "name": "ReplicasHealthStateFilter",
      "description": "Allows filtering the collection of ReplicaHealthState objects on the partition. The value can be obtained from members or bitwise operations on members of HealthStateFilter. Only replicas that match the filter will be returned. All replicas will be used to evaluate the aggregated health state. If not specified, all entries will be returned.The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) will be returned. The possible values for this parameter include integer value of one of the following health states.\n\n- Default - Default value. Matches any HealthState. The value is zero.\n- None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.\n- Ok - Filter that matches input with HealthState value Ok. The value is 2.\n- Warning - Filter that matches input with HealthState value Warning. The value is 4.\n- Error - Filter that matches input with HealthState value Error. The value is 8.\n- All - Filter that matches input with any HealthState value. The value is 65535.",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "integer",
      "required": false,
      "default": 0
    },
    "ServiceIdRequiredPathParam": {
      "name": "serviceId",
      "in": "path",
      "x-ms-parameter-location": "method",
      "x-ms-skip-url-encoding": true,
      "type": "string",
      "required": true,
      "description": "The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.\nStarting from version 6.0, hierarchical names are delimited with the \"~\" character.\nFor example, if the service name is \"fabric:/myapp/app1/svc1\", the service identity would be \"myapp~app1~svc1\" in 6.0+ and \"myapp/app1/svc1\" in previous versions."
    },
    "ServiceManifestNameOptionalQueryParam": {
      "name": "ServiceManifestName",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "string",
      "required": false,
      "description": "The name of a service manifest registered as part of an application type in a Service Fabric cluster."
    },
    "ServiceManifestNameRequiredQueryParam": {
      "name": "ServiceManifestName",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "string",
      "required": true,
      "description": "The name of a service manifest registered as part of an application type in a Service Fabric cluster."
    },
    "ServicePackageNameRequiredPathParam": {
      "name": "servicePackageName",
      "in": "path",
      "x-ms-parameter-location": "method",
      "x-ms-skip-url-encoding": true,
      "type": "string",
      "required": true,
      "description": "The name of the service package."
    },
    "ServicesHealthStateFilterOptionalQueryParam": {
      "name": "ServicesHealthStateFilter",
      "description": "Allows filtering of the services health state objects returned in the result of services health query based on their health state.\nThe possible values for this parameter include integer value of one of the following health states.\nOnly services that match the filter are returned. All services are used to evaluate the aggregated health state.\nIf not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values,\nobtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of services with HealthState value of OK (2) and Warning (4) will be returned.\n\n- Default - Default value. Matches any HealthState. The value is zero.\n- None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.\n- Ok - Filter that matches input with HealthState value Ok. The value is 2.\n- Warning - Filter that matches input with HealthState value Warning. The value is 4.\n- Error - Filter that matches input with HealthState value Error. The value is 8.\n- All - Filter that matches input with any HealthState value. The value is 65535.",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "integer",
      "required": false,
      "default": 0
    },
    "CreateServiceFromTemplateRequiredBodyParam": {
      "name": "ServiceFromTemplateDescription",
      "in": "body",
      "description": "Describes the service that needs to be created from the template defined in the application manifest.",
      "required": true,
      "x-ms-parameter-location": "method",
      "schema": {
        "$ref": "#/definitions/ServiceFromTemplateDescription"
      }
    },
    "ServiceTypeNameOptionalQueryParam": {
      "name": "ServiceTypeName",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "string",
      "required": false,
      "description": "The service type name used to filter the services to query for."
    },
    "InfrastructureCommandRequiredQueryParam": {
      "name": "Command",
      "description": "The text of the command to be invoked. The content of the command is infrastructure-specific.",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "string",
      "required": true
    },
    "InfrastructureServiceIdOptionalQueryParam": {
      "name": "ServiceId",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "string",
      "description": "The identity of the infrastructure service. This is the full name of the infrastructure service without the 'fabric:' URI scheme. This parameter required only for the cluster that has more than one instance of infrastructure service running.",
      "required": false
    },
    "ForceRemoveOptionalQueryParam": {
      "name": "ForceRemove",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "boolean",
      "required": false,
      "description": "Remove a Service Fabric application or service forcefully without going through the graceful shutdown sequence. This parameter can be used to forcefully delete an application or service for which delete is timing out due to issues in the service code that prevents graceful close of replicas."
    },
    "ForceRemoveReplicaOptionalQueryParam": {
      "name": "ForceRemove",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "boolean",
      "required": false,
      "description": "Remove a Service Fabric application or service forcefully without going through the graceful shutdown sequence. This parameter can be used to forcefully delete an application or service for which delete is timing out due to issues in the service code that prevents graceful close of replicas."
    },
    "DeactivationIntentDescriptionRequiredBodyParam": {
      "name": "DeactivationIntentDescription",
      "in": "body",
      "description": "Describes the intent or reason for deactivating the node.",
      "required": true,
      "x-ms-parameter-location": "method",
      "schema": {
        "$ref": "#/definitions/DeactivationIntentDescription"
      }
    },
    "RestartNodeDescriptionRequiredBodyParam": {
      "name": "RestartNodeDescription",
      "in": "body",
      "description": "The instance of the node to be restarted and a flag indicating the need to take dump of the fabric process.",
      "required": true,
      "x-ms-parameter-location": "method",
      "schema": {
        "$ref": "#/definitions/RestartNodeDescription"
      }
    },
    "ApplicationUpgradeDescriptionRequiredBodyParam": {
      "name": "ApplicationUpgradeDescription",
      "in": "body",
      "description": "Parameters for an application upgrade.",
      "required": true,
      "x-ms-parameter-location": "method",
      "schema": {
        "$ref": "#/definitions/ApplicationUpgradeDescription"
      }
    },
    "ComposeDeploymentUpgradeDescriptionRequiredBodyParam": {
      "name": "ComposeDeploymentUpgradeDescription",
      "in": "body",
      "description": "Parameters for upgrading compose deployment.",
      "required": true,
      "x-ms-parameter-location": "method",
      "schema": {
        "$ref": "#/definitions/ComposeDeploymentUpgradeDescription"
      }
    },
    "ApplicationTypeImageStorePathRequiredBodyParam": {
      "name": "ApplicationTypeImageStorePath",
      "in": "body",
      "description": "The relative path for the application package in the image store specified during the prior copy operation.",
      "required": true,
      "x-ms-parameter-location": "method",
      "schema": {
        "$ref": "#/definitions/ApplicationTypeImageStorePath"
      }
    },
    "UnprovisionApplicationTypeRequiredBodyParam": {
      "name": "UnprovisionApplicationTypeDescriptionInfo",
      "in": "body",
      "description": "The relative path for the application package in the image store specified during the prior copy operation.",
      "required": true,
      "x-ms-parameter-location": "method",
      "schema": {
        "$ref": "#/definitions/UnprovisionApplicationTypeDescriptionInfo"
      }
    },
    "UpgradeOrchestrationServiceStateRequiredBodyParam": {
      "name": "UpgradeOrchestrationServiceState",
      "in": "body",
      "x-ms-parameter-location": "method",
      "required": true,
      "description": "Service state of Service Fabric Upgrade Orchestration Service.",
      "schema": {
        "$ref": "#/definitions/UpgradeOrchestrationServiceState"
      }
    },
    "ChaosParametersRequiredBodyParam": {
      "name": "ChaosParameters",
      "in": "body",
      "description": "Describes all the parameters to configure a Chaos run.",
      "required": true,
      "x-ms-parameter-location": "method",
      "schema": {
        "$ref": "#/definitions/ChaosParameters"
      }
    },
    "StartTimeUtcOptionalQueryParam": {
      "name": "StartTimeUtc",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "string",
      "required": false,
      "description": "The Windows file time representing the start time of the time range for which a Chaos report is to be generated. Consult [DateTime.ToFileTimeUtc Method](https://msdn.microsoft.com/library/system.datetime.tofiletimeutc(v=vs.110).aspx) for details."
    },
    "EndTimeUtcOptionalQueryParam": {
      "name": "EndTimeUtc",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "string",
      "required": false,
      "description": "The Windows file time representing the end time of the time range for which a Chaos report is to be generated. Consult [DateTime.ToFileTimeUtc Method](https://msdn.microsoft.com/library/system.datetime.tofiletimeutc(v=vs.110).aspx) for details."
    },
    "ApplicationNameRequiredQueryParam": {
      "name": "ApplicationName",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "string",
      "required": true,
      "description": "The name of application to create from compose file. This is typically the full name of the application including 'fabric:' URI scheme."
    },
    "CreateComposeDeploymentRequiredBodyParam": {
      "name": "CreateComposeDeploymentDescription",
      "in": "body",
      "description": "Describes the compose deployment that needs to be created.",
      "required": true,
      "x-ms-parameter-location": "method",
      "schema": {
        "$ref": "#/definitions/CreateComposeDeploymentDescription"
      }
    },
    "PasswordEncryptedOptionalQueryParam": {
      "name": "PasswordEncrypted",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "boolean",
      "required": false,
      "description": "Indicates that supplied container repository password is encrypted."
    },
    "RepositoryPasswordOptionalQueryParam": {
      "name": "RepositoryPassword",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "string",
      "required": false,
      "description": "The password for supplied username to connect to container repository."
    },
    "RepositoryUserNameOptionalQueryParam": {
      "name": "RepositoryUserName",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "string",
      "required": false,
      "description": "The user name to connect to container repository."
    },
    "MaxResultsOptionalQueryParam": {
      "name": "MaxResults",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "integer",
      "format": "int64",
      "minimum": 0,
      "default": 0,
      "required": false,
      "description": "The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message."
    },
    "ApplicationDescriptionRequiredBodyParam": {
      "name": "ApplicationDescription",
      "in": "body",
      "description": "Description for creating an application.",
      "required": true,
      "x-ms-parameter-location": "method",
      "schema": {
        "$ref": "#/definitions/ApplicationDescription"
      }
    },
    "ServiceDescriptionRequiredBodyParam": {
      "name": "ServiceDescription",
      "in": "body",
      "description": "The information necessary to create a service.",
      "required": true,
      "x-ms-parameter-location": "method",
      "schema": {
        "$ref": "#/definitions/ServiceDescription"
      }
    },
    "ServiceUpdateDescriptionRequiredBodyParam": {
      "name": "ServiceUpdateDescription",
      "in": "body",
      "description": "The information necessary to update a service.",
      "required": true,
      "x-ms-parameter-location": "method",
      "schema": {
        "$ref": "#/definitions/ServiceUpdateDescription"
      }
    },
    "ImageStoreCopyDescriptionRequiredBodyParam": {
      "name": "ImageStoreCopyDescription",
      "in": "body",
      "description": "Describes the copy description for the image store.",
      "required": true,
      "x-ms-parameter-location": "method",
      "schema": {
        "$ref": "#/definitions/ImageStoreCopyDescription"
      }
    },
    "CodePackageNameOptionalQueryParam": {
      "name": "CodePackageName",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "string",
      "required": false,
      "description": "The name of code package specified in service manifest registered as part of an application type in a Service Fabric cluster."
    },
    "CodePackageNameRequiredQueryParam": {
      "name": "CodePackageName",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "string",
      "required": true,
      "description": "The name of code package specified in service manifest registered as part of an application type in a Service Fabric cluster."
    },
    "RestartDeployedCodePackageRequiredBodyParam": {
      "name": "RestartDeployedCodePackageDescription",
      "in": "body",
      "description": "Describes the deployed code package on Service Fabric node to restart.",
      "required": true,
      "x-ms-parameter-location": "method",
      "schema": {
        "$ref": "#/definitions/RestartDeployedCodePackageDescription"
      }
    },
    "PartitionsHealthStateFilterOptionalQueryParam": {
      "name": "PartitionsHealthStateFilter",
      "description": "Allows filtering of the partitions health state objects returned in the result of service health query based on their health state.\nThe possible values for this parameter include integer value of one of the following health states.\nOnly partitions that match the filter are returned. All partitions are used to evaluate the aggregated health state.\nIf not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these value\nobtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of partitions with HealthState value of OK (2) and Warning (4) will be returned.\n\n- Default - Default value. Matches any HealthState. The value is zero.\n- None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.\n- Ok - Filter that matches input with HealthState value Ok. The value is 2.\n- Warning - Filter that matches input with HealthState value Warning. The value is 4.\n- Error - Filter that matches input with HealthState value Error. The value is 8.\n- All - Filter that matches input with any HealthState value. The value is 65535.",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "integer",
      "required": false,
      "default": 0
    },
    "DeployedServiceType_ServiceManifestNameOptionalQueryParam": {
      "name": "ServiceManifestName",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "string",
      "required": false,
      "description": "The name of the service manifest to filter the list of deployed service type information. If specified, the response will only contain the information about service types that are defined in this service manifest."
    },
    "ServiceTypeNameRequiredPathParam": {
      "name": "serviceTypeName",
      "in": "path",
      "x-ms-parameter-location": "method",
      "x-ms-skip-url-encoding": true,
      "type": "string",
      "required": true,
      "description": "Specifies the name of a Service Fabric service type."
    },
    "ImageStoreContentPathRequiredPathParam": {
      "name": "contentPath",
      "in": "path",
      "x-ms-parameter-location": "method",
      "type": "string",
      "required": true,
      "description": "Relative path to file or folder in the image store from its root."
    },
    "PartitionKeyTypeOptionalQueryParam": {
      "name": "PartitionKeyType",
      "description": "Key type for the partition. This parameter is required if the partition scheme for the service is Int64Range or Named. The possible values are following.\n- None (1) - Indicates that the PartitionKeyValue parameter is not specified. This is valid for the partitions with partitioning scheme as Singleton. This is the default value. The value is 1.\n- Int64Range (2) - Indicates that the PartitionKeyValue parameter is an int64 partition key. This is valid for the partitions with partitioning scheme as Int64Range. The value is 2.\n- Named (3) - Indicates that the PartitionKeyValue parameter is a name of the partition. This is valid for the partitions with partitioning scheme as Named. The value is 3.",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "integer",
      "required": false
    },
    "PartitionKeyValueOptionalQueryParam": {
      "name": "PartitionKeyValue",
      "in": "query",
      "x-ms-parameter-location": "method",
      "x-ms-skip-url-encoding": true,
      "type": "string",
      "required": false,
      "description": "Partition key. This is required if the partition scheme for the service is Int64Range or Named."
    },
    "PreviousRspVersionOptionalQueryParam": {
      "name": "PreviousRspVersion",
      "in": "query",
      "x-ms-parameter-location": "method",
      "x-ms-skip-url-encoding": true,
      "type": "string",
      "required": false,
      "description": "The value in the Version field of the response that was received previously. This is required if the user knows that the result that was gotten previously is stale."
    },
    "DataLossModeRequiredQueryParam": {
      "name": "DataLossMode",
      "description": "This enum is passed to the StartDataLoss API to indicate what type of data loss to induce.",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "string",
      "enum": [
        "Invalid",
        "PartialDataLoss",
        "FullDataLoss"
      ],
      "required": true,
      "x-ms-enum": {
        "name": "DataLossMode",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Reserved.  Do not pass into API."
          },
          {
            "value": "PartialDataLoss",
            "description": "PartialDataLoss option will cause a quorum of replicas to go down, triggering an OnDataLoss event in the system for the given partition."
          },
          {
            "value": "FullDataLoss",
            "description": "FullDataLoss option will drop all the replicas which means that all the data will be lost."
          }
        ]
      }
    },
    "FaultOperationIdRequiredQueryParam": {
      "name": "OperationId",
      "description": "A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "string",
      "format": "uuid",
      "required": true
    },
    "ForceRequiredQueryParam": {
      "name": "Force",
      "description": "Indicates whether to gracefully rollback and clean up internal system state modified by executing the user-induced operation.",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "boolean",
      "required": true,
      "default": false
    },
    "NodeInstanceIdRequiredQueryParam": {
      "name": "NodeInstanceId",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "string",
      "required": true,
      "description": "The node instance ID of the target node.  This can be determined through GetNodeInfo API."
    },
    "NodeTransitionTypeRequiredQueryParam": {
      "name": "NodeTransitionType",
      "description": "Indicates the type of transition to perform.  NodeTransitionType.Start will start a stopped node.  NodeTransitionType.Stop will stop a node that is up.",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "string",
      "enum": [
        "Invalid",
        "Start",
        "Stop"
      ],
      "required": true,
      "x-ms-enum": {
        "name": "NodeTransitionType",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Reserved.  Do not pass into API."
          },
          {
            "value": "Start",
            "description": "Transition a stopped node to up."
          },
          {
            "value": "Stop",
            "description": "Transition an up node to stopped."
          }
        ]
      }
    },
    "QuorumLossDurationRequiredQueryParam": {
      "name": "QuorumLossDuration",
      "description": "The amount of time for which the partition will be kept in quorum loss.  This must be specified in seconds.",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "integer",
      "required": true
    },
    "QuorumLossModeRequiredQueryParam": {
      "name": "QuorumLossMode",
      "description": "This enum is passed to the StartQuorumLoss API to indicate what type of quorum loss to induce.",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "string",
      "enum": [
        "Invalid",
        "QuorumReplicas",
        "AllReplicas"
      ],
      "required": true,
      "x-ms-enum": {
        "name": "QuorumLossMode",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Reserved.  Do not pass into API."
          },
          {
            "value": "QuorumReplicas",
            "description": "Partial Quorum loss mode : Minimum number of replicas for a partition will be down that will cause a quorum loss."
          },
          {
            "value": "AllReplicas"
          }
        ]
      }
    },
    "RestartPartitionModeRequiredQueryParam": {
      "name": "RestartPartitionMode",
      "description": "Describe which partitions to restart.",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "string",
      "enum": [
        "Invalid",
        "AllReplicasOrInstances",
        "OnlyActiveSecondaries"
      ],
      "required": true,
      "x-ms-enum": {
        "name": "RestartPartitionMode",
        "modelAsString": true,
        "values": [
          {
            "value": "Invalid",
            "description": "Reserved.  Do not pass into API."
          },
          {
            "value": "AllReplicasOrInstances",
            "description": "All replicas or instances in the partition are restarted at once."
          },
          {
            "value": "OnlyActiveSecondaries",
            "description": "Only the secondary replicas are restarted."
          }
        ]
      }
    },
    "StateFilterRequiredQueryParam": {
      "name": "StateFilter",
      "description": "Used to filter on OperationState's for user-induced operations.\n\n- 65535 - select All\n- 1 - select Running\n- 2 - select RollingBack\n- 8 - select Completed\n- 16 - select Faulted\n- 32 - select Cancelled\n- 64 - select ForceCancelled",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "integer",
      "required": true,
      "default": 65535
    },
    "StopDurationInSecondsRequiredQueryParam": {
      "name": "StopDurationInSeconds",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "integer",
      "format": "int32",
      "minimum": 0,
      "required": true,
      "description": "The duration, in seconds, to keep the node stopped.  The minimum value is 600, the maximum is 14400.  After this time expires, the node will automatically come back up."
    },
    "TypeFilterRequiredQueryParam": {
      "name": "TypeFilter",
      "description": "Used to filter on OperationType for user-induced operations.\n\n- 65535 - select all\n- 1 - select PartitionDataLoss.\n- 2 - select PartitionQuorumLoss.\n- 4 - select PartitionRestart.\n- 8 - select NodeTransition.",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "integer",
      "required": true,
      "default": 65535
    },
    "DeployServicePackageToNodeRequiredBodyParam": {
      "name": "DeployServicePackageToNodeDescription",
      "in": "body",
      "description": "Describes information for deploying a service package to a Service Fabric node.",
      "required": true,
      "x-ms-parameter-location": "method",
      "schema": {
        "$ref": "#/definitions/DeployServicePackageToNodeDescription"
      }
    },
    "ResumeApplicationUpgradeDescriptionRequiredBodyParam": {
      "name": "ResumeApplicationUpgradeDescription",
      "in": "body",
      "description": "Describes the parameters for resuming an application upgrade.",
      "required": true,
      "x-ms-parameter-location": "method",
      "schema": {
        "$ref": "#/definitions/ResumeApplicationUpgradeDescription"
      }
    },
    "ApplicationUpgradeUpdateDescriptionRequiredBodyParam": {
      "name": "ApplicationUpgradeUpdateDescription",
      "in": "body",
      "description": "Parameters for updating an existing application upgrade.",
      "required": true,
      "x-ms-parameter-location": "method",
      "schema": {
        "$ref": "#/definitions/ApplicationUpgradeUpdateDescription"
      }
    },
    "TimeoutOptionalQueryParam": {
      "name": "timeout",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "integer",
      "format": "int64",
      "required": false,
      "minimum": 1,
      "maximum": 4294967295,
      "default": 60,
      "description": "The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds."
    },
    "NameDescriptionRequiredBodyParam": {
      "name": "NameDescription",
      "in": "body",
      "description": "Describes the Service Fabric name to be created.",
      "required": true,
      "x-ms-parameter-location": "method",
      "schema": {
        "$ref": "#/definitions/NameDescription"
      }
    },
    "NameIdRequiredPathParam": {
      "name": "nameId",
      "in": "path",
      "x-ms-parameter-location": "method",
      "x-ms-skip-url-encoding": true,
      "type": "string",
      "required": true,
      "description": "The Service Fabric name, without the 'fabric:' URI scheme."
    },
    "RecursiveOptionalQueryParam": {
      "name": "Recursive",
      "description": "Allows specifying that the search performed should be recursive.",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "boolean",
      "required": false,
      "default": false
    },
    "IncludeValuesOptionalQueryParam": {
      "name": "IncludeValues",
      "description": "Allows specifying whether to include the values of the properties returned. True if values should be returned with the metadata; False to return only property metadata.",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "boolean",
      "required": false,
      "default": false
    },
    "PropertyDescriptionRequiredBodyParam": {
      "name": "PropertyDescription",
      "in": "body",
      "description": "Describes the Service Fabric property to be created.",
      "required": true,
      "x-ms-parameter-location": "method",
      "schema": {
        "$ref": "#/definitions/PropertyDescription"
      }
    },
    "PropertyNameRequiredQueryParam": {
      "name": "PropertyName",
      "description": "Specifies the name of the property to get.",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "string",
      "required": true
    },
    "PropertyBatchDescriptionListRequiredBodyParam": {
      "name": "PropertyBatchDescriptionList",
      "in": "body",
      "description": "Describes the property batch operations to be submitted.",
      "required": true,
      "x-ms-parameter-location": "method",
      "schema": {
        "$ref": "#/definitions/PropertyBatchDescriptionList"
      }
    },
    "ImmediateOptionalQueryParam": {
      "name": "Immediate",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "boolean",
      "required": false,
      "default": false,
      "description": "A flag that indicates whether the report should be sent immediately.\nA health report is sent to a Service Fabric gateway Application, which forwards to the health store.\nIf Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.\nThis is useful for critical reports that should be sent as soon as possible.\nDepending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.\nIf Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.\nThis is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.\nBy default, reports are not sent immediately."
    },
    "ExcludeHealthStatisticsOptionalQueryParam": {
      "name": "ExcludeHealthStatistics",
      "description": "Indicates whether the health statistics should be returned as part of the query result. False by default.\nThe statistics show the number of children entities in health state Ok, Warning, and Error.",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "boolean",
      "required": false,
      "default": false
    },
    "IncludeSystemApplicationHealthStatisticsOptionalQueryParam": {
      "name": "IncludeSystemApplicationHealthStatistics",
      "description": "Indicates whether the health statistics should include the fabric:/System application health statistics. False by default.\nIf IncludeSystemApplicationHealthStatistics is set to true, the health statistics include the entities that belong to the fabric:/System application.\nOtherwise, the query result includes health statistics only for user applications.\nThe health statistics must be included in the query result for this parameter to be applied.",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "boolean",
      "required": false,
      "default": false
    },
    "IncludeHealthStateOptionalQueryParam": {
      "name": "IncludeHealthState",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "boolean",
      "required": false,
      "default": false,
      "description": "Include the health state of an entity.\nIf this parameter is false or not specified, then the health state returned is \"Unknown\".\nWhen set to true, the query goes in parallel to the node and the health system service before the results are merged.\nAs a result, the query is more expensive and may take a longer time."
    },
    "BackupPolicyDescriptionRequiredBodyParam": {
      "name": "BackupPolicyDescription",
      "in": "body",
      "required": true,
      "x-ms-parameter-location": "method",
      "description": "Describes the backup policy.",
      "schema": {
        "$ref": "#/definitions/BackupPolicyDescription"
      }
    },
    "BackupPolicyNameRequiredPathParam": {
      "name": "backupPolicyName",
      "in": "path",
      "description": "The name of the backup policy.",
      "required": true,
      "x-ms-parameter-location": "method",
      "type": "string"
    },
    "EnableBackupDescriptionRequiredBodyParam": {
      "name": "EnableBackupDescription",
      "in": "body",
      "description": "Specifies the parameters for enabling backup.",
      "required": true,
      "x-ms-parameter-location": "method",
      "schema": {
        "$ref": "#/definitions/EnableBackupDescription"
      }
    },
    "RestorePartitionDescriptionRequiredBodyParam": {
      "name": "RestorePartitionDescription",
      "in": "body",
      "description": "Describes the parameters to restore the partition.",
      "required": true,
      "x-ms-parameter-location": "method",
      "schema": {
        "$ref": "#/definitions/RestorePartitionDescription"
      }
    },
    "RestoreTimeoutOptionalQueryParam": {
      "name": "RestoreTimeout",
      "description": "Specifies the maximum amount of time to wait, in minutes, for the restore operation to complete. Post that, the operation returns back with timeout error. However, in certain corner cases it could be that the restore operation goes through even though it completes with timeout. In case of timeout error, its recommended to invoke this operation again with a greater timeout value. the default value for the same is 10 minutes.",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "integer",
      "required": false,
      "default": 10
    },
    "BackupPartitionDescriptionOptionalBodyParam": {
      "name": "BackupPartitionDescription",
      "in": "body",
      "required": false,
      "x-ms-parameter-location": "method",
      "description": "Describes the parameters to backup the partition now. If not present, backup operation uses default parameters from the backup policy current associated with this partition.",
      "schema": {
        "$ref": "#/definitions/BackupPartitionDescription"
      }
    },
    "BackupTimeoutOptionalQueryParam": {
      "name": "BackupTimeout",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "integer",
      "required": false,
      "description": "Specifies the maximum amount of time, in minutes, to wait for the backup operation to complete. Post that, the operation completes with timeout error. However, in certain corner cases it could be that though the operation returns back timeout, the backup actually goes through. In case of timeout error, its recommended to invoke this operation again with a greater timeout value. The default value for the same is 10 minutes.",
      "default": 10
    },
    "LatestOptionalQueryParam": {
      "name": "Latest",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "boolean",
      "description": "Specifies whether to get only the most recent backup available for a partition for the specified time range.",
      "required": false,
      "default": false
    },
    "StartDateTimeFilterOptionalQueryParam": {
      "name": "StartDateTimeFilter",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "string",
      "format": "date-time",
      "required": false,
      "description": "Specify the start date time from which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups from the beginning are enumerated."
    },
    "EndDateTimeFilterOptionalQueryParam": {
      "name": "EndDateTimeFilter",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "string",
      "format": "date-time",
      "required": false,
      "description": "Specify the end date time till which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is done till the most recent backup."
    },
    "GetBackupByStorageQueryDescriptionRequiredBodyParam": {
      "name": "GetBackupByStorageQueryDescription",
      "in": "body",
      "required": true,
      "x-ms-parameter-location": "method",
      "description": "Describes the filters and backup storage details to be used for enumerating backups.",
      "schema": {
        "$ref": "#/definitions/GetBackupByStorageQueryDescription"
      }
    },
    "RepairTaskApproveDescriptionRequiredBodyParam": {
      "name": "RepairTaskApproveDescription",
      "in": "body",
      "description": "Describes the repair task to be approved.",
      "required": true,
      "x-ms-parameter-location": "method",
      "schema": {
        "$ref": "#/definitions/RepairTaskApproveDescription"
      }
    },
    "RepairTaskCancelDescriptionRequiredBodyParam": {
      "name": "RepairTaskCancelDescription",
      "in": "body",
      "description": "Describes the repair task to be cancelled.",
      "required": true,
      "x-ms-parameter-location": "method",
      "schema": {
        "$ref": "#/definitions/RepairTaskCancelDescription"
      }
    },
    "RepairTaskDeleteDescriptionRequiredBodyParam": {
      "name": "RepairTaskDeleteDescription",
      "in": "body",
      "description": "Describes the repair task to be deleted.",
      "required": true,
      "x-ms-parameter-location": "method",
      "schema": {
        "$ref": "#/definitions/RepairTaskDeleteDescription"
      }
    },
    "RepairTaskExecutorFilterOptionalQueryParam": {
      "name": "ExecutorFilter",
      "description": "The name of the repair executor whose claimed tasks should be included in the list.",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "string",
      "required": false
    },
    "RepairTaskIdFilterOptionalQueryParam": {
      "name": "TaskIdFilter",
      "description": "The repair task ID prefix to be matched.",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "string",
      "required": false
    },
    "RepairTaskRequiredBodyParam": {
      "name": "RepairTask",
      "in": "body",
      "description": "Describes the repair task to be created or updated.",
      "required": true,
      "x-ms-parameter-location": "method",
      "schema": {
        "$ref": "#/definitions/RepairTask"
      }
    },
    "RepairTaskStateFilterOptionalQueryParam": {
      "name": "StateFilter",
      "description": "A bitwise-OR of the following values, specifying which task states should be included in the result list.\n\n- 1 - Created\n- 2 - Claimed\n- 4 - Preparing\n- 8 - Approved\n- 16 - Executing\n- 32 - Restoring\n- 64 - Completed",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "integer",
      "required": false
    },
    "RepairTaskUpdateHealthPolicyDescriptionRequiredBodyParam": {
      "name": "RepairTaskUpdateHealthPolicyDescription",
      "in": "body",
      "description": "Describes the repair task healthy policy to be updated.",
      "x-ms-parameter-location": "method",
      "required": true,
      "schema": {
        "$ref": "#/definitions/RepairTaskUpdateHealthPolicyDescription"
      }
    },
    "UploadSessionIdRequiredQueryParam": {
      "name": "session-id",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "string",
      "format": "uuid",
      "required": true,
      "description": "A GUID generated by the user for a file uploading. It identifies an image store upload session which keeps track of all file chunks until it is committed."
    },
    "UploadFileChunkContentRangeHeaderParam": {
      "name": "Content-Range",
      "in": "header",
      "x-ms-parameter-location": "method",
      "type": "string",
      "required": true,
      "description": "When uploading file chunks to the image store, the Content-Range header field need to be configured and sent with a request. The format should looks like \"bytes {First-Byte-Position}-{Last-Byte-Position}/{File-Length}\". For example, Content-Range:bytes 300-5000/20000 indicates that user is sending bytes 300 through 5,000 and the total file length is 20,000 bytes."
    },
    "TailOptionalQueryParam": {
      "name": "Tail",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "string",
      "required": false,
      "description": "Number of lines to show from the end of the logs. Default is 100. 'all' to show the complete logs."
    },
    "ChaosScheduleRequiredBodyParam": {
      "name": "ChaosSchedule",
      "in": "body",
      "description": "Describes the schedule used by Chaos.",
      "required": true,
      "x-ms-parameter-location": "method",
      "schema": {
        "$ref": "#/definitions/ChaosScheduleDescription"
      }
    },
    "StartTimeUtcRequiredQueryParam": {
      "name": "StartTimeUtc",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "string",
      "required": true,
      "description": "The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ."
    },
    "EndTimeUtcRequiredQueryParam": {
      "name": "EndTimeUtc",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "string",
      "required": true,
      "description": "The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ."
    },
    "EventsTypesFilterOptionalQueryParam": {
      "name": "EventsTypesFilter",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "string",
      "required": false,
      "description": "This is a comma separated string specifying the types of FabricEvents that should only be included in the response."
    },
    "ExcludeAnalysisEventsOptionalQueryParam": {
      "name": "ExcludeAnalysisEvents",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "boolean",
      "required": false,
      "description": "This param disables the retrieval of AnalysisEvents if true is passed."
    },
    "SkipCorrelationLookupOptionalQueryParam": {
      "name": "SkipCorrelationLookup",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "boolean",
      "required": false,
      "description": "This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated."
    },
    "EventInstanceIdRequiredPathParam": {
      "name": "eventInstanceId",
      "in": "path",
      "x-ms-parameter-location": "method",
      "type": "string",
      "required": true,
      "description": "The EventInstanceId."
    },
    "PreviousOptionalQueryParam": {
      "name": "Previous",
      "in": "query",
      "x-ms-parameter-location": "method",
      "type": "boolean",
      "description": "Specifies whether to get container logs from exited/dead containers of the code package instance.",
      "required": false,
      "default": false
    },
    "ApplicationResourceNameRequiredPathParam": {
      "name": "applicationResourceName",
      "in": "path",
      "x-ms-parameter-location": "method",
      "x-ms-skip-url-encoding": true,
      "type": "string",
      "required": true,
      "description": "Service Fabric application resource name."
    },
    "ApplicationResourceDescriptionRequiredBodyParam": {
      "name": "applicationResourceDescription",
      "in": "body",
      "description": "Description for creating an application resource.",
      "required": true,
      "x-ms-parameter-location": "method",
      "schema": {
        "$ref": "#/definitions/ApplicationResourceDescription"
      }
    },
    "ReplicaNameRequiredPathParam": {
      "name": "replicaName",
      "in": "path",
      "x-ms-parameter-location": "method",
      "x-ms-skip-url-encoding": true,
      "type": "string",
      "required": true,
      "description": "Service Fabric replica name."
    },
    "ServiceResourceNameRequiredPathParam": {
      "name": "serviceResourceName",
      "in": "path",
      "x-ms-parameter-location": "method",
      "x-ms-skip-url-encoding": true,
      "type": "string",
      "required": true,
      "description": "Service Fabric service resource name."
    },
    "VolumeResourceNameRequiredPathParam": {
      "name": "volumeResourceName",
      "in": "path",
      "x-ms-parameter-location": "method",
      "x-ms-skip-url-encoding": true,
      "type": "string",
      "required": true,
      "description": "Service Fabric volume resource name."
    },
    "VolumeResourceDescriptionRequiredBodyParam": {
      "name": "volumeResourceDescription",
      "in": "body",
      "description": "Description for creating a volume resource.",
      "required": true,
      "x-ms-parameter-location": "method",
      "schema": {
        "$ref": "#/definitions/VolumeResourceDescription"
      }
    }
  }
}