{
  "swagger": "2.0",
  "info": {
    "title": "ServiceFabricManagementClient",
    "description": "Azure Service Fabric Resource Provider API Client",
    "version": "2020-01-01-preview"
  },
  "host": "management.azure.com",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "azure_auth": {
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "description": "Azure Active Directory OAuth2 Flow",
      "flow": "implicit",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      },
      "type": "oauth2"
    }
  },
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ],
  "paths": {
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/managedClusters": {
      "get": {
        "operationId": "ManagedClusters_ListByResourceGroup",
        "summary": "Gets the list of Service Fabric cluster resources created in the specified resource group.",
        "description": "Gets all Service Fabric cluster resources created or in the process of being created in the resource group.",
        "parameters": [
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "$ref": "#/parameters/subscriptionId"
          }
        ],
        "tags": [
          "ManagedCluster"
        ],
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "List cluster by resource group": {
            "$ref": "./examples/ManagedClusterListByResourceGroupOperation_example.json"
          }
        },
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/ManagedClusterListResult"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.ServiceFabric/managedClusters": {
      "get": {
        "operationId": "ManagedClusters_ListBySubscription",
        "summary": "Gets the list of Service Fabric cluster resources created in the specified subscription.",
        "description": "Gets all Service Fabric cluster resources created or in the process of being created in the subscription.",
        "parameters": [
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "$ref": "#/parameters/subscriptionId"
          }
        ],
        "tags": [
          "ManagedCluster"
        ],
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "List managed clusters": {
            "$ref": "./examples/ManagedClusterListBySubscriptionOperation_example.json"
          }
        },
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/ManagedClusterListResult"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/managedClusters/{clusterName}": {
      "get": {
        "tags": [
          "ManagedCluster"
        ],
        "operationId": "ManagedClusters_Get",
        "summary": "Gets a Service Fabric managed cluster resource.",
        "description": "Get a Service Fabric managed cluster resource created or in the process of being created in the specified resource group.",
        "parameters": [
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/clusterNameParameter"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "$ref": "#/parameters/subscriptionId"
          }
        ],
        "x-ms-examples": {
          "Get a cluster": {
            "$ref": "./examples/ManagedClusterGetOperation_example.json"
          }
        },
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/ManagedCluster"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      },
      "put": {
        "tags": [
          "ManagedCluster"
        ],
        "operationId": "ManagedClusters_CreateOrUpdate",
        "summary": "Creates or updates a Service Fabric managed cluster resource.",
        "description": "Create or update a Service Fabric managed cluster resource with the specified name.",
        "parameters": [
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/clusterNameParameter"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "The cluster resource.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagedCluster"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "x-ms-examples": {
          "Put a cluster with minimum parameters": {
            "$ref": "./examples/ManagedClusterPutOperation_example_min.json"
          },
          "Put a cluster with maximum parameters": {
            "$ref": "./examples/ManagedClusterPutOperation_example_max.json"
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "responses": {
          "201": {
            "description": "The request was accepted and the operation will complete asynchronously.",
            "schema": {
              "$ref": "#/definitions/ManagedCluster"
            }
          },
          "200": {
            "description": "The operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/ManagedCluster"
            }
          },
          "202": {
            "description": "The request was accepted and the operation will complete asynchronously.",
            "schema": {
              "$ref": "#/definitions/ManagedCluster"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "ManagedCluster"
        ],
        "operationId": "ManagedClusters_Update",
        "summary": "Updates the configuration of a Service Fabric managed cluster resource.",
        "description": "Update the configuration of a Service Fabric managed cluster resource with the specified name.",
        "parameters": [
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/clusterNameParameter"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "The parameters to update the managed cluster configuration.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagedClusterUpdateParameters"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-examples": {
          "Patch a managed cluster": {
            "$ref": "./examples/ManagedClusterPatchOperation_example.json"
          }
        },
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/ManagedCluster"
            }
          },
          "202": {
            "description": "The request was accepted and the operation will complete asynchronously.",
            "schema": {
              "$ref": "#/definitions/ManagedCluster"
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ManagedCluster"
        ],
        "operationId": "ManagedClusters_Delete",
        "summary": "Deletes a Service Fabric managed cluster resource.",
        "description": "Delete a Service Fabric managed cluster resource with the specified name.",
        "parameters": [
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/clusterNameParameter"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "$ref": "#/parameters/subscriptionId"
          }
        ],
        "x-ms-examples": {
          "Delete a cluster": {
            "$ref": "./examples/ManagedClusterDeleteOperation_example.json"
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "responses": {
          "202": {
            "description": "The request was accepted and the operation will complete asynchronously."
          },
          "204": {
            "description": "The resource was not found."
          },
          "200": {
            "description": "The operation completed successfully."
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/providers/Microsoft.ServiceFabric/operations": {
      "get": {
        "tags": [
          "Operations"
        ],
        "summary": "Lists all of the available Service Fabric resource provider API operations.",
        "description": "Get the list of available Service Fabric resource provider API operations.",
        "operationId": "Operations_List",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The version of the Service Fabric resource provider API",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/OperationListResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.ServiceFabric/managedclusters/locations/{location}/osType/{osType}/clusterVersions": {
      "get": {
        "operationId": "ManagedClusterVersions_ListByOS",
        "summary": "Gets the list of Service Fabric cluster code versions available for the specified OS type.",
        "description": "Gets all available code versions for Service Fabric cluster resources by OS type.",
        "parameters": [
          {
            "$ref": "#/parameters/locationForClusterCodeVersions"
          },
          {
            "$ref": "#/parameters/osType"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "$ref": "#/parameters/subscriptionId"
          }
        ],
        "x-ms-examples": {
          "List cluster versions by OS": {
            "$ref": "./examples/ManagedClusterVersionsListByOS_example.json"
          }
        },
        "tags": [
          "ManagedClusterVersion"
        ],
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ManagedClusterVersionDetails"
              },
              "description": "The list of available Service Fabric runtime versions."
            }
          },
          "default": {
            "description": "The detailed error response.",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AzureActiveDirectory": {
      "properties": {
        "tenantId": {
          "type": "string",
          "description": "Azure active directory tenant id."
        },
        "clusterApplication": {
          "type": "string",
          "description": "Azure active directory cluster application id."
        },
        "clientApplication": {
          "type": "string",
          "description": "Azure active directory client application id."
        }
      },
      "description": "The settings to enable AAD authentication on the cluster."
    },
    "ClientCertificate": {
      "required": [
        "isAdmin"
      ],
      "properties": {
        "isAdmin": {
          "type": "boolean",
          "description": "Whether the certificate is admin or not."
        },
        "thumbprint": {
          "type": "string",
          "description": "Certificate Thumbprint."
        },
        "commonName": {
          "type": "string",
          "description": "Certificate Common name."
        },
        "issuerThumbprint": {
          "type": "string",
          "description": "Issuer thumbprint for the certificate. Its only use ehn CommonName is used."
        }
      },
      "description": "Client Certificate definition."
    },
    "ClusterOsType": {
      "type": "string",
      "description": "Cluster operating system type.",
      "enum": [
        "Windows",
        "Ubuntu",
        "RedHat",
        "Ubuntu18_04"
      ]
    },
    "ClusterState": {
      "type": "string",
      "description": "The current state of the cluster.\n\n  - WaitingForNodes - Indicates that the cluster resource is created and the resource provider is waiting for Service Fabric VM extension to boot up and report to it.\n  - Deploying - Indicates that the Service Fabric runtime is being installed on the VMs. Cluster resource will be in this state until the cluster boots up and system services are up.\n  - BaselineUpgrade - Indicates that the cluster is upgrading to establishes the cluster version. This upgrade is automatically initiated when the cluster boots up for the first time.\n  - UpdatingUserConfiguration - Indicates that the cluster is being upgraded with the user provided configuration.\n  - UpdatingUserCertificate - Indicates that the cluster is being upgraded with the user provided certificate.\n  - UpdatingInfrastructure - Indicates that the cluster is being upgraded with the latest Service Fabric runtime version. This happens only when the **upgradeMode** is set to 'Automatic'.\n  - EnforcingClusterVersion - Indicates that cluster is on a different version than expected and the cluster is being upgraded to the expected version.\n  - UpgradeServiceUnreachable - Indicates that the system service in the cluster is no longer polling the Resource Provider. Clusters in this state cannot be managed by the Resource Provider.\n  - AutoScale - Indicates that the ReliabilityLevel of the cluster is being adjusted.\n  - Ready - Indicates that the cluster is in a stable state.\n",
      "enum": [
        "WaitingForNodes",
        "Deploying",
        "BaselineUpgrade",
        "UpdatingUserConfiguration",
        "UpdatingUserCertificate",
        "UpdatingInfrastructure",
        "EnforcingClusterVersion",
        "UpgradeServiceUnreachable",
        "AutoScale",
        "Ready"
      ]
    },
    "ManagedClusterVersionDetails": {
      "properties": {
        "msiVersion": {
          "type": "string",
          "description": "The Service Fabric runtime version of the cluster."
        },
        "supportExpiryUtc": {
          "type": "string",
          "description": "The date of expiry of support of the version."
        },
        "osType": {
          "$ref": "#/definitions/ClusterOsType",
          "description": "Indicates the operating system of the cluster."
        }
      },
      "description": "The detail of the Service Fabric runtime version."
    },
    "LoadBalancingRule": {
      "required": [
        "frontendPort",
        "backendPort",
        "protocol",
        "probeProtocol"
      ],
      "properties": {
        "frontendPort": {
          "type": "integer",
          "format": "int32",
          "description": "The port for the external endpoint. Port numbers for each rule must be unique within the Load Balancer. Acceptable values are between 1 and 65534.",
          "minimum": 1,
          "maximum": 65534
        },
        "backendPort": {
          "type": "integer",
          "format": "int32",
          "description": "The port used for internal connections on the endpoint. Acceptable values are between 1 and 65535.",
          "minimum": 1,
          "maximum": 65534
        },
        "protocol": {
          "type": "string",
          "description": "The reference to the transport protocol used by the load balancing rule.",
          "enum": [
            "tcp",
            "udp"
          ],
          "x-ms-enum": {
            "name": "protocol",
            "modelAsString": true
          }
        },
        "probeProtocol": {
          "type": "string",
          "description": "the reference to the load balancer probe used by the load balancing rule.",
          "enum": [
            "tcp",
            "http",
            "https"
          ],
          "x-ms-enum": {
            "name": "probeProtocol",
            "modelAsString": true
          }
        },
        "probeRequestPath": {
          "type": "string",
          "description": "The probe request path. Only supported for HTTP/HTTPS probes."
        }
      },
      "description": "Describes a load balancing rule."
    },
    "ManagedCluster": {
      "type": "object",
      "description": "The manged cluster resource\n",
      "allOf": [
        {
          "description": "The managed cluster resource properties"
        },
        {
          "$ref": "#/definitions/Resource"
        },
        {
          "type": "object",
          "properties": {
            "properties": {
              "x-ms-client-flatten": true,
              "$ref": "#/definitions/ManagedClusterProperties",
              "description": "The managed cluster resource properties"
            },
            "sku": {
              "$ref": "#/definitions/Sku",
              "description": "The sku of the managed cluster"
            }
          }
        }
      ]
    },
    "ManagedClusterListResult": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ManagedCluster"
          }
        },
        "nextLink": {
          "type": "string",
          "description": "The URL to use for getting the next set of results."
        }
      },
      "description": "Managed Cluster list results"
    },
    "ManagedClusterProperties": {
      "required": [
        "dnsName",
        "adminUserName"
      ],
      "properties": {
        "dnsName": {
          "type": "string",
          "description": "The cluster dns name."
        },
        "fqdn": {
          "type": "string",
          "description": "the cluster Fully qualified domain name.",
          "readOnly": true
        },
        "clusterId": {
          "type": "string",
          "description": "A service generated unique identifier for the cluster resource.",
          "readOnly": true
        },
        "clusterState": {
          "readOnly": true,
          "$ref": "#/definitions/ClusterState",
          "description": "The current state of the cluster.\n\n  - WaitingForNodes - Indicates that the cluster resource is created and the resource provider is waiting for Service Fabric VM extension to boot up and report to it.\n  - Deploying - Indicates that the Service Fabric runtime is being installed on the VMs. Cluster resource will be in this state until the cluster boots up and system services are up.\n  - BaselineUpgrade - Indicates that the cluster is upgrading to establishes the cluster version. This upgrade is automatically initiated when the cluster boots up for the first time.\n  - UpdatingUserConfiguration - Indicates that the cluster is being upgraded with the user provided configuration.\n  - UpdatingUserCertificate - Indicates that the cluster is being upgraded with the user provided certificate.\n  - UpdatingInfrastructure - Indicates that the cluster is being upgraded with the latest Service Fabric runtime version. This happens only when the **upgradeMode** is set to 'Automatic'.\n  - EnforcingClusterVersion - Indicates that cluster is on a different version than expected and the cluster is being upgraded to the expected version.\n  - UpgradeServiceUnreachable - Indicates that the system service in the cluster is no longer polling the Resource Provider. Clusters in this state cannot be managed by the Resource Provider.\n  - AutoScale - Indicates that the ReliabilityLevel of the cluster is being adjusted.\n  - Ready - Indicates that the cluster is in a stable state.\n"
        },
        "clusterCertificateThumbprint": {
          "type": "string",
          "description": "The cluster certificate thumbprint used node to node communication.",
          "readOnly": true
        },
        "clientConnectionPort": {
          "type": "integer",
          "format": "int32",
          "description": "The port used for client connections to the cluster.",
          "default": 19000
        },
        "httpGatewayConnectionPort": {
          "type": "integer",
          "format": "int32",
          "description": "The port used for http connections to the cluster.",
          "default": 19080
        },
        "adminUserName": {
          "type": "string",
          "description": "vm admin user name."
        },
        "adminPassword": {
          "x-ms-secret": true,
          "type": "string",
          "format": "password",
          "description": "vm admin user password."
        },
        "loadBalancingRules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LoadBalancingRule"
          },
          "description": "Describes load balancing rules."
        },
        "clients": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClientCertificate"
          },
          "description": "client certificates for the cluster."
        },
        "azureActiveDirectory": {
          "$ref": "#/definitions/AzureActiveDirectory",
          "description": "Azure active directory."
        },
        "fabricSettings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SettingsSectionDescription"
          },
          "description": "The list of custom fabric settings to configure the cluster."
        },
        "useTestExtension": {
          "type": "boolean",
          "description": "Use service fabric test vm extension, by default it's false."
        },
        "provisioningState": {
          "$ref": "#/definitions/ManagedResourceProvisioningState",
          "description": "The provisioning state of the managed cluster resource.",
          "readOnly": true
        },
        "clusterCodeVersion": {
          "type": "string",
          "description": "The Service Fabric runtime version of the cluster. This property can only by set the user when **upgradeMode** is set to 'Manual'. To get list of available Service Fabric versions for new clusters use [ClusterVersion API](./ClusterVersion.md). To get the list of available version for existing clusters use **availableClusterVersions**."
        },
        "clusterUpgradeMode": {
          "$ref": "#/definitions/UpgradeMode",
          "description": "The upgrade mode of the cluster when new Service Fabric runtime version is available.\n\n  - Automatic - The cluster will be automatically upgraded to the latest Service Fabric runtime version as soon as it is available.\n  - Manual - The cluster will not be automatically upgraded to the latest Service Fabric runtime version. The cluster is upgraded by setting the **clusterCodeVersion** property in the cluster resource.\n"
        },
        "clusterUpgradeDescription": {
          "$ref": "#/definitions/ClusterUpgradePolicy",
          "description": "Describes the policy used when upgrading the cluster."
        },
        "reverseProxyEndpointPort": {
          "type": "integer",
          "format": "int32",
          "description": "The endpoint used by reverse proxy."
        }
      },
      "description": "Describes the managed cluster resource properties."
    },
    "ManagedClusterPropertiesUpdateParameters": {
      "properties": {
        "clientConnectionPort": {
          "type": "integer",
          "format": "int32",
          "description": "The port used for client connections to the cluster."
        },
        "httpGatewayConnectionPort": {
          "type": "integer",
          "format": "int32",
          "description": "The port used for http connections to the cluster."
        },
        "loadBalancingRules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LoadBalancingRule"
          },
          "description": "Describes a load balancing rule."
        },
        "clients": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClientCertificate"
          },
          "description": "client certificates for the cluster."
        },
        "azureActiveDirectory": {
          "$ref": "#/definitions/AzureActiveDirectory",
          "description": "Azure active directory."
        },
        "fabricSettings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SettingsSectionDescription"
          },
          "description": "The list of custom fabric settings to configure the cluster."
        },
        "clusterCodeVersion": {
          "type": "string",
          "description": "The Service Fabric runtime version of the cluster. This property can only by set the user when **upgradeMode** is set to 'Manual'. To get list of available Service Fabric versions for new clusters use [ClusterVersion API](./ClusterVersion.md). To get the list of available version for existing clusters use **availableClusterVersions**."
        },
        "clusterUpgradeMode": {
          "$ref": "#/definitions/UpgradeMode",
          "description": "The upgrade mode of the cluster when new Service Fabric runtime version is available.\n\n  - Automatic - The cluster will be automatically upgraded to the latest Service Fabric runtime version as soon as it is available.\n  - Manual - The cluster will not be automatically upgraded to the latest Service Fabric runtime version. The cluster is upgraded by setting the **clusterCodeVersion** property in the cluster resource.\n"
        },
        "clusterUpgradeDescription": {
          "$ref": "#/definitions/ClusterUpgradePolicy",
          "description": "Describes the policy used when upgrading the cluster."
        },
        "reverseProxyEndpointPort": {
          "type": "integer",
          "format": "int32",
          "description": "The endpoint used by reverse proxy."
        }
      },
      "description": "Describes the managed cluster resource properties."
    },
    "ManagedClusterUpdateParameters": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/ManagedClusterPropertiesUpdateParameters",
          "description": "Describes the managed cluster resource properties."
        },
        "tags": {
          "type": "object",
          "description": "Managed cluster update parameters",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "description": "Managed cluster update request"
    },
    "Sku": {
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "$ref": "#/definitions/SkuName",
          "description": "Sku Name. Basic will hav a minimum of 3 seed nodes and Standard a minimum of 5. Basic only allows 1 node type."
        }
      },
      "description": "Sku definition"
    },
    "SkuName": {
      "type": "string",
      "description": "Sku Name. Basic will hav a minimum of 3 seed nodes and Standard a minimum of 5. Basic only allows 1 node type.",
      "enum": [
        "Basic",
        "Standard"
      ]
    },
    "AvailableOperationDisplay": {
      "properties": {
        "provider": {
          "type": "string",
          "description": "The name of the provider."
        },
        "resource": {
          "type": "string",
          "description": "The resource on which the operation is performed"
        },
        "operation": {
          "type": "string",
          "description": "The operation that can be performed."
        },
        "description": {
          "type": "string",
          "description": "Operation description"
        }
      },
      "description": "Operation supported by the Service Fabric resource provider"
    },
    "ApplicationDeltaHealthPolicy": {
      "type": "object",
      "description": "Defines a delta health policy used to evaluate the health of an application or one of its child entities when upgrading the cluster.\n",
      "properties": {
        "defaultServiceTypeDeltaHealthPolicy": {
          "$ref": "#/definitions/ServiceTypeDeltaHealthPolicy",
          "description": "The delta health policy used by default to evaluate the health of a service type when upgrading the cluster."
        },
        "serviceTypeDeltaHealthPolicies": {
          "$ref": "#/definitions/ServiceTypeDeltaHealthPolicyMap",
          "description": "The map with service type delta health policy per service type name. The map is empty by default."
        }
      }
    },
    "ApplicationDeltaHealthPolicyMap": {
      "type": "object",
      "description": "Defines a map that contains specific application delta health policies for different applications.\nEach entry specifies as key the application name and as value an ApplicationDeltaHealthPolicy used to evaluate the application health when upgrading the cluster.\nThe application name should include the 'fabric:' URI scheme.\nThe map is empty by default.\n",
      "additionalProperties": {
        "$ref": "#/definitions/ApplicationDeltaHealthPolicy"
      }
    },
    "ApplicationHealthPolicy": {
      "type": "object",
      "description": "Defines a health policy used to evaluate the health of an application or one of its children entities.\n",
      "properties": {
        "defaultServiceTypeHealthPolicy": {
          "$ref": "#/definitions/ServiceTypeHealthPolicy",
          "description": "The health policy used by default to evaluate the health of a service type."
        },
        "serviceTypeHealthPolicies": {
          "$ref": "#/definitions/ServiceTypeHealthPolicyMap",
          "description": "The map with service type health policy per service type name. The map is empty by default."
        }
      }
    },
    "ApplicationHealthPolicyMap": {
      "type": "object",
      "description": "Defines a map that contains specific application health policies for different applications.\nEach entry specifies as key the application name and as value an ApplicationHealthPolicy used to evaluate the application health.\nThe application name should include the 'fabric:' URI scheme.\nThe map is empty by default.\n",
      "additionalProperties": {
        "$ref": "#/definitions/ApplicationHealthPolicy"
      }
    },
    "ClusterHealthPolicy": {
      "type": "object",
      "description": "Defines a health policy used to evaluate the health of the cluster or of a cluster node.\n",
      "properties": {
        "maxPercentUnhealthyNodes": {
          "type": "integer",
          "description": "The maximum allowed percentage of unhealthy nodes before reporting an error. For example, to allow 10% of nodes to be unhealthy, this value would be 10.\n\nThe percentage represents the maximum tolerated percentage of nodes that can be unhealthy before the cluster is considered in error.\nIf the percentage is respected but there is at least one unhealthy node, the health is evaluated as Warning.\nThe percentage is calculated by dividing the number of unhealthy nodes over the total number of nodes in the cluster.\nThe computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.\n\nIn large clusters, some nodes will always be down or out for repairs, so this percentage should be configured to tolerate that.\n",
          "default": 0,
          "minimum": 0,
          "maximum": 100
        },
        "maxPercentUnhealthyApplications": {
          "type": "integer",
          "description": "The maximum allowed percentage of unhealthy applications before reporting an error. For example, to allow 10% of applications to be unhealthy, this value would be 10.\n\nThe percentage represents the maximum tolerated percentage of applications that can be unhealthy before the cluster is considered in error.\nIf the percentage is respected but there is at least one unhealthy application, the health is evaluated as Warning.\nThis is calculated by dividing the number of unhealthy applications over the total number of application instances in the cluster, excluding applications of application types that are included in the ApplicationTypeHealthPolicyMap.\nThe computation rounds up to tolerate one failure on small numbers of applications. Default percentage is zero.\n",
          "default": 0,
          "minimum": 0,
          "maximum": 100
        },
        "applicationHealthPolicies": {
          "$ref": "#/definitions/ApplicationHealthPolicyMap",
          "description": "Defines the application health policy map used to evaluate the health of an application or one of its children entities."
        }
      }
    },
    "ClusterUpgradeDeltaHealthPolicy": {
      "description": "Describes the delta health policies for the cluster upgrade.",
      "required": [
        "maxPercentDeltaUnhealthyApplications",
        "maxPercentDeltaUnhealthyNodes",
        "maxPercentUpgradeDomainDeltaUnhealthyNodes"
      ],
      "properties": {
        "maxPercentDeltaUnhealthyNodes": {
          "type": "integer",
          "description": "The maximum allowed percentage of nodes health degradation allowed during cluster upgrades.\nThe delta is measured between the state of the nodes at the beginning of upgrade and the state of the nodes at the time of the health evaluation.\nThe check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits.\n",
          "minimum": 0,
          "maximum": 100
        },
        "maxPercentUpgradeDomainDeltaUnhealthyNodes": {
          "type": "integer",
          "description": "The maximum allowed percentage of upgrade domain nodes health degradation allowed during cluster upgrades.\nThe delta is measured between the state of the upgrade domain nodes at the beginning of upgrade and the state of the upgrade domain nodes at the time of the health evaluation.\nThe check is performed after every upgrade domain upgrade completion for all completed upgrade domains to make sure the state of the upgrade domains is within tolerated limits.\n",
          "minimum": 0,
          "maximum": 100
        },
        "maxPercentDeltaUnhealthyApplications": {
          "type": "integer",
          "description": "The maximum allowed percentage of applications health degradation allowed during cluster upgrades.\nThe delta is measured between the state of the applications at the beginning of upgrade and the state of the applications at the time of the health evaluation.\nThe check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits. System services are not included in this.\n",
          "minimum": 0,
          "maximum": 100
        },
        "applicationDeltaHealthPolicies": {
          "$ref": "#/definitions/ApplicationDeltaHealthPolicyMap",
          "description": "Defines the application delta health policy map used to evaluate the health of an application or one of its child entities when upgrading the cluster."
        }
      }
    },
    "ClusterUpgradePolicy": {
      "required": [
        "healthCheckRetryTimeout",
        "healthCheckStableDuration",
        "healthCheckWaitDuration",
        "healthPolicy",
        "upgradeDomainTimeout",
        "upgradeReplicaSetCheckTimeout",
        "upgradeTimeout"
      ],
      "properties": {
        "forceRestart": {
          "type": "boolean",
          "description": "If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data)."
        },
        "upgradeReplicaSetCheckTimeout": {
          "type": "string",
          "description": "The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format."
        },
        "healthCheckWaitDuration": {
          "type": "string",
          "description": "The length of time to wait after completing an upgrade domain before performing health checks. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format."
        },
        "healthCheckStableDuration": {
          "type": "string",
          "description": "The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format."
        },
        "healthCheckRetryTimeout": {
          "type": "string",
          "description": "The amount of time to retry health evaluation when the application or cluster is unhealthy before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format."
        },
        "upgradeTimeout": {
          "type": "string",
          "description": "The amount of time the overall upgrade has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format."
        },
        "upgradeDomainTimeout": {
          "type": "string",
          "description": "The amount of time each upgrade domain has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format."
        },
        "healthPolicy": {
          "$ref": "#/definitions/ClusterHealthPolicy",
          "description": "The cluster health policy used when upgrading the cluster."
        },
        "deltaHealthPolicy": {
          "$ref": "#/definitions/ClusterUpgradeDeltaHealthPolicy",
          "description": "The cluster delta health policy used when upgrading the cluster."
        }
      },
      "description": "Describes the policy used when upgrading the cluster."
    },
    "ErrorModel": {
      "properties": {
        "error": {
          "$ref": "#/definitions/ErrorModelError",
          "description": "The error details."
        }
      },
      "description": "The structure of the error."
    },
    "ErrorModelError": {
      "properties": {
        "code": {
          "type": "string",
          "description": "The error code."
        },
        "message": {
          "type": "string",
          "description": "The error message."
        }
      },
      "description": "The error details."
    },
    "ManagedResourceProvisioningState": {
      "type": "string",
      "description": "The provisioning state of the managed resource.",
      "enum": [
        "None",
        "Creating",
        "Created",
        "Updating",
        "Succeeded",
        "Failed",
        "Canceled",
        "Deleting",
        "Deleted",
        "Other"
      ]
    },
    "OperationListResult": {
      "properties": {
        "value": {
          "type": "array",
          "description": "List of operations supported by the Service Fabric resource provider.",
          "items": {
            "$ref": "#/definitions/OperationResult"
          }
        },
        "nextLink": {
          "type": "string",
          "description": "URL to get the next set of operation list results if there are any.",
          "readOnly": true
        }
      },
      "description": "Describes the result of the request to list Service Fabric resource provider operations."
    },
    "OperationResult": {
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the operation."
        },
        "display": {
          "$ref": "#/definitions/AvailableOperationDisplay",
          "description": "The object that represents the operation."
        },
        "origin": {
          "type": "string",
          "description": "Origin result"
        },
        "nextLink": {
          "type": "string",
          "description": "The URL to use for getting the next set of results."
        }
      },
      "description": "Available operation list result"
    },
    "Resource": {
      "required": [
        "location"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Azure resource identifier.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Azure resource name.",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "Azure resource type.",
          "readOnly": true
        },
        "location": {
          "type": "string",
          "description": "Azure resource location.",
          "x-ms-mutability": [
            "create",
            "read"
          ]
        },
        "tags": {
          "type": "object",
          "description": "Azure resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "etag": {
          "type": "string",
          "description": "Azure resource etag.",
          "readOnly": true
        }
      },
      "description": "The resource model definition.",
      "x-ms-azure-resource": true
    },
    "ServiceTypeDeltaHealthPolicy": {
      "type": "object",
      "description": "Represents the delta health policy used to evaluate the health of services belonging to a service type when upgrading the cluster.\n",
      "properties": {
        "maxPercentDeltaUnhealthyServices": {
          "type": "integer",
          "description": "The maximum allowed percentage of services health degradation allowed during cluster upgrades.\nThe delta is measured between the state of the services at the beginning of upgrade and the state of the services at the time of the health evaluation.\nThe check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits.\n",
          "default": 0,
          "minimum": 0,
          "maximum": 100
        }
      }
    },
    "ServiceTypeDeltaHealthPolicyMap": {
      "type": "object",
      "description": "Defines a map that contains specific delta health policies for different service types.\nEach entry specifies as key the service type name and as value a ServiceTypeDeltaHealthPolicy used to evaluate the service health when upgrading the cluster.\nThe map is empty by default.\n",
      "additionalProperties": {
        "$ref": "#/definitions/ServiceTypeDeltaHealthPolicy"
      }
    },
    "ServiceTypeHealthPolicy": {
      "type": "object",
      "description": "Represents the health policy used to evaluate the health of services belonging to a service type.\n",
      "properties": {
        "maxPercentUnhealthyServices": {
          "type": "integer",
          "description": "The maximum percentage of services allowed to be unhealthy before your application is considered in error.\n",
          "default": 0,
          "minimum": 0,
          "maximum": 100
        }
      }
    },
    "ServiceTypeHealthPolicyMap": {
      "type": "object",
      "description": "Defines a ServiceTypeHealthPolicy per service type name.\n\nThe entries in the map replace the default service type health policy for each specified service type.\nFor example, in an application that contains both a stateless gateway service type and a stateful engine service type, the health policies for the stateless and stateful services can be configured differently.\nWith policy per service type, there's more granular control of the health of the service.\n\nIf no policy is specified for a service type name, the DefaultServiceTypeHealthPolicy is used for evaluation.\n",
      "additionalProperties": {
        "$ref": "#/definitions/ServiceTypeHealthPolicy"
      }
    },
    "SettingsParameterDescription": {
      "required": [
        "name",
        "value"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The parameter name of fabric setting."
        },
        "value": {
          "type": "string",
          "description": "The parameter value of fabric setting."
        }
      },
      "description": "Describes a parameter in fabric settings of the cluster."
    },
    "SettingsSectionDescription": {
      "required": [
        "name",
        "parameters"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The section name of the fabric settings."
        },
        "parameters": {
          "type": "array",
          "description": "The collection of parameters in the section.",
          "items": {
            "$ref": "#/definitions/SettingsParameterDescription"
          }
        }
      },
      "description": "Describes a section in the fabric settings of the cluster."
    },
    "UpgradeMode": {
      "type": "string",
      "description": "The upgrade mode of the cluster when new Service Fabric runtime version is available.\n\n  - Automatic - The cluster will be automatically upgraded to the latest Service Fabric runtime version as soon as it is available.\n  - Manual - The cluster will not be automatically upgraded to the latest Service Fabric runtime version. The cluster is upgraded by setting the **clusterCodeVersion** property in the cluster resource.\n",
      "enum": [
        "Automatic",
        "Manual"
      ]
    }
  },
  "parameters": {
    "api-version": {
      "name": "api-version",
      "in": "query",
      "description": "The version of the Service Fabric resource provider API. This is a required parameter and it's value must be \"2020-01-01-preview\" for this specification.",
      "required": true,
      "type": "string",
      "enum": [
        "2020-01-01-preview"
      ],
      "default": "2020-01-01-preview",
      "x-ms-parameter-location": "client"
    },
    "clusterNameParameter": {
      "name": "clusterName",
      "in": "path",
      "description": "The name of the cluster resource.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "clusterVersion": {
      "name": "clusterVersion",
      "in": "path",
      "description": "The cluster code version.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "locationForClusterCodeVersions": {
      "name": "location",
      "in": "path",
      "description": "The location for the cluster code versions. This is different from cluster location.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "osType": {
      "name": "osType",
      "in": "path",
      "description": "The operating system of the cluster.",
      "required": true,
      "type": "string",
      "enum": [
        "Windows",
        "Ubuntu",
        "RedHat",
        "Ubuntu18_04"
      ],
      "x-ms-parameter-location": "method"
    },
    "resourceGroupNameParameter": {
      "name": "resourceGroupName",
      "in": "path",
      "description": "The name of the resource group.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "subscriptionId": {
      "name": "subscriptionId",
      "in": "path",
      "description": "The customer subscription identifier.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "client"
    }
  }
}
