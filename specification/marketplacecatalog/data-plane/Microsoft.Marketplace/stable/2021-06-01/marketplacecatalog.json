{
  "swagger": "2.0",
  "info": {
    "version": "2021-06-01",
    "title": "marketplacecatalog",
    "description": "Description of the new service",
    "x-ms-code-generation-settings": {
      "name": "marketplacecatalogClient"
    }
  },
  "host": "catalogapi.azure.com",
  "schemes": ["https"],
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "security": [
    {
      "azure_auth": ["user_impersonation"]
    }
  ],
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "flow": "implicit",
      "description": "Azure Active Directory OAuth2 Flow",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      }
    }
  },
  "paths": {
    "/offers/{id}": {
      "get": {
        "tags": [
          "Public-Offers-Single"
        ],
        "operationId": "SinglePublicOffer_Get",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true,
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "api-version",
            "x-originalName": "apiVersion",
            "in": "query",
            "required": true,
            "default": "2021-06-01",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "language",
            "in": "query",
            "default": "en",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "market",
            "in": "query",
            "default": "US",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "includeStopSoldPlans",
            "in": "query",
            "default": false,
            "x-nullable": false
          },
          {
            "type": "array",
            "name": "hideKeys",
            "in": "query",
            "collectionFormat": "multi",
            "x-nullable": true,
            "items": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Returns a single public or preview offer",
            "schema": {
              "$ref": "#/definitions/CatalogItem"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "In case offer does not exist",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/products/{id}": {
      "get": {
        "tags": [
          "Public-Offers-Single"
        ],
        "operationId": "SinglePublicOffer_Get2",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true,
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "api-version",
            "x-originalName": "apiVersion",
            "in": "query",
            "required": true,
            "default": "2021-06-01",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "language",
            "in": "query",
            "default": "en",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "market",
            "in": "query",
            "default": "US",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "includeStopSoldPlans",
            "in": "query",
            "default": false,
            "x-nullable": false
          },
          {
            "type": "array",
            "name": "hideKeys",
            "in": "query",
            "collectionFormat": "multi",
            "x-nullable": true,
            "items": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Returns a single public or preview offer",
            "schema": {
              "$ref": "#/definitions/CatalogItem"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "In case offer does not exist",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "CatalogItem": {
      "allOf": [
        {
          "$ref": "#/definitions/GalleryItemEntity"
        },
        {
          "type": "object",
          "properties": {
            "searchScore": {
              "type": "number",
              "format": "double"
            }
          }
        }
      ]
    },
    "GalleryItemEntity": {
      "allOf": [
        {
          "$ref": "#/definitions/ResourceEntity"
        },
        {
          "type": "object",
          "required": [
            "language",
            "hasStandardContractAmendments",
            "offerId",
            "legacyId",
            "standardContractAmendmentsRevisionId",
            "offerType",
            "isPrivate",
            "isPreview",
            "isStopSell",
            "fulfillBeforeChargeEligible",
            "bigId",
            "legalTermsType",
            "isDeleted",
            "isThirdParty",
            "popularity",
            "hasFreeTrials",
            "isByol",
            "isMacc",
            "hasFreePlans",
            "isQuantifiable",
            "hasPaygPlans",
            "isReseller",
            "isExcludedFromSearch",
            "offerEnvironment",
            "excludeFromBootstrap",
            "disableSendEmailOnPurchase",
            "hideFromSaasBlade",
            "integratedWithMicrosoftGraphApi"
          ],
          "properties": {
            "language": {
              "type": "string"
            },
            "displayName": {
              "type": "string"
            },
            "hasStandardContractAmendments": {
              "type": "boolean"
            },
            "publisherMpnId": {
              "type": "string"
            },
            "sellerId": {
              "type": "string"
            },
            "publisherId": {
              "type": "string"
            },
            "partnerCenterId": {
              "type": "string"
            },
            "publisherDisplayName": {
              "type": "string"
            },
            "offerId": {
              "type": "string"
            },
            "legacyId": {
              "type": "string"
            },
            "determinedStorefronts": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Store"
              }
            },
            "standardContractAmendmentsRevisionId": {
              "type": "string",
              "format": "guid"
            },
            "summary": {
              "type": "string"
            },
            "longSummary": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "offerType": {
              "$ref": "#/definitions/OfferType"
            },
            "isPrivate": {
              "type": "boolean"
            },
            "isPreview": {
              "type": "boolean"
            },
            "isStopSell": {
              "type": "boolean"
            },
            "fulfillBeforeChargeEligible": {
              "type": "boolean"
            },
            "marketingMaterial": {
              "$ref": "#/definitions/MarketingMaterial"
            },
            "markets": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "isvContactDetails": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "bigId": {
              "type": "string"
            },
            "ocpSolutionId": {
              "type": "string"
            },
            "legalTermsUri": {
              "type": "string"
            },
            "cspLegalTermsUri": {
              "type": "string"
            },
            "legalTermsType": {
              "$ref": "#/definitions/LegalTermsType"
            },
            "privacyPolicyUri": {
              "type": "string"
            },
            "helpLink": {
              "type": "string"
            },
            "supportUri": {
              "type": "string"
            },
            "version": {
              "type": "string"
            },
            "uiDefinitionUri": {
              "type": "string"
            },
            "categoryIds": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "marketCode": {
              "type": "string"
            },
            "marketStates": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "industryIds": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "cloudIndustryCategories": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "primaryProduct": {
              "type": "string"
            },
            "supportedProducts": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "applicableProducts": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "serviceType": {
              "type": "string"
            },
            "competencies": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Competency"
              }
            },
            "hasPrices": {
              "type": "boolean"
            },
            "duration": {
              "$ref": "#/definitions/Duration"
            },
            "marketPricingDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MarketPricingDetailsItem"
              }
            },
            "pricing": {
              "$ref": "#/definitions/Pricing"
            },
            "solutionAreas": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "screenshotUris": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "links": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LinkProperties"
              }
            },
            "filters": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Filter"
              }
            },
            "iconFileUris": {
              "type": "object",
              "x-dictionaryKey": {
                "$ref": "#/definitions/IconKind"
              },
              "additionalProperties": {
                "type": "string"
              }
            },
            "artifacts": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Artifact"
              }
            },
            "metadata": {
              "$ref": "#/definitions/OfferMetadata"
            },
            "properties": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "images": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ImageGroup"
              }
            },
            "videos": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProductVideo"
              }
            },
            "plans": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Plan"
              }
            },
            "resourceGroupName": {
              "type": "string"
            },
            "definitionTemplates": {
              "$ref": "#/definitions/DefinitionTemplates"
            },
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "restrictedAudience": {
              "$ref": "#/definitions/RestrictedAudience"
            },
            "isDeleted": {
              "type": "boolean"
            },
            "isThirdParty": {
              "type": "boolean"
            },
            "groupId": {
              "type": "string"
            },
            "hideKeys": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "keywords": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "popularity": {
              "type": "number",
              "format": "double"
            },
            "pricingDetailsUri": {
              "type": "string"
            },
            "hasFreeTrials": {
              "type": "boolean"
            },
            "isByol": {
              "type": "boolean"
            },
            "isMacc": {
              "type": "boolean"
            },
            "hasFreePlans": {
              "type": "boolean"
            },
            "isQuantifiable": {
              "type": "boolean"
            },
            "altStackReference": {
              "type": "string"
            },
            "hasPaygPlans": {
              "type": "boolean"
            },
            "isReseller": {
              "type": "boolean"
            },
            "ttl": {
              "type": "integer",
              "format": "int32"
            },
            "isExcludedFromSearch": {
              "type": "boolean"
            },
            "applicableStoreFronts": {
              "$ref": "#/definitions/StoreFrontOptions"
            },
            "offerVersion": {
              "type": "string"
            },
            "isMicrosoftProduct": {
              "type": "boolean"
            },
            "productOwnershipSellingMotion": {
              "type": "string"
            },
            "documentLinks": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LinkProperties"
              }
            },
            "offerEnvironment": {
              "$ref": "#/definitions/EnvironmentInfo"
            },
            "linkedAddIns": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "excludeFromBootstrap": {
              "type": "boolean"
            },
            "hydrationNotificationRecivedAt": {
              "type": "string",
              "format": "date-time"
            },
            "bigCatLastModifiedDate": {
              "type": "string",
              "format": "date-time"
            },
            "disableSendEmailOnPurchase": {
              "type": "boolean"
            },
            "hideFromSaasBlade": {
              "type": "boolean"
            },
            "integratedWithMicrosoftGraphApi": {
              "type": "boolean"
            },
            "multiTenantAadAppId": {
              "type": "string"
            },
            "licenseManagementType": {
              "type": "string"
            },
            "licenseModel": {
              "type": "string"
            },
            "pbiServicePrincipalIds": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "isCoreVm": {
              "type": "boolean"
            },
            "m365CertificationInfo": {
              "$ref": "#/definitions/M365CertificationInfo"
            },
            "downloadLink": {
              "type": "string"
            },
            "downloadSampleLink": {
              "type": "string"
            },
            "omexAssetId": {
              "type": "string"
            },
            "mixProductId": {
              "type": "string"
            },
            "appFreeType": {
              "type": "string"
            },
            "storeFrontPricings": {
              "type": "object",
              "x-dictionaryKey": {
                "$ref": "#/definitions/Store"
              },
              "additionalProperties": {
                "$ref": "#/definitions/UIPricing"
              }
            }
          }
        }
      ]
    },
    "Store": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Appsource",
        "AMP",
        "Ibiza",
        "Cosell"
      ],
      "enum": [
        "Appsource",
        "AMP",
        "Ibiza",
        "Cosell"
      ]
    },
    "OfferType": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "None",
        "DevService",
        "ManagedApplication",
        "VirtualMachine",
        "AzureApplication",
        "Container",
        "SaaS",
        "SolutionTemplate",
        "IotEdgeModules",
        "ManagedServices",
        "ContainerApps",
        "VisualStudioExtension",
        "DynamicsOps",
        "DynamicsCE",
        "DynamicsBC",
        "PowerBI",
        "ConsultingServices",
        "CosellOnly",
        "CoreVirtualMachine",
        "PowerBIVisuals"
      ],
      "enum": [
        "None",
        "DevService",
        "ManagedApplication",
        "VirtualMachine",
        "AzureApplication",
        "Container",
        "SaaS",
        "SolutionTemplate",
        "IotEdgeModules",
        "ManagedServices",
        "ContainerApps",
        "VisualStudioExtension",
        "DynamicsOps",
        "DynamicsCE",
        "DynamicsBC",
        "PowerBI",
        "ConsultingServices",
        "CosellOnly",
        "CoreVirtualMachine",
        "PowerBIVisuals"
      ]
    },
    "MarketingMaterial": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        },
        "learnUri": {
          "type": "string"
        }
      }
    },
    "LegalTermsType": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "None",
        "EA"
      ],
      "enum": [
        "None",
        "EA"
      ]
    },
    "Competency": {
      "type": "object",
      "properties": {
        "competencyName": {
          "type": "string"
        },
        "competencyLevel": {
          "type": "string"
        }
      }
    },
    "Duration": {
      "type": "object",
      "required": [
        "durationValue",
        "durationUnit"
      ],
      "properties": {
        "durationValue": {
          "type": "integer",
          "format": "int64"
        },
        "durationUnit": {
          "$ref": "#/definitions/ServiceDurationUnit"
        }
      }
    },
    "ServiceDurationUnit": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Days",
        "Hours",
        "Weeks"
      ],
      "enum": [
        "Days",
        "Hours",
        "Weeks"
      ]
    },
    "MarketPricingDetailsItem": {
      "type": "object",
      "properties": {
        "pricing": {
          "$ref": "#/definitions/Pricing"
        },
        "marketCode": {
          "type": "string"
        },
        "marketStates": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Pricing": {
      "type": "object",
      "properties": {
        "currencyCode": {
          "type": "string"
        },
        "planPrices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PlanPrice"
          }
        }
      }
    },
    "PlanPrice": {
      "type": "object",
      "required": [
        "currencyDecorator",
        "price"
      ],
      "properties": {
        "planId": {
          "type": "string"
        },
        "currencyDecorator": {
          "$ref": "#/definitions/CurrencyDecorator"
        },
        "price": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "CurrencyDecorator": {
      "type": "integer",
      "description": "",
      "x-enumNames": [
        "Fixed",
        "Estimated"
      ],
      "enum": [
        0,
        1
      ]
    },
    "LinkProperties": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "uri": {
          "type": "string"
        }
      }
    },
    "Filter": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "IconKind": {
      "type": "integer",
      "description": "",
      "x-enumNames": [
        "Small",
        "Medium",
        "Large",
        "Wide",
        "Hero"
      ],
      "enum": [
        0,
        1,
        2,
        3,
        4
      ]
    },
    "Artifact": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "uri": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/ArtifactType"
        }
      }
    },
    "ArtifactType": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Template",
        "Fragment",
        "Custom",
        "Metadata"
      ],
      "enum": [
        "Template",
        "Fragment",
        "Custom",
        "Metadata"
      ]
    },
    "OfferMetadata": {
      "type": "object",
      "properties": {
        "leadGeneration": {
          "$ref": "#/definitions/LeadGeneration"
        },
        "testDrive": {
          "$ref": "#/definitions/TestDrive"
        }
      }
    },
    "LeadGeneration": {
      "type": "object",
      "properties": {
        "productId": {
          "type": "string"
        }
      }
    },
    "TestDrive": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "userManual": {
          "type": "string"
        },
        "testDriveDuration": {
          "type": "string"
        },
        "accessInformation": {
          "type": "string"
        },
        "orchestrationType": {
          "type": "string"
        },
        "labId": {
          "type": "string"
        },
        "demoId": {
          "type": "string"
        },
        "video": {
          "$ref": "#/definitions/ProductVideo"
        },
        "powerBiDashboardLink": {
          "type": "string"
        }
      }
    },
    "ProductVideo": {
      "type": "object",
      "properties": {
        "caption": {
          "type": "string"
        },
        "uri": {
          "type": "string",
          "format": "uri"
        },
        "videoPurpose": {
          "type": "string"
        },
        "previewImage": {
          "$ref": "#/definitions/PreviewImage"
        }
      }
    },
    "PreviewImage": {
      "type": "object",
      "properties": {
        "caption": {
          "type": "string"
        },
        "uri": {
          "type": "string",
          "format": "uri"
        },
        "imagePurpose": {
          "type": "string"
        }
      }
    },
    "ImageGroup": {
      "type": "object",
      "properties": {
        "context": {
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Image"
          }
        }
      }
    },
    "Image": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "uri": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "Plan": {
      "type": "object",
      "required": [
        "type",
        "isPrivate",
        "isHidden",
        "hasFreeTrials",
        "isByol",
        "isFree",
        "isPayg",
        "isStopSell",
        "cspState",
        "isQuantifiable"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "summary": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "restrictedAudience": {
          "$ref": "#/definitions/RestrictedAudience"
        },
        "skuId": {
          "type": "string"
        },
        "planId": {
          "type": "string"
        },
        "legacyPlanId": {
          "type": "string"
        },
        "keywords": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "$ref": "#/definitions/OfferType"
        },
        "leadGeneration": {
          "$ref": "#/definitions/LeadGeneration"
        },
        "testDrive": {
          "$ref": "#/definitions/TestDrive"
        },
        "availabilities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AvailabilityEntity"
          }
        },
        "categoryIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "conversionPaths": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "metadata": {
          "$ref": "#/definitions/OpenProperty"
        },
        "operatingSystem": {
          "$ref": "#/definitions/OperatingSystem"
        },
        "uiDefinitionUri": {
          "type": "string"
        },
        "artifacts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Artifact"
          }
        },
        "version": {
          "type": "string"
        },
        "itemName": {
          "type": "string"
        },
        "isPrivate": {
          "type": "boolean"
        },
        "isHidden": {
          "type": "boolean"
        },
        "hasFreeTrials": {
          "type": "boolean"
        },
        "isByol": {
          "type": "boolean"
        },
        "isFree": {
          "type": "boolean"
        },
        "isPayg": {
          "type": "boolean"
        },
        "isStopSell": {
          "type": "boolean"
        },
        "altStackReference": {
          "type": "string"
        },
        "stackType": {
          "type": "string"
        },
        "cspState": {
          "$ref": "#/definitions/CSPState"
        },
        "resourceProviderNamespace": {
          "type": "string"
        },
        "resourceType": {
          "type": "string"
        },
        "minQuantity": {
          "type": "integer",
          "format": "int32"
        },
        "maxQuantity": {
          "type": "integer",
          "format": "int32"
        },
        "isQuantifiable": {
          "type": "boolean"
        },
        "callToAction": {
          "type": "string"
        },
        "redirectUrl": {
          "type": "string"
        },
        "serviceIdentifier": {
          "type": "string"
        },
        "vmSecuritytype": {
          "$ref": "#/definitions/VmSecurityType"
        },
        "displayRank": {
          "type": "string"
        }
      }
    },
    "RestrictedAudience": {
      "type": "object",
      "properties": {
        "subscriptions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tenants": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "users": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "AvailabilityEntity": {
      "allOf": [
        {
          "$ref": "#/definitions/ResourceEntity"
        },
        {
          "type": "object",
          "required": [
            "isPIRequired",
            "pricingAudience",
            "isStopSell",
            "hasFreeTrials",
            "displayRank",
            "remediationRequired"
          ],
          "properties": {
            "actions": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "market": {
              "type": "string"
            },
            "isPIRequired": {
              "type": "boolean"
            },
            "appId": {
              "type": "string"
            },
            "planID": {
              "type": "string"
            },
            "meterId": {
              "type": "string"
            },
            "meter": {
              "$ref": "#/definitions/Meter"
            },
            "pricingAudience": {
              "$ref": "#/definitions/PricingAudience"
            },
            "terms": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Term"
              }
            },
            "piFilter": {
              "$ref": "#/definitions/PIFilter"
            },
            "isStopSell": {
              "type": "boolean"
            },
            "hasFreeTrials": {
              "type": "boolean"
            },
            "assetBehaviors": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "consumptionUnitType": {
              "type": "string"
            },
            "displayRank": {
              "type": "integer",
              "format": "int32"
            },
            "partitionKey": {
              "type": "string"
            },
            "remediationRequired": {
              "type": "boolean"
            },
            "remediations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Remediation"
              }
            },
            "startDate": {
              "type": "integer",
              "format": "int32"
            },
            "endDate": {
              "type": "integer",
              "format": "int32"
            },
            "planAvailabilities": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AvailabilityEntity"
              }
            }
          }
        }
      ]
    },
    "Meter": {
      "type": "object",
      "properties": {
        "meterId": {
          "type": "string"
        },
        "partNumber": {
          "type": "string"
        },
        "consumptionResourceId": {
          "type": "string"
        },
        "price": {
          "$ref": "#/definitions/Price"
        },
        "type": {
          "type": "string"
        },
        "includedQuantityProperties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IncludedQuantityProperty"
          }
        }
      }
    },
    "Price": {
      "type": "object",
      "required": [
        "isPIRequired",
        "listPrice",
        "msrp"
      ],
      "properties": {
        "currencyCode": {
          "type": "string"
        },
        "isPIRequired": {
          "type": "boolean"
        },
        "listPrice": {
          "type": "number",
          "format": "decimal"
        },
        "msrp": {
          "type": "number",
          "format": "decimal"
        }
      }
    },
    "IncludedQuantityProperty": {
      "allOf": [
        {
          "$ref": "#/definitions/IncludedQuantityProperty2"
        },
        {
          "type": "object"
        }
      ]
    },
    "IncludedQuantityProperty2": {
      "type": "object",
      "properties": {
        "termId": {
          "type": "string"
        },
        "quantity": {
          "type": "string"
        }
      }
    },
    "PricingAudience": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "None",
        "DirectCommercial",
        "PartnerCommercial",
        "Custom",
        "IndirectCommercial",
        "IndirectGov",
        "DirectChk",
        "DirectBlue"
      ],
      "enum": [
        "None",
        "DirectCommercial",
        "PartnerCommercial",
        "Custom",
        "IndirectCommercial",
        "IndirectGov",
        "DirectChk",
        "DirectBlue"
      ]
    },
    "Term": {
      "type": "object",
      "properties": {
        "termDescriptionParameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TermDescriptionParameter"
          }
        },
        "termId": {
          "type": "string"
        },
        "termUnits": {
          "type": "string"
        },
        "prorationPolicy": {
          "$ref": "#/definitions/ProrationPolicy"
        },
        "termDescription": {
          "type": "string"
        },
        "price": {
          "$ref": "#/definitions/Price"
        },
        "renewTermId": {
          "type": "string"
        },
        "renewTermUnits": {
          "type": "string"
        },
        "billingPlan": {
          "$ref": "#/definitions/BillingPlan"
        }
      }
    },
    "TermDescriptionParameter": {
      "type": "object",
      "properties": {
        "parameter": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "ProrationPolicy": {
      "type": "object",
      "properties": {
        "minimumProratedUnits": {
          "type": "string"
        }
      }
    },
    "BillingPlan": {
      "type": "object",
      "properties": {
        "billingPeriod": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "price": {
          "$ref": "#/definitions/Price"
        }
      }
    },
    "PIFilter": {
      "type": "object",
      "properties": {
        "exclusionProperties": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "inclusionProperties": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Remediation": {
      "type": "object",
      "properties": {
        "remediationId": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "ResourceEntity": {
      "allOf": [
        {
          "$ref": "#/definitions/ResourceBase"
        },
        {
          "type": "object"
        }
      ]
    },
    "ResourceBase": {
      "type": "object",
      "x-abstract": true,
      "required": [
        "_ts"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "partitionKey": {
          "type": "string"
        },
        "_ts": {
          "type": "integer",
          "format": "int64"
        },
        "_etag": {
          "type": "string"
        }
      }
    },
    "OpenProperty": {
      "type": "object",
      "properties": {
        "generation": {
          "type": "string"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {}
        }
      }
    },
    "OperatingSystem": {
      "type": "object",
      "properties": {
        "family": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "CSPState": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "OptIn",
        "OptOut",
        "Terminated",
        "SelectiveOptIn"
      ],
      "enum": [
        "OptIn",
        "OptOut",
        "Terminated",
        "SelectiveOptIn"
      ]
    },
    "VmSecurityType": {
      "type": "string",
      "description": "",
      "x-enumFlags": true,
      "x-enumNames": [
        "None",
        "Trusted",
        "Confidential"
      ],
      "enum": [
        "None",
        "Trusted",
        "Confidential"
      ]
    },
    "DefinitionTemplates": {
      "type": "object",
      "properties": {
        "uiDefinitionFileUri": {
          "type": "string"
        },
        "defaultDeploymentTemplateId": {
          "type": "string"
        },
        "deploymentTemplateFileUris": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "deploymentFragmentFileUris": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "StoreFrontOptions": {
      "type": "integer",
      "description": "",
      "x-enumFlags": true,
      "x-enumNames": [
        "None",
        "Azure",
        "AMP",
        "AppSource"
      ],
      "enum": [
        0,
        1,
        2,
        4
      ]
    },
    "EnvironmentInfo": {
      "type": "integer",
      "description": "",
      "x-enumNames": [
        "DogFood",
        "Canary",
        "Production",
        "FairFax",
        "Unknown"
      ],
      "enum": [
        1,
        2,
        3,
        4,
        5
      ]
    },
    "M365CertificationInfo": {
      "type": "object",
      "required": [
        "m365CertificationType"
      ],
      "properties": {
        "m365CertificationType": {
          "$ref": "#/definitions/CertificationType"
        },
        "m365CertificationDetailsUrl": {
          "type": "string"
        },
        "m365CertificationId": {
          "type": "string"
        }
      }
    },
    "CertificationType": {
      "type": "integer",
      "description": "",
      "x-enumNames": [
        "Undefined",
        "None",
        "SelfAttested",
        "MicrosoftCertified"
      ],
      "enum": [
        0,
        1,
        2,
        3
      ]
    },
    "UIPricing": {
      "type": "object",
      "required": [
        "pricingOptions"
      ],
      "properties": {
        "pricingOptions": {
          "$ref": "#/definitions/PricingOptions"
        },
        "hasPrices": {
          "type": "boolean"
        }
      }
    },
    "PricingOptions": {
      "type": "integer",
      "description": "",
      "x-enumFlags": true,
      "x-enumNames": [
        "None",
        "Free",
        "FreeTrial",
        "Paid",
        "Byol"
      ],
      "enum": [
        0,
        1,
        2,
        4,
        8
      ]
    },
    "ODataQueryOptionsOfCatalogItem": {
      "allOf": [
        {
          "$ref": "#/definitions/ODataQueryOptions"
        },
        {
          "type": "object",
          "description": "This defines a composite OData query options that can be used to perform query composition.\nCurrently this only supports $filter, $orderby, $top, $skip.",
          "properties": {
            "ifMatch": {
              "$ref": "#/definitions/ETagOfCatalogItem"
            },
            "ifNoneMatch": {
              "$ref": "#/definitions/ETagOfCatalogItem"
            }
          }
        }
      ]
    },
    "ETagOfCatalogItem": {
      "allOf": [
        {
          "$ref": "#/definitions/ETag"
        },
        {
          "type": "object",
          "description": "OData ETag of an entity type ."
        }
      ]
    },
    "ETag": {
      "allOf": [
        {
          "$ref": "#/definitions/DynamicObject"
        },
        {
          "type": "object",
          "description": "The ETag parsed from request.",
          "required": [
            "IsWellFormed",
            "IsAny",
            "IsIfNoneMatch"
          ],
          "properties": {
            "Item": {},
            "IsWellFormed": {
              "type": "boolean",
              "description": "Gets or sets whether the ETag is well-formed."
            },
            "EntityType": {
              "type": "string",
              "description": "Gets or sets an entity type of the ETag."
            },
            "IsAny": {
              "type": "boolean",
              "description": "Gets or sets whether the ETag is corresponding to \"*\"."
            },
            "IsIfNoneMatch": {
              "type": "boolean",
              "description": "Gets or sets whether If-None-Match set in the request header."
            },
            "ConcurrencyProperties": {
              "type": "object",
              "additionalProperties": {}
            }
          }
        }
      ]
    },
    "DynamicObject": {
      "type": "object",
      "description": "Provides a base class for specifying dynamic behavior at run time. This class must be inherited from; you cannot instantiate it directly."
    },
    "ODataQueryOptions": {
      "type": "object",
      "description": "This defines a composite OData query options that can be used to perform query composition.\nCurrently this only supports $filter, $orderby, $top, $skip, and $count.",
      "properties": {
        "request": {
          "description": "Gets the request message associated with this instance.",
          "allOf": [
            {
              "$ref": "#/definitions/HttpRequest"
            }
          ]
        },
        "context": {
          "description": "Gets the given ODataQueryContext\n            ",
          "allOf": [
            {
              "$ref": "#/definitions/ODataQueryContext"
            }
          ]
        },
        "rawValues": {
          "description": "Gets the raw string of all the OData query options",
          "allOf": [
            {
              "$ref": "#/definitions/ODataRawQueryOptions"
            }
          ]
        },
        "selectExpand": {
          "description": "Gets the SelectExpandQueryOption.",
          "allOf": [
            {
              "$ref": "#/definitions/SelectExpandQueryOption"
            }
          ]
        },
        "apply": {
          "description": "Gets the ApplyQueryOption.",
          "allOf": [
            {
              "$ref": "#/definitions/ApplyQueryOption"
            }
          ]
        },
        "filter": {
          "description": "Gets the FilterQueryOption.",
          "allOf": [
            {
              "$ref": "#/definitions/FilterQueryOption"
            }
          ]
        },
        "orderBy": {
          "description": "Gets the OrderByQueryOption.",
          "allOf": [
            {
              "$ref": "#/definitions/OrderByQueryOption"
            }
          ]
        },
        "skip": {
          "description": "Gets the SkipQueryOption.",
          "allOf": [
            {
              "$ref": "#/definitions/SkipQueryOption"
            }
          ]
        },
        "skipToken": {
          "description": "Gets the SkipTokenQueryOption.",
          "allOf": [
            {
              "$ref": "#/definitions/SkipTokenQueryOption"
            }
          ]
        },
        "top": {
          "description": "Gets the TopQueryOption.",
          "allOf": [
            {
              "$ref": "#/definitions/TopQueryOption"
            }
          ]
        },
        "count": {
          "description": "Gets the CountQueryOption.",
          "allOf": [
            {
              "$ref": "#/definitions/CountQueryOption"
            }
          ]
        },
        "validator": {
          "description": "Gets or sets the query validator.",
          "allOf": [
            {
              "$ref": "#/definitions/ODataQueryValidator"
            }
          ]
        },
        "ifMatch": {
          "description": "Gets the ETag from IfMatch header.",
          "allOf": [
            {
              "$ref": "#/definitions/ETag"
            }
          ]
        },
        "ifNoneMatch": {
          "description": "Gets the ETag from IfNoneMatch header.",
          "allOf": [
            {
              "$ref": "#/definitions/ETag"
            }
          ]
        }
      }
    },
    "HttpRequest": {
      "type": "object",
      "description": "Represents the incoming side of an individual HTTP request.",
      "x-abstract": true,
      "required": [
        "bodyReader",
        "routeValues"
      ],
      "properties": {
        "bodyReader": {
          "description": "Gets the request body PipeReader.",
          "allOf": [
            {
              "$ref": "#/definitions/PipeReader"
            }
          ]
        },
        "routeValues": {
          "description": "Gets the collection of route values for this request.",
          "allOf": [
            {
              "$ref": "#/definitions/RouteValueDictionary"
            }
          ]
        }
      }
    },
    "PipeReader": {
      "type": "object",
      "description": "Defines a class that provides access to a read side of pipe.",
      "x-abstract": true
    },
    "RouteValueDictionary": {
      "type": "object",
      "description": "An IDictionary`2 type for route values.",
      "required": [
        "_arrayStorage",
        "Comparer",
        "Count",
        "Keys",
        "Values"
      ],
      "properties": {
        "_arrayStorage": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValuePairOfStringAndObject"
          }
        },
        "_propertyStorage": {
          "$ref": "#/definitions/PropertyStorage"
        },
        "Item": {},
        "Comparer": {
          "description": "Gets the comparer for this dictionary.",
          "allOf": [
            {
              "$ref": "#/definitions/IEqualityComparerOfString"
            }
          ]
        },
        "Count": {
          "type": "integer",
          "format": "int32"
        },
        "Keys": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Values": {
          "type": "array",
          "items": {}
        }
      }
    },
    "KeyValuePairOfStringAndObject": {
      "type": "object",
      "required": [
        "key",
        "value"
      ],
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {}
      }
    },
    "PropertyStorage": {
      "type": "object",
      "required": [
        "value",
        "properties"
      ],
      "properties": {
        "value": {},
        "properties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PropertyHelper"
          }
        }
      }
    },
    "PropertyHelper": {
      "type": "object",
      "required": [
        "property",
        "name",
        "valueGetter",
        "valueSetter"
      ],
      "properties": {
        "property": {
          "description": "Gets the backing PropertyInfo.",
          "allOf": [
            {
              "$ref": "#/definitions/PropertyInfo"
            }
          ]
        },
        "name": {
          "type": "string",
          "description": "Gets (or sets in derived types) the property name."
        },
        "valueGetter": {
          "description": "Gets the property value getter.",
          "allOf": [
            {
              "$ref": "#/definitions/FuncOfObjectAndObject"
            }
          ]
        },
        "valueSetter": {
          "description": "Gets the property value setter.",
          "allOf": [
            {
              "$ref": "#/definitions/ActionOfObjectAndObject"
            }
          ]
        }
      }
    },
    "PropertyInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/MemberInfo"
        },
        {
          "type": "object",
          "x-abstract": true,
          "required": [
            "memberType",
            "isSpecialName"
          ],
          "properties": {
            "memberType": {
              "$ref": "#/definitions/MemberTypes"
            },
            "isSpecialName": {
              "type": "boolean"
            },
            "getMethod": {
              "$ref": "#/definitions/MethodInfo"
            },
            "setMethod": {
              "$ref": "#/definitions/MethodInfo"
            }
          }
        }
      ]
    },
    "MemberTypes": {
      "type": "integer",
      "description": "",
      "x-enumFlags": true,
      "x-enumNames": [
        "Constructor",
        "Event",
        "Field",
        "Method",
        "Property",
        "TypeInfo",
        "Custom",
        "NestedType",
        "All"
      ],
      "enum": [
        1,
        2,
        4,
        8,
        16,
        32,
        64,
        128,
        191
      ]
    },
    "MethodInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/MethodBase"
        },
        {
          "type": "object",
          "x-abstract": true,
          "required": [
            "memberType",
            "returnParameter",
            "returnType"
          ],
          "properties": {
            "memberType": {
              "$ref": "#/definitions/MemberTypes"
            },
            "returnParameter": {
              "$ref": "#/definitions/ParameterInfo"
            },
            "returnType": {
              "type": "string"
            }
          }
        }
      ]
    },
    "ParameterInfo": {
      "type": "object",
      "required": [
        "attributes",
        "member",
        "parameterType",
        "position",
        "isIn",
        "isLcid",
        "isOptional",
        "isOut",
        "isRetval",
        "hasDefaultValue",
        "customAttributes",
        "metadataToken"
      ],
      "properties": {
        "attributes": {
          "$ref": "#/definitions/ParameterAttributes"
        },
        "member": {
          "$ref": "#/definitions/MemberInfo"
        },
        "name": {
          "type": "string"
        },
        "parameterType": {
          "type": "string"
        },
        "position": {
          "type": "integer",
          "format": "int32"
        },
        "isIn": {
          "type": "boolean"
        },
        "isLcid": {
          "type": "boolean"
        },
        "isOptional": {
          "type": "boolean"
        },
        "isOut": {
          "type": "boolean"
        },
        "isRetval": {
          "type": "boolean"
        },
        "defaultValue": {},
        "rawDefaultValue": {},
        "hasDefaultValue": {
          "type": "boolean"
        },
        "customAttributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomAttributeData"
          }
        },
        "metadataToken": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ParameterAttributes": {
      "type": "integer",
      "description": "",
      "x-enumFlags": true,
      "x-enumNames": [
        "None",
        "In",
        "Out",
        "Lcid",
        "Retval",
        "Optional",
        "HasDefault",
        "HasFieldMarshal",
        "Reserved3",
        "Reserved4",
        "ReservedMask"
      ],
      "enum": [
        0,
        1,
        2,
        4,
        8,
        16,
        4096,
        8192,
        16384,
        32768,
        61440
      ]
    },
    "MemberInfo": {
      "type": "object",
      "x-abstract": true,
      "required": [
        "module",
        "customAttributes",
        "isCollectible",
        "metadataToken"
      ],
      "properties": {
        "module": {
          "$ref": "#/definitions/Module"
        },
        "customAttributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomAttributeData"
          }
        },
        "isCollectible": {
          "type": "boolean"
        },
        "metadataToken": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Module": {
      "type": "object",
      "x-abstract": true,
      "required": [
        "assembly",
        "fullyQualifiedName",
        "name",
        "mdStreamVersion",
        "moduleVersionId",
        "scopeName",
        "moduleHandle",
        "customAttributes",
        "metadataToken"
      ],
      "properties": {
        "assembly": {
          "$ref": "#/definitions/Assembly"
        },
        "fullyQualifiedName": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "mdStreamVersion": {
          "type": "integer",
          "format": "int32"
        },
        "moduleVersionId": {
          "type": "string",
          "format": "guid"
        },
        "scopeName": {
          "type": "string"
        },
        "moduleHandle": {
          "$ref": "#/definitions/ModuleHandle"
        },
        "customAttributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomAttributeData"
          }
        },
        "metadataToken": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Assembly": {
      "type": "object",
      "x-abstract": true,
      "required": [
        "definedTypes",
        "exportedTypes",
        "imageRuntimeVersion",
        "isDynamic",
        "location",
        "reflectionOnly",
        "isCollectible",
        "isFullyTrusted",
        "customAttributes",
        "escapedCodeBase",
        "manifestModule",
        "modules",
        "globalAssemblyCache",
        "hostContext",
        "securityRuleSet"
      ],
      "properties": {
        "definedTypes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "exportedTypes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "codeBase": {
          "type": "string"
        },
        "entryPoint": {
          "$ref": "#/definitions/MethodInfo"
        },
        "fullName": {
          "type": "string"
        },
        "imageRuntimeVersion": {
          "type": "string"
        },
        "isDynamic": {
          "type": "boolean"
        },
        "location": {
          "type": "string"
        },
        "reflectionOnly": {
          "type": "boolean"
        },
        "isCollectible": {
          "type": "boolean"
        },
        "isFullyTrusted": {
          "type": "boolean"
        },
        "customAttributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomAttributeData"
          }
        },
        "escapedCodeBase": {
          "type": "string"
        },
        "manifestModule": {
          "$ref": "#/definitions/Module"
        },
        "modules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Module"
          }
        },
        "globalAssemblyCache": {
          "type": "boolean",
          "x-deprecated": true,
          "x-deprecatedMessage": "The Global Assembly Cache is not supported."
        },
        "hostContext": {
          "type": "integer",
          "format": "int64"
        },
        "securityRuleSet": {
          "$ref": "#/definitions/SecurityRuleSet"
        }
      }
    },
    "CustomAttributeData": {
      "type": "object",
      "required": [
        "attributeType",
        "constructor",
        "constructorArguments",
        "namedArguments"
      ],
      "properties": {
        "attributeType": {
          "type": "string"
        },
        "constructor": {
          "$ref": "#/definitions/ConstructorInfo"
        },
        "constructorArguments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomAttributeTypedArgument"
          }
        },
        "namedArguments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomAttributeNamedArgument"
          }
        }
      }
    },
    "ConstructorInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/MethodBase"
        },
        {
          "type": "object",
          "x-abstract": true,
          "required": [
            "memberType"
          ],
          "properties": {
            "memberType": {
              "$ref": "#/definitions/MemberTypes"
            }
          }
        }
      ]
    },
    "MethodBase": {
      "allOf": [
        {
          "$ref": "#/definitions/MemberInfo"
        },
        {
          "type": "object",
          "x-abstract": true,
          "required": [
            "methodImplementationFlags",
            "callingConvention",
            "isAbstract",
            "isConstructor",
            "isFinal",
            "isHideBySig",
            "isSpecialName",
            "isStatic",
            "isVirtual",
            "isAssembly",
            "isFamily",
            "isFamilyAndAssembly",
            "isFamilyOrAssembly",
            "isPrivate",
            "isPublic",
            "isConstructedGenericMethod",
            "isGenericMethod",
            "isGenericMethodDefinition",
            "containsGenericParameters",
            "isSecurityCritical",
            "isSecuritySafeCritical",
            "isSecurityTransparent"
          ],
          "properties": {
            "methodImplementationFlags": {
              "$ref": "#/definitions/MethodImplAttributes"
            },
            "callingConvention": {
              "$ref": "#/definitions/CallingConventions"
            },
            "isAbstract": {
              "type": "boolean"
            },
            "isConstructor": {
              "type": "boolean"
            },
            "isFinal": {
              "type": "boolean"
            },
            "isHideBySig": {
              "type": "boolean"
            },
            "isSpecialName": {
              "type": "boolean"
            },
            "isStatic": {
              "type": "boolean"
            },
            "isVirtual": {
              "type": "boolean"
            },
            "isAssembly": {
              "type": "boolean"
            },
            "isFamily": {
              "type": "boolean"
            },
            "isFamilyAndAssembly": {
              "type": "boolean"
            },
            "isFamilyOrAssembly": {
              "type": "boolean"
            },
            "isPrivate": {
              "type": "boolean"
            },
            "isPublic": {
              "type": "boolean"
            },
            "isConstructedGenericMethod": {
              "type": "boolean"
            },
            "isGenericMethod": {
              "type": "boolean"
            },
            "isGenericMethodDefinition": {
              "type": "boolean"
            },
            "containsGenericParameters": {
              "type": "boolean"
            },
            "isSecurityCritical": {
              "type": "boolean"
            },
            "isSecuritySafeCritical": {
              "type": "boolean"
            },
            "isSecurityTransparent": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "MethodImplAttributes": {
      "type": "integer",
      "description": "",
      "x-enumNames": [
        "IL",
        "Managed",
        "Native",
        "OPTIL",
        "Runtime",
        "CodeTypeMask",
        "Unmanaged",
        "ManagedMask",
        "NoInlining",
        "ForwardRef",
        "Synchronized",
        "NoOptimization",
        "PreserveSig",
        "AggressiveInlining",
        "AggressiveOptimization",
        "InternalCall",
        "MaxMethodImplVal"
      ],
      "enum": [
        0,
        0,
        1,
        2,
        3,
        3,
        4,
        4,
        8,
        16,
        32,
        64,
        128,
        256,
        512,
        4096,
        65535
      ]
    },
    "CallingConventions": {
      "type": "integer",
      "description": "",
      "x-enumFlags": true,
      "x-enumNames": [
        "Standard",
        "VarArgs",
        "Any",
        "HasThis",
        "ExplicitThis"
      ],
      "enum": [
        1,
        2,
        3,
        32,
        64
      ]
    },
    "CustomAttributeTypedArgument": {
      "type": "object",
      "required": [
        "argumentType"
      ],
      "properties": {
        "argumentType": {
          "type": "string"
        },
        "value": {}
      }
    },
    "CustomAttributeNamedArgument": {
      "type": "object",
      "required": [
        "memberInfo",
        "typedValue",
        "memberName",
        "isField"
      ],
      "properties": {
        "memberInfo": {
          "$ref": "#/definitions/MemberInfo"
        },
        "typedValue": {
          "$ref": "#/definitions/CustomAttributeTypedArgument"
        },
        "memberName": {
          "type": "string"
        },
        "isField": {
          "type": "boolean"
        }
      }
    },
    "SecurityRuleSet": {
      "type": "integer",
      "description": "",
      "x-enumNames": [
        "None",
        "Level1",
        "Level2"
      ],
      "enum": [
        0,
        1,
        2
      ]
    },
    "ModuleHandle": {
      "type": "object",
      "required": [
        "mdStreamVersion"
      ],
      "properties": {
        "mdStreamVersion": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "FuncOfObjectAndObject": {
      "allOf": [
        {
          "$ref": "#/definitions/MulticastDelegate"
        },
        {
          "type": "object"
        }
      ]
    },
    "MulticastDelegate": {
      "allOf": [
        {
          "$ref": "#/definitions/Delegate"
        },
        {
          "type": "object",
          "x-abstract": true
        }
      ]
    },
    "Delegate": {
      "type": "object",
      "x-abstract": true,
      "required": [
        "method"
      ],
      "properties": {
        "target": {},
        "method": {
          "$ref": "#/definitions/MethodInfo"
        }
      }
    },
    "ActionOfObjectAndObject": {
      "allOf": [
        {
          "$ref": "#/definitions/MulticastDelegate"
        },
        {
          "type": "object"
        }
      ]
    },
    "IEqualityComparerOfString": {
      "type": "object",
      "x-abstract": true
    },
    "ODataQueryContext": {
      "type": "object",
      "description": "This defines some context information used to perform query composition.",
      "properties": {
        "defaultQuerySettings": {
          "description": "Gets the given DefaultQuerySettings.",
          "allOf": [
            {
              "$ref": "#/definitions/DefaultQuerySettings"
            }
          ]
        },
        "model": {
          "description": "Gets the given IEdmModel that contains the EntitySet.",
          "allOf": [
            {
              "$ref": "#/definitions/IEdmModel"
            }
          ]
        },
        "elementType": {
          "description": "Gets the IEdmType of the element.",
          "allOf": [
            {
              "$ref": "#/definitions/IEdmType"
            }
          ]
        },
        "navigationSource": {
          "description": "Gets the IEdmNavigationSource that contains the element.",
          "allOf": [
            {
              "$ref": "#/definitions/IEdmNavigationSource"
            }
          ]
        },
        "elementClrType": {
          "type": "string",
          "description": "Gets the CLR type of the element."
        },
        "path": {
          "description": "Gets the ODataPath.",
          "allOf": [
            {
              "$ref": "#/definitions/ODataPath"
            }
          ]
        },
        "requestContainer": {
          "description": "Gets the request container.",
          "allOf": [
            {
              "$ref": "#/definitions/IServiceProvider"
            }
          ]
        }
      }
    },
    "DefaultQuerySettings": {
      "type": "object",
      "description": "This class describes the default settings to use during query composition.",
      "required": [
        "enableExpand",
        "enableSelect",
        "enableCount",
        "enableOrderBy",
        "enableFilter",
        "enableSkipToken"
      ],
      "properties": {
        "enableExpand": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether navigation property can be expanded."
        },
        "enableSelect": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether property can be selected."
        },
        "enableCount": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether entity set and property can apply $count."
        },
        "enableOrderBy": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether property can apply $orderby."
        },
        "enableFilter": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether property can apply $filter."
        },
        "maxTop": {
          "type": "integer",
          "description": "Gets or sets the max value of $top that a client can request.",
          "format": "int32"
        },
        "enableSkipToken": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether the service will use skiptoken or not."
        }
      }
    },
    "IEdmModel": {
      "type": "object",
      "description": "Semantic representation of an EDM model.",
      "x-abstract": true,
      "properties": {
        "schemaElements": {
          "type": "array",
          "description": "Gets the collection of schema elements that are contained in this model.",
          "items": {
            "$ref": "#/definitions/IEdmSchemaElement"
          }
        },
        "vocabularyAnnotations": {
          "type": "array",
          "description": "Gets the collection of vocabulary annotations that are contained in this model.",
          "items": {
            "$ref": "#/definitions/IEdmVocabularyAnnotation"
          }
        },
        "referencedModels": {
          "type": "array",
          "description": "Gets the collection of models referred to by this model (mainly by the this.References).",
          "items": {
            "$ref": "#/definitions/IEdmModel"
          }
        },
        "declaredNamespaces": {
          "type": "array",
          "description": "Gets the collection of namespaces that schema elements use contained in this model.",
          "items": {
            "type": "string"
          }
        },
        "directValueAnnotationsManager": {
          "description": "Gets the model's annotations manager.",
          "allOf": [
            {
              "$ref": "#/definitions/IEdmDirectValueAnnotationsManager"
            }
          ]
        },
        "entityContainer": {
          "description": "Gets the only one entity container of the model.",
          "allOf": [
            {
              "$ref": "#/definitions/IEdmEntityContainer"
            }
          ]
        }
      }
    },
    "IEdmSchemaElement": {
      "type": "object",
      "description": "Common base interface for all named children of EDM schema.",
      "x-abstract": true,
      "required": [
        "schemaElementKind"
      ],
      "properties": {
        "schemaElementKind": {
          "description": "Gets the kind of this schema element.",
          "allOf": [
            {
              "$ref": "#/definitions/EdmSchemaElementKind"
            }
          ]
        },
        "namespace": {
          "type": "string",
          "description": "Gets the namespace this schema element belongs to."
        }
      }
    },
    "EdmSchemaElementKind": {
      "type": "integer",
      "description": "Defines EDM schema element types.",
      "x-enumNames": [
        "None",
        "TypeDefinition",
        "Term",
        "Action",
        "EntityContainer",
        "Function"
      ],
      "enum": [
        0,
        1,
        2,
        3,
        4,
        5
      ]
    },
    "IEdmVocabularyAnnotation": {
      "type": "object",
      "description": "Represents an EDM vocabulary annotation.",
      "x-abstract": true,
      "properties": {
        "qualifier": {
          "type": "string",
          "description": "Gets the qualifier used to discriminate between multiple bindings of the same property or type."
        },
        "term": {
          "description": "Gets the term bound by the annotation.",
          "allOf": [
            {
              "$ref": "#/definitions/IEdmTerm"
            }
          ]
        },
        "target": {
          "description": "Gets the element the annotation applies to.",
          "allOf": [
            {
              "$ref": "#/definitions/IEdmVocabularyAnnotatable"
            }
          ]
        },
        "value": {
          "description": "Gets the expression producing the value of the annotation.",
          "allOf": [
            {
              "$ref": "#/definitions/IEdmExpression"
            }
          ]
        }
      }
    },
    "IEdmTerm": {
      "type": "object",
      "description": "Represents an EDM term.",
      "x-abstract": true,
      "properties": {
        "type": {
          "description": "Gets the type of this term.",
          "allOf": [
            {
              "$ref": "#/definitions/IEdmTypeReference"
            }
          ]
        },
        "appliesTo": {
          "type": "string",
          "description": "Gets the AppliesTo of this term."
        },
        "defaultValue": {
          "type": "string",
          "description": "Gets the DefaultValue of this term."
        }
      }
    },
    "IEdmTypeReference": {
      "type": "object",
      "description": "Represents a references to a type.",
      "x-abstract": true,
      "required": [
        "isNullable"
      ],
      "properties": {
        "isNullable": {
          "type": "boolean",
          "description": "Gets a value indicating whether this type is nullable."
        },
        "definition": {
          "description": "Gets the definition to which this type refers.",
          "allOf": [
            {
              "$ref": "#/definitions/IEdmType"
            }
          ]
        }
      }
    },
    "IEdmType": {
      "type": "object",
      "description": "Represents the definition of an EDM type.",
      "x-abstract": true,
      "required": [
        "typeKind"
      ],
      "properties": {
        "typeKind": {
          "description": "Gets the kind of this type.",
          "allOf": [
            {
              "$ref": "#/definitions/EdmTypeKind"
            }
          ]
        }
      }
    },
    "EdmTypeKind": {
      "type": "integer",
      "description": "Defines EDM metatypes.",
      "x-enumNames": [
        "None",
        "Primitive",
        "Entity",
        "Complex",
        "Collection",
        "EntityReference",
        "Enum",
        "TypeDefinition",
        "Untyped",
        "Path"
      ],
      "enum": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9
      ]
    },
    "IEdmVocabularyAnnotatable": {
      "type": "object",
      "description": "Represents an element that can be targeted by Vocabulary Annotations",
      "x-abstract": true
    },
    "IEdmExpression": {
      "type": "object",
      "description": "Represents an EDM expression.",
      "x-abstract": true,
      "required": [
        "expressionKind"
      ],
      "properties": {
        "expressionKind": {
          "description": "Gets the kind of this expression.",
          "allOf": [
            {
              "$ref": "#/definitions/EdmExpressionKind"
            }
          ]
        }
      }
    },
    "EdmExpressionKind": {
      "type": "integer",
      "description": "Defines EDM expression kinds.",
      "x-enumNames": [
        "None",
        "BinaryConstant",
        "BooleanConstant",
        "DateTimeOffsetConstant",
        "DecimalConstant",
        "FloatingConstant",
        "GuidConstant",
        "IntegerConstant",
        "StringConstant",
        "DurationConstant",
        "Null",
        "Record",
        "Collection",
        "Path",
        "If",
        "Cast",
        "IsType",
        "FunctionApplication",
        "LabeledExpressionReference",
        "Labeled",
        "PropertyPath",
        "NavigationPropertyPath",
        "DateConstant",
        "TimeOfDayConstant",
        "EnumMember",
        "AnnotationPath"
      ],
      "enum": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25
      ]
    },
    "IEdmDirectValueAnnotationsManager": {
      "type": "object",
      "description": "Manages getting and setting direct annotations on EDM elements.",
      "x-abstract": true
    },
    "IEdmEntityContainer": {
      "type": "object",
      "description": "Represents an EDM entity container.",
      "x-abstract": true,
      "properties": {
        "elements": {
          "type": "array",
          "description": "Gets a collection of the elements of this entity container.",
          "items": {
            "$ref": "#/definitions/IEdmEntityContainerElement"
          }
        }
      }
    },
    "IEdmEntityContainerElement": {
      "type": "object",
      "description": "Represents the common elements of all EDM entity container elements.",
      "x-abstract": true,
      "required": [
        "containerElementKind"
      ],
      "properties": {
        "containerElementKind": {
          "description": "Gets the kind of element of this container element.",
          "allOf": [
            {
              "$ref": "#/definitions/EdmContainerElementKind"
            }
          ]
        },
        "container": {
          "description": "Gets the container that contains this element.",
          "allOf": [
            {
              "$ref": "#/definitions/IEdmEntityContainer"
            }
          ]
        }
      }
    },
    "EdmContainerElementKind": {
      "type": "integer",
      "description": "Defines EDM container element types.",
      "x-enumNames": [
        "None",
        "EntitySet",
        "ActionImport",
        "FunctionImport",
        "Singleton"
      ],
      "enum": [
        0,
        1,
        2,
        3,
        4
      ]
    },
    "IEdmNavigationSource": {
      "type": "object",
      "description": "Represents an EDM navigation source.",
      "x-abstract": true,
      "properties": {
        "navigationPropertyBindings": {
          "type": "array",
          "description": "Gets the navigation property bindings of this navigation source.",
          "items": {
            "$ref": "#/definitions/IEdmNavigationPropertyBinding"
          }
        },
        "path": {
          "description": "Gets the path of this navigation source.",
          "allOf": [
            {
              "$ref": "#/definitions/IEdmPathExpression"
            }
          ]
        },
        "type": {
          "description": "Gets the type of this navigation source.",
          "allOf": [
            {
              "$ref": "#/definitions/IEdmType"
            }
          ]
        }
      }
    },
    "IEdmNavigationPropertyBinding": {
      "type": "object",
      "description": "Represents a binding from an EDM navigation property to a navigation source.",
      "x-abstract": true,
      "properties": {
        "navigationProperty": {
          "description": "Gets the navigation property.",
          "allOf": [
            {
              "$ref": "#/definitions/IEdmNavigationProperty"
            }
          ]
        },
        "target": {
          "description": "Gets the target navigation source.",
          "allOf": [
            {
              "$ref": "#/definitions/IEdmNavigationSource"
            }
          ]
        },
        "path": {
          "description": "Get the path that a navigation property targets.",
          "allOf": [
            {
              "$ref": "#/definitions/IEdmPathExpression"
            }
          ]
        }
      }
    },
    "IEdmNavigationProperty": {
      "type": "object",
      "description": "Represents an EDM navigation property.",
      "x-abstract": true,
      "required": [
        "onDelete",
        "containsTarget"
      ],
      "properties": {
        "partner": {
          "description": "Gets the partner of this navigation property.",
          "allOf": [
            {
              "$ref": "#/definitions/IEdmNavigationProperty"
            }
          ]
        },
        "onDelete": {
          "description": "Gets the action to execute on the deletion of this end of a bidirectional association.",
          "allOf": [
            {
              "$ref": "#/definitions/EdmOnDeleteAction"
            }
          ]
        },
        "containsTarget": {
          "type": "boolean",
          "description": "Gets a value indicating whether the navigation target is contained inside the navigation source."
        },
        "referentialConstraint": {
          "description": "Gets the referential constraint for this navigation, returning null if this is the principal end or if there is no referential constraint.",
          "allOf": [
            {
              "$ref": "#/definitions/IEdmReferentialConstraint"
            }
          ]
        }
      }
    },
    "EdmOnDeleteAction": {
      "type": "integer",
      "description": "Enumerates the actions EDM can apply on deletes.",
      "x-enumNames": [
        "None",
        "Cascade"
      ],
      "enum": [
        0,
        1
      ]
    },
    "IEdmReferentialConstraint": {
      "type": "object",
      "description": "Represents an EDM referential constraint on a navigation property.",
      "x-abstract": true,
      "properties": {
        "propertyPairs": {
          "type": "array",
          "description": "Gets the set of property pairs from the referential constraint. No particular ordering should be assumed.",
          "items": {
            "$ref": "#/definitions/EdmReferentialConstraintPropertyPair"
          }
        }
      }
    },
    "EdmReferentialConstraintPropertyPair": {
      "type": "object",
      "description": "Represents a pair of properties as part of a referential constraint.",
      "properties": {
        "dependentProperty": {
          "description": "The local or dependent property in the referential constraint property pair. Will never be null.",
          "allOf": [
            {
              "$ref": "#/definitions/IEdmStructuralProperty"
            }
          ]
        },
        "principalProperty": {
          "description": "The foreign or principal property in the referential constraint property pair. Will never be null.",
          "allOf": [
            {
              "$ref": "#/definitions/IEdmStructuralProperty"
            }
          ]
        }
      }
    },
    "IEdmStructuralProperty": {
      "type": "object",
      "description": "Represents an EDM structural (i.e. non-navigation) property.",
      "x-abstract": true,
      "properties": {
        "defaultValueString": {
          "type": "string",
          "description": "Gets the default value of this property."
        }
      }
    },
    "IEdmPathExpression": {
      "type": "object",
      "description": "Represents an EDM path expression.",
      "x-abstract": true,
      "properties": {
        "pathSegments": {
          "type": "array",
          "description": "Gets the path segments as a decomposed qualified name. \"A.B/C/D.E\" is { \"A.B\", \"C\", \"D.E\" }.",
          "items": {
            "type": "string"
          }
        },
        "path": {
          "type": "string",
          "description": "Gets the path string, like \"A.B/C/D.E\"."
        }
      }
    },
    "ODataPath": {
      "type": "object",
      "description": "Provides an object representation for an OData path with additional information about the EDM type and entity set for the path.",
      "properties": {
        "edmType": {
          "description": "Gets the EDM type of the path.",
          "allOf": [
            {
              "$ref": "#/definitions/IEdmType"
            }
          ]
        },
        "navigationSource": {
          "description": "Gets the navigation source of the path.",
          "allOf": [
            {
              "$ref": "#/definitions/IEdmNavigationSource"
            }
          ]
        },
        "segments": {
          "type": "array",
          "description": "Gets the path segments for the OData path.",
          "items": {
            "$ref": "#/definitions/ODataPathSegment"
          }
        },
        "pathTemplate": {
          "type": "string",
          "description": "Gets the path template describing the types of segments in the path."
        },
        "path": {
          "type": "array",
          "description": "Gets the ODL path.",
          "items": {
            "$ref": "#/definitions/ODataPathSegment"
          }
        }
      }
    },
    "ODataPathSegment": {
      "type": "object",
      "description": "The semantic representation of a segment in a path.",
      "x-abstract": true,
      "properties": {
        "identifier": {
          "type": "string",
          "description": "Returns the identifier for this segment i.e. string part without the keys."
        }
      }
    },
    "IServiceProvider": {
      "type": "object",
      "description": "Defines a mechanism for retrieving a service object; that is, an object that provides custom support to other objects.",
      "x-abstract": true
    },
    "ODataRawQueryOptions": {
      "type": "object",
      "description": "Represents the raw query values in the string format from the incoming request.",
      "properties": {
        "filter": {
          "type": "string",
          "description": "Gets the raw $filter query value from the incoming request Uri if exists.\n            "
        },
        "apply": {
          "type": "string",
          "description": "Gets the raw $apply query value from the incoming request Uri if exists.\n            "
        },
        "orderBy": {
          "type": "string",
          "description": "Gets the raw $orderby query value from the incoming request Uri if exists.\n            "
        },
        "top": {
          "type": "string",
          "description": "Gets the raw $top query value from the incoming request Uri if exists.\n            "
        },
        "skip": {
          "type": "string",
          "description": "Gets the raw $skip query value from the incoming request Uri if exists.\n            "
        },
        "select": {
          "type": "string",
          "description": "Gets the raw $select query value from the incoming request Uri if exists.\n            "
        },
        "expand": {
          "type": "string",
          "description": "Gets the raw $expand query value from the incoming request Uri if exists.\n            "
        },
        "count": {
          "type": "string",
          "description": "Gets the raw $count query value from the incoming request Uri if exists.\n            "
        },
        "format": {
          "type": "string",
          "description": "Gets the raw $format query value from the incoming request Uri if exists.\n            "
        },
        "skipToken": {
          "type": "string",
          "description": "Gets the raw $skiptoken query value from the incoming request Uri if exists.\n            "
        },
        "deltaToken": {
          "type": "string",
          "description": "Gets the raw $deltatoken query value from the incoming request Uri if exists.\n            "
        }
      }
    },
    "SelectExpandQueryOption": {
      "type": "object",
      "description": "Represents the OData $select and $expand query options.",
      "required": [
        "levelsMaxLiteralExpansionDepth"
      ],
      "properties": {
        "context": {
          "description": "Gets the given ODataQueryContext.\n            ",
          "allOf": [
            {
              "$ref": "#/definitions/ODataQueryContext"
            }
          ]
        },
        "rawSelect": {
          "type": "string",
          "description": "Gets the raw $select value."
        },
        "rawExpand": {
          "type": "string",
          "description": "Gets the raw $expand value."
        },
        "validator": {
          "description": "Gets or sets the $select and $expand query validator.",
          "allOf": [
            {
              "$ref": "#/definitions/SelectExpandQueryValidator"
            }
          ]
        },
        "selectExpandClause": {
          "description": "Gets the parsed SelectExpandClause for this query option.",
          "allOf": [
            {
              "$ref": "#/definitions/SelectExpandClause"
            }
          ]
        },
        "levelsMaxLiteralExpansionDepth": {
          "type": "integer",
          "description": "Gets or sets the number of levels that a top level $expand=NavigationProperty($levels=max)\nwill be expanded.\nThis value will decrease by one with each nesting level in the $expand clause.\nFor example, with a property value 5, the following query $expand=A($expand=B($expand=C($levels=max)))\nwill be interpreted as $expand=A($expand=B($expand=C($levels=3))).\nIf the query gets validated, the MaxExpansionDepth value\nmust be greater than or equal to this value.",
          "format": "int32"
        }
      }
    },
    "SelectExpandQueryValidator": {
      "type": "object",
      "description": "Represents a validator used to validate a SelectExpandQueryOption based on the ODataValidationSettings."
    },
    "SelectExpandClause": {
      "type": "object",
      "description": "Class representing the combined semantic meaning of any select or expand clauses in the uri.",
      "required": [
        "allSelected"
      ],
      "properties": {
        "selectedItems": {
          "type": "array",
          "description": "Gets the selected properties and operations.",
          "items": {
            "$ref": "#/definitions/SelectItem"
          }
        },
        "allSelected": {
          "type": "boolean",
          "description": "Gets a flag indicating that everything at this level has been selected."
        }
      }
    },
    "SelectItem": {
      "type": "object",
      "description": "An item that has been selected by the query at the current level of the tree.",
      "x-abstract": true
    },
    "ApplyQueryOption": {
      "type": "object",
      "description": "This defines a $apply OData query option for querying.",
      "properties": {
        "context": {
          "description": "Gets the given ODataQueryContext.\n            ",
          "allOf": [
            {
              "$ref": "#/definitions/ODataQueryContext"
            }
          ]
        },
        "resultClrType": {
          "type": "string",
          "description": "ClrType for result of transformations"
        },
        "applyClause": {
          "description": "Gets the parsed ApplyClause for this query option.",
          "allOf": [
            {
              "$ref": "#/definitions/ApplyClause"
            }
          ]
        },
        "rawValue": {
          "type": "string",
          "description": "Gets the raw $apply value.\n            "
        }
      }
    },
    "ApplyClause": {
      "type": "object",
      "description": "Represents the set of transformations to perform as part of $apply.",
      "properties": {
        "transformations": {
          "type": "array",
          "description": "The collection of transformations to perform.",
          "items": {
            "$ref": "#/definitions/TransformationNode"
          }
        }
      }
    },
    "TransformationNode": {
      "type": "object",
      "description": "Base class for all transformation nodes.",
      "x-abstract": true
    },
    "FilterQueryOption": {
      "type": "object",
      "description": "This defines a $filter OData query option for querying.",
      "properties": {
        "context": {
          "description": "Gets the given ODataQueryContext.\n            ",
          "allOf": [
            {
              "$ref": "#/definitions/ODataQueryContext"
            }
          ]
        },
        "validator": {
          "description": "Gets or sets the Filter Query Validator",
          "allOf": [
            {
              "$ref": "#/definitions/FilterQueryValidator"
            }
          ]
        },
        "filterClause": {
          "description": "Gets the parsed FilterClause for this query option.",
          "allOf": [
            {
              "$ref": "#/definitions/FilterClause"
            }
          ]
        },
        "rawValue": {
          "type": "string",
          "description": "Gets the raw $filter value.\n            "
        }
      }
    },
    "FilterQueryValidator": {
      "type": "object",
      "description": "Represents a validator used to validate a FilterQueryOption based on the ODataValidationSettings."
    },
    "FilterClause": {
      "type": "object",
      "description": "The result of parsing a $filter query option.",
      "properties": {
        "expression": {
          "description": "Gets the filter expression - this should evaluate to a single boolean value.",
          "allOf": [
            {
              "$ref": "#/definitions/SingleValueNode"
            }
          ]
        },
        "rangeVariable": {
          "description": "Gets the parameter for the expression which represents a single value from the collection.",
          "allOf": [
            {
              "$ref": "#/definitions/RangeVariable"
            }
          ]
        },
        "itemType": {
          "description": "Gets the type of item returned by this clause.",
          "allOf": [
            {
              "$ref": "#/definitions/IEdmTypeReference"
            }
          ]
        }
      }
    },
    "SingleValueNode": {
      "allOf": [
        {
          "$ref": "#/definitions/QueryNode"
        },
        {
          "type": "object",
          "description": "Base class for all semantic metadata bound nodes which represent a single composable value.",
          "x-abstract": true,
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "description": "Gets the kind of this node.",
              "allOf": [
                {
                  "$ref": "#/definitions/QueryNodeKind"
                }
              ]
            }
          }
        }
      ]
    },
    "QueryNodeKind": {
      "type": "integer",
      "description": "Public enumeration of kinds of query nodes. A subset of InternalQueryNodeKind",
      "x-enumNames": [
        "None",
        "Constant",
        "Convert",
        "NonResourceRangeVariableReference",
        "BinaryOperator",
        "UnaryOperator",
        "SingleValuePropertyAccess",
        "CollectionPropertyAccess",
        "SingleValueFunctionCall",
        "Any",
        "CollectionNavigationNode",
        "SingleNavigationNode",
        "SingleValueOpenPropertyAccess",
        "SingleResourceCast",
        "All",
        "CollectionResourceCast",
        "ResourceRangeVariableReference",
        "SingleResourceFunctionCall",
        "CollectionFunctionCall",
        "CollectionResourceFunctionCall",
        "NamedFunctionParameter",
        "ParameterAlias",
        "EntitySet",
        "KeyLookup",
        "SearchTerm",
        "CollectionOpenPropertyAccess",
        "CollectionComplexNode",
        "SingleComplexNode",
        "Count",
        "SingleValueCast",
        "CollectionPropertyNode",
        "AggregatedCollectionPropertyNode",
        "In",
        "CollectionConstant"
      ],
      "enum": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33
      ]
    },
    "QueryNode": {
      "type": "object",
      "description": "Base class for all semantic metadata bound nodes.",
      "x-abstract": true
    },
    "RangeVariable": {
      "type": "object",
      "description": "A RangeVariable, which represents an iterator variable either over a collection, either of entities or not.\nExists outside of the main SemanticAST, but hooked in via a RangeVariableReferenceNode (either Non-Entity or Entity).",
      "x-abstract": true
    },
    "OrderByQueryOption": {
      "type": "object",
      "description": "This defines a $orderby OData query option for querying.",
      "properties": {
        "context": {
          "description": "Gets the given ODataQueryContext.\n            ",
          "allOf": [
            {
              "$ref": "#/definitions/ODataQueryContext"
            }
          ]
        },
        "orderByNodes": {
          "type": "array",
          "description": "Gets the mutable list of OrderByPropertyNode instances for this query option.",
          "items": {
            "$ref": "#/definitions/OrderByNode"
          }
        },
        "rawValue": {
          "type": "string",
          "description": "Gets the raw $orderby value.\n            "
        },
        "validator": {
          "description": "Gets or sets the OrderBy Query Validator.",
          "allOf": [
            {
              "$ref": "#/definitions/OrderByQueryValidator"
            }
          ]
        },
        "orderByClause": {
          "description": "Gets the parsed OrderByClause for this query option.",
          "allOf": [
            {
              "$ref": "#/definitions/OrderByClause"
            }
          ]
        }
      }
    },
    "OrderByNode": {
      "type": "object",
      "description": "Represents a single order by expression in the $orderby clause.",
      "x-abstract": true,
      "required": [
        "direction"
      ],
      "properties": {
        "direction": {
          "description": "Gets the OrderByDirection for the current node.",
          "allOf": [
            {
              "$ref": "#/definitions/OrderByDirection"
            }
          ]
        }
      }
    },
    "OrderByDirection": {
      "type": "integer",
      "description": "Enumeration of order by directions.",
      "x-enumNames": [
        "Ascending",
        "Descending"
      ],
      "enum": [
        0,
        1
      ]
    },
    "OrderByQueryValidator": {
      "type": "object",
      "description": "Represents a validator used to validate an OrderByQueryOption based on the ODataValidationSettings."
    },
    "OrderByClause": {
      "type": "object",
      "description": "Represents the result of parsing the $orderby query option.",
      "required": [
        "direction"
      ],
      "properties": {
        "thenBy": {
          "description": "Gets the next orderby to perform after performing this orderby, can be null in the case of only a single orderby expression.",
          "allOf": [
            {
              "$ref": "#/definitions/OrderByClause"
            }
          ]
        },
        "expression": {
          "description": "Gets the order-by expression.",
          "allOf": [
            {
              "$ref": "#/definitions/SingleValueNode"
            }
          ]
        },
        "direction": {
          "description": "Gets the direction to order.",
          "allOf": [
            {
              "$ref": "#/definitions/OrderByDirection"
            }
          ]
        },
        "rangeVariable": {
          "description": "Gets the rangeVariable for the expression which represents a single value from the collection we iterate over.",
          "allOf": [
            {
              "$ref": "#/definitions/RangeVariable"
            }
          ]
        },
        "itemType": {
          "description": "Gets the type of a single item from the collection returned after ordering.",
          "allOf": [
            {
              "$ref": "#/definitions/IEdmTypeReference"
            }
          ]
        }
      }
    },
    "SkipQueryOption": {
      "type": "object",
      "description": "This defines a $skip OData query option for querying.",
      "required": [
        "value"
      ],
      "properties": {
        "context": {
          "description": "Gets the given ODataQueryContext.",
          "allOf": [
            {
              "$ref": "#/definitions/ODataQueryContext"
            }
          ]
        },
        "rawValue": {
          "type": "string",
          "description": "Gets the raw $skip value."
        },
        "value": {
          "type": "integer",
          "description": "Gets the value of the $skip as a parsed integer.",
          "format": "int32"
        },
        "validator": {
          "description": "Gets or sets the Skip Query Validator.",
          "allOf": [
            {
              "$ref": "#/definitions/SkipQueryValidator"
            }
          ]
        }
      }
    },
    "SkipQueryValidator": {
      "type": "object",
      "description": "Represents a validator used to validate a SkipQueryOption based on the ODataValidationSettings."
    },
    "SkipTokenQueryOption": {
      "type": "object",
      "description": "This defines a $skiptoken OData query option for querying.",
      "properties": {
        "rawValue": {
          "type": "string",
          "description": "Gets the raw $skiptoken value."
        },
        "context": {
          "description": "Gets and sets the given ODataQueryContext.",
          "allOf": [
            {
              "$ref": "#/definitions/ODataQueryContext"
            }
          ]
        },
        "validator": {
          "description": "Gets or sets the SkipToken Query Validator.",
          "allOf": [
            {
              "$ref": "#/definitions/SkipTokenQueryValidator"
            }
          ]
        },
        "querySettings": {
          "description": "Gets or sets the query setting ",
          "allOf": [
            {
              "$ref": "#/definitions/ODataQuerySettings"
            }
          ]
        },
        "queryOptions": {
          "description": "Gets or sets the QueryOptions",
          "allOf": [
            {
              "$ref": "#/definitions/ODataQueryOptions"
            }
          ]
        }
      }
    },
    "SkipTokenQueryValidator": {
      "type": "object",
      "description": "Represents a validator used to validate a SkipTokenQueryOption based on the ODataValidationSettings."
    },
    "ODataQuerySettings": {
      "type": "object",
      "description": "This class describes the settings to use during query composition.",
      "required": [
        "ensureStableOrdering",
        "handleNullPropagation",
        "enableConstantParameterization",
        "enableCorrelatedSubqueryBuffering",
        "handleReferenceNavigationPropertyExpandFilter"
      ],
      "properties": {
        "ensureStableOrdering": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether query composition should\nalter the original query when necessary to ensure a stable sort order."
        },
        "handleNullPropagation": {
          "description": "Gets or sets a value indicating how null propagation should\nbe handled during query composition.",
          "allOf": [
            {
              "$ref": "#/definitions/HandleNullPropagationOption"
            }
          ]
        },
        "enableConstantParameterization": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether constants should be parameterized. Parameterizing constants\nwould result in better performance with Entity framework."
        },
        "enableCorrelatedSubqueryBuffering": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether queries with expanded navigations should be formulated\nto encourage correlated subquery results to be buffered.\nBuffering correlated subquery results can reduce the number of queries from N + 1 to 2\nby buffering results from the subquery."
        },
        "pageSize": {
          "type": "integer",
          "description": "Gets or sets the maximum number of query results to return.",
          "format": "int32"
        },
        "handleReferenceNavigationPropertyExpandFilter": {
          "type": "boolean",
          "description": "Honor $filter inside $expand of non-collection navigation property.\nThe expanded property is only populated when the filter evaluates to true.\nThis setting is false by default."
        }
      }
    },
    "HandleNullPropagationOption": {
      "type": "integer",
      "description": "This enum defines how to handle null propagation in queryable support.",
      "x-enumNames": [
        "Default",
        "True",
        "False"
      ],
      "enum": [
        0,
        1,
        2
      ]
    },
    "TopQueryOption": {
      "type": "object",
      "description": "This defines a $top OData query option for querying.",
      "required": [
        "value"
      ],
      "properties": {
        "context": {
          "description": "Gets the given ODataQueryContext.",
          "allOf": [
            {
              "$ref": "#/definitions/ODataQueryContext"
            }
          ]
        },
        "rawValue": {
          "type": "string",
          "description": "Gets the raw $top value."
        },
        "value": {
          "type": "integer",
          "description": "Gets the value of the $top as a parsed integer.",
          "format": "int32"
        },
        "validator": {
          "description": "Gets or sets the Top Query Validator.",
          "allOf": [
            {
              "$ref": "#/definitions/TopQueryValidator"
            }
          ]
        }
      }
    },
    "TopQueryValidator": {
      "type": "object",
      "description": "Represents a validator used to validate a TopQueryOption based on the ODataValidationSettings."
    },
    "CountQueryOption": {
      "type": "object",
      "description": "Represents the value of the $count query option and exposes a way to retrieve the number of entities that satisfy a query.",
      "required": [
        "value"
      ],
      "properties": {
        "context": {
          "description": "Gets the given ODataQueryContext.",
          "allOf": [
            {
              "$ref": "#/definitions/ODataQueryContext"
            }
          ]
        },
        "rawValue": {
          "type": "string",
          "description": "Gets the raw $count value."
        },
        "value": {
          "type": "boolean",
          "description": "Gets the value of the $count in a parsed form."
        },
        "validator": {
          "description": "Gets or sets the $count query validator.",
          "allOf": [
            {
              "$ref": "#/definitions/CountQueryValidator"
            }
          ]
        }
      }
    },
    "CountQueryValidator": {
      "type": "object",
      "description": "Represents a validator used to validate a CountQueryOption \nbased on the ODataValidationSettings."
    },
    "ODataQueryValidator": {
      "type": "object",
      "description": "Represents a validator used to validate OData queries based on the ODataValidationSettings."
    }
  }
}
