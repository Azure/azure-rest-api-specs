{
  "swagger": "2.0",
  "info": {
    "version": "preview",
    "title": "Azure IoT Central",
    "description": "Azure IoT Central is a service that makes it easy to connect, monitor, and manage your IoT devices at scale."
  },
  "basePath": "/api/preview",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "definitions": {
    "ApiToken": {
      "allOf": [
        {
          "$ref": "#/definitions/Permission"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "description": "Unique ID of the API token.",
              "type": "string",
              "readOnly": true
            },
            "token": {
              "description": "Value of the API token.",
              "type": "string",
              "readOnly": true
            },
            "expiry": {
              "description": "String-formatted date representing the time when the token expires.",
              "type": "string",
              "format": "date-time"
            }
          }
        }
      ]
    },
    "ApiTokenCollection": {
      "type": "object",
      "properties": {
        "value": {
          "description": "The collection of API tokens.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiToken"
          }
        },
        "nextLink": {
          "description": "URL to get the next page of API tokens.",
          "type": "string"
        }
      },
      "required": [
        "value"
      ]
    },
    "Attestation": {
      "type": "object",
      "properties": {
        "type": {
          "description": "Type of the attestation.",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "discriminator": "type"
    },
    "SymmetricKeyAttestation": {
      "allOf": [
        {
          "$ref": "#/definitions/Attestation"
        },
        {
          "type": "object",
          "properties": {
            "symmetricKey": {
              "description": "The symmetric key credentials for this attestation.",
              "$ref": "#/definitions/SymmetricKey"
            }
          },
          "required": [
            "symmetricKey"
          ]
        }
      ]
    },
    "X509Attestation": {
      "allOf": [
        {
          "$ref": "#/definitions/Attestation"
        },
        {
          "type": "object",
          "properties": {
            "x509": {
              "description": "The X.509 credentials for this attestation.",
              "$ref": "#/definitions/X509"
            }
          },
          "required": [
            "x509"
          ]
        }
      ]
    },
    "TpmAttestation": {
      "allOf": [
        {
          "$ref": "#/definitions/Attestation"
        },
        {
          "type": "object",
          "properties": {
            "tpm": {
              "description": "The TPM credentials for this attestation.",
              "$ref": "#/definitions/Tpm"
            }
          },
          "required": [
            "tpm"
          ]
        }
      ]
    },
    "SchemaField": {
      "allOf": [
        {
          "$ref": "#/definitions/NamedEntity"
        },
        {
          "type": "object",
          "properties": {
            "schema": {
              "description": "The schema of this field."
            },
            "displayUnit": {
              "description": "The display name of the unit of this field.",
              "type": "string"
            },
            "unit": {
              "description": "The unit of this field.",
              "type": "string"
            }
          },
          "required": [
            "schema"
          ]
        }
      ]
    },
    "Capability": {
      "allOf": [
        {
          "$ref": "#/definitions/NamedEntity"
        },
        {
          "type": "object",
          "properties": {
            "schema": {
              "description": "The schema of this field."
            },
            "displayUnit": {
              "description": "The display name of the unit of this field.",
              "type": "string"
            },
            "unit": {
              "description": "The unit of this field.",
              "type": "string"
            }
          }
        },
        {
          "type": "object",
          "properties": {
            "commandType": {
              "description": "The call pattern of this command.",
              "x-ms-enum": {
                "name": "CommandTypes",
                "modelAsString": true
              },
              "type": "string",
              "enum": [
                "synchronous",
                "asynchronous"
              ]
            },
            "request": {
              "description": "The request definition for this command.",
              "$ref": "#/definitions/SchemaField"
            },
            "response": {
              "description": "The response definition for this command.",
              "$ref": "#/definitions/SchemaField"
            }
          }
        },
        {
          "type": "object",
          "properties": {
            "writable": {
              "description": "Whether this property is writable.",
              "type": "boolean"
            }
          }
        },
        {
          "type": "object",
          "properties": {
            "target": {
              "description": "The target capability models for this relationship.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "minItems": 1
            },
            "maxMultiplicity": {
              "description": "The maximum multiplicity for this relationship.",
              "type": "integer"
            }
          }
        }
      ]
    },
    "Interface": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "contents": {
              "description": "The data definitions contained by the interface.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Capability"
              }
            }
          }
        }
      ]
    },
    "Component": {
      "allOf": [
        {
          "$ref": "#/definitions/NamedEntity"
        },
        {
          "type": "object",
          "properties": {
            "schema": {
              "description": "The interface used by this component.",
              "$ref": "#/definitions/Interface"
            }
          }
        }
      ]
    },
    "CapabilityModel": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "implements": {
              "description": "The component implemented by the capability model.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Component"
              }
            },
            "contents": {
              "description": "The relationships contained by the capability model.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Capability"
              }
            }
          }
        }
      ]
    },
    "Endpoint": {
      "type": "object",
      "properties": {
        "type": {
          "description": "Type of the endpoint.",
          "type": "string"
        },
        "connectionString": {
          "description": "Information for connecting to the endpoint.",
          "type": "string"
        },
        "name": {
          "description": "Name of the entity to send data to.",
          "type": "string"
        }
      },
      "required": [
        "type",
        "connectionString",
        "name"
      ],
      "discriminator": "type"
    },
    "StorageEndpoint": {
      "allOf": [
        {
          "$ref": "#/definitions/Endpoint"
        }
      ]
    },
    "EventHubsEndpoint": {
      "allOf": [
        {
          "$ref": "#/definitions/Endpoint"
        }
      ]
    },
    "ServiceBusQueueEndpoint": {
      "allOf": [
        {
          "$ref": "#/definitions/Endpoint"
        }
      ]
    },
    "ServiceBusTopicEndpoint": {
      "allOf": [
        {
          "$ref": "#/definitions/Endpoint"
        }
      ]
    },
    "ContinuousDataExport": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique ID of the continuous data export.",
          "type": "string",
          "readOnly": true
        },
        "etag": {
          "description": "ETag used to prevent conflict in continuous data export updates.",
          "type": "string"
        },
        "displayName": {
          "description": "Display name of the continuous data export.",
          "type": "string"
        },
        "endpoint": {
          "description": "Location where exported data should be sent.",
          "$ref": "#/definitions/Endpoint"
        },
        "status": {
          "description": "Indicates whether the continuous data export is starting, running, etc.",
          "type": "string",
          "readOnly": true
        },
        "enabled": {
          "description": "Boolean indicating whether the continuous data export should be running or not.",
          "type": "boolean"
        },
        "sources": {
          "description": "Data sources to export to the endpoint.",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "devices",
              "deviceTemplates",
              "telemetry"
            ]
          },
          "minItems": 1
        }
      },
      "required": [
        "endpoint",
        "enabled",
        "sources"
      ]
    },
    "ContinuousDataExportCollection": {
      "type": "object",
      "properties": {
        "value": {
          "description": "The collection of continuous data exports.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContinuousDataExport"
          }
        },
        "nextLink": {
          "description": "URL to get the next page of continuous data exports.",
          "type": "string"
        }
      },
      "required": [
        "value"
      ]
    },
    "Device": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique ID of the device.",
          "type": "string",
          "readOnly": true
        },
        "etag": {
          "description": "ETag used to prevent conflict in device updates.",
          "type": "string"
        },
        "displayName": {
          "description": "Display name of the device.",
          "type": "string"
        },
        "description": {
          "description": "Detailed description of the device.",
          "type": "string"
        },
        "instanceOf": {
          "description": "The device template definition for the device.",
          "type": "string"
        },
        "simulated": {
          "description": "Whether the device is simulated.",
          "type": "boolean"
        },
        "approved": {
          "description": "Whether the device has been approved to connect to IoT Central.",
          "type": "boolean"
        },
        "provisioned": {
          "description": "Whether resources have been allocated for the device.",
          "type": "boolean",
          "readOnly": true
        }
      },
      "required": [
        "instanceOf"
      ]
    },
    "DeviceCollection": {
      "type": "object",
      "properties": {
        "value": {
          "description": "The collection of devices.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Device"
          }
        },
        "nextLink": {
          "description": "URL to get the next page of devices.",
          "type": "string"
        }
      },
      "required": [
        "value"
      ]
    },
    "DeviceCloudProperties": {
      "description": "Cloud property values associated with the device.",
      "type": "object",
      "additionalProperties": true
    },
    "DeviceCommand": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The request ID of the device command execution.",
          "type": "string",
          "readOnly": true
        },
        "request": {
          "description": "The payload for the device command."
        },
        "response": {
          "description": "The payload of the device command response.",
          "readOnly": true
        },
        "responseCode": {
          "description": "The status code of the device command response.",
          "type": "integer",
          "readOnly": true
        }
      }
    },
    "DeviceCommandCollection": {
      "type": "object",
      "properties": {
        "value": {
          "description": "The collection of device command executions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeviceCommand"
          }
        },
        "nextLink": {
          "description": "URL to get the next page of device command executions.",
          "type": "string"
        }
      },
      "required": [
        "value"
      ]
    },
    "DeviceCredentials": {
      "type": "object",
      "properties": {
        "idScope": {
          "description": "ID scope for connecting to the IoT Central application.",
          "type": "string"
        },
        "symmetricKey": {
          "description": "The symmetric key credentials for the device.",
          "$ref": "#/definitions/SymmetricKey"
        },
        "x509": {
          "description": "The X.509 credential information for the device.",
          "$ref": "#/definitions/X509"
        },
        "tpm": {
          "description": "The TPM credentials for the device.",
          "$ref": "#/definitions/Tpm"
        }
      },
      "required": [
        "idScope"
      ]
    },
    "DeviceProperties": {
      "description": "Property values associated with the device.",
      "type": "object",
      "additionalProperties": true
    },
    "DeviceTelemetry": {
      "type": "object",
      "properties": {
        "value": {
          "description": "The last known value of this device telemetry."
        },
        "timestamp": {
          "description": "String-formatted date representing the time when the telemetry value was sent.",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "DeviceTemplate": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique ID of the device template.",
          "type": "string",
          "readOnly": true
        },
        "etag": {
          "description": "ETag used to prevent conflict in device template updates.",
          "type": "string"
        },
        "types": {
          "description": "The types of device to which this template applies.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "displayName": {
          "description": "Display name of the device template.",
          "type": "string"
        },
        "description": {
          "description": "Detailed description of the device template.",
          "type": "string"
        },
        "capabilityModel": {
          "description": "The capability model utilized by this device template.",
          "$ref": "#/definitions/CapabilityModel"
        },
        "solutionModel": {
          "description": "The solution model utilized by this device template.",
          "$ref": "#/definitions/SolutionModel"
        }
      },
      "required": [
        "types",
        "capabilityModel"
      ]
    },
    "DeviceTemplateCollection": {
      "type": "object",
      "properties": {
        "value": {
          "description": "The collection of device templates.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeviceTemplate"
          }
        },
        "nextLink": {
          "description": "URL to get the next page of device templates.",
          "type": "string"
        }
      },
      "required": [
        "value"
      ]
    },
    "SymmetricKey": {
      "type": "object",
      "properties": {
        "primaryKey": {
          "description": "The primary key for this credential.",
          "type": "string"
        },
        "secondaryKey": {
          "description": "The secondary key for this credential.",
          "type": "string"
        }
      },
      "required": [
        "primaryKey",
        "secondaryKey"
      ]
    },
    "Tpm": {
      "type": "object",
      "properties": {
        "endorsementKey": {
          "description": "The TPM endorsement key for this credential.",
          "type": "string"
        }
      },
      "required": [
        "endorsementKey"
      ]
    },
    "X509": {
      "type": "object",
      "properties": {
        "clientCertificates": {
          "description": "The X.509 client certificates for this credential.",
          "$ref": "#/definitions/X509Certificates"
        }
      },
      "required": [
        "clientCertificates"
      ]
    },
    "X509Certificates": {
      "type": "object",
      "properties": {
        "primary": {
          "description": "The primary X.509 certificate for this credential.",
          "$ref": "#/definitions/X509Certificate"
        },
        "secondary": {
          "description": "The secondary X.509 certificate for this credential.",
          "$ref": "#/definitions/X509Certificate"
        }
      },
      "required": [
        "primary"
      ]
    },
    "X509Certificate": {
      "type": "object",
      "properties": {
        "certificate": {
          "description": "The string representation of this certificate.",
          "type": "string"
        },
        "info": {
          "description": "Information about this certificate.",
          "readOnly": true,
          "$ref": "#/definitions/X509CertificateInfo"
        }
      }
    },
    "X509CertificateInfo": {
      "type": "object",
      "properties": {
        "sha1Thumbprint": {
          "description": "The SHA-1 hash value of the certificate.",
          "type": "string"
        }
      },
      "required": [
        "sha1Thumbprint"
      ]
    },
    "Entity": {
      "type": "object",
      "properties": {
        "@context": {
          "description": "JSON-LD context for the entity."
        },
        "@id": {
          "description": "Unique ID of the entity.",
          "type": "string"
        },
        "@type": {
          "description": "Type of the entity.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "minItems": 1
        },
        "displayName": {
          "description": "Display name of the entity.",
          "type": "string"
        },
        "description": {
          "description": "Detailed description of the entity.",
          "type": "string"
        },
        "comment": {
          "description": "Developer comment about the entity.",
          "type": "string"
        }
      },
      "required": [
        "@type"
      ]
    },
    "NamedEntity": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "description": "The programmatic name of the named entity.",
              "type": "string"
            }
          },
          "required": [
            "name"
          ]
        }
      ]
    },
    "Permission": {
      "type": "object",
      "properties": {
        "roles": {
          "description": "Roles that the permission has been granted permission to.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "minItems": 1,
          "maxItems": 1
        }
      },
      "required": [
        "roles"
      ]
    },
    "Role": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique ID of the role.",
          "type": "string",
          "readOnly": true
        },
        "displayName": {
          "description": "Display name of the role.",
          "type": "string"
        }
      }
    },
    "RoleCollection": {
      "type": "object",
      "properties": {
        "value": {
          "description": "The collection of roles.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Role"
          }
        },
        "nextLink": {
          "description": "URL to get the next page of roles.",
          "type": "string"
        }
      },
      "required": [
        "value"
      ]
    },
    "SolutionModel": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "cloudProperties": {
              "description": "The cloud properties defined by the solution model.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Capability"
              }
            },
            "initialValues": {
              "description": "The initial values defined by the solution model.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/InitialValue"
              }
            },
            "overrides": {
              "description": "The overrides defined by the solution model.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Override"
              }
            }
          }
        }
      ]
    },
    "InitialValue": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "capability": {
              "description": "The reference to the capability for which an initial value is being provided.",
              "$ref": "#/definitions/CapabilityReference"
            },
            "value": {
              "description": "The initial value of the capability."
            }
          }
        }
      ]
    },
    "Override": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "capability": {
              "description": "The reference to the capability which is being overridden.",
              "$ref": "#/definitions/CapabilityReference"
            },
            "displayUnit": {
              "description": "The overridden display unit for the referenced capability.",
              "type": "string"
            },
            "semanticType": {
              "description": "The overridden semantic type for the referenced capability.",
              "type": "string"
            },
            "unit": {
              "description": "The overridden unit for the referenced capability.",
              "type": "string"
            },
            "valueDetail": {
              "description": "Visualization details for the referenced capability.",
              "$ref": "#/definitions/ValueDetail"
            }
          }
        }
      ]
    },
    "ValueDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "falseName": {
              "description": "The string representation of a false value.",
              "type": "string"
            },
            "trueName": {
              "description": "The string representation of a true value.",
              "type": "string"
            }
          }
        },
        {
          "type": "object",
          "properties": {
            "hideTime": {
              "description": "Specifies that the time portion of the date-time value should be hidden.",
              "type": "boolean"
            }
          }
        },
        {
          "type": "object",
          "properties": {
            "severity": {
              "description": "Specifies the severity of the event.",
              "x-ms-enum": {
                "name": "EventSeverity",
                "modelAsString": true
              },
              "type": "string",
              "enum": [
                "error",
                "warning",
                "information"
              ]
            }
          }
        },
        {
          "type": "object",
          "properties": {
            "decimalPlaces": {
              "description": "The number of decimal places that should be displayed for the number.",
              "type": "integer"
            },
            "maxValue": {
              "description": "The maximum expected value of the number.",
              "type": "number"
            },
            "minValue": {
              "description": "The minimum expected value of the number.",
              "type": "number"
            }
          }
        },
        {
          "type": "object",
          "properties": {
            "maxLength": {
              "description": "The maximum expected length of the string.",
              "type": "integer"
            },
            "minLength": {
              "description": "The minimum expected length of the string.",
              "type": "integer"
            },
            "trimWhitespace": {
              "description": "Specifies the visual and storage treatment of white spaces in the string.",
              "type": "boolean"
            }
          }
        }
      ]
    },
    "CapabilityReference": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "component": {
              "description": "The name of the component being referenced.",
              "type": "string"
            },
            "reference": {
              "description": "The name of the capability being referenced.",
              "type": "string"
            }
          }
        }
      ]
    }
  },
  "paths": {
    "/apiTokens": {
      "get": {
        "operationId": "ApiTokens_List",
        "summary": "Get the list of API tokens in an application.",
        "x-ms-examples": {
          "List API tokens": {
            "$ref": "./examples/apitoken_list.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiTokenCollection"
            }
          }
        }
      }
    },
    "/apiTokens/{token_id}": {
      "parameters": [
        {
          "in": "path",
          "name": "token_id",
          "description": "Unique ID for the API token.",
          "type": "string",
          "required": true
        }
      ],
      "get": {
        "operationId": "ApiTokens_Get",
        "summary": "Get an API token by ID.",
        "x-ms-examples": {
          "Get API token by ID": {
            "$ref": "./examples/apitoken_get.json"
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiToken"
            }
          }
        }
      },
      "put": {
        "operationId": "ApiTokens_Set",
        "summary": "Create a new API token in the application.",
        "x-ms-examples": {
          "Create API token": {
            "$ref": "./examples/apitoken_create.json"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "token_id",
            "description": "Unique ID for the API token.",
            "type": "string",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "description": "API token body.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiToken"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiToken"
            }
          }
        }
      },
      "delete": {
        "operationId": "ApiTokens_Remove",
        "summary": "Delete an API token.",
        "parameters": [
          {
            "in": "path",
            "name": "token_id",
            "description": "Unique ID for the API token.",
            "type": "string",
            "required": true
          }
        ],
        "x-ms-examples": {
          "Delete API token": {
            "$ref": "./examples/apitoken_delete.json"
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          }
        }
      }
    },
    "/continuousDataExports": {
      "get": {
        "operationId": "ContinuousDataExports_List",
        "summary": "Get the list of continuous data exports in an application.",
        "x-ms-examples": {
          "List exports": {
            "$ref": "./examples/continuousdataexports_list.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ContinuousDataExportCollection"
            }
          }
        }
      }
    },
    "/continuousDataExports/{export_id}": {
      "parameters": [
        {
          "in": "path",
          "name": "export_id",
          "description": "Unique ID for the continuous data export.",
          "type": "string",
          "required": true
        }
      ],
      "get": {
        "operationId": "ContinuousDataExports_Get",
        "summary": "Get a continuous data export by ID.",
        "x-ms-examples": {
          "Get export": {
            "$ref": "./examples/continuousdataexports_get.json"
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ContinuousDataExport"
            }
          }
        }
      },
      "put": {
        "operationId": "ContinuousDataExports_Set",
        "summary": "Create a new continuous data export or update an existing one by ID.",
        "x-ms-examples": {
          "Create or update export": {
            "$ref": "./examples/continuousdataexports_set.json"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "export_id",
            "description": "Unique ID for the continuous data export.",
            "type": "string",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "description": "Data export body.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContinuousDataExport"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ContinuousDataExport"
            }
          }
        }
      },
      "delete": {
        "operationId": "ContinuousDataExports_Remove",
        "summary": "Delete a continuous data export.",
        "parameters": [
          {
            "in": "path",
            "name": "export_id",
            "description": "Unique ID for the continuous data export.",
            "type": "string",
            "required": true
          }
        ],
        "x-ms-examples": {
          "Delete export": {
            "$ref": "./examples/continuousdataexports_delete.json"
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          }
        }
      }
    },
    "/deviceTemplates": {
      "get": {
        "operationId": "DeviceTemplates_List",
        "summary": "Get the list of device templates in an application",
        "x-ms-examples": {
          "List device templates": {
            "$ref": "./examples/devicetemplates_list.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeviceTemplateCollection"
            }
          }
        }
      }
    },
    "/deviceTemplates/{device_template_id}": {
      "get": {
        "operationId": "DeviceTemplates_Get",
        "summary": "Get a device template by ID",
        "parameters": [
          {
            "$ref": "#/parameters/DeviceTemplateId"
          }
        ],
        "x-ms-examples": {
          "Get a device template by Id": {
            "$ref": "./examples/devicetemplates_get.json"
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeviceTemplate"
            }
          }
        }
      },
      "delete": {
        "operationId": "DeviceTemplates_Remove",
        "summary": "Delete a device template",
        "description": "Delete an existing device template by device ID.",
        "parameters": [
          {
            "$ref": "#/parameters/DeviceTemplateId"
          }
        ],
        "x-ms-examples": {
          "Delete a device template by Id": {
            "$ref": "./examples/devicetemplates_delete.json"
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          }
        }
      },
      "put": {
        "operationId": "DeviceTemplates_Set",
        "summary": "Create or update a device template",
        "x-ms-examples": {
          "Create a device template": {
            "$ref": "./examples/devicetemplates_create.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/DeviceTemplateId"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Device template body.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeviceTemplate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeviceTemplate"
            }
          }
        }
      }
    },
    "/deviceTemplates/{device_template_id}/merged": {
      "get": {
        "operationId": "DeviceTemplates_GetMerged",
        "summary": "Get a merged device template by ID",
        "parameters": [
          {
            "$ref": "#/parameters/DeviceTemplateId"
          }
        ],
        "x-ms-examples": {
          "Get a merged device template by Id": {
            "$ref": "./examples/devicetemplates_get_merged.json"
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeviceTemplate"
            }
          }
        }
      }
    },
    "/deviceTemplates/{device_template_id}/devices": {
      "get": {
        "operationId": "DeviceTemplates_ListDevices",
        "summary": "Get devices for a template",
        "parameters": [
          {
            "$ref": "#/parameters/DeviceTemplateId"
          }
        ],
        "x-ms-examples": {
          "List devices associated to a device template": {
            "$ref": "./examples/devices_list_by_template.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeviceCollection"
            }
          }
        }
      }
    },
    "/devices": {
      "get": {
        "operationId": "Devices_List",
        "summary": "Get the list of devices in an application",
        "x-ms-examples": {
          "List devices": {
            "$ref": "./examples/devices_list.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeviceCollection"
            }
          }
        }
      }
    },
    "/devices/{device_id}": {
      "get": {
        "operationId": "Devices_Get",
        "summary": "Get a device by ID",
        "description": "Get details about an existing device by device ID.",
        "parameters": [
          {
            "$ref": "#/parameters/DeviceId"
          }
        ],
        "x-ms-examples": {
          "Get device by Id": {
            "$ref": "./examples/devices_get.json"
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Device"
            }
          }
        }
      },
      "put": {
        "operationId": "Devices_Set",
        "summary": "Create or update a device",
        "description": "Create a new device or update an existing one by device ID.",
        "x-ms-examples": {
          "Create device": {
            "$ref": "./examples/devices_create.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/DeviceId"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Device body.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Device"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Device"
            }
          }
        }
      },
      "delete": {
        "operationId": "Devices_Remove",
        "summary": "Delete a device",
        "description": "Delete an existing device by device ID.",
        "parameters": [
          {
            "$ref": "#/parameters/DeviceId"
          }
        ],
        "x-ms-examples": {
          "Delete device": {
            "$ref": "./examples/devices_delete.json"
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          }
        }
      }
    },
    "/roles": {
      "get": {
        "operationId": "Roles_List",
        "summary": "Get the list of roles in an application.",
        "x-ms-examples": {
          "List roles": {
            "$ref": "./examples/roles_list.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RoleCollection"
            }
          }
        }
      }
    },
    "/roles/{role_id}": {
      "get": {
        "operationId": "Roles_Get",
        "summary": "Get a role by ID.",
        "parameters": [
          {
            "in": "path",
            "name": "role_id",
            "description": "Unique ID for the role.",
            "type": "string",
            "required": true
          }
        ],
        "x-ms-examples": {
          "Get role by Id": {
            "$ref": "./examples/roles_get.json"
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Role"
            }
          }
        }
      }
    },
    "/devices/{device_id}/attestation": {
      "parameters": [
        {
          "$ref": "#/parameters/DeviceId"
        }
      ],
      "get": {
        "operationId": "Devices_GetAttestation",
        "summary": "Get device attestation",
        "x-ms-examples": {
          "Get device attestation": {
            "$ref": "./examples/devices_attestations_get.json"
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Attestation"
            }
          }
        }
      },
      "put": {
        "operationId": "Devices_SetAttestation",
        "summary": "Create or update an individual device attestation",
        "parameters": [
          {
            "$ref": "#/parameters/DeviceId"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Individual device attestation body.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Attestation"
            }
          }
        ],
        "x-ms-examples": {
          "Create or update device attestation": {
            "$ref": "./examples/devices_attestations_set.json"
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Attestation"
            }
          }
        }
      },
      "delete": {
        "operationId": "Devices_RemoveAttestation",
        "summary": "Remove an individual device attestation",
        "parameters": [
          {
            "$ref": "#/parameters/DeviceId"
          }
        ],
        "x-ms-examples": {
          "Delete device attestation": {
            "$ref": "./examples/devices_attestations_delete.json"
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          }
        }
      }
    },
    "/devices/{device_id}/cloudProperties": {
      "parameters": [
        {
          "$ref": "#/parameters/DeviceId"
        }
      ],
      "get": {
        "operationId": "Devices_GetCloudProperties",
        "summary": "Get device cloud properties",
        "description": "Get all cloud property values of a device by device ID.",
        "x-ms-examples": {
          "Get cloud properties": {
            "$ref": "./examples/devices_cloudproperties_get.json"
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeviceCloudProperties"
            }
          }
        }
      },
      "put": {
        "operationId": "Devices_UpdateCloudProperties",
        "summary": "Update device cloud properties",
        "description": "Update all cloud property values of a device by device ID.",
        "x-ms-examples": {
          "Update cloud properties": {
            "$ref": "./examples/devices_cloudproperties_update.json"
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Device properties.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeviceCloudProperties"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeviceCloudProperties"
            }
          }
        }
      }
    },
    "/devices/{device_id}/components/{component_name}/commands/{command_name}": {
      "parameters": [
        {
          "$ref": "#/parameters/DeviceId"
        },
        {
          "$ref": "#/parameters/ComponentName"
        },
        {
          "in": "path",
          "name": "command_name",
          "description": "Name of this device command.",
          "x-ms-parameter-location": "method",
          "type": "string",
          "required": true
        }
      ],
      "get": {
        "operationId": "Devices_GetCommandHistory",
        "summary": "Get device command history",
        "x-ms-examples": {
          "Get command history": {
            "$ref": "./examples/devices_commandshistory_get.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeviceCommandCollection"
            }
          }
        }
      },
      "post": {
        "operationId": "Devices_ExecuteCommand",
        "summary": "Execute a device command",
        "description": "Execute a command on a device.",
        "x-ms-examples": {
          "Send command": {
            "$ref": "./examples/devices_commands_send.json"
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Device command body.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeviceCommand"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeviceCommand"
            }
          }
        }
      }
    },
    "/devices/{device_id}/credentials": {
      "parameters": [
        {
          "$ref": "#/parameters/DeviceId"
        }
      ],
      "get": {
        "operationId": "Devices_GetCredentials",
        "summary": "Get device credentials",
        "x-ms-examples": {
          "Get device credentials": {
            "$ref": "./examples/devicecredentials_get.json"
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeviceCredentials"
            }
          }
        }
      }
    },
    "/devices/{device_id}/properties": {
      "parameters": [
        {
          "$ref": "#/parameters/DeviceId"
        }
      ],
      "get": {
        "operationId": "Devices_GetProperties",
        "summary": "Get device properties",
        "description": "Get all property values of a device by device ID.",
        "x-ms-examples": {
          "Get properties": {
            "$ref": "./examples/devices_properties_get.json"
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeviceProperties"
            }
          }
        }
      },
      "put": {
        "operationId": "Devices_UpdateProperties",
        "summary": "Update device properties",
        "description": "Update all property values of a device by device ID.",
        "x-ms-examples": {
          "Update properties": {
            "$ref": "./examples/devices_properties_update.json"
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Device properties.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeviceProperties"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeviceProperties"
            }
          }
        }
      }
    },
    "/devices/{device_id}/components/{component_name}/properties": {
      "parameters": [
        {
          "$ref": "#/parameters/DeviceId"
        },
        {
          "$ref": "#/parameters/ComponentName"
        }
      ],
      "get": {
        "operationId": "Devices_GetComponentProperties",
        "summary": "Get device properties for a specific component",
        "x-ms-examples": {
          "Get properties on components": {
            "$ref": "./examples/devices_properties_components_get.json"
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeviceProperties"
            }
          }
        }
      },
      "put": {
        "operationId": "Devices_UpdateComponentProperties",
        "summary": "Update device properties for a specific component",
        "x-ms-examples": {
          "Update properties on components": {
            "$ref": "./examples/devices_properties_components_set.json"
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Device properties.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeviceProperties"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeviceProperties"
            }
          }
        }
      }
    },
    "/devices/{device_id}/components/{component_name}/telemetry/{telemetry_name}": {
      "parameters": [
        {
          "$ref": "#/parameters/DeviceId"
        },
        {
          "$ref": "#/parameters/ComponentName"
        },
        {
          "in": "path",
          "name": "telemetry_name",
          "description": "Name of this device telemetry.",
          "x-ms-parameter-location": "method",
          "type": "string",
          "required": true
        }
      ],
      "get": {
        "operationId": "Devices_GetTelemetryValue",
        "summary": "Get device telemetry value",
        "x-ms-examples": {
          "Get telemetry": {
            "$ref": "./examples/devices_telemetry_get.json"
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeviceTelemetry"
            }
          }
        }
      }
    }
  },
  "parameters": {
    "DeviceTemplateId": {
      "in": "path",
      "name": "device_template_id",
      "description": "Unique ID of the device template.",
      "x-ms-parameter-location": "method",
      "type": "string",
      "required": true
    },
    "DeviceId": {
      "in": "path",
      "name": "device_id",
      "description": "Unique ID of the device.",
      "x-ms-parameter-location": "method",
      "type": "string",
      "required": true
    },
    "ComponentName": {
      "in": "path",
      "name": "component_name",
      "description": "Name of the component. In the device template editor in your app, this is the interface instance name.",
      "x-ms-parameter-location": "method",
      "type": "string",
      "required": true
    },
    "Subdomain": {
      "in": "path",
      "name": "subdomain",
      "description": "Application subdomain.",
      "x-ms-parameter-location": "client",
      "type": "string",
      "required": true
    },
    "CentralDnsSuffixInPath": {
      "name": "centralDnsSuffixInPath",
      "in": "path",
      "required": true,
      "type": "string",
      "default": "azureiotcentral.com",
      "x-ms-skip-url-encoding": true,
      "description": "The DNS suffix used as the base for all Azure IoT Central service requests.",
      "x-ms-parameter-location": "client"
    }
  },
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "flow": "implicit",
      "description": "Azure Active Directory OAuth2 Flow",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      }
    }
  },
  "x-ms-parameterized-host": {
    "hostTemplate": "{subdomain}.{centralDnsSuffixInPath}",
    "parameters": [
      {
        "$ref": "#/parameters/Subdomain"
      },
      {
        "$ref": "#/parameters/CentralDnsSuffixInPath"
      }
    ]
  }
}
