{
  "swagger": "2.0",
  "info": {
    "title": "Microsoft.AlicespringsDataplane management service",
    "version": "2023-07-17-preview",
    "description": "Microsoft.AlicespringsDataplane Resource Provider management API.",
    "x-typespec-generated": [
      {
        "emitter": "@azure-tools/typespec-autorest"
      }
    ]
  },
  "schemes": [
    "https"
  ],
  "host": "management.azure.com",
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ],
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "description": "Azure Active Directory OAuth2 Flow.",
      "flow": "implicit",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      }
    }
  },
  "tags": [
    {
      "name": "Operations"
    },
    {
      "name": "E4k"
    },
    {
      "name": "Broker"
    },
    {
      "name": "BrokerListener"
    },
    {
      "name": "BrokerAuthentication"
    },
    {
      "name": "BrokerAuthorization"
    },
    {
      "name": "MqttBridgeConnector"
    },
    {
      "name": "MqttBridgeTopicMap"
    },
    {
      "name": "DiagnosticService"
    },
    {
      "name": "DatalakeConnector"
    },
    {
      "name": "DatalakeConnectorTopicMap"
    }
  ],
  "paths": {
    "/providers/Microsoft.AlicespringsDataplane/operations": {
      "get": {
        "operationId": "Operations_List",
        "tags": [
          "Operations"
        ],
        "description": "List the operations for the provider",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/OperationListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Operations_List": {
            "$ref": "./examples/Operations_List.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.AlicespringsDataplane/e4k": {
      "get": {
        "operationId": "E4k_ListBySubscription",
        "tags": [
          "E4k"
        ],
        "description": "List E4kResource resources by subscription ID",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/E4kResourceListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "E4k_ListBySubscription": {
            "$ref": "./examples/E4K_ListBySubscription.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AlicespringsDataplane/e4k": {
      "get": {
        "operationId": "E4k_ListByResourceGroup",
        "tags": [
          "E4k"
        ],
        "description": "List E4kResource resources by resource group",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/E4kResourceListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "E4k_ListByResourceGroup": {
            "$ref": "./examples/E4k_ListByResourceGroup.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AlicespringsDataplane/e4k/{e4kName}": {
      "get": {
        "operationId": "E4k_Get",
        "tags": [
          "E4k"
        ],
        "description": "Get a E4kResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "e4kName",
            "in": "path",
            "description": "Name of E4K resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/E4kResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "E4k_Get": {
            "$ref": "./examples/E4k_Get.json"
          }
        }
      },
      "put": {
        "operationId": "E4k_CreateOrUpdate",
        "tags": [
          "E4k"
        ],
        "description": "Create a E4kResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "e4kName",
            "in": "path",
            "description": "Name of E4K resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/E4kResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Arm resource update successful",
            "schema": {
              "$ref": "#/definitions/E4kResource"
            }
          },
          "201": {
            "description": "Arm resource create successful",
            "schema": {
              "$ref": "#/definitions/E4kResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "E4k_CreateOrUpdate": {
            "$ref": "./examples/E4k_CreateOrUpdate.json"
          }
        }
      },
      "patch": {
        "operationId": "E4k_Update",
        "tags": [
          "E4k"
        ],
        "description": "Update a E4kResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "e4kName",
            "in": "path",
            "description": "Name of E4K resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/E4kResourceUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/E4kResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "E4k_Update": {
            "$ref": "./examples/E4K_Update.json"
          }
        }
      },
      "delete": {
        "operationId": "E4k_Delete",
        "tags": [
          "E4k"
        ],
        "description": "Delete a E4kResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "e4kName",
            "in": "path",
            "description": "Name of E4K resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "204": {
            "description": "Resource deleted successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "E4k_Delete": {
            "$ref": "./examples/E4k_Delete.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AlicespringsDataplane/e4k/{e4kName}/broker": {
      "get": {
        "operationId": "Broker_ListByE4kResource",
        "tags": [
          "Broker"
        ],
        "description": "List BrokerResource resources by E4kResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "e4kName",
            "in": "path",
            "description": "Name of E4K resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/BrokerResourceListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Broker_ListByE4kResource": {
            "$ref": "./examples/E4k_Broker_ListByResource.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AlicespringsDataplane/e4k/{e4kName}/broker/{brokerName}": {
      "get": {
        "operationId": "Broker_Get",
        "tags": [
          "Broker"
        ],
        "description": "Get a BrokerResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "e4kName",
            "in": "path",
            "description": "Name of E4K resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "brokerName",
            "in": "path",
            "description": "Name of E4K broker resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/BrokerResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Broker_Get": {
            "$ref": "./examples/E4k_Broker_Get.json"
          }
        }
      },
      "put": {
        "operationId": "Broker_CreateOrUpdate",
        "tags": [
          "Broker"
        ],
        "description": "Create a BrokerResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "e4kName",
            "in": "path",
            "description": "Name of E4K resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "brokerName",
            "in": "path",
            "description": "Name of E4K broker resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BrokerResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Arm resource update successful",
            "schema": {
              "$ref": "#/definitions/BrokerResource"
            }
          },
          "201": {
            "description": "Arm resource create successful",
            "schema": {
              "$ref": "#/definitions/BrokerResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Broker_CreateOrUpdate": {
            "$ref": "./examples/E4k_Broker_CreateOrUpdate.json"
          }
        }
      },
      "patch": {
        "operationId": "Broker_Update",
        "tags": [
          "Broker"
        ],
        "description": "Update a BrokerResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "e4kName",
            "in": "path",
            "description": "Name of E4K resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "brokerName",
            "in": "path",
            "description": "Name of E4K broker resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BrokerResourceUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/BrokerResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Broker_Update": {
            "$ref": "./examples/E4k_Broker_Update.json"
          }
        }
      },
      "delete": {
        "operationId": "Broker_Delete",
        "tags": [
          "Broker"
        ],
        "description": "Delete a BrokerResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "e4kName",
            "in": "path",
            "description": "Name of E4K resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "brokerName",
            "in": "path",
            "description": "Name of E4K broker resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "204": {
            "description": "Resource deleted successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Broker_Delete": {
            "$ref": "./examples/E4k_Broker_Delete.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AlicespringsDataplane/e4k/{e4kName}/broker/{brokerName}/authentication": {
      "get": {
        "operationId": "BrokerAuthentication_ListByBrokerResource",
        "tags": [
          "BrokerAuthentication"
        ],
        "description": "List BrokerAuthenticationResource resources by BrokerResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "e4kName",
            "in": "path",
            "description": "Name of E4K resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "brokerName",
            "in": "path",
            "description": "Name of E4K broker resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/BrokerAuthenticationResourceListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "BrokerAuthentication_ListByBrokerResource": {
            "$ref": "./examples/E4k_Broker_Authentication_ListByResource.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AlicespringsDataplane/e4k/{e4kName}/broker/{brokerName}/authentication/{authenticationName}": {
      "get": {
        "operationId": "BrokerAuthentication_Get",
        "tags": [
          "BrokerAuthentication"
        ],
        "description": "Get a BrokerAuthenticationResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "e4kName",
            "in": "path",
            "description": "Name of E4K resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "brokerName",
            "in": "path",
            "description": "Name of E4K broker resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "authenticationName",
            "in": "path",
            "description": "Name of E4K broker/authentication resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/BrokerAuthenticationResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "BrokerAuthentication_Get": {
            "$ref": "./examples/E4k_Broker_Authentication_Get.json"
          }
        }
      },
      "put": {
        "operationId": "BrokerAuthentication_CreateOrUpdate",
        "tags": [
          "BrokerAuthentication"
        ],
        "description": "Create a BrokerAuthenticationResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "e4kName",
            "in": "path",
            "description": "Name of E4K resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "brokerName",
            "in": "path",
            "description": "Name of E4K broker resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "authenticationName",
            "in": "path",
            "description": "Name of E4K broker/authentication resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BrokerAuthenticationResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Arm resource update successful",
            "schema": {
              "$ref": "#/definitions/BrokerAuthenticationResource"
            }
          },
          "201": {
            "description": "Arm resource create successful",
            "schema": {
              "$ref": "#/definitions/BrokerAuthenticationResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "BrokerAuthentication_CreateOrUpdate": {
            "$ref": "./examples/E4k_Broker_Authentication_CreateOrUpdate.json"
          }
        }
      },
      "patch": {
        "operationId": "BrokerAuthentication_Update",
        "tags": [
          "BrokerAuthentication"
        ],
        "description": "Update a BrokerAuthenticationResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "e4kName",
            "in": "path",
            "description": "Name of E4K resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "brokerName",
            "in": "path",
            "description": "Name of E4K broker resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "authenticationName",
            "in": "path",
            "description": "Name of E4K broker/authentication resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BrokerAuthenticationResourceUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/BrokerAuthenticationResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "BrokerAuthentication_Update": {
            "$ref": "./examples/E4k_Broker_Authentication_Update.json"
          }
        }
      },
      "delete": {
        "operationId": "BrokerAuthentication_Delete",
        "tags": [
          "BrokerAuthentication"
        ],
        "description": "Delete a BrokerAuthenticationResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "e4kName",
            "in": "path",
            "description": "Name of E4K resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "brokerName",
            "in": "path",
            "description": "Name of E4K broker resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "authenticationName",
            "in": "path",
            "description": "Name of E4K broker/authentication resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "204": {
            "description": "Resource deleted successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "BrokerAuthentication_Delete": {
            "$ref": "./examples/E4k_Broker_Authentication_Delete.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AlicespringsDataplane/e4k/{e4kName}/broker/{brokerName}/authorization": {
      "get": {
        "operationId": "BrokerAuthorization_ListByBrokerResource",
        "tags": [
          "BrokerAuthorization"
        ],
        "description": "List BrokerAuthorizationResource resources by BrokerResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "e4kName",
            "in": "path",
            "description": "Name of E4K resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "brokerName",
            "in": "path",
            "description": "Name of E4K broker resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/BrokerAuthorizationResourceListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "BrokerAuthorization_ListByBrokerResource": {
            "$ref": "./examples/E4k_Broker_Authorization_ListByResource.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AlicespringsDataplane/e4k/{e4kName}/broker/{brokerName}/authorization/{authorizationName}": {
      "get": {
        "operationId": "BrokerAuthorization_Get",
        "tags": [
          "BrokerAuthorization"
        ],
        "description": "Get a BrokerAuthorizationResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "e4kName",
            "in": "path",
            "description": "Name of E4K resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "brokerName",
            "in": "path",
            "description": "Name of E4K broker resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "authorizationName",
            "in": "path",
            "description": "Name of E4K broker/authorization resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/BrokerAuthorizationResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "BrokerAuthorization_Get": {
            "$ref": "./examples/E4k_Broker_Authorization_Get.json"
          }
        }
      },
      "put": {
        "operationId": "BrokerAuthorization_CreateOrUpdate",
        "tags": [
          "BrokerAuthorization"
        ],
        "description": "Create a BrokerAuthorizationResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "e4kName",
            "in": "path",
            "description": "Name of E4K resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "brokerName",
            "in": "path",
            "description": "Name of E4K broker resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "authorizationName",
            "in": "path",
            "description": "Name of E4K broker/authorization resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BrokerAuthorizationResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Arm resource update successful",
            "schema": {
              "$ref": "#/definitions/BrokerAuthorizationResource"
            }
          },
          "201": {
            "description": "Arm resource create successful",
            "schema": {
              "$ref": "#/definitions/BrokerAuthorizationResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "BrokerAuthorization_CreateOrUpdate": {
            "$ref": "./examples/E4k_Broker_Authorization_CreateOrUpdate.json"
          }
        }
      },
      "patch": {
        "operationId": "BrokerAuthorization_Update",
        "tags": [
          "BrokerAuthorization"
        ],
        "description": "Update a BrokerAuthorizationResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "e4kName",
            "in": "path",
            "description": "Name of E4K resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "brokerName",
            "in": "path",
            "description": "Name of E4K broker resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "authorizationName",
            "in": "path",
            "description": "Name of E4K broker/authorization resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BrokerAuthorizationResourceUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/BrokerAuthorizationResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "BrokerAuthorization_Update": {
            "$ref": "./examples/E4k_Broker_Authorization_Update.json"
          }
        }
      },
      "delete": {
        "operationId": "BrokerAuthorization_Delete",
        "tags": [
          "BrokerAuthorization"
        ],
        "description": "Delete a BrokerAuthorizationResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "e4kName",
            "in": "path",
            "description": "Name of E4K resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "brokerName",
            "in": "path",
            "description": "Name of E4K broker resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "authorizationName",
            "in": "path",
            "description": "Name of E4K broker/authorization resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "204": {
            "description": "Resource deleted successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "BrokerAuthorization_Delete": {
            "$ref": "./examples/E4k_Broker_Authorization_Delete.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AlicespringsDataplane/e4k/{e4kName}/broker/{brokerName}/listener": {
      "get": {
        "operationId": "BrokerListener_ListByBrokerResource",
        "tags": [
          "BrokerListener"
        ],
        "description": "List BrokerListenerResource resources by BrokerResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "e4kName",
            "in": "path",
            "description": "Name of E4K resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "brokerName",
            "in": "path",
            "description": "Name of E4K broker resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/BrokerListenerResourceListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "BrokerListener_ListByBrokerResource": {
            "$ref": "./examples/E4k_Broker_Listener_ListByResource.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AlicespringsDataplane/e4k/{e4kName}/broker/{brokerName}/listener/{listenerName}": {
      "get": {
        "operationId": "BrokerListener_Get",
        "tags": [
          "BrokerListener"
        ],
        "description": "Get a BrokerListenerResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "e4kName",
            "in": "path",
            "description": "Name of E4K resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "brokerName",
            "in": "path",
            "description": "Name of E4K broker resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "listenerName",
            "in": "path",
            "description": "Name of E4K broker/listener resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/BrokerListenerResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "BrokerListener_Get": {
            "$ref": "./examples/E4k_Broker_Listener_Get.json"
          }
        }
      },
      "put": {
        "operationId": "BrokerListener_CreateOrUpdate",
        "tags": [
          "BrokerListener"
        ],
        "description": "Create a BrokerListenerResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "e4kName",
            "in": "path",
            "description": "Name of E4K resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "brokerName",
            "in": "path",
            "description": "Name of E4K broker resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "listenerName",
            "in": "path",
            "description": "Name of E4K broker/listener resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BrokerListenerResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Arm resource update successful",
            "schema": {
              "$ref": "#/definitions/BrokerListenerResource"
            }
          },
          "201": {
            "description": "Arm resource create successful",
            "schema": {
              "$ref": "#/definitions/BrokerListenerResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "BrokerListener_CreateOrUpdate": {
            "$ref": "./examples/E4k_Broker_Listener_CreateOrUpdate.json"
          }
        }
      },
      "patch": {
        "operationId": "BrokerListener_Update",
        "tags": [
          "BrokerListener"
        ],
        "description": "Update a BrokerListenerResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "e4kName",
            "in": "path",
            "description": "Name of E4K resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "brokerName",
            "in": "path",
            "description": "Name of E4K broker resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "listenerName",
            "in": "path",
            "description": "Name of E4K broker/listener resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BrokerListenerResourceUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/BrokerListenerResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "BrokerListener_Update": {
            "$ref": "./examples/E4k_Broker_Listener_Update.json"
          }
        }
      },
      "delete": {
        "operationId": "BrokerListener_Delete",
        "tags": [
          "BrokerListener"
        ],
        "description": "Delete a BrokerListenerResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "e4kName",
            "in": "path",
            "description": "Name of E4K resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "brokerName",
            "in": "path",
            "description": "Name of E4K broker resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "listenerName",
            "in": "path",
            "description": "Name of E4K broker/listener resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "204": {
            "description": "Resource deleted successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "BrokerListener_Delete": {
            "$ref": "./examples/E4k_Broker_Listener_Delete.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AlicespringsDataplane/e4k/{e4kName}/dataLakeConnector": {
      "get": {
        "operationId": "DatalakeConnector_ListByE4kResource",
        "tags": [
          "DatalakeConnector"
        ],
        "description": "List DatalakeConnectorResource resources by E4kResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "e4kName",
            "in": "path",
            "description": "Name of E4K resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/DatalakeConnectorResourceListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "DatalakeConnector_ListByE4kResource": {
            "$ref": "./examples/E4k_DataLakeConnector_ListByResource.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AlicespringsDataplane/e4k/{e4kName}/dataLakeConnector/{dataLakeConnectorName}": {
      "get": {
        "operationId": "DatalakeConnector_Get",
        "tags": [
          "DatalakeConnector"
        ],
        "description": "Get a DatalakeConnectorResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "e4kName",
            "in": "path",
            "description": "Name of E4K resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "dataLakeConnectorName",
            "in": "path",
            "description": "Name of E4K dataLakeConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/DatalakeConnectorResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "DatalakeConnector_Get": {
            "$ref": "./examples/E4k_DataLakeConnector_Get.json"
          }
        }
      },
      "put": {
        "operationId": "DatalakeConnector_CreateOrUpdate",
        "tags": [
          "DatalakeConnector"
        ],
        "description": "Create a DatalakeConnectorResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "e4kName",
            "in": "path",
            "description": "Name of E4K resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "dataLakeConnectorName",
            "in": "path",
            "description": "Name of E4K dataLakeConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DatalakeConnectorResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Arm resource update successful",
            "schema": {
              "$ref": "#/definitions/DatalakeConnectorResource"
            }
          },
          "201": {
            "description": "Arm resource create successful",
            "schema": {
              "$ref": "#/definitions/DatalakeConnectorResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "DatalakeConnector_CreateOrUpdate": {
            "$ref": "./examples/E4k_DataLakeConnector_CreateOrUpdate.json"
          }
        }
      },
      "patch": {
        "operationId": "DatalakeConnector_Update",
        "tags": [
          "DatalakeConnector"
        ],
        "description": "Update a DatalakeConnectorResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "e4kName",
            "in": "path",
            "description": "Name of E4K resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "dataLakeConnectorName",
            "in": "path",
            "description": "Name of E4K dataLakeConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DatalakeConnectorResourceUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/DatalakeConnectorResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "DatalakeConnector_Update": {
            "$ref": "./examples/E4k_DataLakeConnector_Update.json"
          }
        }
      },
      "delete": {
        "operationId": "DatalakeConnector_Delete",
        "tags": [
          "DatalakeConnector"
        ],
        "description": "Delete a DatalakeConnectorResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "e4kName",
            "in": "path",
            "description": "Name of E4K resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "dataLakeConnectorName",
            "in": "path",
            "description": "Name of E4K dataLakeConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "204": {
            "description": "Resource deleted successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "DatalakeConnector_Delete": {
            "$ref": "./examples/E4k_DataLakeConnector_Delete.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AlicespringsDataplane/e4k/{e4kName}/dataLakeConnector/{dataLakeConnectorName}/topicMap": {
      "get": {
        "operationId": "DatalakeConnectorTopicMap_ListByDatalakeConnectorResource",
        "tags": [
          "DatalakeConnectorTopicMap"
        ],
        "description": "List DatalakeConnectorTopicMapResource resources by DatalakeConnectorResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "e4kName",
            "in": "path",
            "description": "Name of E4K resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "dataLakeConnectorName",
            "in": "path",
            "description": "Name of E4K dataLakeConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/DatalakeConnectorTopicMapResourceListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "DatalakeConnectorTopicMap_ListByDatalakeConnectorResource": {
            "$ref": "./examples/E4k_DataLakeConnector_TopicMap_ListByResource.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AlicespringsDataplane/e4k/{e4kName}/dataLakeConnector/{dataLakeConnectorName}/topicMap/{topicMapName}": {
      "get": {
        "operationId": "DatalakeConnectorTopicMap_Get",
        "tags": [
          "DatalakeConnectorTopicMap"
        ],
        "description": "Get a DatalakeConnectorTopicMapResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "e4kName",
            "in": "path",
            "description": "Name of E4K resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "dataLakeConnectorName",
            "in": "path",
            "description": "Name of E4K dataLakeConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "topicMapName",
            "in": "path",
            "description": "Name of E4K dataLakeConnector/topicMap resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/DatalakeConnectorTopicMapResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "DatalakeConnectorTopicMap_Get": {
            "$ref": "./examples/E4k_DataLakeConnector_TopicMap_Get.json"
          }
        }
      },
      "put": {
        "operationId": "DatalakeConnectorTopicMap_CreateOrUpdate",
        "tags": [
          "DatalakeConnectorTopicMap"
        ],
        "description": "Create a DatalakeConnectorTopicMapResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "e4kName",
            "in": "path",
            "description": "Name of E4K resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "dataLakeConnectorName",
            "in": "path",
            "description": "Name of E4K dataLakeConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "topicMapName",
            "in": "path",
            "description": "Name of E4K dataLakeConnector/topicMap resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DatalakeConnectorTopicMapResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Arm resource update successful",
            "schema": {
              "$ref": "#/definitions/DatalakeConnectorTopicMapResource"
            }
          },
          "201": {
            "description": "Arm resource create successful",
            "schema": {
              "$ref": "#/definitions/DatalakeConnectorTopicMapResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "DatalakeConnectorTopicMap_CreateOrUpdate": {
            "$ref": "./examples/E4k_DataLakeConnector_TopicMap_CreateOrUpdate.json"
          }
        }
      },
      "patch": {
        "operationId": "DatalakeConnectorTopicMap_Update",
        "tags": [
          "DatalakeConnectorTopicMap"
        ],
        "description": "Update a DatalakeConnectorTopicMapResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "e4kName",
            "in": "path",
            "description": "Name of E4K resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "dataLakeConnectorName",
            "in": "path",
            "description": "Name of E4K dataLakeConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "topicMapName",
            "in": "path",
            "description": "Name of E4K dataLakeConnector/topicMap resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DatalakeConnectorTopicMapResourceUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/DatalakeConnectorTopicMapResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "DatalakeConnectorTopicMap_Update": {
            "$ref": "./examples/E4k_DataLakeConnector_TopicMap_Update.json"
          }
        }
      },
      "delete": {
        "operationId": "DatalakeConnectorTopicMap_Delete",
        "tags": [
          "DatalakeConnectorTopicMap"
        ],
        "description": "Delete a DatalakeConnectorTopicMapResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "e4kName",
            "in": "path",
            "description": "Name of E4K resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "dataLakeConnectorName",
            "in": "path",
            "description": "Name of E4K dataLakeConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "topicMapName",
            "in": "path",
            "description": "Name of E4K dataLakeConnector/topicMap resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "204": {
            "description": "Resource deleted successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "DatalakeConnectorTopicMap_Delete": {
            "$ref": "./examples/E4k_DataLakeConnector_TopicMap_Delete.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AlicespringsDataplane/e4k/{e4kName}/diagnosticService": {
      "get": {
        "operationId": "DiagnosticService_ListByE4kResource",
        "tags": [
          "DiagnosticService"
        ],
        "description": "List DiagnosticServiceResource resources by E4kResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "e4kName",
            "in": "path",
            "description": "Name of E4K resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/DiagnosticServiceResourceListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "DiagnosticService_ListByE4kResource": {
            "$ref": "./examples/E4k_DiagnosticService_ListByResource.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AlicespringsDataplane/e4k/{e4kName}/diagnosticService/{diagnosticServiceName}": {
      "get": {
        "operationId": "DiagnosticService_Get",
        "tags": [
          "DiagnosticService"
        ],
        "description": "Get a DiagnosticServiceResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "e4kName",
            "in": "path",
            "description": "Name of E4K resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "diagnosticServiceName",
            "in": "path",
            "description": "Name of E4K diagnostic resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/DiagnosticServiceResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "DiagnosticService_Get": {
            "$ref": "./examples/E4k_DiagnosticService_Get.json"
          }
        }
      },
      "put": {
        "operationId": "DiagnosticService_CreateOrUpdate",
        "tags": [
          "DiagnosticService"
        ],
        "description": "Create a DiagnosticServiceResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "e4kName",
            "in": "path",
            "description": "Name of E4K resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "diagnosticServiceName",
            "in": "path",
            "description": "Name of E4K diagnostic resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DiagnosticServiceResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Arm resource update successful",
            "schema": {
              "$ref": "#/definitions/DiagnosticServiceResource"
            }
          },
          "201": {
            "description": "Arm resource create successful",
            "schema": {
              "$ref": "#/definitions/DiagnosticServiceResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "DiagnosticService_CreateOrUpdate": {
            "$ref": "./examples/E4k_DiagnosticService_CreateorUpdate.json"
          }
        }
      },
      "patch": {
        "operationId": "DiagnosticService_Update",
        "tags": [
          "DiagnosticService"
        ],
        "description": "Update a DiagnosticServiceResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "e4kName",
            "in": "path",
            "description": "Name of E4K resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "diagnosticServiceName",
            "in": "path",
            "description": "Name of E4K diagnostic resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DiagnosticServiceResourceUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/DiagnosticServiceResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "DiagnosticService_Update": {
            "$ref": "./examples/E4k_DiagnosticService_Update.json"
          }
        }
      },
      "delete": {
        "operationId": "DiagnosticService_Delete",
        "tags": [
          "DiagnosticService"
        ],
        "description": "Delete a DiagnosticServiceResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "e4kName",
            "in": "path",
            "description": "Name of E4K resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "diagnosticServiceName",
            "in": "path",
            "description": "Name of E4K diagnostic resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "204": {
            "description": "Resource deleted successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "DiagnosticService_Delete": {
            "$ref": "./examples/E4K_DiagnosticService_Delete.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AlicespringsDataplane/e4k/{e4kName}/mqttBridgeConnector": {
      "get": {
        "operationId": "MqttBridgeConnector_ListByE4kResource",
        "tags": [
          "MqttBridgeConnector"
        ],
        "description": "List MqttBridgeConnectorResource resources by E4kResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "e4kName",
            "in": "path",
            "description": "Name of E4K resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/MqttBridgeConnectorResourceListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "MqttBridgeConnector_ListByE4kResource": {
            "$ref": "./examples/E4k_MqttBridgeConnector_ListByResource.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AlicespringsDataplane/e4k/{e4kName}/mqttBridgeConnector/{mqttBridgeConnectorName}": {
      "get": {
        "operationId": "MqttBridgeConnector_Get",
        "tags": [
          "MqttBridgeConnector"
        ],
        "description": "Get a MqttBridgeConnectorResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "e4kName",
            "in": "path",
            "description": "Name of E4K resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "mqttBridgeConnectorName",
            "in": "path",
            "description": "Name of E4K mqttBridgeConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/MqttBridgeConnectorResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "MqttBridgeConnector_Get": {
            "$ref": "./examples/E4k_MqttBridgeConnector_Get.json"
          }
        }
      },
      "put": {
        "operationId": "MqttBridgeConnector_CreateOrUpdate",
        "tags": [
          "MqttBridgeConnector"
        ],
        "description": "Create a MqttBridgeConnectorResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "e4kName",
            "in": "path",
            "description": "Name of E4K resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "mqttBridgeConnectorName",
            "in": "path",
            "description": "Name of E4K mqttBridgeConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MqttBridgeConnectorResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Arm resource update successful",
            "schema": {
              "$ref": "#/definitions/MqttBridgeConnectorResource"
            }
          },
          "201": {
            "description": "Arm resource create successful",
            "schema": {
              "$ref": "#/definitions/MqttBridgeConnectorResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "MqttBridgeConnector_CreateOrUpdate": {
            "$ref": "./examples/E4k_MqttBridgeConnector_CreateOrUpdate.json"
          }
        }
      },
      "patch": {
        "operationId": "MqttBridgeConnector_Update",
        "tags": [
          "MqttBridgeConnector"
        ],
        "description": "Update a MqttBridgeConnectorResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "e4kName",
            "in": "path",
            "description": "Name of E4K resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "mqttBridgeConnectorName",
            "in": "path",
            "description": "Name of E4K mqttBridgeConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MqttBridgeConnectorResourceUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/MqttBridgeConnectorResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "MqttBridgeConnector_Update": {
            "$ref": "./examples/E4k_MqttBridgeConnector_Update.json"
          }
        }
      },
      "delete": {
        "operationId": "MqttBridgeConnector_Delete",
        "tags": [
          "MqttBridgeConnector"
        ],
        "description": "Delete a MqttBridgeConnectorResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "e4kName",
            "in": "path",
            "description": "Name of E4K resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "mqttBridgeConnectorName",
            "in": "path",
            "description": "Name of E4K mqttBridgeConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "204": {
            "description": "Resource deleted successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "MqttBridgeConnector_Delete": {
            "$ref": "./examples/E4k_MqttBridgeConnector_Delete.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AlicespringsDataplane/e4k/{e4kName}/mqttBridgeConnector/{mqttBridgeConnectorName}/topicMap": {
      "get": {
        "operationId": "MqttBridgeTopicMap_ListByMqttBridgeConnectorResource",
        "tags": [
          "MqttBridgeTopicMap"
        ],
        "description": "List MqttBridgeTopicMapResource resources by MqttBridgeConnectorResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "e4kName",
            "in": "path",
            "description": "Name of E4K resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "mqttBridgeConnectorName",
            "in": "path",
            "description": "Name of E4K mqttBridgeConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/MqttBridgeTopicMapResourceListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "MqttBridgeTopicMap_ListByMqttBridgeConnectorResource": {
            "$ref": "./examples/E4k_MqttBridgeConnector_TopicMap_ListByResource.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AlicespringsDataplane/e4k/{e4kName}/mqttBridgeConnector/{mqttBridgeConnectorName}/topicMap/{topicMapName}": {
      "get": {
        "operationId": "MqttBridgeTopicMap_Get",
        "tags": [
          "MqttBridgeTopicMap"
        ],
        "description": "Get a MqttBridgeTopicMapResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "e4kName",
            "in": "path",
            "description": "Name of E4K resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "mqttBridgeConnectorName",
            "in": "path",
            "description": "Name of E4K mqttBridgeConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "topicMapName",
            "in": "path",
            "description": "Name of E4K mqttBridgeTopicMap resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/MqttBridgeTopicMapResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "MqttBridgeTopicMap_Get": {
            "$ref": "./examples/E4k_MqttBridgeConnector_TopicMap_Get.json"
          }
        }
      },
      "put": {
        "operationId": "MqttBridgeTopicMap_CreateOrUpdate",
        "tags": [
          "MqttBridgeTopicMap"
        ],
        "description": "Create a MqttBridgeTopicMapResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "e4kName",
            "in": "path",
            "description": "Name of E4K resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "mqttBridgeConnectorName",
            "in": "path",
            "description": "Name of E4K mqttBridgeConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "topicMapName",
            "in": "path",
            "description": "Name of E4K mqttBridgeTopicMap resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MqttBridgeTopicMapResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Arm resource update successful",
            "schema": {
              "$ref": "#/definitions/MqttBridgeTopicMapResource"
            }
          },
          "201": {
            "description": "Arm resource create successful",
            "schema": {
              "$ref": "#/definitions/MqttBridgeTopicMapResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "MqttBridgeTopicMap_CreateOrUpdate": {
            "$ref": "./examples/E4k_MqttBridgeConnector_TopicMap_CreateOrUpdate.json"
          }
        }
      },
      "patch": {
        "operationId": "MqttBridgeTopicMap_Update",
        "tags": [
          "MqttBridgeTopicMap"
        ],
        "description": "Update a MqttBridgeTopicMapResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "e4kName",
            "in": "path",
            "description": "Name of E4K resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "mqttBridgeConnectorName",
            "in": "path",
            "description": "Name of E4K mqttBridgeConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "topicMapName",
            "in": "path",
            "description": "Name of E4K mqttBridgeTopicMap resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MqttBridgeTopicMapResourceUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/MqttBridgeTopicMapResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "MqttBridgeTopicMap_Update": {
            "$ref": "./examples/E4k_MqttBridgeConnector_TopicMap_Update.json"
          }
        }
      },
      "delete": {
        "operationId": "MqttBridgeTopicMap_Delete",
        "tags": [
          "MqttBridgeTopicMap"
        ],
        "description": "Delete a MqttBridgeTopicMapResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "e4kName",
            "in": "path",
            "description": "Name of E4K resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "mqttBridgeConnectorName",
            "in": "path",
            "description": "Name of E4K mqttBridgeConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "topicMapName",
            "in": "path",
            "description": "Name of E4K mqttBridgeTopicMap resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "204": {
            "description": "Resource deleted successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "MqttBridgeTopicMap_Delete": {
            "$ref": "./examples/E4k_MqttBridgeConnector_TopicMap_Delete.json"
          }
        }
      }
    }
  },
  "definitions": {
    "AuthorizationBasicRule": {
      "type": "object",
      "description": "BasicRules of AuthorizationConfig Polar rules are not supported",
      "properties": {
        "principals": {
          "$ref": "#/definitions/PrincipalDefinition",
          "description": "This subfield defines the identities that represent the clients."
        },
        "resources": {
          "type": "array",
          "description": "This subfield defines the objects that represent the actions or topics. Such as - method.Connect, method.Publish etc.",
          "items": {
            "$ref": "#/definitions/ResourceInfoDefinition"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "principals",
        "resources"
      ]
    },
    "AuthorizationConfig": {
      "type": "object",
      "description": "Broker AuthorizationConfig properties",
      "properties": {
        "enableCache": {
          "type": "boolean",
          "description": "Enable caching of the authorization rules.",
          "default": true
        },
        "rules": {
          "type": "array",
          "description": "Authorization Rules to be used. If no rule is set, but Authorization Resource is used that would mean DenyAll.",
          "items": {
            "$ref": "#/definitions/AuthorizationBasicRule"
          },
          "x-ms-identifiers": []
        }
      }
    },
    "AutomaticCertMethod": {
      "type": "object",
      "description": "Automatic TLS server certificate management with cert-manager",
      "properties": {
        "duration": {
          "type": "string",
          "description": "Lifetime of automatically-managed certificate.",
          "default": "720h"
        },
        "issuerRef": {
          "$ref": "#/definitions/CertManagerIssuerRef",
          "description": "cert-manager issuerRef."
        },
        "privateKey": {
          "$ref": "#/definitions/CertManagerPrivateKey",
          "description": "Cert Manager private key."
        },
        "renewBefore": {
          "type": "string",
          "description": "When to begin renewing automatically-managed certificate.",
          "default": "240h"
        },
        "san": {
          "$ref": "#/definitions/SanForCert",
          "description": "Additional SANs to include in the certificate."
        },
        "secretName": {
          "type": "string",
          "description": "Secret for storing server certificate. Any existing data will be overwritten."
        },
        "secretNamespace": {
          "type": "string",
          "description": "Certificate K8S namespace. Omit to use default namespace."
        }
      },
      "required": [
        "issuerRef"
      ]
    },
    "AutomaticCertMethodUpdate": {
      "type": "object",
      "description": "Automatic TLS server certificate management with cert-manager",
      "properties": {
        "duration": {
          "type": "string",
          "description": "Lifetime of automatically-managed certificate.",
          "default": "720h"
        },
        "issuerRef": {
          "$ref": "#/definitions/CertManagerIssuerRefUpdate",
          "description": "cert-manager issuerRef."
        },
        "privateKey": {
          "$ref": "#/definitions/CertManagerPrivateKeyUpdate",
          "description": "Cert Manager private key."
        },
        "renewBefore": {
          "type": "string",
          "description": "When to begin renewing automatically-managed certificate.",
          "default": "240h"
        },
        "san": {
          "$ref": "#/definitions/SanForCertUpdate",
          "description": "Additional SANs to include in the certificate."
        },
        "secretName": {
          "type": "string",
          "description": "Secret for storing server certificate. Any existing data will be overwritten."
        },
        "secretNamespace": {
          "type": "string",
          "description": "Certificate K8S namespace. Omit to use default namespace."
        }
      }
    },
    "BackendChain": {
      "type": "object",
      "description": "Desired properties of the Frontend Instances of the DMQTT Broker",
      "properties": {
        "partitions": {
          "type": "integer",
          "format": "int32",
          "description": "Partitions is desired number of physical backend chains of the given distributed MQTT broker.",
          "minimum": 0,
          "maximum": 65535
        },
        "replicas": {
          "type": "integer",
          "format": "int32",
          "description": "Replicas is desired numbers of broker instances in one chain.",
          "minimum": 0,
          "maximum": 65535
        },
        "temporaryMaxBackendMemUsagePercent": {
          "type": "integer",
          "format": "int32",
          "description": "Defines the limits for memory usage percent of the backend instances of the MQTT broker.",
          "minimum": 0,
          "maximum": 100
        },
        "temporaryResourceLimits": {
          "$ref": "#/definitions/TemporaryResourceLimitsConfig",
          "description": "Defines the limits for resources of the backend instances of the MQTT broker."
        },
        "workers": {
          "type": "integer",
          "format": "int32",
          "description": "Number of logical backend workers per pod.",
          "minimum": 0,
          "maximum": 65535
        }
      },
      "required": [
        "partitions",
        "replicas",
        "workers"
      ]
    },
    "BackendChainUpdate": {
      "type": "object",
      "description": "Desired properties of the Frontend Instances of the DMQTT Broker",
      "properties": {
        "partitions": {
          "type": "integer",
          "format": "int32",
          "description": "Partitions is desired number of physical backend chains of the given distributed MQTT broker.",
          "minimum": 0,
          "maximum": 65535
        },
        "replicas": {
          "type": "integer",
          "format": "int32",
          "description": "Replicas is desired numbers of broker instances in one chain.",
          "minimum": 0,
          "maximum": 65535
        },
        "temporaryMaxBackendMemUsagePercent": {
          "type": "integer",
          "format": "int32",
          "description": "Defines the limits for memory usage percent of the backend instances of the MQTT broker.",
          "minimum": 0,
          "maximum": 100
        },
        "temporaryResourceLimits": {
          "$ref": "#/definitions/TemporaryResourceLimitsConfigUpdate",
          "description": "Defines the limits for resources of the backend instances of the MQTT broker."
        },
        "workers": {
          "type": "integer",
          "format": "int32",
          "description": "Number of logical backend workers per pod.",
          "minimum": 0,
          "maximum": 65535
        }
      }
    },
    "BrokerAuthenticationProperties": {
      "type": "object",
      "description": "Broker Resource properties",
      "properties": {
        "authenticationMethods": {
          "type": "array",
          "description": "The list of authentication methods supported by the Authentication Resource. For each array element, NOTE - Enum only authenticator type supported.",
          "items": {
            "$ref": "#/definitions/BrokerAuthenticatorMethods"
          },
          "x-ms-identifiers": []
        },
        "listenerRef": {
          "type": "array",
          "description": "The array of listener Resources it supports.",
          "items": {
            "type": "string"
          }
        },
        "provisioningState": {
          "$ref": "#/definitions/ProvisioningState",
          "description": "The status of the last operation.",
          "readOnly": true
        }
      },
      "required": [
        "authenticationMethods",
        "listenerRef"
      ]
    },
    "BrokerAuthenticationResource": {
      "type": "object",
      "description": "E4K broker/authentication resource",
      "properties": {
        "properties": {
          "$ref": "#/definitions/BrokerAuthenticationProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "extendedLocation": {
          "$ref": "#/definitions/ExtendedLocationProperty",
          "description": "Extended Location",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "required": [
        "extendedLocation"
      ],
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "BrokerAuthenticationResourceListResult": {
      "type": "object",
      "description": "The response of a BrokerAuthenticationResource list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The BrokerAuthenticationResource items on this page",
          "items": {
            "$ref": "#/definitions/BrokerAuthenticationResource"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "BrokerAuthenticationResourceUpdate": {
      "type": "object",
      "description": "The type used for update operations of the BrokerAuthenticationResource.",
      "properties": {
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "$ref": "#/definitions/BrokerAuthenticationResourceUpdateProperties",
          "x-ms-client-flatten": true
        }
      }
    },
    "BrokerAuthenticationResourceUpdateProperties": {
      "type": "object",
      "description": "The updatable properties of the BrokerAuthenticationResource.",
      "properties": {
        "authenticationMethods": {
          "type": "array",
          "description": "The list of authentication methods supported by the Authentication Resource. For each array element, NOTE - Enum only authenticator type supported.",
          "items": {
            "$ref": "#/definitions/BrokerAuthenticatorMethods"
          },
          "x-ms-identifiers": []
        },
        "listenerRef": {
          "type": "array",
          "description": "The array of listener Resources it supports.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "BrokerAuthenticatorCustomAuth": {
      "type": "object",
      "description": "Custom Authentication properties",
      "properties": {
        "x509": {
          "$ref": "#/definitions/BrokerAuthenticatorCustomAuthX509",
          "description": "X509 Custom Auth type details."
        }
      },
      "required": [
        "x509"
      ]
    },
    "BrokerAuthenticatorCustomAuthX509": {
      "type": "object",
      "description": "X509 Custom Authentication properties",
      "properties": {
        "secretName": {
          "type": "string",
          "description": "Secret where cert details are stored."
        },
        "secretNamespace": {
          "type": "string",
          "description": "K8S Secret namespace. Omit to use default namespace."
        }
      },
      "required": [
        "secretName"
      ]
    },
    "BrokerAuthenticatorMethodCustom": {
      "type": "object",
      "description": "Custom method for BrokerAuthentication",
      "properties": {
        "auth": {
          "$ref": "#/definitions/BrokerAuthenticatorCustomAuth",
          "description": "Custom Broker Authentication Method."
        },
        "caCert": {
          "type": "string",
          "description": "CA cert to use."
        },
        "endpoint": {
          "type": "string",
          "description": "Endpoint to connect to."
        },
        "headers": {
          "type": "object",
          "description": "Configuration Headers to use.",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "endpoint"
      ]
    },
    "BrokerAuthenticatorMethodSat": {
      "type": "object",
      "description": "Service Account Token for BrokerAuthentication",
      "properties": {
        "audiences": {
          "type": "array",
          "description": "List of allowed audience.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "audiences"
      ]
    },
    "BrokerAuthenticatorMethodSvid": {
      "type": "object",
      "description": "SVID for BrokerAuthentication",
      "properties": {
        "agentSocketPath": {
          "type": "string",
          "description": "Mounted socket path for spiffe agent."
        },
        "identityMaxRetry": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum number of re-tries to fetch identity.",
          "default": 3,
          "minimum": 0,
          "maximum": 4294967295
        },
        "identityWaitRetryMs": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum time to wait before fetching identity again.",
          "default": 5000,
          "minimum": 0,
          "maximum": 9223372036854000000
        }
      },
      "required": [
        "agentSocketPath"
      ]
    },
    "BrokerAuthenticatorMethodUsernamePassword": {
      "type": "object",
      "description": "UsernamePassword for BrokerAuthentication",
      "properties": {
        "passwordDatabase": {
          "type": "string",
          "description": "K8S Secret name to mount for username and password.",
          "default": "credentials"
        }
      }
    },
    "BrokerAuthenticatorMethodX509": {
      "type": "object",
      "description": "X509 for BrokerAuthentication",
      "properties": {
        "attributes": {
          "type": "string",
          "description": "K8S Secret name to mount for username and password."
        },
        "trustedClientCaCert": {
          "type": "string",
          "description": "Trusted client ca cert.",
          "default": "client-ca"
        }
      }
    },
    "BrokerAuthenticatorMethods": {
      "type": "object",
      "description": "Collection of different CrdAuthenticator methods of Broker Resource. NOTE Enum - Only one method is supported for each entry.",
      "properties": {
        "custom": {
          "$ref": "#/definitions/BrokerAuthenticatorMethodCustom",
          "description": "Custom Authentication Method."
        },
        "sat": {
          "$ref": "#/definitions/BrokerAuthenticatorMethodSat",
          "description": "Service Account Token Method."
        },
        "svid": {
          "$ref": "#/definitions/BrokerAuthenticatorMethodSvid",
          "description": "Service Account Token Method."
        },
        "usernamePassword": {
          "$ref": "#/definitions/BrokerAuthenticatorMethodUsernamePassword",
          "description": "UsernamePassword Method."
        },
        "x509": {
          "$ref": "#/definitions/BrokerAuthenticatorMethodX509",
          "description": "X509 Method."
        }
      }
    },
    "BrokerAuthorizationProperties": {
      "type": "object",
      "description": "Broker Resource properties",
      "properties": {
        "authorizationPolicies": {
          "$ref": "#/definitions/AuthorizationConfig",
          "description": "The list of authorization policies supported by the Authorization Resource."
        },
        "listenerRef": {
          "type": "array",
          "description": "The array of listener Resources it supports.",
          "items": {
            "type": "string"
          }
        },
        "provisioningState": {
          "$ref": "#/definitions/ProvisioningState",
          "description": "The status of the last operation.",
          "readOnly": true
        }
      },
      "required": [
        "authorizationPolicies",
        "listenerRef"
      ]
    },
    "BrokerAuthorizationResource": {
      "type": "object",
      "description": "E4K broker/authorization resource",
      "properties": {
        "properties": {
          "$ref": "#/definitions/BrokerAuthorizationProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "extendedLocation": {
          "$ref": "#/definitions/ExtendedLocationProperty",
          "description": "Extended Location",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "required": [
        "extendedLocation"
      ],
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "BrokerAuthorizationResourceListResult": {
      "type": "object",
      "description": "The response of a BrokerAuthorizationResource list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The BrokerAuthorizationResource items on this page",
          "items": {
            "$ref": "#/definitions/BrokerAuthorizationResource"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "BrokerAuthorizationResourceUpdate": {
      "type": "object",
      "description": "The type used for update operations of the BrokerAuthorizationResource.",
      "properties": {
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "$ref": "#/definitions/BrokerAuthorizationResourceUpdateProperties",
          "x-ms-client-flatten": true
        }
      }
    },
    "BrokerAuthorizationResourceUpdateProperties": {
      "type": "object",
      "description": "The updatable properties of the BrokerAuthorizationResource.",
      "properties": {
        "authorizationPolicies": {
          "$ref": "#/definitions/AuthorizationConfig",
          "description": "The list of authorization policies supported by the Authorization Resource."
        },
        "listenerRef": {
          "type": "array",
          "description": "The array of listener Resources it supports.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "BrokerDiagnostics": {
      "type": "object",
      "description": "Diagnostics setting specific to Broker",
      "properties": {
        "diagnosticServiceEndpoint": {
          "type": "string",
          "description": "Diagnostic Service endpoint"
        },
        "enableMetrics": {
          "type": "boolean",
          "description": "Knob to enable/disable metrics. Default = true",
          "default": true
        },
        "enableSelfCheck": {
          "type": "boolean",
          "description": "Enable self check on Broker via Probe.",
          "default": true
        },
        "enableSelfTracing": {
          "type": "boolean",
          "description": "Enable self tracing on the Broker so that every selfCheckFrequencySeconds a random message is traced even if it didn't have trace context.",
          "default": true
        },
        "enableTracing": {
          "type": "boolean",
          "description": "Knob to enable/disable entire tracing infrastructure.",
          "default": true
        },
        "logFormat": {
          "type": "string",
          "description": "Format for the logs generated.",
          "default": "text"
        },
        "logLevel": {
          "type": "string",
          "description": "Log level for the Broker.",
          "default": "info,hyper=off,kube_client=off,tower=off,conhash=off,h2=off"
        },
        "maxCellMapLifetime": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum time for the CellMap to live.",
          "default": 60,
          "minimum": 0,
          "maximum": 9223372036854000000
        },
        "metricUpdateFrequencySeconds": {
          "type": "integer",
          "format": "int64",
          "description": "Metric update frequency in seconds.",
          "default": 30,
          "minimum": 0,
          "maximum": 9223372036854000000
        },
        "probeImage": {
          "type": "string",
          "description": "Probe Image to run.",
          "default": "sample.azurecr.io/diagnostics-probe:0.5.0"
        },
        "selfCheckFrequencySeconds": {
          "type": "integer",
          "format": "int64",
          "description": "Frequency for the self check to run.",
          "default": 30,
          "minimum": 0,
          "maximum": 9223372036854000000
        },
        "selfCheckTimeoutSeconds": {
          "type": "integer",
          "format": "int64",
          "description": "Time out period of the self check.",
          "default": 15,
          "minimum": 0,
          "maximum": 9223372036854000000
        },
        "selfTraceFrequencySeconds": {
          "type": "integer",
          "format": "int64",
          "description": "The frequency at which selfTrace should run.",
          "default": 30,
          "minimum": 0,
          "maximum": 9223372036854000000
        },
        "spanChannelCapacity": {
          "type": "integer",
          "format": "int64",
          "description": "The number of the spans generated by the Tracing.",
          "default": 1000,
          "minimum": 0,
          "maximum": 9223372036854000000
        }
      }
    },
    "BrokerListenerProperties": {
      "type": "object",
      "description": "Broker Listener Resource properties",
      "properties": {
        "authenticationEnabled": {
          "type": "boolean",
          "description": "The flag for enabling Authentication rules on Listener Port.",
          "default": false
        },
        "authorizationEnabled": {
          "type": "boolean",
          "description": "The flag for enabling Authorization policies on Listener Port. false - AllowAll, true - Use Authorization resource rules if present.",
          "default": false
        },
        "brokerRef": {
          "type": "string",
          "description": "The k8s cr/resource reference of e4k/broker."
        },
        "nodePort": {
          "type": "integer",
          "format": "int32",
          "description": "The node port to use on the Host node.",
          "minimum": 0,
          "maximum": 65535
        },
        "port": {
          "type": "integer",
          "format": "int32",
          "description": "The port to start Listening for connections on.",
          "minimum": 0,
          "maximum": 65535
        },
        "serviceName": {
          "type": "string",
          "description": "The service name to expose Listener port on.",
          "default": "azedge-dmqtt-frontend"
        },
        "serviceType": {
          "$ref": "#/definitions/ServiceType",
          "description": "The Kubernetes Service type to deploy for Listener.",
          "default": "loadBalancer"
        },
        "tls": {
          "$ref": "#/definitions/TlsCertMethod",
          "description": "Defines configuration of a TLS server certificate. NOTE Enum - Only one TLS Cert method is supported"
        },
        "provisioningState": {
          "$ref": "#/definitions/ProvisioningState",
          "description": "The status of the last operation.",
          "readOnly": true
        }
      },
      "required": [
        "brokerRef",
        "port"
      ]
    },
    "BrokerListenerResource": {
      "type": "object",
      "description": "E4K broker/listener resource",
      "properties": {
        "properties": {
          "$ref": "#/definitions/BrokerListenerProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "extendedLocation": {
          "$ref": "#/definitions/ExtendedLocationProperty",
          "description": "Extended Location",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "required": [
        "extendedLocation"
      ],
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "BrokerListenerResourceListResult": {
      "type": "object",
      "description": "The response of a BrokerListenerResource list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The BrokerListenerResource items on this page",
          "items": {
            "$ref": "#/definitions/BrokerListenerResource"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "BrokerListenerResourceUpdate": {
      "type": "object",
      "description": "The type used for update operations of the BrokerListenerResource.",
      "properties": {
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "$ref": "#/definitions/BrokerListenerResourceUpdateProperties",
          "x-ms-client-flatten": true
        }
      }
    },
    "BrokerListenerResourceUpdateProperties": {
      "type": "object",
      "description": "The updatable properties of the BrokerListenerResource.",
      "properties": {
        "authenticationEnabled": {
          "type": "boolean",
          "description": "The flag for enabling Authentication rules on Listener Port.",
          "default": false
        },
        "authorizationEnabled": {
          "type": "boolean",
          "description": "The flag for enabling Authorization policies on Listener Port. false - AllowAll, true - Use Authorization resource rules if present.",
          "default": false
        },
        "brokerRef": {
          "type": "string",
          "description": "The k8s cr/resource reference of e4k/broker."
        },
        "nodePort": {
          "type": "integer",
          "format": "int32",
          "description": "The node port to use on the Host node.",
          "minimum": 0,
          "maximum": 65535
        },
        "port": {
          "type": "integer",
          "format": "int32",
          "description": "The port to start Listening for connections on.",
          "minimum": 0,
          "maximum": 65535
        },
        "serviceName": {
          "type": "string",
          "description": "The service name to expose Listener port on.",
          "default": "azedge-dmqtt-frontend"
        },
        "serviceType": {
          "$ref": "#/definitions/ServiceType",
          "description": "The Kubernetes Service type to deploy for Listener.",
          "default": "loadBalancer"
        },
        "tls": {
          "$ref": "#/definitions/TlsCertMethodUpdate",
          "description": "Defines configuration of a TLS server certificate. NOTE Enum - Only one TLS Cert method is supported"
        }
      }
    },
    "BrokerProperties": {
      "type": "object",
      "description": "Broker Resource properties",
      "properties": {
        "authImage": {
          "$ref": "#/definitions/ContainerImage",
          "description": "The details of Authentication Docker Image."
        },
        "brokerImage": {
          "$ref": "#/definitions/ContainerImage",
          "description": "The details of Broker Docker Image."
        },
        "brokerNodeTolerations": {
          "$ref": "#/definitions/NodeTolerations",
          "description": "The details of Node Tolerations for Broker Pods."
        },
        "cardinality": {
          "$ref": "#/definitions/Cardinality",
          "description": "The cardinality details of the broker."
        },
        "diagnostics": {
          "$ref": "#/definitions/BrokerDiagnostics",
          "description": "The diagnostic details of the broker deployment."
        },
        "healthManagerImage": {
          "$ref": "#/definitions/ContainerImage",
          "description": "The details of Health Manager Docker Image."
        },
        "healthManagerNodeTolerations": {
          "$ref": "#/definitions/NodeTolerations",
          "description": "The details of Node Tolerations for Health Manager Pods."
        },
        "internalCerts": {
          "$ref": "#/definitions/CertManagerCertOptions",
          "description": "Details of the internal CA cert that will be used to secure communication between pods."
        },
        "mode": {
          "$ref": "#/definitions/RunMode",
          "description": "The Running Mode of the Broker Deployment."
        },
        "provisioningState": {
          "$ref": "#/definitions/ProvisioningState",
          "description": "The status of the last operation.",
          "readOnly": true
        }
      },
      "required": [
        "authImage",
        "brokerImage",
        "healthManagerImage",
        "mode"
      ]
    },
    "BrokerResource": {
      "type": "object",
      "description": "E4K broker resource",
      "properties": {
        "properties": {
          "$ref": "#/definitions/BrokerProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "extendedLocation": {
          "$ref": "#/definitions/ExtendedLocationProperty",
          "description": "Extended Location",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "required": [
        "extendedLocation"
      ],
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "BrokerResourceListResult": {
      "type": "object",
      "description": "The response of a BrokerResource list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The BrokerResource items on this page",
          "items": {
            "$ref": "#/definitions/BrokerResource"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "BrokerResourceUpdate": {
      "type": "object",
      "description": "The type used for update operations of the BrokerResource.",
      "properties": {
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "$ref": "#/definitions/BrokerResourceUpdateProperties",
          "x-ms-client-flatten": true
        }
      }
    },
    "BrokerResourceUpdateProperties": {
      "type": "object",
      "description": "The updatable properties of the BrokerResource.",
      "properties": {
        "authImage": {
          "$ref": "#/definitions/ContainerImageUpdate",
          "description": "The details of Authentication Docker Image."
        },
        "brokerImage": {
          "$ref": "#/definitions/ContainerImageUpdate",
          "description": "The details of Broker Docker Image."
        },
        "brokerNodeTolerations": {
          "$ref": "#/definitions/NodeTolerationsUpdate",
          "description": "The details of Node Tolerations for Broker Pods."
        },
        "cardinality": {
          "$ref": "#/definitions/CardinalityUpdate",
          "description": "The cardinality details of the broker."
        },
        "diagnostics": {
          "$ref": "#/definitions/BrokerDiagnostics",
          "description": "The diagnostic details of the broker deployment."
        },
        "healthManagerImage": {
          "$ref": "#/definitions/ContainerImageUpdate",
          "description": "The details of Health Manager Docker Image."
        },
        "healthManagerNodeTolerations": {
          "$ref": "#/definitions/NodeTolerationsUpdate",
          "description": "The details of Node Tolerations for Health Manager Pods."
        },
        "internalCerts": {
          "$ref": "#/definitions/CertManagerCertOptionsUpdate",
          "description": "Details of the internal CA cert that will be used to secure communication between pods."
        },
        "mode": {
          "$ref": "#/definitions/RunMode",
          "description": "The Running Mode of the Broker Deployment."
        }
      }
    },
    "Cardinality": {
      "type": "object",
      "description": "Cardinality properties",
      "properties": {
        "backendChain": {
          "$ref": "#/definitions/BackendChain",
          "description": "The backend broker desired properties"
        },
        "frontend": {
          "$ref": "#/definitions/Frontend",
          "description": "The frontend broker desired properties"
        }
      },
      "required": [
        "backendChain",
        "frontend"
      ]
    },
    "CardinalityUpdate": {
      "type": "object",
      "description": "Cardinality properties",
      "properties": {
        "backendChain": {
          "$ref": "#/definitions/BackendChainUpdate",
          "description": "The backend broker desired properties"
        },
        "frontend": {
          "$ref": "#/definitions/FrontendUpdate",
          "description": "The frontend broker desired properties"
        }
      }
    },
    "CertManagerCertOptions": {
      "type": "object",
      "description": "Cert Manager CA Cert properties",
      "properties": {
        "duration": {
          "type": "string",
          "description": "Duration of CA cert.",
          "default": "720h"
        },
        "privateKey": {
          "$ref": "#/definitions/CertManagerPrivateKey",
          "description": "Cert Manager private key."
        },
        "renewBefore": {
          "type": "string",
          "description": "Renew before time of CA cert.",
          "default": "240h"
        }
      },
      "required": [
        "duration",
        "privateKey",
        "renewBefore"
      ]
    },
    "CertManagerCertOptionsUpdate": {
      "type": "object",
      "description": "Cert Manager CA Cert properties",
      "properties": {
        "duration": {
          "type": "string",
          "description": "Duration of CA cert.",
          "default": "720h"
        },
        "privateKey": {
          "$ref": "#/definitions/CertManagerPrivateKeyUpdate",
          "description": "Cert Manager private key."
        },
        "renewBefore": {
          "type": "string",
          "description": "Renew before time of CA cert.",
          "default": "240h"
        }
      }
    },
    "CertManagerIssuerRef": {
      "type": "object",
      "description": "Cert-Manager issuerRef properties",
      "properties": {
        "group": {
          "type": "string",
          "description": "group of issuer.",
          "default": "cert-manager.io"
        },
        "kind": {
          "type": "string",
          "description": "kind of issuer (Issuer or ClusterIssuer)."
        },
        "name": {
          "type": "string",
          "description": "name of issuer."
        }
      },
      "required": [
        "group",
        "kind",
        "name"
      ]
    },
    "CertManagerIssuerRefUpdate": {
      "type": "object",
      "description": "Cert-Manager issuerRef properties",
      "properties": {
        "group": {
          "type": "string",
          "description": "group of issuer.",
          "default": "cert-manager.io"
        },
        "kind": {
          "type": "string",
          "description": "kind of issuer (Issuer or ClusterIssuer)."
        },
        "name": {
          "type": "string",
          "description": "name of issuer."
        }
      }
    },
    "CertManagerPrivateKey": {
      "type": "object",
      "description": "Cert Manager private key properties",
      "properties": {
        "algorithm": {
          "type": "string",
          "description": "algorithm for private key.",
          "default": "ECDSA"
        },
        "rotationPolicy": {
          "type": "string",
          "description": "cert-manager rotationPolicy.",
          "default": "Always"
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "description": "size of private key.",
          "default": 256,
          "minimum": 0,
          "maximum": 65535
        }
      },
      "required": [
        "algorithm",
        "rotationPolicy",
        "size"
      ]
    },
    "CertManagerPrivateKeyUpdate": {
      "type": "object",
      "description": "Cert Manager private key properties",
      "properties": {
        "algorithm": {
          "type": "string",
          "description": "algorithm for private key.",
          "default": "ECDSA"
        },
        "rotationPolicy": {
          "type": "string",
          "description": "cert-manager rotationPolicy.",
          "default": "Always"
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "description": "size of private key.",
          "default": 256,
          "minimum": 0,
          "maximum": 65535
        }
      }
    },
    "ContainerImage": {
      "type": "object",
      "description": "Defines the Docker image details",
      "properties": {
        "pullPolicy": {
          "type": "string",
          "description": "Image pull policy."
        },
        "pullSecrets": {
          "type": "string",
          "description": "Image pull secrets."
        },
        "repository": {
          "type": "string",
          "description": "The Docker image name."
        },
        "tag": {
          "type": "string",
          "description": "The Docker  image tag."
        }
      },
      "required": [
        "repository",
        "tag"
      ]
    },
    "ContainerImageUpdate": {
      "type": "object",
      "description": "Defines the Docker image details",
      "properties": {
        "pullPolicy": {
          "type": "string",
          "description": "Image pull policy."
        },
        "pullSecrets": {
          "type": "string",
          "description": "Image pull secrets."
        },
        "repository": {
          "type": "string",
          "description": "The Docker image name."
        },
        "tag": {
          "type": "string",
          "description": "The Docker  image tag."
        }
      }
    },
    "DataLakeConnectorMap": {
      "type": "object",
      "description": "DataLake connector map route properties",
      "properties": {
        "allowedLatency": {
          "type": "integer",
          "format": "int32",
          "description": "Allowed latency for transferring data.",
          "minimum": 0,
          "maximum": 65535
        },
        "clientId": {
          "type": "string",
          "description": "Client Id to use."
        },
        "deltaTable": {
          "$ref": "#/definitions/DeltaTable",
          "description": "Delta table properties to use."
        },
        "maxMessagesPerBatch": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum messages to send per Batch.",
          "minimum": 0,
          "maximum": 4294967295
        },
        "messagePayloadType": {
          "type": "string",
          "description": "Message payload type."
        },
        "mqttSourceTopic": {
          "type": "string",
          "description": "Mqtt source topic."
        },
        "qos": {
          "type": "integer",
          "format": "int32",
          "description": "Quality of Service.",
          "default": 1,
          "minimum": 0,
          "maximum": 2
        }
      },
      "required": [
        "allowedLatency",
        "clientId",
        "deltaTable",
        "maxMessagesPerBatch",
        "messagePayloadType",
        "mqttSourceTopic"
      ]
    },
    "DataLakeConnectorMapUpdate": {
      "type": "object",
      "description": "DataLake connector map route properties",
      "properties": {
        "allowedLatency": {
          "type": "integer",
          "format": "int32",
          "description": "Allowed latency for transferring data.",
          "minimum": 0,
          "maximum": 65535
        },
        "clientId": {
          "type": "string",
          "description": "Client Id to use."
        },
        "deltaTable": {
          "$ref": "#/definitions/DeltaTableUpdate",
          "description": "Delta table properties to use."
        },
        "maxMessagesPerBatch": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum messages to send per Batch.",
          "minimum": 0,
          "maximum": 4294967295
        },
        "messagePayloadType": {
          "type": "string",
          "description": "Message payload type."
        },
        "mqttSourceTopic": {
          "type": "string",
          "description": "Mqtt source topic."
        },
        "qos": {
          "type": "integer",
          "format": "int32",
          "description": "Quality of Service.",
          "default": 1,
          "minimum": 0,
          "maximum": 2
        }
      }
    },
    "DataLakeLocalStorage": {
      "type": "object",
      "description": "DataLake Local Storage details.",
      "properties": {
        "volumeName": {
          "type": "string",
          "description": "Volume name to write to."
        }
      },
      "required": [
        "volumeName"
      ]
    },
    "DataLakeLocalStorageUpdate": {
      "type": "object",
      "description": "DataLake Local Storage details.",
      "properties": {
        "volumeName": {
          "type": "string",
          "description": "Volume name to write to."
        }
      }
    },
    "DataLakeServiceStorage": {
      "type": "object",
      "description": "DataLake Service Storage details.",
      "properties": {
        "endpoint": {
          "type": "string",
          "description": "Datalake service storage endpoint to use."
        },
        "authentication": {
          "$ref": "#/definitions/DataLakeServiceStorageAuthentication",
          "description": "Datalake service storage authentication details. NOTE - Enum only one method is supported."
        }
      },
      "required": [
        "endpoint",
        "authentication"
      ]
    },
    "DataLakeServiceStorageAuthentication": {
      "type": "object",
      "description": "DataLake Service Storage authentication details. NOTE - Enum only one method is supported.",
      "properties": {
        "accessTokenSecretName": {
          "type": "string",
          "description": "Access token secret name."
        },
        "managedIdentity": {
          "type": "boolean",
          "description": "MSI to connect to service."
        }
      }
    },
    "DataLakeServiceStorageUpdate": {
      "type": "object",
      "description": "DataLake Service Storage details.",
      "properties": {
        "endpoint": {
          "type": "string",
          "description": "Datalake service storage endpoint to use."
        },
        "authentication": {
          "$ref": "#/definitions/DataLakeServiceStorageAuthentication",
          "description": "Datalake service storage authentication details. NOTE - Enum only one method is supported."
        }
      }
    },
    "DataLakeTargetStorage": {
      "type": "object",
      "description": "Target storage for the Datalake. NOTE - Enum only storage is supported at a time.",
      "properties": {
        "datalakeStorage": {
          "$ref": "#/definitions/DataLakeServiceStorage",
          "description": "Datalake service storage details."
        },
        "localStorage": {
          "$ref": "#/definitions/DataLakeLocalStorage",
          "description": "Local storage details."
        }
      }
    },
    "DataLakeTargetStorageUpdate": {
      "type": "object",
      "description": "Target storage for the Datalake. NOTE - Enum only storage is supported at a time.",
      "properties": {
        "datalakeStorage": {
          "$ref": "#/definitions/DataLakeServiceStorageUpdate",
          "description": "Datalake service storage details."
        },
        "localStorage": {
          "$ref": "#/definitions/DataLakeLocalStorageUpdate",
          "description": "Local storage details."
        }
      }
    },
    "DatalakeConnectorProperties": {
      "type": "object",
      "description": "E4k DatalakeConnector  Resource properties",
      "properties": {
        "databaseFormat": {
          "$ref": "#/definitions/DatalakeDatabaseFormat",
          "description": "Datalake database format to use."
        },
        "image": {
          "$ref": "#/definitions/ContainerImage",
          "description": "The details of DatalakeConnector Docker Image."
        },
        "instances": {
          "type": "integer",
          "format": "int32",
          "description": "The number of DatalakeConnector pods to spin up.",
          "minimum": 0,
          "maximum": 65535
        },
        "localBrokerConnection": {
          "$ref": "#/definitions/LocalBrokerConnectionSpec",
          "description": "The details for connecting with Local Broker."
        },
        "logLevel": {
          "type": "string",
          "description": "The log level of the DataLake Connector instances."
        },
        "nodeTolerations": {
          "$ref": "#/definitions/NodeTolerations",
          "description": "The Node Tolerations for the DataLake Connector pods."
        },
        "protocol": {
          "$ref": "#/definitions/MqttProtocol",
          "description": "The protocol to use for connecting with Brokers."
        },
        "target": {
          "$ref": "#/definitions/DataLakeTargetStorage",
          "description": "The protocol to use for connecting with Brokers. NOTE - Enum only storage is supported at at time."
        },
        "provisioningState": {
          "$ref": "#/definitions/ProvisioningState",
          "description": "The status of the last operation.",
          "readOnly": true
        }
      },
      "required": [
        "databaseFormat",
        "image",
        "protocol",
        "target"
      ]
    },
    "DatalakeConnectorResource": {
      "type": "object",
      "description": "E4K dataLakeConnector resource",
      "properties": {
        "properties": {
          "$ref": "#/definitions/DatalakeConnectorProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "extendedLocation": {
          "$ref": "#/definitions/ExtendedLocationProperty",
          "description": "Extended Location",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "required": [
        "extendedLocation"
      ],
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "DatalakeConnectorResourceListResult": {
      "type": "object",
      "description": "The response of a DatalakeConnectorResource list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The DatalakeConnectorResource items on this page",
          "items": {
            "$ref": "#/definitions/DatalakeConnectorResource"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "DatalakeConnectorResourceUpdate": {
      "type": "object",
      "description": "The type used for update operations of the DatalakeConnectorResource.",
      "properties": {
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "$ref": "#/definitions/DatalakeConnectorResourceUpdateProperties",
          "x-ms-client-flatten": true
        }
      }
    },
    "DatalakeConnectorResourceUpdateProperties": {
      "type": "object",
      "description": "The updatable properties of the DatalakeConnectorResource.",
      "properties": {
        "databaseFormat": {
          "$ref": "#/definitions/DatalakeDatabaseFormat",
          "description": "Datalake database format to use."
        },
        "image": {
          "$ref": "#/definitions/ContainerImageUpdate",
          "description": "The details of DatalakeConnector Docker Image."
        },
        "instances": {
          "type": "integer",
          "format": "int32",
          "description": "The number of DatalakeConnector pods to spin up.",
          "minimum": 0,
          "maximum": 65535
        },
        "localBrokerConnection": {
          "$ref": "#/definitions/LocalBrokerConnectionSpecUpdate",
          "description": "The details for connecting with Local Broker."
        },
        "logLevel": {
          "type": "string",
          "description": "The log level of the DataLake Connector instances."
        },
        "nodeTolerations": {
          "$ref": "#/definitions/NodeTolerationsUpdate",
          "description": "The Node Tolerations for the DataLake Connector pods."
        },
        "protocol": {
          "$ref": "#/definitions/MqttProtocol",
          "description": "The protocol to use for connecting with Brokers."
        },
        "target": {
          "$ref": "#/definitions/DataLakeTargetStorageUpdate",
          "description": "The protocol to use for connecting with Brokers. NOTE - Enum only storage is supported at at time."
        }
      }
    },
    "DatalakeConnectorTopicMapProperties": {
      "type": "object",
      "description": "E4k DatalakeConnector TopicMap Resource properties",
      "properties": {
        "dataLakeConnectorRef": {
          "type": "string",
          "description": "DataLake Connector CRD to use."
        },
        "mapping": {
          "$ref": "#/definitions/DataLakeConnectorMap",
          "description": "TopicMap for DataLake connector."
        },
        "provisioningState": {
          "$ref": "#/definitions/ProvisioningState",
          "description": "The status of the last operation.",
          "readOnly": true
        }
      },
      "required": [
        "dataLakeConnectorRef",
        "mapping"
      ]
    },
    "DatalakeConnectorTopicMapResource": {
      "type": "object",
      "description": "E4K dataLakeConnector/topicMap resource",
      "properties": {
        "properties": {
          "$ref": "#/definitions/DatalakeConnectorTopicMapProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "extendedLocation": {
          "$ref": "#/definitions/ExtendedLocationProperty",
          "description": "Extended Location",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "required": [
        "extendedLocation"
      ],
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "DatalakeConnectorTopicMapResourceListResult": {
      "type": "object",
      "description": "The response of a DatalakeConnectorTopicMapResource list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The DatalakeConnectorTopicMapResource items on this page",
          "items": {
            "$ref": "#/definitions/DatalakeConnectorTopicMapResource"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "DatalakeConnectorTopicMapResourceUpdate": {
      "type": "object",
      "description": "The type used for update operations of the DatalakeConnectorTopicMapResource.",
      "properties": {
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "$ref": "#/definitions/DatalakeConnectorTopicMapResourceUpdateProperties",
          "x-ms-client-flatten": true
        }
      }
    },
    "DatalakeConnectorTopicMapResourceUpdateProperties": {
      "type": "object",
      "description": "The updatable properties of the DatalakeConnectorTopicMapResource.",
      "properties": {
        "dataLakeConnectorRef": {
          "type": "string",
          "description": "DataLake Connector CRD to use."
        },
        "mapping": {
          "$ref": "#/definitions/DataLakeConnectorMapUpdate",
          "description": "TopicMap for DataLake connector."
        }
      }
    },
    "DatalakeDatabaseFormat": {
      "type": "string",
      "description": "Datalake possible database formats",
      "enum": [
        "delta",
        "parquet"
      ],
      "x-ms-enum": {
        "name": "DatalakeDatabaseFormat",
        "modelAsString": true,
        "values": [
          {
            "name": "delta",
            "value": "delta",
            "description": "Delta format."
          },
          {
            "name": "parquet",
            "value": "parquet",
            "description": "Parquet format."
          }
        ]
      }
    },
    "DeltaTable": {
      "type": "object",
      "description": "Delta table properties",
      "properties": {
        "schema": {
          "type": "array",
          "description": "Schema list supported.",
          "items": {
            "$ref": "#/definitions/DeltaTableSchema"
          },
          "x-ms-identifiers": []
        },
        "tableName": {
          "type": "string",
          "description": "Delta table name."
        }
      },
      "required": [
        "schema",
        "tableName"
      ]
    },
    "DeltaTableFormatEnum": {
      "type": "string",
      "description": "Delta table format properties",
      "enum": [
        "boolean",
        "int8",
        "int16",
        "int32",
        "uInt8",
        "uInt16",
        "uInt32",
        "uInt64",
        "float16",
        "float32",
        "float64",
        "date32",
        "date64",
        "binary",
        "utf8"
      ],
      "x-ms-enum": {
        "name": "DeltaTableFormatEnum",
        "modelAsString": true,
        "values": [
          {
            "name": "boolean",
            "value": "boolean",
            "description": "Bool format"
          },
          {
            "name": "int8",
            "value": "int8",
            "description": "Signed integer 8"
          },
          {
            "name": "int16",
            "value": "int16",
            "description": "Signed integer 16"
          },
          {
            "name": "int32",
            "value": "int32",
            "description": "Signed integer 32"
          },
          {
            "name": "uInt8",
            "value": "uInt8",
            "description": "Unsigned integer 8"
          },
          {
            "name": "uInt16",
            "value": "uInt16",
            "description": "Unsigned integer 16"
          },
          {
            "name": "uInt32",
            "value": "uInt32",
            "description": "Unsigned integer 32"
          },
          {
            "name": "uInt64",
            "value": "uInt64",
            "description": "Unsigned integer 64"
          },
          {
            "name": "float16",
            "value": "float16",
            "description": "Float 16"
          },
          {
            "name": "float32",
            "value": "float32",
            "description": "Float 32"
          },
          {
            "name": "float64",
            "value": "float64",
            "description": "Float 64"
          },
          {
            "name": "date32",
            "value": "date32",
            "description": "Date 32"
          },
          {
            "name": "date64",
            "value": "date64",
            "description": "Date 64"
          },
          {
            "name": "binary",
            "value": "binary",
            "description": "Binary data"
          },
          {
            "name": "utf8",
            "value": "utf8",
            "description": "UTF8 format"
          }
        ]
      }
    },
    "DeltaTableSchema": {
      "type": "object",
      "description": "Delta table schema properties",
      "properties": {
        "format": {
          "$ref": "#/definitions/DeltaTableFormatEnum",
          "description": "Delta table format supported."
        },
        "mapping": {
          "type": "string",
          "description": "Delta table schema mapping."
        },
        "name": {
          "type": "string",
          "description": "Delta table schema name."
        },
        "optional": {
          "type": "boolean",
          "description": "Delta table schema optional."
        }
      },
      "required": [
        "format",
        "mapping",
        "name",
        "optional"
      ]
    },
    "DeltaTableUpdate": {
      "type": "object",
      "description": "Delta table properties",
      "properties": {
        "schema": {
          "type": "array",
          "description": "Schema list supported.",
          "items": {
            "$ref": "#/definitions/DeltaTableSchema"
          },
          "x-ms-identifiers": []
        },
        "tableName": {
          "type": "string",
          "description": "Delta table name."
        }
      }
    },
    "DiagnosticServiceProperties": {
      "type": "object",
      "description": "E4k Diagnostic Services Resource properties",
      "properties": {
        "dataExportFrequencySeconds": {
          "type": "integer",
          "format": "int32",
          "description": "The frequency at which the data will be exported.",
          "default": 10,
          "minimum": 0,
          "maximum": 65535
        },
        "image": {
          "$ref": "#/definitions/ContainerImage",
          "description": "The details of Diagnostic Service Docker Image."
        },
        "logFormat": {
          "type": "string",
          "description": "The format for the logs generated.",
          "default": "json"
        },
        "logLevel": {
          "type": "string",
          "description": "The format for the logs generated.",
          "default": "info"
        },
        "maxDataStorageSize": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum data stored in MiB.",
          "default": 16,
          "minimum": 0,
          "maximum": 4294967295
        },
        "metricsPort": {
          "type": "integer",
          "format": "int32",
          "description": "The port at which metrics is exposed.",
          "default": 9600,
          "minimum": 0,
          "maximum": 65535
        },
        "openTelemetryTracesCollectorAddr": {
          "type": "string",
          "description": "The destination to collect traces. Diagnostic service will push traces to this endpoint"
        },
        "provisioningState": {
          "$ref": "#/definitions/ProvisioningState",
          "description": "The status of the last operation.",
          "readOnly": true
        },
        "staleDataTimeoutSeconds": {
          "type": "integer",
          "format": "int32",
          "description": "Metric inactivity timeout.",
          "default": 600,
          "minimum": 0,
          "maximum": 65535
        }
      },
      "required": [
        "image"
      ]
    },
    "DiagnosticServiceResource": {
      "type": "object",
      "description": "E4K diagnostic services resource",
      "properties": {
        "properties": {
          "$ref": "#/definitions/DiagnosticServiceProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "extendedLocation": {
          "$ref": "#/definitions/ExtendedLocationProperty",
          "description": "Extended Location",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "required": [
        "extendedLocation"
      ],
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "DiagnosticServiceResourceListResult": {
      "type": "object",
      "description": "The response of a DiagnosticServiceResource list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The DiagnosticServiceResource items on this page",
          "items": {
            "$ref": "#/definitions/DiagnosticServiceResource"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "DiagnosticServiceResourceUpdate": {
      "type": "object",
      "description": "The type used for update operations of the DiagnosticServiceResource.",
      "properties": {
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "$ref": "#/definitions/DiagnosticServiceResourceUpdateProperties",
          "x-ms-client-flatten": true
        }
      }
    },
    "DiagnosticServiceResourceUpdateProperties": {
      "type": "object",
      "description": "The updatable properties of the DiagnosticServiceResource.",
      "properties": {
        "dataExportFrequencySeconds": {
          "type": "integer",
          "format": "int32",
          "description": "The frequency at which the data will be exported.",
          "default": 10,
          "minimum": 0,
          "maximum": 65535
        },
        "image": {
          "$ref": "#/definitions/ContainerImageUpdate",
          "description": "The details of Diagnostic Service Docker Image."
        },
        "logFormat": {
          "type": "string",
          "description": "The format for the logs generated.",
          "default": "json"
        },
        "logLevel": {
          "type": "string",
          "description": "The format for the logs generated.",
          "default": "info"
        },
        "maxDataStorageSize": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum data stored in MiB.",
          "default": 16,
          "minimum": 0,
          "maximum": 4294967295
        },
        "metricsPort": {
          "type": "integer",
          "format": "int32",
          "description": "The port at which metrics is exposed.",
          "default": 9600,
          "minimum": 0,
          "maximum": 65535
        },
        "openTelemetryTracesCollectorAddr": {
          "type": "string",
          "description": "The destination to collect traces. Diagnostic service will push traces to this endpoint"
        },
        "staleDataTimeoutSeconds": {
          "type": "integer",
          "format": "int32",
          "description": "Metric inactivity timeout.",
          "default": 600,
          "minimum": 0,
          "maximum": 65535
        }
      }
    },
    "E4kProperties": {
      "type": "object",
      "description": "E4k Resource properties",
      "properties": {
        "provisioningState": {
          "$ref": "#/definitions/ProvisioningState",
          "description": "The status of the last operation.",
          "readOnly": true
        }
      }
    },
    "E4kResource": {
      "type": "object",
      "description": "E4K resource",
      "properties": {
        "properties": {
          "$ref": "#/definitions/E4kProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "extendedLocation": {
          "$ref": "#/definitions/ExtendedLocationProperty",
          "description": "Extended Location",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "required": [
        "extendedLocation"
      ],
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "E4kResourceListResult": {
      "type": "object",
      "description": "The response of a E4kResource list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The E4kResource items on this page",
          "items": {
            "$ref": "#/definitions/E4kResource"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "E4kResourceUpdate": {
      "type": "object",
      "description": "The type used for update operations of the E4kResource.",
      "properties": {
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ExtendedLocationProperty": {
      "type": "object",
      "description": "ExtendedLocation properties",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the extended location."
        },
        "type": {
          "$ref": "#/definitions/ExtendedLocationType",
          "description": "Type of ExtendedLocation."
        }
      },
      "required": [
        "name",
        "type"
      ]
    },
    "ExtendedLocationType": {
      "type": "string",
      "description": "The enum defining type of ExtendedLocation accepted.",
      "enum": [
        "CustomLocation"
      ],
      "x-ms-enum": {
        "name": "ExtendedLocationType",
        "modelAsString": true,
        "values": [
          {
            "name": "CustomLocation",
            "value": "CustomLocation",
            "description": "CustomLocation type"
          }
        ]
      }
    },
    "Frontend": {
      "type": "object",
      "description": "Desired properties of the Frontend Instances of the DMQTT Broker",
      "properties": {
        "replicas": {
          "type": "integer",
          "format": "int32",
          "description": "Replicas is desired number of frontend replicas of the given distributed MQTT broker.",
          "minimum": 0,
          "maximum": 65535
        },
        "temporaryResourceLimits": {
          "$ref": "#/definitions/TemporaryResourceLimitsConfig",
          "description": "Defines the limits for resources of the frontend instances of the MQTT broker."
        }
      },
      "required": [
        "replicas"
      ]
    },
    "FrontendUpdate": {
      "type": "object",
      "description": "Desired properties of the Frontend Instances of the DMQTT Broker",
      "properties": {
        "replicas": {
          "type": "integer",
          "format": "int32",
          "description": "Replicas is desired number of frontend replicas of the given distributed MQTT broker.",
          "minimum": 0,
          "maximum": 65535
        },
        "temporaryResourceLimits": {
          "$ref": "#/definitions/TemporaryResourceLimitsConfigUpdate",
          "description": "Defines the limits for resources of the frontend instances of the MQTT broker."
        }
      }
    },
    "LocalBrokerAuthenticationMethods": {
      "type": "object",
      "description": "Mqtt Local Broker Authentication details. Only one method at a time is supported. Default - kubernetes authentication",
      "properties": {
        "basic": {
          "$ref": "#/definitions/LocalBrokerBasicAuthentication",
          "description": "Default - Basic local broker authentication method."
        },
        "kubernetes": {
          "$ref": "#/definitions/LocalBrokerKubernetesAuthentication",
          "description": "Kubernetes local broker authentication method."
        }
      }
    },
    "LocalBrokerAuthenticationMethodsUpdate": {
      "type": "object",
      "description": "Mqtt Local Broker Authentication details. Only one method at a time is supported. Default - kubernetes authentication",
      "properties": {
        "basic": {
          "$ref": "#/definitions/LocalBrokerBasicAuthenticationUpdate",
          "description": "Default - Basic local broker authentication method."
        },
        "kubernetes": {
          "$ref": "#/definitions/LocalBrokerKubernetesAuthentication",
          "description": "Kubernetes local broker authentication method."
        }
      }
    },
    "LocalBrokerBasicAuthentication": {
      "type": "object",
      "description": "Local Mqtt Broker Basic Authentication properties.",
      "properties": {
        "anonymous": {
          "type": "boolean",
          "description": "Set if anonymous connection is allowed."
        },
        "k8sSecretName": {
          "type": "string",
          "description": "K8s secret name containing auth credentials."
        },
        "passwordKey": {
          "type": "string",
          "description": "K8s secret name password key."
        },
        "usernameKey": {
          "type": "string",
          "description": "K8s secret name username key."
        }
      },
      "required": [
        "anonymous"
      ]
    },
    "LocalBrokerBasicAuthenticationUpdate": {
      "type": "object",
      "description": "Local Mqtt Broker Basic Authentication properties.",
      "properties": {
        "anonymous": {
          "type": "boolean",
          "description": "Set if anonymous connection is allowed."
        },
        "k8sSecretName": {
          "type": "string",
          "description": "K8s secret name containing auth credentials."
        },
        "passwordKey": {
          "type": "string",
          "description": "K8s secret name password key."
        },
        "usernameKey": {
          "type": "string",
          "description": "K8s secret name username key."
        }
      }
    },
    "LocalBrokerConnectionSpec": {
      "type": "object",
      "description": "Mqtt Local Broker ConnectionSpec details",
      "properties": {
        "authentication": {
          "$ref": "#/definitions/LocalBrokerAuthenticationMethods",
          "description": "The authentication methods for LocalBroker connection. NOTE - Enum only one method at a time is supported."
        },
        "endpoint": {
          "type": "string",
          "description": "The endpoint of local broker to connect to.",
          "default": "azedge-dmqtt-frontend:1883"
        },
        "tls": {
          "$ref": "#/definitions/LocalBrokerConnectionTls",
          "description": "TLS details for Local broker Connection."
        }
      }
    },
    "LocalBrokerConnectionSpecUpdate": {
      "type": "object",
      "description": "Mqtt Local Broker ConnectionSpec details",
      "properties": {
        "authentication": {
          "$ref": "#/definitions/LocalBrokerAuthenticationMethodsUpdate",
          "description": "The authentication methods for LocalBroker connection. NOTE - Enum only one method at a time is supported."
        },
        "endpoint": {
          "type": "string",
          "description": "The endpoint of local broker to connect to.",
          "default": "azedge-dmqtt-frontend:1883"
        },
        "tls": {
          "$ref": "#/definitions/LocalBrokerConnectionTls",
          "description": "TLS details for Local broker Connection."
        }
      }
    },
    "LocalBrokerConnectionTls": {
      "type": "object",
      "description": "Mqtt Local Broker Connection TLS details",
      "properties": {
        "tlsEnabled": {
          "type": "boolean",
          "description": "Tls Enabled on Local Broker Connection.",
          "default": false
        },
        "trustedCaCertificate": {
          "type": "string",
          "description": "Trusted CA certificate for Local Broker."
        },
        "trustedCaCertificateName": {
          "type": "string",
          "description": "Trusted CA certificate name for Local Broker."
        }
      }
    },
    "LocalBrokerKubernetesAuthentication": {
      "type": "object",
      "description": "Local Broker Kubernetes Authentication",
      "properties": {
        "secretPath": {
          "type": "string",
          "description": "Secret Path where SAT is mounted.",
          "default": "/var/run/serviceaccount/localbroker"
        },
        "serviceAccountTokenName": {
          "type": "string",
          "description": "Token name where SAT is mounted on secret path.",
          "default": "sat"
        }
      }
    },
    "ManualCertMethod": {
      "type": "object",
      "description": "Manual TLS server certificate management through a defined secret",
      "properties": {
        "secretName": {
          "type": "string",
          "description": "secret containing TLS cert."
        },
        "secretNamespace": {
          "type": "string",
          "description": "namespace of secret; omit to use default namespace."
        }
      },
      "required": [
        "secretName"
      ]
    },
    "ManualCertMethodUpdate": {
      "type": "object",
      "description": "Manual TLS server certificate management through a defined secret",
      "properties": {
        "secretName": {
          "type": "string",
          "description": "secret containing TLS cert."
        },
        "secretNamespace": {
          "type": "string",
          "description": "namespace of secret; omit to use default namespace."
        }
      }
    },
    "MqttBridgeConnectorProperties": {
      "type": "object",
      "description": "MqttBridgeConnector Properties",
      "properties": {
        "bridgeInstances": {
          "type": "integer",
          "format": "int32",
          "description": "The number of instances to deploy for a bridge rollout.",
          "minimum": 0,
          "maximum": 65535
        },
        "clientIdPrefix": {
          "type": "string",
          "description": "The client id prefix of the dynamically generated client ids."
        },
        "image": {
          "$ref": "#/definitions/ContainerImage",
          "description": "The details of MqttBridge Docker Image."
        },
        "localBrokerConnection": {
          "$ref": "#/definitions/LocalBrokerConnectionSpec",
          "description": "The details for connecting with Local Broker."
        },
        "logLevel": {
          "type": "string",
          "description": "The log level of the Bridge Connector instances."
        },
        "nodeTolerations": {
          "$ref": "#/definitions/NodeTolerations",
          "description": "The Node Tolerations for the Bridge Connector pods."
        },
        "protocol": {
          "$ref": "#/definitions/MqttProtocol",
          "description": "The protocol to use for connecting with Brokers."
        },
        "provisioningState": {
          "$ref": "#/definitions/ProvisioningState",
          "description": "The status of the last operation.",
          "readOnly": true
        },
        "remoteBrokerConnection": {
          "$ref": "#/definitions/MqttBridgeRemoteBrokerConnectionSpec",
          "description": "The details for connecting with Remote Broker."
        }
      },
      "required": [
        "image",
        "protocol",
        "remoteBrokerConnection"
      ]
    },
    "MqttBridgeConnectorResource": {
      "type": "object",
      "description": "E4K mqttBridgeConnector resource",
      "properties": {
        "properties": {
          "$ref": "#/definitions/MqttBridgeConnectorProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "extendedLocation": {
          "$ref": "#/definitions/ExtendedLocationProperty",
          "description": "Extended Location",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "required": [
        "extendedLocation"
      ],
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "MqttBridgeConnectorResourceListResult": {
      "type": "object",
      "description": "The response of a MqttBridgeConnectorResource list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The MqttBridgeConnectorResource items on this page",
          "items": {
            "$ref": "#/definitions/MqttBridgeConnectorResource"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "MqttBridgeConnectorResourceUpdate": {
      "type": "object",
      "description": "The type used for update operations of the MqttBridgeConnectorResource.",
      "properties": {
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "$ref": "#/definitions/MqttBridgeConnectorResourceUpdateProperties",
          "x-ms-client-flatten": true
        }
      }
    },
    "MqttBridgeConnectorResourceUpdateProperties": {
      "type": "object",
      "description": "The updatable properties of the MqttBridgeConnectorResource.",
      "properties": {
        "bridgeInstances": {
          "type": "integer",
          "format": "int32",
          "description": "The number of instances to deploy for a bridge rollout.",
          "minimum": 0,
          "maximum": 65535
        },
        "clientIdPrefix": {
          "type": "string",
          "description": "The client id prefix of the dynamically generated client ids."
        },
        "image": {
          "$ref": "#/definitions/ContainerImageUpdate",
          "description": "The details of MqttBridge Docker Image."
        },
        "localBrokerConnection": {
          "$ref": "#/definitions/LocalBrokerConnectionSpecUpdate",
          "description": "The details for connecting with Local Broker."
        },
        "logLevel": {
          "type": "string",
          "description": "The log level of the Bridge Connector instances."
        },
        "nodeTolerations": {
          "$ref": "#/definitions/NodeTolerationsUpdate",
          "description": "The Node Tolerations for the Bridge Connector pods."
        },
        "protocol": {
          "$ref": "#/definitions/MqttProtocol",
          "description": "The protocol to use for connecting with Brokers."
        },
        "remoteBrokerConnection": {
          "$ref": "#/definitions/MqttBridgeRemoteBrokerConnectionSpecUpdate",
          "description": "The details for connecting with Remote Broker."
        }
      }
    },
    "MqttBridgeRemoteBrokerAuthenticationMethods": {
      "type": "object",
      "description": "MqttBridge RemoteBrokerConnection Authentication methods. NOTE - Enum only one is allowed to be passed.",
      "properties": {
        "basic": {
          "$ref": "#/definitions/LocalBrokerBasicAuthentication",
          "description": "Basic remote broker authentication method."
        },
        "x509": {
          "$ref": "#/definitions/MqttBridgeRemoteBrokerX509Authentication",
          "description": "X509 remote broker authentication method."
        }
      }
    },
    "MqttBridgeRemoteBrokerAuthenticationMethodsUpdate": {
      "type": "object",
      "description": "MqttBridge RemoteBrokerConnection Authentication methods. NOTE - Enum only one is allowed to be passed.",
      "properties": {
        "basic": {
          "$ref": "#/definitions/LocalBrokerBasicAuthenticationUpdate",
          "description": "Basic remote broker authentication method."
        },
        "x509": {
          "$ref": "#/definitions/MqttBridgeRemoteBrokerX509AuthenticationUpdate",
          "description": "X509 remote broker authentication method."
        }
      }
    },
    "MqttBridgeRemoteBrokerConnectionSpec": {
      "type": "object",
      "description": "MqttBridge RemoteBrokerConnectionSpec details",
      "properties": {
        "authentication": {
          "$ref": "#/definitions/MqttBridgeRemoteBrokerAuthenticationMethods",
          "description": "The remote broker authentication methods. NOTE - Enum only one method is allowed to be passed."
        },
        "endpoint": {
          "type": "string",
          "description": "The endpoint of remote broker to connect to."
        },
        "tls": {
          "$ref": "#/definitions/MqttBridgeRemoteBrokerConnectionTls",
          "description": "TLS details for Remote broker Connection."
        }
      },
      "required": [
        "authentication",
        "endpoint",
        "tls"
      ]
    },
    "MqttBridgeRemoteBrokerConnectionSpecUpdate": {
      "type": "object",
      "description": "MqttBridge RemoteBrokerConnectionSpec details",
      "properties": {
        "authentication": {
          "$ref": "#/definitions/MqttBridgeRemoteBrokerAuthenticationMethodsUpdate",
          "description": "The remote broker authentication methods. NOTE - Enum only one method is allowed to be passed."
        },
        "endpoint": {
          "type": "string",
          "description": "The endpoint of remote broker to connect to."
        },
        "tls": {
          "$ref": "#/definitions/MqttBridgeRemoteBrokerConnectionTlsUpdate",
          "description": "TLS details for Remote broker Connection."
        }
      }
    },
    "MqttBridgeRemoteBrokerConnectionTls": {
      "type": "object",
      "description": "MqttBridge RemoteBrokerConnection TLS details",
      "properties": {
        "tlsEnabled": {
          "type": "boolean",
          "description": "Tls Enabled on Remote Broker Connection."
        },
        "trustedCaCertificate": {
          "type": "string",
          "description": "Trusted CA certificate for Remote Broker."
        },
        "trustedCaCertificateName": {
          "type": "string",
          "description": "Trusted CA certificate name for Remote Broker."
        }
      },
      "required": [
        "tlsEnabled"
      ]
    },
    "MqttBridgeRemoteBrokerConnectionTlsUpdate": {
      "type": "object",
      "description": "MqttBridge RemoteBrokerConnection TLS details",
      "properties": {
        "tlsEnabled": {
          "type": "boolean",
          "description": "Tls Enabled on Remote Broker Connection."
        },
        "trustedCaCertificate": {
          "type": "string",
          "description": "Trusted CA certificate for Remote Broker."
        },
        "trustedCaCertificateName": {
          "type": "string",
          "description": "Trusted CA certificate name for Remote Broker."
        }
      }
    },
    "MqttBridgeRemoteBrokerX509Authentication": {
      "type": "object",
      "description": "MqttBridge RemoteBroker X509 Authentication properties.",
      "properties": {
        "clientCertificate": {
          "type": "string",
          "description": "Client Certificate.",
          "default": ""
        },
        "clientExtraCertificates": {
          "type": "string",
          "description": "Client Extra Certificates.",
          "default": ""
        },
        "clientK8sSecret": {
          "type": "string",
          "description": "K8s secret name containing certificate."
        },
        "clientKey": {
          "type": "string",
          "description": "K8s secret name client key.",
          "default": ""
        },
        "secretPath": {
          "type": "string",
          "description": "K8s secret mounted path.",
          "default": ""
        }
      },
      "required": [
        "clientK8sSecret"
      ]
    },
    "MqttBridgeRemoteBrokerX509AuthenticationUpdate": {
      "type": "object",
      "description": "MqttBridge RemoteBroker X509 Authentication properties.",
      "properties": {
        "clientCertificate": {
          "type": "string",
          "description": "Client Certificate.",
          "default": ""
        },
        "clientExtraCertificates": {
          "type": "string",
          "description": "Client Extra Certificates.",
          "default": ""
        },
        "clientK8sSecret": {
          "type": "string",
          "description": "K8s secret name containing certificate."
        },
        "clientKey": {
          "type": "string",
          "description": "K8s secret name client key.",
          "default": ""
        },
        "secretPath": {
          "type": "string",
          "description": "K8s secret mounted path.",
          "default": ""
        }
      }
    },
    "MqttBridgeRouteDirection": {
      "type": "string",
      "description": "MqttBridgeRoute direction properties",
      "enum": [
        "remote-to-local",
        "local-to-remote"
      ],
      "x-ms-enum": {
        "name": "MqttBridgeRouteDirection",
        "modelAsString": true,
        "values": [
          {
            "name": "RemoteToLocal",
            "value": "remote-to-local",
            "description": "Remote to Local Broker."
          },
          {
            "name": "LocalToRemote",
            "value": "local-to-remote",
            "description": "Local to Remote Broker."
          }
        ]
      }
    },
    "MqttBridgeRouteSharedSubscription": {
      "type": "object",
      "description": "MqttBridgeRoute Shared subscription properties",
      "properties": {
        "groupMinimumShareNumber": {
          "type": "integer",
          "format": "int32",
          "description": "The group shared subscription minimum share number.",
          "minimum": 0,
          "maximum": 255
        },
        "groupName": {
          "type": "string",
          "description": "The group name for Shared subscription."
        }
      },
      "required": [
        "groupMinimumShareNumber",
        "groupName"
      ]
    },
    "MqttBridgeRoutes": {
      "type": "object",
      "description": "MqttBridgeTopicMap route properties",
      "properties": {
        "direction": {
          "$ref": "#/definitions/MqttBridgeRouteDirection",
          "description": "Direction of the route."
        },
        "name": {
          "type": "string",
          "description": "Name of the route."
        },
        "qos": {
          "type": "integer",
          "format": "int32",
          "description": "Qos for MQTT connection.",
          "default": 1,
          "minimum": 0,
          "maximum": 2
        },
        "sharedSubscription": {
          "$ref": "#/definitions/MqttBridgeRouteSharedSubscription",
          "description": "Shared subscription topic details."
        },
        "source": {
          "type": "string",
          "description": "Source topic of the route."
        },
        "target": {
          "type": "string",
          "description": "Target topic of the route. Ignore if same as source"
        }
      },
      "required": [
        "direction",
        "name",
        "source"
      ]
    },
    "MqttBridgeTopicMapProperties": {
      "type": "object",
      "description": "MqttBridgeTopicMap Properties",
      "properties": {
        "mqttBridgeConnectorRef": {
          "type": "string",
          "description": "The MqttBridgeConnector CRD it refers to."
        },
        "routes": {
          "type": "array",
          "description": "The route details for MqttBridge connector.",
          "items": {
            "$ref": "#/definitions/MqttBridgeRoutes"
          },
          "x-ms-identifiers": []
        },
        "provisioningState": {
          "$ref": "#/definitions/ProvisioningState",
          "description": "The status of the last operation.",
          "readOnly": true
        }
      },
      "required": [
        "mqttBridgeConnectorRef"
      ]
    },
    "MqttBridgeTopicMapResource": {
      "type": "object",
      "description": "E4K mqttBridgeTopicMap resource",
      "properties": {
        "properties": {
          "$ref": "#/definitions/MqttBridgeTopicMapProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "extendedLocation": {
          "$ref": "#/definitions/ExtendedLocationProperty",
          "description": "Extended Location",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "required": [
        "extendedLocation"
      ],
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "MqttBridgeTopicMapResourceListResult": {
      "type": "object",
      "description": "The response of a MqttBridgeTopicMapResource list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The MqttBridgeTopicMapResource items on this page",
          "items": {
            "$ref": "#/definitions/MqttBridgeTopicMapResource"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "MqttBridgeTopicMapResourceUpdate": {
      "type": "object",
      "description": "The type used for update operations of the MqttBridgeTopicMapResource.",
      "properties": {
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "$ref": "#/definitions/MqttBridgeTopicMapResourceUpdateProperties",
          "x-ms-client-flatten": true
        }
      }
    },
    "MqttBridgeTopicMapResourceUpdateProperties": {
      "type": "object",
      "description": "The updatable properties of the MqttBridgeTopicMapResource.",
      "properties": {
        "mqttBridgeConnectorRef": {
          "type": "string",
          "description": "The MqttBridgeConnector CRD it refers to."
        },
        "routes": {
          "type": "array",
          "description": "The route details for MqttBridge connector.",
          "items": {
            "$ref": "#/definitions/MqttBridgeRoutes"
          },
          "x-ms-identifiers": []
        }
      }
    },
    "MqttProtocol": {
      "type": "string",
      "description": "Mqtt Protocol types",
      "enum": [
        "v3",
        "v5"
      ],
      "x-ms-enum": {
        "name": "MqttProtocol",
        "modelAsString": true,
        "values": [
          {
            "name": "v3",
            "value": "v3",
            "description": "Mqttv3"
          },
          {
            "name": "v5",
            "value": "v5",
            "description": "Mqttv5"
          }
        ]
      }
    },
    "NodeTolerations": {
      "type": "object",
      "description": "Defines the Node Tolerations details",
      "properties": {
        "effect": {
          "type": "string",
          "description": "Toleration effect."
        },
        "key": {
          "type": "string",
          "description": "Toleration key."
        },
        "operator": {
          "type": "string",
          "description": "Toleration operator like 'Exists', 'Equal' etc."
        },
        "value": {
          "type": "string",
          "description": "Toleration Value."
        }
      },
      "required": [
        "effect",
        "key",
        "operator",
        "value"
      ]
    },
    "NodeTolerationsUpdate": {
      "type": "object",
      "description": "Defines the Node Tolerations details",
      "properties": {
        "effect": {
          "type": "string",
          "description": "Toleration effect."
        },
        "key": {
          "type": "string",
          "description": "Toleration key."
        },
        "operator": {
          "type": "string",
          "description": "Toleration operator like 'Exists', 'Equal' etc."
        },
        "value": {
          "type": "string",
          "description": "Toleration Value."
        }
      }
    },
    "PrincipalDefinition": {
      "type": "object",
      "description": "PrincipalDefinition properties of Basic Rule",
      "properties": {
        "attributes": {
          "type": "array",
          "description": "A list of key-value pairs that match the attributes of the clients. The attributes are case-sensitive and must match the attributes provided by the clients during authentication.",
          "default": [],
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "x-ms-identifiers": []
        },
        "clientids": {
          "type": "array",
          "description": "A list of client IDs that match the clients. The client IDs are case-sensitive and must match the client IDs provided by the clients during connection.",
          "items": {
            "type": "string"
          }
        },
        "usernames": {
          "type": "array",
          "description": "A list of usernames that match the clients. The usernames are case-sensitive and must match the usernames provided by the clients during authentication.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ProvisioningState": {
      "type": "string",
      "description": "The enum defining status of resource.",
      "enum": [
        "Succeeded",
        "Failed",
        "Canceled",
        "Provisioning",
        "Updating",
        "Deleting",
        "Accepted"
      ],
      "x-ms-enum": {
        "name": "ProvisioningState",
        "modelAsString": true,
        "values": [
          {
            "name": "Succeeded",
            "value": "Succeeded",
            "description": "Resource has been created."
          },
          {
            "name": "Failed",
            "value": "Failed",
            "description": "Resource creation failed."
          },
          {
            "name": "Canceled",
            "value": "Canceled",
            "description": "Resource creation was canceled."
          },
          {
            "name": "Provisioning",
            "value": "Provisioning",
            "description": "Resource is getting provisioned."
          },
          {
            "name": "Updating",
            "value": "Updating",
            "description": "Resource is Updating."
          },
          {
            "name": "Deleting",
            "value": "Deleting",
            "description": "Resource is Deleting."
          },
          {
            "name": "Accepted",
            "value": "Accepted",
            "description": "Resource has been Accepted."
          }
        ]
      }
    },
    "ResourceInfoDefinition": {
      "type": "object",
      "description": "ResourceInfoDefinition properties of Basic Rule",
      "properties": {
        "method": {
          "$ref": "#/definitions/ResourceInfoDefinitionMethods",
          "description": "The type of action that the clients can perform on the broker. Connect, Publish or Subscribe"
        },
        "topics": {
          "type": "array",
          "description": "A list of topics or topic patterns that match the topics that the clients can publish or subscribe to. This subfield is required if the method is Connect or Publish.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "method"
      ]
    },
    "ResourceInfoDefinitionMethods": {
      "type": "string",
      "description": "ResourceInfoDefinition methods allowed",
      "enum": [
        "Connect",
        "Publish",
        "Subscribe"
      ],
      "x-ms-enum": {
        "name": "ResourceInfoDefinitionMethods",
        "modelAsString": true,
        "values": [
          {
            "name": "Connect",
            "value": "Connect",
            "description": "Allowed Connecting to Broker"
          },
          {
            "name": "Publish",
            "value": "Publish",
            "description": "Allowed Publishing to Broker"
          },
          {
            "name": "Subscribe",
            "value": "Subscribe",
            "description": "Allowed Subscribing to Broker"
          }
        ]
      }
    },
    "RunMode": {
      "type": "string",
      "description": "The enum defining run mode of the broker deployment",
      "enum": [
        "auto",
        "distributed"
      ],
      "x-ms-enum": {
        "name": "RunMode",
        "modelAsString": true,
        "values": [
          {
            "name": "auto",
            "value": "auto",
            "description": "Automatically provision Frontend and Backend pods."
          },
          {
            "name": "distributed",
            "value": "distributed",
            "description": "Use Cardinality to set Frontend and Backend pods."
          }
        ]
      }
    },
    "SanForCert": {
      "type": "object",
      "description": "SANs for certificate.",
      "properties": {
        "dns": {
          "type": "array",
          "description": "DNS SANs.",
          "default": [],
          "items": {
            "type": "string"
          }
        },
        "ip": {
          "type": "array",
          "description": "IP address SANs.",
          "default": [],
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "dns",
        "ip"
      ]
    },
    "SanForCertUpdate": {
      "type": "object",
      "description": "SANs for certificate.",
      "properties": {
        "dns": {
          "type": "array",
          "description": "DNS SANs.",
          "default": [],
          "items": {
            "type": "string"
          }
        },
        "ip": {
          "type": "array",
          "description": "IP address SANs.",
          "default": [],
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ServiceType": {
      "type": "string",
      "description": "Kubernetes Service Types supported by Listener",
      "enum": [
        "clusterIp",
        "loadBalancer",
        "nodePort"
      ],
      "x-ms-enum": {
        "name": "ServiceType",
        "modelAsString": true,
        "values": [
          {
            "name": "clusterIp",
            "value": "clusterIp",
            "description": "Cluster IP Service."
          },
          {
            "name": "loadBalancer",
            "value": "loadBalancer",
            "description": "Load Balancer Service."
          },
          {
            "name": "nodePort",
            "value": "nodePort",
            "description": "Node Port Service."
          }
        ]
      }
    },
    "TemporaryResourceLimitsConfig": {
      "type": "object",
      "description": "Internal knobs of Resource Limits for FE and BE",
      "properties": {
        "maxInflightMessages": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum number of messages a client can have inflight.",
          "minimum": 0,
          "maximum": 65535
        },
        "maxInflightPatches": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of patch inflight per node.",
          "minimum": 0,
          "maximum": 9223372036854000000
        },
        "maxInflightPatchesPerClient": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of patch a client can have in flight.",
          "minimum": 0,
          "maximum": 9223372036854000000
        },
        "maxMessageExpirySecs": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum message expiry interval, in seconds.",
          "minimum": 0,
          "maximum": 4294967295
        },
        "maxQueuedMessages": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum receive for external clients.",
          "minimum": 0,
          "maximum": 9223372036854000000
        },
        "maxQueuedQos0Messages": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum receive QoS0 for external clients.",
          "minimum": 0,
          "maximum": 9223372036854000000
        },
        "maxSessionExpirySecs": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum session expiry interval, in seconds.",
          "minimum": 0,
          "maximum": 4294967295
        }
      },
      "required": [
        "maxInflightMessages",
        "maxInflightPatches",
        "maxInflightPatchesPerClient",
        "maxQueuedMessages",
        "maxQueuedQos0Messages",
        "maxSessionExpirySecs"
      ]
    },
    "TemporaryResourceLimitsConfigUpdate": {
      "type": "object",
      "description": "Internal knobs of Resource Limits for FE and BE",
      "properties": {
        "maxInflightMessages": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum number of messages a client can have inflight.",
          "minimum": 0,
          "maximum": 65535
        },
        "maxInflightPatches": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of patch inflight per node.",
          "minimum": 0,
          "maximum": 9223372036854000000
        },
        "maxInflightPatchesPerClient": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of patch a client can have in flight.",
          "minimum": 0,
          "maximum": 9223372036854000000
        },
        "maxMessageExpirySecs": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum message expiry interval, in seconds.",
          "minimum": 0,
          "maximum": 4294967295
        },
        "maxQueuedMessages": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum receive for external clients.",
          "minimum": 0,
          "maximum": 9223372036854000000
        },
        "maxQueuedQos0Messages": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum receive QoS0 for external clients.",
          "minimum": 0,
          "maximum": 9223372036854000000
        },
        "maxSessionExpirySecs": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum session expiry interval, in seconds.",
          "minimum": 0,
          "maximum": 4294967295
        }
      }
    },
    "TlsCertMethod": {
      "type": "object",
      "description": "Collection of different TLS types, NOTE- Enum at a time only one of them needs to be supported",
      "properties": {
        "automatic": {
          "$ref": "#/definitions/AutomaticCertMethod",
          "description": "Option 1 - Automatic TLS server certificate management with cert-manager."
        },
        "manual": {
          "$ref": "#/definitions/ManualCertMethod",
          "description": "Option 2 - Manual TLS server certificate management through a defined secret."
        }
      }
    },
    "TlsCertMethodUpdate": {
      "type": "object",
      "description": "Collection of different TLS types, NOTE- Enum at a time only one of them needs to be supported",
      "properties": {
        "automatic": {
          "$ref": "#/definitions/AutomaticCertMethodUpdate",
          "description": "Option 1 - Automatic TLS server certificate management with cert-manager."
        },
        "manual": {
          "$ref": "#/definitions/ManualCertMethodUpdate",
          "description": "Option 2 - Manual TLS server certificate management through a defined secret."
        }
      }
    }
  },
  "parameters": {}
}
