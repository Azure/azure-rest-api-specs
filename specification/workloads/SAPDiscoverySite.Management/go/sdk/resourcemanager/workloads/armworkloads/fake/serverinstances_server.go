// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/workloads/armworkloads"
	"net/http"
	"net/url"
	"regexp"
)

// ServerInstancesServer is a fake server for instances of the armworkloads.ServerInstancesClient type.
type ServerInstancesServer struct {
	// BeginCreate is the fake for method ServerInstancesClient.BeginCreate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	BeginCreate func(ctx context.Context, subscriptionID string, resourceGroupName string, sapDiscoverySiteName string, sapInstanceName string, serverInstanceName string, resource armworkloads.ServerInstance, options *armworkloads.ServerInstancesClientCreateOptions) (resp azfake.PollerResponder[armworkloads.ServerInstancesClientCreateResponse], errResp azfake.ErrorResponder)

	// BeginDelete is the fake for method ServerInstancesClient.BeginDelete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginDelete func(ctx context.Context, subscriptionID string, resourceGroupName string, sapDiscoverySiteName string, sapInstanceName string, serverInstanceName string, options *armworkloads.ServerInstancesClientDeleteOptions) (resp azfake.PollerResponder[armworkloads.ServerInstancesClientDeleteResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method ServerInstancesClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, subscriptionID string, resourceGroupName string, sapDiscoverySiteName string, sapInstanceName string, serverInstanceName string, options *armworkloads.ServerInstancesClientGetOptions) (resp azfake.Responder[armworkloads.ServerInstancesClientGetResponse], errResp azfake.ErrorResponder)

	// NewListBySAPInstancePager is the fake for method ServerInstancesClient.NewListBySAPInstancePager
	// HTTP status codes to indicate success: http.StatusOK
	NewListBySAPInstancePager func(subscriptionID string, resourceGroupName string, sapDiscoverySiteName string, sapInstanceName string, options *armworkloads.ServerInstancesClientListBySAPInstanceOptions) (resp azfake.PagerResponder[armworkloads.ServerInstancesClientListBySAPInstanceResponse])

	// Update is the fake for method ServerInstancesClient.Update
	// HTTP status codes to indicate success: http.StatusOK
	Update func(ctx context.Context, subscriptionID string, resourceGroupName string, sapDiscoverySiteName string, sapInstanceName string, serverInstanceName string, properties armworkloads.UpdateServerInstanceRequest, options *armworkloads.ServerInstancesClientUpdateOptions) (resp azfake.Responder[armworkloads.ServerInstancesClientUpdateResponse], errResp azfake.ErrorResponder)
}

// NewServerInstancesServerTransport creates a new instance of ServerInstancesServerTransport with the provided implementation.
// The returned ServerInstancesServerTransport instance is connected to an instance of armworkloads.ServerInstancesClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewServerInstancesServerTransport(srv *ServerInstancesServer) *ServerInstancesServerTransport {
	return &ServerInstancesServerTransport{
		srv:                       srv,
		beginCreate:               newTracker[azfake.PollerResponder[armworkloads.ServerInstancesClientCreateResponse]](),
		beginDelete:               newTracker[azfake.PollerResponder[armworkloads.ServerInstancesClientDeleteResponse]](),
		newListBySAPInstancePager: newTracker[azfake.PagerResponder[armworkloads.ServerInstancesClientListBySAPInstanceResponse]](),
	}
}

// ServerInstancesServerTransport connects instances of armworkloads.ServerInstancesClient to instances of ServerInstancesServer.
// Don't use this type directly, use NewServerInstancesServerTransport instead.
type ServerInstancesServerTransport struct {
	srv                       *ServerInstancesServer
	beginCreate               *tracker[azfake.PollerResponder[armworkloads.ServerInstancesClientCreateResponse]]
	beginDelete               *tracker[azfake.PollerResponder[armworkloads.ServerInstancesClientDeleteResponse]]
	newListBySAPInstancePager *tracker[azfake.PagerResponder[armworkloads.ServerInstancesClientListBySAPInstanceResponse]]
}

// Do implements the policy.Transporter interface for ServerInstancesServerTransport.
func (s *ServerInstancesServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return s.dispatchToMethodFake(req, method)
}

func (s *ServerInstancesServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch method {
	case "ServerInstancesClient.BeginCreate":
		resp, err = s.dispatchBeginCreate(req)
	case "ServerInstancesClient.BeginDelete":
		resp, err = s.dispatchBeginDelete(req)
	case "ServerInstancesClient.Get":
		resp, err = s.dispatchGet(req)
	case "ServerInstancesClient.NewListBySAPInstancePager":
		resp, err = s.dispatchNewListBySAPInstancePager(req)
	case "ServerInstancesClient.Update":
		resp, err = s.dispatchUpdate(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	return resp, err
}

func (s *ServerInstancesServerTransport) dispatchBeginCreate(req *http.Request) (*http.Response, error) {
	if s.srv.BeginCreate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreate not implemented")}
	}
	beginCreate := s.beginCreate.get(req)
	if beginCreate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Workloads/sapDiscoverySites/(?P<sapDiscoverySiteName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/sapInstances/(?P<sapInstanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/serverInstances/(?P<serverInstanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 5 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armworkloads.ServerInstance](req)
		if err != nil {
			return nil, err
		}
		subscriptionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("subscriptionId")])
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		sapDiscoverySiteNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("sapDiscoverySiteName")])
		if err != nil {
			return nil, err
		}
		sapInstanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("sapInstanceName")])
		if err != nil {
			return nil, err
		}
		serverInstanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("serverInstanceName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := s.srv.BeginCreate(req.Context(), subscriptionIDParam, resourceGroupNameParam, sapDiscoverySiteNameParam, sapInstanceNameParam, serverInstanceNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreate = &respr
		s.beginCreate.add(req, beginCreate)
	}

	resp, err := server.PollerResponderNext(beginCreate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated}, resp.StatusCode) {
		s.beginCreate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreate) {
		s.beginCreate.remove(req)
	}

	return resp, nil
}

func (s *ServerInstancesServerTransport) dispatchBeginDelete(req *http.Request) (*http.Response, error) {
	if s.srv.BeginDelete == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDelete not implemented")}
	}
	beginDelete := s.beginDelete.get(req)
	if beginDelete == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Workloads/sapDiscoverySites/(?P<sapDiscoverySiteName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/sapInstances/(?P<sapInstanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/serverInstances/(?P<serverInstanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 5 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		subscriptionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("subscriptionId")])
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		sapDiscoverySiteNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("sapDiscoverySiteName")])
		if err != nil {
			return nil, err
		}
		sapInstanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("sapInstanceName")])
		if err != nil {
			return nil, err
		}
		serverInstanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("serverInstanceName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := s.srv.BeginDelete(req.Context(), subscriptionIDParam, resourceGroupNameParam, sapDiscoverySiteNameParam, sapInstanceNameParam, serverInstanceNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDelete = &respr
		s.beginDelete.add(req, beginDelete)
	}

	resp, err := server.PollerResponderNext(beginDelete, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		s.beginDelete.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDelete) {
		s.beginDelete.remove(req)
	}

	return resp, nil
}

func (s *ServerInstancesServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if s.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Workloads/sapDiscoverySites/(?P<sapDiscoverySiteName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/sapInstances/(?P<sapInstanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/serverInstances/(?P<serverInstanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 5 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	subscriptionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("subscriptionId")])
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	sapDiscoverySiteNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("sapDiscoverySiteName")])
	if err != nil {
		return nil, err
	}
	sapInstanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("sapInstanceName")])
	if err != nil {
		return nil, err
	}
	serverInstanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("serverInstanceName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.Get(req.Context(), subscriptionIDParam, resourceGroupNameParam, sapDiscoverySiteNameParam, sapInstanceNameParam, serverInstanceNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ServerInstance, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *ServerInstancesServerTransport) dispatchNewListBySAPInstancePager(req *http.Request) (*http.Response, error) {
	if s.srv.NewListBySAPInstancePager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListBySAPInstancePager not implemented")}
	}
	newListBySAPInstancePager := s.newListBySAPInstancePager.get(req)
	if newListBySAPInstancePager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Workloads/sapDiscoverySites/(?P<sapDiscoverySiteName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/sapInstances/(?P<sapInstanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/serverInstances`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		subscriptionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("subscriptionId")])
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		sapDiscoverySiteNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("sapDiscoverySiteName")])
		if err != nil {
			return nil, err
		}
		sapInstanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("sapInstanceName")])
		if err != nil {
			return nil, err
		}
		resp := s.srv.NewListBySAPInstancePager(subscriptionIDParam, resourceGroupNameParam, sapDiscoverySiteNameParam, sapInstanceNameParam, nil)
		newListBySAPInstancePager = &resp
		s.newListBySAPInstancePager.add(req, newListBySAPInstancePager)
		server.PagerResponderInjectNextLinks(newListBySAPInstancePager, req, func(page *armworkloads.ServerInstancesClientListBySAPInstanceResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListBySAPInstancePager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		s.newListBySAPInstancePager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListBySAPInstancePager) {
		s.newListBySAPInstancePager.remove(req)
	}
	return resp, nil
}

func (s *ServerInstancesServerTransport) dispatchUpdate(req *http.Request) (*http.Response, error) {
	if s.srv.Update == nil {
		return nil, &nonRetriableError{errors.New("fake for method Update not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Workloads/sapDiscoverySites/(?P<sapDiscoverySiteName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/sapInstances/(?P<sapInstanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/serverInstances/(?P<serverInstanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 5 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armworkloads.UpdateServerInstanceRequest](req)
	if err != nil {
		return nil, err
	}
	subscriptionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("subscriptionId")])
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	sapDiscoverySiteNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("sapDiscoverySiteName")])
	if err != nil {
		return nil, err
	}
	sapInstanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("sapInstanceName")])
	if err != nil {
		return nil, err
	}
	serverInstanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("serverInstanceName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.Update(req.Context(), subscriptionIDParam, resourceGroupNameParam, sapDiscoverySiteNameParam, sapInstanceNameParam, serverInstanceNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ServerInstance, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
