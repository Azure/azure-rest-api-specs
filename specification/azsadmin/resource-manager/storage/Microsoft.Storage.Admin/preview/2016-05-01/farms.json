{
    "swagger": "2.0",
    "info": {
        "version": "2015-12-01-preview",
        "title": "StorageManagementClient",
        "description": "The Admin Storage Management Client."
    },
    "host": "adminmanagement.local.azurestack.external",
    "schemes": [
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "paths": {
        "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage.Admin/farms/{farmId}": {
            "put": {
                "x-ms-examples": {
                    "Create a new storage farm.": {
                        "$ref": "./examples/Farms/Create.json"
                    }
                },
                "tags": [
                    "Farms"
                ],
                "description": "Create a new storage farm.",
                "operationId": "Farms_Create",
                "parameters": [
                    {
                        "$ref": "storage.json#/parameters/SubscriptionIdParameter"
                    },
                    {
                        "$ref": "storage.json#/parameters/ResourceGroupNameParameter"
                    },
                    {
                        "$ref": "storage.json#/parameters/FarmIdParameter"
                    },
                    {
                        "$ref": "storage.json#/parameters/ApiVersionParameter"
                    },
                    {
                        "description": "Parameters used to create a farm",
                        "name": "farmObject",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "farms.json#/definitions/FarmCreationProperties"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK -- The new storage farm has been created.",
                        "schema": {
                            "$ref": "farms.json#/definitions/Farm"
                        }
                    }
                }
            },
            "get": {
                "x-ms-examples": {
                    "Returns the Storage properties and settings for a specified storage farm.": {
                        "$ref": "./examples/Farms/Get.json"
                    }
                },
                "tags": [
                    "Farms"
                ],
                "description": "Returns the Storage properties and settings for a specified storage farm.",
                "operationId": "Farms_Get",
                "parameters": [
                    {
                        "$ref": "storage.json#/parameters/SubscriptionIdParameter"
                    },
                    {
                        "$ref": "storage.json#/parameters/ResourceGroupNameParameter"
                    },
                    {
                        "$ref": "storage.json#/parameters/FarmIdParameter"
                    },
                    {
                        "$ref": "storage.json#/parameters/ApiVersionParameter"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK -- The farm has been returned.",
                        "schema": {
                            "$ref": "farms.json#/definitions/Farm"
                        }
                    },
                    "404": {
                        "description": "NOT FOUND -- The specified farm was not found."
                    }
                }
            },
            "patch": {
                "x-ms-examples": {
                    "Update an existing storage farm.": {
                        "$ref": "./examples/Farms/Update.json"
                    }
                },
                "tags": [
                    "Farms"
                ],
                "description": "Update an existing storage farm.",
                "operationId": "Farms_Update",
                "parameters": [
                    {
                        "$ref": "storage.json#/parameters/SubscriptionIdParameter"
                    },
                    {
                        "$ref": "storage.json#/parameters/ApiVersionParameter"
                    },
                    {
                        "$ref": "storage.json#/parameters/ResourceGroupNameParameter"
                    },
                    {
                        "$ref": "storage.json#/parameters/FarmIdParameter"
                    },
                    {
                        "description": "Farm to update.",
                        "name": "farmObject",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "farms.json#/definitions/Farm"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK -- The properties and settings of storage farm have been updated.",
                        "schema": {
                            "$ref": "farms.json#/definitions/Farm"
                        }
                    }
                }
            }
        },
        "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage.Admin/farms/{farmId}/metricdefinitions": {
            "get": {
                "x-ms-examples": {
                    "Returns a list of metric definitions for a storage farm.": {
                        "$ref": "./examples/Farms/ListMetricDefinitions.json"
                    }
                },
                "tags": [
                    "Farms"
                ],
                "description": "Returns a list of metric definitions for a storage farm.",
                "operationId": "Farms_ListMetricDefinitions",
                "parameters": [
                    {
                        "$ref": "storage.json#/parameters/SubscriptionIdParameter"
                    },
                    {
                        "$ref": "storage.json#/parameters/ResourceGroupNameParameter"
                    },
                    {
                        "$ref": "storage.json#/parameters/FarmIdParameter"
                    },
                    {
                        "$ref": "storage.json#/parameters/ApiVersionParameter"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK -- The list of metric definitions has been returned.",
                        "schema": {
                            "$ref": "storage.json#/definitions/MetricDefinitionList"
                        }
                    },
                    "404": {
                        "description": "NOT FOUND -- The specified farm was not found."
                    }
                },
                "x-ms-pageable": {
                    "nextLinkName": "nextLink"
                }
            }
        },
        "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage.Admin/farms/{farmId}/metrics": {
            "get": {
                "x-ms-examples": {
                    "Returns a list of storage farm metrics.": {
                        "$ref": "./examples/Farms/ListMetrics.json"
                    }
                },
                "tags": [
                    "Farms"
                ],
                "description": "Returns a list of storage farm metrics.",
                "operationId": "Farms_ListMetrics",
                "parameters": [
                    {
                        "$ref": "storage.json#/parameters/SubscriptionIdParameter"
                    },
                    {
                        "$ref": "storage.json#/parameters/ResourceGroupNameParameter"
                    },
                    {
                        "$ref": "storage.json#/parameters/FarmIdParameter"
                    },
                    {
                        "$ref": "storage.json#/parameters/ApiVersionParameter"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK -- The list of metrics has been returned.",
                        "schema": {
                            "$ref": "storage.json#/definitions/MetricList"
                        }
                    },
                    "404": {
                        "description": "NOT FOUND -- The specified farm was not found."
                    }
                },
                "x-ms-pageable": {
                    "nextLinkName": "nextLink"
                }
            }
        },
        "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage.Admin/farms": {
            "get": {
                "x-ms-examples": {
                    "Returns a list of all storage farms.": {
                        "$ref": "./examples/Farms/List.json"
                    }
                },
                "tags": [
                    "Farms"
                ],
                "description": "Returns a list of all storage farms.",
                "operationId": "Farms_List",
                "parameters": [
                    {
                        "$ref": "storage.json#/parameters/SubscriptionIdParameter"
                    },
                    {
                        "$ref": "storage.json#/parameters/ResourceGroupNameParameter"
                    },
                    {
                        "$ref": "storage.json#/parameters/ApiVersionParameter"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK -- The list of storage farms has been returned.",
                        "schema": {
                            "$ref": "farms.json#/definitions/FarmList"
                        }
                    }
                },
                "x-ms-pageable": {
                    "nextLinkName": "nextLink"
                }
            }
        },
        "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage.Admin/farms/{farmId}/ondemandgc": {
            "post": {
                "x-ms-examples": {
                    "Start garbage collection on deleted storage objects.": {
                        "$ref": "./examples/Farms/StartGarbageCollection.json"
                    }
                },
                "tags": [
                    "Farms"
                ],
                "operationId": "Farms_StartGarbageCollection",
                "description": "Start garbage collection on deleted storage objects.",
                "parameters": [
                    {
                        "$ref": "storage.json#/parameters/SubscriptionIdParameter"
                    },
                    {
                        "$ref": "storage.json#/parameters/ResourceGroupNameParameter"
                    },
                    {
                        "$ref": "storage.json#/parameters/FarmIdParameter"
                    },
                    {
                        "$ref": "storage.json#/parameters/ApiVersionParameter"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK -- Garbage collection has completed."
                    },
                    "202": {
                        "description": "ACCEPTED -- Garbage collection has started."
                    }
                },
                "x-ms-long-running-operation": true
            }
        },
        "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage.Admin/farms/{farmId}/operationresults/{operationId}": {
            "get": {
                "x-ms-examples": {
                    "Returns the state of the garbage collection job.": {
                        "$ref": "./examples/Farms/GetGarbageCollectionState.json"
                    }
                },
                "tags": [
                    "GC"
                ],
                "operationId": "Farms_GetGarbageCollectionState",
                "description": "Returns the state of the garbage collection job.",
                "parameters": [
                    {
                        "$ref": "storage.json#/parameters/SubscriptionIdParameter"
                    },
                    {
                        "$ref": "storage.json#/parameters/ResourceGroupNameParameter"
                    },
                    {
                        "$ref": "storage.json#/parameters/FarmIdParameter"
                    },
                    {
                        "$ref": "storage.json#/parameters/ApiVersionParameter"
                    },
                    {
                        "$ref": "storage.json#/parameters/OperationIdParameter"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK -- The state of garbage collection has been returned.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "NOT FOUND -- The specified farm or garbage collection job can not be found."
                    }
                }
            }
        }
    },
    "definitions": {
        "FarmList": {
            "description": "Pageable list of storage farms.",
            "type": "object",
            "properties": {
                "value": {
                    "description": "List of storage farms.",
                    "type": "array",
                    "items": {
                        "$ref": "farms.json#/definitions/Farm"
                    }
                },
                "nextLink": {
                    "description": "URI to the next page.",
                    "type": "string",
                    "readOnly": true
                }
            }
        },
        "FarmCreationProperties": {
            "description": "Storage farm properties.",
            "type": "object",
            "properties": {
                "properties": {
                    "description": "Storage farm properties.",
                    "x-ms-client-flatten": true,
                    "$ref": "farms.json#/definitions/SettingAccessString"
                }
            },
            "allOf": [
                {
                    "$ref": "storage.json#/definitions/Resource"
                }
            ]
        },
        "Farm": {
            "description": "Storage farm.",
            "type": "object",
            "properties": {
                "properties": {
                    "description": "Storage farm properties.",
                    "x-ms-client-flatten": true,
                    "$ref": "farms.json#/definitions/FarmProperties",
                    "readOnly": true
                }
            },
            "allOf": [
                {
                    "$ref": "storage.json#/definitions/Resource"
                }
            ]
        },
        "FarmSettings": {
            "description": "Storage farm settings.",
            "type": "object",
            "properties": {
                "settingsPollingIntervalInSecond": {
                    "description": "The polling interval (in second).",
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true
                },
                "retentionPeriodForDeletedStorageAccountsInDays": {
                    "description": "The retention period (in days) for deleted storage account.",
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true
                },
                "hostStyleHttpPort": {
                    "description": "Host style HTTP port.",
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true
                },
                "hostStyleHttpsPort": {
                    "description": "Host style HTTPs port.",
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true
                },
                "corsAllowedOriginsList": {
                    "description": "The list of allowed origins.",
                    "type": "string",
                    "readOnly": true
                },
                "dataCenterUriHostSuffixes": {
                    "description": "The suffixes of URI of hosts in data center.",
                    "type": "string",
                    "readOnly": true
                },
                "bandwidthThrottleIsEnabled": {
                    "description": "Switch of bandwidth throttle enablement.",
                    "type": "boolean",
                    "readOnly": true
                },
                "usageCollectionIntervalInSeconds": {
                    "description": "Interval (in seconds) of storage usage collection.",
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true
                },
                "feedbackRefreshIntervalInSeconds": {
                    "description": "Interval (in seconds) of feedback refresh.",
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true
                },
                "numberOfAccountsToSync": {
                    "description": "Number of accounts to sync.",
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true
                },
                "defaultThrottleProbabilityDecayIntervalInSeconds": {
                    "description": "Interval (in seconds) of default throttle probability decay.",
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true
                },
                "gracePeriodForFullThrottlingInRefreshIntervals": {
                    "description": "Grace period for full throttling in refresh intervals.",
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true
                },
                "gracePeriodMaxThrottleProbability": {
                    "description": "Maximum probability of throttle in grace period.",
                    "type": "number",
                    "format": "float",
                    "readOnly": true
                },
                "overallRequestThresholdInTps": {
                    "description": "Overall request threshold (in TPS).",
                    "type": "number",
                    "format": "float",
                    "readOnly": true
                },
                "defaultRequestThresholdInTps": {
                    "description": "Default request threshold (in TPS).",
                    "type": "number",
                    "format": "float",
                    "readOnly": true
                },
                "minimumRequestThresholdInTps": {
                    "description": "Minimum request threshold (in TPS).",
                    "type": "number",
                    "format": "float",
                    "readOnly": true
                },
                "toleranceFactorForTps": {
                    "description": "Tolerance factor for TPS.",
                    "type": "number",
                    "format": "float",
                    "readOnly": true
                },
                "overallIngressThresholdInGbps": {
                    "description": "Overall ingress threshold (in Gbps)",
                    "type": "number",
                    "format": "float",
                    "readOnly": true
                },
                "defaultIngressThresholdInGbps": {
                    "description": "Default ingress threshold (in Gbps).",
                    "type": "number",
                    "format": "float",
                    "readOnly": true
                },
                "minimumIngressThresholdInGbps": {
                    "description": "Minimum ingress threshold (in Gbps).",
                    "type": "number",
                    "format": "float",
                    "readOnly": true
                },
                "toleranceFactorForIngress": {
                    "description": "Tolerance factor for ingress.",
                    "type": "number",
                    "format": "float",
                    "readOnly": true
                },
                "overallIntranetIngressThresholdInGbps": {
                    "description": "Overall Intranet ingress threshold (in Gbps).",
                    "type": "number",
                    "format": "float",
                    "readOnly": true
                },
                "defaultIntranetIngressThresholdInGbps": {
                    "description": "Default Intranet ingress threshold (in Gbps).",
                    "type": "number",
                    "format": "float",
                    "readOnly": true
                },
                "minimumIntranetIngressThresholdInGbps": {
                    "description": "Minimum Intranet ingress threshold (in Gbps).",
                    "type": "number",
                    "format": "float",
                    "readOnly": true
                },
                "toleranceFactorForIntranetIngress": {
                    "description": "Tolerance factor for Intranet ingress.",
                    "type": "number",
                    "format": "float",
                    "readOnly": true
                },
                "overallEgressThresholdInGbps": {
                    "description": "Overall egress threshold (in Gbps).",
                    "type": "number",
                    "format": "float",
                    "readOnly": true
                },
                "defaultEgressThresholdInGbps": {
                    "description": "Default egress threshold (in Gbps).",
                    "type": "number",
                    "format": "float",
                    "readOnly": true
                },
                "minimumEgressThresholdInGbps": {
                    "description": "Minimum egress threshold (in Gbps).",
                    "type": "number",
                    "format": "float",
                    "readOnly": true
                },
                "toleranceFactorForEgress": {
                    "description": "Tolerance factor for egress.",
                    "type": "number",
                    "format": "float",
                    "readOnly": true
                },
                "overallIntranetEgressThresholdInGbps": {
                    "description": "Overall Intranet egress threshold (in Gbps).",
                    "type": "number",
                    "format": "float",
                    "readOnly": true
                },
                "defaultIntranetEgressThresholdInGbps": {
                    "description": "Default Intranet egress threshold (in Gbps).",
                    "type": "number",
                    "format": "float",
                    "readOnly": true
                },
                "minimumIntranetEgressThresholdInGbps": {
                    "description": "Minimum Intranet egress threshold (in Gbps).",
                    "type": "number",
                    "format": "float",
                    "readOnly": true
                },
                "toleranceFactorForIntranetEgress": {
                    "description": "Tolerance factor for Intranet egress.",
                    "type": "number",
                    "format": "float",
                    "readOnly": true
                },
                "overallTotalIngressThresholdInGbps": {
                    "description": "Overall total ingress threshold (in Gbps).",
                    "type": "number",
                    "format": "float",
                    "readOnly": true
                },
                "defaultTotalIngressThresholdInGbps": {
                    "description": "Default total ingress threshold (in Gbps).",
                    "type": "number",
                    "format": "float",
                    "readOnly": true
                },
                "minimumTotalIngressThresholdInGbps": {
                    "description": "Minimum total ingress threshold (in Gbps).",
                    "type": "number",
                    "format": "float",
                    "readOnly": true
                },
                "toleranceFactorForTotalIngress": {
                    "description": "Tolerance factor for total ingress.",
                    "type": "number",
                    "format": "float",
                    "readOnly": true
                },
                "overallTotalEgressThresholdInGbps": {
                    "description": "Overall total egress threshold (in Gbps).",
                    "type": "number",
                    "format": "float",
                    "readOnly": true
                },
                "defaultTotalEgressThresholdInGbps": {
                    "description": "Default total egress threshold (in Gbps).",
                    "type": "number",
                    "format": "float",
                    "readOnly": true
                },
                "minimumTotalEgressThresholdInGbps": {
                    "description": "Minimum total egress threshold (in Gbp",
                    "type": "number",
                    "format": "float",
                    "readOnly": true
                },
                "toleranceFactorForTotalEgress": {
                    "description": "Tolerance factor for total egress.",
                    "type": "number",
                    "format": "float",
                    "readOnly": true
                }
            }
        },
        "FarmProperties": {
            "description": "The properties of storage farm.",
            "type": "object",
            "properties": {
                "farmId": {
                    "description": "Farm identifier.",
                    "type": "string",
                    "readOnly": true
                },
                "version": {
                    "description": "Resource version.",
                    "type": "string",
                    "readOnly": true
                },
                "settingsStore": {
                    "description": "The settings of storage farm.",
                    "type": "string",
                    "readOnly": true
                },
                "settings": {
                    "description": "The properties of storage farm.",
                    "x-ms-client-flatten": true,
                    "$ref": "farms.json#/definitions/FarmSettings",
                    "readOnly": true
                }
            }
        },
        "SettingAccessString": {
            "description": "Setting access string.",
            "type": "object",
            "properties": {
                "settingAccessString": {
                    "description": "Setting access string.",
                    "type": "string"
                }
            }
        }
    },
    "parameters": {},
    "securityDefinitions": {
        "azure_auth": {
            "type": "oauth2",
            "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
            "flow": "implicit",
            "description": "Authorization uses an Azure Active Directory OAuth2 flow.",
            "scopes": {
                "user_impersonation": "impersonate your user account"
            }
        }
    },
    "security": [
        {
            "azure_auth": [
                "user_impersonation"
            ]
        }
    ]
}
