{
  "swagger": "2.0",
  "info": {
    "version": "2015-12-01-preview",
    "title": "StorageManagementClient",
    "description": "The Admin Storage Management Client."
  },
  "host": "adminmanagement.local.azurestack.external",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage.Admin/farms/{farmId}": {
      "put": {
        "x-ms-examples": {
          "Create a new storage farm.": {
            "$ref": "./examples/Farms/Create.json"
          }
        },
        "tags": [
          "Farms"
        ],
        "description": "Create a new storage farm.",
        "operationId": "Farms_Create",
        "parameters": [
          {
            "$ref": "storage.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "storage.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "storage.json#/parameters/FarmIdParameter"
          },
          {
            "$ref": "storage.json#/parameters/ApiVersionParameter"
          },
          {
            "description": "Parameters used to create a farm",
            "name": "farmObject",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FarmCreationProperties"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK -- The new storage farm has been created.",
            "schema": {
              "$ref": "#/definitions/Farm"
            }
          }
        }
      },
      "get": {
        "x-ms-examples": {
          "Returns the Storage properties and settings for a specified storage farm.": {
            "$ref": "./examples/Farms/Get.json"
          }
        },
        "tags": [
          "Farms"
        ],
        "description": "Returns the Storage properties and settings for a specified storage farm.",
        "operationId": "Farms_Get",
        "parameters": [
          {
            "$ref": "storage.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "storage.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "storage.json#/parameters/FarmIdParameter"
          },
          {
            "$ref": "storage.json#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK -- The farm has been returned.",
            "schema": {
              "$ref": "#/definitions/Farm"
            }
          },
          "404": {
            "description": "NOT FOUND -- The specified farm was not found."
          }
        }
      },
      "patch": {
        "x-ms-examples": {
          "Update an existing storage farm.": {
            "$ref": "./examples/Farms/Update.json"
          }
        },
        "tags": [
          "Farms"
        ],
        "description": "Update an existing storage farm.",
        "operationId": "Farms_Update",
        "parameters": [
          {
            "$ref": "storage.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "storage.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "storage.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "storage.json#/parameters/FarmIdParameter"
          },
          {
            "description": "Farm to update.",
            "name": "farmObject",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Farm"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK -- The properties and settings of storage farm have been updated.",
            "schema": {
              "$ref": "#/definitions/Farm"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage.Admin/farms/{farmId}/metricdefinitions": {
      "get": {
        "x-ms-examples": {
          "Returns a list of metric definitions for a storage farm.": {
            "$ref": "./examples/Farms/ListMetricDefinitions.json"
          }
        },
        "tags": [
          "Farms"
        ],
        "description": "Returns a list of metric definitions for a storage farm.",
        "operationId": "Farms_ListMetricDefinitions",
        "parameters": [
          {
            "$ref": "storage.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "storage.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "storage.json#/parameters/FarmIdParameter"
          },
          {
            "$ref": "storage.json#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK -- The list of metric definitions has been returned.",
            "schema": {
              "$ref": "storage.json#/definitions/MetricDefinitionList"
            }
          },
          "404": {
            "description": "NOT FOUND -- The specified farm was not found."
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage.Admin/farms/{farmId}/metrics": {
      "get": {
        "x-ms-examples": {
          "Returns a list of storage farm metrics.": {
            "$ref": "./examples/Farms/ListMetrics.json"
          }
        },
        "tags": [
          "Farms"
        ],
        "description": "Returns a list of storage farm metrics.",
        "operationId": "Farms_ListMetrics",
        "parameters": [
          {
            "$ref": "storage.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "storage.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "storage.json#/parameters/FarmIdParameter"
          },
          {
            "$ref": "storage.json#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK -- The list of metrics has been returned.",
            "schema": {
              "$ref": "storage.json#/definitions/MetricList"
            }
          },
          "404": {
            "description": "NOT FOUND -- The specified farm was not found."
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage.Admin/farms": {
      "get": {
        "x-ms-examples": {
          "Returns a list of all storage farms.": {
            "$ref": "./examples/Farms/List.json"
          }
        },
        "tags": [
          "Farms"
        ],
        "description": "Returns a list of all storage farms.",
        "operationId": "Farms_List",
        "parameters": [
          {
            "$ref": "storage.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "storage.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "storage.json#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK -- The list of storage farms has been returned.",
            "schema": {
              "$ref": "#/definitions/FarmList"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage.Admin/farms/{farmId}/ondemandgc": {
      "post": {
        "x-ms-examples": {
          "Start garbage collection on deleted storage objects.": {
            "$ref": "./examples/Farms/StartGarbageCollection.json"
          }
        },
        "tags": [
          "Farms"
        ],
        "operationId": "Farms_StartGarbageCollection",
        "description": "Start garbage collection on deleted storage objects.",
        "parameters": [
          {
            "$ref": "storage.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "storage.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "storage.json#/parameters/FarmIdParameter"
          },
          {
            "$ref": "storage.json#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK -- Garbage collection has completed."
          },
          "202": {
            "description": "ACCEPTED -- Garbage collection has started."
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage.Admin/farms/{farmId}/operationresults/{operationId}": {
      "get": {
        "x-ms-examples": {
          "Returns the state of the garbage collection job.": {
            "$ref": "./examples/Farms/GetGarbageCollectionState.json"
          }
        },
        "tags": [
          "GC"
        ],
        "operationId": "Farms_GetGarbageCollectionState",
        "description": "Returns the state of the garbage collection job.",
        "parameters": [
          {
            "$ref": "storage.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "storage.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "storage.json#/parameters/FarmIdParameter"
          },
          {
            "$ref": "storage.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "storage.json#/parameters/OperationIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK -- The state of garbage collection has been returned.",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "NOT FOUND -- The specified farm or garbage collection job can not be found."
          }
        }
      }
    }
  },
  "definitions": {
    "FarmList": {
      "description": "Pageable list of storage farms.",
      "type": "object",
      "properties": {
        "value": {
          "description": "List of storage farms.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Farm"
          }
        },
        "nextLink": {
          "description": "URI to the next page.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "FarmCreationProperties": {
      "description": "Storage farm properties.",
      "type": "object",
      "properties": {
        "properties": {
          "description": "Storage farm properties.",
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/SettingAccessString"
        }
      },
      "allOf": [
        {
          "$ref": "storage.json#/definitions/Resource"
        }
      ]
    },
    "Farm": {
      "description": "Storage farm.",
      "type": "object",
      "properties": {
        "properties": {
          "description": "Storage farm properties.",
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/FarmProperties"
        }
      },
      "allOf": [
        {
          "$ref": "storage.json#/definitions/Resource"
        }
      ]
    },
    "FarmSettings": {
      "description": "Storage farm settings.",
      "type": "object",
      "properties": {
        "settingsPollingIntervalInSecond": {
          "description": "The polling interval (in second).",
          "type": "integer",
          "format": "int32"
        },
        "retentionPeriodForDeletedStorageAccountsInDays": {
          "description": "The retention period (in days) for deleted storage account.",
          "type": "integer",
          "format": "int32"
        },
        "hostStyleHttpPort": {
          "description": "Host style HTTP port.",
          "type": "integer",
          "format": "int32"
        },
        "hostStyleHttpsPort": {
          "description": "Host style HTTPs port.",
          "type": "integer",
          "format": "int32"
        },
        "corsAllowedOriginsList": {
          "description": "The list of allowed origins.",
          "type": "string"
        },
        "dataCenterUriHostSuffixes": {
          "description": "The suffixes of URI of hosts in data center.",
          "type": "string"
        },
        "bandwidthThrottleIsEnabled": {
          "description": "Switch of bandwidth throttle enablement.",
          "type": "boolean"
        },
        "usageCollectionIntervalInSeconds": {
          "description": "Interval (in seconds) of storage usage collection.",
          "type": "integer",
          "format": "int32"
        },
        "feedbackRefreshIntervalInSeconds": {
          "description": "Interval (in seconds) of feedback refresh.",
          "type": "integer",
          "format": "int32"
        },
        "numberOfAccountsToSync": {
          "description": "Number of accounts to sync.",
          "type": "integer",
          "format": "int32"
        },
        "defaultThrottleProbabilityDecayIntervalInSeconds": {
          "description": "Interval (in seconds) of default throttle probability decay.",
          "type": "integer",
          "format": "int32"
        },
        "gracePeriodForFullThrottlingInRefreshIntervals": {
          "description": "Grace period for full throttling in refresh intervals.",
          "type": "integer",
          "format": "int32"
        },
        "gracePeriodMaxThrottleProbability": {
          "description": "Maximum probability of throttle in grace period.",
          "type": "number",
          "format": "float"
        },
        "overallRequestThresholdInTps": {
          "description": "Overall request threshold (in TPS).",
          "type": "number",
          "format": "float"
        },
        "defaultRequestThresholdInTps": {
          "description": "Default request threshold (in TPS).",
          "type": "number",
          "format": "float"
        },
        "minimumRequestThresholdInTps": {
          "description": "Minimum request threshold (in TPS).",
          "type": "number",
          "format": "float"
        },
        "toleranceFactorForTps": {
          "description": "Tolerance factor for TPS.",
          "type": "number",
          "format": "float"
        },
        "overallIngressThresholdInGbps": {
          "description": "Overall ingress threshold (in Gbps)",
          "type": "number",
          "format": "float"
        },
        "defaultIngressThresholdInGbps": {
          "description": "Default ingress threshold (in Gbps).",
          "type": "number",
          "format": "float"
        },
        "minimumIngressThresholdInGbps": {
          "description": "Minimum ingress threshold (in Gbps).",
          "type": "number",
          "format": "float"
        },
        "toleranceFactorForIngress": {
          "description": "Tolerance factor for ingress.",
          "type": "number",
          "format": "float"
        },
        "overallIntranetIngressThresholdInGbps": {
          "description": "Overall Intranet ingress threshold (in Gbps).",
          "type": "number",
          "format": "float"
        },
        "defaultIntranetIngressThresholdInGbps": {
          "description": "Default Intranet ingress threshold (in Gbps).",
          "type": "number",
          "format": "float"
        },
        "minimumIntranetIngressThresholdInGbps": {
          "description": "Minimum Intranet ingress threshold (in Gbps).",
          "type": "number",
          "format": "float"
        },
        "toleranceFactorForIntranetIngress": {
          "description": "Tolerance factor for Intranet ingress.",
          "type": "number",
          "format": "float"
        },
        "overallEgressThresholdInGbps": {
          "description": "Overall egress threshold (in Gbps).",
          "type": "number",
          "format": "float"
        },
        "defaultEgressThresholdInGbps": {
          "description": "Default egress threshold (in Gbps).",
          "type": "number",
          "format": "float"
        },
        "minimumEgressThresholdInGbps": {
          "description": "Minimum egress threshold (in Gbps).",
          "type": "number",
          "format": "float"
        },
        "toleranceFactorForEgress": {
          "description": "Tolerance factor for egress.",
          "type": "number",
          "format": "float"
        },
        "overallIntranetEgressThresholdInGbps": {
          "description": "Overall Intranet egress threshold (in Gbps).",
          "type": "number",
          "format": "float"
        },
        "defaultIntranetEgressThresholdInGbps": {
          "description": "Default Intranet egress threshold (in Gbps).",
          "type": "number",
          "format": "float"
        },
        "minimumIntranetEgressThresholdInGbps": {
          "description": "Minimum Intranet egress threshold (in Gbps).",
          "type": "number",
          "format": "float"
        },
        "toleranceFactorForIntranetEgress": {
          "description": "Tolerance factor for Intranet egress.",
          "type": "number",
          "format": "float"
        },
        "overallTotalIngressThresholdInGbps": {
          "description": "Overall total ingress threshold (in Gbps).",
          "type": "number",
          "format": "float"
        },
        "defaultTotalIngressThresholdInGbps": {
          "description": "Default total ingress threshold (in Gbps).",
          "type": "number",
          "format": "float"
        },
        "minimumTotalIngressThresholdInGbps": {
          "description": "Minimum total ingress threshold (in Gbps).",
          "type": "number",
          "format": "float"
        },
        "toleranceFactorForTotalIngress": {
          "description": "Tolerance factor for total ingress.",
          "type": "number",
          "format": "float"
        },
        "overallTotalEgressThresholdInGbps": {
          "description": "Overall total egress threshold (in Gbps).",
          "type": "number",
          "format": "float"
        },
        "defaultTotalEgressThresholdInGbps": {
          "description": "Default total egress threshold (in Gbps).",
          "type": "number",
          "format": "float"
        },
        "minimumTotalEgressThresholdInGbps": {
          "description": "Minimum total egress threshold (in Gbp",
          "type": "number",
          "format": "float"
        },
        "toleranceFactorForTotalEgress": {
          "description": "Tolerance factor for total egress.",
          "type": "number",
          "format": "float"
        }
      }
    },
    "FarmProperties": {
      "description": "The properties of storage farm.",
      "type": "object",
      "properties": {
        "farmId": {
          "description": "Farm identifier.",
          "type": "string"
        },
        "version": {
          "description": "Resource version.",
          "type": "string"
        },
        "settingsStore": {
          "description": "The settings of storage farm.",
          "type": "string"
        },
        "settings": {
          "description": "The properties of storage farm.",
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/FarmSettings"
        }
      }
    },
    "SettingAccessString": {
      "description": "Setting access string.",
      "type": "object",
      "properties": {
        "settingAccessString": {
          "description": "Setting access string.",
          "type": "string"
        }
      }
    }
  },
  "parameters": {},
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "flow": "implicit",
      "description": "Authorization uses an Azure Active Directory OAuth2 flow.",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      }
    }
  },
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ]
}
