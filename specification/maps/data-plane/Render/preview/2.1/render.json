{
  "swagger": "2.0",
  "info": {
    "title": "Azure Maps Render Service",
    "version": "2.1",
    "description": "Azure Maps Render REST APIs"
  },
  "host": "atlas.microsoft.com",
  "schemes": [
    "https"
  ],
  "consumes": [],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "AADToken": {
      "type": "oauth2",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "flow": "implicit",
      "description": "These are the [Azure Active Directory OAuth2](https://docs.microsoft.com/azure/active-directory/develop/v1-overview) Flows. When paired with [Azure role-based access](https://docs.microsoft.com/azure/role-based-access-control/overview) control it can be used to control access to Azure Maps REST APIs. Azure role-based access controls are used to designate access to one or more Azure Maps resource account or sub-resources. Any user, group, or service principal can be granted access via a  built-in role or a custom role composed of one or more permissions to Azure Maps REST APIs.\n\nTo implement scenarios, we recommend viewing [authentication concepts](https://aka.ms/amauth). In summary, this security definition provides a solution for modeling application(s) via objects capable of access control on specific APIs and scopes.\n\n#### Notes\n* This security definition **requires** the use of the `x-ms-client-id` header to indicate which Azure Maps resource the application is requesting access to. This can be acquired from the [Maps management API](https://aka.ms/amauthdetails).\n* \nThe `Authorization URL` is specific to the Azure public cloud instance. Sovereign clouds have unique Authorization URLs and Azure Active directory configurations. \n* \nThe Azure role-based access control is configured from the [Azure management plane](https://aka.ms/amrbac) via Azure portal, PowerShell, CLI, Azure SDKs, or REST APIs.\n* \nUsage of the [Azure Maps Web SDK](https://aka.ms/amaadmc) allows for configuration based setup of an application for multiple use cases.\n* Currently, Azure Active Directory [v1.0 or v2.0](https://docs.microsoft.com/azure/active-directory/develop/azure-ad-endpoint-comparison) supports Work, School, and Guests but does not support Personal accounts.",
      "scopes": {
        "https://atlas.microsoft.com/.default": "https://atlas.microsoft.com/.default"
      }
    },
    "SharedKey": {
      "type": "apiKey",
      "description": "This is a shared key that is provisioned when you [Create an Azure Maps account](https://docs.microsoft.com/azure/azure-maps/quick-demo-map-app#create-an-azure-maps-account) in the Azure portal or using PowerShell, CLI, Azure SDKs, or REST API.\n\n With this key, any application can access all REST API. In other words, this key can be used as a master key in the account that they are issued in.\n\n For publicly exposed applications, our recommendation is to use the [confidential client applications](https://docs.microsoft.com/azure/azure-maps/authentication-best-practices#confidential-client-applications) approach to access Azure Maps REST APIs so your key can be securely stored.",
      "name": "subscription-key",
      "in": "query"
    },
    "SasToken": {
      "type": "apiKey",
      "description": "This is a shared access signature token is created from the List SAS operation on the [Azure Maps resource](https://aka.ms/amauth) through the Azure management plane via Azure portal, PowerShell, CLI, Azure SDKs, or REST APIs.\n\n With this token, any application is authorized to access with Azure role-based access controls and fine-grain control to the expiration, rate, and region(s) of use for the particular token. In other words, the SAS Token can be used to allow applications to control access in a more secured way than the shared key.\n\n For publicly exposed applications, our recommendation is to configure a specific list of allowed origins on the [Map account resource](https://aka.ms/amauth) to limit rendering abuse and regularly renew the SAS Token.",
      "name": "SAS Token",
      "in": "header"
    }
  },
  "security": [
    {
      "AADToken": [
        "https://atlas.microsoft.com/.default"
      ]
    },
    {
      "SharedKey": []
    },
    {
      "SasToken": []
    }
  ],
  "responses": {},
  "parameters": {
    "ApiVersion": {
      "name": "api-version",
      "description": "Version number of Azure Maps API. Current version is 2.1",
      "type": "string",
      "in": "query",
      "required": true,
      "default": "2.1",
      "x-ms-parameter-location": "client"
    }
  },
  "paths": {
    "/map/tile": {
      "get": {
        "description": "**Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).\n\nThe Get Map Tiles API allows users to request map tiles in vector or raster formats typically to be integrated  into a map control or SDK. Some example tiles that can be requested are Azure Maps road tiles, real-time  Weather Radar tiles or the map tiles created using [Azure Maps Creator](https://aka.ms/amcreator). By default,  Azure Maps uses vector tiles for its web map control (Web SDK) and Android SDK.",
        "operationId": "RenderV2_GetMapTile",
        "x-ms-client-name": "GetMapTile",
        "x-ms-examples": {
          "Successful Tile Request": {
            "$ref": "./examples/SuccessfulTileRequest.json"
          }
        },
        "parameters": [
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/ClientId"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "$ref": "../2.0/render.json#/parameters/TilesetId_rv2"
          },
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/zTileIndex"
          },
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/xTileIndex"
          },
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/yTileIndex"
          },
          {
            "name": "timeStamp",
            "in": "query",
            "format": "date-time",
            "description": "The desired date and time of the requested tile. This parameter must be specified in the standard date-time format (e.g. 2019-11-14T16:03:00-08:00), as defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601). This parameter is only supported when tilesetId parameter is set to one of the values below.\n  \n* microsoft.weather.infrared.main: We provide tiles up to 3 hours in the past. Tiles are available in 10-minute intervals. We round the timeStamp value to the nearest 10-minute time frame.\n* microsoft.weather.radar.main: We provide tiles up to 1.5 hours in the past and up to 2 hours in the future. Tiles are available in 5-minute intervals. We round the timeStamp value to the nearest 5-minute time frame.",
            "type": "string"
          },
          {
            "$ref": "../1.0/render.json#/parameters/MapTileSize"
          },
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/Language"
          },
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/View"
          }
        ],
        "produces": [
          "application/json",
          "image/jpeg",
          "image/png",
          "image/pbf",
          "application/vnd.mapbox-vector-tile"
        ],
        "responses": {
          "200": {
            "description": "The tile returned from a successful API call.",
            "schema": {
              "type": "object",
              "format": "file",
              "readOnly": true
            },
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content-type for the response."
              }
            }
          },
          "default": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/default"
          }
        }
      }
    },
    "/map/tileset": {
      "get": {
        "description": "**Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).\n\nThe Get Map Tileset API allows users to request metadata for a tileset.",
        "operationId": "RenderV2_GetMapTileset",
        "x-ms-examples": {
          "Successful Tileset Request": {
            "$ref": "./examples/SuccessfulTilesetRequest.json"
          }
        },
        "parameters": [
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/ClientId"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "$ref": "../2.0/render.json#/parameters/TilesetId_rv2"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MapTileset"
            }
          },
          "default": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/default"
          }
        }
      }
    },
    "/map/attribution": {
      "get": {
        "description": "**Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).\n\nThe Get Map Attribution API allows users to request map copyright attribution information for a section of a tileset.",
        "operationId": "RenderV2_GetMapAttribution",
        "x-ms-examples": {
          "Successful Attribution Request": {
            "$ref": "./examples/SuccessfulAttributionRequest.json"
          }
        },
        "parameters": [
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/ClientId"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "$ref": "../2.0/render.json#/parameters/TilesetId_rv2"
          },
          {
            "name": "zoom",
            "in": "query",
            "description": "Zoom level for the desired map attribution.",
            "required": true,
            "type": "integer",
            "format": "int32",
            "x-ms-parameter-location": "method"
          },
          {
            "name": "bounds",
            "in": "query",
            "description": "The string that represents the rectangular area of a bounding box. The bounds parameter is defined by the 4 bounding box coordinates, with WGS84 longitude and latitude of the southwest corner followed by  WGS84 longitude and latitude of the northeast corner. The string is presented in the following  format: `[SouthwestCorner_Longitude, SouthwestCorner_Latitude, NortheastCorner_Longitude,  NortheastCorner_Latitude]`.",
            "required": true,
            "type": "array",
            "collectionFormat": "csv",
            "items": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MapAttribution"
            }
          },
          "default": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/default"
          }
        }
      }
    },
    "/map/statetile": {
      "get": {
        "description": "**Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).\n\nFetches state tiles in vector format typically to be integrated into indoor maps module of map control or SDK. The map control will call this API after user turns on dynamic styling (see [Zoom Levels and Tile Grid](https://docs.microsoft.com/en-us/azure/location-based-services/zoom-levels-and-tile-grid))",
        "operationId": "RenderV2_GetMapStateTile",
        "x-ms-examples": {
          "Successful State Tile Request": {
            "$ref": "./examples/SuccessfulStateTileRequest.json"
          }
        },
        "parameters": [
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/ClientId"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/zTileIndex"
          },
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/xTileIndex"
          },
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/yTileIndex"
          },
          {
            "name": "statesetId",
            "in": "query",
            "description": "The stateset id.",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/vnd.mapbox-vector-tile",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "This tile is returned from a successful Get Map State Tile call",
            "schema": {
              "type": "object",
              "format": "file",
              "readOnly": true
            },
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content-type for the response."
              }
            }
          },
          "default": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/default"
          }
        }
      }
    },
    "/map/copyright/caption/{format}": {
      "get": {
        "description": "**Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).\n\nCopyrights API is designed to serve copyright information for Render Tile \nservice. In addition to basic copyright for the whole map, API is serving \nspecific groups of copyrights for some countries.\n\nAs an alternative to copyrights for map request, one can receive captions\nfor displaying the map provider information on the map.",
        "operationId": "RenderV2_GetCopyrightCaption",
        "x-ms-examples": {
          "Successful Copyright Caption Request": {
            "$ref": "./examples/SuccessfulCopyrightCaptionRequest.json"
          }
        },
        "parameters": [
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/ClientId"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/ResponseFormat"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "../1.0/render.json#/definitions/CopyrightCaption"
            }
          },
          "default": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/default"
          }
        }
      }
    },
    "/map/static/{format}": {
      "get": {
        "description": "**Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).\n\nThe static image service renders a user-defined, rectangular image containing a map section using a zoom level from 0 to 20. The static image service renders a user-defined, rectangular image containing a map section using a zoom level from 0 to 20. The supported resolution range for the map image is from 1x1 to 8192x8192. If you are deciding when to use the static image service over the map tile service, you may want to consider how you would like to interact with the rendered map. If the map contents will be relatively unchanging, a static map is a good choice. If you want to support a lot of zooming, panning and changing of the map content, the map tile service would be a better choice. \n\nService also provides Image Composition functionality to get a static image back with additional data like; pushpins and geometry overlays with following S0 and S1 capabilities. \n\nIn S0 you can:\n- Render up to 5 pushpins specified in the request\n- Provide one custom image for the pins referenced in the request\n- Add labels to the pushpins\n\nIn S1 you can:\n- Render pushpins through [Azure Maps Data Service](https://aka.ms/AzureMapsMapDataService)\n- Specify multiple pushpin styles\n- Render circle, polyline and polygon geometry types.\n- Render of supported GeoJSON geometry types uploaded through [Azure Maps Data Service](https://aka.ms/AzureMapsMapDataService)\n\nPlease see [How-to-Guide](https://aka.ms/AzureMapsHowToGuideImageCompositor) for detailed examples.\n\n_Note_ : Either **center** or **bbox** parameter must be supplied to the\nAPI.\n<br><br>\nThe supported Lat and Lon ranges when using the **bbox** parameter, are as follows:\n<br><br>\n\n  |Zoom Level | Max Lon Range   | Max Lat Range|\n  |:----------|:----------------|:-------------|\n  |0          | 360.0           | 170.0        | \n  |1          | 360.0           | 170.0        |\n  |2          | 360.0           | 170.0        |\n  |3          | 360.0           | 170.0        |\n  |4          | 360.0           | 170.0        |\n  |5          | 180.0           | 85.0         |\n  |6          | 90.0            | 42.5         |\n  |7          | 45.0            | 21.25        |\n  |8          | 22.5            | 10.625       |\n  |9          | 11.25           | 5.3125       |\n  |10         | 5.625           | 2.62625      |\n  |11         | 2.8125          | 1.328125     |\n  |12         | 1.40625         | 0.6640625    |\n  |13         | 0.703125        | 0.33203125   |\n  |14         | 0.3515625       | 0.166015625  |\n  |15         | 0.17578125      | 0.0830078125 |  \n  |16         | 0.087890625     | 0.0415039063 | \n  |17         | 0.0439453125    | 0.0207519531 |\n  |18         | 0.0219726563    | 0.0103759766 |\n  |19         | 0.0109863281    | 0.0051879883 |\n  |20         | 0.0054931641    | 0.0025939941 |",
        "operationId": "RenderV2_GetMapStaticImage",
        "x-ms-examples": {
          "Successful Static Image Request": {
            "$ref": "./examples/SuccessfulStaticImageRequest.json"
          }
        },
        "parameters": [
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/ClientId"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "$ref": "../1.0/render.json#/parameters/RasterTileFormat"
          },
          {
            "name": "layer",
            "in": "query",
            "description": "Map layer requested. If layer is set to labels or hybrid, the format should be png.",
            "type": "string",
            "enum": [
              "basic",
              "hybrid",
              "labels"
            ],
            "x-ms-enum": {
              "name": "StaticMapLayer",
              "modelAsString": true,
              "values": [
                {
                  "value": "basic",
                  "description": "Returns an image containing all map features including polygons, borders, roads and labels."
                },
                {
                  "value": "hybrid",
                  "description": "Returns an image containing borders, roads, and labels, and can be overlaid on other tiles (such as satellite imagery) to produce hybrid tiles."
                },
                {
                  "value": "labels",
                  "description": "Returns an image of just the map's label information."
                }
              ]
            }
          },
          {
            "name": "style",
            "in": "query",
            "description": "Map style to be returned. Possible values are main and dark.",
            "type": "string",
            "enum": [
              "main",
              "dark"
            ],
            "x-ms-enum": {
              "name": "MapImageStyle",
              "modelAsString": true,
              "values": [
                {
                  "value": "main",
                  "description": "Azure Maps main style"
                },
                {
                  "value": "dark",
                  "description": "Dark grey version of the Azure Maps main style"
                }
              ]
            }
          },
          {
            "name": "zoom",
            "in": "query",
            "description": "Desired zoom level of the map. Zoom value must be in the range: 0-20 (inclusive). Default value is 12.<br><br>Please see [Zoom Levels and Tile Grid](https://docs.microsoft.com/en-us/azure/location-based-services/zoom-levels-and-tile-grid) for details.",
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 20
          },
          {
            "name": "center",
            "in": "query",
            "description": "Coordinates of the center point. Format: 'lon,lat'. Projection used\n- EPSG:3857. Longitude range: -180 to 180. Latitude range: -85 to 85. \n\nNote: Either center or bbox are required parameters. They are\nmutually exclusive.",
            "type": "array",
            "collectionFormat": "csv",
            "items": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "bbox",
            "x-ms-client-name": "boundingBoxPrivate",
            "in": "query",
            "description": "Bounding box. Projection used - EPSG:3857. Format : 'minLon, minLat,\nmaxLon, maxLat'. \n\nNote: Either bbox or center are required\nparameters. They are mutually exclusive. It shouldn’t be used with\nheight or width.\n\nThe maximum allowed ranges for Lat and Lon are defined for each zoom level\nin the table at the top of this page.",
            "type": "array",
            "collectionFormat": "csv",
            "items": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "height",
            "in": "query",
            "description": "Height of the resulting image in pixels. Range is 1 to 8192. Default\nis 512. It shouldn’t be used with bbox.",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 8192
          },
          {
            "name": "width",
            "in": "query",
            "description": "Width of the resulting image in pixels. Range is 1 to 8192. Default is 512. It shouldn’t be used with bbox.",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 8192
          },
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/Language"
          },
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/View"
          },
          {
            "name": "pins",
            "description": "Pushpin style and instances. Use this parameter to optionally add pushpins to the image.\nThe pushpin style describes the appearance of the pushpins, and the instances specify\nthe coordinates of the pushpins and optional labels for each pin. (Be sure to properly URL-encode values of this\nparameter since it will contain reserved characters such as pipes and punctuation.)\n\nThe Azure Maps account S0 SKU only supports a single instance of the pins parameter. Other SKUs\nallow multiple instances of the pins parameter to specify multiple pin styles.\n\nTo render a pushpin at latitude 45°N and longitude 122°W using the default built-in pushpin style, add the\nquerystring parameter \n\n`pins=default||-122 45` \n\nNote that the longitude comes before the latitude.\nAfter URL encoding this will look like\n\n`pins=default%7C%7C-122+45`\n\nAll of the examples here show the pins\nparameter without URL encoding, for clarity.\n\nTo render a pin at multiple locations, separate each location with a pipe character. For example, use\n\n`pins=default||-122 45|-119.5 43.2|-121.67 47.12`\n\nThe S0 Azure Maps account SKU only allows five pushpins. Other account SKUs do not have this limitation.\n\n### Style Modifiers\n\nYou can modify the appearance of the pins by adding style modifiers. These are added after the style but before\nthe locations and labels. Style modifiers each have a two-letter name. These abbreviated names are used to help\nreduce the length of the URL.\n\nTo change the color of the pushpin, use the 'co' style modifier and specify the color using the HTML/CSS RGB color\nformat which is a six-digit hexadecimal number (the three-digit form is not supported). For example, to use\na deep pink color which you would specify as #FF1493 in CSS, use\n\n`pins=default|coFF1493||-122 45`\n\n### Pushpin Labels\n\nTo add a label to the pins, put the label in single quotes just before the coordinates. For example, to label\nthree pins with the values '1', '2', and '3', use\n\n`pins=default||'1'-122 45|'2'-119.5 43.2|'3'-121.67 47.12`\n\nThere is a built in pushpin style called 'none' that does not display a pushpin image. You can use this if\nyou want to display labels without any pin image. For example,\n\n`pins=none||'A'-122 45|'B'-119.5 43.2`\n\nTo change the color of the pushpin labels, use the 'lc' label color style modifier. For example, to use pink\npushpins with black labels, use\n\n`pins=default|coFF1493|lc000000||-122 45`\n\nTo change the size of the labels, use the 'ls' label size style modifier. The label size represents the approximate\nheight of the label text in pixels. For example, to increase the label size to 12, use\n\n`pins=default|ls12||'A'-122 45|'B'-119 43`\n\nThe labels are centered at the pushpin 'label anchor.' The anchor location is predefined for built-in pushpins and\nis at the top center of custom pushpins (see below). To override the label anchor, using the 'la' style modifier\nand provide X and Y pixel coordinates for the anchor. These coordinates are relative to the top left corner of the\npushpin image. Positive X values move the anchor to the right, and positive Y values move the anchor down. For example,\nto position the label anchor 10 pixels right and 4 pixels above the top left corner of the pushpin image,\nuse\n\n`pins=default|la10 -4||'A'-122 45|'B'-119 43`\n\n### Custom Pushpins\n\nTo use a custom pushpin image, use the word 'custom' as the pin style name, and then specify a URL after the\nlocation and label information. Use two pipe characters to indicate that you're done specifying locations and are\nstarting the URL. For example,\n\n`pins=custom||-122 45||http://contoso.com/pushpins/red.png`\n\nAfter URL encoding, this would look like\n\n`pins=custom%7C%7C-122+45%7C%7Chttp%3A%2F%2Fcontoso.com%2Fpushpins%2Fred.png`\n\nBy default, custom pushpin images are drawn centered at the pin coordinates. This usually isn't ideal as it obscures\nthe location that you're trying to highlight. To override the anchor location of the pin image, use the 'an'\nstyle modifier. This uses the same format as the 'la' label anchor style modifier. For example, if your custom\npin image has the tip of the pin at the top left corner of the image, you can set the anchor to that spot by\nusing\n\n`pins=custom|an0 0||-122 45||http://contoso.com/pushpins/red.png`\n\nNote: If you use the 'co' color modifier with a custom pushpin image, the specified color will replace the RGB \nchannels of the pixels in the image but will leave the alpha (opacity) channel unchanged. This would usually\nonly be done with a solid-color custom image.\n\n### Getting Pushpins from Azure Maps Data Storage\n\nFor all Azure Maps account SKUs other than S0,\nthe pushpin location information can be obtained from Azure Maps Data Storage. After uploading a GeoJSON document containing pin locations, the Data Storage service returns a Unique Data ID (UDID) that you can use\nto reference the data in the pins parameter.\n\nTo use the point geometry from an uploaded GeoJSON document as the pin locations, specify the UDID in the locations\nsection of the pins parameter. For example,\n\n`pins=default||udid-29dc105a-dee7-409f-a3f9-22b066ae4713`\n\nNote that\nonly point and multipoint geometry, points and multipoints from geometry collections, and point geometry from features\nwill be used. Linestring and polygon geometry will be ignored. If the point comes from a feature and the feature\nhas a string property called \"label\", the value of that property will be used as the label for the pin.\n\nYou can mix pin locations from Data Storage and pin locations specified in the pins parameter. Any of the pipe-delimited\npin locations can be a longitude and latitude or a UDID. For example,\n\n`pins=default||-122 45|udid-29dc105a-dee7-409f-a3f9-22b066ae4713|-119 43`\n\n### Scale, Rotation, and Opacity\n\nYou can make pushpins and their labels larger or smaller by using the 'sc' scale style modifier. This is a\nvalue greater than zero. A value of 1 is the standard scale. Values larger than 1 will make the pins larger, and\nvalues smaller than 1 will make them smaller. For example, to draw the pushpins 50% larger than normal, use\n\n`pins=default|sc1.5||-122 45`\n\nYou can rotate pushpins and their labels by using the 'ro' rotation style modifier. This is a number of degrees\nof clockwise rotation. Use a negative number to rotate counter-clockwise. For example, to rotate the pushpins\n90 degrees clockwise and double their size, use\n\n`pins=default|ro90|sc2||-122 45`\n\nYou can make pushpins and their labels partially transparent by specifying the 'al' alpha style modifier.\nThis is a number between 0 and 1 indicating the opacity of the pushpins. Zero makes them completely transparent\n(and not visible) and 1 makes them completely opaque (which is the default). For example, to make pushpins\nand their labels only 67% opaque, use\n\n`pins=default|al.67||-122 45`\n\n### Style Modifier Summary\n\nModifier  | Description     | Range            \n:--------:|-----------------|------------------\nal        | Alpha (opacity) | 0 to 1           \nan        | Pin anchor      | *                \nco        | Pin color       | 000000 to FFFFFF \nla        | Label anchor    | *                \nlc        | Label color     | 000000 to FFFFFF \nls        | Label size      | Greater than 0   \nro        | Rotation        | -360 to 360      \nsc        | Scale           | Greater than 0   \n\n* X and Y coordinates can be anywhere within pin image or a margin around it.\nThe margin size is the minimum of the pin width and height.",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "path",
            "description": "Path style and locations. Use this parameter to optionally add lines, polygons or circles to the image.\nThe path style describes the appearance of the line and fill. (Be sure to properly URL-encode values of this\nparameter since it will contain reserved characters such as pipes and punctuation.)\n\nPath parameter is supported in Azure Maps account SKU starting with S1. Multiple instances of the path parameter \nallow to specify multiple geometries with their styles. Number of parameters per request is limited to 10 and\nnumber of locations is limited to 100 per path.\n\nTo render a circle with radius 100 meters and center point at latitude 45°N and longitude 122°W using the default style, add the\nquerystring parameter \n\n`path=ra100||-122 45` \n\nNote that the longitude comes before the latitude.\nAfter URL encoding this will look like\n\n`path=ra100%7C%7C-122+45`\n\nAll of the examples here show the path parameter without URL encoding, for clarity.\n\nTo render a line, separate each location with a pipe character. For example, use\n\n`path=||-122 45|-119.5 43.2|-121.67 47.12`\n\nTo render a polygon, last location must be equal to the start location. For example, use\n\n`path=||-122 45|-119.5 43.2|-121.67 47.12|-122 45`\n\nLongitude and latitude values for locations of lines and polygons can be in the range from -360 to 360 to allow for rendering of geometries crossing the anti-meridian.\n\n### Style Modifiers\n\nYou can modify the appearance of the path by adding style modifiers. These are added before the locations. \nStyle modifiers each have a two-letter name. These abbreviated names are used to help reduce the length\nof the URL.\n\nTo change the color of the outline, use the 'lc' style modifier and specify the color using the HTML/CSS RGB color\nformat which is a six-digit hexadecimal number (the three-digit form is not supported). For example, to use\na deep pink color which you would specify as #FF1493 in CSS, use\n\n`path=lcFF1493||-122 45|-119.5 43.2`\n\nMultiple style modifiers may be combined together to create a more complex visual style.\n\n`lc0000FF|lw3|la0.60|fa0.50||-122.2 47.6|-122.2 47.7|-122.3 47.7|-122.3 47.6|-122.2 47.6`\n\n### Getting Path locations from Azure Maps Data Storage\n\nFor all Azure Maps account SKUs other than S0, the path location information can be obtained from Azure Maps Data Storage. \nAfter uploading a GeoJSON document containing path locations, the Data Storage service returns a Unique Data ID (UDID) that you can use\nto reference the data in the path parameter.\n\nTo use the point geometry from an uploaded GeoJSON document as the path locations, specify the UDID in the locations\nsection of the path parameter. For example,\n\n`path=||udid-29dc105a-dee7-409f-a3f9-22b066ae4713`\n\nNote the it is not allowed to mix path locations from Data Storage with locations specified in the path parameter. \n\n### Style Modifier Summary\n\nModifier  | Description            | Range            \n:--------:|------------------------|------------------\nlc        | Line color             | 000000 to FFFFFF\nfc        | Fill color             | 000000 to FFFFFF\nla        | Line alpha (opacity)   | 0 to 1           \nfa        | Fill alpha (opacity)   | 0 to 1           \nlw        | Line width             | Greater than 0            \nra        | Circle radius (meters) | Greater than 0",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "items": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json",
          "image/jpeg",
          "image/png",
          "image/pbf",
          "application/vnd.mapbox-vector-tile"
        ],
        "responses": {
          "200": {
            "description": "This image is returned from a successful Get Map Static Image call",
            "schema": {
              "type": "object",
              "format": "file",
              "readOnly": true
            },
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content-type for the response."
              }
            }
          },
          "default": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/default"
          }
        }
      }
    },
    "/map/copyright/bounding/{format}": {
      "get": {
        "description": "**Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).\n\nReturns copyright information for a given bounding box. Bounding-box requests should specify the minimum and maximum longitude and latitude (EPSG-3857) coordinates",
        "operationId": "RenderV2_GetCopyrightFromBoundingBox",
        "x-ms-examples": {
          "SuccessfulBoundingBoxCopyrightRequest": {
            "$ref": "./examples/SuccessfulBoundingBoxCopyrightRequest.json"
          }
        },
        "parameters": [
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/ClientId"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "$ref": "../1.0/render.json#/parameters/BoundingBoxSouthWest"
          },
          {
            "$ref": "../1.0/render.json#/parameters/BoundingBoxNorthEast"
          },
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/ResponseFormat"
          },
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/IncludeText"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "../1.0/render.json#/definitions/Copyright"
            }
          },
          "default": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/default"
          }
        }
      }
    },
    "/map/copyright/tile/{format}": {
      "get": {
        "description": "**Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).\n\nCopyrights API is designed to serve copyright information for Render Tile  service. In addition to basic copyright for the whole map, API is serving  specific groups of copyrights for some countries.\nReturns the copyright information for a given tile. To obtain the copyright information for a particular tile, the request should specify the tile's zoom level and x and y coordinates (see: Zoom Levels and Tile Grid).",
        "operationId": "RenderV2_GetCopyrightForTile",
        "x-ms-examples": {
          "Successful Tile Copyright Request": {
            "$ref": "./examples/SuccessfulTileCopyrightRequest.json"
          }
        },
        "parameters": [
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/ClientId"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/zTileIndex"
          },
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/xTileIndex"
          },
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/yTileIndex"
          },
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/ResponseFormat"
          },
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/IncludeText"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "../1.0/render.json#/definitions/Copyright"
            }
          },
          "default": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/default"
          }
        }
      }
    },
    "/map/copyright/world/{format}": {
      "get": {
        "description": "**Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).\n\nCopyrights API is designed to serve copyright information for Render Tile  service. In addition to basic copyright for the whole map, API is serving  specific groups of copyrights for some countries.\nReturns the copyright information for the world. To obtain the default copyright information for the whole world, do not specify a tile or bounding box.",
        "operationId": "RenderV2_GetCopyrightForWorld",
        "x-ms-examples": {
          "Successful World Copyright Request": {
            "$ref": "./examples/SuccessfulWorldCopyrightRequest.json"
          }
        },
        "parameters": [
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/ClientId"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/ResponseFormat"
          },
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/IncludeText"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "../1.0/render.json#/definitions/Copyright"
            }
          },
          "default": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/default"
          }
        }
      }
    }
  },
  "definitions": {
    "MapTileset": {
      "description": "Metadata for a tileset in the TileJSON format.",
      "type": "object",
      "readOnly": true,
      "properties": {
        "tilejson": {
          "type": "string",
          "pattern": "\\d+\\.\\d+\\.\\d+\\w?[\\w\\d]*",
          "description": "Describes the version of the TileJSON spec that is implemented by this JSON object."
        },
        "name": {
          "type": "string",
          "description": "A name describing the tileset. The name can contain any legal character. Implementations SHOULD NOT interpret the name as HTML."
        },
        "description": {
          "type": "string",
          "description": "Text description of the tileset. The description can contain any legal character. Implementations SHOULD NOT interpret the description as HTML."
        },
        "version": {
          "type": "string",
          "pattern": "\\d+\\.\\d+\\.\\d+\\w?[\\w\\d]*",
          "description": "A semver.org style version number for the tiles contained within the tileset. When changes across tiles are introduced, the minor version MUST change."
        },
        "attribution": {
          "type": "string",
          "description": "Copyright attribution to be displayed on the map. Implementations MAY decide to treat this as HTML or literal text. For security reasons, make absolutely sure that this field can't be abused as a vector for XSS or beacon tracking."
        },
        "template": {
          "type": "string",
          "description": "A mustache template to be used to format data from grids for interaction."
        },
        "legend": {
          "type": "string",
          "description": "A legend to be displayed with the map. Implementations MAY decide to treat this as HTML or literal text. For security reasons, make absolutely sure that this field can't be abused as a vector for XSS or beacon tracking."
        },
        "scheme": {
          "type": "string",
          "description": "Default: \"xyz\". Either \"xyz\" or \"tms\". Influences the y direction of the tile coordinates. The global-mercator (aka Spherical Mercator) profile is assumed."
        },
        "tiles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "An array of tile endpoints. If multiple endpoints are specified, clients may use any combination of endpoints. All endpoints MUST return the same content for the same URL. The array MUST contain at least one endpoint."
        },
        "grids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "An array of interactivity endpoints."
        },
        "data": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "An array of data files in GeoJSON format."
        },
        "minzoom": {
          "x-ms-client-name": "minZoom",
          "minimum": 0,
          "maximum": 30,
          "type": "integer",
          "description": "The minimum zoom level."
        },
        "maxzoom": {
          "x-ms-client-name": "maxZoom",
          "minimum": 0,
          "maximum": 30,
          "type": "integer",
          "description": "The maximum zoom level."
        },
        "bounds": {
          "type": "array",
          "items": {
            "type": "number"
          },
          "description": "The maximum extent of available map tiles. Bounds MUST define an area covered by all zoom levels. The bounds are represented in WGS:84 latitude and longitude values, in the order left, bottom, right, top. Values may be integers or floating point numbers."
        },
        "center": {
          "type": "array",
          "items": {
            "type": "number"
          },
          "description": "The default location of the tileset in the form [longitude, latitude, zoom]. The zoom level MUST be between minzoom and maxzoom. Implementations can use this value to set the default location."
        }
      }
    },
    "MapAttribution": {
      "description": "Copyright attribution for the requested section of a tileset.",
      "type": "object",
      "readOnly": true,
      "properties": {
        "copyrights": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of copyright strings."
        }
      }
    }
  }
}
