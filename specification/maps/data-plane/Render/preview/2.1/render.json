{
  "swagger": "2.0",
  "info": {
    "title": "Azure Maps Render Service",
    "version": "2.1",
    "description": "Azure Maps Render REST APIs"
  },
  "host": "atlas.microsoft.com",
  "schemes": [
    "https"
  ],
  "consumes": [],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "AADToken": {
      "type": "oauth2",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "flow": "implicit",
      "description": "These are the [Azure Active Directory OAuth2](https://docs.microsoft.com/en-us/azure/active-directory/develop/v1-overview)  Flows. When paired with [Azure role-based access](https://docs.microsoft.com/en-us/azure/role-based-access-control/overview)  control it can be used to control access to Azure Maps REST APIs. Azure role-based access controls are used to designate access to one or more Azure Maps resource account or sub-resources. Any user, group, or service principal can be granted access via a  built-in role or a custom role composed of one or more permissions to Azure Maps REST APIs.\n\nTo implement scenarios, we recommend viewing [authentication concepts](https://aka.ms/amauth). In summary, this security definition provides a solution  for modeling application(s) via objects capable of access control on specific APIs and scopes.\n\n#### Notes\n* This security definition **requires** the use of the `x-ms-client-id` header to indicate which Azure Maps resource the application is requesting access to.  This can be acquired from the [Maps management API](https://aka.ms/amauthdetails).\n* \nThe `Authorization URL` is specific to the Azure public cloud instance. Sovereign clouds have unique Authorization URLs and Azure Active directory configurations. \n* \nThe Azure role-based access control is configured from the [Azure management plane](https://aka.ms/amrbac) via Azure portal, PowerShell, CLI, Azure SDKs, or REST APIs.\n* \nUsage of the [Azure Maps Web SDK](https://aka.ms/amaadmc) allows for configuration based setup of an application for multiple use cases.\n* Currently, Azure Active Directory [v1.0](https://docs.microsoft.com/en-us/azure/active-directory/develop/azure-ad-endpoint-comparison) tokens are supported.",
      "scopes": {
        "https://atlas.microsoft.com/.default": "https://atlas.microsoft.com/.default"
      }
    },
    "AzureKey": {
      "type": "apiKey",
      "description": "This is a shared key that is provisioned when creating an [Azure Maps resource](https://aka.ms/amauth) through the Azure management plane  via Azure portal, PowerShell, CLI, Azure SDKs, or REST APIs.\n\n With this key, any application is authorized to access  all REST APIs. In other words, these can currently be treated as master keys to the account which they are issued for.\n\n For publicly exposed applications, our recommendation is to use server-to-server access of Azure Maps REST APIs where this key can be  securely stored.",
      "name": "subscription-key",
      "in": "header"
    }
  },
  "security": [
    {
      "AADToken": [
        "https://atlas.microsoft.com/.default"
      ]
    },
    {
      "AzureKey": []
    }
  ],
  "responses": {},
  "parameters": {
    "ApiVersion": {
      "name": "api-version",
      "description": "Version number of Azure Maps API. Current version is 2.1",
      "type": "string",
      "in": "query",
      "required": true,
      "default": "2.1",
      "x-ms-parameter-location": "client"
    }
  },
  "paths": {
    "/map/tile": {
      "get": {
        "description": "**Applies to**: S0 and S1 pricing tiers.\n\nThe Get Map Tiles API allows users to request map tiles in vector or raster formats typically to be integrated  into a map control or SDK. Some example tiles that can be requested are Azure Maps road tiles, real-time  Weather Radar tiles or the map tiles created using [Azure Maps Creator](https://aka.ms/amcreator). By default,  Azure Maps uses vector tiles for its web map control (Web SDK) and Android SDK.",
        "operationId": "GetMapTileV2",
        "x-ms-examples": {
          "GetMapTile": {
            "$ref": "./examples/GetMapTileV2.json"
          }
        },
        "parameters": [
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/ClientId"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "$ref": "../2.0/render.json#/parameters/TilesetId_rv2"
          },
          {
            "$ref": "../2.0/render.json#/parameters/MapTileV2Zoom"
          },
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/xTileIndex"
          },
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/yTileIndex"
          },
          {
            "name": "timeStamp",
            "in": "query",
            "format": "date-time",
            "description": "The desired date and time of the requested tile. This parameter must be specified in the standard date-time format (e.g. 2019-11-14T16:03:00-08:00), as defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601). This parameter is only supported when tilesetId parameter is set to one of the values below.\n  \n* microsoft.weather.infrared.main: We provide tiles up to 3 hours in the past. Tiles are available in 10-minute intervals. We round the timeStamp value to the nearest 10-minute time frame.\n* microsoft.weather.radar.main: We provide tiles up to 1.5 hours in the past and up to 2 hours in the future. Tiles are available in 5-minute intervals. We round the timeStamp value to the nearest 5-minute time frame.",
            "type": "string"
          },
          {
            "name": "tileSize",
            "in": "query",
            "description": "The size of the returned map tile in pixels.",
            "type": "string",
            "enum": [
              "256",
              "512"
            ],
            "x-ms-enum": {
              "name": "TileSize",
              "modelAsString": true,
              "values": [
                {
                  "value": "256",
                  "description": "Return a 256 by 256 pixel tile. Available for all tilesetIds except for\n* microsoft.terra.main"
                },
                {
                  "value": "512",
                  "description": "Return a 512 by 512 pixel tile.  Available for all tilesetIds except for \n* microsoft.weather.radar.main\n* microsoft.weather.infrared.main\n* microsoft.base.hybrid\n* microsoft.dem\n* microsoft.imagery"
                }
              ]
            }
          },
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/Language"
          },
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/View"
          }
        ],
        "produces": [
          "application/json",
          "image/jpeg",
          "image/png",
          "image/pbf",
          "application/vnd.mapbox-vector-tile"
        ],
        "responses": {
          "200": {
            "description": "The tile returned from a successful API call.",
            "schema": {
              "type": "object",
              "format": "file",
              "readOnly": true
            },
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content-type for the response."
              }
            }
          },
          "default": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/default"
          }
        }
      }
    },
    "/map/tileset": {
      "get": {
        "description": "**Applies to**: S0 and S1 pricing tiers.\n\nThe Get Map Tileset API allows users to request metadata for a tileset.",
        "operationId": "GetMapTileset",
        "x-ms-examples": {
          "GetMapTileset": {
            "$ref": "./examples/GetMapTilesetV2.json"
          }
        },
        "parameters": [
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/ClientId"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "$ref": "../2.0/render.json#/parameters/TilesetId_rv2"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MapTilesetResultV2"
            }
          },
          "default": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/default"
          }
        }
      }
    },
    "/map/attribution": {
      "get": {
        "description": "**Applies to**: S0 and S1 pricing tiers.\n\nThe Get Map Attribution API allows users to request map copyright attribution information for a section of a tileset.",
        "operationId": "GetMapAttribution",
        "x-ms-examples": {
          "GetMapAttribution": {
            "$ref": "./examples/GetMapAttributionV2.json"
          }
        },
        "parameters": [
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/ClientId"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "$ref": "../2.0/render.json#/parameters/TilesetId_rv2"
          },
          {
            "$ref": "../2.0/render.json#/parameters/MapTileV2Zoom"
          },
          {
            "name": "bounds",
            "in": "query",
            "description": "The string that represents the rectangular area of a bounding box. The bounds parameter is defined by the 4 bounding box coordinates, with WGS84 longitude and latitude of the southwest corner followed by  WGS84 longitude and latitude of the northeast corner. The string is presented in the following  format: `[SouthwestCorner_Longitude, SouthwestCorner_Latitude, NortheastCorner_Longitude,  NortheastCorner_Latitude]`.",
            "required": true,
            "type": "array",
            "collectionFormat": "csv",
            "items": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MapAttributionResultV2"
            }
          },
          "default": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/default"
          }
        }
      }
    }
  },
  "definitions": {
    "MapTileResultv2": {
      "description": "The tile returned from a successful API call.",
      "type": "object",
      "format": "file",
      "readOnly": true
    },
    "MapTilesetResultV2": {
      "description": "Metadata for a tileset in the TileJSON format.",
      "type": "object",
      "readOnly": true,
      "properties": {
        "tilejson": {
          "type": "string",
          "pattern": "\\d+\\.\\d+\\.\\d+\\w?[\\w\\d]*",
          "description": "Version of the TileJSON spec."
        },
        "name": {
          "type": "string",
          "description": "Name of the tileset."
        },
        "description": {
          "type": "string",
          "description": "Text description of the tileset."
        },
        "version": {
          "type": "string",
          "pattern": "\\d+\\.\\d+\\.\\d+\\w?[\\w\\d]*",
          "description": "A semver.org style version number for the tiles contained within the tileset."
        },
        "attribution": {
          "type": "string",
          "description": "Copyright attribution to be displayed on the map."
        },
        "template": {
          "type": "string",
          "description": "A mustache template to be used to format data from grids for interaction."
        },
        "legend": {
          "type": "string",
          "description": "A legend to be displayed with the map."
        },
        "scheme": {
          "type": "string",
          "description": "Default: \"xyz\". Either \"xyz\" or \"tms\". Influences the y direction of the tile coordinates."
        },
        "tiles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "An array of tile endpoints."
        },
        "grids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "An array of interactivity endpoints."
        },
        "data": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "An array of data files in GeoJSON format."
        },
        "minzoom": {
          "minimum": 0,
          "maximum": 30,
          "type": "integer",
          "description": "The minimum zoom level."
        },
        "maxzoom": {
          "minimum": 0,
          "maximum": 30,
          "type": "integer",
          "description": "The maximum zoom level."
        },
        "bounds": {
          "type": "array",
          "items": {
            "type": "number"
          },
          "description": "The WGS84 bounds of the tileset."
        },
        "center": {
          "type": "array",
          "items": {
            "type": "number"
          },
          "description": "The default location of the tileset in the form [longitude, latitude, zoom]."
        }
      }
    },
    "MapAttributionResultV2": {
      "description": "Copyright attribution for the requested section of a tileset.",
      "type": "object",
      "readOnly": true,
      "properties": {
        "copyrights": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of copyright strings."
        }
      }
    }
  }
}
