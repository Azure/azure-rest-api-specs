{
  "swagger": "2.0",
  "info": {
    "title": "Azure Maps Route Service",
    "version": "1.0",
    "description": "Azure Maps Route REST APIs"
  },
  "host": "atlas.microsoft.com",
  "schemes": [
    "https"
  ],
  "consumes": [],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "AADToken": {
      "type": "oauth2",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "flow": "implicit",
      "description": "These are the [Microsoft Entra OAuth 2.0](https://docs.microsoft.com/azure/active-directory/develop/v1-overview) Flows. When paired with [Azure role-based access](https://docs.microsoft.com/azure/role-based-access-control/overview) control it can be used to control access to Azure Maps REST APIs. Azure role-based access controls are used to designate access to one or more Azure Maps resource account or sub-resources. Any user, group, or service principal can be granted access via a  built-in role or a custom role composed of one or more permissions to Azure Maps REST APIs.\n\nTo implement scenarios, we recommend viewing [authentication concepts](https://aka.ms/amauth). In summary, this security definition provides a solution for modeling application(s) via objects capable of access control on specific APIs and scopes.\n\n#### Notes\n* This security definition **requires** the use of the `x-ms-client-id` header to indicate which Azure Maps resource the application is requesting access to. This can be acquired from the [Maps management API](https://aka.ms/amauthdetails).\n* \nThe `Authorization URL` is specific to the Azure public cloud instance. Sovereign clouds have unique Authorization URLs and Azure Active directory configurations. \n* \nThe Azure role-based access control is configured from the [Azure management plane](https://aka.ms/amrbac) via Azure portal, PowerShell, CLI, Azure SDKs, or REST APIs.\n* \nUsage of the [Azure Maps Web SDK](https://aka.ms/amaadmc) allows for configuration based setup of an application for multiple use cases.\n* For more information on Microsoft identity platform, see [Microsoft identity platform overview](https://learn.microsoft.com/entra/identity-platform/v2-overview).",
      "scopes": {
        "https://atlas.microsoft.com/.default": "https://atlas.microsoft.com/.default"
      }
    },
    "SharedKey": {
      "type": "apiKey",
      "description": "This is a shared key that is provisioned when you [Create an Azure Maps account](https://docs.microsoft.com/azure/azure-maps/quick-demo-map-app#create-an-azure-maps-account) in the Azure portal or using PowerShell, CLI, Azure SDKs, or REST API.\n\n With this key, any application can access all REST API. In other words, this key can be used as a master key in the account that they are issued in.\n\n For publicly exposed applications, our recommendation is to use the [confidential client applications](https://docs.microsoft.com/azure/azure-maps/authentication-best-practices#confidential-client-applications) approach to access Azure Maps REST APIs so your key can be securely stored.",
      "name": "subscription-key",
      "in": "query"
    },
    "SasToken": {
      "type": "apiKey",
      "description": "This is a shared access signature token is created from the List SAS operation on the [Azure Maps resource](https://aka.ms/amauth) through the Azure management plane via Azure portal, PowerShell, CLI, Azure SDKs, or REST APIs.\n\n With this token, any application is authorized to access with Azure role-based access controls and fine-grain control to the expiration, rate, and region(s) of use for the particular token. In other words, the SAS Token can be used to allow applications to control access in a more secured way than the shared key.\n\n For publicly exposed applications, our recommendation is to configure a specific list of allowed origins on the [Map account resource](https://aka.ms/amauth) to limit rendering abuse and regularly renew the SAS Token.",
      "name": "SAS Token",
      "in": "header"
    }
  },
  "security": [
    {
      "AADToken": [
        "https://atlas.microsoft.com/.default"
      ]
    },
    {
      "SharedKey": []
    },
    {
      "SasToken": []
    }
  ],
  "responses": {},
  "parameters": {
    "ApiVersion": {
      "name": "api-version",
      "description": "Version number of Azure Maps API.",
      "type": "string",
      "in": "query",
      "required": true,
      "default": "1.0",
      "x-ms-parameter-location": "client"
    },
    "VehicleLoadType": {
      "name": "vehicleLoadType",
      "in": "query",
      "description": "Types of cargo that may be classified as hazardous materials and restricted from some roads. Available vehicleLoadType values are US Hazmat classes 1 through 9, plus generic classifications for use in other countries/regions. Values beginning with USHazmat are for US routing while otherHazmat should be used for all other countries/regions. vehicleLoadType can be specified multiple times. This parameter is currently only considered for travelMode=truck.",
      "type": "string",
      "enum": [
        "USHazmatClass1",
        "USHazmatClass2",
        "USHazmatClass3",
        "USHazmatClass4",
        "USHazmatClass5",
        "USHazmatClass6",
        "USHazmatClass7",
        "USHazmatClass8",
        "USHazmatClass9",
        "otherHazmatExplosive",
        "otherHazmatGeneral",
        "otherHazmatHarmfulToWater"
      ],
      "x-ms-enum": {
        "name": "VehicleLoadType",
        "modelAsString": true,
        "values": [
          {
            "value": "USHazmatClass1",
            "description": "Explosives"
          },
          {
            "value": "USHazmatClass2",
            "description": "Compressed gas"
          },
          {
            "value": "USHazmatClass3",
            "description": "Flammable liquids"
          },
          {
            "value": "USHazmatClass4",
            "description": "Flammable solids"
          },
          {
            "value": "USHazmatClass5",
            "description": "Oxidizers"
          },
          {
            "value": "USHazmatClass6",
            "description": "Poisons"
          },
          {
            "value": "USHazmatClass7",
            "description": "Radioactive"
          },
          {
            "value": "USHazmatClass8",
            "description": "Corrosives"
          },
          {
            "value": "USHazmatClass9",
            "description": "Miscellaneous"
          },
          {
            "value": "otherHazmatExplosive",
            "description": "Explosives"
          },
          {
            "value": "otherHazmatGeneral",
            "description": "Miscellaneous"
          },
          {
            "value": "otherHazmatHarmfulToWater",
            "description": "Harmful to water"
          }
        ]
      },
      "x-ms-parameter-location": "method"
    },
    "RouteType": {
      "name": "routeType",
      "in": "query",
      "description": "The type of route requested.",
      "type": "string",
      "enum": [
        "fastest",
        "shortest",
        "eco",
        "thrilling"
      ],
      "x-ms-enum": {
        "name": "RouteType",
        "modelAsString": true,
        "values": [
          {
            "value": "fastest",
            "name": "Fastest",
            "description": "The fastest route."
          },
          {
            "value": "shortest",
            "name": "Shortest",
            "description": "The shortest route by distance."
          },
          {
            "value": "eco",
            "name": "Economy",
            "description": "A route balanced by economy and speed."
          },
          {
            "value": "thrilling",
            "name": "Thrilling",
            "description": "Includes interesting or challenging roads and uses as few motorways as possible. You can choose the level of turns included and also the degree of hilliness. See the hilliness and windingness parameters for how to set this. There is a limit of 900 km on routes planned with `routeType`=thrilling"
          }
        ]
      },
      "x-ms-parameter-location": "method"
    },
    "WindingnessLevel": {
      "name": "windingness",
      "in": "query",
      "description": "Level of turns for thrilling route. This parameter can only be used in conjunction with `routeType`=thrilling.",
      "type": "string",
      "enum": [
        "low",
        "normal",
        "high"
      ],
      "x-ms-enum": {
        "name": "WindingnessLevel",
        "modelAsString": true,
        "values": [
          {
            "value": "low",
            "description": "low"
          },
          {
            "value": "normal",
            "description": "normal"
          },
          {
            "value": "high",
            "description": "high"
          }
        ]
      },
      "x-ms-parameter-location": "method"
    },
    "InclineLevel": {
      "name": "hilliness",
      "x-ms-client-name": "inclineLevel",
      "in": "query",
      "description": "Degree of hilliness for thrilling route. This parameter can only be used in conjunction with `routeType`=thrilling.",
      "type": "string",
      "enum": [
        "low",
        "normal",
        "high"
      ],
      "x-ms-enum": {
        "name": "InclineLevel",
        "modelAsString": true,
        "values": [
          {
            "value": "low",
            "description": "low"
          },
          {
            "value": "normal",
            "description": "normal"
          },
          {
            "value": "high",
            "description": "high"
          }
        ]
      },
      "x-ms-parameter-location": "method"
    },
    "TravelMode": {
      "name": "travelMode",
      "in": "query",
      "description": "The mode of travel for the requested route. If not defined, default is 'car'. Note that the requested travelMode may not be available for the entire route. Where the requested travelMode is not available for a particular section, the travelMode element of the response for that section will be \"other\". Note that travel modes bus, motorcycle, taxi and van are BETA functionality. Full restriction data is not available in all areas. In **calculateReachableRange** requests, the values bicycle and pedestrian must not be used.",
      "type": "string",
      "enum": [
        "car",
        "truck",
        "taxi",
        "bus",
        "van",
        "motorcycle",
        "bicycle",
        "pedestrian"
      ],
      "x-ms-enum": {
        "name": "TravelMode",
        "modelAsString": true,
        "values": [
          {
            "value": "car",
            "description": "The returned routes are optimized for cars."
          },
          {
            "value": "truck",
            "description": "The returned routes are optimized for commercial vehicles, like for trucks."
          },
          {
            "value": "taxi",
            "description": "The returned routes are optimized for taxis. BETA functionality."
          },
          {
            "value": "bus",
            "description": "The returned routes are optimized for buses, including the use of bus only lanes. BETA functionality."
          },
          {
            "value": "van",
            "description": "The returned routes are optimized for vans. BETA functionality."
          },
          {
            "value": "motorcycle",
            "description": "The returned routes are optimized for motorcycles. BETA functionality."
          },
          {
            "value": "bicycle",
            "description": "The returned routes are optimized for bicycles, including use of bicycle lanes."
          },
          {
            "value": "pedestrian",
            "description": "The returned routes are optimized for pedestrians, including the use of sidewalks."
          }
        ]
      },
      "x-ms-parameter-location": "method"
    },
    "RouteAvoidList": {
      "name": "avoid",
      "in": "query",
      "description": "Specifies something that the route calculation should try to avoid when determining the route. Can be specified multiple times in one request, for example, '&avoid=motorways&avoid=tollRoads&avoid=ferries'. In calculateReachableRange requests, the value alreadyUsedRoads must not be used.",
      "type": "array",
      "collectionFormat": "multi",
      "items": {
        "type": "string",
        "enum": [
          "tollRoads",
          "motorways",
          "ferries",
          "unpavedRoads",
          "carpools",
          "alreadyUsedRoads",
          "borderCrossings"
        ],
        "x-ms-enum": {
          "name": "RouteAvoidType",
          "modelAsString": true,
          "values": [
            {
              "value": "tollRoads",
              "description": "Avoids toll roads."
            },
            {
              "value": "motorways",
              "description": "Avoids motorways"
            },
            {
              "value": "ferries",
              "description": "Avoids ferries"
            },
            {
              "value": "unpavedRoads",
              "description": "Avoids unpaved roads"
            },
            {
              "value": "carpools",
              "description": "Avoids routes that require the use of carpool (HOV/High Occupancy Vehicle) lanes."
            },
            {
              "value": "alreadyUsedRoads",
              "description": "Avoids using the same road multiple times. Most useful in conjunction with `routeType`=thrilling."
            },
            {
              "value": "borderCrossings",
              "description": "Avoids border crossings in route calculation."
            }
          ]
        }
      },
      "x-ms-parameter-location": "method"
    },
    "VehicleEngineType": {
      "name": "vehicleEngineType",
      "in": "query",
      "description": "Engine type of the vehicle. When a detailed Consumption Model is specified, it must be consistent with the value of **vehicleEngineType**.",
      "type": "string",
      "enum": [
        "combustion",
        "electric"
      ],
      "x-ms-enum": {
        "name": "VehicleEngineType",
        "modelAsString": true,
        "values": [
          {
            "value": "combustion",
            "description": "Internal combustion engine."
          },
          {
            "value": "electric",
            "description": "Electric engine."
          }
        ]
      },
      "x-ms-parameter-location": "method"
    },
    "ConstantSpeedConsumptionInLitersPerHundredkm": {
      "x-ms-client-name": "ConstantSpeedConsumptionInLitersPerHundredKm",
      "name": "constantSpeedConsumptionInLitersPerHundredkm",
      "in": "query",
      "description": "\n\nSpecifies the speed-dependent component of consumption.\n\nProvided as an unordered list of colon-delimited speed & consumption-rate pairs. The list defines points on a consumption curve. Consumption rates for speeds not in the list are found as follows:\n\n * by linear interpolation, if the given speed lies in between two speeds in the list\n\n * by linear extrapolation otherwise, assuming a constant (ΔConsumption/ΔSpeed) determined by the nearest two points in the list\n\nThe list must contain between 1 and 25 points (inclusive), and may not contain duplicate points for the same speed. If it only contains a single point, then the consumption rate of that point is used without further processing.\n\nConsumption specified for the largest speed must be greater than or equal to that of the penultimate largest speed. This ensures that extrapolation does not lead to negative consumption rates.\n\nSimilarly, consumption values specified for the two smallest speeds in the list cannot lead to a negative consumption rate for any smaller speed.\n\nThe valid range for the consumption values(expressed in l/100km) is between 0.01 and 100000.0.\n\nSensible Values : 50,6.3:130,11.5\n\n**Note** : This parameter is required for **The Combustion Consumption Model**.",
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "CurrentFuelInLiters": {
      "name": "currentFuelInLiters",
      "in": "query",
      "description": "Specifies the current supply of fuel in liters.\n\nSensible Values : 55",
      "type": "number",
      "format": "double",
      "x-ms-parameter-location": "method"
    },
    "AuxiliaryPowerInLitersPerHour": {
      "name": "auxiliaryPowerInLitersPerHour",
      "in": "query",
      "description": "Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour.\n\nIt can be used to specify consumption due to devices and systems such as AC systems, radio, heating, etc.\n\nSensible Values : 0.2",
      "type": "number",
      "format": "double",
      "x-ms-parameter-location": "method"
    },
    "FuelEnergyDensityInMJoulesPerLiter": {
      "x-ms-client-name": "FuelEnergyDensityInMegajoulesPerLiter",
      "name": "fuelEnergyDensityInMJoulesPerLiter",
      "in": "query",
      "description": "Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ). It is used in conjunction with the ***Efficiency** parameters for conversions between saved or consumed energy and fuel. For example, energy density is 34.2 MJ/l for gasoline, and 35.8 MJ/l for Diesel fuel.\n\nThis parameter is required if any ***Efficiency** parameter is set.\n\nSensible Values : 34.2",
      "type": "number",
      "format": "double",
      "x-ms-parameter-location": "method"
    },
    "AccelerationEfficiency": {
      "name": "accelerationEfficiency",
      "in": "query",
      "description": "Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates _(i.e. KineticEnergyGained/ChemicalEnergyConsumed). ChemicalEnergyConsumed_ is obtained by converting consumed fuel to chemical energy using **fuelEnergyDensityInMJoulesPerLiter**.\n\nMust be paired with **decelerationEfficiency**.\n\nThe range of values allowed are 0.0 to 1/**decelerationEfficiency**.\n\nSensible Values : for **Combustion Model** : 0.33, for **Electric Model** : 0.66",
      "type": "number",
      "format": "double",
      "minimum": 0,
      "maximum": 1,
      "x-ms-parameter-location": "method"
    },
    "DecelerationEfficiency": {
      "name": "decelerationEfficiency",
      "in": "query",
      "description": "Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates _(i.e. ChemicalEnergySaved/KineticEnergyLost). ChemicalEnergySaved_ is obtained by converting saved (not consumed) fuel to energy using **fuelEnergyDensityInMJoulesPerLiter**.\n\nMust be paired with **accelerationEfficiency**.\n\nThe range of values allowed are 0.0 to 1/**accelerationEfficiency**.\n\nSensible Values : for **Combustion Model** : 0.83, for **Electric Model** : 0.91",
      "type": "number",
      "format": "double",
      "minimum": 0,
      "maximum": 1,
      "x-ms-parameter-location": "method"
    },
    "UphillEfficiency": {
      "name": "uphillEfficiency",
      "in": "query",
      "description": "Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation _(i.e. PotentialEnergyGained/ChemicalEnergyConsumed). ChemicalEnergyConsumed_ is obtained by converting consumed fuel to chemical energy using **fuelEnergyDensityInMJoulesPerLiter**.\n\nMust be paired with **downhillEfficiency**.\n\nThe range of values allowed are 0.0 to 1/**downhillEfficiency**.\n\nSensible Values : for **Combustion Model** : 0.27, for **Electric Model** : 0.74",
      "type": "number",
      "format": "double",
      "minimum": 0,
      "maximum": 1,
      "x-ms-parameter-location": "method"
    },
    "DownhillEfficiency": {
      "name": "downhillEfficiency",
      "in": "query",
      "description": "Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation _(i.e. ChemicalEnergySaved/PotentialEnergyLost). ChemicalEnergySaved_ is obtained by converting saved (not consumed) fuel to energy using **fuelEnergyDensityInMJoulesPerLiter**.\n\nMust be paired with **uphillEfficiency**.\n\nThe range of values allowed are 0.0 to 1/**uphillEfficiency**.\n\nSensible Values : for **Combustion Model** : 0.51, for **Electric Model** : 0.73",
      "type": "number",
      "format": "double",
      "minimum": 0,
      "maximum": 1,
      "x-ms-parameter-location": "method"
    },
    "ConstantSpeedConsumptionInkWhPerHundredkm": {
      "name": "constantSpeedConsumptionInkWhPerHundredkm",
      "x-ms-client-name": "ConstantSpeedConsumptionInKwHPerHundredKm",
      "in": "query",
      "description": "Specifies the speed-dependent component of consumption.\n\nProvided as an unordered list of speed/consumption-rate pairs. The list defines points on a consumption curve. Consumption rates for speeds not in the list are found as follows:\n\n* by linear interpolation, if the given speed lies in between two speeds in the list\n\n* by linear extrapolation otherwise, assuming a constant (ΔConsumption/ΔSpeed) determined by the nearest two points in the list\n\nThe list must contain between 1 and 25 points (inclusive), and may not contain duplicate points for the same speed. If it only contains a single point, then the consumption rate of that point is used without further processing.\n\nConsumption specified for the largest speed must be greater than or equal to that of the penultimate largest speed. This ensures that extrapolation does not lead to negative consumption rates.\n\nSimilarly, consumption values specified for the two smallest speeds in the list cannot lead to a negative consumption rate for any smaller  speed.\n\nThe valid range for the consumption values(expressed in kWh/100km) is between 0.01 and 100000.0.\n\nSensible Values : 50,8.2:130,21.3\n\nThis parameter is required for **Electric consumption model**.",
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "CurrentChargeInkWh": {
      "name": "currentChargeInkWh",
      "x-ms-client-name": "CurrentChargeInKwH",
      "in": "query",
      "description": "Specifies the current electric energy supply in kilowatt hours (kWh).\n\nThis parameter co-exists with **maxChargeInkWh** parameter.\n\nThe range of values allowed are 0.0 to **maxChargeInkWh**.\n\nSensible Values : 43",
      "type": "number",
      "format": "double",
      "x-ms-parameter-location": "method"
    },
    "MaxChargeInkWh": {
      "name": "maxChargeInkWh",
      "x-ms-client-name": "MaxChargeInKwH",
      "in": "query",
      "description": "Specifies the maximum electric energy supply in kilowatt hours (kWh) that may be stored in the vehicle's battery.\n\nThis parameter co-exists with **currentChargeInkWh** parameter.\n\nMinimum value has to be greater than or equal to **currentChargeInkWh**.\n\nSensible Values : 85",
      "type": "number",
      "format": "double",
      "x-ms-parameter-location": "method"
    },
    "AuxiliaryPowerInkW": {
      "name": "auxiliaryPowerInkW",
      "x-ms-client-name": "AuxiliaryPowerInKw",
      "in": "query",
      "description": "Specifies the amount of power consumed for sustaining auxiliary systems, in kilowatts (kW).\n\nIt can be used to specify consumption due to devices and systems such as AC systems, radio, heating, etc.\n\nSensible Values : 1.7",
      "type": "number",
      "format": "double",
      "x-ms-parameter-location": "method"
    },
    "VehicleWeightMatrix": {
      "name": "vehicleWeight",
      "in": "query",
      "description": "Weight of the vehicle in kilograms.",
      "type": "integer",
      "default": 0,
      "x-ms-parameter-location": "method"
    },
    "VehicleWeight": {
      "name": "vehicleWeight",
      "in": "query",
      "description": "Weight of the vehicle in kilograms.\n\n* It is mandatory if any of the *Efficiency parameters are set.\n\n* It must be strictly positive when used in the context of the Consumption Model. Weight restrictions are considered.\n\n* If no detailed **Consumption Model** is specified and the value of **vehicleWeight** is non-zero, then weight restrictions are considered.\n\n* In all other cases, this parameter is ignored.\n\nSensible Values : for **Combustion Model** : 1600, for **Electric Model** : 1900",
      "type": "integer",
      "default": 0,
      "x-ms-parameter-location": "method"
    },
    "VehicleMaxSpeed": {
      "name": "vehicleMaxSpeed",
      "in": "query",
      "description": "Maximum speed of the vehicle in km/hour. The max speed in the vehicle profile is used to check whether a vehicle is allowed on motorways. \n\n* A value of 0 means that an appropriate value for the vehicle will be determined and applied during route planning.\n\n* A non-zero value may be overridden during route planning. For example, the current traffic flow is 60 km/hour. If the vehicle  maximum speed is set to 50 km/hour, the routing engine will consider 60 km/hour as this is the current situation.  If the maximum speed of the vehicle is provided as 80 km/hour but the current traffic flow is 60 km/hour, then routing engine will again use 60 km/hour.",
      "type": "integer",
      "default": 0,
      "x-ms-parameter-location": "method"
    },
    "VehicleLength": {
      "name": "vehicleLength",
      "in": "query",
      "description": "Length of the vehicle in meters. A value of 0 means that length restrictions are not considered.",
      "type": "number",
      "format": "double",
      "default": 0,
      "x-ms-parameter-location": "method"
    },
    "VehicleHeight": {
      "name": "vehicleHeight",
      "in": "query",
      "description": "Height of the vehicle in meters. A value of 0 means that height restrictions are not considered.",
      "type": "number",
      "format": "double",
      "default": 0,
      "x-ms-parameter-location": "method"
    },
    "VehicleWidth": {
      "name": "vehicleWidth",
      "in": "query",
      "description": "Width of the vehicle in meters. A value of 0 means that width restrictions are not considered.",
      "type": "number",
      "format": "double",
      "default": 0,
      "x-ms-parameter-location": "method"
    },
    "VehicleAxleWeight": {
      "name": "vehicleAxleWeight",
      "in": "query",
      "description": "Weight per axle of the vehicle in kg. A value of 0 means that weight restrictions per axle are not considered.",
      "type": "integer",
      "default": 0,
      "x-ms-parameter-location": "method"
    },
    "VehicleCommercial": {
      "name": "vehicleCommercial",
      "x-ms-client-name": "isCommercialVehicle",
      "in": "query",
      "description": "Whether the vehicle is used for commercial purposes. Commercial vehicles may not be allowed to drive on some roads.",
      "type": "boolean",
      "default": false,
      "x-ms-parameter-location": "method"
    },
    "DepartAt": {
      "name": "departAt",
      "in": "query",
      "description": "The date and time of departure from the origin point. Departure times apart from now must be specified as a dateTime. When a time zone offset is not specified, it will be assumed to be that of the origin point. The departAt value must be in the future in the date-time format (1996-12-19T16:39:57-08:00).",
      "type": "string",
      "format": "date-time",
      "x-ms-parameter-location": "method"
    },
    "ArriveAt": {
      "name": "arriveAt",
      "in": "query",
      "description": "The date and time of arrival at the destination point. It must be specified as a dateTime. When a time zone offset is not specified it will be assumed to be that of the destination point. The arriveAt value must be in the future. The arriveAt parameter cannot be used in conjunction with departAt, minDeviationDistance or minDeviationTime.",
      "type": "string",
      "format": "date-time",
      "x-ms-parameter-location": "method"
    },
    "SectionType": {
      "name": "sectionType",
      "x-ms-client-name": "FilterSectionType",
      "in": "query",
      "description": "Specifies which of the section types is reported in the route response. <br><br>For example if sectionType = pedestrian the sections which are suited for pedestrians only are returned. Multiple types can be used. The default sectionType refers to the travelMode input. By default travelMode is set to car",
      "type": "string",
      "enum": [
        "carTrain",
        "country",
        "ferry",
        "motorway",
        "pedestrian",
        "tollRoad",
        "tollVignette",
        "traffic",
        "travelMode",
        "tunnel",
        "carpool",
        "urban"
      ],
      "x-ms-enum": {
        "name": "SectionType",
        "modelAsString": true,
        "values": [
          {
            "value": "carTrain",
            "name": "CarOrTrain",
            "description": "Sections of the route that are cars or trains."
          },
          {
            "value": "country",
            "name": "Country",
            "description": "Sections indicating which countries/regions the route is in."
          },
          {
            "value": "ferry",
            "name": "Ferry",
            "description": "Sections of the route that are ferries."
          },
          {
            "value": "motorway",
            "name": "Motorway",
            "description": "Sections of the route that are motorways."
          },
          {
            "value": "pedestrian",
            "name": "Pedestrian",
            "description": "Sections of the route that are only suited for pedestrians."
          },
          {
            "value": "tollRoad",
            "name": "TollRoad",
            "description": "Sections of the route that require a toll to be payed."
          },
          {
            "value": "tollVignette",
            "name": "TollVignette",
            "description": "Sections of the route that require a toll vignette to be present."
          },
          {
            "value": "traffic",
            "name": "Traffic",
            "description": "Sections of the route that contain traffic information."
          },
          {
            "value": "travelMode",
            "name": "TravelMode",
            "description": "Sections in relation to the request parameter `travelMode`."
          },
          {
            "value": "tunnel",
            "name": "Tunnel",
            "description": "Sections of the route that are tunnels."
          },
          {
            "value": "carpool",
            "name": "Carpool",
            "description": "Sections of the route that require use of carpool (HOV/High Occupancy Vehicle) lanes."
          },
          {
            "value": "urban",
            "name": "Urban",
            "description": "Sections of the route that are located within urban areas."
          }
        ]
      },
      "x-ms-parameter-location": "method"
    },
    "ComputeBestOrder": {
      "name": "computeBestOrder",
      "x-ms-client-name": "computeBestWaypointOrder",
      "in": "query",
      "description": "Re-order the route waypoints using a fast heuristic algorithm to reduce the route length. Yields best results when used in conjunction with routeType _shortest_. Notice that origin and destination are excluded from the optimized waypoint indices. To include origin and destination in the response, please increase all the indices by 1 to account for the origin, and then add the destination as the final index. Possible values are true or false. True computes a better order if possible, but is not allowed to be used in conjunction with maxAlternatives value greater than 0 or in conjunction with circle waypoints. False will use the locations in the given order and not allowed to be used in conjunction with routeRepresentation _none_.",
      "type": "boolean",
      "x-ms-parameter-location": "method"
    },
    "RouteRepresentationForBestOrder": {
      "name": "routeRepresentation",
      "x-ms-client-name": "routeRepresentationForBestOrder",
      "in": "query",
      "description": "Specifies the representation of the set of routes provided as response. This parameter value can only be used in conjunction with computeBestOrder=true.",
      "type": "string",
      "enum": [
        "polyline",
        "summaryOnly",
        "none"
      ],
      "x-ms-enum": {
        "name": "RouteRepresentationForBestOrder",
        "modelAsString": true,
        "values": [
          {
            "value": "polyline",
            "description": "Includes route geometry in the response."
          },
          {
            "value": "summaryOnly",
            "description": "Summary as per polyline but excluding the point geometry elements for the routes in the response."
          },
          {
            "value": "none",
            "description": "Includes only the optimized waypoint indices but does not include the route geometry in the response."
          }
        ]
      },
      "x-ms-parameter-location": "method"
    },
    "ComputeTravelTime": {
      "name": "computeTravelTimeFor",
      "x-ms-client-name": "computeTravelTime",
      "in": "query",
      "description": "Specifies whether to return additional travel times using different types of traffic information (none, historic, live) as well as the default best-estimate travel time.",
      "type": "string",
      "enum": [
        "none",
        "all"
      ],
      "x-ms-enum": {
        "name": "ComputeTravelTime",
        "modelAsString": true,
        "values": [
          {
            "value": "none",
            "description": "Does not compute additional travel times."
          },
          {
            "value": "all",
            "description": "Computes travel times for all types of traffic information and specifies all results in the fields noTrafficTravelTimeInSeconds, historicTrafficTravelTimeInSeconds and liveTrafficIncidentsTravelTimeInSeconds being included in the summaries in the route response."
          }
        ]
      },
      "x-ms-parameter-location": "method"
    },
    "VehicleHeading": {
      "name": "vehicleHeading",
      "in": "query",
      "description": "The directional heading of the vehicle in degrees starting at true North and continuing in clockwise direction. North is 0 degrees, east is 90 degrees, south is 180 degrees, west is 270 degrees. Possible values 0-359",
      "type": "integer",
      "minimum": 0,
      "maximum": 359,
      "x-ms-parameter-location": "method"
    },
    "Report": {
      "name": "report",
      "in": "query",
      "description": "Specifies which data should be reported for diagnosis purposes. The only possible value is _effectiveSettings_. Reports the effective parameters or data used when calling the API. In the case of defaulted parameters the default will be reflected where the parameter was not specified by the caller.",
      "type": "string",
      "x-ms-parameter-location": "method",
      "enum": [
        "effectiveSettings"
      ],
      "x-ms-enum": {
        "name": "Report",
        "modelAsString": true,
        "values": [
          {
            "value": "effectiveSettings",
            "description": "Reports the effective parameters or data used when calling the API."
          }
        ]
      }
    },
    "Traffic": {
      "name": "traffic",
      "x-ms-client-name": "useTrafficData",
      "in": "query",
      "description": "Possible values: \n  * true - Do consider all available traffic information during routing\n  * false - Ignore current traffic data during routing. Note that although the current traffic data is ignored \n  during routing, the effect of historic traffic on effective road speeds is still incorporated.",
      "type": "boolean",
      "x-ms-parameter-location": "method"
    },
    "AlternativeRouteType": {
      "name": "alternativeType",
      "in": "query",
      "description": "Controls the optimality, with respect to the given planning criteria, of the calculated alternatives compared to the reference route.",
      "type": "string",
      "enum": [
        "anyRoute",
        "betterRoute"
      ],
      "x-ms-enum": {
        "name": "AlternativeRouteType",
        "modelAsString": true,
        "values": [
          {
            "value": "anyRoute",
            "description": "Allow any alternative route to be returned irrespective of how it compares to the reference route in terms of optimality."
          },
          {
            "value": "betterRoute",
            "description": "Return an alternative route only if it is better than the reference route according to the given planning criteria."
          }
        ]
      },
      "x-ms-parameter-location": "method"
    },
    "RouteInstructionsType": {
      "name": "instructionsType",
      "in": "query",
      "description": "If specified, guidance instructions will be returned. Note that the instructionsType parameter cannot be used in conjunction with routeRepresentation=none",
      "type": "string",
      "enum": [
        "coded",
        "text",
        "tagged"
      ],
      "x-ms-enum": {
        "name": "RouteInstructionsType",
        "modelAsString": true,
        "values": [
          {
            "value": "coded",
            "description": "Returns raw instruction data without human-readable messages."
          },
          {
            "value": "text",
            "description": "Returns raw instructions data with human-readable messages in plain text."
          },
          {
            "value": "tagged",
            "description": "Returns raw instruction data with tagged human-readable messages to permit formatting. A human-readable message is built up from repeatable identified elements. These are tagged to allow client applications to format them correctly. The following message components are tagged when instructionsType=tagged: street, roadNumber, signpostText, exitNumber, roundaboutExitNumber.\n\nExample of tagged 'Turn left' message:​\n\n```\nTurn left onto <roadNumber>A4</roadNumber>/<roadNumber>E19</roadNumber>\ntowards <signpostText>Den Haag</signpostText>\n```"
          }
        ]
      },
      "x-ms-parameter-location": "method"
    },
    "MatrixId": {
      "name": "format",
      "x-ms-client-name": "matrixId",
      "description": "Matrix id received after the Matrix Route request was accepted successfully.",
      "type": "string",
      "in": "path",
      "required": true,
      "x-ms-parameter-location": "method"
    },
    "BatchId": {
      "name": "format",
      "x-ms-client-name": "batchId",
      "description": "Batch id for querying the operation.",
      "type": "string",
      "in": "path",
      "required": true,
      "x-ms-parameter-location": "method"
    },
    "Query": {
      "name": "query",
      "x-ms-client-name": "routePoints",
      "in": "query",
      "description": "The Coordinates through which the route is calculated, delimited by a colon.  A minimum of two coordinates is required.  The first one is the origin and the last is the destination of the route. Optional coordinates in-between act as WayPoints in the route.  You can pass up to 150 WayPoints.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    }
  },
  "paths": {
    "/route/matrix/{format}": {
      "post": {
        "description": "\n\n**Applies to**: see pricing [tiers](https://aka.ms/AzureMapsPricingTier).\n\nThe Matrix Routing service allows calculation of a matrix of route summaries for a set of routes defined by origin and destination locations by using an asynchronous (async) or synchronous (sync) POST request. For every given origin, the service calculates the cost of routing from that origin to every given destination. The set of origins and the set of destinations can be thought of as the column and row headers of a table and each cell in the table contains the costs of routing from the origin to the destination for that cell. As an example, let's say a food delivery company has 20 drivers and they need to find the closest driver to pick up the delivery from the restaurant. To solve this use case, they can call Matrix Route API.\n\n\nFor each route, the travel times and distances are returned. You can use the computed costs to determine which detailed routes to calculate using the Route Directions API.\n\n\nThe maximum size of a matrix for async request is **700** and for sync request it's **100** (the number of origins multiplied by the number of destinations).\n\n\n\n### Submit Synchronous Route Matrix Request\nIf your scenario requires synchronous requests and the maximum size of the matrix is less than or equal to 100, you might want to make synchronous request. The maximum size of a matrix for this API is **100** (the number of origins multiplied by the number of destinations). With that constraint in mind, examples of possible matrix dimensions are: 10x10, 6x8, 9x8 (it does not need to be square).\n\n```\nPOST https://atlas.microsoft.com/route/matrix/sync/json?api-version=1.0&subscription-key={subscription-key}\n```\n\n### Submit Asynchronous Route Matrix Request\nThe Asynchronous API is appropriate for processing big volumes of relatively complex routing requests. When you make a request by using async request, by default the service returns a 202 response code along a redirect URL in the Location field of the response header. This URL should be checked periodically until the response data or error information is available. If `waitForResults` parameter in the request is set to true, user will get a 200 response if the request is finished under 120 seconds.\n\n\nThe maximum size of a matrix for this API is **700** (the number of origins multiplied by the number of destinations). With that constraint in mind, examples of possible matrix dimensions are: 50x10, 10x10, 28x25. 10x70 (it does not need to be square).\n\n\nThe asynchronous responses are stored for **14** days. The redirect URL returns a 404 response if used after the expiration period.\n\n\n\n\n```\nPOST https://atlas.microsoft.com/route/matrix/json?api-version=1.0&subscription-key={subscription-key}\n```\n\nHere's a typical sequence of asynchronous operations:\n1. Client sends a Route Matrix POST request to Azure Maps\n\n2. The server will respond with one of the following:\n\n    > HTTP `202 Accepted` -  Route Matrix request has been accepted.\n\n    > HTTP `Error` - There was an error processing your Route Matrix request. This could either be a 400 Bad Request or any other Error status code.\n\n\n3. If the Matrix Route request was accepted successfully, the Location header in the response contains the URL to download the results of the request. This status URI looks like the following:\n\n  ```\n    GET https://atlas.microsoft.com/route/matrix/{matrixId}?api-version=1.0?subscription-key={subscription-key}\n  ```\n\n\n4. Client issues a GET request on the download URL obtained in Step 3 to download the results\n\n### Download Sync Results\nWhen you make a POST request for Route Matrix Sync API, the service returns 200 response code for successful request and a response array. The response body will contain the data and there will be no possibility to retrieve the results later.\n\n### Download Async Results\nWhen a request issues a `202 Accepted` response, the request is being processed using our async pipeline. You will be given a URL to check the progress of your  async request in the location header of the response. This status URI looks like the following:\n```\n  GET https://atlas.microsoft.com/route/matrix/{matrixId}?api-version=1.0?subscription-key={subscription-key}\n```\n\nThe URL provided by the location header will return the following responses when a `GET` request is issued.\n\n  > HTTP `202 Accepted` - Matrix request was accepted but is still being processed. Please try again in some time.\n\n  > HTTP `200 OK` - Matrix request successfully processed. The response body contains all of the results.",
        "operationId": "Route_PostRouteMatrix",
        "x-ms-client-name": "RequestRouteMatrix",
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-examples": {
          "Successfully submit a route matrix request": {
            "$ref": "./examples/PostRouteMatrix.json"
          }
        },
        "parameters": [
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/ClientId"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/JsonFormat"
          },
          {
            "name": "waitForResults",
            "in": "query",
            "description": "Boolean to indicate whether to execute the request synchronously. If set to true, user will get a 200 response if the request is finished under 120 seconds. Otherwise, user will get a 202 response right away. Please refer to the API description for more details on 202 response. **Supported only for async request**.",
            "type": "boolean"
          },
          {
            "$ref": "#/parameters/ComputeTravelTime"
          },
          {
            "$ref": "#/parameters/SectionType"
          },
          {
            "$ref": "#/parameters/ArriveAt"
          },
          {
            "$ref": "#/parameters/DepartAt"
          },
          {
            "$ref": "#/parameters/VehicleAxleWeight"
          },
          {
            "$ref": "#/parameters/VehicleLength"
          },
          {
            "$ref": "#/parameters/VehicleHeight"
          },
          {
            "$ref": "#/parameters/VehicleWidth"
          },
          {
            "$ref": "#/parameters/VehicleMaxSpeed"
          },
          {
            "$ref": "#/parameters/VehicleWeightMatrix"
          },
          {
            "$ref": "#/parameters/WindingnessLevel"
          },
          {
            "$ref": "#/parameters/InclineLevel"
          },
          {
            "$ref": "#/parameters/TravelMode"
          },
          {
            "$ref": "#/parameters/RouteAvoidList"
          },
          {
            "$ref": "#/parameters/Traffic"
          },
          {
            "$ref": "#/parameters/RouteType"
          },
          {
            "$ref": "#/parameters/VehicleLoadType"
          },
          {
            "name": "routeMatrixQuery",
            "description": "The matrix of origin and destination coordinates to compute the route distance, travel time and other summary for each cell of the matrix based on the input parameters. The minimum and the maximum cell count supported are 1 and **700** for async and **100** for sync respectively. For example, it can be 35 origins and 20 destinations or 25 origins and 25 destinations for async API.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RouteMatrixQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Matrix request successfully processed. The response body contains all of the results.",
            "schema": {
              "$ref": "#/definitions/RouteMatrixResult"
            }
          },
          "202": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/202Async"
          },
          "default": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/default"
          }
        }
      },
      "get": {
        "description": "**Applies to**: see pricing [tiers](https://aka.ms/AzureMapsPricingTier).\n\nIf the Matrix Route request was accepted successfully, the Location header in the response contains the URL to download the results of the request. This status URI looks like the following:\n\n  ```\n    GET https://atlas.microsoft.com/route/matrix/{matrixId}?api-version=1.0?subscription-key={subscription-key}\n  ```\n\n\n4. Client issues a GET request on the download URL obtained in Step 3 to download the results\n\n### Download Sync Results\nWhen you make a POST request for Route Matrix Sync API, the service returns 200 response code for successful request and a response array. The response body will contain the data and there will be no possibility to retrieve the results later.\n\n### Download Async Results\nWhen a request issues a `202 Accepted` response, the request is being processed using our async pipeline. You will be given a URL to check the progress of your  async request in the location header of the response. This status URI looks like the following:\n```\n  GET https://atlas.microsoft.com/route/matrix/{matrixId}?api-version=1.0?subscription-key={subscription-key}\n```\n\nThe URL provided by the location header will return the following responses when a `GET` request is issued.\n\n  > HTTP `202 Accepted` - Matrix request was accepted but is still being processed. Please try again in some time.\n\n  > HTTP `200 OK` - Matrix request successfully processed. The response body contains all of the results.",
        "operationId": "Route_GetRouteMatrix",
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "original-uri"
        },
        "x-ms-examples": {
          "Successfully retrieve the status for a route matrix request": {
            "$ref": "./examples/GetRouteMatrix.json"
          }
        },
        "parameters": [
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/ClientId"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "$ref": "#/parameters/MatrixId"
          }
        ],
        "responses": {
          "200": {
            "description": "Matrix request successfully processed. The response body contains all of the results.",
            "schema": {
              "$ref": "#/definitions/RouteMatrixResult"
            }
          },
          "202": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/202Async"
          },
          "default": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/default"
          }
        }
      }
    },
    "/route/matrix/sync/{format}": {
      "post": {
        "description": "\n\n**Applies to**: see pricing [tiers](https://aka.ms/AzureMapsPricingTier).\n\nThe Matrix Routing service allows calculation of a matrix of route summaries for a set of routes defined by origin and destination locations by using an asynchronous (async) or synchronous (sync) POST request. For every given origin, the service calculates the cost of routing from that origin to every given destination. The set of origins and the set of destinations can be thought of as the column and row headers of a table and each cell in the table contains the costs of routing from the origin to the destination for that cell. As an example, let's say a food delivery company has 20 drivers and they need to find the closest driver to pick up the delivery from the restaurant. To solve this use case, they can call Matrix Route API.\n\n\nFor each route, the travel times and distances are returned. You can use the computed costs to determine which detailed routes to calculate using the Route Directions API.\n\n\nThe maximum size of a matrix for async request is **700** and for sync request it's **100** (the number of origins multiplied by the number of destinations).\n\n\n\n### Submit Synchronous Route Matrix Request\nIf your scenario requires synchronous requests and the maximum size of the matrix is less than or equal to 100, you might want to make synchronous request. The maximum size of a matrix for this API is **100** (the number of origins multiplied by the number of destinations). With that constraint in mind, examples of possible matrix dimensions are: 10x10, 6x8, 9x8 (it does not need to be square).\n\n```\nPOST https://atlas.microsoft.com/route/matrix/sync/json?api-version=1.0&subscription-key={subscription-key}\n```\n\n### Submit Asynchronous Route Matrix Request\nThe Asynchronous API is appropriate for processing big volumes of relatively complex routing requests. When you make a request by using async request, by default the service returns a 202 response code along a redirect URL in the Location field of the response header. This URL should be checked periodically until the response data or error information is available. If `waitForResults` parameter in the request is set to true, user will get a 200 response if the request is finished under 120 seconds.\n\n\nThe maximum size of a matrix for this API is **700** (the number of origins multiplied by the number of destinations). With that constraint in mind, examples of possible matrix dimensions are: 50x10, 10x10, 28x25. 10x70 (it does not need to be square).\n\n\nThe asynchronous responses are stored for **14** days. The redirect URL returns a 404 response if used after the expiration period.\n\n\n\n\n```\nPOST https://atlas.microsoft.com/route/matrix/json?api-version=1.0&subscription-key={subscription-key}\n```\n\nHere's a typical sequence of asynchronous operations:\n1. Client sends a Route Matrix POST request to Azure Maps\n\n2. The server will respond with one of the following:\n\n    > HTTP `202 Accepted` -  Route Matrix request has been accepted.\n\n    > HTTP `Error` - There was an error processing your Route Matrix request. This could either be a 400 Bad Request or any other Error status code.\n\n\n3. If the Matrix Route request was accepted successfully, the Location header in the response contains the URL to download the results of the request. This status URI looks like the following:\n\n  ```\n    GET https://atlas.microsoft.com/route/matrix/{matrixId}?api-version=1.0?subscription-key={subscription-key}\n  ```\n\n\n4. Client issues a GET request on the download URL obtained in Step 3 to download the results\n\n### Download Sync Results\nWhen you make a POST request for Route Matrix Sync API, the service returns 200 response code for successful request and a response array. The response body will contain the data and there will be no possibility to retrieve the results later.\n\n### Download Async Results\nWhen a request issues a `202 Accepted` response, the request is being processed using our async pipeline. You will be given a URL to check the progress of your  async request in the location header of the response. This status URI looks like the following:\n```\n  GET https://atlas.microsoft.com/route/matrix/{matrixId}?api-version=1.0?subscription-key={subscription-key}\n```\n\nThe URL provided by the location header will return the following responses when a `GET` request is issued.\n\n  > HTTP `202 Accepted` - Matrix request was accepted but is still being processed. Please try again in some time.\n\n  > HTTP `200 OK` - Matrix request successfully processed. The response body contains all of the results.",
        "operationId": "Route_PostRouteMatrixSync",
        "x-ms-client-name": "RequestRouteMatrixSync",
        "x-ms-examples": {
          "Successfully retrieve a route matrix request result synchronously": {
            "$ref": "./examples/PostRouteMatrixSync.json"
          }
        },
        "parameters": [
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/ClientId"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/JsonFormat"
          },
          {
            "name": "waitForResults",
            "in": "query",
            "description": "Boolean to indicate whether to execute the request synchronously. If set to true, user will get a 200 response if the request is finished under 120 seconds. Otherwise, user will get a 202 response right away. Please refer to the API description for more details on 202 response. **Supported only for async request**.",
            "type": "boolean"
          },
          {
            "$ref": "#/parameters/ComputeTravelTime"
          },
          {
            "$ref": "#/parameters/SectionType"
          },
          {
            "$ref": "#/parameters/ArriveAt"
          },
          {
            "$ref": "#/parameters/DepartAt"
          },
          {
            "$ref": "#/parameters/VehicleAxleWeight"
          },
          {
            "$ref": "#/parameters/VehicleLength"
          },
          {
            "$ref": "#/parameters/VehicleHeight"
          },
          {
            "$ref": "#/parameters/VehicleWidth"
          },
          {
            "$ref": "#/parameters/VehicleMaxSpeed"
          },
          {
            "$ref": "#/parameters/VehicleWeightMatrix"
          },
          {
            "$ref": "#/parameters/WindingnessLevel"
          },
          {
            "$ref": "#/parameters/InclineLevel"
          },
          {
            "$ref": "#/parameters/TravelMode"
          },
          {
            "$ref": "#/parameters/RouteAvoidList"
          },
          {
            "$ref": "#/parameters/Traffic"
          },
          {
            "$ref": "#/parameters/RouteType"
          },
          {
            "$ref": "#/parameters/VehicleLoadType"
          },
          {
            "name": "routeMatrixQuery",
            "description": "The matrix of origin and destination coordinates to compute the route distance, travel time and other summary for each cell of the matrix based on the input parameters. The minimum and the maximum cell count supported are 1 and **700** for async and **100** for sync respectively. For example, it can be 35 origins and 20 destinations or 25 origins and 25 destinations for async API.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RouteMatrixQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Matrix request successfully processed. The response body contains all of the results.",
            "schema": {
              "$ref": "#/definitions/RouteMatrixResult"
            }
          },
          "408": {
            "description": "Timeout: The request took longer to finish than the maximum amount of time defined in the api.",
            "schema": {
              "$ref": "../../../../../common-types/data-plane/v1/types.json#/definitions/ErrorResponse"
            },
            "x-ms-error-response": true
          },
          "default": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/default"
          }
        }
      }
    },
    "/route/directions/{format}": {
      "get": {
        "description": "**Applies to**: see pricing [tiers](https://aka.ms/AzureMapsPricingTier).\n\n\nReturns  a route between an origin and a destination, passing through waypoints if they are specified. The route will take into account factors such as current traffic and the typical road speeds on the requested day of the week and time of day.\n\nInformation returned includes the distance, estimated travel time, and a representation of the route geometry. Additional routing information such as optimized waypoint order or turn by turn instructions is also available, depending on the options selected.\n\nRouting service provides a set of parameters for a detailed description of vehicle-specific Consumption Model. Please check [Consumption Model](https://docs.microsoft.com/azure/azure-maps/consumption-model) for detailed explanation of the concepts and parameters involved.",
        "operationId": "Route_GetRouteDirections",
        "x-ms-examples": {
          "Successfully retrieve a route between an origin and a destination": {
            "$ref": "./examples/GetRouteDirections.json"
          }
        },
        "parameters": [
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/ClientId"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/ResponseFormat"
          },
          {
            "$ref": "#/parameters/Query"
          },
          {
            "name": "maxAlternatives",
            "in": "query",
            "description": "Number of desired alternative routes to be calculated. Default: 0, minimum: 0 and maximum: 5",
            "type": "integer",
            "minimum": 0,
            "maximum": 5
          },
          {
            "$ref": "#/parameters/AlternativeRouteType"
          },
          {
            "name": "minDeviationDistance",
            "in": "query",
            "description": "All alternative routes returned will follow the reference route (see section POST Requests) from the origin point of the calculateRoute request for at least this number of meters. Can only be used when reconstructing a route. The minDeviationDistance parameter cannot be used in conjunction with arriveAt",
            "type": "integer"
          },
          {
            "$ref": "#/parameters/ArriveAt"
          },
          {
            "$ref": "#/parameters/DepartAt"
          },
          {
            "name": "minDeviationTime",
            "in": "query",
            "description": "All alternative routes returned will follow the reference route (see section POST Requests) from the origin point of the calculateRoute request for at least this number of seconds. Can only be used when reconstructing a route. The minDeviationTime parameter cannot be used in conjunction with arriveAt. Default value is 0. Setting )minDeviationTime_ to a value greater than zero has the following consequences:\n  - The origin point of the _calculateRoute_ Request must be on\n    (or very near) the input reference route.\n    - If this is not the case, an error is returned.\n    - However, the origin point does not need to be at the beginning\n      of the input reference route (it can be thought of as the current\n      vehicle position on the reference route).\n  - The reference route, returned as the first route in the _calculateRoute_\n    Response, will start at the origin point specified in the _calculateRoute_\n    Request. The initial part of the input reference route up until the origin\n    point will be excluded from the Response.\n  - The values of _minDeviationDistance_ and _minDeviationTime_ determine\n    how far alternative routes will be guaranteed to follow the reference\n    route from the origin point onwards.\n  - The route must use _departAt_.\n  - The _vehicleHeading_ is ignored.",
            "type": "integer"
          },
          {
            "$ref": "#/parameters/RouteInstructionsType"
          },
          {
            "name": "language",
            "in": "query",
            "description": "The language parameter determines the language of the guidance messages. Proper nouns (the names of streets, plazas, etc.) are returned in the specified  language, or if that is not available, they are returned in an available language  that is close to it. Allowed values are (a subset of) the IETF language tags. The currently supported  languages are listed in the [Supported languages  section](https://docs.microsoft.com/azure/azure-maps/supported-languages).\n\nDefault value: en-GB",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ComputeBestOrder"
          },
          {
            "$ref": "#/parameters/RouteRepresentationForBestOrder"
          },
          {
            "$ref": "#/parameters/ComputeTravelTime"
          },
          {
            "$ref": "#/parameters/VehicleHeading"
          },
          {
            "$ref": "#/parameters/Report"
          },
          {
            "$ref": "#/parameters/SectionType"
          },
          {
            "$ref": "#/parameters/VehicleAxleWeight"
          },
          {
            "$ref": "#/parameters/VehicleWidth"
          },
          {
            "$ref": "#/parameters/VehicleHeight"
          },
          {
            "$ref": "#/parameters/VehicleLength"
          },
          {
            "$ref": "#/parameters/VehicleMaxSpeed"
          },
          {
            "$ref": "#/parameters/VehicleWeight"
          },
          {
            "$ref": "#/parameters/VehicleCommercial"
          },
          {
            "$ref": "#/parameters/WindingnessLevel"
          },
          {
            "$ref": "#/parameters/InclineLevel"
          },
          {
            "$ref": "#/parameters/TravelMode"
          },
          {
            "$ref": "#/parameters/RouteAvoidList"
          },
          {
            "$ref": "#/parameters/Traffic"
          },
          {
            "$ref": "#/parameters/RouteType"
          },
          {
            "$ref": "#/parameters/VehicleLoadType"
          },
          {
            "$ref": "#/parameters/VehicleEngineType"
          },
          {
            "$ref": "#/parameters/ConstantSpeedConsumptionInLitersPerHundredkm"
          },
          {
            "$ref": "#/parameters/CurrentFuelInLiters"
          },
          {
            "$ref": "#/parameters/AuxiliaryPowerInLitersPerHour"
          },
          {
            "$ref": "#/parameters/FuelEnergyDensityInMJoulesPerLiter"
          },
          {
            "$ref": "#/parameters/AccelerationEfficiency"
          },
          {
            "$ref": "#/parameters/DecelerationEfficiency"
          },
          {
            "$ref": "#/parameters/UphillEfficiency"
          },
          {
            "$ref": "#/parameters/DownhillEfficiency"
          },
          {
            "$ref": "#/parameters/ConstantSpeedConsumptionInkWhPerHundredkm"
          },
          {
            "$ref": "#/parameters/CurrentChargeInkWh"
          },
          {
            "$ref": "#/parameters/MaxChargeInkWh"
          },
          {
            "$ref": "#/parameters/AuxiliaryPowerInkW"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RouteDirections"
            }
          },
          "default": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/default"
          }
        }
      },
      "post": {
        "description": "**Applies to**: see pricing [tiers](https://aka.ms/AzureMapsPricingTier).\n\n\nReturns  a route between an origin and a destination, passing through waypoints if they are specified. The route will take into account factors such as current traffic and the typical road speeds on the requested day of the week and time of day.\n\nInformation returned includes the distance, estimated travel time, and a representation of the route geometry. Additional routing information such as optimized waypoint order or turn by turn instructions is also available, depending on the options selected.\n\nRouting service provides a set of parameters for a detailed description of a vehicle-specific Consumption Model. Please check [Consumption Model](https://docs.microsoft.com/azure/azure-maps/consumption-model) for detailed explanation of the concepts and parameters involved.",
        "operationId": "Route_PostRouteDirections",
        "x-ms-client-name": "GetRouteDirectionsWithAdditionalParameters",
        "x-ms-examples": {
          "Successfully retrieve a route between an origin and a destination with additional parameters in the body": {
            "$ref": "./examples/PostRouteDirections.json"
          }
        },
        "parameters": [
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/ClientId"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/ResponseFormat"
          },
          {
            "$ref": "#/parameters/Query"
          },
          {
            "name": "maxAlternatives",
            "in": "query",
            "description": "Number of desired alternative routes to be calculated. Default: 0, minimum: 0 and maximum: 5",
            "type": "integer",
            "minimum": 0,
            "maximum": 5
          },
          {
            "$ref": "#/parameters/AlternativeRouteType"
          },
          {
            "name": "minDeviationDistance",
            "in": "query",
            "description": "All alternative routes returned will follow the reference route (see section POST Requests) from the origin point of the calculateRoute request for at least this number of meters. Can only be used when reconstructing a route. The minDeviationDistance parameter cannot be used in conjunction with arriveAt",
            "type": "integer"
          },
          {
            "name": "minDeviationTime",
            "in": "query",
            "description": "All alternative routes returned will follow the reference route (see section POST Requests) from the origin point of the calculateRoute request for at least this number of seconds. Can only be used when reconstructing a route. The minDeviationTime parameter cannot be used in conjunction with arriveAt. Default value is 0. Setting )minDeviationTime_ to a value greater than zero has the following consequences:\n  - The origin point of the _calculateRoute_ Request must be on\n    (or very near) the input reference route.\n    - If this is not the case, an error is returned.\n    - However, the origin point does not need to be at the beginning\n      of the input reference route (it can be thought of as the current\n      vehicle position on the reference route).\n  - The reference route, returned as the first route in the _calculateRoute_\n    Response, will start at the origin point specified in the _calculateRoute_\n    Request. The initial part of the input reference route up until the origin\n    point will be excluded from the Response.\n  - The values of _minDeviationDistance_ and _minDeviationTime_ determine\n    how far alternative routes will be guaranteed to follow the reference\n    route from the origin point onwards.\n  - The route must use _departAt_.\n  - The _vehicleHeading_ is ignored.",
            "type": "integer"
          },
          {
            "$ref": "#/parameters/RouteInstructionsType"
          },
          {
            "name": "language",
            "in": "query",
            "description": "The language parameter determines the language of the guidance messages. It does not affect proper nouns (the names of streets, plazas, etc.) It has no effect when instructionsType=coded. Allowed values are (a subset of) the IETF language tags described",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ComputeBestOrder"
          },
          {
            "$ref": "#/parameters/RouteRepresentationForBestOrder"
          },
          {
            "$ref": "#/parameters/ComputeTravelTime"
          },
          {
            "$ref": "#/parameters/VehicleHeading"
          },
          {
            "$ref": "#/parameters/Report"
          },
          {
            "$ref": "#/parameters/SectionType"
          },
          {
            "$ref": "#/parameters/ArriveAt"
          },
          {
            "$ref": "#/parameters/DepartAt"
          },
          {
            "$ref": "#/parameters/VehicleAxleWeight"
          },
          {
            "$ref": "#/parameters/VehicleLength"
          },
          {
            "$ref": "#/parameters/VehicleHeight"
          },
          {
            "$ref": "#/parameters/VehicleWidth"
          },
          {
            "$ref": "#/parameters/VehicleMaxSpeed"
          },
          {
            "$ref": "#/parameters/VehicleWeight"
          },
          {
            "$ref": "#/parameters/VehicleCommercial"
          },
          {
            "$ref": "#/parameters/WindingnessLevel"
          },
          {
            "$ref": "#/parameters/InclineLevel"
          },
          {
            "$ref": "#/parameters/TravelMode"
          },
          {
            "$ref": "#/parameters/RouteAvoidList"
          },
          {
            "$ref": "#/parameters/Traffic"
          },
          {
            "$ref": "#/parameters/RouteType"
          },
          {
            "$ref": "#/parameters/VehicleLoadType"
          },
          {
            "$ref": "#/parameters/VehicleEngineType"
          },
          {
            "$ref": "#/parameters/ConstantSpeedConsumptionInLitersPerHundredkm"
          },
          {
            "$ref": "#/parameters/CurrentFuelInLiters"
          },
          {
            "$ref": "#/parameters/AuxiliaryPowerInLitersPerHour"
          },
          {
            "$ref": "#/parameters/FuelEnergyDensityInMJoulesPerLiter"
          },
          {
            "$ref": "#/parameters/AccelerationEfficiency"
          },
          {
            "$ref": "#/parameters/DecelerationEfficiency"
          },
          {
            "$ref": "#/parameters/UphillEfficiency"
          },
          {
            "$ref": "#/parameters/DownhillEfficiency"
          },
          {
            "$ref": "#/parameters/ConstantSpeedConsumptionInkWhPerHundredkm"
          },
          {
            "$ref": "#/parameters/CurrentChargeInkWh"
          },
          {
            "$ref": "#/parameters/MaxChargeInkWh"
          },
          {
            "$ref": "#/parameters/AuxiliaryPowerInkW"
          },
          {
            "name": "routeDirectionParameters",
            "description": "Used for reconstructing a route and for calculating zero or more alternative routes to this reference route.  The provided sequence of coordinates is used as input for route reconstruction. The alternative routes  are calculated between the origin and destination points specified in the base path parameter locations.  If both minDeviationDistance and minDeviationTime are set to zero, then these origin and destination points  are expected to be at (or very near) the beginning and end of the reference route, respectively. Intermediate  locations (waypoints) are not supported when using supportingPoints.\n\nSetting at least one of minDeviationDistance or minDeviationTime to a value greater than zero has the  following consequences:\n\n*  The origin point of the calculateRoute request must be on (or very near) the input reference route. If  this is not the case, an error is returned. However, the origin point does not need to be at the beginning of  the input reference route (it can be thought of as the current vehicle position on the reference route).\n*  The reference route, returned as the first route in the calculateRoute response, will start at the origin  point specified in the calculateRoute request. The initial part of the input reference route up until the  origin point will be excluded from the response.\n*  The values of minDeviationDistance and minDeviationTime determine how far alternative routes will be  guaranteed to follow the reference route from the origin point onwards.\n*  The route must use departAt.\n*  The vehicleHeading is ignored.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RouteDirectionParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RouteDirections"
            }
          },
          "default": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/default"
          }
        }
      }
    },
    "/route/range/{format}": {
      "get": {
        "description": "__Route Range (Isochrone) API__\n\n\n**Applies to**: see pricing [tiers](https://aka.ms/AzureMapsPricingTier).\n\nThis service will calculate a set of locations that can be reached from the origin point based on fuel, energy,  time or distance budget that is specified. A polygon boundary (or Isochrone) is returned in a counterclockwise  orientation as well as the precise polygon center which was the result of the origin point.\n\nThe returned polygon can be used for further processing such as  [Search Inside Geometry](https://docs.microsoft.com/rest/api/maps/search/postsearchinsidegeometry) to  search for POIs within the provided Isochrone.",
        "operationId": "Route_GetRouteRange",
        "x-ms-examples": {
          "Successfully retrieve a set of locations that can be reached from the origin point based on various conditions": {
            "$ref": "./examples/GetRouteRange.json"
          }
        },
        "parameters": [
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/ClientId"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/ResponseFormat"
          },
          {
            "name": "query",
            "in": "query",
            "description": "The Coordinate from which the range calculation should start.",
            "required": true,
            "type": "array",
            "collectionFormat": "csv",
            "minItems": 2,
            "maxItems": 2,
            "items": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "fuelBudgetInLiters",
            "in": "query",
            "description": "Fuel budget in liters that determines maximal range which can be travelled using the specified Combustion Consumption Model.<br> When fuelBudgetInLiters is used, it is mandatory to specify a detailed  Combustion Consumption Model.<br> Exactly one budget (fuelBudgetInLiters, energyBudgetInkWh, timeBudgetInSec, or distanceBudgetInMeters) must be used.",
            "type": "number",
            "format": "double"
          },
          {
            "name": "energyBudgetInkWh",
            "x-ms-client-name": "energyBudgetInKwH",
            "in": "query",
            "description": "Electric energy budget in kilowatt hours (kWh) that determines maximal range which can be travelled using the specified Electric Consumption Model.<br> When energyBudgetInkWh is used, it is mandatory to specify a detailed Electric Consumption Model.<br> Exactly one budget (fuelBudgetInLiters, energyBudgetInkWh, timeBudgetInSec, or distanceBudgetInMeters) must be used.",
            "type": "number",
            "format": "double"
          },
          {
            "name": "timeBudgetInSec",
            "in": "query",
            "description": "Time budget in seconds that determines maximal range which can be travelled using driving time. The Consumption Model will only affect the range when routeType is eco.<br> Exactly one budget (fuelBudgetInLiters, energyBudgetInkWh, timeBudgetInSec, or distanceBudgetInMeters) must be used.",
            "type": "number",
            "format": "double"
          },
          {
            "name": "distanceBudgetInMeters",
            "in": "query",
            "description": "Distance budget in meters that determines maximal range which can be travelled using driving distance.  The Consumption Model will only affect the range when routeType is eco.<br> Exactly one budget (fuelBudgetInLiters, energyBudgetInkWh, timeBudgetInSec, or distanceBudgetInMeters) must be used.",
            "type": "number",
            "format": "double"
          },
          {
            "$ref": "#/parameters/DepartAt"
          },
          {
            "$ref": "#/parameters/RouteType"
          },
          {
            "$ref": "#/parameters/Traffic"
          },
          {
            "$ref": "#/parameters/RouteAvoidList"
          },
          {
            "$ref": "#/parameters/TravelMode"
          },
          {
            "$ref": "#/parameters/InclineLevel"
          },
          {
            "$ref": "#/parameters/WindingnessLevel"
          },
          {
            "$ref": "#/parameters/VehicleAxleWeight"
          },
          {
            "$ref": "#/parameters/VehicleWidth"
          },
          {
            "$ref": "#/parameters/VehicleHeight"
          },
          {
            "$ref": "#/parameters/VehicleLength"
          },
          {
            "$ref": "#/parameters/VehicleMaxSpeed"
          },
          {
            "$ref": "#/parameters/VehicleWeight"
          },
          {
            "$ref": "#/parameters/VehicleCommercial"
          },
          {
            "$ref": "#/parameters/VehicleLoadType"
          },
          {
            "$ref": "#/parameters/VehicleEngineType"
          },
          {
            "$ref": "#/parameters/ConstantSpeedConsumptionInLitersPerHundredkm"
          },
          {
            "$ref": "#/parameters/CurrentFuelInLiters"
          },
          {
            "$ref": "#/parameters/AuxiliaryPowerInLitersPerHour"
          },
          {
            "$ref": "#/parameters/FuelEnergyDensityInMJoulesPerLiter"
          },
          {
            "$ref": "#/parameters/AccelerationEfficiency"
          },
          {
            "$ref": "#/parameters/DecelerationEfficiency"
          },
          {
            "$ref": "#/parameters/UphillEfficiency"
          },
          {
            "$ref": "#/parameters/DownhillEfficiency"
          },
          {
            "$ref": "#/parameters/ConstantSpeedConsumptionInkWhPerHundredkm"
          },
          {
            "$ref": "#/parameters/CurrentChargeInkWh"
          },
          {
            "$ref": "#/parameters/MaxChargeInkWh"
          },
          {
            "$ref": "#/parameters/AuxiliaryPowerInkW"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RouteRangeResult"
            }
          },
          "default": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/default"
          }
        }
      }
    },
    "/route/directions/batch/{format}": {
      "post": {
        "description": "**Route Directions Batch API**\n\n\n**Applies to**: see pricing [tiers](https://aka.ms/AzureMapsPricingTier).\n\n\n\nThe Route Directions Batch API sends batches of queries to [Route Directions API](https://docs.microsoft.com/rest/api/maps/route/getroutedirections) using just a single API call. You can call Route Directions Batch API to run either asynchronously (async) or synchronously (sync). The async API allows caller to batch up to **700** queries and sync API up to **100** queries.\n### Submit Asynchronous Batch Request\nThe Asynchronous API is appropriate for processing big volumes of relatively complex route requests\n- It allows the retrieval of results in a separate call (multiple downloads are possible).\n- The asynchronous API is optimized for reliability and is not expected to run into a timeout.\n- The number of batch items is limited to **700** for this API.\n\nWhen you make a request by using async request, by default the service returns a 202 response code along a redirect URL in the Location field of the response header. This URL should be checked periodically until the response data or error information is available.\nThe asynchronous responses are stored for **14** days. The redirect URL returns a 404 response if used after the expiration period.\n\nPlease note that asynchronous batch request is a long-running operation. Here's a typical sequence of operations:\n1. Client sends a Route Directions Batch `POST` request to Azure Maps\n2. The server will respond with one of the following:\n\n    > HTTP `202 Accepted` - Batch request has been accepted.\n\n    > HTTP `Error` - There was an error processing your Batch request. This could either be a `400 Bad Request` or any other `Error` status code.\n\n3. If the batch request was accepted successfully, the `Location` header in the response contains the URL to download the results of the batch request.\n    This status URI looks like following:\n\n``` GET https://atlas.microsoft.com/route/directions/batch/{batch-id}?api-version=1.0 ```\nNote:- Please remember to add AUTH information (subscription-key/azure_auth - See [Security](#security)) to the _status URI_ before running it. <br>\n4. Client issues a `GET` request on the _download URL_ obtained in Step 3 to download the batch results.\n\n### POST Body for Batch Request\nTo send the _route directions_ queries you will use a `POST` request where the request body will contain the `batchItems` array in `json` format and the `Content-Type` header will be set to `application/json`. Here's a sample request body containing 3 _route directions_ queries:\n\n\n```json\n{\n    \"batchItems\": [\n        { \"query\": \"?query=47.620659,-122.348934:47.610101,-122.342015&travelMode=bicycle&routeType=eco&traffic=false\" },\n        { \"query\": \"?query=40.759856,-73.985108:40.771136,-73.973506&travelMode=pedestrian&routeType=shortest\" },\n        { \"query\": \"?query=48.923159,-122.557362:32.621279,-116.840362\" }\n    ]\n}\n```\n\nA _route directions_ query in a batch is just a partial URL _without_ the protocol, base URL, path, api-version and subscription-key. It can accept any of the supported _route directions_ [URI parameters](https://docs.microsoft.com/rest/api/maps/route/getroutedirections#uri-parameters). The string values in the _route directions_ query must be properly escaped (e.g. \" character should be escaped with \\\\ ) and it should also be properly URL-encoded.\n\n\nThe async API allows caller to batch up to **700** queries and sync API up to **100** queries, and the batch should contain at least **1** query.\n\n\n### Download Asynchronous Batch Results\nTo download the async batch results you will issue a `GET` request to the batch download endpoint. This _download URL_ can be obtained from the `Location` header of a successful `POST` batch request and looks like the following:\n\n```\nhttps://atlas.microsoft.com/route/directions/batch/{batch-id}?api-version=1.0&subscription-key={subscription-key}\n```\nHere's the typical sequence of operations for downloading the batch results:\n1. Client sends a `GET` request using the _download URL_.\n2. The server will respond with one of the following:\n    \n    > HTTP `202 Accepted` - Batch request was accepted but is still being processed. Please try again in some time.\n\n    > HTTP `200 OK` - Batch request successfully processed. The response body contains all the batch results.\n\n\n\n### Batch Response Model\nThe returned data content is similar for async and sync requests. When downloading the results of an async batch request, if the batch has finished processing, the response body contains the batch response. This batch response contains a `summary` component that indicates the `totalRequests` that were part of the original batch request and `successfulRequests`i.e. queries which were executed successfully. The batch response also includes a `batchItems` array which contains a response for each and every query in the batch request. The `batchItems` will contain the results in the exact same order the original queries were sent in the batch request. Each item in `batchItems` contains `statusCode` and `response` fields. Each `response` in `batchItems` is of one of the following types:\n\n  - [`RouteDirections`](https://docs.microsoft.com/rest/api/maps/route/getroutedirections#routedirections) - If the query completed successfully.\n\n  - `Error` - If the query failed. The response will contain a `code` and a `message` in this case.\n\n\nHere's a sample Batch Response with 1 _successful_ and 1 _failed_ result:\n\n\n```json\n{\n    \"summary\": {\n        \"successfulRequests\": 1,\n        \"totalRequests\": 2\n    },\n    \"batchItems\": [\n        {\n            \"statusCode\": 200,\n            \"response\": {\n                \"routes\": [\n                    {\n                        \"summary\": {\n                            \"lengthInMeters\": 1758,\n                            \"travelTimeInSeconds\": 387,\n                            \"trafficDelayInSeconds\": 0,\n                            \"departureTime\": \"2018-07-17T00:49:56+00:00\",\n                            \"arrivalTime\": \"2018-07-17T00:56:22+00:00\"\n                        },\n                        \"legs\": [\n                            {\n                                \"summary\": {\n                                    \"lengthInMeters\": 1758,\n                                    \"travelTimeInSeconds\": 387,\n                                    \"trafficDelayInSeconds\": 0,\n                                    \"departureTime\": \"2018-07-17T00:49:56+00:00\",\n                                    \"arrivalTime\": \"2018-07-17T00:56:22+00:00\"\n                                },\n                                \"points\": [\n                                    {\n                                        \"latitude\": 47.62094,\n                                        \"longitude\": -122.34892\n                                    },\n                                    {\n                                        \"latitude\": 47.62094,\n                                        \"longitude\": -122.3485\n                                    },\n                                    {\n                                        \"latitude\": 47.62095,\n                                        \"longitude\": -122.3476\n                                    }\n                                ]\n                            }\n                        ],\n                        \"sections\": [\n                            {\n                                \"startPointIndex\": 0,\n                                \"endPointIndex\": 40,\n                                \"sectionType\": \"TRAVEL_MODE\",\n                                \"travelMode\": \"bicycle\"\n                            }\n                        ]\n                    }\n                ]\n            }\n        },\n        {\n            \"statusCode\": 400,\n            \"response\":\n            {\n                \"error\":\n                {\n                    \"code\": \"400 BadRequest\",\n                    \"message\": \"Bad request: one or more parameters were incorrectly specified or are mutually exclusive.\"\n                }\n            }\n        }\n    ]\n}\n```",
        "operationId": "Route_PostRouteDirectionsBatch",
        "x-ms-client-name": "RequestRouteDirectionsBatch",
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-examples": {
          "Successfully submit a route direction batch request": {
            "$ref": "./examples/PostRouteDirectionsBatch.json"
          }
        },
        "parameters": [
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/ClientId"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/JsonFormat"
          },
          {
            "name": "routeDirectionsBatchQueries",
            "in": "body",
            "description": "The list of route directions queries/requests to process. The list can contain a max of 700 queries for async and 100 queries for sync version and must contain at least 1 query.",
            "required": true,
            "schema": {
              "$ref": "../../../Common/preview/1.0/common.json#/definitions/BatchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Batch request successfully processed. The response body contains all the batch results.",
            "schema": {
              "$ref": "#/definitions/RouteDirectionsBatchResult"
            }
          },
          "202": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/202Async"
          },
          "default": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/default"
          }
        }
      },
      "get": {
        "description": "**Applies to**: see pricing [tiers](https://aka.ms/AzureMapsPricingTier).\n\n### Download Asynchronous Batch Results\nTo download the async batch results you will issue a `GET` request to the batch download endpoint. This _download URL_ can be obtained from the `Location` header of a successful `POST` batch request and looks like the following:\n\n```\nhttps://atlas.microsoft.com/route/directions/batch/{batch-id}?api-version=1.0&subscription-key={subscription-key}\n```\nHere's the typical sequence of operations for downloading the batch results:\n1. Client sends a `GET` request using the _download URL_.\n2. The server will respond with one of the following:\n    \n    > HTTP `202 Accepted` - Batch request was accepted but is still being processed. Please try again in some time.\n\n    > HTTP `200 OK` - Batch request successfully processed. The response body contains all the batch results.\n\n\n\n### Batch Response Model\nThe returned data content is similar for async and sync requests. When downloading the results of an async batch request, if the batch has finished processing, the response body contains the batch response. This batch response contains a `summary` component that indicates the `totalRequests` that were part of the original batch request and `successfulRequests`i.e. queries which were executed successfully. The batch response also includes a `batchItems` array which contains a response for each and every query in the batch request. The `batchItems` will contain the results in the exact same order the original queries were sent in the batch request. Each item in `batchItems` contains `statusCode` and `response` fields. Each `response` in `batchItems` is of one of the following types:\n\n  - [`RouteDirections`](https://docs.microsoft.com/rest/api/maps/route/getroutedirections#routedirections) - If the query completed successfully.\n\n  - `Error` - If the query failed. The response will contain a `code` and a `message` in this case.\n\n\nHere's a sample Batch Response with 1 _successful_ and 1 _failed_ result:\n\n\n```json\n{\n    \"summary\": {\n        \"successfulRequests\": 1,\n        \"totalRequests\": 2\n    },\n    \"batchItems\": [\n        {\n            \"statusCode\": 200,\n            \"response\": {\n                \"routes\": [\n                    {\n                        \"summary\": {\n                            \"lengthInMeters\": 1758,\n                            \"travelTimeInSeconds\": 387,\n                            \"trafficDelayInSeconds\": 0,\n                            \"departureTime\": \"2018-07-17T00:49:56+00:00\",\n                            \"arrivalTime\": \"2018-07-17T00:56:22+00:00\"\n                        },\n                        \"legs\": [\n                            {\n                                \"summary\": {\n                                    \"lengthInMeters\": 1758,\n                                    \"travelTimeInSeconds\": 387,\n                                    \"trafficDelayInSeconds\": 0,\n                                    \"departureTime\": \"2018-07-17T00:49:56+00:00\",\n                                    \"arrivalTime\": \"2018-07-17T00:56:22+00:00\"\n                                },\n                                \"points\": [\n                                    {\n                                        \"latitude\": 47.62094,\n                                        \"longitude\": -122.34892\n                                    },\n                                    {\n                                        \"latitude\": 47.62094,\n                                        \"longitude\": -122.3485\n                                    },\n                                    {\n                                        \"latitude\": 47.62095,\n                                        \"longitude\": -122.3476\n                                    }\n                                ]\n                            }\n                        ],\n                        \"sections\": [\n                            {\n                                \"startPointIndex\": 0,\n                                \"endPointIndex\": 40,\n                                \"sectionType\": \"TRAVEL_MODE\",\n                                \"travelMode\": \"bicycle\"\n                            }\n                        ]\n                    }\n                ]\n            }\n        },\n        {\n            \"statusCode\": 400,\n            \"response\":\n            {\n                \"error\":\n                {\n                    \"code\": \"400 BadRequest\",\n                    \"message\": \"Bad request: one or more parameters were incorrectly specified or are mutually exclusive.\"\n                }\n            }\n        }\n    ]\n}\n```",
        "operationId": "Route_GetRouteDirectionsBatch",
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "original-uri"
        },
        "x-ms-examples": {
          "Successfully retrieve the status for the route direction batch request": {
            "$ref": "./examples/GetRouteDirectionsBatch.json"
          }
        },
        "parameters": [
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/ClientId"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "$ref": "#/parameters/BatchId"
          }
        ],
        "responses": {
          "200": {
            "description": "Batch request successfully processed. The response body contains all the batch results.",
            "schema": {
              "$ref": "#/definitions/RouteDirectionsBatchResult"
            }
          },
          "202": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/202Async"
          },
          "default": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/default"
          }
        }
      }
    },
    "/route/directions/batch/sync/{format}": {
      "post": {
        "description": "**Route Directions Batch API**\n\n\n**Applies to**: see pricing [tiers](https://aka.ms/AzureMapsPricingTier).\n\n\n\nThe Route Directions Batch API sends batches of queries to [Route Directions API](https://docs.microsoft.com/rest/api/maps/route/getroutedirections) using just a single API call. You can call Route Directions Batch API to run either asynchronously (async) or synchronously (sync). The async API allows caller to batch up to **700** queries and sync API up to **100** queries.\n### Submit Synchronous Batch Request\nThe Synchronous API is recommended for lightweight batch requests. When the service receives a request, it will respond as soon as the batch items are calculated and there will be no possibility to retrieve the results later. The Synchronous API will return a timeout error (a 408 response) if the request takes longer than 60 seconds. The number of batch items is limited to **100** for this API.\n```\nPOST https://atlas.microsoft.com/route/directions/batch/sync/json?api-version=1.0&subscription-key={subscription-key}\n```\n### Batch Response Model\nThe returned data content is similar for async and sync requests. When downloading the results of an async batch request, if the batch has finished processing, the response body contains the batch response. This batch response contains a `summary` component that indicates the `totalRequests` that were part of the original batch request and `successfulRequests`i.e. queries which were executed successfully. The batch response also includes a `batchItems` array which contains a response for each and every query in the batch request. The `batchItems` will contain the results in the exact same order the original queries were sent in the batch request. Each item in `batchItems` contains `statusCode` and `response` fields. Each `response` in `batchItems` is of one of the following types:\n\n  - [`RouteDirections`](https://docs.microsoft.com/rest/api/maps/route/getroutedirections#routedirections) - If the query completed successfully.\n\n  - `Error` - If the query failed. The response will contain a `code` and a `message` in this case.\n\n\nHere's a sample Batch Response with 1 _successful_ and 1 _failed_ result:\n\n\n```json\n{\n    \"summary\": {\n        \"successfulRequests\": 1,\n        \"totalRequests\": 2\n    },\n    \"batchItems\": [\n        {\n            \"statusCode\": 200,\n            \"response\": {\n                \"routes\": [\n                    {\n                        \"summary\": {\n                            \"lengthInMeters\": 1758,\n                            \"travelTimeInSeconds\": 387,\n                            \"trafficDelayInSeconds\": 0,\n                            \"departureTime\": \"2018-07-17T00:49:56+00:00\",\n                            \"arrivalTime\": \"2018-07-17T00:56:22+00:00\"\n                        },\n                        \"legs\": [\n                            {\n                                \"summary\": {\n                                    \"lengthInMeters\": 1758,\n                                    \"travelTimeInSeconds\": 387,\n                                    \"trafficDelayInSeconds\": 0,\n                                    \"departureTime\": \"2018-07-17T00:49:56+00:00\",\n                                    \"arrivalTime\": \"2018-07-17T00:56:22+00:00\"\n                                },\n                                \"points\": [\n                                    {\n                                        \"latitude\": 47.62094,\n                                        \"longitude\": -122.34892\n                                    },\n                                    {\n                                        \"latitude\": 47.62094,\n                                        \"longitude\": -122.3485\n                                    },\n                                    {\n                                        \"latitude\": 47.62095,\n                                        \"longitude\": -122.3476\n                                    }\n                                ]\n                            }\n                        ],\n                        \"sections\": [\n                            {\n                                \"startPointIndex\": 0,\n                                \"endPointIndex\": 40,\n                                \"sectionType\": \"TRAVEL_MODE\",\n                                \"travelMode\": \"bicycle\"\n                            }\n                        ]\n                    }\n                ]\n            }\n        },\n        {\n            \"statusCode\": 400,\n            \"response\":\n            {\n                \"error\":\n                {\n                    \"code\": \"400 BadRequest\",\n                    \"message\": \"Bad request: one or more parameters were incorrectly specified or are mutually exclusive.\"\n                }\n            }\n        }\n    ]\n}\n```",
        "operationId": "Route_PostRouteDirectionsBatchSync",
        "x-ms-client-name": "RequestRouteDirectionsBatchSync",
        "x-ms-examples": {
          "Successfully retrieve the route direction batch result synchronously": {
            "$ref": "./examples/PostRouteDirectionsBatchSync.json"
          }
        },
        "parameters": [
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/ClientId"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/JsonFormat"
          },
          {
            "name": "routeDirectionsBatchQueries",
            "in": "body",
            "description": "The list of route directions queries/requests to process. The list can contain  a max of 700 queries for async and 100 queries for sync version and must contain at least 1 query.",
            "required": true,
            "schema": {
              "$ref": "../../../Common/preview/1.0/common.json#/definitions/BatchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RouteDirectionsBatchResult"
            }
          },
          "408": {
            "description": "Timeout: The request took longer to finish than the maximum amount of time defined in the api.",
            "schema": {
              "$ref": "../../../../../common-types/data-plane/v1/types.json#/definitions/ErrorResponse"
            },
            "x-ms-error-response": true
          },
          "default": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/default"
          }
        }
      }
    }
  },
  "definitions": {
    "RouteDirectionParameters": {
      "type": "object",
      "description": "Post body parameters for Route directions.",
      "properties": {
        "supportingPoints": {
          "description": "A GeoJSON Geometry collection representing sequence of coordinates used as input for route reconstruction and for calculating zero or more alternative routes to this reference route.\n  - The provided sequence of supporting points is used as input for route reconstruction.\n  - The alternative routes are calculated between the origin and destination points specified in the base path parameter locations.\n  - If both _minDeviationDistance_ and _minDeviationTime_ are set to zero, then these origin and destination points are\n  expected to be at (or very near) the beginning and end of the reference route, respectively.\n  - Intermediate locations (_waypoints_) are not supported when using <_supportingPoints_>.\n  - The reference route may contain traffic incidents of type _ROAD_CLOSURE_, which are\n  ignored for the calculation of the reference route's travel time and traffic delay.\n Please refer to [Supporting Points](https://docs.microsoft.com/azure/azure-maps/how-to-use-best-practices-for-routing#calculate-and-bias-alternative-routes-using-supporting-points) for details.",
          "$ref": "../../../Common/preview/1.0/common.json#/definitions/GeoJsonGeometryCollection"
        },
        "avoidVignette": {
          "description": "This is a list of 3-character, ISO 3166-1, alpha-3 country codes of countries/regions in which all toll roads with vignettes are to be avoided, e.g. \"AUS,CHE\". Toll roads with vignettes in countries/regions not in the list are unaffected. Note: It is an error to specify both **avoidVignette** and **allowVignette**.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "allowVignette": {
          "description": "This is a list of 3-character, ISO 3166-1, alpha-3 country codes of countries/regions in which toll roads with vignettes are allowed, e.g. \"AUS,CHE\". Specifying **allowVignette** with some countries/regions X is equivalent to specifying **avoidVignette** with all countries/regions but X. Specifying **allowVignette** with an empty list is the same as avoiding all toll roads with vignettes. Note: It is an error to specify both **avoidVignette** and **allowVignette**.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "avoidAreas": {
          "description": "A GeoJSON MultiPolygon representing list of areas to avoid. Only rectangle polygons are supported. The maximum size of a rectangle is about 160x160 km. Maximum number of avoided areas is **10**. It cannot cross the 180th meridian. It must be between -80 and +80 degrees of latitude.",
          "$ref": "../../../Common/preview/1.0/common.json#/definitions/GeoJsonMultiPolygon"
        }
      }
    },
    "RouteDirections": {
      "description": "This object is returned from a successful Route Directions call",
      "type": "object",
      "properties": {
        "formatVersion": {
          "description": "Format Version property",
          "type": "string",
          "readOnly": true
        },
        "routes": {
          "description": "Routes array",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Route"
          }
        },
        "optimizedWaypoints": {
          "description": "Optimized sequence of waypoints. It shows the index from the user provided waypoint sequence for the original and optimized list. For instance, a response: \n\n```\n<optimizedWaypoints>\n<waypoint providedIndex=\"0\" optimizedIndex=\"1\"/>\n<waypoint providedIndex=\"1\" optimizedIndex=\"2\"/>\n<waypoint providedIndex=\"2\" optimizedIndex=\"0\"/>\n</optimizedWaypoints>\n```\n\nmeans that the original sequence is [0, 1, 2] and optimized sequence is [1, 2, 0]. Since the index starts by 0 the original is \"first, second, third\" while the optimized is \"second, third, first\".",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/RouteOptimizedWaypoint"
          }
        },
        "report": {
          "$ref": "#/definitions/RouteReport"
        }
      }
    },
    "Route": {
      "type": "object",
      "properties": {
        "summary": {
          "$ref": "#/definitions/RouteSummary"
        },
        "legs": {
          "description": "Legs array",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/RouteLeg"
          }
        },
        "sections": {
          "description": "Sections array",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/RouteSection"
          }
        },
        "guidance": {
          "$ref": "#/definitions/RouteGuidance"
        }
      }
    },
    "RouteSummary": {
      "description": "Summary object",
      "type": "object",
      "readOnly": true,
      "properties": {
        "lengthInMeters": {
          "description": "Length In Meters property",
          "type": "integer",
          "readOnly": true
        },
        "travelTimeInSeconds": {
          "description": "Estimated travel time in seconds property that includes the delay due to real-time traffic. Note that even when traffic=false travelTimeInSeconds still includes the delay due to traffic. If DepartAt is in the future, travel time is calculated using time-dependent historic traffic data.",
          "type": "integer",
          "readOnly": true
        },
        "trafficDelayInSeconds": {
          "description": "Estimated delay in seconds caused by the real-time incident(s) according to traffic information. For routes planned with departure time in the future, delays is always 0. To return additional travel times using different types of traffic information, parameter computeTravelTimeFor=all needs to be added.",
          "type": "integer",
          "readOnly": true
        },
        "departureTime": {
          "$ref": "#/definitions/DepartureTime"
        },
        "arrivalTime": {
          "$ref": "#/definitions/ArrivalTime"
        }
      }
    },
    "RouteOptimizedWaypoint": {
      "description": "Optimized way point object.",
      "type": "object",
      "properties": {
        "providedIndex": {
          "description": "Way point index provided by the user.",
          "type": "integer",
          "readOnly": true
        },
        "optimizedIndex": {
          "description": "Optimized way point index from the system.",
          "type": "integer",
          "readOnly": true
        }
      }
    },
    "RouteLeg": {
      "description": "A description of a part of a route, comprised of a list of points. Each additional waypoint provided in the request will result in an additional leg in the returned route.",
      "type": "object",
      "properties": {
        "summary": {
          "$ref": "#/definitions/RouteLegSummary"
        },
        "points": {
          "description": "Points array",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "../../../Common/preview/1.0/common.json#/definitions/LatLongPair"
          }
        }
      }
    },
    "RouteLegSummary": {
      "description": "Summary object for route section.",
      "type": "object",
      "readOnly": true,
      "properties": {
        "lengthInMeters": {
          "description": "Length In Meters property",
          "type": "integer",
          "readOnly": true
        },
        "travelTimeInSeconds": {
          "description": "Estimated travel time in seconds property that includes the delay due to real-time traffic. Note that even when traffic=false travelTimeInSeconds still includes the delay due to traffic. If DepartAt is in the future, travel time is calculated using time-dependent historic traffic data.",
          "type": "integer",
          "readOnly": true
        },
        "trafficDelayInSeconds": {
          "description": "Estimated delay in seconds caused by the real-time incident(s) according to traffic information. For routes planned with departure time in the future, delays is always 0. To return additional travel times using different types of traffic information, parameter computeTravelTimeFor=all needs to be added.",
          "type": "integer",
          "readOnly": true
        },
        "departureTime": {
          "$ref": "#/definitions/DepartureTime"
        },
        "arrivalTime": {
          "$ref": "#/definitions/ArrivalTime"
        },
        "noTrafficTravelTimeInSeconds": {
          "description": "Estimated travel time calculated as if there are no delays on the route due to traffic conditions (e.g. congestion). Included only if computeTravelTimeFor = all is used in the query.",
          "type": "integer",
          "readOnly": true
        },
        "historicTrafficTravelTimeInSeconds": {
          "description": "Estimated travel time calculated using time-dependent historic traffic data. Included only if computeTravelTimeFor = all is used in the query.",
          "type": "integer",
          "readOnly": true
        },
        "liveTrafficIncidentsTravelTimeInSeconds": {
          "description": "Estimated travel time calculated using real-time speed data. Included only if computeTravelTimeFor = all is used in the query.",
          "type": "integer",
          "readOnly": true
        },
        "fuelConsumptionInLiters": {
          "description": "Estimated fuel consumption in liters using the Combustion Consumption Model. Included if vehicleEngineType is set to _combustion_ and constantSpeedConsumptionInLitersPerHundredkm is specified. The value will be non-negative.",
          "type": "number",
          "format": "double",
          "readOnly": true
        },
        "batteryConsumptionInkWh": {
          "x-ms-client-name": "batteryConsumptionInKwH",
          "description": "Estimated electric energy consumption in kilowatt hours (kWh) using the Electric Consumption Model. Included if vehicleEngineType is set to electric and constantSpeedConsumptionInkWhPerHundredkm is specified. The value of batteryConsumptionInkWh includes the recuperated electric energy and can therefore be negative (which indicates gaining energy). If both maxChargeInkWh and currentChargeInkWh are specified, recuperation will be capped to ensure that the battery charge level never exceeds maxChargeInkWh. If neither maxChargeInkWh nor currentChargeInkWh are specified, unconstrained recuperation is assumed in the consumption calculation.",
          "type": "number",
          "format": "double",
          "readOnly": true
        }
      }
    },
    "RouteSection": {
      "description": "Route sections contain additional information about parts of a route. Each section contains at least the elements `startPointIndex`, `endPointIndex`, and `sectionType`.",
      "type": "object",
      "properties": {
        "startPointIndex": {
          "description": "Index of the first point (offset 0) in the route this section applies to.",
          "type": "integer",
          "readOnly": true
        },
        "endPointIndex": {
          "description": "Index of the last point (offset 0) in the route this section applies to.",
          "type": "integer",
          "readOnly": true
        },
        "sectionType": {
          "$ref": "#/definitions/ResponseSectionType"
        },
        "travelMode": {
          "$ref": "#/definitions/ResponseTravelMode"
        },
        "simpleCategory": {
          "$ref": "#/definitions/SimpleCategory"
        },
        "effectiveSpeedInKmh": {
          "description": "Effective speed of the incident in km/h, averaged over its entire length.",
          "type": "integer",
          "readOnly": true
        },
        "delayInSeconds": {
          "description": "Delay in seconds caused by the incident.",
          "type": "integer",
          "readOnly": true
        },
        "magnitudeOfDelay": {
          "x-ms-client-name": "delayMagnitude",
          "$ref": "#/definitions/DelayMagnitude"
        },
        "tec": {
          "$ref": "#/definitions/RouteSectionTec"
        }
      }
    },
    "RouteSectionTec": {
      "description": "Details of the traffic event, using definitions in the [TPEG2-TEC](https://www.iso.org/standard/63116.html) standard. Can contain effectCode and causes elements.",
      "type": "object",
      "properties": {
        "effectCode": {
          "description": "The effect on the traffic flow. Contains a value in the tec001:EffectCode table, as defined in the [TPEG2-TEC](https://www.iso.org/standard/63116.html) standard. Can be used to color-code traffic events according to severity.",
          "type": "integer",
          "readOnly": true
        },
        "causes": {
          "description": "Causes array",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RouteSectionTecCause"
          }
        }
      }
    },
    "RouteSectionTecCause": {
      "description": "The cause of the traffic event. Can contain mainCauseCode and subCauseCode elements. Can be used to define iconography and descriptions.",
      "type": "object",
      "properties": {
        "mainCauseCode": {
          "description": "The main cause of the traffic event. Contains a value in the tec002:CauseCode table, as defined in the [TPEG2-TEC](https://www.iso.org/standard/63116.html) standard.",
          "type": "integer",
          "readOnly": true
        },
        "subCauseCode": {
          "description": "The subcause of the traffic event. Contains a value in the sub cause table defined by the mainCauseCode, as defined in the [TPEG2-TEC](https://www.iso.org/standard/63116.html) standard.",
          "type": "integer",
          "readOnly": true
        }
      }
    },
    "RouteInstruction": {
      "description": "A set of attributes describing a maneuver, e.g. 'Turn right', 'Keep left', 'Take the ferry', 'Take the motorway', 'Arrive'.",
      "type": "object",
      "properties": {
        "routeOffsetInMeters": {
          "description": "Distance from the start of the route to the point of the instruction.",
          "type": "integer",
          "readOnly": true
        },
        "travelTimeInSeconds": {
          "description": "Estimated travel time up to the point corresponding to routeOffsetInMeters.",
          "type": "integer",
          "readOnly": true
        },
        "point": {
          "$ref": "../../../Common/preview/1.0/common.json#/definitions/LatLongPair"
        },
        "pointIndex": {
          "description": "The index of the point in the list of polyline \"points\" corresponding to the point of the instruction.",
          "type": "integer",
          "readOnly": true
        },
        "instructionType": {
          "description": "Type of the instruction, e.g., turn or change of road form.",
          "type": "string",
          "enum": [
            "TURN",
            "ROAD_CHANGE",
            "LOCATION_DEPARTURE",
            "LOCATION_ARRIVAL",
            "DIRECTION_INFO",
            "LOCATION_WAYPOINT"
          ],
          "x-ms-enum": {
            "name": "GuidanceInstructionType",
            "modelAsString": true,
            "values": [
              {
                "value": "TURN",
                "name": "Turn",
                "description": "Turn."
              },
              {
                "value": "ROAD_CHANGE",
                "name": "RoadChange",
                "description": "Road Change."
              },
              {
                "value": "LOCATION_DEPARTURE",
                "name": "LocationDeparture",
                "description": "Departure location."
              },
              {
                "value": "LOCATION_ARRIVAL",
                "name": "LocationArrival",
                "description": "Arrival location."
              },
              {
                "value": "DIRECTION_INFO",
                "name": "DirectionInfo",
                "description": "Direction information."
              },
              {
                "value": "LOCATION_WAYPOINT",
                "name": "LocationWaypoint",
                "description": "Way point location."
              }
            ]
          }
        },
        "roadNumbers": {
          "description": "The road number(s) of the next significant road segment(s) after the maneuver, or of the road(s) to be followed. Example: [\"E34\", \"N205\"]",
          "type": "array",
          "items": {
            "type": "string",
            "readOnly": true
          },
          "readOnly": true
        },
        "exitNumber": {
          "description": "The number(s) of a highway exit taken by the current maneuver. If an exit has multiple exit numbers, they will be separated by \",\" and possibly aggregated by \"-\", e.g., \"10, 13-15\".",
          "type": "string",
          "readOnly": true
        },
        "street": {
          "description": "Street name of the next significant road segment after the maneuver, or of the street that should be followed.",
          "type": "string",
          "readOnly": true
        },
        "signpostText": {
          "description": "The text on a signpost which is most relevant to the maneuver, or to the direction that should be followed.",
          "type": "string",
          "readOnly": true
        },
        "countryCode": {
          "description": "3-character [ISO 3166-1](https://www.iso.org/iso-3166-country-codes.html) alpha-3 country code. E.g. USA.",
          "type": "string",
          "readOnly": true
        },
        "stateCode": {
          "description": "A subdivision (e.g., state) of the country, represented by the second part of an [ISO 3166-2](https://www.iso.org/standard/63546.html) code. This is only available for some countries/regions like the US, Canada, and Mexico.",
          "type": "string",
          "readOnly": true
        },
        "junctionType": {
          "description": "The type of the junction where the maneuver takes place. For larger roundabouts, two separate instructions are generated for entering and leaving the roundabout.",
          "type": "string",
          "readOnly": true,
          "enum": [
            "REGULAR",
            "ROUNDABOUT",
            "BIFURCATION"
          ],
          "x-ms-enum": {
            "name": "JunctionType",
            "modelAsString": true,
            "values": [
              {
                "value": "REGULAR",
                "description": "regular"
              },
              {
                "value": "ROUNDABOUT",
                "description": "roundabout"
              },
              {
                "value": "BIFURCATION",
                "description": "bifurcation"
              }
            ]
          }
        },
        "turnAngleInDecimalDegrees": {
          "x-ms-client-name": "turnAngleInDegrees",
          "description": "Indicates the direction of an instruction. If junctionType indicates a turn instruction:\n\n  * 180 = U-turn\n  * [-179, -1] = Left turn\n  * 0 = Straight on (a '0 degree' turn)\n  * [1, 179] = Right turn\n\nIf junctionType indicates a bifurcation instruction:\n\n  * <0 - keep left\n  * \\>0 - keep right",
          "type": "integer",
          "readOnly": true
        },
        "roundaboutExitNumber": {
          "description": "This indicates which exit to take at a roundabout.",
          "type": "string",
          "readOnly": true
        },
        "possibleCombineWithNext": {
          "description": "It is possible to optionally combine the instruction with the next one. This can be used to build messages like \"Turn left and then turn right\".",
          "type": "boolean",
          "readOnly": true
        },
        "drivingSide": {
          "description": "Indicates left-hand vs. right-hand side driving at the point of the maneuver.",
          "type": "string",
          "readOnly": true,
          "enum": [
            "LEFT",
            "RIGHT"
          ],
          "x-ms-enum": {
            "name": "DrivingSide",
            "modelAsString": true,
            "values": [
              {
                "value": "LEFT",
                "description": "Left side."
              },
              {
                "value": "RIGHT",
                "description": "Right side."
              }
            ]
          }
        },
        "maneuver": {
          "description": "A code identifying the maneuver.",
          "type": "string",
          "readOnly": true,
          "enum": [
            "ARRIVE",
            "ARRIVE_LEFT",
            "ARRIVE_RIGHT",
            "DEPART",
            "STRAIGHT",
            "KEEP_RIGHT",
            "BEAR_RIGHT",
            "TURN_RIGHT",
            "SHARP_RIGHT",
            "KEEP_LEFT",
            "BEAR_LEFT",
            "TURN_LEFT",
            "SHARP_LEFT",
            "MAKE_UTURN",
            "ENTER_MOTORWAY",
            "ENTER_FREEWAY",
            "ENTER_HIGHWAY",
            "TAKE_EXIT",
            "MOTORWAY_EXIT_LEFT",
            "MOTORWAY_EXIT_RIGHT",
            "TAKE_FERRY",
            "ROUNDABOUT_CROSS",
            "ROUNDABOUT_RIGHT",
            "ROUNDABOUT_LEFT",
            "ROUNDABOUT_BACK",
            "TRY_MAKE_UTURN",
            "FOLLOW",
            "SWITCH_PARALLEL_ROAD",
            "SWITCH_MAIN_ROAD",
            "ENTRANCE_RAMP",
            "WAYPOINT_LEFT",
            "WAYPOINT_RIGHT",
            "WAYPOINT_REACHED"
          ],
          "x-ms-enum": {
            "name": "GuidanceManeuver",
            "modelAsString": true,
            "values": [
              {
                "value": "ARRIVE",
                "name": "Arrive",
                "description": "You have arrived."
              },
              {
                "value": "ARRIVE_LEFT",
                "name": "ArriveLeft",
                "description": "You have arrived. Your destination is on the left."
              },
              {
                "value": "ARRIVE_RIGHT",
                "name": "ArriveRight",
                "description": "You have arrived. Your destination is on the right."
              },
              {
                "value": "DEPART",
                "name": "Depart",
                "description": "Leave."
              },
              {
                "value": "STRAIGHT",
                "name": "Straight",
                "description": "Keep straight on."
              },
              {
                "value": "KEEP_RIGHT",
                "name": "KeepRight",
                "description": "Keep right."
              },
              {
                "value": "BEAR_RIGHT",
                "name": "BearRight",
                "description": "Bear right."
              },
              {
                "value": "TURN_RIGHT",
                "name": "TurnRight",
                "description": "Turn right."
              },
              {
                "value": "SHARP_RIGHT",
                "name": "SharpRight",
                "description": "Turn sharp right."
              },
              {
                "value": "KEEP_LEFT",
                "name": "KeepLeft",
                "description": "Keep left."
              },
              {
                "value": "BEAR_LEFT",
                "name": "BearLeft",
                "description": "Bear left."
              },
              {
                "value": "TURN_LEFT",
                "name": "TurnLeft",
                "description": "Turn left."
              },
              {
                "value": "SHARP_LEFT",
                "name": "SharpLeft",
                "description": "Turn sharp left."
              },
              {
                "value": "MAKE_UTURN",
                "name": "MakeUTurn",
                "description": "Make a U-turn."
              },
              {
                "value": "ENTER_MOTORWAY",
                "name": "EnterMotorway",
                "description": "Take the motorway."
              },
              {
                "value": "ENTER_FREEWAY",
                "name": "EnterFreeway",
                "description": "Take the freeway."
              },
              {
                "value": "ENTER_HIGHWAY",
                "name": "EnterHighway",
                "description": "Take the highway."
              },
              {
                "value": "TAKE_EXIT",
                "name": "TakeExit",
                "description": "Take the exit."
              },
              {
                "value": "MOTORWAY_EXIT_LEFT",
                "name": "MotorwayExitLeft",
                "description": "Take the left exit."
              },
              {
                "value": "MOTORWAY_EXIT_RIGHT",
                "name": "MotorwayExitRight",
                "description": "Take the right exit."
              },
              {
                "value": "TAKE_FERRY",
                "name": "TakeFerry",
                "description": "Take the ferry."
              },
              {
                "value": "ROUNDABOUT_CROSS",
                "name": "RoundaboutCross",
                "description": "Cross the roundabout."
              },
              {
                "value": "ROUNDABOUT_RIGHT",
                "name": "RoundaboutRight",
                "description": "At the roundabout take the exit on the right."
              },
              {
                "value": "ROUNDABOUT_LEFT",
                "name": "RoundaboutLeft",
                "description": "At the roundabout take the exit on the left."
              },
              {
                "value": "ROUNDABOUT_BACK",
                "name": "RoundaboutBack",
                "description": "Go around the roundabout."
              },
              {
                "value": "TRY_MAKE_UTURN",
                "name": "TryMakeUTurn",
                "description": "Try to make a U-turn."
              },
              {
                "value": "FOLLOW",
                "name": "Follow",
                "description": "Follow."
              },
              {
                "value": "SWITCH_PARALLEL_ROAD",
                "name": "SwitchParallelRoad",
                "description": "Switch to the parallel road."
              },
              {
                "value": "SWITCH_MAIN_ROAD",
                "name": "SwitchMainRoad",
                "description": "Switch to the main road."
              },
              {
                "value": "ENTRANCE_RAMP",
                "name": "EntranceRamp",
                "description": "Take the ramp."
              },
              {
                "value": "WAYPOINT_LEFT",
                "name": "WaypointLeft",
                "description": "You have reached the waypoint. It is on the left."
              },
              {
                "value": "WAYPOINT_RIGHT",
                "name": "WaypointRight",
                "description": "You have reached the waypoint. It is on the right."
              },
              {
                "value": "WAYPOINT_REACHED",
                "name": "WaypointReached",
                "description": "You have reached the waypoint."
              }
            ]
          }
        },
        "message": {
          "description": "A human-readable message for the maneuver.",
          "type": "string",
          "readOnly": true
        },
        "combinedMessage": {
          "description": "A human-readable message for the maneuver combined with the message from the next instruction. Sometimes it is possible to combine two successive instructions into a single instruction making it easier to follow. When this is the case the possibleCombineWithNext flag will be true. For example:\n\n```\n10. Turn left onto Einsteinweg/A10/E22 towards Ring Amsterdam\n11. Follow Einsteinweg/A10/E22 towards Ring Amsterdam\n```\n\nThe possibleCombineWithNext flag on instruction 10 is true. This indicates to the clients of coded guidance that it can be combined with instruction 11. The instructions will be combined automatically for clients requesting human-readable guidance. The combinedMessage field contains the combined message:\n\n```\nTurn left onto Einsteinweg/A10/E22 towards Ring Amsterdam\nthen follow Einsteinweg/A10/E22 towards Ring Amsterdam.\n```",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "RouteInstructionGroup": {
      "description": "Groups a sequence of instruction elements which are related to each other. The sequence range is constrained with firstInstructionIndex and lastInstructionIndex. When human-readable text messages are requested for guidance (instructionType=text or tagged), then the instructionGroup has a summary message returned when available.",
      "type": "object",
      "properties": {
        "firstInstructionIndex": {
          "description": "Index of the first instruction in the instructions and belonging to this group.",
          "type": "integer",
          "readOnly": true
        },
        "lastInstructionIndex": {
          "description": "Index of the last instruction in the instructions and belonging to this group.",
          "type": "integer",
          "readOnly": true
        },
        "groupLengthInMeters": {
          "description": "Length of the group.",
          "type": "integer",
          "readOnly": true
        },
        "groupMessage": {
          "description": "Summary message when human-readable text messages are requested for guidance (instructionType=text or tagged).",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "RouteGuidance": {
      "description": "Contains guidance related elements. This field is present only when guidance was requested and is available.",
      "type": "object",
      "readOnly": true,
      "properties": {
        "instructions": {
          "description": "A list of instructions describing maneuvers.",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/RouteInstruction"
          }
        },
        "instructionGroups": {
          "description": "Groups a sequence of instruction elements which are related to each other.",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/RouteInstructionGroup"
          }
        }
      }
    },
    "RouteRangeResult": {
      "description": "This object is returned from a successful Route Reachable Range call",
      "type": "object",
      "properties": {
        "formatVersion": {
          "description": "Format Version property",
          "type": "string",
          "readOnly": true
        },
        "reachableRange": {
          "$ref": "#/definitions/RouteRange"
        },
        "report": {
          "$ref": "#/definitions/RouteReport"
        }
      }
    },
    "RouteRange": {
      "description": "Reachable Range",
      "type": "object",
      "properties": {
        "center": {
          "description": "Center point of the reachable range",
          "$ref": "../../../Common/preview/1.0/common.json#/definitions/LatLongPair"
        },
        "boundary": {
          "description": "Polygon boundary of the reachable range represented as a list of points.",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "../../../Common/preview/1.0/common.json#/definitions/LatLongPair"
          }
        }
      }
    },
    "RouteReport": {
      "description": "Reports the effective settings used in the current call.",
      "type": "object",
      "properties": {
        "effectiveSettings": {
          "description": "Effective parameters or data used when calling this Route API.",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/EffectiveSetting"
          }
        }
      }
    },
    "EffectiveSetting": {
      "description": "Effective parameter or data used when calling this Route API.",
      "type": "object",
      "properties": {
        "key": {
          "description": "Name of the parameter used.",
          "type": "string",
          "readOnly": true
        },
        "value": {
          "description": "Value of the parameter used.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "RouteMatrixResult": {
      "description": "This object is returned from a successful Route Matrix call. For ex, if 2 origins and 3 destinations are provided, there are going to 2 arrays with 3 elements in each. Each element's content depends on the options provided in the query.",
      "type": "object",
      "properties": {
        "formatVersion": {
          "description": "Format Version property",
          "type": "string",
          "readOnly": true
        },
        "matrix": {
          "description": "Results as a 2 dimensional array of route summaries.",
          "type": "array",
          "readOnly": true,
          "items": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/definitions/RouteMatrix"
            }
          }
        },
        "summary": {
          "$ref": "#/definitions/RouteMatrixSummary"
        }
      }
    },
    "RouteMatrixSummary": {
      "description": "Summary object",
      "type": "object",
      "readOnly": true,
      "properties": {
        "successfulRoutes": {
          "description": "Number of successful routes in the response.",
          "type": "integer",
          "readOnly": true
        },
        "totalRoutes": {
          "description": "Total number of routes requested. Number of cells in the input matrix.",
          "type": "integer",
          "readOnly": true
        }
      }
    },
    "RouteMatrix": {
      "description": "Matrix result object",
      "type": "object",
      "readOnly": true,
      "properties": {
        "statusCode": {
          "description": "StatusCode property for the current cell in the input matrix.",
          "type": "integer",
          "readOnly": true
        },
        "response": {
          "$ref": "#/definitions/RouteMatrixResultResponse"
        }
      }
    },
    "RouteMatrixResultResponse": {
      "description": "Response object of the current cell in the input matrix.",
      "type": "object",
      "readOnly": true,
      "properties": {
        "routeSummary": {
          "x-ms-client-name": "summary",
          "$ref": "#/definitions/RouteLegSummary"
        }
      }
    },
    "RouteMatrixQuery": {
      "description": "An object with a matrix of coordinates.",
      "type": "object",
      "properties": {
        "origins": {
          "$ref": "../../../Common/preview/1.0/common.json#/definitions/GeoJsonMultiPoint"
        },
        "destinations": {
          "$ref": "../../../Common/preview/1.0/common.json#/definitions/GeoJsonMultiPoint"
        }
      }
    },
    "RouteDirectionsBatchResult": {
      "description": "This object is returned from a successful Route Directions Batch service call.",
      "type": "object",
      "allOf": [
        {
          "$ref": "../../../Common/preview/1.0/common.json#/definitions/BatchResult"
        }
      ],
      "properties": {
        "batchItems": {
          "description": "Array containing the batch results.",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/RouteDirectionsBatchItem"
          }
        }
      }
    },
    "RouteDirectionsBatchItem": {
      "description": "An item returned from Route Directions Batch service call.",
      "type": "object",
      "allOf": [
        {
          "$ref": "../../../Common/preview/1.0/common.json#/definitions/BatchResultItem"
        }
      ],
      "properties": {
        "response": {
          "description": "The result of the query. RouteDirections if the query completed successfully, ErrorResponse otherwise.",
          "type": "object",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/RouteDirections"
            },
            {
              "$ref": "../../../../../common-types/data-plane/v1/types.json#/definitions/ErrorResponse"
            }
          ]
        }
      }
    },
    "DepartureTime": {
      "description": "The estimated departure time for the route or leg.",
      "type": "string",
      "readOnly": true,
      "format": "date-time"
    },
    "ArrivalTime": {
      "description": "The estimated arrival time for the route or leg.",
      "type": "string",
      "readOnly": true,
      "format": "date-time"
    },
    "ResponseSectionType": {
      "description": "Section types of the reported route response",
      "type": "string",
      "readOnly": true,
      "enum": [
        "CAR_TRAIN",
        "COUNTRY",
        "FERRY",
        "MOTORWAY",
        "PEDESTRIAN",
        "TOLL_ROAD",
        "TOLL_VIGNETTE",
        "TRAFFIC",
        "TRAVEL_MODE",
        "TUNNEL",
        "CARPOOL",
        "URBAN"
      ],
      "x-ms-enum": {
        "name": "ResponseSectionType",
        "modelAsString": true,
        "values": [
          {
            "value": "CAR_TRAIN",
            "name": "CarOrTrain",
            "description": "Sections of the route that are cars or trains."
          },
          {
            "value": "COUNTRY",
            "name": "Country",
            "description": "Sections indicating which countries/regions the route is in."
          },
          {
            "value": "FERRY",
            "name": "Ferry",
            "description": "Sections of the route that are ferries."
          },
          {
            "value": "MOTORWAY",
            "name": "Motorway",
            "description": "Sections of the route that are motorways."
          },
          {
            "value": "PEDESTRIAN",
            "name": "Pedestrian",
            "description": "Sections of the route that are only suited for pedestrians."
          },
          {
            "value": "TOLL_ROAD",
            "name": "TollRoad",
            "description": "Sections of the route that require a toll to be payed."
          },
          {
            "value": "TOLL_VIGNETTE",
            "name": "TollVignette",
            "description": "Sections of the route that require a toll vignette to be present."
          },
          {
            "value": "TRAFFIC",
            "name": "Traffic",
            "description": "Sections of the route that contain traffic information."
          },
          {
            "value": "TRAVEL_MODE",
            "name": "TravelMode",
            "description": "Sections in relation to the request parameter `travelMode`."
          },
          {
            "value": "TUNNEL",
            "name": "Tunnel",
            "description": "Sections of the route that are tunnels."
          },
          {
            "value": "CARPOOL",
            "name": "Carpool",
            "description": "Sections of the route that require use of carpool (HOV/High Occupancy Vehicle) lanes."
          },
          {
            "value": "URBAN",
            "name": "Urban",
            "description": "Sections of the route that are located within urban areas."
          }
        ]
      }
    },
    "ResponseTravelMode": {
      "description": "Travel mode for the calculated route. The value will be set to `other` if the requested mode of transport is not possible in this section",
      "type": "string",
      "readOnly": true,
      "enum": [
        "car",
        "truck",
        "taxi",
        "bus",
        "van",
        "motorcycle",
        "bicycle",
        "pedestrian",
        "other"
      ],
      "x-ms-enum": {
        "name": "ResponseTravelMode",
        "modelAsString": true,
        "values": [
          {
            "value": "car",
            "description": "The returned routes are optimized for cars."
          },
          {
            "value": "truck",
            "description": "The returned routes are optimized for commercial vehicles, like for trucks."
          },
          {
            "value": "taxi",
            "description": "The returned routes are optimized for taxis. BETA functionality."
          },
          {
            "value": "bus",
            "description": "The returned routes are optimized for buses, including the use of bus only lanes. BETA functionality."
          },
          {
            "value": "van",
            "description": "The returned routes are optimized for vans. BETA functionality."
          },
          {
            "value": "motorcycle",
            "description": "The returned routes are optimized for motorcycles. BETA functionality."
          },
          {
            "value": "bicycle",
            "description": "The returned routes are optimized for bicycles, including use of bicycle lanes."
          },
          {
            "value": "pedestrian",
            "description": "The returned routes are optimized for pedestrians, including the use of sidewalks."
          },
          {
            "value": "other",
            "description": "The given mode of transport is not possible in this section"
          }
        ]
      }
    },
    "SimpleCategory": {
      "description": "Type of the incident. Can currently be JAM, ROAD_WORK, ROAD_CLOSURE, or OTHER. See \"tec\" for detailed information.",
      "type": "string",
      "readOnly": true,
      "enum": [
        "JAM",
        "ROAD_WORK",
        "ROAD_CLOSURE",
        "OTHER"
      ],
      "x-ms-enum": {
        "name": "SimpleCategory",
        "modelAsString": true,
        "values": [
          {
            "value": "JAM",
            "name": "Jam",
            "description": "Traffic jam."
          },
          {
            "value": "ROAD_WORK",
            "name": "RoadWork",
            "description": "Road work."
          },
          {
            "value": "ROAD_CLOSURE",
            "name": "RoadClosure",
            "description": "Road closure."
          },
          {
            "value": "OTHER",
            "name": "Other",
            "description": "Other."
          }
        ]
      }
    },
    "DelayMagnitude": {
      "description": "The magnitude of delay caused by the incident. These values correspond to the values of the response field ty of the [Get Traffic Incident Detail API](https://docs.microsoft.com/rest/api/maps/traffic/gettrafficincidentdetail). ",
      "readOnly": true,
      "type": "string",
      "enum": [
        "0",
        "1",
        "2",
        "3",
        "4"
      ],
      "x-ms-enum": {
        "name": "DelayMagnitude",
        "modelAsString": true,
        "values": [
          {
            "value": "0",
            "name": "Unknown",
            "description": "Unknown."
          },
          {
            "value": "1",
            "name": "Minor",
            "description": "Minor."
          },
          {
            "value": "2",
            "name": "Moderate",
            "description": "Moderate."
          },
          {
            "value": "3",
            "name": "Major",
            "description": "Major."
          },
          {
            "value": "4",
            "name": "Undefined",
            "description": "Undefined, used for road closures and other indefinite delays."
          }
        ]
      }
    }
  }
}
