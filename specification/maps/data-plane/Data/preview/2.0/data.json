{
  "swagger": "2.0",
  "info": {
    "title": "Azure Maps Data Service",
    "version": "2.0",
    "description": "APIs for uploading map data to Azure Maps."
  },
  "x-ms-parameterized-host": {
    "hostTemplate": "{geography}.atlas.microsoft.com",
    "parameters": [
      {
        "$ref": "../../../Common/preview/1.0/common.json#/parameters/GeographicResourceLocation"
      }
    ]
  },
  "schemes": [
    "https"
  ],
  "consumes": [],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "AADToken": {
      "type": "oauth2",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "flow": "implicit",
      "description": "These are the [Microsoft Entra OAuth 2.0](/azure/active-directory/develop/v1-overview) Flows. When paired with [Azure role-based access](/azure/role-based-access-control/overview) control it can be used to control access to Azure Maps REST APIs. Azure role-based access controls are used to designate access to one or more Azure Maps resource account or sub-resources. Any user, group, or service principal can be granted access via a  built-in role or a custom role composed of one or more permissions to Azure Maps REST APIs.\n\nTo implement scenarios, we recommend viewing [authentication concepts](https://aka.ms/amauth). In summary, this security definition provides a solution for modeling application(s) via objects capable of access control on specific APIs and scopes.\n\n#### Notes\n* This security definition **requires** the use of the `x-ms-client-id` header to indicate which Azure Maps resource the application is requesting access to. This can be acquired from the [Maps management](https://aka.ms/amauthdetails) API.\n* \nThe `Authorization URL` is specific to the Azure public cloud instance. Sovereign clouds have unique Authorization URLs and Microsoft Entra ID configurations. \n* \nThe Azure role-based access control is configured from the [Azure management plane](https://aka.ms/amrbac) via Azure portal, PowerShell, CLI, Azure SDKs, or REST APIs.\n* \nUsage of the [Azure Maps Web SDK](https://aka.ms/amaadmc) allows for configuration based setup of an application for multiple use cases.\n* For more information on Microsoft identity platform, see [Microsoft identity platform overview](/entra/identity-platform/v2-overview).",
      "scopes": {
        "https://atlas.microsoft.com/.default": "https://atlas.microsoft.com/.default"
      }
    },
    "SharedKey": {
      "type": "apiKey",
      "description": "This is a shared key that is provisioned when you [Create an Azure Maps account](/azure/azure-maps/quick-demo-map-app#create-an-azure-maps-account) in the Azure portal or using PowerShell, CLI, Azure SDKs, or REST API.\n\n With this key, any application can access all REST API. In other words, this key can be used as a master key in the account that they are issued in.\n\n For publicly exposed applications, our recommendation is to use the [confidential client applications](/azure/azure-maps/authentication-best-practices#confidential-client-applications) approach to access Azure Maps REST APIs so your key can be securely stored.",
      "name": "subscription-key",
      "in": "query"
    },
    "SasToken": {
      "type": "apiKey",
      "description": "This is a shared access signature token is created from the List SAS operation on the [Azure Maps resource](https://aka.ms/amauth) through the Azure management plane via Azure portal, PowerShell, CLI, Azure SDKs, or REST APIs.\n\n With this token, any application is authorized to access with Azure role-based access controls and fine-grain control to the expiration, rate, and region(s) of use for the particular token. In other words, the SAS Token can be used to allow applications to control access in a more secured way than the shared key.\n\n For publicly exposed applications, our recommendation is to configure a specific list of allowed origins on the [Map account resource](https://aka.ms/amauth) to limit rendering abuse and regularly renew the SAS Token.",
      "name": "SAS Token",
      "in": "header"
    }
  },
  "security": [
    {
      "AADToken": [
        "https://atlas.microsoft.com/.default"
      ]
    },
    {
      "SharedKey": []
    },
    {
      "SasToken": []
    }
  ],
  "responses": {},
  "parameters": {
    "ApiVersion": {
      "name": "api-version",
      "description": "Version number of Azure Maps API.",
      "type": "string",
      "in": "query",
      "required": true,
      "default": "2.0",
      "x-ms-parameter-location": "client"
    },
    "DataFormat": {
      "name": "dataFormat",
      "description": "Data format of the content being uploaded.",
      "type": "string",
      "in": "query",
      "required": true,
      "enum": [
        "geojson",
        "zip",
        "dwgzippackage"
      ],
      "x-ms-enum": {
        "name": "DataFormat",
        "modelAsString": true,
        "values": [
          {
            "value": "geojson",
            "description": "[GeoJSON](https://tools.ietf.org/html/rfc7946) is a JSON based geospatial data interchange format."
          },
          {
            "value": "zip",
            "description": "Compressed data format."
          },
          {
            "name": "dwgZipPackage",
            "value": "dwgzippackage",
            "description": "ZIP package containing DWG file."
          }
        ]
      },
      "x-ms-parameter-location": "method"
    },
    "UniqueDataId": {
      "name": "udid",
      "description": "The unique data id for the content. The `udid` must have been obtained from a successful [Data Upload](/rest/api/maps/data/upload) call.",
      "type": "string",
      "in": "path",
      "required": true,
      "x-ms-parameter-location": "method"
    },
    "UploadDataDescription": {
      "name": "description",
      "description": "The description to be given to the upload.",
      "type": "string",
      "in": "query",
      "x-ms-parameter-location": "method"
    },
    "DataUploadOperationId": {
      "name": "operationId",
      "type": "string",
      "in": "path",
      "description": "The ID to query the status for the data upload request.",
      "required": true,
      "x-ms-parameter-location": "method"
    }
  },
  "paths": {
    "/mapData": {
      "post": {
        "summary": "Use to upload data content to an Azure Maps account.",
        "description": "\n>\n> [!NOTE]\n>\n> **Azure Maps Data service retirement**\n>\n> The Azure Maps Data service (both [v1](/rest/api/maps/data?view=rest-maps-1.0) and [v2](/rest/api/maps/data)) is now deprecated and will be retired on 9/16/24. To avoid service disruptions, all calls to the Data service will need to be updated to use the Azure Maps [Data Registry](/rest/api/maps/data-registry) service by 9/16/24. For more information, see [How to create data registry](/azure/azure-maps/how-to-create-data-registries).\n\nThe `Data Upload` API is an HTTP `POST` request that allows the caller to upload data content to the Azure Maps service.\nYou can use this API in a scenario like uploading a collection of Geofences in `GeoJSON`format, for use in our [Azure Maps Geofencing Service](/rest/api/maps/spatial).\n\n>[!Important]\n>By using this feature, you agree to the preview legal terms. See the [Preview Supplemental Terms](https://azure.microsoft.com/support/legal/preview-supplemental-terms/) for additional details.\n\n## Submit Upload Request\n\nTo upload your content you will use a `POST` request. The request body will contain the data to upload. The `dataFormat` query parameter will contain the format for the data, the `dataSharingLevel` query parameter can contain the sharing level for the data. The `Content-Type` header will be set to the content type of the data.\n\nFor example, to upload a collection of geofences  in `GeoJSON` format, set the request body to the geofence content. Set the `dataFormat` query parameter to _geojson_, and set the `Content-Type` header to either one of the following media types:\n\n- `application/json`\n- `application/vnd.geo+json`\n- `application/octet-stream`\n\nHere's a sample request body for uploading a simple Geofence represented as a circle geometry using a center point and a radius. The sample below is in `GeoJSON`:\n\n```json\n{\n    \"type\": \"FeatureCollection\",\n    \"features\": [{\n        \"type\": \"Feature\",\n        \"geometry\": {\n            \"type\": \"Point\",\n            \"coordinates\": [-122.126986, 47.639754]\n        },\n        \"properties\": {\n            \"geometryId\": \"001\",\n            \"radius\": 500\n        }\n    }]\n}\n```\n\nThe Data Upload API performs a long-running operation.\n\n## Data Upload Limits\n\nPlease, be aware that currently every Azure Maps account has a [data storage limit](/azure/azure-resource-manager/management/azure-subscription-service-limits#azure-maps-limits). Once the storage limit is reached, all the new upload API calls will return a `409 Conflict` http error response. You can always use the [Data Delete](/rest/api/maps/data/delete) API to delete old/unused content and create space for new uploads.",
        "operationId": "Data_Upload",
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-examples": {
          "Upload GeoJSON data containing geometries that represent a collection of geofences": {
            "$ref": "./examples/Data_Upload.json"
          }
        },
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "parameters": [
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/ClientId"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "$ref": "#/parameters/UploadDataDescription"
          },
          {
            "$ref": "#/parameters/DataFormat"
          },
          {
            "name": "UploadContent",
            "in": "body",
            "description": "The content to upload.",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/200AsyncV2"
          },
          "202": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/202AsyncV2"
          },
          "409": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/409StorageLimit"
          },
          "default": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/default"
          }
        }
      },
      "get": {
        "summary": "Use to fetch a list of all content previously uploaded using [Data Upload](/rest/api/maps/data/upload).",
        "description": "\n\n> [!NOTE]\n>\n> **Azure Maps Data service retirement**\n>\n> The Azure Maps Data service (both [v1](/rest/api/maps/data?view=rest-maps-1.0) and [v2](/rest/api/maps/data)) is now deprecated and will be retired on 9/16/24. To avoid service disruptions, all calls to the Data service will need to be updated to use the Azure Maps [Data Registry](/rest/api/maps/data-registry) service by 9/16/24. For more information, see [How to create data registry](/azure/azure-maps/how-to-create-data-registries).\n\nThe `Data List` API is an HTTP `GET` request that allows the caller to fetch a list of all content previously uploaded using the [Data Upload](/rest/api/maps/data/upload) API.\n\n### Submit List Request\n\nTo list all your map data content you will issue a `GET` request with no additional parameters.\n\n\n### List Data Response\n\nThe Data List API returns the complete list of all data in `json` format. The response contains the following details for each data resource:\n\n  > udid - The unique data id for the data resource.\n\n  > location - The location of the data resource. Execute an HTTP `GET` request on this location to download the data.\n\n\nHere's a sample response returning the `udid` and `location` of 3 data resources:  \n\n\n\n\n```json\n{\n    \"mapDataList\": \n    [\n        {\n            \"udid\": \"9a1288fa-1858-4a3b-b68d-13a8j5af7d7c\",\n            \"location\": \"https://us.atlas.microsoft.com/mapData/9a1288fa-1858-4a3b-b68d-13a8j5af7d7c?api-version=1.0\",\n            \"sizeInBytes\": 29920,\n            \"uploadStatus\": \"Completed\"\n        },\n        {\n            \"udid\": \"8b1288fa-1958-4a2b-b68e-13a7i5af7d7c\",\n            \"location\": \"https://us.atlas.microsoft.com/mapData/8b1288fa-1958-4a2b-b68e-13a7i5af7d7c?api-version=1.0\",\n            \"sizeInBytes\": 1339,\n            \"uploadStatus\": \"Completed\"\n        },\n        {\n            \"udid\": \"7c1288fa-2058-4a1b-b68f-13a6h5af7d7c\",\n            \"location\": \"https://us.atlas.microsoft.com/mapData/7c1288fa-2058-4a1b-b68f-13a6h5af7d7c?api-version=1.0\",\n            \"sizeInBytes\": 1650,\n            \"uploadStatus\": \"Pending\"\n        }]\n}\n```\n\n\n",
        "operationId": "Data_List",
        "x-ms-examples": {
          "List all the previously uploaded data": {
            "$ref": "./examples/Data_List.json"
          }
        },
        "parameters": [
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/ClientId"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "List data request completed successfully. The response body contains a list of all the previously uploaded data.",
            "schema": {
              "$ref": "#/definitions/MapDataListResult"
            }
          },
          "default": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/default"
          }
        }
      }
    },
    "/mapData/{udid}": {
      "put": {
        "summary": "Use to update data content previously uploaded using [Data Upload](/rest/api/maps/data/upload).",
        "description": "\n\n> [!NOTE]\n>\n> **Azure Maps Data service retirement**\n>\n> The Azure Maps Data service (both [v1](/rest/api/maps/data?view=rest-maps-1.0) and [v2](/rest/api/maps/data)) is now deprecated and will be retired on 9/16/24. To avoid service disruptions, all calls to the Data service will need to be updated to use the Azure Maps [Data Registry](/rest/api/maps/data-registry) service by 9/16/24. For more information, see [How to create data registry](/azure/azure-maps/how-to-create-data-registries).\n\nThe `Data Update` API is an HTTP `PUT` request that allows the caller to update previously uploaded data content.\n\nYou can use this API in a scenario like adding or removing geofences to or from an existing collection of geofences. Geofences are uploaded using the [Data Upload](/rest/api/maps/data/upload) API, for use in the [Azure Maps Geofencing Service](/rest/api/maps/spatial).\n\nPlease note that the Update API will *replace* and *override* the existing data content.\n\n>[!Important]\n>By using this feature, you agree to the preview legal terms. See the [Preview Supplemental Terms](https://azure.microsoft.com/support/legal/preview-supplemental-terms/) for additional details.\n\n## Submit Update Request\n\nTo update your content you will use a `PUT` request. The request body will contain the new data that will replace the existing data. The `Content-Type` header will be set to the content type of the data, and the path will contain the `udid` of the data to be update.\n\nFor example, to update a collection of geofences that were previously uploaded using the Upload API, place the new geofence content in the request body. Set the `udid` parameter in the path to the `udid` of the data received previously in the upload API response. And set the `Content-Type` header to one of the following media types:\n\n- `application/json`\n- `application/vnd.geo+json`\n- `application/octet-stream`\n\nHere's a sample request body for updating a simple Geofence. It's represented as a circle geometry using a center point and a radius. The sample below is in `GeoJSON`:\n\n```json\n{\n    \"type\": \"FeatureCollection\",\n    \"features\": [{\n        \"type\": \"Feature\",\n        \"geometry\": {\n            \"type\": \"Point\",\n            \"coordinates\": [-122.126986, 47.639754]\n        },\n        \"properties\": {\n            \"geometryId\": \"001\",\n            \"radius\": 500\n        }\n    }]\n}\n```\n\nThe previously uploaded geofence had a radius of 100m. The above request will update it to 500m.\n\nThe Data Update API performs a long-running operation.\n\n## Data Update Limits\n\nPlease, be aware that currently every Azure Maps account has a [data storage limit](/azure/azure-resource-manager/management/azure-subscription-service-limits#azure-maps-limits). Once the storage limit is reached, all the new upload API calls will return a `409 Conflict` http error response. You can always use the [Data Delete](/rest/api/maps/data/delete) API to delete old/unused content and create space for new uploads.",
        "operationId": "Data_Update",
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-examples": {
          "Update previously uploaded GeoJSON data containing geometries that represent a collection of geofences": {
            "$ref": "./examples/Data_Update.json"
          }
        },
        "parameters": [
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/ClientId"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "$ref": "#/parameters/UniqueDataId"
          },
          {
            "$ref": "#/parameters/UploadDataDescription"
          },
          {
            "name": "UpdateContent",
            "in": "body",
            "description": "The new content that will update/replace the previously uploaded content.",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/200AsyncV2"
          },
          "202": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/202AsyncV2"
          },
          "409": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/409StorageLimit"
          },
          "default": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/default"
          }
        }
      },
      "get": {
        "summary": "Use to download data previously uploaded using [Data Upload](/rest/api/maps/data/upload).",
        "description": "\n\n> [!NOTE]\n>\n> **Azure Maps Data service retirement**\n>\n> The Azure Maps Data service (both [v1](/rest/api/maps/data?view=rest-maps-1.0) and [v2](/rest/api/maps/data)) is now deprecated and will be retired on 9/16/24. To avoid service disruptions, all calls to the Data service will need to be updated to use the Azure Maps [Data Registry](/rest/api/maps/data-registry) service by 9/16/24. For more information, see [How to create data registry](/azure/azure-maps/how-to-create-data-registries).\n\nThe `Data Download` API is and HTTP `GET` request that allows the caller to download a previously uploaded data content.\n\nYou can use this API in a scenario like downloading an existing collection of geofences uploaded previously using the [Data Upload](/rest/api/maps/data/upload) API for use in our [Azure Maps Geofencing Service](/rest/api/maps/spatial).\n\n>[!Important]\n>By using this feature, you agree to the preview legal terms. See the [Preview Supplemental Terms](https://azure.microsoft.com/support/legal/preview-supplemental-terms/) for additional details.\n\n### Submit Download Request\n\nTo download your content you will use a `GET` request where the path will contain the `udid` of the data to download. Optionally, you can also pass in an `Accept` header to specify a preference for the `Content-Type` of the data response. \n\nFor example, to download a collection of geofences previously uploaded using the Upload API, set the `udid` parameter in the path to the `udid` of the data received previously in the upload API response and set the `Accept` header to either one of the following media types: \n\n  - `application/json`\n  - `application/vnd.geo+json`\n  - `application/octet-stream`\n\n\n### Download Data Response\n\nThe Download API will return an HTTP `200 OK` response if the data resource with the passed-in `udid` is found, where the response body will contain the content of the data resource.\n\nAn HTTP `400 Bad Request` error response will be returned if the data resource with the passed-in `udid` is not found.\n\nHere's a sample response body for a simple geofence represented in `GeoJSON` uploaded previously using the Upload API:\n\n\n\n```json\n{\n    \"type\": \"FeatureCollection\",\n    \"features\": [{\n        \"type\": \"Feature\",\n        \"geometry\": {\n            \"type\": \"Point\",\n            \"coordinates\": [-122.126986, 47.639754]\n        },\n        \"properties\": {\n            \"geometryId\": \"001\",\n            \"radius\": 500\n        }\n    }]\n}\n```",
        "operationId": "Data_Download",
        "x-ms-examples": {
          "Download previously uploaded GeoJSON data containing geometries that represent a collection of geofences": {
            "$ref": "./examples/Data_Download.json"
          }
        },
        "produces": [
          "application/json",
          "application/vnd.geo+json",
          "application/octet-stream"
        ],
        "parameters": [
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/ClientId"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "$ref": "#/parameters/UniqueDataId"
          }
        ],
        "responses": {
          "200": {
            "description": "Data download request completed successfully. The response body will contain the content for the passed in `udid`.",
            "schema": {
              "type": "file"
            },
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content-type for the Download API response."
              }
            }
          },
          "default": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/default"
          }
        }
      },
      "delete": {
        "summary": "Use to delete data previously uploaded using [Data Upload](/rest/api/maps/data/upload).",
        "description": "\n\n> [!NOTE]\n>\n> **Azure Maps Data service retirement**\n>\n> The Azure Maps Data service (both [v1](/rest/api/maps/data?view=rest-maps-1.0) and [v2](/rest/api/maps/data)) is now deprecated and will be retired on 9/16/24. To avoid service disruptions, all calls to the Data service will need to be updated to use the Azure Maps [Data Registry](/rest/api/maps/data-registry) service by 9/16/24. For more information, see [How to create data registry](/azure/azure-maps/how-to-create-data-registries).\n\nThe `Data Delete` API is an HTTP `DELETE` request that allows the caller to delete a previously uploaded data content.\n\nYou can use this API in a scenario like removing geofences previously uploaded using the [Data Upload](/rest/api/maps/data/upload) API for use in the [Azure Maps Geofencing Service](/rest/api/maps/spatial). You can also use this API to delete old/unused uploaded content and create space for new content.\n\n>[!Important]\n>By using this feature, you agree to the preview legal terms. See the [Preview Supplemental Terms](https://azure.microsoft.com/support/legal/preview-supplemental-terms/) for additional details.\n\n### Submit Delete Request\n\nTo delete your content you will issue a `DELETE` request where the path will contain the `udid` of the data to delete.\n\nFor example, to delete a collection of geofences previously uploaded using the Upload API, set the `udid` parameter in the path to the `udid` of the data received previously in the upload API response. \n\n\n### Delete Data Response\n\nThe Data Delete API returns an HTTP `204 No Content` response with an empty body, if the data resource was deleted successfully.\n\nAn HTTP `400 Bad Request` error response will be returned if the data resource with the passed-in `udid` is not found.",
        "operationId": "Data_Delete",
        "x-ms-examples": {
          "Delete previously uploaded GeoJSON data containing geometries that represent a collection of geofences": {
            "$ref": "./examples/Data_Delete.json"
          }
        },
        "parameters": [
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/ClientId"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "$ref": "#/parameters/UniqueDataId"
          }
        ],
        "responses": {
          "204": {
            "description": "Data delete request completed successfully. The content for `udid` was deleted on the server."
          },
          "default": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/default"
          }
        }
      }
    },
    "/mapData/operations/{operationId}": {
      "get": {
        "summary": "Use to check the status of a [Data Upload](/rest/api/maps/data/upload) request and get the `udid` value once completed.",
        "description": "\n\n> [!NOTE]\n>\n> **Azure Maps Data service retirement**\n>\n> The Azure Maps Data service (both [v1](/rest/api/maps/data?view=rest-maps-1.0) and [v2](/rest/api/maps/data)) is now deprecated and will be retired on 9/16/24. To avoid service disruptions, all calls to the Data service will need to be updated to use the Azure Maps [Data Registry](/rest/api/maps/data-registry) service by 9/16/24. For more information, see [How to create data registry](/azure/azure-maps/how-to-create-data-registries).\n\n The `Get Operation` API is an HTTP `GET` request that allows the caller to check the status of a [Data Upload](/rest/api/maps/data/upload) operation and get the `udid` value once completed.  This path will be obtained from a call to POST /mapData. While in progress, an HTTP 200 response code will be returned with no extra headers - followed by an HTTP 200 response code with a `Resource-Location` header once successfully completed. \n\n>[!Important]\n>By using this feature, you agree to the preview legal terms. See the [Preview Supplemental Terms](https://azure.microsoft.com/support/legal/preview-supplemental-terms/) for additional details.\n\n",
        "operationId": "Data_GetOperation",
        "x-ms-examples": {
          "Get the status of an operation which is still running": {
            "$ref": "./examples/Data_GetOperationStillRunning.json"
          },
          "Get the status of an operation which has finished successfully": {
            "$ref": "./examples/Data_GetOperation.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "$ref": "#/parameters/DataUploadOperationId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/200AsyncV2"
          },
          "default": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/default"
          }
        }
      }
    }
  },
  "definitions": {
    "MapDataListResult": {
      "description": "The response model for the Data List API. Returns a list of all the previously uploaded data.",
      "type": "object",
      "properties": {
        "mapDataList": {
          "description": "A list of all the previously uploaded data.",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/MapData"
          }
        }
      }
    },
    "DataFormat": {
      "description": "Data format of the uploaded content.",
      "type": "string",
      "readOnly": true,
      "enum": [
        "geojson",
        "zip",
        "dwgzippackage"
      ],
      "x-ms-enum": {
        "name": "DataFormat",
        "modelAsString": true,
        "values": [
          {
            "value": "geojson",
            "description": "[GeoJSON](https://tools.ietf.org/html/rfc7946) is a JSON based geospatial data interchange format."
          },
          {
            "value": "zip",
            "description": "Compressed data format."
          },
          {
            "name": "dwgZipPackage",
            "value": "dwgzippackage",
            "description": "ZIP package containing DWG file."
          }
        ]
      }
    },
    "UploadStatus": {
      "description": "The current upload status of the content.",
      "type": "string",
      "readOnly": true,
      "enum": [
        "Pending",
        "Completed",
        "Failed"
      ],
      "x-ms-enum": {
        "name": "UploadStatus",
        "values": [
          {
            "value": "Pending",
            "description": "Upload is processing"
          },
          {
            "value": "Completed",
            "description": "Upload validation and processing completed"
          },
          {
            "value": "Failed",
            "description": "Upload validation and/or processing failure"
          }
        ]
      }
    },
    "MapData": {
      "description": "Detail information for the data.",
      "type": "object",
      "properties": {
        "udid": {
          "description": "The unique data id for the data.",
          "type": "string",
          "readOnly": true
        },
        "location": {
          "x-ms-client-name": "locationURL",
          "description": "The location of the data. Execute an HTTP `GET` request on this location to download the data.",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "sizeInBytes": {
          "description": "The size of the content in bytes.",
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "uploadStatus": {
          "$ref": "#/definitions/UploadStatus"
        },
        "dataFormat": {
          "$ref": "#/definitions/DataFormat"
        },
        "description": {
          "description": "The current description.",
          "type": "string",
          "readOnly": true
        }
      }
    }
  }
}
