{
  "swagger": "2.0",
  "info": {
    "title": "Azure Maps Features Service",
    "version": "2023-03-01-preview",
    "description": "Azure Maps Features REST APIs"
  },
  "x-ms-parameterized-host": {
    "hostTemplate": "{geography}.atlas.microsoft.com",
    "parameters": [
      {
        "$ref": "../../../Common/preview/1.0/common.json#/parameters/GeographicResourceLocation"
      }
    ]
  },
  "schemes": [
    "https"
  ],
  "consumes": [],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "AADToken": {
      "type": "oauth2",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "flow": "implicit",
      "description": "These are the [Azure Active Directory OAuth2](https://docs.microsoft.com/azure/active-directory/develop/v1-overview) Flows. When paired with [Azure role-based access](https://docs.microsoft.com/azure/role-based-access-control/overview) control it can be used to control access to Azure Maps REST APIs. Azure role-based access controls are used to designate access to one or more Azure Maps resource account or sub-resources. Any user, group, or service principal can be granted access via a  built-in role or a custom role composed of one or more permissions to Azure Maps REST APIs.\n\nTo implement scenarios, we recommend viewing [authentication concepts](https://aka.ms/amauth). In summary, this security definition provides a solution for modeling application(s) via objects capable of access control on specific APIs and scopes.\n\n#### Notes\n* This security definition **requires** the use of the `x-ms-client-id` header to indicate which Azure Maps resource the application is requesting access to. This can be acquired from the [Maps management API](https://aka.ms/amauthdetails).\n* \nThe `Authorization URL` is specific to the Azure public cloud instance. Sovereign clouds have unique Authorization URLs and Azure Active directory configurations. \n* \nThe Azure role-based access control is configured from the [Azure management plane](https://aka.ms/amrbac) via Azure portal, PowerShell, CLI, Azure SDKs, or REST APIs.\n* \nUsage of the [Azure Maps Web SDK](https://aka.ms/amaadmc) allows for configuration based setup of an application for multiple use cases.\n* Currently, Azure Active Directory [v1.0 or v2.0](https://docs.microsoft.com/azure/active-directory/develop/azure-ad-endpoint-comparison) supports Work, School, and Guests but does not support Personal accounts.",
      "scopes": {
        "https://atlas.microsoft.com/.default": "https://atlas.microsoft.com/.default"
      }
    },
    "SharedKey": {
      "type": "apiKey",
      "description": "This is a shared key that is provisioned when creating an [Azure Maps resource](https://aka.ms/amauth) through the Azure management plane  via Azure portal, PowerShell, CLI, Azure SDKs, or REST APIs.\n\n With this key, any application is authorized to access  all REST APIs. In other words, these can currently be treated as master keys to the account which they are issued for.\n\n For publicly exposed applications, our recommendation is to use server-to-server access of Azure Maps REST APIs where this key can be securely stored.",
      "name": "subscription-key",
      "in": "query"
    },
    "SasToken": {
      "type": "apiKey",
      "description": "This is a shared access signature token is created from the List SAS operation on the [Azure Maps resource](https://aka.ms/amauth) through the Azure management plane via Azure portal, PowerShell, CLI, Azure SDKs, or REST APIs.\n\n With this token, any application is authorized to access with Azure role-based access controls and fine-grain control to the expiration, rate, and region(s) of use for the particular token. In other words, the SAS Token can be used to allow applications to control access in a more secured way than the shared key.\n\n For publicly exposed applications, our recommendation is to configure a specific list of allowed origins on the [Map account resource](https://aka.ms/amauth) to limit rendering abuse and regularly renew the SAS Token.",
      "name": "SAS Token",
      "in": "header"
    }
  },
  "security": [
    {
      "AADToken": [
        "https://atlas.microsoft.com/.default"
      ]
    },
    {
      "SharedKey": []
    },
    {
      "SasToken": []
    }
  ],
  "responses": {},
  "parameters": {
    "ApiVersion": {
      "name": "api-version",
      "description": "Version number of Azure Maps API.",
      "type": "string",
      "in": "query",
      "required": true,
      "x-ms-parameter-location": "client"
    },
    "LimitFeatures": {
      "name": "limit",
      "in": "query",
      "type": "integer",
      "format": "int32",
      "minimum": 1,
      "maximum": 5000,
      "description": "The optional limit parameter limits the number of features that are presented in the response document.\nOnly features that are on the first level of the collection in the response document are counted. Nested objects contained within the explicitly requested features shall not be counted.\n* Minimum = 1 * Maximum = 500 * Default = 10",
      "x-ms-parameter-location": "method"
    },
    "Filter": {
      "name": "filter",
      "in": "query",
      "type": "string",
      "description": "Filter expression to search for features with specific property values in a given collection. Only feature properties of scalar type and equals operator are supported.\nThis is a special parameter where the parameter name is a case sensitive property name. The scheme for this parameter is {property name}={property value}. Unless \"filter\" is one of the property names in the collection, \"filter\" should not be used as a parameter name. To search for features with \"name\" property value \"21N13\", use \"name=21N13\".\nMultiple filters are supported and should be represented as multiple query parameters. E.g., <property1>=<value1>&<property2>=<value2> String values are case sensitive.",
      "x-ms-parameter-location": "method"
    },
    "Bbox": {
      "name": "bbox",
      "x-ms-client-name": "boundingBox",
      "in": "query",
      "type": "array",
      "collectionFormat": "csv",
      "items": {
        "type": "number",
        "format": "double"
      },
      "description": "Only features that have a geometry that intersects the supplied bounding box are selected.\n* Lower left corner, coordinate axis 1 * Lower left corner, coordinate axis 2 * Upper right corner, coordinate axis 1 * Upper right corner, coordinate axis 2\nThe coordinate reference system of the values is WGS84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless a different coordinate reference system is specified in the parameter `bbox-crs`.\nFor WGS84 longitude/latitude the values are in most cases the sequence of minimum longitude, minimum latitude, maximum longitude and maximum latitude. However, in cases where the box spans the antimeridian the first value (west-most box edge) is larger than the third value (east-most box edge).",
      "x-ms-parameter-location": "method"
    },
    "CollectionId": {
      "name": "collectionId",
      "in": "path",
      "type": "string",
      "required": true,
      "description": "Identifier (name) of a specific collection.",
      "x-ms-parameter-location": "method"
    },
    "FeatureId": {
      "name": "featureId",
      "in": "path",
      "type": "string",
      "description": "Case sensitive identifier of a specific feature.",
      "required": true,
      "x-ms-parameter-location": "method"
    },
    "FeatureBody": {
      "name": "feature",
      "in": "body",
      "required": true,
      "description": "A valid `GeoJSON Feature` object type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.2) for details.",
      "x-ms-parameter-location": "client",
      "schema": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/definitions/FeatureType"
          },
          {
            "$ref": "#/definitions/FeatureAttributes"
          }
        ]
      }
    },
    "FeatureAttributesBody": {
      "name": "featureAttributes",
      "in": "body",
      "required": true,
      "description": "The geometry and properties of a feature.",
      "x-ms-parameter-location": "client",
      "schema": {
        "$ref": "#/definitions/FeatureAttributes"
      }
    }
  },
  "paths": {
    "/features/datasets/{datasetId}": {
      "get": {
        "description": "The Get Landing Page API provides links to the API definition, the Conformance statements, and the metadata about the feature data in this dataset.\n\nThe Features API is a part of [Creator](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps), which makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. Features GET APIs follow the [Open Geospatial Consortium API - Features - Part 1: Core corrigendum](http://www.opengis.net/doc/IS/ogcapi-features-1/1.0.1) standard to query [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/v20220901preview/dataset). Datasets consist of multiple feature collections, which are a grouping of [features](https://tools.ietf.org/html/rfc7946#section-3.2) defined by a common schema.\n\n**Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).",
        "operationId": "Features_GetLandingPage",
        "x-ms-examples": {
          "GetLandingPage": {
            "$ref": "./examples/features/Features_GetLandingPage.json"
          }
        },
        "parameters": [
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/ClientId"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "$ref": "./dataset.json#/parameters/DatasetId"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/LandingPageResult"
            }
          },
          "default": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/default"
          }
        }
      }
    },
    "/features/datasets/{datasetId}/api": {
      "get": {
        "description": "The Get API Definition API provides a description of the capabilities of the Features service. It can be used by developers to understand the API or by development tools to support the implementation of servers and clients.\n\nThe Features API is a part of [Creator](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps), which makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. Features GET APIs follow the [Open Geospatial Consortium API - Features - Part 1: Core corrigendum](http://www.opengis.net/doc/IS/ogcapi-features-1/1.0.1) standard to query [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/v20220901preview/dataset). Datasets consist of multiple feature collections, which are a grouping of [features](https://tools.ietf.org/html/rfc7946#section-3.2) defined by a common schema.\n\n**Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).",
        "operationId": "Features_GetApiDefinition",
        "x-ms-examples": {
          "GetApiDefinition": {
            "$ref": "./examples/features/Features_GetApiDefinition.json"
          }
        },
        "parameters": [
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/ClientId"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "$ref": "./dataset.json#/parameters/DatasetId"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/ApiDefinitionResult"
            }
          },
          "default": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/default"
          }
        }
      }
    },
    "/features/datasets/{datasetId}/conformance": {
      "get": {
        "description": "The Get Conformance API lists all requirements classes specified in the standard that the server conforms to.\n\nThe Features API is a part of [Creator](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps), which makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. Features GET APIs follow the [Open Geospatial Consortium API - Features - Part 1: Core corrigendum](http://www.opengis.net/doc/IS/ogcapi-features-1/1.0.1) standard to query [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/v20220901preview/dataset). Datasets consist of multiple feature collections, which are a grouping of [features](https://tools.ietf.org/html/rfc7946#section-3.2) defined by a common schema.\n\n**Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).",
        "operationId": "Features_ListConformance",
        "x-ms-examples": {
          "GetConformance": {
            "$ref": "./examples/features/Features_ListConformance.json"
          }
        },
        "parameters": [
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/ClientId"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "$ref": "./dataset.json#/parameters/DatasetId"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/ConformanceResult"
            }
          },
          "default": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/default"
          }
        }
      }
    },
    "/features/datasets/{datasetId}/collections": {
      "get": {
        "description": "The Get Collections API provides a list of all the collections in a given dataset.\n\nThe Features API is a part of [Creator](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps), which makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. Features GET APIs follow the [Open Geospatial Consortium API - Features - Part 1: Core corrigendum](http://www.opengis.net/doc/IS/ogcapi-features-1/1.0.1) standard to query [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/v20220901preview/dataset). Datasets consist of multiple feature collections, which are a grouping of [features](https://tools.ietf.org/html/rfc7946#section-3.2) defined by a common schema.\n\n**Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).",
        "operationId": "Features_GetCollections",
        "x-ms-examples": {
          "GetCollections": {
            "$ref": "./examples/features/Features_GetCollections.json"
          }
        },
        "parameters": [
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/ClientId"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "$ref": "./dataset.json#/parameters/DatasetId"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/CollectionsResult"
            }
          },
          "default": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/default"
          }
        }
      }
    },
    "/features/datasets/{datasetId}/collections/{collectionId}": {
      "get": {
        "description": "The Get Collection API returns the collection identified by the provided id in the given dataset.\n\nThe Features API is a part of [Creator](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps), which makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. Features GET APIs follow the [Open Geospatial Consortium API - Features - Part 1: Core corrigendum](http://www.opengis.net/doc/IS/ogcapi-features-1/1.0.1) standard to query [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/v20220901preview/dataset). Datasets consist of multiple feature collections, which are a grouping of [features](https://tools.ietf.org/html/rfc7946#section-3.2) defined by a common schema.\n\n**Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).",
        "operationId": "Features_GetCollection",
        "x-ms-examples": {
          "GetCollection": {
            "$ref": "./examples/features/Features_GetCollection.json"
          }
        },
        "parameters": [
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/ClientId"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "$ref": "./dataset.json#/parameters/DatasetId"
          },
          {
            "$ref": "#/parameters/CollectionId"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/CollectionResult"
            }
          },
          "default": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/default"
          }
        }
      }
    },
    "/features/datasets/{datasetId}/collections/{collectionId}/definition": {
      "get": {
        "description": "The Collection Definition API provides the detailed data model of a given collection.\n\nThe Features API is a part of [Creator](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps), which makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. Features GET APIs follow the [Open Geospatial Consortium API - Features - Part 1: Core corrigendum](http://www.opengis.net/doc/IS/ogcapi-features-1/1.0.1) standard to query [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/v20220901preview/dataset). Datasets consist of multiple feature collections, which are a grouping of [features](https://tools.ietf.org/html/rfc7946#section-3.2) defined by a common schema.\n\n**Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).",
        "operationId": "Features_GetCollectionDefinition",
        "x-ms-examples": {
          "GetCollectionDefinition": {
            "$ref": "./examples/features/Features_GetCollectionDefinition.json"
          }
        },
        "parameters": [
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/ClientId"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "$ref": "./dataset.json#/parameters/DatasetId"
          },
          {
            "$ref": "#/parameters/CollectionId"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/CollectionDefinitionResult"
            }
          },
          "default": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/default"
          }
        }
      }
    },
    "/features/datasets/{datasetId}/collections/{collectionId}/items": {
      "get": {
        "description": "The Get Features API returns the list of features in the given collection.\n\nThe Features API is a part of [Creator](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps), which makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. Features GET APIs follow the [Open Geospatial Consortium API - Features - Part 1: Core corrigendum](http://www.opengis.net/doc/IS/ogcapi-features-1/1.0.1) standard to query [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/v20220901preview/dataset). Datasets consist of multiple feature collections, which are a grouping of [features](https://tools.ietf.org/html/rfc7946#section-3.2) defined by a common schema.\n\n**Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).",
        "operationId": "Features_GetItems",
        "x-ms-examples": {
          "GetFeatures": {
            "$ref": "./examples/features/Features_GetItems.json"
          }
        },
        "parameters": [
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/ClientId"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "$ref": "./dataset.json#/parameters/DatasetId"
          },
          {
            "$ref": "#/parameters/CollectionId"
          },
          {
            "$ref": "#/parameters/LimitFeatures"
          },
          {
            "$ref": "#/parameters/Bbox"
          },
          {
            "$ref": "#/parameters/Filter"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/ExtendedGeoJsonFeatureCollection"
            }
          },
          "default": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/default"
          }
        }
      },
      "post": {
        "description": "This Post Feature API conforms with the **drafted** [Open Geospatial Consortium API - Features - Part 4: Create, Replace, Update and Delete](http://docs.opengeospatial.org/DRAFTS/20-002.html) document. This API creates a feature with the provided attributes in the given collection.\n\nThe Features API is a part of [Creator](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps), which makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. Features GET APIs follow the [Open Geospatial Consortium API - Features - Part 1: Core corrigendum](http://www.opengis.net/doc/IS/ogcapi-features-1/1.0.1) standard to query [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/v20220901preview/dataset). Datasets consist of multiple feature collections, which are a grouping of [features](https://tools.ietf.org/html/rfc7946#section-3.2) defined by a common schema.\n\n**Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).",
        "operationId": "Features_Create",
        "x-ms-examples": {
          "PostFeature": {
            "$ref": "./examples/features/Features_Create.json"
          }
        },
        "consumes": [
          "application/geo+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "$ref": "./dataset.json#/parameters/DatasetId"
          },
          {
            "$ref": "#/parameters/CollectionId"
          },
          {
            "$ref": "#/parameters/FeatureBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CreateFeatureResult"
            }
          },
          "default": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/default"
          }
        }
      }
    },
    "/features/datasets/{datasetId}/collections/{collectionId}/items/{featureId}": {
      "get": {
        "description": "The Get Feature API returns the feature identified by the provided id in the given collection.\n\nThe Features API is a part of [Creator](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps), which makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. Features GET APIs follow the [Open Geospatial Consortium API - Features - Part 1: Core corrigendum](http://www.opengis.net/doc/IS/ogcapi-features-1/1.0.1) standard to query [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/v20220901preview/dataset). Datasets consist of multiple feature collections, which are a grouping of [features](https://tools.ietf.org/html/rfc7946#section-3.2) defined by a common schema.\n\n**Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).",
        "operationId": "Features_Get",
        "x-ms-examples": {
          "GetFeature": {
            "$ref": "./examples/features/Features_Get.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "$ref": "./dataset.json#/parameters/DatasetId"
          },
          {
            "$ref": "#/parameters/CollectionId"
          },
          {
            "$ref": "#/parameters/FeatureId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FeatureResult"
            }
          },
          "default": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/default"
          }
        }
      },
      "put": {
        "description": "This Put Feature API conforms with the **drafted** [Open Geospatial Consortium API - Features - Part 4: Create, Replace, Update and Delete](http://docs.opengeospatial.org/DRAFTS/20-002.html) document. This API **replaces** the feature identified by the provided id in the given collection, i.e., the request body overwrites all the existing attributes of a feature.\n\nThe Features API is a part of [Creator](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps), which makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. Features GET APIs follow the [Open Geospatial Consortium API - Features - Part 1: Core corrigendum](http://www.opengis.net/doc/IS/ogcapi-features-1/1.0.1) standard to query [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/v20220901preview/dataset). Datasets consist of multiple feature collections, which are a grouping of [features](https://tools.ietf.org/html/rfc7946#section-3.2) defined by a common schema.\n\n**Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).",
        "operationId": "Features_Replace",
        "x-ms-examples": {
          "PutFeature": {
            "$ref": "./examples/features/Features_Replace.json"
          }
        },
        "consumes": [
          "application/geo+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "$ref": "./dataset.json#/parameters/DatasetId"
          },
          {
            "$ref": "#/parameters/CollectionId"
          },
          {
            "$ref": "#/parameters/FeatureId"
          },
          {
            "$ref": "#/parameters/FeatureBody"
          }
        ],
        "responses": {
          "204": {
            "description": "Feature Updated."
          },
          "default": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/default"
          }
        }
      },
      "patch": {
        "description": "This Patch Feature API conforms with the **drafted** [Open Geospatial Consortium API - Features - Part 4: Create, Replace, Update and Delete](http://docs.opengeospatial.org/DRAFTS/20-002.html) document. This API **updates** attributes by performing a merge patch on the feature identified by the provided id in the given collection. It allows for the update of individual feature attributes without implicitly overwriting excluded attributes in the request body.\n\nThe Features API is a part of [Creator](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps), which makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. Features GET APIs follow the [Open Geospatial Consortium API - Features - Part 1: Core corrigendum](http://www.opengis.net/doc/IS/ogcapi-features-1/1.0.1) standard to query [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/v20220901preview/dataset). Datasets consist of multiple feature collections, which are a grouping of [features](https://tools.ietf.org/html/rfc7946#section-3.2) defined by a common schema.\n\n**Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).",
        "operationId": "Features_Update",
        "x-ms-examples": {
          "PatchFeature": {
            "$ref": "./examples/features/Features_Update.json"
          }
        },
        "consumes": [
          "application/merge-patch+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "$ref": "./dataset.json#/parameters/DatasetId"
          },
          {
            "$ref": "#/parameters/CollectionId"
          },
          {
            "$ref": "#/parameters/FeatureId"
          },
          {
            "$ref": "#/parameters/FeatureAttributesBody"
          }
        ],
        "responses": {
          "204": {
            "description": "Feature Updated."
          },
          "default": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/default"
          }
        }
      },
      "delete": {
        "description": "This Delete Feature API conforms with the **drafted** [Open Geospatial Consortium API - Features - Part 4: Create, Replace, Update and Delete](http://docs.opengeospatial.org/DRAFTS/20-002.html) document. This API deletes the feature identified by the provided id in the given collection. Please note that if other existing features are dependent on the requested feature for deletion, the delete request will fail until the dependent features are deleted first.\n\nThe Features API is a part of [Creator](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps), which makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. Features GET APIs follow the [Open Geospatial Consortium API - Features - Part 1: Core corrigendum](http://www.opengis.net/doc/IS/ogcapi-features-1/1.0.1) standard to query [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/v20220901preview/dataset). Datasets consist of multiple feature collections, which are a grouping of [features](https://tools.ietf.org/html/rfc7946#section-3.2) defined by a common schema.\n\n**Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).",
        "operationId": "Features_Delete",
        "x-ms-examples": {
          "DeleteFeature": {
            "$ref": "./examples/features/Features_Delete.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "$ref": "./dataset.json#/parameters/DatasetId"
          },
          {
            "$ref": "#/parameters/CollectionId"
          },
          {
            "$ref": "#/parameters/FeatureId"
          }
        ],
        "responses": {
          "204": {
            "description": "Feature Deleted."
          },
          "default": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/default"
          }
        }
      }
    }
  },
  "definitions": {
    "LandingPageResult": {
      "description": "Response after a successful request to the landing page.",
      "type": "object",
      "required": [
        "links"
      ],
      "properties": {
        "ontology": {
          "$ref": "../../../Common/preview/1.0/common.json#/definitions/Ontology"
        },
        "links": {
          "description": "Links to other Features endpoints.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeaturesEndpointLink"
          }
        }
      }
    },
    "ApiDefinitionResult": {
      "description": "Response after a successful request to get the API definition.",
      "type": "object",
      "required": [
        "openapi",
        "info",
        "paths",
        "components",
        "tags"
      ],
      "properties": {
        "openapi": {
          "description": "The OpenAPI version.",
          "type": "string",
          "example": "3.0.1"
        },
        "info": {
          "description": "The OpenAPI info object.",
          "type": "object",
          "properties": {
            "title": {
              "description": "The title of the API.",
              "type": "string",
              "example": "Azure Maps Web Feature Service"
            },
            "version": {
              "description": "The version of the API.",
              "type": "string",
              "example": "2023-03-01-preview"
            },
            "description": {
              "description": "The description of the API.",
              "type": "string",
              "example": "Azure Maps Web Feature REST APIs"
            }
          }
        },
        "paths": {
          "description": "The OpenAPI paths object.",
          "type": "object"
        },
        "components": {
          "description": "The OpenAPI components object.",
          "type": "object",
          "properties": {
            "parameters": {
              "description": "The OpenAPI parameters object.",
              "type": "object",
              "additionalProperties": true
            },
            "schemas": {
              "description": "The OpenAPI schemas object.",
              "type": "object",
              "additionalProperties": true
            }
          }
        },
        "tags": {
          "description": "The OpenAPI tags object.",
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "description": "The name of the tag.",
                "type": "string",
                "example": "Features"
              },
              "description": {
                "description": "The description of the tag.",
                "type": "string",
                "example": "Access to data (features)."
              }
            }
          }
        }
      }
    },
    "ConformanceResult": {
      "description": "Response after a successful request to the conformance page.",
      "type": "object",
      "required": [
        "conformsTo"
      ],
      "properties": {
        "conformsTo": {
          "description": "List of requirements classes that the server conforms to.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/core",
            "http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/oas3",
            "http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/geojson"
          ]
        }
      }
    },
    "FeaturesEndpointLink": {
      "description": "Links to other Features endpoints. For more details about link relations, please visit the [OGC API - Features - Part 1](http://www.opengis.net/doc/IS/ogcapi-features-1/1.0.1#_link_relations) standard.",
      "type": "object",
      "required": [
        "href"
      ],
      "properties": {
        "href": {
          "description": "The link target.",
          "type": "string",
          "format": "uri",
          "example": "https://us.atlas.microsoft.com/features/datasets/218fda98-e638-0edf-5ef7-28491ff3bed4"
        },
        "rel": {
          "description": "The relation type.",
          "type": "string",
          "example": "self"
        },
        "title": {
          "description": "Used to label the destination of a link such that it can be used as a human-readable identifier (e.g., a menu entry) in the language indicated by the Content-Language header field (if present).",
          "type": "string",
          "example": "Azure Maps Features"
        }
      }
    },
    "CollectionsResult": {
      "description": "Response after a successful request to list collections.",
      "type": "object",
      "required": [
        "links",
        "collections"
      ],
      "properties": {
        "ontology": {
          "$ref": "../../../Common/preview/1.0/common.json#/definitions/Ontology"
        },
        "collections": {
          "description": "All the collections in a given dataset.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CollectionResult"
          }
        },
        "links": {
          "description": "Links to other Features endpoints.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeaturesEndpointLink"
          },
          "example": [
            {
              "href": "http://data.example.org/collections.json",
              "rel": "self",
              "title": "this document"
            }
          ]
        }
      }
    },
    "CollectionResult": {
      "description": "Response after a successful request to get a collection.",
      "type": "object",
      "required": [
        "id",
        "title",
        "links"
      ],
      "properties": {
        "id": {
          "description": "Identifier of the collection used, for example, in URIs.",
          "type": "string",
          "example": "buildings"
        },
        "title": {
          "description": "Human readable title of the collection.",
          "type": "string",
          "example": "Buildings"
        },
        "ontology": {
          "$ref": "../../../Common/preview/1.0/common.json#/definitions/Ontology"
        },
        "itemType": {
          "description": "The type of the items in the collection.",
          "type": "string",
          "example": "feature"
        },
        "description": {
          "description": "A description of the features in the collection.",
          "type": "string",
          "example": "Buildings in the city of Bonn."
        },
        "links": {
          "description": "Links to other Features endpoints.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeaturesEndpointLink"
          },
          "example": [
            {
              "href": "http://data.example.org/collections/buildings/items",
              "rel": "items",
              "title": "Buildings"
            },
            {
              "href": "http://data.example.org/collections/buildings/definition",
              "rel": "describedBy",
              "title": "Metadata catalogue for unit"
            },
            {
              "href": "http://data.example.org/collections/buildings",
              "rel": "self",
              "title": "Information for unit collection"
            }
          ]
        }
      }
    },
    "CollectionDefinitionResult": {
      "description": "Response after a successful request to read a collection's definition.",
      "type": "object",
      "required": [
        "id",
        "title",
        "geometryType"
      ],
      "properties": {
        "id": {
          "description": "Identifier of the collection used, for example, in URIs.",
          "type": "string",
          "example": "buildings"
        },
        "title": {
          "description": "Title of collection.",
          "type": "string",
          "example": "Feature Class buildings"
        },
        "ontology": {
          "$ref": "../../../Common/preview/1.0/common.json#/definitions/Ontology"
        },
        "itemType": {
          "description": "The type of the items in the collection.",
          "type": "string",
          "example": "feature"
        },
        "description": {
          "description": "Describes the collection.",
          "type": "string"
        },
        "geometryType": {
          "description": "Type of geometry returned.",
          "type": "string",
          "enum": [
            "Point",
            "MultiPoint",
            "LineString",
            "MultiLineString",
            "Polygon",
            "MultiPolygon",
            "GeometryCollection"
          ],
          "x-ms-enum": {
            "name": "GeoJsonGeometryType",
            "modelAsString": true,
            "values": [
              {
                "value": "Point",
                "description": "`GeoJSON Point` geometry.",
                "name": "GeoJsonPoint"
              },
              {
                "value": "MultiPoint",
                "description": "`GeoJSON MultiPoint` geometry.",
                "name": "GeoJsonMultiPoint"
              },
              {
                "value": "LineString",
                "description": "`GeoJSON LineString` geometry.",
                "name": "GeoJsonLineString"
              },
              {
                "value": "MultiLineString",
                "description": "`GeoJSON MultiLineString` geometry.",
                "name": "GeoJsonMultiLineString"
              },
              {
                "value": "Polygon",
                "description": "`GeoJSON Polygon` geometry.",
                "name": "GeoJsonPolygon"
              },
              {
                "value": "MultiPolygon",
                "description": "`GeoJSON MultiPolygon` geometry.",
                "name": "GeoJsonMultiPolygon"
              },
              {
                "value": "GeometryCollection",
                "description": "`GeoJSON GeometryCollection` geometry.",
                "name": "GeoJsonGeometryCollection"
              }
            ]
          }
        },
        "properties": {
          "description": "Attributes of the collection used.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DefinitionProperty"
          }
        },
        "links": {
          "description": "Links to other Features endpoints.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeaturesEndpointLink"
          }
        }
      }
    },
    "DefinitionProperty": {
      "description": "The definition of a property in a collection.",
      "type": "object",
      "required": [
        "name",
        "required",
        "type"
      ],
      "properties": {
        "name": {
          "description": "Name of attribute.",
          "type": "string",
          "example": "external_id"
        },
        "required": {
          "description": "Is attribute required.",
          "type": "boolean"
        },
        "type": {
          "description": "Type of attribute.",
          "type": "object"
        }
      }
    },
    "ExtendedGeoJsonFeatureCollection": {
      "description": "A valid `GeoJSON FeatureCollection` object type extended with numberReturned and links array. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.3) for details.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/FeatureCollectionData"
        },
        {
          "$ref": "#/definitions/ExtendedGeoJsonFeatureCollectionData"
        }
      ],
      "properties": {
        "type": {
          "description": "Specifies the `GeoJSON` type: FeatureCollection.",
          "type": "string",
          "enum": [
            "FeatureCollection"
          ],
          "x-ms-enum": {
            "name": "GeoJsonObjectType",
            "modelAsString": false,
            "values": [
              {
                "value": "FeatureCollection",
                "description": "`GeoJSON FeatureCollection` object."
              }
            ]
          }
        }
      }
    },
    "ExtendedGeoJsonFeatureCollectionData": {
      "type": "object",
      "properties": {
        "ontology": {
          "$ref": "../../../Common/preview/1.0/common.json#/definitions/Ontology"
        },
        "numberReturned": {
          "description": "Number of returned features.",
          "type": "integer",
          "format": "int32"
        },
        "links": {
          "description": "Links to other Features endpoints.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeaturesEndpointLink"
          }
        }
      }
    },
    "FeatureResult": {
      "description": "Response after a feature is successfully read.",
      "type": "object",
      "required": [
        "feature"
      ],
      "properties": {
        "ontology": {
          "$ref": "../../../Common/preview/1.0/common.json#/definitions/Ontology"
        },
        "feature": {
          "$ref": "#/definitions/Feature"
        },
        "links": {
          "description": "Links to other Features endpoints.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeaturesEndpointLink"
          }
        }
      }
    },
    "CreateFeatureResult": {
      "description": "Response after a feature is successfully created.",
      "type": "object",
      "required": [
        "id",
        "ontology",
        "links"
      ],
      "properties": {
        "id": {
          "description": "Identifier for the feature.",
          "type": "string"
        },
        "ontology": {
          "$ref": "../../../Common/preview/1.0/common.json#/definitions/Ontology"
        },
        "links": {
          "description": "Links to other Features endpoints.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeaturesEndpointLink"
          }
        }
      }
    },
    "Feature": {
      "description": "A valid `GeoJSON Feature` object type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.2) for details.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/FeatureId"
        },
        {
          "$ref": "#/definitions/FeatureType"
        },
        {
          "$ref": "#/definitions/FeatureAttributes"
        }
      ]
    },
    "FeatureType": {
      "type": "object",
      "properties": {
        "type": {
          "description": "Specifies the `GeoJSON` type: Feature",
          "type": "string"
        }
      }
    },
    "FeatureId": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Case sensitive identifier of a specific feature.",
          "type": "string"
        }
      }
    },
    "FeatureAttributes": {
      "description": "The geometry and properties of a feature.",
      "type": "object",
      "properties": {
        "geometry": {
          "$ref": "../../../Common/preview/1.0/common.json#/definitions/GeoJsonGeometry"
        },
        "properties": {
          "description": "Properties can contain any additional metadata about the `Feature` and are defined by the GET Collection Definition API. Value can be any JSON object or a JSON null value, but please note that feature properties not defined in the collection definition will be ignored.",
          "type": "object"
        }
      }
    },
    "FeatureCollectionData": {
      "type": "object",
      "properties": {
        "features": {
          "description": "Contains a list of valid `GeoJSON Feature` objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Feature"
          }
        }
      },
      "required": [
        "features"
      ]
    }
  }
}
