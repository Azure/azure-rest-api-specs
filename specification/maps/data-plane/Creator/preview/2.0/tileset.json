{
  "swagger": "2.0",
  "info": {
    "title": "Azure Maps Tileset Service",
    "version": "2.0",
    "description": "APIs for managing Tilesets."
  },
  "x-ms-parameterized-host": {
    "hostTemplate": "{geography}.atlas.microsoft.com",
    "parameters": [
      {
        "$ref": "../../../Common/preview/1.0/common.json#/parameters/GeographicResourceLocation"
      }
    ]
  },
  "schemes": [
    "https"
  ],
  "consumes": [],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "AADToken": {
      "type": "oauth2",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "flow": "implicit",
      "description": "These are the [Microsoft Entra OAuth 2.0](https://docs.microsoft.com/azure/active-directory/develop/v1-overview) Flows. When paired with [Azure role-based access](https://docs.microsoft.com/azure/role-based-access-control/overview) control it can be used to control access to Azure Maps REST APIs. Azure role-based access controls are used to designate access to one or more Azure Maps resource account or sub-resources. Any user, group, or service principal can be granted access via a  built-in role or a custom role composed of one or more permissions to Azure Maps REST APIs.\n\nTo implement scenarios, we recommend viewing [authentication concepts](https://aka.ms/amauth). In summary, this security definition provides a solution for modeling application(s) via objects capable of access control on specific APIs and scopes.\n\n#### Notes\n* This security definition **requires** the use of the `x-ms-client-id` header to indicate which Azure Maps resource the application is requesting access to. This can be acquired from the [Maps management API](https://aka.ms/amauthdetails).\n* \nThe `Authorization URL` is specific to the Azure public cloud instance. Sovereign clouds have unique Authorization URLs and Azure Active directory configurations. \n* \nThe Azure role-based access control is configured from the [Azure management plane](https://aka.ms/amrbac) via Azure portal, PowerShell, CLI, Azure SDKs, or REST APIs.\n* \nUsage of the [Azure Maps Web SDK](https://aka.ms/amaadmc) allows for configuration based setup of an application for multiple use cases.\n* For more information on Microsoft identity platform, see [Microsoft identity platform overview](https://learn.microsoft.com/entra/identity-platform/v2-overview).",
      "scopes": {
        "https://atlas.microsoft.com/.default": "https://atlas.microsoft.com/.default"
      }
    },
    "SharedKey": {
      "type": "apiKey",
      "description": "This is a shared key that is provisioned when you [Create an Azure Maps account](https://docs.microsoft.com/azure/azure-maps/quick-demo-map-app#create-an-azure-maps-account) in the Azure portal or using PowerShell, CLI, Azure SDKs, or REST API.\n\n With this key, any application can access all REST API. In other words, this key can be used as a master key in the account that they are issued in.\n\n For publicly exposed applications, our recommendation is to use the [confidential client applications](https://docs.microsoft.com/azure/azure-maps/authentication-best-practices#confidential-client-applications) approach to access Azure Maps REST APIs so your key can be securely stored.",
      "name": "subscription-key",
      "in": "query"
    },
    "SasToken": {
      "type": "apiKey",
      "description": "This is a shared access signature token is created from the List SAS operation on the [Azure Maps resource](https://aka.ms/amauth) through the Azure management plane via Azure portal, PowerShell, CLI, Azure SDKs, or REST APIs.\n\n With this token, any application is authorized to access with Azure role-based access controls and fine-grain control to the expiration, rate, and region(s) of use for the particular token. In other words, the SAS Token can be used to allow applications to control access in a more secured way than the shared key.\n\n For publicly exposed applications, our recommendation is to configure a specific list of allowed origins on the [Map account resource](https://aka.ms/amauth) to limit rendering abuse and regularly renew the SAS Token.",
      "name": "SAS Token",
      "in": "header"
    }
  },
  "security": [
    {
      "AADToken": [
        "https://atlas.microsoft.com/.default"
      ]
    },
    {
      "SharedKey": []
    },
    {
      "SasToken": []
    }
  ],
  "responses": {},
  "parameters": {
    "ApiVersion": {
      "name": "api-version",
      "description": "Version number of Azure Maps API.",
      "type": "string",
      "in": "query",
      "required": true,
      "default": "2.0",
      "x-ms-parameter-location": "client"
    },
    "DatasetIdQuery": {
      "name": "datasetId",
      "description": "The unique `datasetId` that the tileset create API uses to retrieve features to generate tiles. The `datasetId` must have been obtained from a successful [Dataset Create API](https://docs.microsoft.com/en-us/rest/api/maps/v2/dataset/create) call.",
      "type": "string",
      "in": "query",
      "required": true,
      "x-ms-parameter-location": "method"
    },
    "TilesetId": {
      "name": "tilesetId",
      "description": "The Tileset Id",
      "type": "string",
      "in": "path",
      "required": true,
      "x-ms-parameter-location": "method"
    },
    "DescriptionTileset": {
      "name": "description",
      "description": "User provided description of the tileset.",
      "type": "string",
      "in": "query",
      "x-ms-parameter-location": "method"
    },
    "TilesetOperationId": {
      "name": "operationId",
      "type": "string",
      "in": "path",
      "description": "The ID to query the status for the tileset create/import request.",
      "required": true,
      "x-ms-parameter-location": "method"
    }
  },
  "paths": {
    "/tilesets": {
      "post": {
        "description": "**Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).\n\nCreator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.\n\n [This](https://docs.microsoft.com/en-us/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.\n\nThe Tileset Create API allows the caller to create a tileset from a dataset. A tileset contains a set of tiles that can be consumed \nfrom the [Get Map Tile](/rest/api/maps/render/getmaptile) to retrieve custom tiles. To make a dataset, use the \n[DataSet Create API](/rest/api/maps/dataset/createpreview).\n\n## Submit Create Request\n\nTo create your tileset you will make a `POST` request with an empty body. The `datasetId` query parameter will be \nused as the source of the tileset data.\n\nThe Create Tileset API is a \n[long-running operation](https://aka.ms/am-creator-lrt-v2).",
        "operationId": "Tileset_Create",
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-examples": {
          "Create Tileset by providing a Dataset Id": {
            "$ref": "./examples/tileset/Tileset_Create.json"
          }
        },
        "parameters": [
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/ClientId"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "$ref": "#/parameters/DatasetIdQuery"
          },
          {
            "$ref": "#/parameters/DescriptionTileset"
          }
        ],
        "responses": {
          "200": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/200AsyncV2"
          },
          "202": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/202AsyncV2"
          },
          "default": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/default"
          }
        }
      },
      "get": {
        "description": "**Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).\n\nCreator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.\n\nThis API allows the caller to fetch a list of all tilesets created.   \n<br>",
        "operationId": "Tileset_List",
        "x-ms-examples": {
          "Get a list of all tilesets": {
            "$ref": "./examples/tileset/Tileset_List.json"
          }
        },
        "parameters": [
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/ClientId"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          }
        ],
        "x-ms-pageable": {
          "itemName": "tilesets",
          "nextLinkName": "nextLink"
        },
        "responses": {
          "200": {
            "description": "List tileset request completed successfully. The response body contains a list of all tilesets.",
            "schema": {
              "$ref": "#/definitions/TilesetListResult"
            }
          },
          "default": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/default"
          }
        }
      }
    },
    "/tilesets/{tilesetId}": {
      "get": {
        "description": "**Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).\n\nCreator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.\n\nThis API allows the caller to fetch a tileset.",
        "operationId": "Tileset_Get",
        "x-ms-examples": {
          "Gets the details for a single tileset": {
            "$ref": "./examples/tileset/Tileset_Get.json"
          }
        },
        "parameters": [
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/ClientId"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "$ref": "#/parameters/TilesetId"
          }
        ],
        "responses": {
          "200": {
            "description": "List tileset request completed successfully. The response body contains a list of all tilesets.",
            "schema": {
              "$ref": "#/definitions/Tileset"
            }
          },
          "default": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/default"
          }
        }
      },
      "delete": {
        "description": "**Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).\n\nCreator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.\n\nThis API allows the caller to delete a created tileset.<br>    \nYou can use this API if a tileset is no longer needed. \n\n### Submit Delete Request\n\nTo delete your content you will issue a `DELETE` request where the path will contain the `tilesetId` of the tileset to delete.<br>    \n\n#### Delete request \"Successful\"\n\nThe Tileset Delete API returns a HTTP `204 No Content` response with an empty body, if the tileset was deleted successfully.<br>    \n\n#### Delete request \"Failed\"\n\nA HTTP `400 Bad Request` error response will be returned if the tileset with the passed-in `tilesetId` is not found. \n\nHere is a sample error response:\n\n<br>\n\n```json\n{\n  \"error\": {\n      \"code\": \"400 BadRequest\",\n      \"message\": \"Bad request - Tileset Id: d85b5b27-5fc4-4599-8b50-47160e90f8ce does not exist.\"\n  }\n}\n```",
        "operationId": "Tileset_Delete",
        "x-ms-examples": {
          "Delete a created tileset": {
            "$ref": "./examples/tileset/Tileset_Delete.json"
          }
        },
        "parameters": [
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/ClientId"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "$ref": "#/parameters/TilesetId"
          }
        ],
        "responses": {
          "204": {
            "description": "Tileset delete request completed successfully."
          },
          "default": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/default"
          }
        }
      }
    },
    "/tilesets/operations/{operationId}": {
      "get": {
        "description": "This path will be obtained from a call to /tilesets/create.  While in progress, an http200 will be returned with no extra headers -  followed by an http200 with Resource-Location header once successfully completed.",
        "operationId": "Tileset_GetOperation",
        "x-ms-examples": {
          "Get the status of an operation which is still running": {
            "$ref": "./examples/tileset/Tileset_GetOperationStillRunning.json"
          },
          "Get the status of an operation which has finished successfully": {
            "$ref": "./examples/tileset/Tileset_GetOperation.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "$ref": "#/parameters/TilesetOperationId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/200AsyncV2"
          },
          "default": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/default"
          }
        }
      }
    }
  },
  "definitions": {
    "TilesetListResult": {
      "description": "The response model for the Tileset List API. Returns a list of all tilesets.",
      "type": "object",
      "properties": {
        "tilesets": {
          "description": "A list of all tilesets.",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Tileset"
          }
        },
        "nextLink": {
          "description": "If present, the location of the next page of data.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "Tileset": {
      "description": "Detail information for the data.",
      "type": "object",
      "properties": {
        "tilesetId": {
          "description": "The unique tileset id for the tileset.",
          "type": "string",
          "readOnly": true
        },
        "ontology": {
          "$ref": "../../../Common/preview/1.0/common.json#/definitions/Ontology"
        },
        "datasetId": {
          "description": "The unique dataset Id used to create the tileset.",
          "type": "string",
          "readOnly": true
        },
        "description": {
          "description": "The description the caller provided when creating the tileset. Maximum length 1024 characters.",
          "type": "string",
          "readOnly": true
        },
        "minZoom": {
          "description": "The lowest tile zoom level tile generated for the tileset.",
          "type": "integer",
          "readOnly": true
        },
        "maxZoom": {
          "description": "The highest tile zoom level tile generated for the tileset.",
          "type": "integer",
          "readOnly": true
        },
        "bbox": {
          "description": "Bounding box which all features of the tileset lay within. Projection used - EPSG:3857. Format : 'minLon, minLat, maxLon, maxLat'.",
          "$ref": "../../../Common/preview/1.0/common.json#/definitions/BoundingBox"
        }
      }
    }
  }
}
