// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armlargeinstance

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// AzureLargeInstanceAzureLargeStorageInstancesClient contains the methods for the Microsoft.AzureLargeInstance namespace.
// Don't use this type directly, use NewAzureLargeInstanceAzureLargeStorageInstancesClient() instead.
type AzureLargeInstanceAzureLargeStorageInstancesClient struct {
	internal *arm.Client
}

// NewAzureLargeInstanceAzureLargeStorageInstancesClient creates a new instance of AzureLargeInstanceAzureLargeStorageInstancesClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewAzureLargeInstanceAzureLargeStorageInstancesClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*AzureLargeInstanceAzureLargeStorageInstancesClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &AzureLargeInstanceAzureLargeStorageInstancesClient{
		internal: cl,
	}
	return client, nil
}

// Get - Gets an Azure Large Storage instance for the specified subscription, resource
// group, and instance name.
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - azureLargeStorageInstanceName - Name of the AzureLargeStorageInstance.
//   - options - AzureLargeInstanceAzureLargeStorageInstancesClientGetOptions contains the optional parameters for the AzureLargeInstanceAzureLargeStorageInstancesClient.Get
//     method.
func (client *AzureLargeInstanceAzureLargeStorageInstancesClient) Get(ctx context.Context, subscriptionID string, resourceGroupName string, azureLargeStorageInstanceName string, options *AzureLargeInstanceAzureLargeStorageInstancesClientGetOptions) (AzureLargeInstanceAzureLargeStorageInstancesClientGetResponse, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "AzureLargeInstanceAzureLargeStorageInstancesClient.Get")
	req, err := client.getCreateRequest(ctx, subscriptionID, resourceGroupName, azureLargeStorageInstanceName, options)
	if err != nil {
		return AzureLargeInstanceAzureLargeStorageInstancesClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return AzureLargeInstanceAzureLargeStorageInstancesClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return AzureLargeInstanceAzureLargeStorageInstancesClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *AzureLargeInstanceAzureLargeStorageInstancesClient) getCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, azureLargeStorageInstanceName string, options *AzureLargeInstanceAzureLargeStorageInstancesClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureLargeInstance/azureLargeStorageInstances/{azureLargeStorageInstanceName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if azureLargeStorageInstanceName == "" {
		return nil, errors.New("parameter azureLargeStorageInstanceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{azureLargeStorageInstanceName}", url.PathEscape(azureLargeStorageInstanceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-07-20-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *AzureLargeInstanceAzureLargeStorageInstancesClient) getHandleResponse(resp *http.Response) (AzureLargeInstanceAzureLargeStorageInstancesClientGetResponse, error) {
	result := AzureLargeInstanceAzureLargeStorageInstancesClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AzureLargeStorageInstance); err != nil {
		return AzureLargeInstanceAzureLargeStorageInstancesClientGetResponse{}, err
	}
	return result, nil
}

// NewListByResourceGroupPager - Gets a list of AzureLargeStorageInstances in the specified subscription and
// resource group. The operations returns various properties of each Azure
// LargeStorage instance.
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - options - AzureLargeInstanceAzureLargeStorageInstancesClientListByResourceGroupOptions contains the optional parameters
//     for the AzureLargeInstanceAzureLargeStorageInstancesClient.NewListByResourceGroupPager method.
func (client *AzureLargeInstanceAzureLargeStorageInstancesClient) NewListByResourceGroupPager(subscriptionID string, resourceGroupName string, options *AzureLargeInstanceAzureLargeStorageInstancesClientListByResourceGroupOptions) *runtime.Pager[AzureLargeInstanceAzureLargeStorageInstancesClientListByResourceGroupResponse] {
	return runtime.NewPager(runtime.PagingHandler[AzureLargeInstanceAzureLargeStorageInstancesClientListByResourceGroupResponse]{
		More: func(page AzureLargeInstanceAzureLargeStorageInstancesClientListByResourceGroupResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *AzureLargeInstanceAzureLargeStorageInstancesClientListByResourceGroupResponse) (AzureLargeInstanceAzureLargeStorageInstancesClientListByResourceGroupResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "AzureLargeInstanceAzureLargeStorageInstancesClient.NewListByResourceGroupPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByResourceGroupCreateRequest(ctx, subscriptionID, resourceGroupName, options)
			}, nil)
			if err != nil {
				return AzureLargeInstanceAzureLargeStorageInstancesClientListByResourceGroupResponse{}, err
			}
			return client.listByResourceGroupHandleResponse(resp)
		},
	})
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *AzureLargeInstanceAzureLargeStorageInstancesClient) listByResourceGroupCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, options *AzureLargeInstanceAzureLargeStorageInstancesClientListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureLargeInstance/azureLargeStorageInstances"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-07-20-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *AzureLargeInstanceAzureLargeStorageInstancesClient) listByResourceGroupHandleResponse(resp *http.Response) (AzureLargeInstanceAzureLargeStorageInstancesClientListByResourceGroupResponse, error) {
	result := AzureLargeInstanceAzureLargeStorageInstancesClientListByResourceGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AzureLargeStorageInstanceListResult); err != nil {
		return AzureLargeInstanceAzureLargeStorageInstancesClientListByResourceGroupResponse{}, err
	}
	return result, nil
}

// NewListBySubscriptionPager - Gets a list of AzureLargeStorageInstances in the specified subscription. The
// operations returns various properties of each Azure LargeStorage instance.
//   - subscriptionID - The ID of the target subscription.
//   - options - AzureLargeInstanceAzureLargeStorageInstancesClientListBySubscriptionOptions contains the optional parameters
//     for the AzureLargeInstanceAzureLargeStorageInstancesClient.NewListBySubscriptionPager method.
func (client *AzureLargeInstanceAzureLargeStorageInstancesClient) NewListBySubscriptionPager(subscriptionID string, options *AzureLargeInstanceAzureLargeStorageInstancesClientListBySubscriptionOptions) *runtime.Pager[AzureLargeInstanceAzureLargeStorageInstancesClientListBySubscriptionResponse] {
	return runtime.NewPager(runtime.PagingHandler[AzureLargeInstanceAzureLargeStorageInstancesClientListBySubscriptionResponse]{
		More: func(page AzureLargeInstanceAzureLargeStorageInstancesClientListBySubscriptionResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *AzureLargeInstanceAzureLargeStorageInstancesClientListBySubscriptionResponse) (AzureLargeInstanceAzureLargeStorageInstancesClientListBySubscriptionResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "AzureLargeInstanceAzureLargeStorageInstancesClient.NewListBySubscriptionPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listBySubscriptionCreateRequest(ctx, subscriptionID, options)
			}, nil)
			if err != nil {
				return AzureLargeInstanceAzureLargeStorageInstancesClientListBySubscriptionResponse{}, err
			}
			return client.listBySubscriptionHandleResponse(resp)
		},
	})
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *AzureLargeInstanceAzureLargeStorageInstancesClient) listBySubscriptionCreateRequest(ctx context.Context, subscriptionID string, options *AzureLargeInstanceAzureLargeStorageInstancesClientListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.AzureLargeInstance/azureLargeStorageInstances"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-07-20-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *AzureLargeInstanceAzureLargeStorageInstancesClient) listBySubscriptionHandleResponse(resp *http.Response) (AzureLargeInstanceAzureLargeStorageInstancesClientListBySubscriptionResponse, error) {
	result := AzureLargeInstanceAzureLargeStorageInstancesClientListBySubscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AzureLargeStorageInstanceListResult); err != nil {
		return AzureLargeInstanceAzureLargeStorageInstancesClientListBySubscriptionResponse{}, err
	}
	return result, nil
}

// Update - Patches the Tags field of a Azure Large Storage Instance for the specified
// subscription, resource group, and instance name.
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - azureLargeStorageInstanceName - Name of the AzureLargeStorageInstance.
//   - properties - The resource properties to be updated.
//   - options - AzureLargeInstanceAzureLargeStorageInstancesClientUpdateOptions contains the optional parameters for the AzureLargeInstanceAzureLargeStorageInstancesClient.Update
//     method.
func (client *AzureLargeInstanceAzureLargeStorageInstancesClient) Update(ctx context.Context, subscriptionID string, resourceGroupName string, azureLargeStorageInstanceName string, properties AzureLargeStorageInstanceTagsUpdate, options *AzureLargeInstanceAzureLargeStorageInstancesClientUpdateOptions) (AzureLargeInstanceAzureLargeStorageInstancesClientUpdateResponse, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "AzureLargeInstanceAzureLargeStorageInstancesClient.Update")
	req, err := client.updateCreateRequest(ctx, subscriptionID, resourceGroupName, azureLargeStorageInstanceName, properties, options)
	if err != nil {
		return AzureLargeInstanceAzureLargeStorageInstancesClientUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return AzureLargeInstanceAzureLargeStorageInstancesClientUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return AzureLargeInstanceAzureLargeStorageInstancesClientUpdateResponse{}, err
	}
	resp, err := client.updateHandleResponse(httpResp)
	return resp, err
}

// updateCreateRequest creates the Update request.
func (client *AzureLargeInstanceAzureLargeStorageInstancesClient) updateCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, azureLargeStorageInstanceName string, properties AzureLargeStorageInstanceTagsUpdate, options *AzureLargeInstanceAzureLargeStorageInstancesClientUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureLargeInstance/azureLargeStorageInstances/{azureLargeStorageInstanceName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if azureLargeStorageInstanceName == "" {
		return nil, errors.New("parameter azureLargeStorageInstanceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{azureLargeStorageInstanceName}", url.PathEscape(azureLargeStorageInstanceName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-07-20-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, properties); err != nil {
		return nil, err
	}
	return req, nil
}

// updateHandleResponse handles the Update response.
func (client *AzureLargeInstanceAzureLargeStorageInstancesClient) updateHandleResponse(resp *http.Response) (AzureLargeInstanceAzureLargeStorageInstancesClientUpdateResponse, error) {
	result := AzureLargeInstanceAzureLargeStorageInstancesClientUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AzureLargeStorageInstance); err != nil {
		return AzureLargeInstanceAzureLargeStorageInstancesClientUpdateResponse{}, err
	}
	return result, nil
}
