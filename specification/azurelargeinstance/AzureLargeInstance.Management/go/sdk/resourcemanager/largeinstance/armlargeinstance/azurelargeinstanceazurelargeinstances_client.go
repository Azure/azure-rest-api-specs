// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armlargeinstance

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// AzureLargeInstanceAzureLargeInstancesClient contains the methods for the Microsoft.AzureLargeInstance namespace.
// Don't use this type directly, use NewAzureLargeInstanceAzureLargeInstancesClient() instead.
type AzureLargeInstanceAzureLargeInstancesClient struct {
	internal *arm.Client
}

// NewAzureLargeInstanceAzureLargeInstancesClient creates a new instance of AzureLargeInstanceAzureLargeInstancesClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewAzureLargeInstanceAzureLargeInstancesClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*AzureLargeInstanceAzureLargeInstancesClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &AzureLargeInstanceAzureLargeInstancesClient{
		internal: cl,
	}
	return client, nil
}

// Get - Gets an Azure Large Instance for the specified subscription, resource group,
// and instance name.
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - azureLargeInstanceName - Name of the AzureLargeInstance.
//   - options - AzureLargeInstanceAzureLargeInstancesClientGetOptions contains the optional parameters for the AzureLargeInstanceAzureLargeInstancesClient.Get
//     method.
func (client *AzureLargeInstanceAzureLargeInstancesClient) Get(ctx context.Context, subscriptionID string, resourceGroupName string, azureLargeInstanceName string, options *AzureLargeInstanceAzureLargeInstancesClientGetOptions) (AzureLargeInstanceAzureLargeInstancesClientGetResponse, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "AzureLargeInstanceAzureLargeInstancesClient.Get")
	req, err := client.getCreateRequest(ctx, subscriptionID, resourceGroupName, azureLargeInstanceName, options)
	if err != nil {
		return AzureLargeInstanceAzureLargeInstancesClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return AzureLargeInstanceAzureLargeInstancesClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return AzureLargeInstanceAzureLargeInstancesClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *AzureLargeInstanceAzureLargeInstancesClient) getCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, azureLargeInstanceName string, options *AzureLargeInstanceAzureLargeInstancesClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureLargeInstance/azureLargeInstances/{azureLargeInstanceName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if azureLargeInstanceName == "" {
		return nil, errors.New("parameter azureLargeInstanceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{azureLargeInstanceName}", url.PathEscape(azureLargeInstanceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-07-20-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *AzureLargeInstanceAzureLargeInstancesClient) getHandleResponse(resp *http.Response) (AzureLargeInstanceAzureLargeInstancesClientGetResponse, error) {
	result := AzureLargeInstanceAzureLargeInstancesClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AzureLargeInstance); err != nil {
		return AzureLargeInstanceAzureLargeInstancesClientGetResponse{}, err
	}
	return result, nil
}

// NewListByResourceGroupPager - Gets a list of Azure Large Instances in the specified subscription and resource
// group. The operations returns various properties of each Azure Large Instance.
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - options - AzureLargeInstanceAzureLargeInstancesClientListByResourceGroupOptions contains the optional parameters for the
//     AzureLargeInstanceAzureLargeInstancesClient.NewListByResourceGroupPager method.
func (client *AzureLargeInstanceAzureLargeInstancesClient) NewListByResourceGroupPager(subscriptionID string, resourceGroupName string, options *AzureLargeInstanceAzureLargeInstancesClientListByResourceGroupOptions) *runtime.Pager[AzureLargeInstanceAzureLargeInstancesClientListByResourceGroupResponse] {
	return runtime.NewPager(runtime.PagingHandler[AzureLargeInstanceAzureLargeInstancesClientListByResourceGroupResponse]{
		More: func(page AzureLargeInstanceAzureLargeInstancesClientListByResourceGroupResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *AzureLargeInstanceAzureLargeInstancesClientListByResourceGroupResponse) (AzureLargeInstanceAzureLargeInstancesClientListByResourceGroupResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "AzureLargeInstanceAzureLargeInstancesClient.NewListByResourceGroupPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByResourceGroupCreateRequest(ctx, subscriptionID, resourceGroupName, options)
			}, nil)
			if err != nil {
				return AzureLargeInstanceAzureLargeInstancesClientListByResourceGroupResponse{}, err
			}
			return client.listByResourceGroupHandleResponse(resp)
		},
	})
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *AzureLargeInstanceAzureLargeInstancesClient) listByResourceGroupCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, options *AzureLargeInstanceAzureLargeInstancesClientListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureLargeInstance/azureLargeInstances"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-07-20-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *AzureLargeInstanceAzureLargeInstancesClient) listByResourceGroupHandleResponse(resp *http.Response) (AzureLargeInstanceAzureLargeInstancesClientListByResourceGroupResponse, error) {
	result := AzureLargeInstanceAzureLargeInstancesClientListByResourceGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AzureLargeInstanceListResult); err != nil {
		return AzureLargeInstanceAzureLargeInstancesClientListByResourceGroupResponse{}, err
	}
	return result, nil
}

// NewListBySubscriptionPager - Gets a list of Azure Large Instances in the specified subscription. The
// operations returns various properties of each Azure Large Instance.
//   - subscriptionID - The ID of the target subscription.
//   - options - AzureLargeInstanceAzureLargeInstancesClientListBySubscriptionOptions contains the optional parameters for the
//     AzureLargeInstanceAzureLargeInstancesClient.NewListBySubscriptionPager method.
func (client *AzureLargeInstanceAzureLargeInstancesClient) NewListBySubscriptionPager(subscriptionID string, options *AzureLargeInstanceAzureLargeInstancesClientListBySubscriptionOptions) *runtime.Pager[AzureLargeInstanceAzureLargeInstancesClientListBySubscriptionResponse] {
	return runtime.NewPager(runtime.PagingHandler[AzureLargeInstanceAzureLargeInstancesClientListBySubscriptionResponse]{
		More: func(page AzureLargeInstanceAzureLargeInstancesClientListBySubscriptionResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *AzureLargeInstanceAzureLargeInstancesClientListBySubscriptionResponse) (AzureLargeInstanceAzureLargeInstancesClientListBySubscriptionResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "AzureLargeInstanceAzureLargeInstancesClient.NewListBySubscriptionPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listBySubscriptionCreateRequest(ctx, subscriptionID, options)
			}, nil)
			if err != nil {
				return AzureLargeInstanceAzureLargeInstancesClientListBySubscriptionResponse{}, err
			}
			return client.listBySubscriptionHandleResponse(resp)
		},
	})
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *AzureLargeInstanceAzureLargeInstancesClient) listBySubscriptionCreateRequest(ctx context.Context, subscriptionID string, options *AzureLargeInstanceAzureLargeInstancesClientListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.AzureLargeInstance/azureLargeInstances"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-07-20-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *AzureLargeInstanceAzureLargeInstancesClient) listBySubscriptionHandleResponse(resp *http.Response) (AzureLargeInstanceAzureLargeInstancesClientListBySubscriptionResponse, error) {
	result := AzureLargeInstanceAzureLargeInstancesClientListBySubscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AzureLargeInstanceListResult); err != nil {
		return AzureLargeInstanceAzureLargeInstancesClientListBySubscriptionResponse{}, err
	}
	return result, nil
}

// BeginRestart - The operation to restart an Azure Large Instance (only for compute instances)
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - azureLargeInstanceName - Name of the AzureLargeInstance.
//   - options - AzureLargeInstanceAzureLargeInstancesClientRestartOptions contains the optional parameters for the AzureLargeInstanceAzureLargeInstancesClient.Restart
//     method.
func (client *AzureLargeInstanceAzureLargeInstancesClient) BeginRestart(ctx context.Context, subscriptionID string, resourceGroupName string, azureLargeInstanceName string, options *AzureLargeInstanceAzureLargeInstancesClientRestartOptions) (*runtime.Poller[AzureLargeInstanceAzureLargeInstancesClientRestartResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.restart(ctx, subscriptionID, resourceGroupName, azureLargeInstanceName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller[AzureLargeInstanceAzureLargeInstancesClientRestartResponse](resp, client.internal.Pipeline(), nil)
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken[AzureLargeInstanceAzureLargeInstancesClientRestartResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// Restart - The operation to restart an Azure Large Instance (only for compute instances)
func (client *AzureLargeInstanceAzureLargeInstancesClient) restart(ctx context.Context, subscriptionID string, resourceGroupName string, azureLargeInstanceName string, options *AzureLargeInstanceAzureLargeInstancesClientRestartOptions) (*http.Response, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "AzureLargeInstanceAzureLargeInstancesClient.BeginRestart")
	req, err := client.restartCreateRequest(ctx, subscriptionID, resourceGroupName, azureLargeInstanceName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// restartCreateRequest creates the Restart request.
func (client *AzureLargeInstanceAzureLargeInstancesClient) restartCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, azureLargeInstanceName string, options *AzureLargeInstanceAzureLargeInstancesClientRestartOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureLargeInstance/azureLargeInstances/{azureLargeInstanceName}/restart"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if azureLargeInstanceName == "" {
		return nil, errors.New("parameter azureLargeInstanceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{azureLargeInstanceName}", url.PathEscape(azureLargeInstanceName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-07-20-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if options != nil && options.ForceParameter != nil {
		if err := runtime.MarshalAsJSON(req, *options.ForceParameter); err != nil {
			return nil, err
		}
		return req, nil
	}
	return req, nil
}

// BeginShutdown - The operation to shutdown an Azure Large Instance (only for compute instances)
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - azureLargeInstanceName - Name of the AzureLargeInstance.
//   - options - AzureLargeInstanceAzureLargeInstancesClientShutdownOptions contains the optional parameters for the AzureLargeInstanceAzureLargeInstancesClient.Shutdown
//     method.
func (client *AzureLargeInstanceAzureLargeInstancesClient) BeginShutdown(ctx context.Context, subscriptionID string, resourceGroupName string, azureLargeInstanceName string, options *AzureLargeInstanceAzureLargeInstancesClientShutdownOptions) (*runtime.Poller[AzureLargeInstanceAzureLargeInstancesClientShutdownResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.shutdown(ctx, subscriptionID, resourceGroupName, azureLargeInstanceName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller[AzureLargeInstanceAzureLargeInstancesClientShutdownResponse](resp, client.internal.Pipeline(), nil)
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken[AzureLargeInstanceAzureLargeInstancesClientShutdownResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// Shutdown - The operation to shutdown an Azure Large Instance (only for compute instances)
func (client *AzureLargeInstanceAzureLargeInstancesClient) shutdown(ctx context.Context, subscriptionID string, resourceGroupName string, azureLargeInstanceName string, options *AzureLargeInstanceAzureLargeInstancesClientShutdownOptions) (*http.Response, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "AzureLargeInstanceAzureLargeInstancesClient.BeginShutdown")
	req, err := client.shutdownCreateRequest(ctx, subscriptionID, resourceGroupName, azureLargeInstanceName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// shutdownCreateRequest creates the Shutdown request.
func (client *AzureLargeInstanceAzureLargeInstancesClient) shutdownCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, azureLargeInstanceName string, options *AzureLargeInstanceAzureLargeInstancesClientShutdownOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureLargeInstance/azureLargeInstances/{azureLargeInstanceName}/shutdown"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if azureLargeInstanceName == "" {
		return nil, errors.New("parameter azureLargeInstanceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{azureLargeInstanceName}", url.PathEscape(azureLargeInstanceName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-07-20-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// BeginStart - The operation to start an Azure Large Instance (only for compute instances)
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - azureLargeInstanceName - Name of the AzureLargeInstance.
//   - options - AzureLargeInstanceAzureLargeInstancesClientStartOptions contains the optional parameters for the AzureLargeInstanceAzureLargeInstancesClient.Start
//     method.
func (client *AzureLargeInstanceAzureLargeInstancesClient) BeginStart(ctx context.Context, subscriptionID string, resourceGroupName string, azureLargeInstanceName string, options *AzureLargeInstanceAzureLargeInstancesClientStartOptions) (*runtime.Poller[AzureLargeInstanceAzureLargeInstancesClientStartResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.start(ctx, subscriptionID, resourceGroupName, azureLargeInstanceName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller[AzureLargeInstanceAzureLargeInstancesClientStartResponse](resp, client.internal.Pipeline(), nil)
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken[AzureLargeInstanceAzureLargeInstancesClientStartResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// Start - The operation to start an Azure Large Instance (only for compute instances)
func (client *AzureLargeInstanceAzureLargeInstancesClient) start(ctx context.Context, subscriptionID string, resourceGroupName string, azureLargeInstanceName string, options *AzureLargeInstanceAzureLargeInstancesClientStartOptions) (*http.Response, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "AzureLargeInstanceAzureLargeInstancesClient.BeginStart")
	req, err := client.startCreateRequest(ctx, subscriptionID, resourceGroupName, azureLargeInstanceName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// startCreateRequest creates the Start request.
func (client *AzureLargeInstanceAzureLargeInstancesClient) startCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, azureLargeInstanceName string, options *AzureLargeInstanceAzureLargeInstancesClientStartOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureLargeInstance/azureLargeInstances/{azureLargeInstanceName}/start"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if azureLargeInstanceName == "" {
		return nil, errors.New("parameter azureLargeInstanceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{azureLargeInstanceName}", url.PathEscape(azureLargeInstanceName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-07-20-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Update - Patches the Tags field of an Azure Large Instance for the specified
// subscription, resource group, and instance name.
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - azureLargeInstanceName - Name of the AzureLargeInstance.
//   - properties - The resource properties to be updated.
//   - options - AzureLargeInstanceAzureLargeInstancesClientUpdateOptions contains the optional parameters for the AzureLargeInstanceAzureLargeInstancesClient.Update
//     method.
func (client *AzureLargeInstanceAzureLargeInstancesClient) Update(ctx context.Context, subscriptionID string, resourceGroupName string, azureLargeInstanceName string, properties AzureLargeInstanceTagsUpdate, options *AzureLargeInstanceAzureLargeInstancesClientUpdateOptions) (AzureLargeInstanceAzureLargeInstancesClientUpdateResponse, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "AzureLargeInstanceAzureLargeInstancesClient.Update")
	req, err := client.updateCreateRequest(ctx, subscriptionID, resourceGroupName, azureLargeInstanceName, properties, options)
	if err != nil {
		return AzureLargeInstanceAzureLargeInstancesClientUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return AzureLargeInstanceAzureLargeInstancesClientUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return AzureLargeInstanceAzureLargeInstancesClientUpdateResponse{}, err
	}
	resp, err := client.updateHandleResponse(httpResp)
	return resp, err
}

// updateCreateRequest creates the Update request.
func (client *AzureLargeInstanceAzureLargeInstancesClient) updateCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, azureLargeInstanceName string, properties AzureLargeInstanceTagsUpdate, options *AzureLargeInstanceAzureLargeInstancesClientUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureLargeInstance/azureLargeInstances/{azureLargeInstanceName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if azureLargeInstanceName == "" {
		return nil, errors.New("parameter azureLargeInstanceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{azureLargeInstanceName}", url.PathEscape(azureLargeInstanceName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-07-20-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, properties); err != nil {
		return nil, err
	}
	return req, nil
}

// updateHandleResponse handles the Update response.
func (client *AzureLargeInstanceAzureLargeInstancesClient) updateHandleResponse(resp *http.Response) (AzureLargeInstanceAzureLargeInstancesClientUpdateResponse, error) {
	result := AzureLargeInstanceAzureLargeInstancesClientUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AzureLargeInstance); err != nil {
		return AzureLargeInstanceAzureLargeInstancesClientUpdateResponse{}, err
	}
	return result, nil
}
