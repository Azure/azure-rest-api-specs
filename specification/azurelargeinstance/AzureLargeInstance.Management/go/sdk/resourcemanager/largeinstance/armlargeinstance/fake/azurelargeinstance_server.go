// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// AzureLargeInstanceServer is a fake server for instances of the armlargeinstance.AzureLargeInstanceClient type.
type AzureLargeInstanceServer struct {
	// AzureLargeInstanceAzureLargeInstancesServer contains the fakes for client AzureLargeInstanceAzureLargeInstancesClient
	AzureLargeInstanceAzureLargeInstancesServer AzureLargeInstanceAzureLargeInstancesServer

	// AzureLargeInstanceAzureLargeStorageInstancesServer contains the fakes for client AzureLargeInstanceAzureLargeStorageInstancesClient
	AzureLargeInstanceAzureLargeStorageInstancesServer AzureLargeInstanceAzureLargeStorageInstancesServer

	// AzureLargeInstanceOperationsServer contains the fakes for client AzureLargeInstanceOperationsClient
	AzureLargeInstanceOperationsServer AzureLargeInstanceOperationsServer
}

// NewAzureLargeInstanceServerTransport creates a new instance of AzureLargeInstanceServerTransport with the provided implementation.
// The returned AzureLargeInstanceServerTransport instance is connected to an instance of armlargeinstance.AzureLargeInstanceClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewAzureLargeInstanceServerTransport(srv *AzureLargeInstanceServer) *AzureLargeInstanceServerTransport {
	return &AzureLargeInstanceServerTransport{srv: srv}
}

// AzureLargeInstanceServerTransport connects instances of armlargeinstance.AzureLargeInstanceClient to instances of AzureLargeInstanceServer.
// Don't use this type directly, use NewAzureLargeInstanceServerTransport instead.
type AzureLargeInstanceServerTransport struct {
	srv                                                  *AzureLargeInstanceServer
	trMu                                                 sync.Mutex
	trAzureLargeInstanceAzureLargeInstancesServer        *AzureLargeInstanceAzureLargeInstancesServerTransport
	trAzureLargeInstanceAzureLargeStorageInstancesServer *AzureLargeInstanceAzureLargeStorageInstancesServerTransport
	trAzureLargeInstanceOperationsServer                 *AzureLargeInstanceOperationsServerTransport
}

// Do implements the policy.Transporter interface for AzureLargeInstanceServerTransport.
func (a *AzureLargeInstanceServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return a.dispatchToClientFake(req, method[:strings.Index(method, ".")])
}

func (a *AzureLargeInstanceServerTransport) dispatchToClientFake(req *http.Request, client string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch client {
	case "AzureLargeInstanceAzureLargeInstancesClient":
		initServer(&a.trMu, &a.trAzureLargeInstanceAzureLargeInstancesServer, func() *AzureLargeInstanceAzureLargeInstancesServerTransport {
			return NewAzureLargeInstanceAzureLargeInstancesServerTransport(&a.srv.AzureLargeInstanceAzureLargeInstancesServer)
		})
		resp, err = a.trAzureLargeInstanceAzureLargeInstancesServer.Do(req)
	case "AzureLargeInstanceAzureLargeStorageInstancesClient":
		initServer(&a.trMu, &a.trAzureLargeInstanceAzureLargeStorageInstancesServer, func() *AzureLargeInstanceAzureLargeStorageInstancesServerTransport {
			return NewAzureLargeInstanceAzureLargeStorageInstancesServerTransport(&a.srv.AzureLargeInstanceAzureLargeStorageInstancesServer)
		})
		resp, err = a.trAzureLargeInstanceAzureLargeStorageInstancesServer.Do(req)
	case "AzureLargeInstanceOperationsClient":
		initServer(&a.trMu, &a.trAzureLargeInstanceOperationsServer, func() *AzureLargeInstanceOperationsServerTransport {
			return NewAzureLargeInstanceOperationsServerTransport(&a.srv.AzureLargeInstanceOperationsServer)
		})
		resp, err = a.trAzureLargeInstanceOperationsServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	return resp, err
}
