// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Alerts
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Alerts.
    /// </summary>
    public static partial class AlertsExtensions
    {
            /// <summary>
            /// List all the alerts that are associated with the subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static AlertList List(this IAlerts operations)
            {
                return operations.ListAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all the alerts that are associated with the subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AlertList> ListAsync(this IAlerts operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all the alerts that are associated with the resource group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            public static AlertList ListByResourceGroup(this IAlerts operations, string resourceGroupName)
            {
                return operations.ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all the alerts that are associated with the resource group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AlertList> ListByResourceGroupAsync(this IAlerts operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all the alerts that are associated with the subscription that are
            /// stored in a specific location
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static AlertList ListSubscriptionLevelByRegion(this IAlerts operations)
            {
                return operations.ListSubscriptionLevelByRegionAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all the alerts that are associated with the subscription that are
            /// stored in a specific location
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AlertList> ListSubscriptionLevelByRegionAsync(this IAlerts operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSubscriptionLevelByRegionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all the alerts that are associated with the resource group that are
            /// stored in a specific location
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            public static AlertList ListResourceGroupLevelByRegion(this IAlerts operations, string resourceGroupName)
            {
                return operations.ListResourceGroupLevelByRegionAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all the alerts that are associated with the resource group that are
            /// stored in a specific location
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AlertList> ListResourceGroupLevelByRegionAsync(this IAlerts operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListResourceGroupLevelByRegionWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an alert that is associated with a subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='alertName'>
            /// Name of the alert object
            /// </param>
            public static Alert GetSubscriptionLevel(this IAlerts operations, string alertName)
            {
                return operations.GetSubscriptionLevelAsync(alertName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an alert that is associated with a subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='alertName'>
            /// Name of the alert object
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Alert> GetSubscriptionLevelAsync(this IAlerts operations, string alertName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSubscriptionLevelWithHttpMessagesAsync(alertName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an alert that is associated a resource group or a resource in a
            /// resource group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='alertName'>
            /// Name of the alert object
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            public static Alert GetResourceGroupLevel(this IAlerts operations, string alertName, string resourceGroupName)
            {
                return operations.GetResourceGroupLevelAsync(alertName, resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an alert that is associated a resource group or a resource in a
            /// resource group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='alertName'>
            /// Name of the alert object
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Alert> GetResourceGroupLevelAsync(this IAlerts operations, string alertName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetResourceGroupLevelWithHttpMessagesAsync(alertName, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update the alert's state
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='alertName'>
            /// Name of the alert object
            /// </param>
            public static void UpdateSubscriptionLevelStateToDismiss(this IAlerts operations, string alertName)
            {
                operations.UpdateSubscriptionLevelStateToDismissAsync(alertName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the alert's state
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='alertName'>
            /// Name of the alert object
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateSubscriptionLevelStateToDismissAsync(this IAlerts operations, string alertName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateSubscriptionLevelStateToDismissWithHttpMessagesAsync(alertName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Update the alert's state
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='alertName'>
            /// Name of the alert object
            /// </param>
            public static void UpdateSubscriptionLevelStateToResolve(this IAlerts operations, string alertName)
            {
                operations.UpdateSubscriptionLevelStateToResolveAsync(alertName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the alert's state
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='alertName'>
            /// Name of the alert object
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateSubscriptionLevelStateToResolveAsync(this IAlerts operations, string alertName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateSubscriptionLevelStateToResolveWithHttpMessagesAsync(alertName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Update the alert's state
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='alertName'>
            /// Name of the alert object
            /// </param>
            public static void UpdateSubscriptionLevelStateToActivate(this IAlerts operations, string alertName)
            {
                operations.UpdateSubscriptionLevelStateToActivateAsync(alertName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the alert's state
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='alertName'>
            /// Name of the alert object
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateSubscriptionLevelStateToActivateAsync(this IAlerts operations, string alertName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateSubscriptionLevelStateToActivateWithHttpMessagesAsync(alertName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Update the alert's state
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='alertName'>
            /// Name of the alert object
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            public static void UpdateResourceGroupLevelStateToResolve(this IAlerts operations, string alertName, string resourceGroupName)
            {
                operations.UpdateResourceGroupLevelStateToResolveAsync(alertName, resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the alert's state
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='alertName'>
            /// Name of the alert object
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateResourceGroupLevelStateToResolveAsync(this IAlerts operations, string alertName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateResourceGroupLevelStateToResolveWithHttpMessagesAsync(alertName, resourceGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Update the alert's state
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='alertName'>
            /// Name of the alert object
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            public static void UpdateResourceGroupLevelStateToDismiss(this IAlerts operations, string alertName, string resourceGroupName)
            {
                operations.UpdateResourceGroupLevelStateToDismissAsync(alertName, resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the alert's state
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='alertName'>
            /// Name of the alert object
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateResourceGroupLevelStateToDismissAsync(this IAlerts operations, string alertName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateResourceGroupLevelStateToDismissWithHttpMessagesAsync(alertName, resourceGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Update the alert's state
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='alertName'>
            /// Name of the alert object
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            public static void UpdateResourceGroupLevelStateToActivate(this IAlerts operations, string alertName, string resourceGroupName)
            {
                operations.UpdateResourceGroupLevelStateToActivateAsync(alertName, resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the alert's state
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='alertName'>
            /// Name of the alert object
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateResourceGroupLevelStateToActivateAsync(this IAlerts operations, string alertName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateResourceGroupLevelStateToActivateWithHttpMessagesAsync(alertName, resourceGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Simulate security alerts
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='alertSimulatorRequestBody'>
            /// Alert Simulator Request Properties
            /// </param>
            public static void SimulateAlerts(this IAlerts operations, AlertSimulatorRequestBody alertSimulatorRequestBody)
            {
                operations.SimulateAlertsAsync(alertSimulatorRequestBody).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Simulate security alerts
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='alertSimulatorRequestBody'>
            /// Alert Simulator Request Properties
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SimulateAlertsAsync(this IAlerts operations, AlertSimulatorRequestBody alertSimulatorRequestBody, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SimulateAlertsWithHttpMessagesAsync(alertSimulatorRequestBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
