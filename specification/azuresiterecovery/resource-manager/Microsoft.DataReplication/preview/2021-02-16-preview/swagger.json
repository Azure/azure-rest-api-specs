{
  "swagger": "2.0",
  "info": {
    "title": "Azure Site Recovery Management Service API",
    "description": "A first party Azure service enabling the data replication.",
    "version": "2021-02-16-preview"
  },
  "paths": {
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationFabrics/{fabricName}/fabricAgents/{draName}": {
      "get": {
        "tags": [
          "Dra"
        ],
        "summary": "Gets the Dra.",
        "description": "Gets the details of the fabric agent.",
        "operationId": "Dra_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "fabricName",
            "description": "Fabric name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "draName",
            "description": "Dra name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Dra Model on success.",
            "schema": {
              "$ref": "#/definitions/DraModel"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-examples": {
          "Dra_Get": {
            "$ref": "./examples/Dra_Get.json"
          }
        }
      },
      "put": {
        "tags": [
          "Dra"
        ],
        "summary": "Puts the Dra.",
        "description": "Creates the fabric agent.",
        "operationId": "Dra_Create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "fabricName",
            "description": "Fabric name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "draName",
            "description": "Dra name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Dra model.",
            "schema": {
              "$ref": "#/definitions/DraModel"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/DraModel"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DraModel"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          },
          "202": {
            "description": "Returns success on creation.",
            "headers": {
              "Azure-AsyncOperation": {
                "description": "Tracking URL for long running operation.",
                "type": "string"
              }
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "Dra_Create": {
            "$ref": "./examples/Dra_Create.json"
          }
        }
      },
      "patch": {
        "tags": [
          "Dra"
        ],
        "summary": "Updates the Dra.",
        "description": "Updates the fabric agent.",
        "operationId": "Dra_Update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "fabricName",
            "description": "Fabric name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "draName",
            "description": "Dra name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Dra model.",
            "schema": {
              "$ref": "#/definitions/DraModel"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "headers": {
              "Azure-AsyncOperation": {
                "description": "Tracking URL for long running operation.",
                "type": "string"
              }
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DraModel"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "Dra_Update": {
            "$ref": "./examples/Dra_Update.json"
          }
        }
      },
      "delete": {
        "tags": [
          "Dra"
        ],
        "summary": "Deletes the Dra.",
        "description": "Deletes the fabric agent.",
        "operationId": "Dra_Delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "fabricName",
            "description": "Fabric Name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "draName",
            "description": "Dra Name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "202": {
            "description": "Returns success on deletion.",
            "headers": {
              "Azure-AsyncOperation": {
                "description": "Tracking URL for long running operation.",
                "type": "string"
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "Dra_Delete": {
            "$ref": "./examples/Dra_Delete.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationFabrics/{fabricName}/fabricAgents": {
      "get": {
        "tags": [
          "Dra"
        ],
        "summary": "Lists the Dras.",
        "description": "Gets the list of fabric agents in the given fabric.",
        "operationId": "Dra_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "fabricName",
            "description": "Fabric name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Dra Model Collection on success.",
            "schema": {
              "$ref": "#/definitions/DraModelCollection"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "Dra_List": {
            "$ref": "./examples/Dra_List.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationFabrics/{fabricName}/fabricAgents/{draName}/refresh": {
      "post": {
        "tags": [
          "Dra"
        ],
        "summary": "Refreshes the Dra.",
        "description": "Refreshes the fabric agent.",
        "operationId": "Dra_Refresh",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "fabricName",
            "description": "Fabric name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "draName",
            "description": "Dra name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "202": {
            "description": "Returns success on refresh.",
            "headers": {
              "Azure-AsyncOperation": {
                "description": "Tracking URL for long running operation.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "Dra_Refresh": {
            "$ref": "./examples/Dra_Refresh.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationFabrics/{fabricName}/fabricAgents/{draName}/operations/{operationId}": {
      "get": {
        "tags": [
          "Dra"
        ],
        "summary": "Gets the Dra operation status.",
        "description": "Tracks the results of an asynchronous operation on the fabric agent.",
        "operationId": "DraOperationStatus_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "fabricName",
            "description": "Fabric name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "draName",
            "description": "Dra name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "operationId",
            "description": "Operation Id.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/OperationStatus"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-examples": {
          "DraOperationStatus_Get": {
            "$ref": "./examples/DraOperationStatus_Get.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationVaults/{vaultName}/alertSettings/{emailConfigurationName}": {
      "get": {
        "tags": [
          "EmailConfiguration"
        ],
        "summary": "Gets the email configuration setting.",
        "description": "Gets the details of the alert configuration setting.",
        "operationId": "EmailConfiguration_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vaultName",
            "description": "Vault name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "emailConfigurationName",
            "description": "Email configuration name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns EmailConfiguration Model on success.",
            "schema": {
              "$ref": "#/definitions/EmailConfigurationModel"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-examples": {
          "EmailConfiguration_Get": {
            "$ref": "./examples/EmailConfiguration_Get.json"
          }
        }
      },
      "put": {
        "tags": [
          "EmailConfiguration"
        ],
        "summary": "Creates email configuration settings.",
        "description": "Creates an alert configuration setting for the given vault.",
        "operationId": "EmailConfiguration_Create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vaultName",
            "description": "Vault name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "emailConfigurationName",
            "description": "Email configuration name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "description": "EmailConfiguration model.",
            "schema": {
              "$ref": "#/definitions/EmailConfigurationModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns EmailConfiguration Model Collection on success.",
            "schema": {
              "$ref": "#/definitions/EmailConfigurationModel"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-examples": {
          "EmailConfiguration_Create": {
            "$ref": "./examples/EmailConfiguration_Create.json"
          }
        }
      },
      "patch": {
        "tags": [
          "EmailConfiguration"
        ],
        "summary": "Updates email configuration settings.",
        "description": "Updates the alert configuration setting for the given vault.",
        "operationId": "EmailConfiguration_Update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vaultName",
            "description": "Vault name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "emailConfigurationName",
            "description": "Email configuration name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "description": "EmailConfiguration model.",
            "schema": {
              "$ref": "#/definitions/EmailConfigurationModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns EmailConfiguration Model Collection on success.",
            "schema": {
              "$ref": "#/definitions/EmailConfigurationModel"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-examples": {
          "EmailConfiguration_Update": {
            "$ref": "./examples/EmailConfiguration_Update.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationVaults/{vaultName}/alertSettings": {
      "get": {
        "tags": [
          "EmailConfiguration"
        ],
        "summary": "Lists the email configuration settings.",
        "description": "Gets the list of alert configuration settings for the given vault.",
        "operationId": "EmailConfiguration_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vaultName",
            "description": "Vault name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns EmailConfiguration Model Collection on success.",
            "schema": {
              "$ref": "#/definitions/EmailConfigurationModelCollection"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "EmailConfiguration_List": {
            "$ref": "./examples/EmailConfiguration_List.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationVaults/{vaultName}/events/{eventName}": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "Gets the event.",
        "description": "Gets the details of the event.",
        "operationId": "Event_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vaultName",
            "description": "Vault name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "eventName",
            "description": "Event name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Event Model on success.",
            "schema": {
              "$ref": "#/definitions/EventModel"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-examples": {
          "Event_Get": {
            "$ref": "./examples/Event_Get.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationVaults/{vaultName}/events": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "Lists the events.",
        "description": "Gets the list of events in the given vault.",
        "operationId": "Event_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vaultName",
            "description": "Vault name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "Filter string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "continuationToken",
            "description": "Continuation token.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Event Model Collection on success.",
            "schema": {
              "$ref": "#/definitions/EventModelCollection"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "Event_List": {
            "$ref": "./examples/Event_List.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationFabrics/{fabricName}": {
      "get": {
        "tags": [
          "Fabric"
        ],
        "summary": "Gets the fabric.",
        "description": "Gets the details of the fabric.",
        "operationId": "Fabric_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "fabricName",
            "description": "Fabric name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Fabric Model on success.",
            "schema": {
              "$ref": "#/definitions/FabricModel"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-examples": {
          "Fabric_Get": {
            "$ref": "./examples/Fabric_Get.json"
          }
        }
      },
      "put": {
        "tags": [
          "Fabric"
        ],
        "summary": "Puts the fabric.",
        "description": "Creates the fabric.",
        "operationId": "Fabric_Create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "fabricName",
            "description": "Fabric Name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Fabric properties.",
            "schema": {
              "$ref": "#/definitions/FabricModel"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/FabricModel"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/FabricModel"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          },
          "202": {
            "description": "Returns success on creation.",
            "headers": {
              "Azure-AsyncOperation": {
                "description": "Tracking URL for long running operation.",
                "type": "string"
              }
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "Fabric_Create": {
            "$ref": "./examples/Fabric_Create.json"
          }
        }
      },
      "patch": {
        "tags": [
          "Fabric"
        ],
        "summary": "Updates the fabric.",
        "description": "Performs update on the fabric.",
        "operationId": "Fabric_Update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "fabricName",
            "description": "Fabric Name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Fabric properties.",
            "schema": {
              "$ref": "#/definitions/FabricModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/FabricModel"
            }
          },
          "202": {
            "description": "Returns success on update.",
            "headers": {
              "Azure-AsyncOperation": {
                "description": "Tracking URL for long running operation.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "Fabric_Update": {
            "$ref": "./examples/Fabric_Update.json"
          }
        }
      },
      "delete": {
        "tags": [
          "Fabric"
        ],
        "summary": "Deletes the fabric.",
        "description": "Removes the fabric.",
        "operationId": "Fabric_Delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "fabricName",
            "description": "Fabric Name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "202": {
            "description": "Returns success on deletion.",
            "headers": {
              "Azure-AsyncOperation": {
                "description": "Tracking URL for long running operation.",
                "type": "string"
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "Fabric_Delete": {
            "$ref": "./examples/Fabric_Delete.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.DataReplication/replicationFabrics": {
      "get": {
        "tags": [
          "Fabric"
        ],
        "summary": "Lists the fabrics.",
        "description": "Gets the list of fabrics in the given subscription.",
        "operationId": "Fabric_ListBySubscription",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "in": "query",
            "name": "continuationToken",
            "description": "Continuation token from the previous call.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Fabric Model Collection on success.",
            "schema": {
              "$ref": "#/definitions/FabricModelCollection"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "Fabric_ListBySubscription": {
            "$ref": "./examples/Fabric_ListBySubscription.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationFabrics": {
      "get": {
        "tags": [
          "Fabric"
        ],
        "summary": "Lists the fabrics.",
        "description": "Gets the list of fabrics in the given subscription and resource group.",
        "operationId": "Fabric_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "query",
            "name": "continuationToken",
            "description": "Continuation token from the previous call.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Fabric Model Collection on success.",
            "schema": {
              "$ref": "#/definitions/FabricModelCollection"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "Fabric_List": {
            "$ref": "./examples/Fabric_List.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationFabrics/{fabricName}/operations/{operationId}": {
      "get": {
        "tags": [
          "Fabric"
        ],
        "summary": "Gets the fabric operation status.",
        "description": "Tracks the results of an asynchronous operation on the fabric.",
        "operationId": "FabricOperationsStatus_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "fabricName",
            "description": "Fabric name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "operationId",
            "description": "Operation Id.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "OperationType",
            "description": "The operation type.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/OperationStatus"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-examples": {
          "FabricOperationsStatus_Get": {
            "$ref": "./examples/FabricOperationsStatus_Get.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationVaults/{vaultName}/replicationPolicies/{policyName}": {
      "get": {
        "tags": [
          "Policy"
        ],
        "summary": "Gets the policy.",
        "description": "Gets the details of the policy.",
        "operationId": "Policy_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vaultName",
            "description": "Vault name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "policyName",
            "description": "Policy name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Policy Model on success.",
            "schema": {
              "$ref": "#/definitions/PolicyModel"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-examples": {
          "Policy_Get": {
            "$ref": "./examples/Policy_Get.json"
          }
        }
      },
      "put": {
        "tags": [
          "Policy"
        ],
        "summary": "Puts the policy.",
        "description": "Creates the policy.",
        "operationId": "Policy_Create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vaultName",
            "description": "Vault name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "policyName",
            "description": "Policy name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Policy model.",
            "schema": {
              "$ref": "#/definitions/PolicyModel"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/PolicyModel"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PolicyModel"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          },
          "202": {
            "description": "Returns success on creation.",
            "headers": {
              "Azure-AsyncOperation": {
                "description": "Tracking URL for long running operation.",
                "type": "string"
              }
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "Policy_Create": {
            "$ref": "./examples/Policy_Create.json"
          }
        }
      },
      "patch": {
        "tags": [
          "Policy"
        ],
        "summary": "Updates the policy.",
        "description": "Performs update on the policy.",
        "operationId": "Policy_Update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vaultName",
            "description": "Vault name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "policyName",
            "description": "Policy name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Policy model.",
            "schema": {
              "$ref": "#/definitions/PolicyModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PolicyModel"
            }
          },
          "202": {
            "description": "Accepted",
            "headers": {
              "Azure-AsyncOperation": {
                "description": "Tracking URL for long running operation.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "Policy_Update": {
            "$ref": "./examples/Policy_Update.json"
          }
        }
      },
      "delete": {
        "tags": [
          "Policy"
        ],
        "summary": "Deletes the policy.",
        "description": "Removes the policy.",
        "operationId": "Policy_Delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vaultName",
            "description": "Vault Name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "policyName",
            "description": "Policy Name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "202": {
            "description": "Returns success on deletion.",
            "headers": {
              "Azure-AsyncOperation": {
                "description": "Tracking URL for long running operation.",
                "type": "string"
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "Policy_Delete": {
            "$ref": "./examples/Policy_Delete.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationVaults/{vaultName}/replicationPolicies": {
      "get": {
        "tags": [
          "Policy"
        ],
        "summary": "Lists the policies.",
        "description": "Gets the list of policies in the given vault.",
        "operationId": "Policy_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vaultName",
            "description": "Vault name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Policy Model Collection on success.",
            "schema": {
              "$ref": "#/definitions/PolicyModelCollection"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "Policy_List": {
            "$ref": "./examples/Policy_List.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationVaults/{vaultName}/replicationPolicies/{policyName}/operations/{operationId}": {
      "get": {
        "tags": [
          "Policy"
        ],
        "summary": "Gets the policy operation status.",
        "description": "Tracks the results of an asynchronous operation on the policy.",
        "operationId": "PolicyOperationStatus_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vaultName",
            "description": "Vault name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "policyName",
            "description": "Policy name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "operationId",
            "description": "Operation Id.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/OperationStatus"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-examples": {
          "PolicyOperationStatus_Get": {
            "$ref": "./examples/PolicyOperationStatus_Get.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationVaults/{vaultName}/protectedItems/{protectedItemName}": {
      "get": {
        "tags": [
          "ProtectedItem"
        ],
        "summary": "Gets the protected item.",
        "description": "Gets the details of the protected item.",
        "operationId": "ProtectedItem_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vaultName",
            "description": "Vault name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "protectedItemName",
            "description": "Protected item name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns ProtectedItem Model on success.",
            "schema": {
              "$ref": "#/definitions/ProtectedItemModel"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-examples": {
          "ProtectedItem_Get": {
            "$ref": "./examples/ProtectedItem_Get.json"
          }
        }
      },
      "put": {
        "tags": [
          "ProtectedItem"
        ],
        "summary": "Puts the protected item.",
        "description": "Creates the protected item.",
        "operationId": "ProtectedItem_Create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vaultName",
            "description": "Vault name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "protectedItemName",
            "description": "Protected item name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Protected item model.",
            "schema": {
              "$ref": "#/definitions/ProtectedItemModel"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ProtectedItemModel"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ProtectedItemModel"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          },
          "202": {
            "description": "Returns success on creation.",
            "headers": {
              "Azure-AsyncOperation": {
                "description": "Tracking URL for long running operation.",
                "type": "string"
              }
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "ProtectedItem_Create": {
            "$ref": "./examples/ProtectedItem_Create.json"
          }
        }
      },
      "patch": {
        "tags": [
          "ProtectedItem"
        ],
        "summary": "Updates the protected item.",
        "description": "Performs update on the protected item.",
        "operationId": "ProtectedItem_Update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vaultName",
            "description": "Vault name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "protectedItemName",
            "description": "Protected item name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Protected item model.",
            "schema": {
              "$ref": "#/definitions/ProtectedItemModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ProtectedItemModel"
            }
          },
          "202": {
            "description": "Accepted",
            "headers": {
              "Azure-AsyncOperation": {
                "description": "Tracking URL for long running operation.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "ProtectedItem_Update": {
            "$ref": "./examples/ProtectedItem_Update.json"
          }
        }
      },
      "delete": {
        "tags": [
          "ProtectedItem"
        ],
        "summary": "Deletes the protected item.",
        "description": "Removes the protected item.",
        "operationId": "ProtectedItem_Delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vaultName",
            "description": "Vault name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "protectedItemName",
            "description": "Protected item name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "forceDelete",
            "description": "A flag indicating whether to do force delete or not.",
            "type": "boolean"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "202": {
            "description": "Accepted",
            "headers": {
              "Azure-AsyncOperation": {
                "description": "Tracking URL for long running operation.",
                "type": "string"
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "ProtectedItem_Delete": {
            "$ref": "./examples/ProtectedItem_Delete.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationVaults/{vaultName}/protectedItems": {
      "get": {
        "tags": [
          "ProtectedItem"
        ],
        "summary": "Lists the protected items.",
        "description": "Gets the list of protected items in the given vault.",
        "operationId": "ProtectedItem_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vaultName",
            "description": "Vault name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns ProtectedItem Model Collection on success.",
            "schema": {
              "$ref": "#/definitions/ProtectedItemModelCollection"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "ProtectedItem_List": {
            "$ref": "./examples/ProtectedItem_List.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationVaults/{vaultName}/protectedItems/{protectedItemName}/resynchronize": {
      "post": {
        "tags": [
          "ProtectedItem"
        ],
        "summary": "Resynchronizes replication.",
        "description": "Resynchronizes the protected item.",
        "operationId": "ProtectedItem_Resynchronize",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vaultName",
            "description": "Vault name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "protectedItemName",
            "description": "Protected item name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "headers": {
              "Azure-AsyncOperation": {
                "description": "Tracking URL for long running operation.",
                "type": "string"
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "ProtectedItem_Resynchronize": {
            "$ref": "./examples/ProtectedItem_Resynchronize.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationVaults/{vaultName}/protectedItems/{protectedItemName}/testFailover": {
      "post": {
        "tags": [
          "ProtectedItem"
        ],
        "summary": "Performs test failover.",
        "description": "Performs the test failover on the protected item.",
        "operationId": "ProtectedItem_TestFailover",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vaultName",
            "description": "Vault name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "protectedItemName",
            "description": "Protected item name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Test failover model.",
            "schema": {
              "$ref": "#/definitions/TestFailoverModel"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "headers": {
              "Azure-AsyncOperation": {
                "description": "Tracking URL for long running operation.",
                "type": "string"
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "ProtectedItem_TestFailover": {
            "$ref": "./examples/ProtectedItem_TestFailover.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationVaults/{vaultName}/protectedItems/{protectedItemName}/testFailoverCleanup": {
      "post": {
        "tags": [
          "ProtectedItem"
        ],
        "summary": "Performs test failover cleanup.",
        "description": "Performs the test failover cleanup on the protected item.",
        "operationId": "ProtectedItem_TestFailoverCleanup",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vaultName",
            "description": "Vault name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "protectedItemName",
            "description": "Protected item name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Test failover cleanup model.",
            "schema": {
              "$ref": "#/definitions/TestFailoverCleanupModel"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "headers": {
              "Azure-AsyncOperation": {
                "description": "Tracking URL for long running operation.",
                "type": "string"
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "ProtectedItem_TestFailoverCleanup": {
            "$ref": "./examples/ProtectedItem_TestFailoverCleanup.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationVaults/{vaultName}/protectedItems/{protectedItemName}/plannedFailover": {
      "post": {
        "tags": [
          "ProtectedItem"
        ],
        "summary": "Performs planned failover.",
        "description": "Performs the planned failover on the protected item.",
        "operationId": "ProtectedItem_PlannedFailover",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vaultName",
            "description": "Vault name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "protectedItemName",
            "description": "Protected item name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Planned failover model.",
            "schema": {
              "$ref": "#/definitions/PlannedFailoverModel"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "headers": {
              "Azure-AsyncOperation": {
                "description": "Tracking URL for long running operation.",
                "type": "string"
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "ProtectedItem_PlannedFailover": {
            "$ref": "./examples/ProtectedItem_PlannedFailover.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationVaults/{vaultName}/protectedItems/{protectedItemName}/unplannedFailover": {
      "post": {
        "tags": [
          "ProtectedItem"
        ],
        "summary": "Performs unplanned failover.",
        "description": "Performs the unplanned failover on the protected item.",
        "operationId": "ProtectedItem_UnplannedFailover",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vaultName",
            "description": "Vault name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "protectedItemName",
            "description": "Protected item name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Unplanned failover model.",
            "schema": {
              "$ref": "#/definitions/UnplannedFailoverModel"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "headers": {
              "Azure-AsyncOperation": {
                "description": "Tracking URL for long running operation.",
                "type": "string"
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "ProtectedItem_UnplannedFailover": {
            "$ref": "./examples/ProtectedItem_UnplannedFailover.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationVaults/{vaultName}/protectedItems/{protectedItemName}/failoverCommit": {
      "post": {
        "tags": [
          "ProtectedItem"
        ],
        "summary": "Performs commit failover.",
        "description": "Performs the commit failover on the protected item.",
        "operationId": "ProtectedItem_FailoverCommit",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vaultName",
            "description": "Vault name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "protectedItemName",
            "description": "Protected item name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "headers": {
              "Azure-AsyncOperation": {
                "description": "Tracking URL for long running operation.",
                "type": "string"
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "ProtectedItem_FailoverCommit": {
            "$ref": "./examples/ProtectedItem_FailoverCommit.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationVaults/{vaultName}/protectedItems/{protectedItemName}/failoverCancel": {
      "post": {
        "tags": [
          "ProtectedItem"
        ],
        "summary": "Performs cancel failover.",
        "description": "Performs the cancel failover on the protected item.",
        "operationId": "ProtectedItem_FailoverCancel",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vaultName",
            "description": "Vault name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "protectedItemName",
            "description": "Protected item name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "headers": {
              "Azure-AsyncOperation": {
                "description": "Tracking URL for long running operation.",
                "type": "string"
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "ProtectedItem_FailoverCancel": {
            "$ref": "./examples/ProtectedItem_FailoverCancel.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationVaults/{vaultName}/protectedItems/{protectedItemName}/changeRecoveryPoint": {
      "post": {
        "tags": [
          "ProtectedItem"
        ],
        "summary": "Changes recovery point.",
        "description": "Performs the change recovery point operation on the protected item.",
        "operationId": "ProtectedItem_ChangeRecoveryPoint",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vaultName",
            "description": "Vault name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "protectedItemName",
            "description": "Protected item name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Change recovery point model.",
            "schema": {
              "$ref": "#/definitions/ChangeRecoveryPointModel"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "headers": {
              "Azure-AsyncOperation": {
                "description": "Tracking URL for long running operation.",
                "type": "string"
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "ProtectedItem_ChangeRecoveryPoint": {
            "$ref": "./examples/ProtectedItem_ChangeRecoveryPoint.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationVaults/{vaultName}/protectedItems/{protectedItemName}/reprotect": {
      "post": {
        "tags": [
          "ProtectedItem"
        ],
        "summary": "Re-protects protected item.",
        "description": "Performs the reprotect on the protected item.",
        "operationId": "ProtectedItem_Reprotect",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vaultName",
            "description": "Vault name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "protectedItemName",
            "description": "Protected item name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Reprotect model.",
            "schema": {
              "$ref": "#/definitions/ReprotectModel"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "headers": {
              "Azure-AsyncOperation": {
                "description": "Tracking URL for long running operation.",
                "type": "string"
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "ProtectedItem_Reprotect": {
            "$ref": "./examples/ProtectedItem_Reprotect.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationVaults/{vaultName}/protectedItems/{protectedItemName}/operations/{operationId}": {
      "get": {
        "tags": [
          "ProtectedItem"
        ],
        "summary": "Gets the protected item operation status.",
        "description": "Tracks the results of an asynchronous operation on the protected item.",
        "operationId": "ProtectedItemOperationStatus_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vaultName",
            "description": "Vault name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "protectedItemName",
            "description": "Protected Item name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "operationId",
            "description": "Operation Id.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/OperationStatus"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-examples": {
          "ProtectedItemOperationStatus_Get": {
            "$ref": "./examples/ProtectedItemOperationStatus_Get.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationVaults/{vaultName}/recoveryPlans/{recoveryPlanName}": {
      "get": {
        "tags": [
          "RecoveryPlan"
        ],
        "summary": "Gets the recovery plan.",
        "description": "Gets the details of the recovery plan.",
        "operationId": "RecoveryPlan_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vaultName",
            "description": "Vault name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "recoveryPlanName",
            "description": "Recovery plan name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RecoveryPlanModel"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-examples": {
          "RecoveryPlan_Get": {
            "$ref": "./examples/RecoveryPlan_Get.json"
          }
        }
      },
      "put": {
        "tags": [
          "RecoveryPlan"
        ],
        "summary": "Puts the recovery plan.",
        "description": "Creates the recovery plan in the given vault.",
        "operationId": "RecoveryPlan_Create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vaultName",
            "description": "Vault name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "recoveryPlanName",
            "description": "Recovery plan name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Recovery plan model.",
            "schema": {
              "$ref": "#/definitions/RecoveryPlanModel"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/RecoveryPlanModel"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RecoveryPlanModel"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          },
          "202": {
            "description": "Returns success on creation.",
            "headers": {
              "Azure-AsyncOperation": {
                "description": "Tracking URL for long running operation.",
                "type": "string"
              }
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "RecoveryPlan_Create": {
            "$ref": "./examples/RecoveryPlan_Create.json"
          }
        }
      },
      "patch": {
        "tags": [
          "RecoveryPlan"
        ],
        "summary": "Updates the recovery plan.",
        "description": "Updates the recovery plan in the given vault.",
        "operationId": "RecoveryPlan_Update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vaultName",
            "description": "Vault name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "recoveryPlanName",
            "description": "Recovery plan name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Recovery plan model.",
            "schema": {
              "$ref": "#/definitions/RecoveryPlanModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RecoveryPlanModel"
            }
          },
          "202": {
            "description": "Accepted",
            "headers": {
              "Azure-AsyncOperation": {
                "description": "Tracking URL for long running operation.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "RecoveryPlan_Update": {
            "$ref": "./examples/RecoveryPlan_Update.json"
          }
        }
      },
      "delete": {
        "tags": [
          "RecoveryPlan"
        ],
        "summary": "Deletes the recovery plan.",
        "description": "Deletes the recovery plan in the given vault.",
        "operationId": "RecoveryPlan_Delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vaultName",
            "description": "Vault name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "recoveryPlanName",
            "description": "Recovery plan name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "202": {
            "description": "Returns success on deletion.",
            "headers": {
              "Azure-AsyncOperation": {
                "description": "Tracking URL for long running operation.",
                "type": "string"
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "RecoveryPlan_Delete": {
            "$ref": "./examples/RecoveryPlan_Delete.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationVaults/{vaultName}/recoveryPlans": {
      "get": {
        "tags": [
          "RecoveryPlan"
        ],
        "summary": "Lists the recovery plans.",
        "description": "Gets the list of recovery plans.",
        "operationId": "RecoveryPlan_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vaultName",
            "description": "Vault name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RecoveryPlanModelCollection"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "RecoveryPlan_List": {
            "$ref": "./examples/RecoveryPlan_List.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationVaults/{vaultName}/recoveryPlans/{recoveryPlanName}/testFailover": {
      "post": {
        "tags": [
          "RecoveryPlan"
        ],
        "summary": "Performs the test failover on the recovery plan.",
        "operationId": "RecoveryPlan_TestFailover",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vaultName",
            "description": "Vault name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "recoveryPlanName",
            "description": "Recovery plan name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Test failover model.",
            "schema": {
              "$ref": "#/definitions/RecoveryPlanTestFailoverModel"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "headers": {
              "Azure-AsyncOperation": {
                "description": "Tracking URL for long running operation.",
                "type": "string"
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "RecoveryPlan_TestFailover": {
            "$ref": "./examples/RecoveryPlan_TestFailover.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationVaults/{vaultName}/recoveryPlans/{recoveryPlanName}/testFailoverCleanup": {
      "post": {
        "tags": [
          "RecoveryPlan"
        ],
        "summary": "Performs recovery plan test failover cleanup.",
        "operationId": "RecoveryPlan_TestFailoverCleanup",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vaultName",
            "description": "Vault name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "recoveryPlanName",
            "description": "Recovery plan name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Test failover cleanup model.",
            "schema": {
              "$ref": "#/definitions/RecoveryPlanTestFailoverCleanupModel"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "headers": {
              "Azure-AsyncOperation": {
                "description": "Tracking URL for long running operation.",
                "type": "string"
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "RecoveryPlan_TestFailoverCleanup": {
            "$ref": "./examples/RecoveryPlan_TestFailoverCleanup.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationVaults/{vaultName}/recoveryPlans/{recoveryPlanName}/unplannedFailover": {
      "post": {
        "tags": [
          "RecoveryPlan"
        ],
        "summary": "Performs the unplanned failover on the recovery plan.",
        "operationId": "RecoveryPlan_UnplannnedFailover",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vaultName",
            "description": "Vault name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "recoveryPlanName",
            "description": "Recovery plan name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Unplanned failover model.",
            "schema": {
              "$ref": "#/definitions/RecoveryPlanUnplannedFailoverModel"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "headers": {
              "Azure-AsyncOperation": {
                "description": "Tracking URL for long running operation.",
                "type": "string"
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "RecoveryPlan_UnplannnedFailover": {
            "$ref": "./examples/RecoveryPlan_UnplannnedFailover.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationVaults/{vaultName}/recoveryPlans/{recoveryPlanName}/failoverCommit": {
      "post": {
        "tags": [
          "RecoveryPlan"
        ],
        "summary": "Performs recovery plan commit failover.",
        "operationId": "RecoveryPlan_FailoverCommit",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vaultName",
            "description": "Vault name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "recoveryPlanName",
            "description": "Recovery plan name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "headers": {
              "Azure-AsyncOperation": {
                "description": "Tracking URL for long running operation.",
                "type": "string"
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "RecoveryPlan_FailoverCommit": {
            "$ref": "./examples/RecoveryPlan_FailoverCommit.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationVaults/{vaultName}/recoveryPlans/{recoveryPlanName}/failoverCancel": {
      "post": {
        "tags": [
          "RecoveryPlan"
        ],
        "summary": "Performs recovery plan cancel failover.",
        "operationId": "RecoveryPlan_FailoverCancel",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vaultName",
            "description": "Vault name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "recoveryPlanName",
            "description": "Recovery plan name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "headers": {
              "Azure-AsyncOperation": {
                "description": "Tracking URL for long running operation.",
                "type": "string"
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "RecoveryPlan_FailoverCancel": {
            "$ref": "./examples/RecoveryPlan_FailoverCancel.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationVaults/{vaultName}/recoveryPlans/{recoveryPlanName}/operations/{operationId}": {
      "get": {
        "tags": [
          "RecoveryPlan"
        ],
        "summary": "Gets the recovery plan operation status.",
        "description": "Tracks the results of an asynchronous operation on the recovery plan.",
        "operationId": "RecoveryPlanOperationStatus_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vaultName",
            "description": "Vault name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "recoveryPlanName",
            "description": "Recovery plan name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "operationId",
            "description": "Operation Id.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/OperationStatus"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-examples": {
          "RecoveryPlanOperationStatus_Get": {
            "$ref": "./examples/RecoveryPlanOperationStatus_Get.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationVaults/{vaultName}/protectedItems/{protectedItemName}/recoveryPoints/{recoveryPointName}": {
      "get": {
        "tags": [
          "RecoveryPoint"
        ],
        "summary": "Gets the recovery point.",
        "description": "Gets the details of the recovery point of a protected item.",
        "operationId": "RecoveryPoints_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vaultName",
            "description": "Vault name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "protectedItemName",
            "description": "Protected item name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "recoveryPointName",
            "description": "Recovery point name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RecoveryPointModel"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-examples": {
          "RecoveryPoints_Get": {
            "$ref": "./examples/RecoveryPoints_Get.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationVaults/{vaultName}/protectedItems/{protectedItemName}/recoveryPoints": {
      "get": {
        "tags": [
          "RecoveryPoint"
        ],
        "summary": "Lists the recovery points.",
        "description": "Gets the list of recovery points of the given protected item.",
        "operationId": "RecoveryPoints_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vaultName",
            "description": "Vault name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "protectedItemName",
            "description": "Protected item name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RecoveryPointModelCollection"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "RecoveryPoints_List": {
            "$ref": "./examples/RecoveryPoints_List.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationVaults/{vaultName}/replicationExtensions/{replicationExtensionName}": {
      "get": {
        "tags": [
          "ReplicationExtension"
        ],
        "summary": "Gets the replication extension.",
        "description": "Gets the details of the replication extension.",
        "operationId": "ReplicationExtension_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vaultName",
            "description": "Vault name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "replicationExtensionName",
            "description": "Replication extension name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Replication extension Model on success.",
            "schema": {
              "$ref": "#/definitions/ReplicationExtensionModel"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-examples": {
          "ReplicationExtension_Get": {
            "$ref": "./examples/ReplicationExtension_Get.json"
          }
        }
      },
      "put": {
        "tags": [
          "ReplicationExtension"
        ],
        "summary": "Puts the replication extension.",
        "description": "Creates the replication extension in the given vault.",
        "operationId": "ReplicationExtension_Create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vaultName",
            "description": "Vault name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "replicationExtensionName",
            "description": "Replication extension name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Replication extension model.",
            "schema": {
              "$ref": "#/definitions/ReplicationExtensionModel"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ReplicationExtensionModel"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ReplicationExtensionModel"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          },
          "202": {
            "description": "Returns success on creation.",
            "headers": {
              "Azure-AsyncOperation": {
                "description": "Tracking URL for long running operation.",
                "type": "string"
              }
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "ReplicationExtension_Create": {
            "$ref": "./examples/ReplicationExtension_Create.json"
          }
        }
      },
      "patch": {
        "tags": [
          "ReplicationExtension"
        ],
        "summary": "Updates the replication extension.",
        "description": "Updates the replication extension in the given vault.",
        "operationId": "ReplicationExtension_Update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vaultName",
            "description": "Vault name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "replicationExtensionName",
            "description": "Replication extension name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Replication extension model.",
            "schema": {
              "$ref": "#/definitions/ReplicationExtensionModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ReplicationExtensionModel"
            }
          },
          "202": {
            "description": "Accepted",
            "headers": {
              "Azure-AsyncOperation": {
                "description": "Tracking URL for long running operation.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "ReplicationExtension_Update": {
            "$ref": "./examples/ReplicationExtension_Update.json"
          }
        }
      },
      "delete": {
        "tags": [
          "ReplicationExtension"
        ],
        "summary": "Deletes the replication extension.",
        "description": "Deletes the replication extension in the given vault.",
        "operationId": "ReplicationExtension_Delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vaultName",
            "description": "Vault Name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "replicationExtensionName",
            "description": "Replication extension name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "202": {
            "description": "Returns success on deletion.",
            "headers": {
              "Azure-AsyncOperation": {
                "description": "Tracking URL for long running operation.",
                "type": "string"
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "ReplicationExtension_Delete": {
            "$ref": "./examples/ReplicationExtension_Delete.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationVaults/{vaultName}/replicationExtensions": {
      "get": {
        "tags": [
          "ReplicationExtension"
        ],
        "summary": "Lists the replication extensions.",
        "description": "Gets the list of replication extensions in the given vault.",
        "operationId": "ReplicationExtension_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vaultName",
            "description": "Vault name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Replication extension Model Collection on success.",
            "schema": {
              "$ref": "#/definitions/ReplicationExtensionModelCollection"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "ReplicationExtension_List": {
            "$ref": "./examples/ReplicationExtension_List.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationVaults/{vaultName}/replicationExtensions/{replicationExtensionName}/operations/{operationId}": {
      "get": {
        "tags": [
          "ReplicationExtension"
        ],
        "summary": "Gets the replication extension operation status.",
        "description": "Tracks the results of an asynchronous operation on the replication extension.",
        "operationId": "ReplicationExtensionOperationStatus_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vaultName",
            "description": "Vault name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "replicationExtensionName",
            "description": "Replication extension name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "operationId",
            "description": "Operation Id.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/OperationStatus"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-examples": {
          "ReplicationExtensionOperationStatus_Get": {
            "$ref": "./examples/ReplicationExtensionOperationStatus_Get.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.DataReplication/locations/{location}/checkNameAvailability": {
      "post": {
        "tags": [
          "Tenant"
        ],
        "summary": "Performs the resource name availability check.",
        "description": "Checks the resource name availability.",
        "operationId": "CheckNameAvailability",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "in": "path",
            "name": "location",
            "description": "Resource location.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Resource details.",
            "schema": {
              "$ref": "#/definitions/CheckNameAvailabilityModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CheckNameAvailabilityResponseModel"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-examples": {
          "CheckNameAvailability": {
            "$ref": "./examples/CheckNameAvailability.json"
          }
        }
      }
    },
    "/providers/Microsoft.DataReplication/operations": {
      "get": {
        "tags": [
          "Tenant"
        ],
        "summary": "Get a list of REST API operations supported by Microsoft.DataReplication.",
        "description": "Gets the operations.",
        "operationId": "Operations_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OperationModel"
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-examples": {
          "Operations_List": {
            "$ref": "./examples/Operations_List.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/deployments/{deploymentId}/preflight": {
      "post": {
        "tags": [
          "Tenant"
        ],
        "summary": "Performs resource deployment validation.",
        "operationId": "DeploymentPreflight",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "deploymentId",
            "description": "Deployment Id.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Deployment preflight model.",
            "schema": {
              "$ref": "#/definitions/DeploymentPreflightModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "x-ms-examples": {
          "DeploymentPreflight": {
            "$ref": "./examples/DeploymentPreflight.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationVaults/{vaultName}": {
      "get": {
        "tags": [
          "Vault"
        ],
        "summary": "Gets the vault.",
        "description": "Gets the details of the vault.",
        "operationId": "Vault_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vaultName",
            "description": "Vault name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Vault Model on success.",
            "schema": {
              "$ref": "#/definitions/VaultModel"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-examples": {
          "Vault_Get": {
            "$ref": "./examples/Vault_Get.json"
          }
        }
      },
      "put": {
        "tags": [
          "Vault"
        ],
        "summary": "Puts the vault.",
        "description": "Creates the vault.",
        "operationId": "Vault_Create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vaultName",
            "description": "Vault Name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Vault properties.",
            "schema": {
              "$ref": "#/definitions/VaultModel"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/VaultModel"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/VaultModel"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          },
          "202": {
            "description": "Returns success on creation.",
            "headers": {
              "Azure-AsyncOperation": {
                "description": "Tracking URL for long running operation.",
                "type": "string"
              }
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "Vault_Create": {
            "$ref": "./examples/Vault_Create.json"
          }
        }
      },
      "patch": {
        "tags": [
          "Vault"
        ],
        "summary": "Updates the vault.",
        "description": "Performs update on the vault.",
        "operationId": "Vault_Update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vaultName",
            "description": "Vault Name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Vault properties.",
            "schema": {
              "$ref": "#/definitions/VaultModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/VaultModel"
            }
          },
          "202": {
            "description": "Returns success on update.",
            "headers": {
              "Azure-AsyncOperation": {
                "description": "Tracking URL for long running operation.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "Vault_Update": {
            "$ref": "./examples/Vault_Update.json"
          }
        }
      },
      "delete": {
        "tags": [
          "Vault"
        ],
        "summary": "Deletes the vault.",
        "description": "Removes the vault.",
        "operationId": "Vault_Delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vaultName",
            "description": "Vault Name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "202": {
            "description": "Returns success on deletion.",
            "headers": {
              "Azure-AsyncOperation": {
                "description": "Tracking URL for long running operation.",
                "type": "string"
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "Vault_Delete": {
            "$ref": "./examples/Vault_Delete.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.DataReplication/replicationVaults": {
      "get": {
        "tags": [
          "Vault"
        ],
        "summary": "Lists the vaults.",
        "description": "Gets the list of vaults in the given subscription.",
        "operationId": "Vault_ListBySubscription",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "in": "query",
            "name": "continuationToken",
            "description": "Continuation token from the previous call.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Vault Model Collection on success.",
            "schema": {
              "$ref": "#/definitions/VaultModelCollection"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "Vault_ListBySubscription": {
            "$ref": "./examples/Vault_ListBySubscription.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationVaults": {
      "get": {
        "tags": [
          "Vault"
        ],
        "summary": "Lists the vaults.",
        "description": "Gets the list of vaults in the given subscription and resource group.",
        "operationId": "Vault_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "query",
            "name": "continuationToken",
            "description": "Continuation token from the previous call.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Vault Model Collection on success.",
            "schema": {
              "$ref": "#/definitions/VaultModelCollection"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "Vault_List": {
            "$ref": "./examples/Vault_List.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationVaults/{vaultName}/statistics": {
      "get": {
        "tags": [
          "Vault"
        ],
        "summary": "Gets the vault statistics.",
        "description": "Gets the statistics for the vault.",
        "operationId": "VaultStatistics_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vaultName",
            "description": "Vault name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns VaultStatistics Model on success.",
            "schema": {
              "$ref": "#/definitions/VaultStatisticsModel"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-examples": {
          "VaultStatistics_Get": {
            "$ref": "./examples/VaultStatistics_Get.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationVaults/{vaultName}/operations/{operationId}": {
      "get": {
        "tags": [
          "Vault"
        ],
        "summary": "Gets the vault operation status.",
        "description": "Tracks the results of an asynchronous operation on the vault.",
        "operationId": "VaultOperationStatus_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vaultName",
            "description": "Vault name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "operationId",
            "description": "Operation Id.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "OperationType",
            "description": "The operation type.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/OperationStatus"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-examples": {
          "VaultOperationStatus_Get": {
            "$ref": "./examples/VaultOperationStatus_Get.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationVaults/{vaultName}/jobs/{workflowName}": {
      "get": {
        "tags": [
          "Workflow"
        ],
        "summary": "Gets the workflow.",
        "description": "Gets the details of the job.",
        "operationId": "Workflow_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vaultName",
            "description": "Vault name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "workflowName",
            "description": "Workflow name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Workflow Model on success.",
            "schema": {
              "$ref": "#/definitions/WorkflowModel"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-examples": {
          "Workflow_Get": {
            "$ref": "./examples/Workflow_Get.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationVaults/{vaultName}/jobs": {
      "get": {
        "tags": [
          "Workflow"
        ],
        "summary": "Lists the workflows.",
        "description": "Gets the list of jobs in the given vault.",
        "operationId": "Workflow_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vaultName",
            "description": "Vault name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "Filter string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "continuationToken",
            "description": "Continuation token.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Workflow Model Collection on success.",
            "schema": {
              "$ref": "#/definitions/WorkflowModelCollection"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "Workflow_List": {
            "$ref": "./examples/Workflow_List.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationVaults/{vaultName}/jobs/{workflowName}/operations/{operationId}": {
      "get": {
        "tags": [
          "Workflow"
        ],
        "summary": "Gets the workflow operation status.",
        "description": "Tracks the results of an asynchronous operation on the job.",
        "operationId": "WorkflowOperationStatus_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vaultName",
            "description": "Vault name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "workflowName",
            "description": "Workflow name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "operationId",
            "description": "Operation Id.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/OperationStatus"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-examples": {
          "WorkflowOperationStatus_Get": {
            "$ref": "./examples/WorkflowOperationStatus_Get.json"
          }
        }
      }
    }
  },
  "definitions": {
    "ApplianceComponentCustomProperties": {
      "description": "Appliance component custom properties.",
      "required": [
        "type"
      ],
      "type": "object",
      "properties": {
        "type": {
          "description": "Gets or sets the appliance component type.",
          "enum": [
            "MarsAgent",
            "ProcessServer",
            "PushInstaller",
            "RcmProxy",
            "RcmReplicationAgent",
            "RcmReprotectAgent",
            "Dra"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ApplianceComponentType",
            "modelAsString": true
          }
        }
      },
      "discriminator": "type"
    },
    "ApplianceComponentProperties": {
      "description": "Appliance component properties.",
      "type": "object",
      "properties": {
        "version": {
          "description": "Gets or sets the version.",
          "type": "string",
          "readOnly": true
        },
        "lastHeartbeatUtc": {
          "format": "date-time",
          "description": "Gets or sets the last heartbeat received.",
          "type": "string",
          "readOnly": true
        },
        "health": {
          "description": "Gets or sets the health.",
          "enum": [
            "Normal",
            "Warning",
            "Critical"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "ApplianceComponentState",
            "modelAsString": true
          }
        },
        "customProperties": {
          "allOf": [
            {
              "$ref": "#/definitions/ApplianceComponentCustomProperties"
            }
          ],
          "readOnly": true
        }
      }
    },
    "ApplianceProperties": {
      "description": "Appliance properties.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Gets or sets the appliance Id.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "Gets or sets the appliance name.",
          "type": "string",
          "readOnly": true
        },
        "biosId": {
          "description": "Gets or sets the appliance BIOS Id.",
          "type": "string",
          "readOnly": true
        },
        "fabricObjectId": {
          "description": "Gets or sets the fabric object Id.",
          "type": "string",
          "readOnly": true
        },
        "isRegistered": {
          "description": "Gets or sets a value indicating whether all ASR components are registered with the ASR\r\nservices.",
          "type": "boolean",
          "readOnly": true
        },
        "applianceComponents": {
          "description": "Gets or sets the list of appliance components.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApplianceComponentProperties"
          },
          "readOnly": true
        },
        "health": {
          "description": "Gets or sets the appliance health.",
          "enum": [
            "Normal",
            "Warning",
            "Critical"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "ApplianceComponentState",
            "modelAsString": true
          }
        }
      }
    },
    "ArmError": {
      "description": "ARM error.",
      "type": "object",
      "properties": {
        "Error": {
          "$ref": "#/definitions/ArmErrorInfo"
        }
      }
    },
    "ArmErrorInfo": {
      "description": "Arm error information.",
      "type": "object",
      "properties": {
        "Code": {
          "description": "Gets or sets the error code returned by the service.",
          "type": "string"
        },
        "Message": {
          "description": "Gets or sets error Message returned by the service.",
          "type": "string"
        }
      }
    },
    "AzStackHCIClusterProperties": {
      "description": "AzStackHCI cluster properties.",
      "required": [
        "clusterName",
        "resourceName",
        "storageAccountName",
        "storageContainers"
      ],
      "type": "object",
      "properties": {
        "clusterName": {
          "description": "Gets or sets the AzStackHCICluster FQDN name.",
          "minLength": 1,
          "type": "string"
        },
        "resourceName": {
          "description": "Gets or sets the AzStackHCICluster resource name.",
          "minLength": 1,
          "type": "string"
        },
        "storageAccountName": {
          "description": "Gets or sets the Storage account name.",
          "minLength": 1,
          "type": "string"
        },
        "storageContainers": {
          "description": "Gets or sets the list of AzStackHCICluster Storage Container.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/StorageContainerProperties"
          }
        }
      }
    },
    "AzStackHCIFabricModelCustomProperties": {
      "description": "AzStackHCI fabric model custom properties.",
      "required": [
        "azStackHCISiteId",
        "cluster",
        "migrationSolutionId"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/FabricModelCustomProperties"
        }
      ],
      "properties": {
        "azStackHCISiteId": {
          "description": "Gets or sets the ARM Id of the AzStackHCI site.",
          "minLength": 1,
          "type": "string"
        },
        "applianceName": {
          "description": "Gets or sets the Appliance name.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "cluster": {
          "$ref": "#/definitions/AzStackHCIClusterProperties"
        },
        "fabricResourceId": {
          "description": "Gets or sets the fabric resource Id.",
          "type": "string",
          "readOnly": true
        },
        "fabricContainerId": {
          "description": "Gets or sets the fabric container Id.",
          "type": "string",
          "readOnly": true
        },
        "migrationSolutionId": {
          "description": "Gets or sets the Migration solution ARM Id.",
          "minLength": 1,
          "type": "string"
        },
        "migrationHubUri": {
          "description": "Gets or sets the migration hub Uri.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ChangeRecoveryPointModel": {
      "description": "Change recovery point model.",
      "required": [
        "properties"
      ],
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/ChangeRecoveryPointModelProperties"
        }
      }
    },
    "ChangeRecoveryPointModelCustomProperties": {
      "description": "Change recovery point model custom properties.",
      "required": [
        "instanceType"
      ],
      "type": "object",
      "properties": {
        "instanceType": {
          "description": "Gets or sets the instance type.",
          "minLength": 1,
          "type": "string"
        }
      }
    },
    "ChangeRecoveryPointModelProperties": {
      "description": "Change recovery point model properties.",
      "required": [
        "customProperties",
        "recoveryPointName"
      ],
      "type": "object",
      "properties": {
        "recoveryPointName": {
          "description": "Gets or sets the name of the recovery point.\r\nEmpty recovery point is supported to simulate the case of 'Latest'\r\nrecovery point. In case, providers do not have such functionality,\r\nproviders need to add check at provider code level.",
          "type": "string"
        },
        "customProperties": {
          "$ref": "#/definitions/ChangeRecoveryPointModelCustomProperties"
        }
      }
    },
    "CheckNameAvailabilityModel": {
      "description": "Check name availability model.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Gets or sets the resource name.",
          "type": "string"
        },
        "type": {
          "description": "Gets or sets the resource type.",
          "type": "string"
        }
      }
    },
    "CheckNameAvailabilityResponseModel": {
      "description": "Check name availability response model.",
      "type": "object",
      "properties": {
        "nameAvailable": {
          "description": "Gets or sets a value indicating whether resource name is available or not.",
          "type": "boolean"
        },
        "reason": {
          "description": "Gets or sets the reason for resource name unavailability.",
          "type": "string"
        },
        "message": {
          "description": "Gets or sets the message for resource name unavailability.",
          "type": "string"
        }
      }
    },
    "DeploymentPreflightModel": {
      "description": "Deployment preflight model.",
      "type": "object",
      "properties": {
        "resources": {
          "description": "Gets or sets the list of resources.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentPreflightResource"
          }
        }
      }
    },
    "DeploymentPreflightResource": {
      "description": "Deployment preflight resource.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Gets or sets the resource name.",
          "type": "string"
        },
        "type": {
          "description": "Gets or sets the resource type.",
          "type": "string"
        },
        "location": {
          "description": "Gets or sets the location of the resource.",
          "type": "string"
        },
        "apiVersion": {
          "description": "Gets or sets the Api version.",
          "type": "string"
        }
      }
    },
    "DraModel": {
      "description": "Dra model.",
      "required": [
        "properties"
      ],
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/DraModelProperties"
        },
        "id": {
          "description": "Gets or sets the Id of the resource.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "Gets or sets the name of the resource.",
          "type": "string",
          "readOnly": true
        },
        "type": {
          "description": "Gets or sets the type of the resource.",
          "type": "string",
          "readOnly": true
        },
        "systemData": {
          "allOf": [
            {
              "$ref": "#/definitions/SystemDataModel"
            }
          ],
          "readOnly": true
        },
        "tags": {
          "description": "Gets or sets the resource tags.",
          "maxLength": 15,
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "x-ms-azure-resource": true
    },
    "DraModelCollection": {
      "description": "Dra model collection.",
      "type": "object",
      "properties": {
        "value": {
          "description": "Gets or sets the list of Dras.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DraModel"
          }
        },
        "nextLink": {
          "description": "Gets or sets the value of next link.",
          "type": "string"
        }
      }
    },
    "DraModelCustomProperties": {
      "description": "Dra model custom properties.",
      "required": [
        "instanceType"
      ],
      "type": "object",
      "properties": {
        "instanceType": {
          "description": "Gets or sets the instance type.",
          "minLength": 1,
          "type": "string"
        }
      },
      "discriminator": "instanceType"
    },
    "DraModelProperties": {
      "description": "Dra model properties.",
      "required": [
        "authenticationIdentity",
        "customProperties",
        "machineId",
        "machineName",
        "resourceAccessIdentity"
      ],
      "type": "object",
      "properties": {
        "correlationId": {
          "description": "Gets or sets the Dra correlation Id.",
          "type": "string",
          "readOnly": true
        },
        "machineId": {
          "description": "Gets or sets the machine Id where Dra is running.",
          "minLength": 1,
          "type": "string"
        },
        "machineName": {
          "description": "Gets or sets the machine name where Dra is running.",
          "minLength": 1,
          "type": "string"
        },
        "authenticationIdentity": {
          "$ref": "#/definitions/IdentityModel"
        },
        "resourceAccessIdentity": {
          "$ref": "#/definitions/IdentityModel"
        },
        "isResponsive": {
          "description": "Gets or sets a value indicating whether Dra is responsive.",
          "type": "boolean",
          "readOnly": true
        },
        "lastHeartbeat": {
          "format": "date-time",
          "description": "Gets or sets the time when last heartbeat was sent by the Dra.",
          "type": "string",
          "readOnly": true
        },
        "versionNumber": {
          "description": "Gets or sets the Dra version.",
          "type": "string",
          "readOnly": true
        },
        "provisioningState": {
          "description": "Gets or sets the provisioning state of the Dra.",
          "enum": [
            "Canceled",
            "Creating",
            "Deleting",
            "Deleted",
            "Failed",
            "Succeeded",
            "Updating"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "ProvisioningState",
            "modelAsString": true
          }
        },
        "healthErrors": {
          "description": "Gets or sets the list of health errors.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HealthErrorModel"
          },
          "readOnly": true
        },
        "customProperties": {
          "$ref": "#/definitions/DraModelCustomProperties"
        }
      }
    },
    "EmailConfigurationModel": {
      "description": "Email configuration model.",
      "required": [
        "properties"
      ],
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/EmailConfigurationModelProperties"
        },
        "id": {
          "description": "Gets or sets the Id of the resource.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "Gets or sets the name of the resource.",
          "type": "string",
          "readOnly": true
        },
        "type": {
          "description": "Gets or sets the type of the resource.",
          "type": "string",
          "readOnly": true
        },
        "systemData": {
          "allOf": [
            {
              "$ref": "#/definitions/SystemDataModel"
            }
          ],
          "readOnly": true
        },
        "tags": {
          "description": "Gets or sets the resource tags.",
          "maxLength": 15,
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "x-ms-azure-resource": true
    },
    "EmailConfigurationModelCollection": {
      "description": "Email configuration model collection.",
      "type": "object",
      "properties": {
        "value": {
          "description": "Gets or sets the list of email configurations.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmailConfigurationModel"
          }
        },
        "nextLink": {
          "description": "Gets or sets the value of next link.",
          "type": "string"
        }
      }
    },
    "EmailConfigurationModelProperties": {
      "description": "Email configuration model properties.",
      "required": [
        "sendToOwners"
      ],
      "type": "object",
      "properties": {
        "sendToOwners": {
          "description": "Gets or sets a value indicating whether to send email to subscription administrator.",
          "type": "boolean"
        },
        "customEmailAddresses": {
          "description": "Gets or sets the custom email address for sending emails.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "locale": {
          "description": "Gets or sets the locale for the email notification.",
          "type": "string"
        }
      }
    },
    "ErrorModel": {
      "description": "Error model.",
      "type": "object",
      "properties": {
        "code": {
          "description": "Gets or sets the error code.",
          "type": "string",
          "readOnly": true
        },
        "type": {
          "description": "Gets or sets the error type.",
          "type": "string",
          "readOnly": true
        },
        "severity": {
          "description": "Gets or sets the error severity.",
          "type": "string",
          "readOnly": true
        },
        "creationTime": {
          "format": "date-time",
          "description": "Gets or sets the creation time of error.",
          "type": "string",
          "readOnly": true
        },
        "message": {
          "description": "Gets or sets the error message.",
          "type": "string",
          "readOnly": true
        },
        "causes": {
          "description": "Gets or sets the possible causes of error.",
          "type": "string",
          "readOnly": true
        },
        "recommendation": {
          "description": "Gets or sets the recommended action to resolve error.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "EventModel": {
      "description": "Event model.",
      "required": [
        "properties"
      ],
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/EventModelProperties"
        },
        "id": {
          "description": "Gets or sets the Id of the resource.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "Gets or sets the name of the resource.",
          "type": "string",
          "readOnly": true
        },
        "type": {
          "description": "Gets or sets the type of the resource.",
          "type": "string",
          "readOnly": true
        },
        "systemData": {
          "allOf": [
            {
              "$ref": "#/definitions/SystemDataModel"
            }
          ],
          "readOnly": true
        },
        "tags": {
          "description": "Gets or sets the resource tags.",
          "maxLength": 15,
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "EventModelCollection": {
      "description": "Event model collection.",
      "type": "object",
      "properties": {
        "value": {
          "description": "Gets or sets the list of events.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EventModel"
          }
        },
        "nextLink": {
          "description": "Gets or sets the value of next link.",
          "type": "string"
        }
      }
    },
    "EventModelCustomProperties": {
      "description": "Event model custom properties.",
      "required": [
        "instanceType"
      ],
      "type": "object",
      "properties": {
        "instanceType": {
          "description": "Gets or sets the instance type.",
          "minLength": 1,
          "type": "string"
        }
      },
      "discriminator": "instanceType"
    },
    "EventModelProperties": {
      "description": "Event model properties.",
      "required": [
        "customProperties"
      ],
      "type": "object",
      "properties": {
        "resourceType": {
          "description": "Gets or sets the resource type.",
          "type": "string",
          "readOnly": true
        },
        "resourceName": {
          "description": "Gets or sets the resource name.",
          "type": "string",
          "readOnly": true
        },
        "eventType": {
          "description": "Gets or sets the event type.",
          "type": "string",
          "readOnly": true
        },
        "eventName": {
          "description": "Gets or sets the event name.",
          "type": "string",
          "readOnly": true
        },
        "timeOfOccurrence": {
          "format": "date-time",
          "description": "Gets or sets the time at which the event occurred at source.",
          "type": "string",
          "readOnly": true
        },
        "severity": {
          "description": "Gets or sets the event severity.",
          "type": "string",
          "readOnly": true
        },
        "description": {
          "description": "Gets or sets the event description.",
          "type": "string",
          "readOnly": true
        },
        "correlationId": {
          "description": "Gets or sets the event correlation Id.",
          "type": "string",
          "readOnly": true
        },
        "healthErrors": {
          "description": "Gets or sets the errors associated with this event.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HealthErrorModel"
          },
          "readOnly": true
        },
        "customProperties": {
          "$ref": "#/definitions/EventModelCustomProperties"
        }
      }
    },
    "FabricModel": {
      "description": "Fabric model.",
      "required": [
        "location",
        "properties"
      ],
      "type": "object",
      "properties": {
        "location": {
          "description": "Gets or sets the location of the fabric.",
          "minLength": 1,
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/FabricModelProperties"
        },
        "id": {
          "description": "Gets or sets the Id of the resource.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "Gets or sets the name of the resource.",
          "type": "string",
          "readOnly": true
        },
        "type": {
          "description": "Gets or sets the type of the resource.",
          "type": "string",
          "readOnly": true
        },
        "systemData": {
          "allOf": [
            {
              "$ref": "#/definitions/SystemDataModel"
            }
          ],
          "readOnly": true
        },
        "tags": {
          "description": "Gets or sets the resource tags.",
          "maxLength": 15,
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "x-ms-azure-resource": true
    },
    "FabricModelCollection": {
      "description": "Fabric model collection.",
      "type": "object",
      "properties": {
        "value": {
          "description": "Gets or sets the list of fabrics.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FabricModel"
          }
        },
        "nextLink": {
          "description": "Gets or sets the value of next link.",
          "type": "string"
        }
      }
    },
    "FabricModelCustomProperties": {
      "description": "Fabric model custom properties.",
      "required": [
        "instanceType"
      ],
      "type": "object",
      "properties": {
        "instanceType": {
          "description": "Gets or sets the instance type.",
          "minLength": 1,
          "type": "string"
        }
      },
      "discriminator": "instanceType"
    },
    "FabricModelProperties": {
      "description": "Fabric model properties.",
      "required": [
        "customProperties"
      ],
      "type": "object",
      "properties": {
        "provisioningState": {
          "description": "Gets or sets the provisioning state of the fabric.",
          "enum": [
            "Canceled",
            "Creating",
            "Deleting",
            "Deleted",
            "Failed",
            "Succeeded",
            "Updating"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "ProvisioningState",
            "modelAsString": true
          }
        },
        "serviceEndpoint": {
          "description": "Gets or sets the service endpoint.",
          "type": "string",
          "readOnly": true
        },
        "serviceResourceId": {
          "description": "Gets or sets the service resource Id.",
          "type": "string",
          "readOnly": true
        },
        "health": {
          "description": "Gets or sets the fabric health.",
          "enum": [
            "Normal",
            "Warning",
            "Critical"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "HealthStatus",
            "modelAsString": true
          }
        },
        "healthErrors": {
          "description": "Gets or sets the list of health errors.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HealthErrorModel"
          },
          "readOnly": true
        },
        "customProperties": {
          "$ref": "#/definitions/FabricModelCustomProperties"
        }
      }
    },
    "FabricStatisticsModel": {
      "description": "Fabric statistics model.",
      "type": "object",
      "properties": {
        "fabricErrors": {
          "description": "Gets or sets the list of fabric health errors.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HealthErrorModel"
          },
          "readOnly": true
        }
      }
    },
    "FailoverProtectedItemProperties": {
      "description": "Failover properties of the protected item.",
      "type": "object",
      "properties": {
        "protectedItemName": {
          "description": "Gets or sets the protected item name.",
          "type": "string",
          "readOnly": true
        },
        "vmName": {
          "description": "Gets or sets the VM name.",
          "type": "string",
          "readOnly": true
        },
        "testVmName": {
          "description": "Gets or sets the test VM name.",
          "type": "string",
          "readOnly": true
        },
        "recoveryPointId": {
          "description": "Gets or sets the recovery point Id.",
          "type": "string",
          "readOnly": true
        },
        "recoveryPointTime": {
          "format": "date-time",
          "description": "Gets or sets the recovery point time.",
          "type": "string",
          "readOnly": true
        },
        "networkName": {
          "description": "Gets or sets the network name.",
          "type": "string",
          "readOnly": true
        },
        "subnet": {
          "description": "Gets or sets the network subnet.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "FailoverWorkflowModelCustomProperties": {
      "description": "Failover workflow model custom properties.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/WorkflowModelCustomProperties"
        }
      ],
      "properties": {
        "protectedItemDetails": {
          "description": "Gets or sets the failed over protected item details.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FailoverProtectedItemProperties"
          },
          "readOnly": true
        }
      }
    },
    "HealthErrorModel": {
      "description": "Health error model.",
      "type": "object",
      "properties": {
        "affectedResourceType": {
          "description": "Gets or sets the type of affected resource type.",
          "type": "string"
        },
        "affectedResourceCorrelationIds": {
          "description": "Gets or sets the list of affected resource correlation Ids. This can be used to\r\nuniquely identify the count of items affected by a specific category and severity\r\nas well as count of item affected by an specific issue.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "childErrors": {
          "description": "Gets or sets a list of child health errors associated with this error.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InnerHealthErrorModel"
          }
        },
        "code": {
          "description": "Gets or sets the error code.",
          "type": "string",
          "readOnly": true
        },
        "healthCategory": {
          "description": "Gets or sets the health category.",
          "type": "string",
          "readOnly": true
        },
        "category": {
          "description": "Gets or sets the error category.",
          "type": "string",
          "readOnly": true
        },
        "severity": {
          "description": "Gets or sets the error severity.",
          "type": "string",
          "readOnly": true
        },
        "source": {
          "description": "Gets or sets the error source.",
          "type": "string",
          "readOnly": true
        },
        "creationTime": {
          "format": "date-time",
          "description": "Gets or sets the error creation time.",
          "type": "string",
          "readOnly": true
        },
        "isCustomerResolvable": {
          "description": "Gets or sets a value indicating whether the error is customer resolvable.",
          "type": "boolean",
          "readOnly": true
        },
        "summary": {
          "description": "Gets or sets the error summary.",
          "type": "string",
          "readOnly": true
        },
        "message": {
          "description": "Gets or sets the error message.",
          "type": "string",
          "readOnly": true
        },
        "causes": {
          "description": "Gets or sets possible causes of the error.",
          "type": "string",
          "readOnly": true
        },
        "recommendation": {
          "description": "Gets or sets recommended action to resolve the error.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "HyperVMigrateFabricModelCustomProperties": {
      "description": "HyperV migrate fabric model custom properties.",
      "required": [
        "hyperVSiteId",
        "migrationSolutionId"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/FabricModelCustomProperties"
        }
      ],
      "properties": {
        "hyperVSiteId": {
          "description": "Gets or sets the ARM Id of the HyperV site.",
          "minLength": 1,
          "type": "string"
        },
        "fabricResourceId": {
          "description": "Gets or sets the fabric resource Id.",
          "type": "string",
          "readOnly": true
        },
        "fabricContainerId": {
          "description": "Gets or sets the fabric container Id.",
          "type": "string",
          "readOnly": true
        },
        "migrationSolutionId": {
          "description": "Gets or sets the migration solution ARM Id.",
          "minLength": 1,
          "type": "string"
        },
        "migrationHubUri": {
          "description": "Gets or sets the migration hub Uri.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "HyperVToAzStackHCIDiskInput": {
      "description": "HyperVToAzStack disk input.",
      "required": [
        "diskFileFormat",
        "diskId",
        "diskSizeGB",
        "isOsDisk"
      ],
      "type": "object",
      "properties": {
        "diskId": {
          "description": "Gets or sets the disk Id.",
          "minLength": 1,
          "type": "string"
        },
        "storageContainerId": {
          "description": "Gets or sets the target storage account ARM Id.",
          "type": "string"
        },
        "isDynamic": {
          "description": "Gets or sets a value indicating whether dynamic sizing is enabled on the virtual hard\r\ndisk.",
          "type": "boolean"
        },
        "diskSizeGB": {
          "format": "int64",
          "description": "Gets or sets the disk size in GB.",
          "type": "integer"
        },
        "diskFileFormat": {
          "description": "Gets or sets the type of the virtual hard disk, vhd or vhdx.",
          "minLength": 1,
          "type": "string"
        },
        "isOsDisk": {
          "description": "Gets or sets a value indicating whether disk is os disk.",
          "type": "boolean"
        }
      }
    },
    "HyperVToAzStackHCIEventModelCustomProperties": {
      "description": "HyperV to  AzStackHCI event model custom properties. This class provides provider specific\r\ndetails for events of type DataContract.HealthEvents.HealthEventType.ProtectedItemHealth and\r\nDataContract.HealthEvents.HealthEventType.AgentHealth.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/EventModelCustomProperties"
        }
      ],
      "properties": {
        "eventSourceFriendlyName": {
          "description": "Gets or sets the friendly name of the source which has raised this health event.",
          "type": "string",
          "readOnly": true
        },
        "protectedItemFriendlyName": {
          "description": "Gets or sets the protected item friendly name.",
          "type": "string",
          "readOnly": true
        },
        "sourceApplianceName": {
          "description": "Gets or sets the source appliance name.",
          "type": "string",
          "readOnly": true
        },
        "targetApplianceName": {
          "description": "Gets or sets the source target name.",
          "type": "string",
          "readOnly": true
        },
        "serverType": {
          "description": "Gets or sets the server type.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "HyperVToAzStackHCINicInput": {
      "description": "HyperVToAzStackHCI NIC properties.",
      "required": [
        "nicId",
        "selectionTypeForFailover"
      ],
      "type": "object",
      "properties": {
        "nicId": {
          "description": "Gets or sets the NIC Id.",
          "minLength": 1,
          "type": "string"
        },
        "networkName": {
          "description": "Gets or sets the network name.",
          "type": "string",
          "readOnly": true
        },
        "targetNetworkId": {
          "description": "Gets or sets the target network Id within AzStackHCI Cluster.",
          "type": "string",
          "readOnly": true
        },
        "testNetworkId": {
          "description": "Gets or sets the target test network Id within AzStackHCI Cluster.",
          "type": "string",
          "readOnly": true
        },
        "selectionTypeForFailover": {
          "description": "Gets or sets the selection type of the NIC.",
          "enum": [
            "NotSelected",
            "SelectedByUser",
            "SelectedByDefault",
            "SelectedByUserOverride"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "VMNicSelection",
            "modelAsString": true
          }
        }
      }
    },
    "HyperVToAzStackHCIPlannedFailoverModelCustomProperties": {
      "description": "HyperV to AzStackHCI planned failover model custom properties.",
      "required": [
        "shutdownSourceVM"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/PlannedFailoverModelCustomProperties"
        }
      ],
      "properties": {
        "shutdownSourceVM": {
          "description": "Gets or sets a value indicating whether VM needs to be shut down.",
          "type": "boolean"
        }
      }
    },
    "HyperVToAzStackHCIPolicyModelCustomProperties": {
      "description": "HyperV To AzStackHCI Policy model custom properties.",
      "required": [
        "appConsistentFrequencyInMinutes",
        "crashConsistentFrequencyInMinutes",
        "recoveryPointHistoryInMinutes"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/PolicyModelCustomProperties"
        }
      ],
      "properties": {
        "recoveryPointHistoryInMinutes": {
          "format": "int32",
          "description": "Gets or sets the duration in minutes until which the recovery points need to be\r\nstored.",
          "type": "integer"
        },
        "crashConsistentFrequencyInMinutes": {
          "format": "int32",
          "description": "Gets or sets the crash consistent snapshot frequency (in minutes).",
          "type": "integer"
        },
        "appConsistentFrequencyInMinutes": {
          "format": "int32",
          "description": "Gets or sets the app consistent snapshot frequency (in minutes).",
          "type": "integer"
        }
      }
    },
    "HyperVToAzStackHCIProtectedDiskProperties": {
      "description": "HyperVToAzStackHCI protected disk properties.",
      "type": "object",
      "properties": {
        "storageContainerId": {
          "description": "Gets or sets the ARM Id of the storage container.",
          "type": "string",
          "readOnly": true
        },
        "storageContainerLocalPath": {
          "description": "Gets or sets the local path of the storage container.",
          "type": "string",
          "readOnly": true
        },
        "sourceDiskId": {
          "description": "Gets or sets the source disk Id.",
          "type": "string",
          "readOnly": true
        },
        "sourceDiskName": {
          "description": "Gets or sets the source disk Name.",
          "type": "string",
          "readOnly": true
        },
        "seedDiskName": {
          "description": "Gets or sets the seed disk name.",
          "type": "string",
          "readOnly": true
        },
        "testMigrateDiskName": {
          "description": "Gets or sets the test failover clone disk.",
          "type": "string",
          "readOnly": true
        },
        "migrateDiskName": {
          "description": "Gets or sets the failover clone disk.",
          "type": "string",
          "readOnly": true
        },
        "isOsDisk": {
          "description": "Gets or sets a value indicating whether the disk is the OS disk.",
          "type": "boolean",
          "readOnly": true
        },
        "capacityInBytes": {
          "format": "int64",
          "description": "Gets or sets the disk capacity in bytes.",
          "type": "integer",
          "readOnly": true
        },
        "isDynamic": {
          "description": "Gets or sets a value indicating whether dynamic sizing is enabled on the virtual hard\r\ndisk.",
          "type": "boolean",
          "readOnly": true
        },
        "diskType": {
          "description": "Gets or sets the disk type.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "HyperVToAzStackHCIProtectedItemModelCustomProperties": {
      "description": "HyperV to AzStackHCI Protected item model custom properties.",
      "required": [
        "customlocationRegion",
        "disksToInclude",
        "fabricDiscoveryMachineId",
        "hyperVGeneration",
        "nicsToInclude",
        "runAsAccountId",
        "sourceDraName",
        "storageContainerId",
        "targetArcClusterCustomLocationId",
        "targetDraName",
        "targetHCIClusterId",
        "targetResourceGroupId"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ProtectedItemModelCustomProperties"
        }
      ],
      "properties": {
        "activeLocation": {
          "description": "Gets or sets the location of the protected item.",
          "enum": [
            "Primary",
            "Recovery"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "ProtectedItemActiveLocation",
            "modelAsString": true
          }
        },
        "targetHCIClusterId": {
          "description": "Gets or sets the Target HCI Cluster ARM Id.",
          "minLength": 1,
          "type": "string"
        },
        "targetArcClusterCustomLocationId": {
          "description": "Gets or sets the Target Arc Cluster Custom Location ARM Id.",
          "minLength": 1,
          "type": "string"
        },
        "targetAzStackHCIClusterName": {
          "description": "Gets or sets the Target AzStackHCI cluster name.",
          "type": "string",
          "readOnly": true
        },
        "fabricDiscoveryMachineId": {
          "description": "Gets or sets the ARM Id of the discovered machine.",
          "minLength": 1,
          "type": "string"
        },
        "disksToInclude": {
          "description": "Gets or sets the list of disks to replicate.",
          "minItems": 1,
          "type": "array",
          "items": {
            "$ref": "#/definitions/HyperVToAzStackHCIDiskInput"
          }
        },
        "nicsToInclude": {
          "description": "Gets or sets the list of disks to replicate.",
          "minItems": 1,
          "type": "array",
          "items": {
            "$ref": "#/definitions/HyperVToAzStackHCINicInput"
          }
        },
        "sourceVmName": {
          "description": "Gets or sets the source VM display name.",
          "type": "string",
          "readOnly": true
        },
        "sourceCpuCores": {
          "format": "int32",
          "description": "Gets or sets the source VM CPU cores.",
          "type": "integer",
          "readOnly": true
        },
        "sourceMemoryInMegaBytes": {
          "format": "double",
          "description": "Gets or sets the source VM ram memory size in megabytes.",
          "type": "number",
          "readOnly": true
        },
        "targetVmName": {
          "description": "Gets or sets the target VM display name.",
          "type": "string"
        },
        "targetResourceGroupId": {
          "description": "Gets or sets the target resource group ARM Id.",
          "minLength": 1,
          "type": "string"
        },
        "storageContainerId": {
          "description": "Gets or sets the target storage container ARM Id.",
          "minLength": 1,
          "type": "string"
        },
        "hyperVGeneration": {
          "description": "Gets or sets the hypervisor generation of the virtual machine.",
          "minLength": 1,
          "type": "string"
        },
        "targetNetworkId": {
          "description": "Gets or sets the target network Id within AzStackHCI Cluster.",
          "type": "string"
        },
        "testNetworkId": {
          "description": "Gets or sets the target test network Id within AzStackHCI Cluster.",
          "type": "string"
        },
        "targetCpuCores": {
          "format": "int32",
          "description": "Gets or sets the target CPU cores.",
          "type": "integer"
        },
        "isDynamicRam": {
          "description": "Gets or sets a value indicating whether memory is dynamical.",
          "type": "boolean"
        },
        "dynamicMemoryConfig": {
          "$ref": "#/definitions/ProtectedItemDynamicMemoryConfig"
        },
        "targetMemoryInMegaBytes": {
          "format": "int32",
          "description": "Gets or sets the target memory in mega-bytes.",
          "type": "integer"
        },
        "runAsAccountId": {
          "description": "Gets or sets the Run As account Id.",
          "minLength": 1,
          "type": "string"
        },
        "sourceDraName": {
          "description": "Gets or sets the source DRA name.",
          "minLength": 1,
          "type": "string"
        },
        "targetDraName": {
          "description": "Gets or sets the target DRA name.",
          "minLength": 1,
          "type": "string"
        },
        "sourceApplianceName": {
          "description": "Gets or sets the source appliance name.",
          "type": "string",
          "readOnly": true
        },
        "targetApplianceName": {
          "description": "Gets or sets the target appliance name.",
          "type": "string",
          "readOnly": true
        },
        "osType": {
          "description": "Gets or sets the type of the OS.",
          "type": "string",
          "readOnly": true
        },
        "osName": {
          "description": "Gets or sets the name of the OS.",
          "type": "string",
          "readOnly": true
        },
        "firmwareType": {
          "description": "Gets or sets the firmware type.",
          "type": "string",
          "readOnly": true
        },
        "targetLocation": {
          "description": "Gets or sets the target location.",
          "type": "string",
          "readOnly": true
        },
        "customlocationRegion": {
          "description": "Gets or sets the location of Azure Arc HCI custom location resource.",
          "minLength": 1,
          "type": "string"
        },
        "failoverRecoveryPointId": {
          "description": "Gets or sets the recovery point Id to which the VM was failed over.",
          "type": "string",
          "readOnly": true
        },
        "lastRecoveryPointReceived": {
          "format": "date-time",
          "description": "Gets or sets the last recovery point received time.",
          "type": "string",
          "readOnly": true
        },
        "lastRecoveryPointId": {
          "description": "Gets or sets the last recovery point Id.",
          "type": "string",
          "readOnly": true
        },
        "initialReplicationProgressPercentage": {
          "format": "int32",
          "description": "Gets or sets the initial replication progress percentage. This is calculated based on\r\ntotal bytes processed for all disks in the source VM.",
          "type": "integer",
          "readOnly": true
        },
        "resyncProgressPercentage": {
          "format": "int32",
          "description": "Gets or sets the resync progress percentage. This is calculated based on total bytes\r\nprocessed for all disks in the source VM.",
          "type": "integer",
          "readOnly": true
        },
        "protectedDisks": {
          "description": "Gets or sets the list of protected disks.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HyperVToAzStackHCIProtectedDiskProperties"
          },
          "readOnly": true
        },
        "protectedNics": {
          "description": "Gets or sets the VM NIC details.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HyperVToAzStackHCIProtectedNicProperties"
          },
          "readOnly": true
        },
        "targetVmBiosId": {
          "description": "Gets or sets the BIOS Id of the target AzStackHCI VM.",
          "type": "string",
          "readOnly": true
        },
        "lastReplicationUpdateTime": {
          "format": "date-time",
          "description": "Gets or sets the latest timestamp that replication status is updated.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "HyperVToAzStackHCIProtectedNicProperties": {
      "description": "HyperVToAzStackHCI NIC properties.",
      "type": "object",
      "properties": {
        "nicId": {
          "description": "Gets or sets the NIC Id.",
          "type": "string",
          "readOnly": true
        },
        "macAddress": {
          "description": "Gets or sets the NIC mac address.",
          "type": "string",
          "readOnly": true
        },
        "networkName": {
          "description": "Gets or sets the network name.",
          "type": "string",
          "readOnly": true
        },
        "targetNetworkId": {
          "description": "Gets or sets the target network Id within AzStackHCI Cluster.",
          "type": "string",
          "readOnly": true
        },
        "testNetworkId": {
          "description": "Gets or sets the target test network Id within AzStackHCI Cluster.",
          "type": "string",
          "readOnly": true
        },
        "selectionTypeForFailover": {
          "description": "Gets or sets the selection type of the NIC.",
          "enum": [
            "NotSelected",
            "SelectedByUser",
            "SelectedByDefault",
            "SelectedByUserOverride"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "VMNicSelection",
            "modelAsString": true
          }
        }
      }
    },
    "HyperVToAzStackHCIRecoveryPointModelCustomProperties": {
      "description": "HyperV to AzStackHCI recovery point model custom properties.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/RecoveryPointModelCustomProperties"
        }
      ],
      "properties": {
        "diskIds": {
          "description": "Gets or sets the list of the disk Ids.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        }
      }
    },
    "HyperVToAzStackHCIReplicationExtensionModelCustomProperties": {
      "description": "HyperV to AzStackHCI Replication extension model custom properties.",
      "required": [
        "azStackHCIFabricArmId",
        "hyperVFabricArmId"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ReplicationExtensionModelCustomProperties"
        }
      ],
      "properties": {
        "hyperVFabricArmId": {
          "description": "Gets or sets the ARM Id of the source HyperV fabric.",
          "minLength": 1,
          "type": "string"
        },
        "hyperVSiteId": {
          "description": "Gets or sets the ARM Id of the HyperV site.",
          "type": "string",
          "readOnly": true
        },
        "azStackHCIFabricArmId": {
          "description": "Gets or sets the ARM Id of the target AzStackHCI fabric.",
          "minLength": 1,
          "type": "string"
        },
        "azStackHCISiteId": {
          "description": "Gets or sets the ARM Id of the AzStackHCI site.",
          "type": "string",
          "readOnly": true
        },
        "storageAccountId": {
          "description": "Gets or sets the storage account Id.",
          "type": "string"
        },
        "storageAccountSasSecretName": {
          "description": "Gets or sets the Sas Secret of storage account.",
          "type": "string"
        },
        "asrServiceUri": {
          "description": "Gets or sets the Uri of ASR.",
          "type": "string",
          "readOnly": true
        },
        "rcmServiceUri": {
          "description": "Gets or sets the Uri of Rcm.",
          "type": "string",
          "readOnly": true
        },
        "gatewayServiceUri": {
          "description": "Gets or sets the Uri of Gateway.",
          "type": "string",
          "readOnly": true
        },
        "sourceGatewayServiceId": {
          "description": "Gets or sets the gateway service Id of source.",
          "type": "string",
          "readOnly": true
        },
        "targetGatewayServiceId": {
          "description": "Gets or sets the gateway service Id of target.",
          "type": "string",
          "readOnly": true
        },
        "sourceStorageContainerName": {
          "description": "Gets or sets the source storage container name.",
          "type": "string",
          "readOnly": true
        },
        "targetStorageContainerName": {
          "description": "Gets or sets the target storage container name.",
          "type": "string",
          "readOnly": true
        },
        "resourceLocation": {
          "description": "Gets or sets the resource location.",
          "type": "string",
          "readOnly": true
        },
        "subscriptionId": {
          "description": "Gets or sets the subscription.",
          "type": "string",
          "readOnly": true
        },
        "resourceGroup": {
          "description": "Gets or sets the resource group.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "IdentityModel": {
      "description": "Identity model.",
      "required": [
        "aadAuthority",
        "applicationId",
        "audience",
        "objectId",
        "tenantId"
      ],
      "type": "object",
      "properties": {
        "tenantId": {
          "description": "Gets or sets the tenant Id of the SPN with which Dra communicates to service.",
          "minLength": 1,
          "type": "string"
        },
        "applicationId": {
          "description": "Gets or sets the client/application Id of the SPN with which Dra communicates to\r\nservice.",
          "minLength": 1,
          "type": "string"
        },
        "objectId": {
          "description": "Gets or sets the object Id of the SPN with which Dra communicates to service.",
          "minLength": 1,
          "type": "string"
        },
        "audience": {
          "description": "Gets or sets the audience of the SPN with which Dra communicates to service.",
          "minLength": 1,
          "type": "string"
        },
        "aadAuthority": {
          "description": "Gets or sets the authority of the SPN with which Dra communicates to service.",
          "minLength": 1,
          "type": "string"
        }
      }
    },
    "InnerHealthErrorModel": {
      "description": "Inner health error model.",
      "type": "object",
      "properties": {
        "code": {
          "description": "Gets or sets the error code.",
          "type": "string",
          "readOnly": true
        },
        "healthCategory": {
          "description": "Gets or sets the health category.",
          "type": "string",
          "readOnly": true
        },
        "category": {
          "description": "Gets or sets the error category.",
          "type": "string",
          "readOnly": true
        },
        "severity": {
          "description": "Gets or sets the error severity.",
          "type": "string",
          "readOnly": true
        },
        "source": {
          "description": "Gets or sets the error source.",
          "type": "string",
          "readOnly": true
        },
        "creationTime": {
          "format": "date-time",
          "description": "Gets or sets the error creation time.",
          "type": "string",
          "readOnly": true
        },
        "isCustomerResolvable": {
          "description": "Gets or sets a value indicating whether the error is customer resolvable.",
          "type": "boolean",
          "readOnly": true
        },
        "summary": {
          "description": "Gets or sets the error summary.",
          "type": "string",
          "readOnly": true
        },
        "message": {
          "description": "Gets or sets the error message.",
          "type": "string",
          "readOnly": true
        },
        "causes": {
          "description": "Gets or sets possible causes of the error.",
          "type": "string",
          "readOnly": true
        },
        "recommendation": {
          "description": "Gets or sets recommended action to resolve the error.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "OperationModel": {
      "description": "Operation model.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Gets or sets the name of the operation.",
          "type": "string"
        },
        "isDataAction": {
          "description": "Gets or sets a value indicating whether the action is specific to data plane or\r\ncontrol plane.",
          "type": "boolean"
        },
        "origin": {
          "description": "Gets or sets the executor of the operation.",
          "type": "string"
        },
        "display": {
          "$ref": "#/definitions/OperationModelProperties"
        }
      }
    },
    "OperationModelProperties": {
      "description": "Operation model properties.",
      "type": "object",
      "properties": {
        "provider": {
          "description": "Gets or sets the resource provider name.",
          "type": "string"
        },
        "resource": {
          "description": "Gets or sets resource name.",
          "type": "string"
        },
        "operation": {
          "description": "Gets or sets the operation.",
          "type": "string"
        },
        "description": {
          "description": "Gets or sets the description.",
          "type": "string"
        }
      }
    },
    "OperationStatus": {
      "description": "Defines the operation status.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Gets or sets the Id.",
          "type": "string"
        },
        "name": {
          "description": "Gets or sets the operation name.",
          "type": "string"
        },
        "status": {
          "description": "Gets or sets the status of the operation. ARM expects the terminal status to be one of\r\nSucceeded/ Failed/ Canceled. All other values imply that the operation is still running.",
          "type": "string"
        },
        "startTime": {
          "description": "Gets or sets the start time.",
          "type": "string"
        },
        "endTime": {
          "description": "Gets or sets the end time.",
          "type": "string"
        }
      }
    },
    "PlannedFailoverModel": {
      "description": "Planned failover model.",
      "required": [
        "properties"
      ],
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/PlannedFailoverModelProperties"
        }
      }
    },
    "PlannedFailoverModelCustomProperties": {
      "description": "Planned failover model custom properties.",
      "required": [
        "instanceType"
      ],
      "type": "object",
      "properties": {
        "instanceType": {
          "description": "Gets or sets the instance type.",
          "minLength": 1,
          "type": "string"
        }
      },
      "discriminator": "instanceType"
    },
    "PlannedFailoverModelProperties": {
      "description": "Planned failover model properties.",
      "required": [
        "customProperties"
      ],
      "type": "object",
      "properties": {
        "customProperties": {
          "$ref": "#/definitions/PlannedFailoverModelCustomProperties"
        }
      }
    },
    "PolicyModel": {
      "description": "Policy model.",
      "required": [
        "properties"
      ],
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/PolicyModelProperties"
        },
        "id": {
          "description": "Gets or sets the Id of the resource.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "Gets or sets the name of the resource.",
          "type": "string",
          "readOnly": true
        },
        "type": {
          "description": "Gets or sets the type of the resource.",
          "type": "string",
          "readOnly": true
        },
        "systemData": {
          "allOf": [
            {
              "$ref": "#/definitions/SystemDataModel"
            }
          ],
          "readOnly": true
        },
        "tags": {
          "description": "Gets or sets the resource tags.",
          "maxLength": 15,
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "x-ms-azure-resource": true
    },
    "PolicyModelCollection": {
      "description": "Policy model collection.",
      "type": "object",
      "properties": {
        "value": {
          "description": "Gets or sets the list of policies.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PolicyModel"
          }
        },
        "nextLink": {
          "description": "Gets or sets the value of next link.",
          "type": "string"
        }
      }
    },
    "PolicyModelCustomProperties": {
      "description": "Policy model custom properties.",
      "required": [
        "instanceType"
      ],
      "type": "object",
      "properties": {
        "instanceType": {
          "description": "Gets or sets the instance type.",
          "minLength": 1,
          "type": "string"
        }
      },
      "discriminator": "instanceType"
    },
    "PolicyModelProperties": {
      "description": "Policy model properties.",
      "required": [
        "customProperties"
      ],
      "type": "object",
      "properties": {
        "provisioningState": {
          "description": "Gets or sets the provisioning state of the policy.",
          "enum": [
            "Canceled",
            "Creating",
            "Deleting",
            "Deleted",
            "Failed",
            "Succeeded",
            "Updating"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "ProvisioningState",
            "modelAsString": true
          }
        },
        "customProperties": {
          "$ref": "#/definitions/PolicyModelCustomProperties"
        }
      }
    },
    "ProcessServerProperties": {
      "description": "Process server properties.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ApplianceComponentCustomProperties"
        }
      ],
      "properties": {
        "ipAddresses": {
          "description": "Gets or sets the list of IP addresses for communicating with the RCM component.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "totalMemoryInBytes": {
          "format": "int64",
          "description": "Gets or sets the total memory in bytes.",
          "type": "integer",
          "readOnly": true
        },
        "availableMemoryInBytes": {
          "format": "int64",
          "description": "Gets or sets the available memory in bytes.",
          "type": "integer",
          "readOnly": true
        },
        "usedMemoryInBytes": {
          "format": "int64",
          "description": "Gets or sets the used memory in bytes.",
          "type": "integer",
          "readOnly": true
        },
        "memoryUsagePercentage": {
          "format": "double",
          "description": "Gets or sets the memory usage percentage in bytes.",
          "type": "number",
          "readOnly": true
        },
        "totalSpaceInBytes": {
          "format": "int64",
          "description": "Gets or sets the total disk space in bytes.",
          "type": "integer",
          "readOnly": true
        },
        "availableSpaceInBytes": {
          "format": "int64",
          "description": "Gets or sets the available disk space in bytes.",
          "type": "integer",
          "readOnly": true
        },
        "usedSpaceInBytes": {
          "format": "int64",
          "description": "Gets or sets the used disk space in bytes.",
          "type": "integer",
          "readOnly": true
        },
        "freeSpacePercentage": {
          "format": "double",
          "description": "Gets or sets the free disk space percentage.",
          "type": "number",
          "readOnly": true
        },
        "throughputUploadPendingDataInBytes": {
          "format": "int64",
          "description": "Gets or sets the uploading pending data in bytes.",
          "type": "integer",
          "readOnly": true
        },
        "throughputInBytes": {
          "format": "int64",
          "description": "Gets or sets the throughput in bytes.",
          "type": "integer",
          "readOnly": true
        },
        "processorUsagePercentage": {
          "format": "double",
          "description": "Gets or sets the processor usage percentage.",
          "type": "number",
          "readOnly": true
        },
        "throughputStatus": {
          "description": "Gets or sets the throughput status.",
          "enum": [
            "Healthy",
            "Warning",
            "Critical",
            "Unknown"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "ApplianceStatisticStatus",
            "modelAsString": true
          }
        },
        "systemLoad": {
          "format": "int64",
          "description": "Gets or sets the system load.",
          "type": "integer",
          "readOnly": true
        },
        "systemLoadStatus": {
          "description": "Gets or sets the system load status.",
          "enum": [
            "Healthy",
            "Warning",
            "Critical",
            "Unknown"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "ApplianceStatisticStatus",
            "modelAsString": true
          }
        },
        "diskUsageStatus": {
          "description": "Gets or sets the disk usage status.",
          "enum": [
            "Healthy",
            "Warning",
            "Critical",
            "Unknown"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "ApplianceStatisticStatus",
            "modelAsString": true
          }
        },
        "memoryUsageStatus": {
          "description": "Gets or sets the memory usage status.",
          "enum": [
            "Healthy",
            "Warning",
            "Critical",
            "Unknown"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "ApplianceStatisticStatus",
            "modelAsString": true
          }
        },
        "processorUsageStatus": {
          "description": "Gets or sets the processor usage status.",
          "enum": [
            "Healthy",
            "Warning",
            "Critical",
            "Unknown"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "ApplianceStatisticStatus",
            "modelAsString": true
          }
        }
      }
    },
    "ProtectedItemDynamicMemoryConfig": {
      "description": "Protected item dynamic memory config.",
      "type": "object",
      "properties": {
        "maximumMemoryInMegaBytes": {
          "format": "int64",
          "description": "Gets or sets maximum memory in MB.",
          "type": "integer",
          "readOnly": true
        },
        "minimumMemoryInMegaBytes": {
          "format": "int64",
          "description": "Gets or sets minimum memory in MB.",
          "type": "integer",
          "readOnly": true
        },
        "targetMemoryBufferPercentage": {
          "format": "int32",
          "description": "Gets or sets target memory buffer in %.",
          "type": "integer",
          "readOnly": true
        }
      }
    },
    "ProtectedItemJobProperties": {
      "description": "Protected item job properties.",
      "type": "object",
      "properties": {
        "scenarioName": {
          "description": "Gets or sets protection scenario name.",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "Gets or sets workflow Id.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "Gets or sets workflow name.",
          "type": "string",
          "readOnly": true
        },
        "displayName": {
          "description": "Gets or sets the workflow friendly display name.",
          "type": "string",
          "readOnly": true
        },
        "state": {
          "description": "Gets or sets workflow state.",
          "type": "string",
          "readOnly": true
        },
        "startTime": {
          "format": "date-time",
          "description": "Gets or sets start time of the workflow.",
          "type": "string",
          "readOnly": true
        },
        "endTime": {
          "format": "date-time",
          "description": "Gets or sets end time of the workflow.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ProtectedItemModel": {
      "description": "Protected item model.",
      "required": [
        "properties"
      ],
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/ProtectedItemModelProperties"
        },
        "id": {
          "description": "Gets or sets the Id of the resource.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "Gets or sets the name of the resource.",
          "type": "string",
          "readOnly": true
        },
        "type": {
          "description": "Gets or sets the type of the resource.",
          "type": "string",
          "readOnly": true
        },
        "systemData": {
          "allOf": [
            {
              "$ref": "#/definitions/SystemDataModel"
            }
          ],
          "readOnly": true
        },
        "tags": {
          "description": "Gets or sets the resource tags.",
          "maxLength": 15,
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "x-ms-azure-resource": true
    },
    "ProtectedItemModelCollection": {
      "description": "Protected item model collection.",
      "type": "object",
      "properties": {
        "value": {
          "description": "Gets or sets the list of protected items.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProtectedItemModel"
          }
        },
        "nextLink": {
          "description": "Gets or sets the value of next link.",
          "type": "string"
        }
      }
    },
    "ProtectedItemModelCustomProperties": {
      "description": "Protected item model custom properties.",
      "required": [
        "instanceType"
      ],
      "type": "object",
      "properties": {
        "instanceType": {
          "description": "Gets or sets the instance type.",
          "minLength": 1,
          "type": "string"
        }
      },
      "discriminator": "instanceType"
    },
    "ProtectedItemModelProperties": {
      "description": "Protected item model properties.",
      "required": [
        "customProperties",
        "policyName",
        "replicationExtensionName"
      ],
      "type": "object",
      "properties": {
        "policyName": {
          "description": "Gets or sets the policy name.",
          "minLength": 1,
          "type": "string"
        },
        "replicationExtensionName": {
          "description": "Gets or sets the replication extension name.",
          "minLength": 1,
          "type": "string"
        },
        "correlationId": {
          "description": "Gets or sets the protected item correlation Id.",
          "type": "string",
          "readOnly": true
        },
        "provisioningState": {
          "description": "Gets or sets the provisioning state of the Dra.",
          "enum": [
            "Canceled",
            "Creating",
            "Deleting",
            "Deleted",
            "Failed",
            "Succeeded",
            "Updating"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "ProvisioningState",
            "modelAsString": true
          }
        },
        "protectionState": {
          "description": "Gets or sets the protection state.",
          "enum": [
            "UnprotectedStatesBegin",
            "EnablingProtection",
            "EnablingFailed",
            "DisablingProtection",
            "MarkedForDeletion",
            "DisablingFailed",
            "UnprotectedStatesEnd",
            "InitialReplicationStatesBegin",
            "InitialReplicationInProgress",
            "InitialReplicationCompletedOnPrimary",
            "InitialReplicationCompletedOnRecovery",
            "InitialReplicationFailed",
            "InitialReplicationStatesEnd",
            "ProtectedStatesBegin",
            "Protected",
            "ProtectedStatesEnd",
            "PlannedFailoverTransitionStatesBegin",
            "PlannedFailoverInitiated",
            "PlannedFailoverCompleting",
            "PlannedFailoverCompleted",
            "PlannedFailoverFailed",
            "PlannedFailoverCompletionFailed",
            "PlannedFailoverTransitionStatesEnd",
            "UnplannedFailoverTransitionStatesBegin",
            "UnplannedFailoverInitiated",
            "UnplannedFailoverCompleting",
            "UnplannedFailoverCompleted",
            "UnplannedFailoverFailed",
            "UnplannedFailoverCompletionFailed",
            "UnplannedFailoverTransitionStatesEnd",
            "CommitFailoverStatesBegin",
            "CommitFailoverInProgressOnPrimary",
            "CommitFailoverInProgressOnRecovery",
            "CommitFailoverCompleted",
            "CommitFailoverFailedOnPrimary",
            "CommitFailoverFailedOnRecovery",
            "CommitFailoverStatesEnd",
            "CancelFailoverStatesBegin",
            "CancelFailoverInProgressOnPrimary",
            "CancelFailoverInProgressOnRecovery",
            "CancelFailoverFailedOnPrimary",
            "CancelFailoverFailedOnRecovery",
            "CancelFailoverStatesEnd",
            "ChangeRecoveryPointStatesBegin",
            "ChangeRecoveryPointInitiated",
            "ChangeRecoveryPointCompleted",
            "ChangeRecoveryPointFailed",
            "ChangeRecoveryPointStatesEnd",
            "ReprotectStatesBegin",
            "ReprotectInitiated",
            "ReprotectFailed",
            "ReprotectStatesEnd"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "ProtectionState",
            "modelAsString": true
          }
        },
        "protectionStateDescription": {
          "description": "Gets or sets the protection state description.",
          "type": "string",
          "readOnly": true
        },
        "testFailoverState": {
          "description": "Gets or sets the test failover state.",
          "enum": [
            "None",
            "TestFailoverInitiated",
            "TestFailoverCompleting",
            "TestFailoverCompleted",
            "TestFailoverFailed",
            "TestFailoverCompletionFailed",
            "TestFailoverCleanupInitiated",
            "TestFailoverCleanupCompleting",
            "MarkedForDeletion"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "TestFailoverState",
            "modelAsString": true
          }
        },
        "testFailoverStateDescription": {
          "description": "Gets or sets the Test failover state description.",
          "type": "string",
          "readOnly": true
        },
        "resynchronizationState": {
          "description": "Gets or sets the resynchronization state.",
          "enum": [
            "None",
            "ResynchronizationInitiated",
            "ResynchronizationCompleted",
            "ResynchronizationFailed"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "ResynchronizationState",
            "modelAsString": true
          }
        },
        "fabricObjectId": {
          "description": "Gets or sets the fabric object Id.",
          "type": "string",
          "readOnly": true
        },
        "fabricObjectName": {
          "description": "Gets or sets the fabric object name.",
          "type": "string",
          "readOnly": true
        },
        "sourceFabricProviderId": {
          "description": "Gets or sets the source fabric provider Id.",
          "type": "string",
          "readOnly": true
        },
        "targetFabricProviderId": {
          "description": "Gets or sets the target fabric provider Id.",
          "type": "string",
          "readOnly": true
        },
        "fabricId": {
          "description": "Gets or sets the fabric Id.",
          "type": "string",
          "readOnly": true
        },
        "targetFabricId": {
          "description": "Gets or sets the target fabric Id.",
          "type": "string",
          "readOnly": true
        },
        "draId": {
          "description": "Gets or sets the DRA Id.",
          "type": "string",
          "readOnly": true
        },
        "targetDraId": {
          "description": "Gets or sets the target DRA Id.",
          "type": "string",
          "readOnly": true
        },
        "resyncRequired": {
          "description": "Gets or sets a value indicating whether resynchronization is required or not.",
          "type": "boolean",
          "readOnly": true
        },
        "lastSuccessfulPlannedFailoverTime": {
          "format": "date-time",
          "description": "Gets or sets the Last successful planned failover time.",
          "type": "string",
          "readOnly": true
        },
        "lastSuccessfulUnplannedFailoverTime": {
          "format": "date-time",
          "description": "Gets or sets the Last successful unplanned failover time.",
          "type": "string",
          "readOnly": true
        },
        "lastSuccessfulTestFailoverTime": {
          "format": "date-time",
          "description": "Gets or sets the Last successful test failover time.",
          "type": "string",
          "readOnly": true
        },
        "currentJob": {
          "allOf": [
            {
              "$ref": "#/definitions/ProtectedItemJobProperties"
            }
          ],
          "readOnly": true
        },
        "allowedJobs": {
          "description": "Gets or sets the allowed scenarios on the protected item.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "lastFailedEnableProtectionJob": {
          "allOf": [
            {
              "$ref": "#/definitions/ProtectedItemJobProperties"
            }
          ],
          "readOnly": true
        },
        "lastFailedPlannedFailoverJob": {
          "allOf": [
            {
              "$ref": "#/definitions/ProtectedItemJobProperties"
            }
          ],
          "readOnly": true
        },
        "lastTestFailoverJob": {
          "allOf": [
            {
              "$ref": "#/definitions/ProtectedItemJobProperties"
            }
          ],
          "readOnly": true
        },
        "replicationHealth": {
          "description": "Gets or sets protected item replication health.",
          "enum": [
            "Normal",
            "Warning",
            "Critical"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "HealthStatus",
            "modelAsString": true
          }
        },
        "healthErrors": {
          "description": "Gets or sets the list of health errors.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HealthErrorModel"
          },
          "readOnly": true
        },
        "customProperties": {
          "$ref": "#/definitions/ProtectedItemModelCustomProperties"
        }
      }
    },
    "ProtectedItemStatisticsModel": {
      "description": "Protected item statistics.",
      "type": "object",
      "properties": {
        "healthErrors": {
          "description": "Gets or sets the list of health errors.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HealthErrorModel"
          },
          "readOnly": true
        },
        "count": {
          "format": "int64",
          "description": "Gets or sets the resource count.",
          "type": "integer",
          "readOnly": true
        },
        "categorizedCounts": {
          "description": "Gets or sets the categorized resource counts.",
          "type": "object",
          "additionalProperties": {
            "format": "int64",
            "type": "integer"
          },
          "readOnly": true
        }
      }
    },
    "RecoveryPlanAction": {
      "description": "Recovery plan action.",
      "required": [
        "actionName",
        "customProperties"
      ],
      "type": "object",
      "properties": {
        "actionName": {
          "description": "Gets or sets the action name.",
          "minLength": 1,
          "type": "string"
        },
        "failoverTypes": {
          "description": "Gets or sets the list of failover types.",
          "minItems": 1,
          "type": "array",
          "items": {
            "enum": [
              "TestFailover",
              "UnplannedFailover",
              "PlannedFailover",
              "CommitFailover",
              "TestFailoverCleanup",
              "CancelFailover"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "RecoveryPlanOperation",
              "modelAsString": true
            }
          }
        },
        "failoverDirections": {
          "description": "Gets or sets the list of failover directions.",
          "minItems": 1,
          "type": "array",
          "items": {
            "enum": [
              "PrimaryToRecovery",
              "RecoveryToPrimary"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "RecoveryPlanFailoverDirection",
              "modelAsString": true
            }
          }
        },
        "customProperties": {
          "$ref": "#/definitions/RecoveryPlanActionCustomProperties"
        }
      }
    },
    "RecoveryPlanActionCustomProperties": {
      "description": "Recovery plan action custom properties details.",
      "required": [
        "instanceType"
      ],
      "type": "object",
      "properties": {
        "instanceType": {
          "description": "Gets or sets the instance type.",
          "minLength": 1,
          "type": "string"
        }
      },
      "discriminator": "instanceType"
    },
    "RecoveryPlanAutomationRunbookActionProperties": {
      "description": "Recovery plan automation runbook action.",
      "required": [
        "actionLocation"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/RecoveryPlanActionCustomProperties"
        }
      ],
      "properties": {
        "runbookId": {
          "description": "Gets or sets the runbook ARM Id.",
          "type": "string"
        },
        "timeout": {
          "format": "date-span",
          "description": "Gets or sets the runbook timeout.",
          "type": "string"
        },
        "actionLocation": {
          "description": "Gets or sets the action location.",
          "enum": [
            "Primary",
            "Recovery"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "RecoveryPlanActionLocation",
            "modelAsString": true
          }
        }
      }
    },
    "RecoveryPlanBootGroupCustomProperties": {
      "description": "Recovery plan boot group custom properties.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/RecoveryPlanGroupCustomProperties"
        }
      ],
      "properties": {
        "recoveryPlanItems": {
          "description": "Gets or sets the list of recovery plan items.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RecoveryPlanItem"
          }
        }
      }
    },
    "RecoveryPlanGroupCustomProperties": {
      "description": "Recovery plan group custom properties.",
      "required": [
        "groupType"
      ],
      "type": "object",
      "properties": {
        "groupType": {
          "description": "Gets or sets the group type.",
          "minLength": 1,
          "type": "string"
        }
      },
      "discriminator": "groupType"
    },
    "RecoveryPlanGroupProperties": {
      "description": "Recovery plan group properties.",
      "type": "object",
      "properties": {
        "startGroupActions": {
          "description": "Gets or sets the start group actions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RecoveryPlanAction"
          }
        },
        "endGroupActions": {
          "description": "Gets or sets the end group actions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RecoveryPlanAction"
          }
        },
        "customProperties": {
          "$ref": "#/definitions/RecoveryPlanGroupCustomProperties"
        }
      }
    },
    "RecoveryPlanItem": {
      "description": "Recovery plan item.",
      "required": [
        "type"
      ],
      "type": "object",
      "properties": {
        "type": {
          "description": "Gets or sets the recovery plan item type.",
          "minLength": 1,
          "type": "string"
        }
      },
      "discriminator": "type"
    },
    "RecoveryPlanJobProperties": {
      "description": "Recovery plan job properties.",
      "type": "object",
      "properties": {
        "scenarioName": {
          "description": "Gets or sets protection scenario name.",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "Gets or sets workflow Id.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "Gets or sets workflow name.",
          "type": "string",
          "readOnly": true
        },
        "displayName": {
          "description": "Gets or sets the workflow friendly display name.",
          "type": "string",
          "readOnly": true
        },
        "state": {
          "description": "Gets or sets workflow state.",
          "type": "string",
          "readOnly": true
        },
        "startTime": {
          "format": "date-time",
          "description": "Gets or sets start time of the workflow.",
          "type": "string",
          "readOnly": true
        },
        "endTime": {
          "format": "date-time",
          "description": "Gets or sets end time of the workflow.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "RecoveryPlanLocationAVSProperties": {
      "description": "Recovery plan location properties for AVS fabric.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/RecoveryPlanLocationCustomProperties"
        }
      ],
      "properties": {
        "fabricId": {
          "description": "Gets or sets the fabric Id.",
          "type": "string"
        }
      }
    },
    "RecoveryPlanLocationAzureProperties": {
      "description": "Recovery plan location properties for Azure fabric.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/RecoveryPlanLocationCustomProperties"
        }
      ],
      "properties": {
        "fabricId": {
          "description": "Gets or sets the fabric Id.",
          "type": "string"
        }
      }
    },
    "RecoveryPlanLocationCustomProperties": {
      "description": "Recovery plan location properties.",
      "required": [
        "instanceType"
      ],
      "type": "object",
      "properties": {
        "instanceType": {
          "description": "Gets or sets the fabric type.",
          "minLength": 1,
          "type": "string"
        }
      },
      "discriminator": "instanceType"
    },
    "RecoveryPlanLocationVMwareProperties": {
      "description": "Recovery plan location properties for VMware fabric.",
      "required": [
        "fabricId"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/RecoveryPlanLocationCustomProperties"
        }
      ],
      "properties": {
        "fabricId": {
          "description": "Gets or sets the fabric Id.",
          "minLength": 1,
          "type": "string"
        }
      }
    },
    "RecoveryPlanManualActionProperties": {
      "description": "Recovery plan manual action properties.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/RecoveryPlanActionCustomProperties"
        }
      ],
      "properties": {
        "description": {
          "description": "Gets or sets the description.",
          "type": "string"
        }
      }
    },
    "RecoveryPlanModel": {
      "description": "Recovery plan model.",
      "required": [
        "properties"
      ],
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/RecoveryPlanModelProperties"
        },
        "id": {
          "description": "Gets or sets the Id of the resource.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "Gets or sets the name of the resource.",
          "type": "string",
          "readOnly": true
        },
        "type": {
          "description": "Gets or sets the type of the resource.",
          "type": "string",
          "readOnly": true
        },
        "systemData": {
          "allOf": [
            {
              "$ref": "#/definitions/SystemDataModel"
            }
          ],
          "readOnly": true
        },
        "tags": {
          "description": "Gets or sets the resource tags.",
          "maxLength": 15,
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "RecoveryPlanModelCollection": {
      "description": "Recovery plan model collection.",
      "type": "object",
      "properties": {
        "value": {
          "description": "Gets or sets the list of recovery plans.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RecoveryPlanModel"
          }
        },
        "nextLink": {
          "description": "Gets or sets the value of next link.",
          "type": "string"
        }
      }
    },
    "RecoveryPlanModelProperties": {
      "description": "Recovery plan model properties.",
      "required": [
        "groups",
        "sourceProperties",
        "targetProperties"
      ],
      "type": "object",
      "properties": {
        "sourceProperties": {
          "$ref": "#/definitions/RecoveryPlanLocationCustomProperties"
        },
        "targetProperties": {
          "$ref": "#/definitions/RecoveryPlanLocationCustomProperties"
        },
        "provisioningState": {
          "description": "Gets or sets the provisioning state.",
          "enum": [
            "Canceled",
            "Creating",
            "Deleting",
            "Deleted",
            "Failed",
            "Succeeded",
            "Updating"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "ProvisioningState",
            "modelAsString": true
          }
        },
        "allowedJobs": {
          "description": "Gets or sets the list of allowed operations.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "currentJob": {
          "allOf": [
            {
              "$ref": "#/definitions/RecoveryPlanJobProperties"
            }
          ],
          "readOnly": true
        },
        "groups": {
          "description": "Gets or sets the recovery plan groups.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RecoveryPlanGroupProperties"
          }
        }
      }
    },
    "RecoveryPlanProtectedItem": {
      "description": "Recovery plan protected item.",
      "required": [
        "id"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/RecoveryPlanItem"
        }
      ],
      "properties": {
        "id": {
          "description": "Gets or sets the ARM Id of the recovery plan item.",
          "minLength": 1,
          "type": "string"
        }
      }
    },
    "RecoveryPlanTestFailoverCleanupModel": {
      "description": "Recovery plan test failover cleanup model.",
      "required": [
        "properties"
      ],
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/RecoveryPlanTestFailoverCleanupModelProperties"
        }
      }
    },
    "RecoveryPlanTestFailoverCleanupModelProperties": {
      "description": "Recovery plan test failover cleanup model properties.",
      "type": "object",
      "properties": {
        "comments": {
          "description": "Gets or sets the recovery plan test failover cleanup comments.",
          "maxLength": 1024,
          "type": "string"
        }
      }
    },
    "RecoveryPlanTestFailoverModel": {
      "description": "Recovery plan test failover model.",
      "required": [
        "properties"
      ],
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/RecoveryPlanTestFailoverModelProperties"
        }
      }
    },
    "RecoveryPlanTestFailoverModelCustomProperties": {
      "description": "Recovery plan test failover model custom properties.",
      "required": [
        "instanceType"
      ],
      "type": "object",
      "properties": {
        "instanceType": {
          "description": "Gets or sets the instance type.",
          "minLength": 1,
          "type": "string"
        }
      },
      "discriminator": "instanceType"
    },
    "RecoveryPlanTestFailoverModelProperties": {
      "description": "Recovery plan test failover model properties.",
      "required": [
        "failoverDirection"
      ],
      "type": "object",
      "properties": {
        "failoverDirection": {
          "description": "Gets or sets the failover direction.",
          "enum": [
            "PrimaryToRecovery",
            "RecoveryToPrimary"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "RecoveryPlanFailoverDirection",
            "modelAsString": true
          }
        },
        "customProperties": {
          "description": "Gets or sets the custom properties.",
          "minItems": 1,
          "type": "array",
          "items": {
            "$ref": "#/definitions/RecoveryPlanTestFailoverModelCustomProperties"
          }
        }
      }
    },
    "RecoveryPlanUnplannedFailoverModel": {
      "description": "Recovery plan unplanned failover model.",
      "required": [
        "properties"
      ],
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/RecoveryPlanUnplannedFailoverModelProperties"
        }
      }
    },
    "RecoveryPlanUnplannedFailoverModelCustomProperties": {
      "description": "Recovery plan unplanned failover model custom properties.",
      "required": [
        "instanceType"
      ],
      "type": "object",
      "properties": {
        "instanceType": {
          "description": "Gets or sets the instance type.",
          "minLength": 1,
          "type": "string"
        }
      },
      "discriminator": "instanceType"
    },
    "RecoveryPlanUnplannedFailoverModelProperties": {
      "description": "Recovery plan unplanned failover model properties.",
      "required": [
        "failoverDirection",
        "performShutdown"
      ],
      "type": "object",
      "properties": {
        "failoverDirection": {
          "description": "Gets or sets the failover direction.",
          "enum": [
            "PrimaryToRecovery",
            "RecoveryToPrimary"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "RecoveryPlanFailoverDirection",
            "modelAsString": true
          }
        },
        "performShutdown": {
          "description": "Gets or sets a value indicating whether source site operations are required.\r\nThis is taken in failover input and not in provider input as a recovery plan group\r\ncan have multiple VMs which can belong to different providers and can have different\r\nshutdown behavior. In that case we will not be able to generate dynamic xml.",
          "type": "boolean"
        },
        "customProperties": {
          "description": "Gets or sets the custom properties.",
          "minItems": 1,
          "type": "array",
          "items": {
            "$ref": "#/definitions/RecoveryPlanUnplannedFailoverModelCustomProperties"
          }
        }
      }
    },
    "RecoveryPointModel": {
      "description": "Recovery point model.",
      "required": [
        "properties"
      ],
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/RecoveryPointModelProperties"
        },
        "id": {
          "description": "Gets or sets the Id of the resource.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "Gets or sets the name of the resource.",
          "type": "string",
          "readOnly": true
        },
        "type": {
          "description": "Gets or sets the type of the resource.",
          "type": "string",
          "readOnly": true
        },
        "systemData": {
          "allOf": [
            {
              "$ref": "#/definitions/SystemDataModel"
            }
          ],
          "readOnly": true
        },
        "tags": {
          "description": "Gets or sets the resource tags.",
          "maxLength": 15,
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "RecoveryPointModelCollection": {
      "description": "Recovery point model collection.",
      "type": "object",
      "properties": {
        "value": {
          "description": "Gets or sets the list of recovery points.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RecoveryPointModel"
          }
        },
        "nextLink": {
          "description": "Gets or sets the value of next link.",
          "type": "string"
        }
      }
    },
    "RecoveryPointModelCustomProperties": {
      "description": "Recovery point model custom properties.",
      "required": [
        "instanceType"
      ],
      "type": "object",
      "properties": {
        "instanceType": {
          "description": "Gets or sets the instance type.",
          "minLength": 1,
          "type": "string"
        }
      },
      "discriminator": "instanceType"
    },
    "RecoveryPointModelProperties": {
      "description": "Recovery point model properties.",
      "required": [
        "customProperties",
        "recoveryPointTime",
        "recoveryPointType"
      ],
      "type": "object",
      "properties": {
        "recoveryPointTime": {
          "format": "date-time",
          "description": "Gets or sets the recovery point time.",
          "type": "string"
        },
        "recoveryPointType": {
          "description": "Gets or sets the recovery point type.",
          "enum": [
            "ApplicationConsistent",
            "CrashConsistent"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "RecoveryPointType",
            "modelAsString": true
          }
        },
        "customProperties": {
          "$ref": "#/definitions/RecoveryPointModelCustomProperties"
        }
      }
    },
    "ReplicationExtensionModel": {
      "description": "Replication extension model.",
      "required": [
        "properties"
      ],
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/ReplicationExtensionModelProperties"
        },
        "id": {
          "description": "Gets or sets the Id of the resource.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "Gets or sets the name of the resource.",
          "type": "string",
          "readOnly": true
        },
        "type": {
          "description": "Gets or sets the type of the resource.",
          "type": "string",
          "readOnly": true
        },
        "systemData": {
          "allOf": [
            {
              "$ref": "#/definitions/SystemDataModel"
            }
          ],
          "readOnly": true
        },
        "tags": {
          "description": "Gets or sets the resource tags.",
          "maxLength": 15,
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "x-ms-azure-resource": true
    },
    "ReplicationExtensionModelCollection": {
      "description": "Replication extension model collection.",
      "type": "object",
      "properties": {
        "value": {
          "description": "Gets or sets the list of replication extensions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReplicationExtensionModel"
          }
        },
        "nextLink": {
          "description": "Gets or sets the value of next link.",
          "type": "string"
        }
      }
    },
    "ReplicationExtensionModelCustomProperties": {
      "description": "Replication extension model custom properties.",
      "required": [
        "instanceType"
      ],
      "type": "object",
      "properties": {
        "instanceType": {
          "description": "Gets or sets the instance type.",
          "minLength": 1,
          "type": "string"
        }
      },
      "discriminator": "instanceType"
    },
    "ReplicationExtensionModelProperties": {
      "description": "Replication extension model properties.",
      "required": [
        "customProperties"
      ],
      "type": "object",
      "properties": {
        "provisioningState": {
          "description": "Gets or sets the provisioning state of the replication extension.",
          "enum": [
            "Canceled",
            "Creating",
            "Deleting",
            "Deleted",
            "Failed",
            "Succeeded",
            "Updating"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "ProvisioningState",
            "modelAsString": true
          }
        },
        "customProperties": {
          "$ref": "#/definitions/ReplicationExtensionModelCustomProperties"
        }
      }
    },
    "ReprotectModel": {
      "description": "Reprotect model.",
      "required": [
        "properties"
      ],
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/ReprotectModelProperties"
        }
      }
    },
    "ReprotectModelCustomProperties": {
      "description": "Reprotect model custom properties.",
      "required": [
        "instanceType"
      ],
      "type": "object",
      "properties": {
        "instanceType": {
          "description": "Gets or sets the instance type.",
          "minLength": 1,
          "type": "string"
        }
      }
    },
    "ReprotectModelProperties": {
      "description": "Reprotect model properties.",
      "required": [
        "customProperties"
      ],
      "type": "object",
      "properties": {
        "customProperties": {
          "$ref": "#/definitions/ReprotectModelCustomProperties"
        }
      }
    },
    "StorageContainerProperties": {
      "description": "Storage container properties.",
      "required": [
        "clusterSharedVolumePath",
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "Gets or sets the Name.",
          "minLength": 1,
          "type": "string"
        },
        "clusterSharedVolumePath": {
          "description": "Gets or sets the ClusterSharedVolumePath.",
          "minLength": 1,
          "type": "string"
        }
      }
    },
    "SystemDataModel": {
      "description": "System data required to be defined for Azure resources.",
      "type": "object",
      "properties": {
        "createdBy": {
          "description": "Gets or sets identity that created the resource.",
          "type": "string"
        },
        "createdByType": {
          "description": "Gets or sets the type of identity that created the resource: user, application,\r\nmanagedIdentity.",
          "type": "string"
        },
        "createdAt": {
          "format": "date-time",
          "description": "Gets or sets the timestamp of resource creation (UTC).",
          "type": "string"
        },
        "lastModifiedBy": {
          "description": "Gets or sets the identity that last modified the resource.",
          "type": "string"
        },
        "lastModifiedByType": {
          "description": "Gets or sets the type of identity that last modified the resource: user, application,\r\nmanagedIdentity.",
          "type": "string"
        },
        "lastModifiedAt": {
          "format": "date-time",
          "description": "Gets or sets the timestamp of resource last modification (UTC).",
          "type": "string"
        }
      }
    },
    "TaskModel": {
      "description": "Task model.",
      "type": "object",
      "properties": {
        "taskName": {
          "description": "Gets or sets the task name.",
          "type": "string",
          "readOnly": true
        },
        "state": {
          "description": "Gets or sets the task state.",
          "enum": [
            "Pending",
            "Started",
            "Succeeded",
            "Failed",
            "Cancelled",
            "Skipped"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "TaskState",
            "modelAsString": true
          }
        },
        "startTime": {
          "format": "date-time",
          "description": "Gets or sets the start time.",
          "type": "string",
          "readOnly": true
        },
        "endTime": {
          "format": "date-time",
          "description": "Gets or sets the end time.",
          "type": "string",
          "readOnly": true
        },
        "customProperties": {
          "$ref": "#/definitions/TaskModelCustomProperties"
        },
        "childrenWorkflows": {
          "description": "Gets or sets the list of children workflow models.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkflowModel"
          }
        }
      }
    },
    "TaskModelCustomProperties": {
      "description": "Task model custom properties.",
      "required": [
        "instanceType"
      ],
      "type": "object",
      "properties": {
        "instanceType": {
          "description": "Gets or sets the instance type.",
          "minLength": 1,
          "type": "string"
        }
      }
    },
    "TestFailoverCleanupModel": {
      "description": "Test failover cleanup model.",
      "required": [
        "properties"
      ],
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/TestFailoverCleanupModelProperties"
        }
      }
    },
    "TestFailoverCleanupModelProperties": {
      "description": "Test failover cleanup model properties.",
      "type": "object",
      "properties": {
        "comments": {
          "description": "Gets or sets the test failover cleanup comments.",
          "maxLength": 1024,
          "type": "string"
        }
      }
    },
    "TestFailoverCleanupWorkflowModelCustomProperties": {
      "description": "Test failover cleanup workflow model custom properties.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/WorkflowModelCustomProperties"
        }
      ],
      "properties": {
        "comments": {
          "description": "Gets or sets the test failover cleanup comments.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "TestFailoverModel": {
      "description": "Test failover model.",
      "required": [
        "properties"
      ],
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/TestFailoverModelProperties"
        }
      }
    },
    "TestFailoverModelCustomProperties": {
      "description": "Test failover model custom properties.",
      "required": [
        "instanceType"
      ],
      "type": "object",
      "properties": {
        "instanceType": {
          "description": "Gets or sets the instance type.",
          "minLength": 1,
          "type": "string"
        }
      },
      "discriminator": "instanceType"
    },
    "TestFailoverModelProperties": {
      "description": "Test failover model properties.",
      "required": [
        "customProperties"
      ],
      "type": "object",
      "properties": {
        "customProperties": {
          "$ref": "#/definitions/TestFailoverModelCustomProperties"
        }
      }
    },
    "TestFailoverWorkflowModelCustomProperties": {
      "description": "Test failover workflow model custom properties.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/WorkflowModelCustomProperties"
        }
      ],
      "properties": {
        "protectedItemDetails": {
          "description": "Gets or sets the test VM details.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FailoverProtectedItemProperties"
          },
          "readOnly": true
        }
      }
    },
    "UnplannedFailoverModel": {
      "description": "Unplanned failover model.",
      "required": [
        "properties"
      ],
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/UnplannedFailoverModelProperties"
        }
      }
    },
    "UnplannedFailoverModelCustomProperties": {
      "description": "Unplanned failover model custom properties.",
      "required": [
        "instanceType"
      ],
      "type": "object",
      "properties": {
        "instanceType": {
          "description": "Gets or sets the instance type.",
          "minLength": 1,
          "type": "string"
        }
      },
      "discriminator": "instanceType"
    },
    "UnplannedFailoverModelProperties": {
      "description": "Unplanned failover model properties.",
      "required": [
        "customProperties"
      ],
      "type": "object",
      "properties": {
        "customProperties": {
          "$ref": "#/definitions/UnplannedFailoverModelCustomProperties"
        }
      }
    },
    "VMwareDraModelCustomProperties": {
      "description": "VMware DRA model custom properties.",
      "required": [
        "biosId",
        "marsAuthenticationIdentity"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/DraModelCustomProperties"
        }
      ],
      "properties": {
        "biosId": {
          "description": "Gets or sets the BIOS Id of the DRA machine.",
          "minLength": 1,
          "type": "string"
        },
        "marsAuthenticationIdentity": {
          "$ref": "#/definitions/IdentityModel"
        }
      }
    },
    "VMwareFabricEventModelCustomProperties": {
      "description": "VMware fabric event model custom properties. This class provides provider specific\r\ndetails for events of type DataContract.HealthEvents.HealthEventType.FabricHealth and\r\nDataContract.HealthEvents.HealthEventType.DraHealth.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/EventModelCustomProperties"
        }
      ],
      "properties": {
        "eventSourceFriendlyName": {
          "description": "Gets or sets the friendly name of the source which has raised this health event.\r\nThis will be null if the event is not generated by any on-prem component.",
          "type": "string",
          "readOnly": true
        },
        "applianceName": {
          "description": "Gets or sets the appliance name.",
          "type": "string",
          "readOnly": true
        },
        "fabricName": {
          "description": "Gets or sets the fabric name.",
          "type": "string",
          "readOnly": true
        },
        "serverType": {
          "description": "Gets or sets the server name.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "VMwareFabricModelCustomProperties": {
      "description": "VMware fabric model custom properties.",
      "required": [
        "failbackSourceAgentIdentity",
        "physicalSiteId",
        "vmwareSiteId"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/FabricModelCustomProperties"
        }
      ],
      "properties": {
        "failbackSourceAgentIdentity": {
          "$ref": "#/definitions/IdentityModel"
        },
        "vmwareSiteId": {
          "description": "Gets or sets the ARM Id of the VMware site.",
          "minLength": 1,
          "type": "string"
        },
        "physicalSiteId": {
          "description": "Gets or sets the ARM Id of the physical site.",
          "minLength": 1,
          "type": "string"
        },
        "appliances": {
          "description": "Gets or sets the list of appliances.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApplianceProperties"
          },
          "readOnly": true
        },
        "fabricResourceId": {
          "description": "Gets or sets the fabric resource Id.",
          "type": "string",
          "readOnly": true
        },
        "fabricContainerId": {
          "description": "Gets or sets the fabric container Id.",
          "type": "string",
          "readOnly": true
        },
        "managementPlaneUri": {
          "description": "Gets or sets the management plane URI.",
          "type": "string",
          "readOnly": true
        },
        "dataPlaneUri": {
          "description": "Gets or sets the data plane URI.",
          "type": "string",
          "readOnly": true
        },
        "controlPlaneUri": {
          "description": "Gets or sets the control plane URI.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "VMwareMigrateFabricModelCustomProperties": {
      "description": "VMware migrate fabric model custom properties.",
      "required": [
        "migrationSolutionId",
        "vmwareSiteId"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/FabricModelCustomProperties"
        }
      ],
      "properties": {
        "vmwareSiteId": {
          "description": "Gets or sets the ARM Id of the VMware site.",
          "minLength": 1,
          "type": "string"
        },
        "migrationSolutionId": {
          "description": "Gets or sets the ARM Id of the migration solution.",
          "minLength": 1,
          "type": "string"
        }
      }
    },
    "VMwareToAvsDefaultDiskInput": {
      "description": "VMwareToAvs disk default input.",
      "required": [
        "diskType",
        "logStorageAccountId"
      ],
      "type": "object",
      "properties": {
        "logStorageAccountId": {
          "description": "Gets or sets the log storage account ARM Id.",
          "minLength": 1,
          "type": "string"
        },
        "diskType": {
          "description": "Gets or sets the disk type.",
          "enum": [
            "Premium_LRS"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "VMwareToAvsDiskAccountType",
            "modelAsString": true
          }
        }
      }
    },
    "VMwareToAvsDiscoveredProtectedVmProperties": {
      "description": "VMwareToAvs discovered protected VM properties.",
      "type": "object",
      "properties": {
        "vCenterId": {
          "description": "Gets or sets the vCenter Id.",
          "type": "string",
          "readOnly": true
        },
        "vCenterFqdn": {
          "description": "Gets or sets the vCenter FQDN.",
          "type": "string",
          "readOnly": true
        },
        "datastores": {
          "description": "Gets or sets the list of datastores.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "ipAddresses": {
          "description": "Gets or sets the list of IP addresses.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "vmwareToolsStatus": {
          "description": "Gets or sets the VMware tools status.",
          "type": "string",
          "readOnly": true
        },
        "powerStatus": {
          "description": "Gets or sets the VM power status.",
          "type": "string",
          "readOnly": true
        },
        "vmFqdn": {
          "description": "Gets or sets the VM FQDN.",
          "type": "string",
          "readOnly": true
        },
        "osName": {
          "description": "Gets or sets the VM's OS name.",
          "type": "string",
          "readOnly": true
        },
        "createdTimestamp": {
          "format": "date-time",
          "description": "Gets or sets the SDS created timestamp.",
          "type": "string",
          "readOnly": true
        },
        "updatedTimestamp": {
          "format": "date-time",
          "description": "Gets or sets the SDS updated timestamp.",
          "type": "string",
          "readOnly": true
        },
        "isDeleted": {
          "description": "Gets or sets a value indicating whether the VM is deleted.",
          "type": "boolean",
          "readOnly": true
        },
        "lastDiscoveryTimeInUtc": {
          "format": "date-time",
          "description": "Gets or sets the last time when SDS information discovered in SRS.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "VMwareToAvsDiskInput": {
      "description": "VMwareToAvs disk input.",
      "required": [
        "diskId",
        "diskInput"
      ],
      "type": "object",
      "properties": {
        "diskId": {
          "description": "Gets or sets the disk Id.",
          "minLength": 1,
          "type": "string"
        },
        "diskInput": {
          "$ref": "#/definitions/VMwareToAvsDefaultDiskInput"
        }
      }
    },
    "VMwareToAvsEventModelCustomProperties": {
      "description": "VMware to AVS event model custom properties. This class provides provider specific\r\ndetails for events of type DataContract.HealthEvents.HealthEventType.ProtectedItemHealth and\r\nDataContract.HealthEvents.HealthEventType.AgentHealth.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/EventModelCustomProperties"
        }
      ],
      "properties": {
        "eventSourceFriendlyName": {
          "description": "Gets or sets the friendly name of the source which has raised this health event.",
          "type": "string",
          "readOnly": true
        },
        "protectedItemFriendlyName": {
          "description": "Gets or sets the protected item friendly name.",
          "type": "string",
          "readOnly": true
        },
        "applianceName": {
          "description": "Gets or sets the appliance name.",
          "type": "string",
          "readOnly": true
        },
        "serverType": {
          "description": "Gets or sets the server type.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "VMwareToAvsFailbackEventModelCustomProperties": {
      "description": "VMware to AVS failback event model custom properties. This class provides provider specific\r\ndetails for events of type DataContract.HealthEvents.HealthEventType.ProtectedItemHealth and\r\nDataContract.HealthEvents.HealthEventType.AgentHealth.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/EventModelCustomProperties"
        }
      ],
      "properties": {
        "eventSourceFriendlyName": {
          "description": "Gets or sets the friendly name of the source which has raised this health event.",
          "type": "string",
          "readOnly": true
        },
        "protectedItemFriendlyName": {
          "description": "Gets or sets the protected item friendly name.",
          "type": "string",
          "readOnly": true
        },
        "applianceName": {
          "description": "Gets or sets the appliance name.",
          "type": "string",
          "readOnly": true
        },
        "serverType": {
          "description": "Gets or sets the server type.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "VMwareToAvsFailbackMobilityAgentProperties": {
      "description": "VMwareToAvs failback mobility agent properties.",
      "type": "object",
      "properties": {
        "version": {
          "description": "Gets or sets the agent version.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "VMwareToAvsFailbackNicProperties": {
      "description": "VMwareToAvs failback NIC properties.",
      "type": "object",
      "properties": {
        "nicName": {
          "description": "Gets or sets the NIC name.",
          "type": "string",
          "readOnly": true
        },
        "networkId": {
          "description": "Gets or sets the network Id.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "VMwareToAvsFailbackPlannedFailoverModelCustomProperties": {
      "description": "VMware to AVS failback planned failover model custom properties.",
      "required": [
        "recoveryPointType"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/PlannedFailoverModelCustomProperties"
        }
      ],
      "properties": {
        "recoveryPointType": {
          "description": "Gets or sets the recovery point type.",
          "enum": [
            "ApplicationConsistent",
            "CrashConsistent"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "VMwareToAvsFailbackRecoveryPointType",
            "modelAsString": true
          }
        }
      }
    },
    "VMwareToAvsFailbackPolicyModelCustomProperties": {
      "description": "VMware To AVS failback policy model custom properties.",
      "required": [
        "appConsistentFrequencyInMinutes",
        "crashConsistentFrequencyInMinutes"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/PolicyModelCustomProperties"
        }
      ],
      "properties": {
        "crashConsistentFrequencyInMinutes": {
          "format": "int32",
          "description": "Gets or sets the crash consistent snapshot frequency (in minutes).",
          "type": "integer"
        },
        "appConsistentFrequencyInMinutes": {
          "format": "int32",
          "description": "Gets or sets the app consistent snapshot frequency (in minutes).",
          "type": "integer"
        }
      }
    },
    "VMwareToAvsFailbackProtectedDiskProperties": {
      "description": "VMwareToAvs failback protected disk properties.",
      "type": "object",
      "properties": {
        "diskId": {
          "description": "Gets or sets the disk Id (reported by source agent).",
          "type": "string",
          "readOnly": true
        },
        "diskName": {
          "description": "Gets or sets the disk name.",
          "type": "string",
          "readOnly": true
        },
        "isOSDisk": {
          "description": "Gets or sets a value indicating whether the disk is the OS disk.",
          "type": "boolean",
          "readOnly": true
        },
        "capacityInBytes": {
          "format": "int64",
          "description": "Gets or sets the disk capacity in bytes.",
          "type": "integer",
          "readOnly": true
        },
        "diskUuid": {
          "description": "Gets or sets the disk UUID (reported by vCenter).",
          "type": "string",
          "readOnly": true
        },
        "diskType": {
          "description": "Gets or sets disk account type.",
          "enum": [
            "Premium_LRS"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "VMwareToAvsFailbackDiskAccountType",
            "modelAsString": true
          }
        }
      }
    },
    "VMwareToAvsFailbackProtectedItemModelCustomProperties": {
      "description": "VMware to AVS failback protected item model custom properties.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ProtectedItemModelCustomProperties"
        }
      ],
      "properties": {
        "activeLocation": {
          "description": "Gets or sets the location of the protected item.",
          "enum": [
            "Primary",
            "Recovery"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "ProtectedItemActiveLocation",
            "modelAsString": true
          }
        },
        "avsCloudId": {
          "description": "Gets or sets the ARM Id of AVS cloud.",
          "type": "string",
          "readOnly": true
        },
        "avsVirtualMachineId": {
          "description": "Gets or sets the ARM Id of the AVS VM.",
          "type": "string",
          "readOnly": true
        },
        "resourceGroupId": {
          "description": "Gets or sets the ARM Id of the resource group.",
          "type": "string",
          "readOnly": true
        },
        "fabricDiscoveryMachineId": {
          "description": "Gets or sets the ARM Id of the SDS discovered machine.",
          "type": "string",
          "readOnly": true
        },
        "multiVmGroupName": {
          "description": "Gets or sets the multi VM group name.",
          "type": "string",
          "readOnly": true
        },
        "applianceId": {
          "description": "Gets or sets the appliance Id.",
          "type": "string",
          "readOnly": true
        },
        "applianceName": {
          "description": "Gets or sets the appliance name.",
          "type": "string",
          "readOnly": true
        },
        "osType": {
          "description": "Gets or sets the type of the OS on the VM.",
          "enum": [
            "Windows",
            "Linux",
            "Other"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "OperatingSystemType",
            "modelAsString": true
          }
        },
        "logStorageAccountId": {
          "description": "Gets or sets the log storage account ARM Id.",
          "type": "string",
          "readOnly": true
        },
        "targetVCenterId": {
          "description": "Gets or sets the target vCenter Id.",
          "type": "string",
          "readOnly": true
        },
        "targetDataStoreName": {
          "description": "Gets or sets the target datastore name.",
          "type": "string",
          "readOnly": true
        },
        "targetVmName": {
          "description": "Gets or sets the target VM name.",
          "type": "string",
          "readOnly": true
        },
        "initialReplicationProgressPercentage": {
          "format": "int32",
          "description": "Gets or sets the initial replication progress percentage.",
          "type": "integer",
          "readOnly": true
        },
        "initialReplicationProcessedBytes": {
          "format": "int64",
          "description": "Gets or sets the initial replication processed bytes. This includes sum of total bytes\r\ntransferred and matched bytes on all selected disks in source VM.",
          "type": "integer",
          "readOnly": true
        },
        "initialReplicationTransferredBytes": {
          "format": "int64",
          "description": "Gets or sets the initial replication transferred bytes from source VM to target for\r\nall selected disks on source VM.",
          "type": "integer",
          "readOnly": true
        },
        "initialReplicationProgressHealth": {
          "description": "Gets or sets the initial replication progress health.",
          "enum": [
            "None",
            "InProgress",
            "SlowProgress",
            "NoProgress"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "VmReplicationProgressHealth",
            "modelAsString": true
          }
        },
        "resyncProgressPercentage": {
          "format": "int32",
          "description": "Gets or sets the resync progress percentage. This is calculated based on total bytes\r\nprocessed for all disks in the source VM.",
          "type": "integer",
          "readOnly": true
        },
        "resyncProcessedBytes": {
          "format": "int64",
          "description": "Gets or sets the resync processed bytes. This includes sum of total bytes transferred\r\nand matched bytes on all selected disks in source VM.",
          "type": "integer",
          "readOnly": true
        },
        "resyncTransferredBytes": {
          "format": "int64",
          "description": "Gets or sets the resync transferred bytes from source VM to Azure for all\r\nselected disks on source VM.",
          "type": "integer",
          "readOnly": true
        },
        "resyncProgressHealth": {
          "description": "Gets or sets the resync progress health.",
          "enum": [
            "None",
            "InProgress",
            "SlowProgress",
            "NoProgress"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "VmReplicationProgressHealth",
            "modelAsString": true
          }
        },
        "protectedDisks": {
          "description": "Gets or sets the list of protected disks.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VMwareToAvsFailbackProtectedDiskProperties"
          }
        },
        "mobilityAgentProperties": {
          "$ref": "#/definitions/VMwareToAvsFailbackMobilityAgentProperties"
        },
        "vmNics": {
          "description": "Gets or sets the network details.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VMwareToAvsFailbackNicProperties"
          }
        },
        "lastPlannedFailoverStartTime": {
          "format": "date-time",
          "description": "Gets or sets the last planned failover start time.",
          "type": "string",
          "readOnly": true
        },
        "lastPlannedFailoverStatus": {
          "description": "Gets or sets the last planned failover status.",
          "enum": [
            "Succeeded",
            "Failed",
            "Cancelled",
            "Unknown"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "PlannedFailoverStatus",
            "modelAsString": true
          }
        },
        "lastUsedPolicyId": {
          "description": "Gets or sets the policy Id used by the forward replication.",
          "type": "string",
          "readOnly": true
        },
        "lastUsedPolicyFriendlyName": {
          "description": "Gets or sets the policy friendly name used by the forward replication.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "VMwareToAvsFailbackReplicationExtensionModelCustomProperties": {
      "description": "VMware to AVS failback replication extension model custom properties.",
      "required": [
        "fabricArmId"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ReplicationExtensionModelCustomProperties"
        }
      ],
      "properties": {
        "fabricArmId": {
          "description": "Gets or sets the ARM Id of the fabric.",
          "minLength": 1,
          "type": "string"
        },
        "vmwareSiteId": {
          "description": "Gets or sets the ARM Id of the VMware site.",
          "type": "string",
          "readOnly": true
        },
        "physicalSiteId": {
          "description": "Gets or sets the ARM Id of the physical site.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "VMwareToAvsFailbackReprotectModelCustomProperties": {
      "description": "VMware to AVS failback reprotect model custom properties. The VM has failed over to AVS.\r\nReprotection will happen from AVS to VMware.",
      "required": [
        "applianceId",
        "datastoreName",
        "logStorageAccountId"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ReprotectModelCustomProperties"
        }
      ],
      "properties": {
        "applianceId": {
          "description": "Gets or sets the appliance Id.",
          "minLength": 1,
          "type": "string"
        },
        "datastoreName": {
          "description": "Gets or sets the target datastore name.",
          "minLength": 1,
          "type": "string"
        },
        "logStorageAccountId": {
          "description": "Gets or sets the log storage account ARM Id.",
          "minLength": 1,
          "type": "string"
        },
        "policyName": {
          "description": "Gets or sets the policy name.",
          "type": "string"
        },
        "ReplicationExtensionName": {
          "description": "Gets or sets the replication extension name.",
          "type": "string"
        }
      }
    },
    "VMwareToAvsMobilityAgentProperties": {
      "description": "VMwareToAvs mobility agent properties.",
      "type": "object",
      "properties": {
        "version": {
          "description": "Gets or sets the agent version.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "VMwareToAvsNicProperties": {
      "description": "VMwareToAvs NIC properties.",
      "required": [
        "nicId",
        "selectionTypeForFailover",
        "targetNicType"
      ],
      "type": "object",
      "properties": {
        "nicId": {
          "description": "Gets or sets the NIC Id.",
          "minLength": 1,
          "type": "string"
        },
        "networkName": {
          "description": "Gets or sets the network name.",
          "type": "string",
          "readOnly": true
        },
        "targetNicType": {
          "description": "Gets or sets the type of the NIC.",
          "enum": [
            "Vmxnet3",
            "Vmxnet2",
            "Vmxnet",
            "E1000",
            "E1000e",
            "Pcnet32"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "VMwareToAvsNicType",
            "modelAsString": true
          }
        },
        "selectionTypeForFailover": {
          "description": "Gets or sets the selection type of the NIC.",
          "enum": [
            "NotSelected",
            "SelectedByUser",
            "SelectedByDefault",
            "SelectedByUserOverride"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "VMNicSelection",
            "modelAsString": true
          }
        }
      }
    },
    "VMwareToAvsPolicyModelCustomProperties": {
      "description": "Vmware To Avs Policy model custom properties.",
      "required": [
        "appConsistentFrequencyInMinutes",
        "crashConsistentFrequencyInMinutes",
        "enableMultiVmSync",
        "recoveryPointHistoryInMinutes"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/PolicyModelCustomProperties"
        }
      ],
      "properties": {
        "recoveryPointHistoryInMinutes": {
          "format": "int32",
          "description": "Gets or sets the duration in minutes until which the recovery points need to be\r\nstored.",
          "type": "integer"
        },
        "crashConsistentFrequencyInMinutes": {
          "format": "int32",
          "description": "Gets or sets the crash consistent snapshot frequency (in minutes).",
          "type": "integer"
        },
        "appConsistentFrequencyInMinutes": {
          "format": "int32",
          "description": "Gets or sets the app consistent snapshot frequency (in minutes).",
          "type": "integer"
        },
        "enableMultiVmSync": {
          "description": "Gets or sets a value indicating whether multi-VM sync has to be enabled.",
          "type": "boolean"
        }
      }
    },
    "VMwareToAvsProtectedDiskProperties": {
      "description": "VMwareToAvs protected disk properties.",
      "type": "object",
      "properties": {
        "diskId": {
          "description": "Gets or sets the disk Id.",
          "type": "string",
          "readOnly": true
        },
        "diskName": {
          "description": "Gets or sets the disk name.",
          "type": "string",
          "readOnly": true
        },
        "isOSDisk": {
          "description": "Gets or sets a value indicating whether the disk is the OS disk.",
          "type": "boolean",
          "readOnly": true
        },
        "capacityInBytes": {
          "format": "int64",
          "description": "Gets or sets the disk capacity in bytes.",
          "type": "integer",
          "readOnly": true
        },
        "logStorageAccountId": {
          "description": "Gets or sets the log storage account ARM Id.",
          "type": "string",
          "readOnly": true
        },
        "seedManagedDiskId": {
          "description": "Gets or sets the ARM Id of the seed managed disk.",
          "type": "string",
          "readOnly": true
        },
        "targetManagedDiskId": {
          "description": "Gets or sets the ARM Id of the target managed disk.",
          "type": "string",
          "readOnly": true
        },
        "diskType": {
          "description": "Gets or sets the disk type.",
          "enum": [
            "Premium_LRS"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "VMwareToAvsDiskAccountType",
            "modelAsString": true
          }
        }
      }
    },
    "VMwareToAvsProtectedItemModelCustomProperties": {
      "description": "VMware To Avs Protected item model custom properties.",
      "required": [
        "applianceId",
        "fabricDiscoveryMachineId",
        "targetResourceGroupId"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ProtectedItemModelCustomProperties"
        }
      ],
      "properties": {
        "activeLocation": {
          "description": "Gets or sets the location of the protected item.",
          "enum": [
            "Primary",
            "Recovery"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "ProtectedItemActiveLocation",
            "modelAsString": true
          }
        },
        "fabricDiscoveryMachineId": {
          "description": "Gets or sets the ARM Id of the discovered machine.",
          "minLength": 1,
          "type": "string"
        },
        "targetCloudProperties": {
          "$ref": "#/definitions/VMwareToAvsTargetCloudProperties"
        },
        "disksToInclude": {
          "description": "Gets or sets the list of disks to replicate.",
          "minItems": 1,
          "type": "array",
          "items": {
            "$ref": "#/definitions/VMwareToAvsDiskInput"
          }
        },
        "disksDefault": {
          "$ref": "#/definitions/VMwareToAvsDefaultDiskInput"
        },
        "targetVmName": {
          "description": "Gets or sets the target VM name.",
          "type": "string"
        },
        "targetResourceGroupId": {
          "description": "Gets or sets the target resource group ARM Id.",
          "minLength": 1,
          "type": "string"
        },
        "targetCpuCores": {
          "format": "int32",
          "description": "Gets or sets the target CPU cores.",
          "type": "integer"
        },
        "targetMemoryInMegaBytes": {
          "format": "int32",
          "description": "Gets or sets the target memory in mega-bytes.",
          "type": "integer"
        },
        "runAsAccountId": {
          "description": "Gets or sets the Run As account Id.",
          "type": "string"
        },
        "applianceId": {
          "description": "Gets or sets the appliance Id.",
          "minLength": 1,
          "type": "string"
        },
        "multiVmGroupName": {
          "description": "Gets or sets the multi VM group name.",
          "type": "string"
        },
        "applianceName": {
          "description": "Gets or sets the appliance name.",
          "type": "string",
          "readOnly": true
        },
        "discoveryType": {
          "description": "Gets or sets the type of the discovered machine.",
          "enum": [
            "VCenter",
            "Physical"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "DiscoveryType",
            "modelAsString": true
          }
        },
        "osType": {
          "description": "Gets or sets the type of the OS.",
          "enum": [
            "Windows",
            "Linux",
            "Other"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "OperatingSystemType",
            "modelAsString": true
          }
        },
        "firmwareType": {
          "description": "Gets or sets the firmware type.",
          "enum": [
            "NONE",
            "BIOS",
            "EFI",
            "UEFI"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "FirmwareType",
            "modelAsString": true
          }
        },
        "targetLocation": {
          "description": "Gets or sets the target location.",
          "type": "string",
          "readOnly": true
        },
        "failoverRecoveryPointId": {
          "description": "Gets or sets the recovery point Id to which the VM was failed over.",
          "type": "string",
          "readOnly": true
        },
        "lastRecoveryPointReceived": {
          "format": "date-time",
          "description": "Gets or sets the last recovery point received time.",
          "type": "string",
          "readOnly": true
        },
        "lastRpoInSeconds": {
          "format": "int64",
          "description": "Gets or sets the last recovery point objective value.",
          "type": "integer",
          "readOnly": true
        },
        "lastRpoCalculatedTime": {
          "format": "date-time",
          "description": "Gets or sets the last recovery point objective calculated time.",
          "type": "string",
          "readOnly": true
        },
        "lastRecoveryPointId": {
          "description": "Gets or sets the last recovery point Id.",
          "type": "string",
          "readOnly": true
        },
        "initialReplicationProgressPercentage": {
          "format": "int32",
          "description": "Gets or sets the initial replication progress percentage. This is calculated based on\r\ntotal bytes processed for all disks in the source VM.",
          "type": "integer",
          "readOnly": true
        },
        "initialReplicationProcessedBytes": {
          "format": "int64",
          "description": "Gets or sets the initial replication processed bytes. This includes sum of total bytes\r\ntransferred and matched bytes on all selected disks in source VM.",
          "type": "integer",
          "readOnly": true
        },
        "initialReplicationTransferredBytes": {
          "format": "int64",
          "description": "Gets or sets the initial replication transferred bytes from source VM to Azure for\r\nall selected disks on source VM.",
          "type": "integer",
          "readOnly": true
        },
        "initialReplicationProgressHealth": {
          "description": "Gets or sets the initial replication progress health.",
          "enum": [
            "None",
            "InProgress",
            "SlowProgress",
            "NoProgress"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "VmReplicationProgressHealth",
            "modelAsString": true
          }
        },
        "resyncProgressPercentage": {
          "format": "int32",
          "description": "Gets or sets the resync progress percentage. This is calculated based on total bytes\r\nprocessed for all disks in the source VM.",
          "type": "integer",
          "readOnly": true
        },
        "resyncProcessedBytes": {
          "format": "int64",
          "description": "Gets or sets the resync processed bytes. This includes sum of total bytes transferred\r\nand matched bytes on all selected disks in source VM.",
          "type": "integer",
          "readOnly": true
        },
        "resyncTransferredBytes": {
          "format": "int64",
          "description": "Gets or sets the resync transferred bytes from source VM to Azure for all\r\nselected disks on source VM.",
          "type": "integer",
          "readOnly": true
        },
        "resyncProgressHealth": {
          "description": "Gets or sets the resync progress health.",
          "enum": [
            "None",
            "InProgress",
            "SlowProgress",
            "NoProgress"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "VmReplicationProgressHealth",
            "modelAsString": true
          }
        },
        "protectedDisks": {
          "description": "Gets or sets the list of protected disks.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VMwareToAvsProtectedDiskProperties"
          },
          "readOnly": true
        },
        "vmNics": {
          "description": "Gets or sets the VM NIC details.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VMwareToAvsNicProperties"
          }
        },
        "mobilityAgentProperties": {
          "allOf": [
            {
              "$ref": "#/definitions/VMwareToAvsMobilityAgentProperties"
            }
          ],
          "readOnly": true
        },
        "discoveredVmProperties": {
          "$ref": "#/definitions/VMwareToAvsDiscoveredProtectedVmProperties"
        },
        "targetIscsiTargetId": {
          "description": "Gets or sets the target iSCSI target Id.",
          "type": "string",
          "readOnly": true
        },
        "targetVmBiosId": {
          "description": "Gets or sets the BIOS Id of the target AVS VM.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "VMwareToAvsRecoveryPlanTestFailoverModelCustomProperties": {
      "description": "VMware To AVS recovery plan test failover model custom properties.",
      "required": [
        "recoveryPointType"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/RecoveryPlanTestFailoverModelCustomProperties"
        }
      ],
      "properties": {
        "recoveryPointType": {
          "description": "Gets or sets the recovery point type.",
          "enum": [
            "Latest",
            "LatestApplicationConsistent",
            "LatestCrashConsistent",
            "LatestProcessed"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "VMwareToAvsRecoveryPlanPointType",
            "modelAsString": true
          }
        },
        "useMultiVmSyncPoint": {
          "description": "Gets or sets a value indicating whether multi VM sync enabled VMs should use multi VM\r\nsync points for failover.",
          "type": "boolean"
        }
      }
    },
    "VMwareToAvsRecoveryPlanUnplannedFailoverModelCustomProperties": {
      "description": "VMware To AVS recovery plan unplanned failover model custom properties.",
      "required": [
        "performShutdown",
        "recoveryPointType"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/RecoveryPlanUnplannedFailoverModelCustomProperties"
        }
      ],
      "properties": {
        "recoveryPointType": {
          "description": "Gets or sets the recovery point type.",
          "enum": [
            "Latest",
            "LatestApplicationConsistent",
            "LatestCrashConsistent",
            "LatestProcessed"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "VMwareToAvsRecoveryPlanPointType",
            "modelAsString": true
          }
        },
        "useMultiVmSyncPoint": {
          "description": "Gets or sets a value indicating whether multi VM sync enabled VMs should use multi VM\r\nsync points for failover.",
          "type": "boolean"
        },
        "performShutdown": {
          "description": "Gets or sets a value indicating whether virtual machines in recovery plan are to be shutdown.",
          "type": "boolean"
        }
      }
    },
    "VMwareToAvsRecoveryPointModelCustomProperties": {
      "description": "VMware to AVS Recovery point model custom properties.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/RecoveryPointModelCustomProperties"
        }
      ],
      "properties": {
        "isMultiVmSyncPoint": {
          "description": "Gets or sets a value indicating whether the recovery point is multi VM consistent.",
          "type": "boolean",
          "readOnly": true
        }
      }
    },
    "VMwareToAvsReplicationExtensionModelCustomProperties": {
      "description": "VMware to AVS Replication extension model custom properties.",
      "required": [
        "fabricArmId"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ReplicationExtensionModelCustomProperties"
        }
      ],
      "properties": {
        "fabricArmId": {
          "description": "Gets or sets the ARM Id of the fabric.",
          "minLength": 1,
          "type": "string"
        },
        "vmwareSiteId": {
          "description": "Gets or sets the ARM Id of the VMware site.",
          "type": "string",
          "readOnly": true
        },
        "physicalSiteId": {
          "description": "Gets or sets the ARM Id of the physical site.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "VMwareToAvsReprotectModelCustomProperties": {
      "description": "VMware to AVS reprotect model custom properties. The VM has failed over to VMware.\r\nReprotection will happen from VMware to AVS.",
      "required": [
        "applianceId"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ReprotectModelCustomProperties"
        }
      ],
      "properties": {
        "applianceId": {
          "description": "Gets or sets the appliance Id.",
          "minLength": 1,
          "type": "string"
        },
        "runAsAccountId": {
          "description": "Gets or sets the Run As account Id.",
          "type": "string"
        }
      }
    },
    "VMwareToAvsTargetCloudProperties": {
      "description": "VMware to AVS target cloud properties.",
      "type": "object",
      "properties": {
        "targetAvsCloudId": {
          "description": "Gets or sets the target AVS cloud ARM Id.",
          "type": "string"
        },
        "targetAvsClusterName": {
          "description": "Gets or sets the target AVS cluster name.",
          "type": "string"
        },
        "targetArcClusterId": {
          "description": "Gets or sets the target ARC Id of the cluster.",
          "type": "string",
          "readOnly": true
        },
        "targetVCenterId": {
          "description": "Gets or sets the target ARC vCenter Id.",
          "type": "string"
        },
        "targetDiskPoolSubnetId": {
          "description": "Gets or sets the target diskpool subnet Id.",
          "type": "string"
        },
        "targetDatastoreId": {
          "description": "Gets or sets the target datastore Id.",
          "type": "string"
        },
        "targetNetworkId": {
          "description": "Gets or sets the target VMware network Id within AVS vCenter.",
          "type": "string"
        },
        "testNetworkId": {
          "description": "Gets or sets the test VMware network Id within AVS vCenter.",
          "type": "string"
        }
      }
    },
    "VMwareToAvsTestFailoverModelCustomProperties": {
      "description": "VMware To AVS test failover model custom properties.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TestFailoverModelCustomProperties"
        }
      ],
      "properties": {
        "targetCloudProperties": {
          "$ref": "#/definitions/VMwareToAvsTargetCloudProperties"
        },
        "recoveryPointName": {
          "description": "Gets or sets the name of the recovery point. In case of latest recovery point,\r\nnull should be passed.",
          "type": "string"
        }
      }
    },
    "VMwareToAvsUnplannedFailoverModelCustomProperties": {
      "description": "VMware To AVS unplanned failover model custom properties.",
      "required": [
        "performShutdown"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/UnplannedFailoverModelCustomProperties"
        }
      ],
      "properties": {
        "targetCloudProperties": {
          "$ref": "#/definitions/VMwareToAvsTargetCloudProperties"
        },
        "performShutdown": {
          "description": "Gets or sets a value indicating whether VM is to be shutdown.",
          "type": "boolean"
        },
        "recoveryPointName": {
          "description": "Gets or sets the name of the recovery point. In case of latest recovery point,\r\nnull should be passed.",
          "type": "string"
        }
      }
    },
    "VMwareToAzStackHCIDiskInput": {
      "description": "VMwareToAzStack disk input.",
      "required": [
        "diskFileFormat",
        "diskId",
        "diskSizeGB",
        "isOsDisk"
      ],
      "type": "object",
      "properties": {
        "diskId": {
          "description": "Gets or sets the disk Id.",
          "minLength": 1,
          "type": "string"
        },
        "storageContainerId": {
          "description": "Gets or sets the target storage account ARM Id.",
          "type": "string"
        },
        "isDynamic": {
          "description": "Gets or sets a value indicating whether dynamic sizing is enabled on the virtual hard\r\ndisk.",
          "type": "boolean"
        },
        "diskSizeGB": {
          "format": "int64",
          "description": "Gets or sets the disk size in GB.",
          "type": "integer"
        },
        "diskFileFormat": {
          "description": "Gets or sets the type of the virtual hard disk, vhd or vhdx.",
          "minLength": 1,
          "type": "string"
        },
        "isOsDisk": {
          "description": "Gets or sets a value indicating whether disk is os disk.",
          "type": "boolean"
        }
      }
    },
    "VMwareToAzStackHCINicInput": {
      "description": "VMwareToAzStackHCI NIC properties.",
      "required": [
        "label",
        "nicId",
        "selectionTypeForFailover"
      ],
      "type": "object",
      "properties": {
        "nicId": {
          "description": "Gets or sets the NIC Id.",
          "minLength": 1,
          "type": "string"
        },
        "label": {
          "description": "Gets or sets the NIC label.",
          "minLength": 1,
          "type": "string"
        },
        "networkName": {
          "description": "Gets or sets the network name.",
          "type": "string",
          "readOnly": true
        },
        "targetNetworkId": {
          "description": "Gets or sets the target network Id within AzStackHCI Cluster.",
          "type": "string",
          "readOnly": true
        },
        "testNetworkId": {
          "description": "Gets or sets the target test network Id within AzStackHCI Cluster.",
          "type": "string",
          "readOnly": true
        },
        "selectionTypeForFailover": {
          "description": "Gets or sets the selection type of the NIC.",
          "enum": [
            "NotSelected",
            "SelectedByUser",
            "SelectedByDefault",
            "SelectedByUserOverride"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "VMNicSelection",
            "modelAsString": true
          }
        }
      }
    },
    "VMwareToAzStackHCIPlannedFailoverModelCustomProperties": {
      "description": "VMware to AzStackHCI planned failover model custom properties.",
      "required": [
        "shutdownSourceVM"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/PlannedFailoverModelCustomProperties"
        }
      ],
      "properties": {
        "shutdownSourceVM": {
          "description": "Gets or sets a value indicating whether VM needs to be shut down.",
          "type": "boolean"
        }
      }
    },
    "VMwareToAzStackHCIPolicyModelCustomProperties": {
      "description": "VMware To AzStackHCI Policy model custom properties.",
      "required": [
        "appConsistentFrequencyInMinutes",
        "crashConsistentFrequencyInMinutes",
        "recoveryPointHistoryInMinutes"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/PolicyModelCustomProperties"
        }
      ],
      "properties": {
        "recoveryPointHistoryInMinutes": {
          "format": "int32",
          "description": "Gets or sets the duration in minutes until which the recovery points need to be\r\nstored.",
          "type": "integer"
        },
        "crashConsistentFrequencyInMinutes": {
          "format": "int32",
          "description": "Gets or sets the crash consistent snapshot frequency (in minutes).",
          "type": "integer"
        },
        "appConsistentFrequencyInMinutes": {
          "format": "int32",
          "description": "Gets or sets the app consistent snapshot frequency (in minutes).",
          "type": "integer"
        }
      }
    },
    "VMwareToAzStackHCIProtectedDiskProperties": {
      "description": "VMwareToAzStackHCI protected disk properties.",
      "type": "object",
      "properties": {
        "storageContainerId": {
          "description": "Gets or sets the ARM Id of the storage container.",
          "type": "string",
          "readOnly": true
        },
        "storageContainerLocalPath": {
          "description": "Gets or sets the local path of the storage container.",
          "type": "string",
          "readOnly": true
        },
        "sourceDiskId": {
          "description": "Gets or sets the source disk Id.",
          "type": "string",
          "readOnly": true
        },
        "sourceDiskName": {
          "description": "Gets or sets the source disk Name.",
          "type": "string",
          "readOnly": true
        },
        "seedDiskName": {
          "description": "Gets or sets the seed disk name.",
          "type": "string",
          "readOnly": true
        },
        "testMigrateDiskName": {
          "description": "Gets or sets the test failover clone disk.",
          "type": "string",
          "readOnly": true
        },
        "migrateDiskName": {
          "description": "Gets or sets the failover clone disk.",
          "type": "string",
          "readOnly": true
        },
        "isOsDisk": {
          "description": "Gets or sets a value indicating whether the disk is the OS disk.",
          "type": "boolean",
          "readOnly": true
        },
        "capacityInBytes": {
          "format": "int64",
          "description": "Gets or sets the disk capacity in bytes.",
          "type": "integer",
          "readOnly": true
        },
        "isDynamic": {
          "description": "Gets or sets a value indicating whether dynamic sizing is enabled on the virtual hard\r\ndisk.",
          "type": "boolean",
          "readOnly": true
        },
        "diskType": {
          "description": "Gets or sets the disk type.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "VMwareToAzStackHCIProtectedItemModelCustomProperties": {
      "description": "VMware to AzStackHCI Protected item model custom properties.",
      "required": [
        "customlocationRegion",
        "disksToInclude",
        "fabricDiscoveryMachineId",
        "hyperVGeneration",
        "nicsToInclude",
        "runAsAccountId",
        "sourceDraName",
        "storageContainerId",
        "targetArcClusterCustomLocationId",
        "targetDraName",
        "targetHCIClusterId",
        "targetResourceGroupId"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ProtectedItemModelCustomProperties"
        }
      ],
      "properties": {
        "activeLocation": {
          "description": "Gets or sets the location of the protected item.",
          "enum": [
            "Primary",
            "Recovery"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "ProtectedItemActiveLocation",
            "modelAsString": true
          }
        },
        "targetHCIClusterId": {
          "description": "Gets or sets the Target HCI Cluster ARM Id.",
          "minLength": 1,
          "type": "string"
        },
        "targetArcClusterCustomLocationId": {
          "description": "Gets or sets the Target Arc Cluster Custom Location ARM Id.",
          "minLength": 1,
          "type": "string"
        },
        "targetAzStackHCIClusterName": {
          "description": "Gets or sets the Target AzStackHCI cluster name.",
          "type": "string",
          "readOnly": true
        },
        "storageContainerId": {
          "description": "Gets or sets the target storage container ARM Id.",
          "minLength": 1,
          "type": "string"
        },
        "targetResourceGroupId": {
          "description": "Gets or sets the target resource group ARM Id.",
          "minLength": 1,
          "type": "string"
        },
        "targetLocation": {
          "description": "Gets or sets the target location.",
          "type": "string",
          "readOnly": true
        },
        "customlocationRegion": {
          "description": "Gets or sets the location of Azure Arc HCI custom location resource.",
          "minLength": 1,
          "type": "string"
        },
        "disksToInclude": {
          "description": "Gets or sets the list of disks to replicate.",
          "minItems": 1,
          "type": "array",
          "items": {
            "$ref": "#/definitions/VMwareToAzStackHCIDiskInput"
          }
        },
        "nicsToInclude": {
          "description": "Gets or sets the list of disks to replicate.",
          "minItems": 1,
          "type": "array",
          "items": {
            "$ref": "#/definitions/VMwareToAzStackHCINicInput"
          }
        },
        "protectedDisks": {
          "description": "Gets or sets the list of protected disks.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VMwareToAzStackHCIProtectedDiskProperties"
          },
          "readOnly": true
        },
        "protectedNics": {
          "description": "Gets or sets the VM NIC details.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VMwareToAzStackHCIProtectedNicProperties"
          },
          "readOnly": true
        },
        "targetVmBiosId": {
          "description": "Gets or sets the BIOS Id of the target AzStackHCI VM.",
          "type": "string",
          "readOnly": true
        },
        "targetVmName": {
          "description": "Gets or sets the target VM display name.",
          "type": "string"
        },
        "hyperVGeneration": {
          "description": "Gets or sets the hypervisor generation of the virtual machine possible values are 1,2.",
          "minLength": 1,
          "type": "string"
        },
        "targetNetworkId": {
          "description": "Gets or sets the target network Id within AzStackHCI Cluster.",
          "type": "string"
        },
        "testNetworkId": {
          "description": "Gets or sets the target test network Id within AzStackHCI Cluster.",
          "type": "string"
        },
        "targetCpuCores": {
          "format": "int32",
          "description": "Gets or sets the target CPU cores.",
          "type": "integer"
        },
        "isDynamicRam": {
          "description": "Gets or sets a value indicating whether memory is dynamical.",
          "type": "boolean"
        },
        "dynamicMemoryConfig": {
          "$ref": "#/definitions/ProtectedItemDynamicMemoryConfig"
        },
        "targetMemoryInMegaBytes": {
          "format": "int32",
          "description": "Gets or sets the target memory in mega-bytes.",
          "type": "integer"
        },
        "osType": {
          "description": "Gets or sets the type of the OS.",
          "type": "string",
          "readOnly": true
        },
        "osName": {
          "description": "Gets or sets the name of the OS.",
          "type": "string",
          "readOnly": true
        },
        "firmwareType": {
          "description": "Gets or sets the firmware type.",
          "type": "string",
          "readOnly": true
        },
        "fabricDiscoveryMachineId": {
          "description": "Gets or sets the ARM Id of the discovered machine.",
          "minLength": 1,
          "type": "string"
        },
        "sourceVmName": {
          "description": "Gets or sets the source VM display name.",
          "type": "string",
          "readOnly": true
        },
        "sourceCpuCores": {
          "format": "int32",
          "description": "Gets or sets the source VM CPU cores.",
          "type": "integer",
          "readOnly": true
        },
        "sourceMemoryInMegaBytes": {
          "format": "double",
          "description": "Gets or sets the source VM ram memory size in megabytes.",
          "type": "number",
          "readOnly": true
        },
        "runAsAccountId": {
          "description": "Gets or sets the runas account Id.",
          "minLength": 1,
          "type": "string"
        },
        "sourceDraName": {
          "description": "Gets or sets the source DRA name.",
          "minLength": 1,
          "type": "string"
        },
        "targetDraName": {
          "description": "Gets or sets the target DRA name.",
          "minLength": 1,
          "type": "string"
        },
        "sourceApplianceName": {
          "description": "Gets or sets the source appliance name.",
          "type": "string",
          "readOnly": true
        },
        "targetApplianceName": {
          "description": "Gets or sets the target appliance name.",
          "type": "string",
          "readOnly": true
        },
        "failoverRecoveryPointId": {
          "description": "Gets or sets the recovery point Id to which the VM was failed over.",
          "type": "string",
          "readOnly": true
        },
        "lastRecoveryPointReceived": {
          "format": "date-time",
          "description": "Gets or sets the last recovery point received time.",
          "type": "string",
          "readOnly": true
        },
        "lastRecoveryPointId": {
          "description": "Gets or sets the last recovery point Id.",
          "type": "string",
          "readOnly": true
        },
        "initialReplicationProgressPercentage": {
          "format": "int32",
          "description": "Gets or sets the initial replication progress percentage. This is calculated based on\r\ntotal bytes processed for all disks in the source VM.",
          "type": "integer",
          "readOnly": true
        },
        "migrationProgressPercentage": {
          "format": "int32",
          "description": "Gets or sets the migration progress percentage.",
          "type": "integer",
          "readOnly": true
        },
        "resumeProgressPercentage": {
          "format": "int32",
          "description": "Gets or sets the resume progress percentage.",
          "type": "integer",
          "readOnly": true
        },
        "resyncProgressPercentage": {
          "format": "int32",
          "description": "Gets or sets the resync progress percentage. This is calculated based on total bytes\r\nprocessed for all disks in the source VM.",
          "type": "integer",
          "readOnly": true
        },
        "resyncRetryCount": {
          "format": "int64",
          "description": "Gets or sets the resync retry count.",
          "type": "integer",
          "readOnly": true
        },
        "resyncRequired": {
          "description": "Gets or sets a value indicating whether resync is required.",
          "type": "boolean",
          "readOnly": true
        },
        "resyncState": {
          "description": "Gets or sets the resync state.",
          "enum": [
            "None",
            "PreparedForResynchronization",
            "StartedResynchronization"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "VMwareToAzureMigrateResyncState",
            "modelAsString": true
          }
        },
        "performAutoResync": {
          "description": "Gets or sets a value indicating whether auto resync is to be done.",
          "type": "boolean"
        },
        "resumeRetryCount": {
          "format": "int64",
          "description": "Gets or sets the resume retry count.",
          "type": "integer",
          "readOnly": true
        },
        "lastReplicationUpdateTime": {
          "format": "date-time",
          "description": "Gets or sets the latest timestamp that replication status is updated.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "VMwareToAzStackHCIProtectedNicProperties": {
      "description": "VMwareToAzStackHCI NIC properties.",
      "type": "object",
      "properties": {
        "nicId": {
          "description": "Gets or sets the NIC Id.",
          "type": "string",
          "readOnly": true
        },
        "macAddress": {
          "description": "Gets or sets the NIC mac address.",
          "type": "string",
          "readOnly": true
        },
        "label": {
          "description": "Gets or sets the NIC label.",
          "type": "string",
          "readOnly": true
        },
        "isPrimaryNic": {
          "description": "Gets or sets a value indicating whether this is the primary NIC.",
          "type": "boolean"
        },
        "networkName": {
          "description": "Gets or sets the network name.",
          "type": "string",
          "readOnly": true
        },
        "targetNetworkId": {
          "description": "Gets or sets the target network Id within AzStackHCI Cluster.",
          "type": "string",
          "readOnly": true
        },
        "testNetworkId": {
          "description": "Gets or sets the target test network Id within AzStackHCI Cluster.",
          "type": "string",
          "readOnly": true
        },
        "selectionTypeForFailover": {
          "description": "Gets or sets the selection type of the NIC.",
          "enum": [
            "NotSelected",
            "SelectedByUser",
            "SelectedByDefault",
            "SelectedByUserOverride"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "VMNicSelection",
            "modelAsString": true
          }
        }
      }
    },
    "VMwareToAzStackHCIReplicationExtensionModelCustomProperties": {
      "description": "VMware to AzStackHCI Replication extension model custom properties.",
      "required": [
        "azStackHCIFabricArmId",
        "VMwareFabricArmId"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ReplicationExtensionModelCustomProperties"
        }
      ],
      "properties": {
        "VMwareFabricArmId": {
          "description": "Gets or sets the ARM Id of the source VMware fabric.",
          "minLength": 1,
          "type": "string"
        },
        "VMwareSiteId": {
          "description": "Gets or sets the ARM Id of the VMware site.",
          "type": "string",
          "readOnly": true
        },
        "azStackHCIFabricArmId": {
          "description": "Gets or sets the ARM Id of the target AzStackHCI fabric.",
          "minLength": 1,
          "type": "string"
        },
        "azStackHCISiteId": {
          "description": "Gets or sets the ARM Id of the AzStackHCI site.",
          "type": "string",
          "readOnly": true
        },
        "storageAccountId": {
          "description": "Gets or sets the storage account Id.",
          "type": "string"
        },
        "storageAccountSasSecretName": {
          "description": "Gets or sets the Sas Secret of storage account.",
          "type": "string"
        },
        "asrServiceUri": {
          "description": "Gets or sets the Uri of ASR.",
          "type": "string",
          "readOnly": true
        },
        "rcmServiceUri": {
          "description": "Gets or sets the Uri of Rcm.",
          "type": "string",
          "readOnly": true
        },
        "gatewayServiceUri": {
          "description": "Gets or sets the Uri of Gateway.",
          "type": "string",
          "readOnly": true
        },
        "sourceGatewayServiceId": {
          "description": "Gets or sets the gateway service Id of source.",
          "type": "string",
          "readOnly": true
        },
        "targetGatewayServiceId": {
          "description": "Gets or sets the gateway service Id of target.",
          "type": "string",
          "readOnly": true
        },
        "sourceStorageContainerName": {
          "description": "Gets or sets the source storage container name.",
          "type": "string",
          "readOnly": true
        },
        "targetStorageContainerName": {
          "description": "Gets or sets the target storage container name.",
          "type": "string",
          "readOnly": true
        },
        "resourceLocation": {
          "description": "Gets or sets the resource location.",
          "type": "string",
          "readOnly": true
        },
        "subscriptionId": {
          "description": "Gets or sets the subscription.",
          "type": "string",
          "readOnly": true
        },
        "resourceGroup": {
          "description": "Gets or sets the resource group.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "VMwareToAzureMigrateDiskInput": {
      "description": "VMware to Azure migrate disk input.",
      "required": [
        "diskId",
        "isOSDisk",
        "logStorageAccountId",
        "logStorageAccountSasSecretName"
      ],
      "type": "object",
      "properties": {
        "diskId": {
          "description": "Gets or sets the disk Id.",
          "minLength": 1,
          "type": "string"
        },
        "diskType": {
          "description": "Gets or sets the disk type.",
          "enum": [
            "Standard_LRS",
            "Premium_LRS",
            "StandardSSD_LRS"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "DiskAccountType",
            "modelAsString": true
          }
        },
        "isOSDisk": {
          "description": "Gets or sets a value indicating whether the disk is the OS disk.",
          "type": "boolean"
        },
        "logStorageAccountId": {
          "description": "Gets or sets the log storage account ARM Id.",
          "minLength": 1,
          "type": "string"
        },
        "logStorageAccountSasSecretName": {
          "description": "Gets or sets the key vault secret name of the log storage account.",
          "minLength": 1,
          "type": "string"
        },
        "diskEncryptionSetId": {
          "description": "Gets or sets the DiskEncryptionSet ARM Id.",
          "type": "string"
        }
      }
    },
    "VMwareToAzureMigrateNicProperties": {
      "description": "VMware to Azure migrate NIC properties.",
      "type": "object",
      "properties": {
        "nicId": {
          "description": "Gets or sets the NIC Id.",
          "type": "string",
          "readOnly": true
        },
        "isPrimaryNic": {
          "description": "Gets or sets a value indicating whether this is the primary NIC.",
          "type": "boolean"
        },
        "sourceIPAddress": {
          "description": "Gets or sets the source IP address.",
          "type": "string",
          "readOnly": true
        },
        "sourceIPAddressType": {
          "description": "Gets or sets the source IP address type.",
          "enum": [
            "Dynamic",
            "Static"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "IPAddressType",
            "modelAsString": true
          }
        },
        "sourceNetworkId": {
          "description": "Gets or sets source network Id.",
          "type": "string",
          "readOnly": true
        },
        "targetIPAddress": {
          "description": "Gets or sets the target IP address.",
          "type": "string"
        },
        "targetIPAddressType": {
          "description": "Gets or sets the target IP address type.",
          "enum": [
            "Dynamic",
            "Static"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "IPAddressType",
            "modelAsString": true
          }
        },
        "targetSubnetName": {
          "description": "Gets or sets target subnet name.",
          "type": "string"
        },
        "testNetworkId": {
          "description": "Gets or sets source network Id.",
          "type": "string"
        },
        "testSubnetName": {
          "description": "Gets or sets test subnet name.",
          "type": "string"
        },
        "testIPAddress": {
          "description": "Gets or sets the test IP address.",
          "type": "string"
        },
        "testIPAddressType": {
          "description": "Gets or sets the test IP address type.",
          "enum": [
            "Dynamic",
            "Static"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "IPAddressType",
            "modelAsString": true
          }
        },
        "targetNicName": {
          "description": "Gets or sets target NIC name.",
          "type": "string"
        },
        "isSelectedForMigration": {
          "description": "Gets or sets a value indicating whether this NIC is selected for migration.",
          "type": "boolean"
        }
      }
    },
    "VMwareToAzureMigratePolicyModelCustomProperties": {
      "description": "Vmware To Azure migrate policy model custom properties.",
      "required": [
        "appConsistentFrequencyInMinutes",
        "crashConsistentFrequencyInMinutes",
        "recoveryPointHistoryInMinutes"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/PolicyModelCustomProperties"
        }
      ],
      "properties": {
        "recoveryPointHistoryInMinutes": {
          "format": "int32",
          "description": "Gets or sets the duration in minutes until which the recovery points need to be\r\nstored.",
          "type": "integer"
        },
        "crashConsistentFrequencyInMinutes": {
          "format": "int32",
          "description": "Gets or sets the crash consistent snapshot frequency (in minutes).",
          "type": "integer"
        },
        "appConsistentFrequencyInMinutes": {
          "format": "int32",
          "description": "Gets or sets the app consistent snapshot frequency (in minutes).",
          "type": "integer"
        }
      }
    },
    "VMwareToAzureMigrateProtectedDiskProperties": {
      "description": "VMware to Azure migrate protected disk details.",
      "type": "object",
      "properties": {
        "diskId": {
          "description": "Gets or sets the disk id.",
          "type": "string",
          "readOnly": true
        },
        "diskName": {
          "description": "Gets or sets the disk name.",
          "type": "string",
          "readOnly": true
        },
        "diskType": {
          "description": "Gets or sets the disk type.",
          "enum": [
            "Standard_LRS",
            "Premium_LRS",
            "StandardSSD_LRS"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "DiskAccountType",
            "modelAsString": true
          }
        },
        "diskPath": {
          "description": "Gets or sets the disk path.",
          "type": "string",
          "readOnly": true
        },
        "isOSDisk": {
          "description": "Gets or sets a value indicating whether the disk is the OS disk.",
          "type": "boolean",
          "readOnly": true
        },
        "capacityInBytes": {
          "format": "int64",
          "description": "Gets or sets the disk capacity in bytes.",
          "type": "integer",
          "readOnly": true
        },
        "logStorageAccountId": {
          "description": "Gets or sets the log storage account ARM Id.",
          "type": "string",
          "readOnly": true
        },
        "logStorageAccountSasSecretName": {
          "description": "Gets or sets the key vault secret name of the log storage account.",
          "type": "string",
          "readOnly": true
        },
        "diskEncryptionSetId": {
          "description": "Gets or sets the DiskEncryptionSet ARM Id.",
          "type": "string",
          "readOnly": true
        },
        "seedManagedDiskId": {
          "description": "Gets or sets the ARM Id of the seed managed disk.",
          "type": "string",
          "readOnly": true
        },
        "targetManagedDiskId": {
          "description": "Gets or sets the ARM Id of the target managed disk.",
          "type": "string",
          "readOnly": true
        },
        "targetDiskName": {
          "description": "Gets or sets the name for the target managed disk.",
          "type": "string"
        }
      }
    },
    "VMwareToAzureMigrateProtectedItemModelCustomProperties": {
      "description": "VMware To Azure migrate protected item model custom properties.",
      "required": [
        "disksToInclude"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ProtectedItemModelCustomProperties"
        }
      ],
      "properties": {
        "disksToInclude": {
          "description": "Gets or sets the disks to include list.",
          "minItems": 1,
          "type": "array",
          "items": {
            "$ref": "#/definitions/VMwareToAzureMigrateDiskInput"
          }
        },
        "vmwareMachineId": {
          "description": "Gets or sets the ARM Id of the VM discovered in VMware.",
          "type": "string",
          "readOnly": true
        },
        "osType": {
          "description": "Gets or sets the type of the OS on the VM.",
          "enum": [
            "Windows",
            "Linux",
            "Other"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "OperatingSystemType",
            "modelAsString": true
          }
        },
        "firmwareType": {
          "description": "Gets or sets the firmware type.",
          "type": "string",
          "readOnly": true
        },
        "targetGeneration": {
          "description": "Gets or sets the target generation.",
          "type": "string",
          "readOnly": true
        },
        "licenseType": {
          "description": "Gets or sets License Type of the VM to be used.",
          "enum": [
            "NotSpecified",
            "NoLicenseType",
            "WindowsServer"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "LicenseType",
            "modelAsString": true
          }
        },
        "sqlServerLicenseType": {
          "description": "Gets or sets the SQL Server license type.",
          "enum": [
            "NotSpecified",
            "NoLicenseType",
            "PAYG",
            "AHUB"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "SqlServerLicenseType",
            "modelAsString": true
          }
        },
        "performSqlBulkRegistration": {
          "description": "Gets or sets a value indicating whether bulk SQL RP registration to be done.",
          "type": "boolean"
        },
        "runAsAccountId": {
          "description": "Gets or sets the Run As account Id.",
          "type": "string",
          "readOnly": true
        },
        "targetVmName": {
          "description": "Gets or sets target VM name.",
          "type": "string"
        },
        "targetVmSize": {
          "description": "Gets or sets the target VM size.",
          "type": "string"
        },
        "targetLocation": {
          "description": "Gets or sets the target location.",
          "type": "string",
          "readOnly": true
        },
        "targetResourceGroupId": {
          "description": "Gets or sets the target resource group Id.",
          "type": "string"
        },
        "targetAvailabilitySetId": {
          "description": "Gets or sets the target availability set Id.",
          "type": "string"
        },
        "targetAvailabilityZone": {
          "description": "Gets or sets the target availability zone.",
          "type": "string"
        },
        "targetProximityPlacementGroupId": {
          "description": "Gets or sets the target proximity placement group Id.",
          "type": "string"
        },
        "targetBootDiagnosticsStorageAccountId": {
          "description": "Gets or sets the target boot diagnostics storage account ARM Id.",
          "type": "string"
        },
        "targetVmTags": {
          "description": "Gets or sets the target VM tags.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "protectedDisks": {
          "description": "Gets or sets the list of protected disks.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VMwareToAzureMigrateProtectedDiskProperties"
          }
        },
        "targetNetworkId": {
          "description": "Gets or sets the target network Id.",
          "type": "string"
        },
        "testNetworkId": {
          "description": "Gets or sets the test network Id.",
          "type": "string"
        },
        "vmNics": {
          "description": "Gets or sets the network details.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VMwareToAzureMigrateNicProperties"
          }
        },
        "targetNicTags": {
          "description": "Gets or sets the tags for the target NICs.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "migrationRecoveryPointId": {
          "description": "Gets or sets the recovery point Id to which the VM was migrated.",
          "type": "string",
          "readOnly": true
        },
        "lastRecoveryPointReceived": {
          "format": "date-time",
          "description": "Gets or sets the last recovery point received time.",
          "type": "string",
          "readOnly": true
        },
        "lastRecoveryPointId": {
          "description": "Gets or sets the last recovery point Id.",
          "type": "string",
          "readOnly": true
        },
        "initialSeedingProgressPercentage": {
          "format": "int32",
          "description": "Gets or sets the initial seeding progress percentage.",
          "type": "integer",
          "readOnly": true
        },
        "migrationProgressPercentage": {
          "format": "int32",
          "description": "Gets or sets the migration progress percentage.",
          "type": "integer",
          "readOnly": true
        },
        "resyncProgressPercentage": {
          "format": "int32",
          "description": "Gets or sets the resync progress percentage.",
          "type": "integer",
          "readOnly": true
        },
        "resumeProgressPercentage": {
          "format": "int32",
          "description": "Gets or sets the resume progress percentage.",
          "type": "integer",
          "readOnly": true
        },
        "initialSeedingRetryCount": {
          "format": "int64",
          "description": "Gets or sets the initial seeding retry count.",
          "type": "integer",
          "readOnly": true
        },
        "resyncRetryCount": {
          "format": "int64",
          "description": "Gets or sets the resync retry count.",
          "type": "integer",
          "readOnly": true
        },
        "resumeRetryCount": {
          "format": "int64",
          "description": "Gets or sets the resume retry count.",
          "type": "integer",
          "readOnly": true
        },
        "resyncRequired": {
          "description": "Gets or sets a value indicating whether resync is required.",
          "type": "boolean",
          "readOnly": true
        },
        "resyncState": {
          "description": "Gets or sets the resync state.",
          "enum": [
            "None",
            "PreparedForResynchronization",
            "StartedResynchronization"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "VMwareToAzureMigrateResyncState",
            "modelAsString": true
          }
        },
        "performAutoResync": {
          "description": "Gets or sets a value indicating whether auto resync is to be done.",
          "type": "boolean"
        },
        "seedDiskTags": {
          "description": "Gets or sets the tags for the seed disks.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "targetDiskTags": {
          "description": "Gets or sets the tags for the target disks.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "testSubnetName": {
          "description": "Gets or sets the selected test subnet name.",
          "type": "string"
        },
        "targetSubnetName": {
          "description": "Gets or sets the target subnet name.",
          "type": "string"
        }
      }
    },
    "VMwareToAzureMigrateReplicationExtensionModelCustomProperties": {
      "description": "VMware to Azure migrate replication extension model custom properties.",
      "required": [
        "fabricArmId",
        "storageAccountId",
        "targetLocation"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ReplicationExtensionModelCustomProperties"
        }
      ],
      "properties": {
        "fabricArmId": {
          "description": "Gets or sets the ARM Id of the fabric.",
          "minLength": 1,
          "type": "string"
        },
        "storageAccountId": {
          "description": "Gets or sets the storage account ARM Id.",
          "minLength": 1,
          "type": "string"
        },
        "targetLocation": {
          "description": "Gets or sets the target location.",
          "minLength": 1,
          "type": "string"
        }
      }
    },
    "VaultModel": {
      "description": "Vault model.",
      "required": [
        "location"
      ],
      "type": "object",
      "properties": {
        "location": {
          "description": "Gets or sets the location of the vault.",
          "minLength": 1,
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/VaultModelProperties"
        },
        "id": {
          "description": "Gets or sets the Id of the resource.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "Gets or sets the name of the resource.",
          "type": "string",
          "readOnly": true
        },
        "type": {
          "description": "Gets or sets the type of the resource.",
          "type": "string",
          "readOnly": true
        },
        "systemData": {
          "allOf": [
            {
              "$ref": "#/definitions/SystemDataModel"
            }
          ],
          "readOnly": true
        },
        "tags": {
          "description": "Gets or sets the resource tags.",
          "maxLength": 15,
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "x-ms-azure-resource": true
    },
    "VaultModelCollection": {
      "description": "Vault model collection.",
      "type": "object",
      "properties": {
        "value": {
          "description": "Gets or sets the list of vaults.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VaultModel"
          }
        },
        "nextLink": {
          "description": "Gets or sets the value of next link.",
          "type": "string"
        }
      }
    },
    "VaultModelProperties": {
      "description": "Vault properties.",
      "type": "object",
      "properties": {
        "provisioningState": {
          "description": "Gets or sets the provisioning state of the vault.",
          "enum": [
            "Canceled",
            "Creating",
            "Deleting",
            "Deleted",
            "Failed",
            "Succeeded",
            "Updating"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "ProvisioningState",
            "modelAsString": true
          }
        },
        "serviceResourceId": {
          "description": "Gets or sets the service resource Id.",
          "type": "string",
          "readOnly": true
        },
        "vaultType": {
          "description": "Gets or sets the type of vault.",
          "enum": [
            "DisasterRecovery",
            "Migrate"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ReplicationVaultType",
            "modelAsString": true
          }
        }
      }
    },
    "VaultStatisticsModel": {
      "description": "Vault statistics model.",
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/VaultStatisticsModelProperties"
        }
      }
    },
    "VaultStatisticsModelProperties": {
      "description": "Vault statistics properties.",
      "type": "object",
      "properties": {
        "protectedItemStatistics": {
          "allOf": [
            {
              "$ref": "#/definitions/ProtectedItemStatisticsModel"
            }
          ],
          "readOnly": true
        },
        "jobStatistics": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkflowStatisticsModel"
            }
          ],
          "readOnly": true
        },
        "vaultErrors": {
          "description": "Gets or sets the list of vault health errors.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HealthErrorModel"
          },
          "readOnly": true
        },
        "fabricStatistics": {
          "allOf": [
            {
              "$ref": "#/definitions/FabricStatisticsModel"
            }
          ],
          "readOnly": true
        }
      }
    },
    "WorkflowModel": {
      "description": "Workflow model.",
      "required": [
        "properties"
      ],
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/WorkflowModelProperties"
        },
        "id": {
          "description": "Gets or sets the Id of the resource.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "Gets or sets the name of the resource.",
          "type": "string",
          "readOnly": true
        },
        "type": {
          "description": "Gets or sets the type of the resource.",
          "type": "string",
          "readOnly": true
        },
        "systemData": {
          "allOf": [
            {
              "$ref": "#/definitions/SystemDataModel"
            }
          ],
          "readOnly": true
        },
        "tags": {
          "description": "Gets or sets the resource tags.",
          "maxLength": 15,
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "x-ms-azure-resource": true
    },
    "WorkflowModelCollection": {
      "description": "Workflow model collection.",
      "type": "object",
      "properties": {
        "value": {
          "description": "Gets or sets the list of workflows.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkflowModel"
          }
        },
        "nextLink": {
          "description": "Gets or sets the value of next link.",
          "type": "string"
        }
      }
    },
    "WorkflowModelCustomProperties": {
      "description": "Workflow model custom properties.",
      "required": [
        "instanceType"
      ],
      "type": "object",
      "properties": {
        "instanceType": {
          "description": "Gets or sets the instance type.",
          "minLength": 1,
          "type": "string"
        },
        "affectedObjectDetails": {
          "description": "Gets or sets any custom properties of the affected object.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "readOnly": true
        }
      },
      "discriminator": "instanceType"
    },
    "WorkflowModelProperties": {
      "description": "Workflow model properties.",
      "required": [
        "customProperties"
      ],
      "type": "object",
      "properties": {
        "displayName": {
          "description": "Gets or sets the friendly display name.",
          "type": "string",
          "readOnly": true
        },
        "state": {
          "description": "Gets or sets the workflow state.",
          "enum": [
            "Pending",
            "Started",
            "Cancelling",
            "Succeeded",
            "Failed",
            "Cancelled",
            "CompletedWithInformation",
            "CompletedWithWarnings",
            "CompletedWithErrors"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "WorkflowState",
            "modelAsString": true
          }
        },
        "startTime": {
          "format": "date-time",
          "description": "Gets or sets the start time.",
          "type": "string",
          "readOnly": true
        },
        "endTime": {
          "format": "date-time",
          "description": "Gets or sets the end time.",
          "type": "string",
          "readOnly": true
        },
        "objectId": {
          "description": "Gets or sets the affected object Id.",
          "type": "string",
          "readOnly": true
        },
        "objectName": {
          "description": "Gets or sets the affected object name.",
          "type": "string",
          "readOnly": true
        },
        "objectInternalId": {
          "description": "Gets or sets the affected object internal Id.",
          "type": "string",
          "readOnly": true
        },
        "objectInternalName": {
          "description": "Gets or sets the affected object internal name.",
          "type": "string",
          "readOnly": true
        },
        "objectType": {
          "description": "Gets or sets the object type.",
          "enum": [
            "AvsDiskPool",
            "Dra",
            "Fabric",
            "Policy",
            "ProtectedItem",
            "RecoveryPlan",
            "ReplicationExtension",
            "Vault"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "WorkflowObjectType",
            "modelAsString": true
          }
        },
        "replicationProviderId": {
          "description": "Gets or sets the replication provider.",
          "type": "string",
          "readOnly": true
        },
        "sourceFabricProviderId": {
          "description": "Gets or sets the source fabric provider.",
          "type": "string",
          "readOnly": true
        },
        "targetFabricProviderId": {
          "description": "Gets or sets the target fabric provider.",
          "type": "string",
          "readOnly": true
        },
        "allowedActions": {
          "description": "Gets or sets the list of allowed actions on the workflow.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "activityId": {
          "description": "Gets or sets the workflow activity id.",
          "type": "string",
          "readOnly": true
        },
        "tasks": {
          "description": "Gets or sets the list of tasks.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskModel"
          },
          "readOnly": true
        },
        "errors": {
          "description": "Gets or sets the list of errors.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ErrorModel"
          },
          "readOnly": true
        },
        "customProperties": {
          "$ref": "#/definitions/WorkflowModelCustomProperties"
        }
      }
    },
    "WorkflowStatisticsModel": {
      "description": "Workflow statistics.",
      "type": "object",
      "properties": {
        "count": {
          "format": "int64",
          "description": "Gets or sets the resource count.",
          "type": "integer",
          "readOnly": true
        },
        "categorizedCounts": {
          "description": "Gets or sets the categorized resource counts.",
          "type": "object",
          "additionalProperties": {
            "format": "int64",
            "type": "integer"
          },
          "readOnly": true
        }
      }
    }
  },
  "parameters": {
    "subscriptionId": {
      "in": "path",
      "name": "subscriptionId",
      "description": "The Subscription ID.",
      "required": true,
      "type": "string"
    },
    "resourceGroupName": {
      "in": "path",
      "name": "resourceGroupName",
      "description": "Resource group name.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "api-version": {
      "in": "query",
      "name": "api-version",
      "description": "Client Api Version.",
      "required": true,
      "type": "string"
    }
  },
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "flow": "implicit",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      },
      "description": "Azure Active Directory OAuth2 Flow"
    }
  },
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ],
  "tags": [
    {
      "name": "Dra",
      "description": "Dra Controller."
    },
    {
      "name": "EmailConfiguration",
      "description": "Email configuration Controller."
    },
    {
      "name": "Event",
      "description": "Event Controller."
    },
    {
      "name": "Fabric",
      "description": "Fabric Controller."
    },
    {
      "name": "Policy",
      "description": "Policy Controller."
    },
    {
      "name": "ProtectedItem",
      "description": "Protected items controller."
    },
    {
      "name": "RecoveryPlan",
      "description": "Recovery plan controller."
    },
    {
      "name": "RecoveryPoint",
      "description": "Recovery points controller."
    },
    {
      "name": "ReplicationExtension",
      "description": "Replication extension controller."
    },
    {
      "name": "Tenant",
      "description": "Tenant controller."
    },
    {
      "name": "Vault",
      "description": "Vault Controller."
    },
    {
      "name": "Workflow",
      "description": "Workflow controller."
    }
  ]
}