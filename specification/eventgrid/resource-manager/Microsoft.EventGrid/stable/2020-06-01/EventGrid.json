{
  "swagger": "2.0",
  "info": {
    "version": "2020-06-01",
    "title": "EventGridManagementClient",
    "description": "Azure EventGrid Management Client"
  },
  "host": "management.azure.com",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}": {
      "get": {
        "tags": [
          "Domains"
        ],
        "summary": "Get a domain.",
        "description": "Get properties of a domain.",
        "operationId": "Domains_Get",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group within the user's subscription.",
            "required": true,
            "type": "string"
          },
          {
            "name": "domainName",
            "in": "path",
            "description": "Name of the domain.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Domain"
            }
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "x-ms-examples": {
          "Domains_Get": {
            "$ref": "./examples/Domains_Get.json"
          }
        }
      },
      "put": {
        "tags": [
          "Domains"
        ],
        "summary": "Create or update a domain.",
        "description": "Asynchronously creates or updates a new domain with the specified parameters.",
        "operationId": "Domains_CreateOrUpdate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group within the user's subscription.",
            "required": true,
            "type": "string"
          },
          {
            "name": "domainName",
            "in": "path",
            "description": "Name of the domain.",
            "required": true,
            "type": "string"
          },
          {
            "name": "domainInfo",
            "in": "body",
            "description": "Domain information.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Domain"
            }
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Domain"
            }
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "x-ms-examples": {
          "Domains_CreateOrUpdate": {
            "$ref": "./examples/Domains_CreateOrUpdate.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "delete": {
        "tags": [
          "Domains"
        ],
        "summary": "Delete a domain.",
        "description": "Delete existing domain.",
        "operationId": "Domains_Delete",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group within the user's subscription.",
            "required": true,
            "type": "string"
          },
          {
            "name": "domainName",
            "in": "path",
            "description": "Name of the domain.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "202": {
            "description": "Accepted"
          },
          "204": {
            "description": "NoContent"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 404 Not Found.\n\n * 500 Internal Server Error."
          }
        },
        "x-ms-examples": {
          "Domains_Delete": {
            "$ref": "./examples/Domains_Delete.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "patch": {
        "tags": [
          "Domains"
        ],
        "summary": "Update a domain.",
        "description": "Asynchronously updates a domain with the specified parameters.",
        "operationId": "Domains_Update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group within the user's subscription.",
            "required": true,
            "type": "string"
          },
          {
            "name": "domainName",
            "in": "path",
            "description": "Name of the domain.",
            "required": true,
            "type": "string"
          },
          {
            "name": "domainUpdateParameters",
            "in": "body",
            "description": "Domain update information.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DomainUpdateParameters"
            }
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Domain update request accepted.",
            "schema": {
              "$ref": "#/definitions/Domain"
            }
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "x-ms-examples": {
          "Domains_Update": {
            "$ref": "./examples/Domains_Update.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/domains": {
      "get": {
        "tags": [
          "Domains"
        ],
        "summary": "List domains under an Azure subscription.",
        "description": "List all the domains under an Azure subscription.",
        "operationId": "Domains_ListBySubscription",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/FilterParameter"
          },
          {
            "$ref": "#/parameters/TopParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DomainsListResult"
            }
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "x-ms-examples": {
          "Domains_ListBySubscription": {
            "$ref": "./examples/Domains_ListBySubscription.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains": {
      "get": {
        "tags": [
          "Domains"
        ],
        "summary": "List domains under a resource group.",
        "description": "List all the domains under a resource group.",
        "operationId": "Domains_ListByResourceGroup",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group within the user's subscription.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/FilterParameter"
          },
          {
            "$ref": "#/parameters/TopParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DomainsListResult"
            }
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "x-ms-examples": {
          "Domains_ListByResourceGroup": {
            "$ref": "./examples/Domains_ListByResourceGroup.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/listKeys": {
      "post": {
        "tags": [
          "Domains"
        ],
        "summary": "List keys for a domain.",
        "description": "List the two keys used to publish to a domain.",
        "operationId": "Domains_ListSharedAccessKeys",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group within the user's subscription.",
            "required": true,
            "type": "string"
          },
          {
            "name": "domainName",
            "in": "path",
            "description": "Name of the domain.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DomainSharedAccessKeys"
            }
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "x-ms-examples": {
          "Domains_ListSharedAccessKeys": {
            "$ref": "./examples/Domains_ListSharedAccessKeys.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/regenerateKey": {
      "post": {
        "tags": [
          "Domains"
        ],
        "summary": "Regenerate key for a domain.",
        "description": "Regenerate a shared access key for a domain.",
        "operationId": "Domains_RegenerateKey",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group within the user's subscription.",
            "required": true,
            "type": "string"
          },
          {
            "name": "domainName",
            "in": "path",
            "description": "Name of the domain.",
            "required": true,
            "type": "string"
          },
          {
            "name": "regenerateKeyRequest",
            "in": "body",
            "description": "Request body to regenerate key.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DomainRegenerateKeyRequest"
            }
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DomainSharedAccessKeys"
            }
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "x-ms-examples": {
          "Domains_RegenerateKey": {
            "$ref": "./examples/Domains_RegenerateKey.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/topics/{domainTopicName}": {
      "get": {
        "tags": [
          "DomainTopics"
        ],
        "summary": "Get a domain topic.",
        "description": "Get properties of a domain topic.",
        "operationId": "DomainTopics_Get",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group within the user's subscription.",
            "required": true,
            "type": "string"
          },
          {
            "name": "domainName",
            "in": "path",
            "description": "Name of the domain.",
            "required": true,
            "type": "string"
          },
          {
            "name": "domainTopicName",
            "in": "path",
            "description": "Name of the topic.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DomainTopic"
            }
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "x-ms-examples": {
          "DomainTopics_Get": {
            "$ref": "./examples/DomainTopics_Get.json"
          }
        }
      },
      "put": {
        "tags": [
          "DomainTopics"
        ],
        "summary": "Create or update a domain topic.",
        "description": "Asynchronously creates or updates a new domain topic with the specified parameters.",
        "operationId": "DomainTopics_CreateOrUpdate",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group within the user's subscription.",
            "required": true,
            "type": "string"
          },
          {
            "name": "domainName",
            "in": "path",
            "description": "Name of the domain.",
            "required": true,
            "type": "string"
          },
          {
            "name": "domainTopicName",
            "in": "path",
            "description": "Name of the domain topic.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/DomainTopic"
            }
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "x-ms-examples": {
          "DomainTopics_CreateOrUpdate": {
            "$ref": "./examples/DomainTopics_CreateOrUpdate.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "delete": {
        "tags": [
          "DomainTopics"
        ],
        "summary": "Delete a domain topic.",
        "description": "Delete existing domain topic.",
        "operationId": "DomainTopics_Delete",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group within the user's subscription.",
            "required": true,
            "type": "string"
          },
          {
            "name": "domainName",
            "in": "path",
            "description": "Name of the domain.",
            "required": true,
            "type": "string"
          },
          {
            "name": "domainTopicName",
            "in": "path",
            "description": "Name of the domain topic.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "202": {
            "description": "Accepted"
          },
          "204": {
            "description": "NoContent"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 404 Not Found.\n\n * 500 Internal Server Error."
          }
        },
        "x-ms-examples": {
          "DomainTopics_Delete": {
            "$ref": "./examples/DomainTopics_Delete.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/topics": {
      "get": {
        "tags": [
          "DomainTopics"
        ],
        "summary": "List domain topics.",
        "description": "List all the topics in a domain.",
        "operationId": "DomainTopics_ListByDomain",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group within the user's subscription.",
            "required": true,
            "type": "string"
          },
          {
            "name": "domainName",
            "in": "path",
            "description": "Domain name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/FilterParameter"
          },
          {
            "$ref": "#/parameters/TopParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DomainTopicsListResult"
            }
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "x-ms-examples": {
          "DomainTopics_ListByDomain": {
            "$ref": "./examples/DomainTopics_ListByDomain.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/{scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}": {
      "get": {
        "tags": [
          "EventSubscriptions"
        ],
        "summary": "Get an event subscription.",
        "description": "Get properties of an event subscription.",
        "operationId": "EventSubscriptions_Get",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.",
            "required": true,
            "type": "string",
            "x-ms-skip-url-encoding": true
          },
          {
            "name": "eventSubscriptionName",
            "in": "path",
            "description": "Name of the event subscription.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "x-ms-examples": {
          "EventSubscriptions_GetForSubscription": {
            "$ref": "./examples/EventSubscriptions_GetForSubscription.json"
          },
          "EventSubscriptions_GetForResourceGroup": {
            "$ref": "./examples/EventSubscriptions_GetForResourceGroup.json"
          },
          "EventSubscriptions_GetForResource": {
            "$ref": "./examples/EventSubscriptions_GetForResource.json"
          },
          "EventSubscriptions_GetForCustomTopic": {
            "$ref": "./examples/EventSubscriptions_GetForCustomTopic.json"
          }
        }
      },
      "put": {
        "tags": [
          "EventSubscriptions"
        ],
        "summary": "Create or update an event subscription.",
        "description": "Asynchronously creates a new event subscription or updates an existing event subscription based on the specified scope.",
        "operationId": "EventSubscriptions_CreateOrUpdate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The identifier of the resource to which the event subscription needs to be created or updated. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.",
            "required": true,
            "type": "string",
            "x-ms-skip-url-encoding": true
          },
          {
            "name": "eventSubscriptionName",
            "in": "path",
            "description": "Name of the event subscription. Event subscription names must be between 3 and 64 characters in length and should use alphanumeric letters only.",
            "required": true,
            "type": "string"
          },
          {
            "name": "eventSubscriptionInfo",
            "in": "body",
            "description": "Event subscription properties containing the destination and filter information.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "EventSubscription CreateOrUpdate request accepted.",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "x-ms-examples": {
          "EventSubscriptions_CreateOrUpdateForSubscription": {
            "$ref": "./examples/EventSubscriptions_CreateOrUpdateForSubscription.json"
          },
          "EventSubscriptions_CreateOrUpdateForResourceGroup": {
            "$ref": "./examples/EventSubscriptions_CreateOrUpdateForResourceGroup.json"
          },
          "EventSubscriptions_CreateOrUpdateForResource": {
            "$ref": "./examples/EventSubscriptions_CreateOrUpdateForResource.json"
          },
          "EventSubscriptions_CreateOrUpdateForCustomTopic_WebhookDestination": {
            "$ref": "./examples/EventSubscriptions_CreateOrUpdateForCustomTopic_WebhookDestination.json"
          },
          "EventSubscriptions_CreateOrUpdateForCustomTopic_EventHubDestination": {
            "$ref": "./examples/EventSubscriptions_CreateOrUpdateForCustomTopic_EventHubDestination.json"
          },
          "EventSubscriptions_CreateOrUpdateForCustomTopic_HybridConnectionDestination": {
            "$ref": "./examples/EventSubscriptions_CreateOrUpdateForCustomTopic_HybridConnectionDestination.json"
          },
          "EventSubscriptions_CreateOrUpdateForCustomTopic_StorageQueueDestination": {
            "$ref": "./examples/EventSubscriptions_CreateOrUpdateForCustomTopic_StorageQueueDestination.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "delete": {
        "tags": [
          "EventSubscriptions"
        ],
        "summary": "Delete an event subscription.",
        "description": "Delete an existing event subscription.",
        "operationId": "EventSubscriptions_Delete",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.",
            "required": true,
            "type": "string",
            "x-ms-skip-url-encoding": true
          },
          {
            "name": "eventSubscriptionName",
            "in": "path",
            "description": "Name of the event subscription.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "202": {
            "description": "Accepted"
          },
          "204": {
            "description": "NoContent"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 404 Not Found.\n\n * 500 Internal Server Error."
          }
        },
        "x-ms-examples": {
          "EventSubscriptions_DeleteForSubscription": {
            "$ref": "./examples/EventSubscriptions_DeleteForSubscription.json"
          },
          "EventSubscriptions_DeleteForResourceGroup": {
            "$ref": "./examples/EventSubscriptions_DeleteForResourceGroup.json"
          },
          "EventSubscriptions_DeleteForResource": {
            "$ref": "./examples/EventSubscriptions_DeleteForResource.json"
          },
          "EventSubscriptions_DeleteForCustomTopic": {
            "$ref": "./examples/EventSubscriptions_DeleteForCustomTopic.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "patch": {
        "tags": [
          "EventSubscriptions"
        ],
        "summary": "Update an event subscription.",
        "description": "Asynchronously updates an existing event subscription.",
        "operationId": "EventSubscriptions_Update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of existing event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.",
            "required": true,
            "type": "string",
            "x-ms-skip-url-encoding": true
          },
          {
            "name": "eventSubscriptionName",
            "in": "path",
            "description": "Name of the event subscription to be updated.",
            "required": true,
            "type": "string"
          },
          {
            "name": "eventSubscriptionUpdateParameters",
            "in": "body",
            "description": "Updated event subscription information.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EventSubscriptionUpdateParameters"
            }
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "EventSubscription update request accepted.",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "x-ms-examples": {
          "EventSubscriptions_UpdateForSubscription": {
            "$ref": "./examples/EventSubscriptions_UpdateForSubscription.json"
          },
          "EventSubscriptions_UpdateForResourceGroup": {
            "$ref": "./examples/EventSubscriptions_UpdateForResourceGroup.json"
          },
          "EventSubscriptions_UpdateForResource": {
            "$ref": "./examples/EventSubscriptions_UpdateForResource.json"
          },
          "EventSubscriptions_UpdateForCustomTopic": {
            "$ref": "./examples/EventSubscriptions_UpdateForCustomTopic.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/{scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}/getFullUrl": {
      "post": {
        "tags": [
          "EventSubscriptions"
        ],
        "summary": "Get full URL of an event subscription.",
        "description": "Get the full endpoint URL for an event subscription.",
        "operationId": "EventSubscriptions_GetFullUrl",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.",
            "required": true,
            "type": "string",
            "x-ms-skip-url-encoding": true
          },
          {
            "name": "eventSubscriptionName",
            "in": "path",
            "description": "Name of the event subscription.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EventSubscriptionFullUrl"
            }
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "x-ms-examples": {
          "EventSubscriptions_GetFullUrlForSubscription": {
            "$ref": "./examples/EventSubscriptions_GetFullUrlForSubscription.json"
          },
          "EventSubscriptions_GetFullUrlForResourceGroup": {
            "$ref": "./examples/EventSubscriptions_GetFullUrlForResourceGroup.json"
          },
          "EventSubscriptions_GetFullUrlForResource": {
            "$ref": "./examples/EventSubscriptions_GetFullUrlForResource.json"
          },
          "EventSubscriptions_GetFullUrlForCustomTopic": {
            "$ref": "./examples/EventSubscriptions_GetFullUrlForCustomTopic.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/eventSubscriptions": {
      "get": {
        "tags": [
          "EventSubscriptions"
        ],
        "summary": "Get an aggregated list of all global event subscriptions under an Azure subscription.",
        "description": "List all aggregated global event subscriptions under a specific Azure subscription.",
        "operationId": "EventSubscriptions_ListGlobalBySubscription",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/FilterParameter"
          },
          {
            "$ref": "#/parameters/TopParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EventSubscriptionsListResult"
            }
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "EventSubscriptions_ListGlobalBySubscription": {
            "$ref": "./examples/EventSubscriptions_ListGlobalBySubscription.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/topicTypes/{topicTypeName}/eventSubscriptions": {
      "get": {
        "tags": [
          "EventSubscriptions"
        ],
        "summary": "List all global event subscriptions for a topic type.",
        "description": "List all global event subscriptions under an Azure subscription for a topic type.",
        "operationId": "EventSubscriptions_ListGlobalBySubscriptionForTopicType",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "name": "topicTypeName",
            "in": "path",
            "description": "Name of the topic type.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/FilterParameter"
          },
          {
            "$ref": "#/parameters/TopParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EventSubscriptionsListResult"
            }
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "EventSubscriptions_ListGlobalBySubscriptionForTopicType": {
            "$ref": "./examples/EventSubscriptions_ListGlobalBySubscriptionForTopicType.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/eventSubscriptions": {
      "get": {
        "tags": [
          "EventSubscriptions"
        ],
        "summary": "List all global event subscriptions under an Azure subscription and resource group.",
        "description": "List all global event subscriptions under a specific Azure subscription and resource group.",
        "operationId": "EventSubscriptions_ListGlobalByResourceGroup",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group within the user's subscription.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/FilterParameter"
          },
          {
            "$ref": "#/parameters/TopParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EventSubscriptionsListResult"
            }
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "EventSubscriptions_ListGlobalByResourceGroup": {
            "$ref": "./examples/EventSubscriptions_ListGlobalByResourceGroup.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topicTypes/{topicTypeName}/eventSubscriptions": {
      "get": {
        "tags": [
          "EventSubscriptions"
        ],
        "summary": "List all global event subscriptions under a resource group for a topic type.",
        "description": "List all global event subscriptions under a resource group for a specific topic type.",
        "operationId": "EventSubscriptions_ListGlobalByResourceGroupForTopicType",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group within the user's subscription.",
            "required": true,
            "type": "string"
          },
          {
            "name": "topicTypeName",
            "in": "path",
            "description": "Name of the topic type.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/FilterParameter"
          },
          {
            "$ref": "#/parameters/TopParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EventSubscriptionsListResult"
            }
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "EventSubscriptions_ListGlobalByResourceGroupForTopicType": {
            "$ref": "./examples/EventSubscriptions_ListGlobalByResourceGroupForTopicType.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/locations/{location}/eventSubscriptions": {
      "get": {
        "tags": [
          "EventSubscriptions"
        ],
        "summary": "List all regional event subscriptions under an Azure subscription.",
        "description": "List all event subscriptions from the given location under a specific Azure subscription.",
        "operationId": "EventSubscriptions_ListRegionalBySubscription",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "name": "location",
            "in": "path",
            "description": "Name of the location.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/FilterParameter"
          },
          {
            "$ref": "#/parameters/TopParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EventSubscriptionsListResult"
            }
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "EventSubscriptions_ListRegionalBySubscription": {
            "$ref": "./examples/EventSubscriptions_ListRegionalBySubscription.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/locations/{location}/eventSubscriptions": {
      "get": {
        "tags": [
          "EventSubscriptions"
        ],
        "summary": "List all regional event subscriptions under an Azure subscription and resource group.",
        "description": "List all event subscriptions from the given location under a specific Azure subscription and resource group.",
        "operationId": "EventSubscriptions_ListRegionalByResourceGroup",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group within the user's subscription.",
            "required": true,
            "type": "string"
          },
          {
            "name": "location",
            "in": "path",
            "description": "Name of the location.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/FilterParameter"
          },
          {
            "$ref": "#/parameters/TopParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EventSubscriptionsListResult"
            }
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "EventSubscriptions_ListRegionalByResourceGroup": {
            "$ref": "./examples/EventSubscriptions_ListRegionalByResourceGroup.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/locations/{location}/topicTypes/{topicTypeName}/eventSubscriptions": {
      "get": {
        "tags": [
          "EventSubscriptions"
        ],
        "summary": "List all regional event subscriptions under an Azure subscription for a topic type.",
        "description": "List all event subscriptions from the given location under a specific Azure subscription and topic type.",
        "operationId": "EventSubscriptions_ListRegionalBySubscriptionForTopicType",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "name": "location",
            "in": "path",
            "description": "Name of the location.",
            "required": true,
            "type": "string"
          },
          {
            "name": "topicTypeName",
            "in": "path",
            "description": "Name of the topic type.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/FilterParameter"
          },
          {
            "$ref": "#/parameters/TopParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EventSubscriptionsListResult"
            }
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "EventSubscriptions_ListRegionalBySubscriptionForTopicType": {
            "$ref": "./examples/EventSubscriptions_ListRegionalBySubscriptionForTopicType.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/locations/{location}/topicTypes/{topicTypeName}/eventSubscriptions": {
      "get": {
        "tags": [
          "EventSubscriptions"
        ],
        "summary": "List all regional event subscriptions under an Azure subscription and resource group for a topic type.",
        "description": "List all event subscriptions from the given location under a specific Azure subscription and resource group and topic type.",
        "operationId": "EventSubscriptions_ListRegionalByResourceGroupForTopicType",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group within the user's subscription.",
            "required": true,
            "type": "string"
          },
          {
            "name": "location",
            "in": "path",
            "description": "Name of the location.",
            "required": true,
            "type": "string"
          },
          {
            "name": "topicTypeName",
            "in": "path",
            "description": "Name of the topic type.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/FilterParameter"
          },
          {
            "$ref": "#/parameters/TopParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EventSubscriptionsListResult"
            }
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "EventSubscriptions_ListRegionalByResourceGroupForTopicType": {
            "$ref": "./examples/EventSubscriptions_ListRegionalByResourceGroupForTopicType.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{providerNamespace}/{resourceTypeName}/{resourceName}/providers/Microsoft.EventGrid/eventSubscriptions": {
      "get": {
        "tags": [
          "EventSubscriptions"
        ],
        "summary": "List all event subscriptions for a specific topic.",
        "description": "List all event subscriptions that have been created for a specific topic.",
        "operationId": "EventSubscriptions_ListByResource",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group within the user's subscription.",
            "required": true,
            "type": "string"
          },
          {
            "name": "providerNamespace",
            "in": "path",
            "description": "Namespace of the provider of the topic.",
            "required": true,
            "type": "string"
          },
          {
            "name": "resourceTypeName",
            "in": "path",
            "description": "Name of the resource type.",
            "required": true,
            "type": "string"
          },
          {
            "name": "resourceName",
            "in": "path",
            "description": "Name of the resource.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/FilterParameter"
          },
          {
            "$ref": "#/parameters/TopParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EventSubscriptionsListResult"
            }
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "x-ms-examples": {
          "EventSubscriptions_ListByResource": {
            "$ref": "./examples/EventSubscriptions_ListByResource.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/topics/{topicName}/providers/Microsoft.EventGrid/eventSubscriptions": {
      "get": {
        "tags": [
          "EventSubscriptions"
        ],
        "summary": "List all event subscriptions for a specific domain topic.",
        "description": "List all event subscriptions that have been created for a specific domain topic.",
        "operationId": "EventSubscriptions_ListByDomainTopic",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group within the user's subscription.",
            "required": true,
            "type": "string"
          },
          {
            "name": "domainName",
            "in": "path",
            "description": "Name of the top level domain.",
            "required": true,
            "type": "string"
          },
          {
            "name": "topicName",
            "in": "path",
            "description": "Name of the domain topic.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/FilterParameter"
          },
          {
            "$ref": "#/parameters/TopParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EventSubscriptionsListResult"
            }
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "x-ms-examples": {
          "EventSubscriptions_ListByDomainTopic": {
            "$ref": "./examples/EventSubscriptions_ListByDomainTopic.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/providers/Microsoft.EventGrid/operations": {
      "get": {
        "tags": [
          "Operations"
        ],
        "summary": "List available operations.",
        "description": "List the available operations supported by the Microsoft.EventGrid resource provider.",
        "operationId": "Operations_List",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OperationsListResult"
            }
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "x-ms-pageable": {
          "nextLinkName": null
        },
        "x-ms-examples": {
          "Operations_List": {
            "$ref": "./examples/Operations_List.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}": {
      "get": {
        "tags": [
          "Topics"
        ],
        "summary": "Get a topic.",
        "description": "Get properties of a topic.",
        "operationId": "Topics_Get",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group within the user's subscription.",
            "required": true,
            "type": "string"
          },
          {
            "name": "topicName",
            "in": "path",
            "description": "Name of the topic.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Topic"
            }
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "x-ms-examples": {
          "Topics_Get": {
            "$ref": "./examples/Topics_Get.json"
          }
        }
      },
      "put": {
        "tags": [
          "Topics"
        ],
        "summary": "Create a topic.",
        "description": "Asynchronously creates a new topic with the specified parameters.",
        "operationId": "Topics_CreateOrUpdate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group within the user's subscription.",
            "required": true,
            "type": "string"
          },
          {
            "name": "topicName",
            "in": "path",
            "description": "Name of the topic.",
            "required": true,
            "type": "string"
          },
          {
            "name": "topicInfo",
            "in": "body",
            "description": "Topic information.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Topic"
            }
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Topic"
            }
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "x-ms-examples": {
          "Topics_CreateOrUpdate": {
            "$ref": "./examples/Topics_CreateOrUpdate.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "delete": {
        "tags": [
          "Topics"
        ],
        "summary": "Delete a topic.",
        "description": "Delete existing topic.",
        "operationId": "Topics_Delete",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group within the user's subscription.",
            "required": true,
            "type": "string"
          },
          {
            "name": "topicName",
            "in": "path",
            "description": "Name of the topic.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "204": {
            "description": "NoContent"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 404 Not Found.\n\n * 500 Internal Server Error."
          }
        },
        "x-ms-examples": {
          "Topics_Delete": {
            "$ref": "./examples/Topics_Delete.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "patch": {
        "tags": [
          "Topics"
        ],
        "summary": "Update a topic.",
        "description": "Asynchronously updates a topic with the specified parameters.",
        "operationId": "Topics_Update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group within the user's subscription.",
            "required": true,
            "type": "string"
          },
          {
            "name": "topicName",
            "in": "path",
            "description": "Name of the topic.",
            "required": true,
            "type": "string"
          },
          {
            "name": "topicUpdateParameters",
            "in": "body",
            "description": "Topic update information.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TopicUpdateParameters"
            }
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Topic update request accepted.",
            "schema": {
              "$ref": "#/definitions/Topic"
            }
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "x-ms-examples": {
          "Topics_Update": {
            "$ref": "./examples/Topics_Update.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/topics": {
      "get": {
        "tags": [
          "Topics"
        ],
        "summary": "List topics under an Azure subscription.",
        "description": "List all the topics under an Azure subscription.",
        "operationId": "Topics_ListBySubscription",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/FilterParameter"
          },
          {
            "$ref": "#/parameters/TopParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TopicsListResult"
            }
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "Topics_ListBySubscription": {
            "$ref": "./examples/Topics_ListBySubscription.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics": {
      "get": {
        "tags": [
          "Topics"
        ],
        "summary": "List topics under a resource group.",
        "description": "List all the topics under a resource group.",
        "operationId": "Topics_ListByResourceGroup",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group within the user's subscription.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/FilterParameter"
          },
          {
            "$ref": "#/parameters/TopParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TopicsListResult"
            }
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "Topics_ListByResourceGroup": {
            "$ref": "./examples/Topics_ListByResourceGroup.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}/listKeys": {
      "post": {
        "tags": [
          "Topics"
        ],
        "summary": "List keys for a topic.",
        "description": "List the two keys used to publish to a topic.",
        "operationId": "Topics_ListSharedAccessKeys",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group within the user's subscription.",
            "required": true,
            "type": "string"
          },
          {
            "name": "topicName",
            "in": "path",
            "description": "Name of the topic.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TopicSharedAccessKeys"
            }
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "x-ms-examples": {
          "Topics_ListSharedAccessKeys": {
            "$ref": "./examples/Topics_ListSharedAccessKeys.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}/regenerateKey": {
      "post": {
        "tags": [
          "Topics"
        ],
        "summary": "Regenerate key for a topic.",
        "description": "Regenerate a shared access key for a topic.",
        "operationId": "Topics_RegenerateKey",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group within the user's subscription.",
            "required": true,
            "type": "string"
          },
          {
            "name": "topicName",
            "in": "path",
            "description": "Name of the topic.",
            "required": true,
            "type": "string"
          },
          {
            "name": "regenerateKeyRequest",
            "in": "body",
            "description": "Request body to regenerate key.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TopicRegenerateKeyRequest"
            }
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TopicSharedAccessKeys"
            }
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "x-ms-examples": {
          "Topics_RegenerateKey": {
            "$ref": "./examples/Topics_RegenerateKey.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/{parentType}/{parentName}/privateEndpointConnections/{privateEndpointConnectionName}": {
      "get": {
        "tags": [
          "PrivateEndpointConnections"
        ],
        "summary": "Get a specific private endpoint connection.",
        "description": "Get a specific private endpoint connection under a topic or domain.",
        "operationId": "PrivateEndpointConnections_Get",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group within the user's subscription.",
            "required": true,
            "type": "string"
          },
          {
            "name": "parentType",
            "in": "path",
            "description": "The type of the parent resource. This can be either \\'topics\\' or \\'domains\\'.",
            "required": true,
            "type": "string",
            "enum": [
              "topics",
              "domains"
            ]
          },
          {
            "name": "parentName",
            "in": "path",
            "description": "The name of the parent resource (namely, either, the topic name or domain name).",
            "required": true,
            "type": "string"
          },
          {
            "name": "privateEndpointConnectionName",
            "in": "path",
            "description": "The name of the private endpoint connection connection.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PrivateEndpointConnection"
            }
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "x-ms-examples": {
          "PrivateEndpointConnections_Get": {
            "$ref": "./examples/PrivateEndpointConnections_Get.json"
          }
        }
      },
      "put": {
        "tags": [
          "PrivateEndpointConnections"
        ],
        "summary": "Update a specific private endpoint connection.",
        "description": "Update a specific private endpoint connection under a topic or domain.",
        "operationId": "PrivateEndpointConnections_Update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group within the user's subscription.",
            "required": true,
            "type": "string"
          },
          {
            "name": "parentType",
            "in": "path",
            "description": "The type of the parent resource. This can be either \\'topics\\' or \\'domains\\'.",
            "required": true,
            "type": "string",
            "enum": [
              "topics",
              "domains"
            ]
          },
          {
            "name": "parentName",
            "in": "path",
            "description": "The name of the parent resource (namely, either, the topic name or domain name).",
            "required": true,
            "type": "string"
          },
          {
            "name": "privateEndpointConnectionName",
            "in": "path",
            "description": "The name of the private endpoint connection connection.",
            "required": true,
            "type": "string"
          },
          {
            "name": "privateEndpointConnection",
            "in": "body",
            "description": "The private endpoint connection object to update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PrivateEndpointConnection"
            }
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PrivateEndpointConnection"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/PrivateEndpointConnection"
            }
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "x-ms-examples": {
          "PrivateEndpointConnections_Update": {
            "$ref": "./examples/PrivateEndpointConnections_Update.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "delete": {
        "tags": [
          "PrivateEndpointConnections"
        ],
        "summary": "Delete a specific private endpoint connection.",
        "description": "Delete a specific private endpoint connection under a topic or domain.",
        "operationId": "PrivateEndpointConnections_Delete",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group within the user's subscription.",
            "required": true,
            "type": "string"
          },
          {
            "name": "parentType",
            "in": "path",
            "description": "The type of the parent resource. This can be either \\'topics\\' or \\'domains\\'.",
            "required": true,
            "type": "string",
            "enum": [
              "topics",
              "domains"
            ]
          },
          {
            "name": "parentName",
            "in": "path",
            "description": "The name of the parent resource (namely, either, the topic name or domain name).",
            "required": true,
            "type": "string"
          },
          {
            "name": "privateEndpointConnectionName",
            "in": "path",
            "description": "The name of the private endpoint connection connection.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "204": {
            "description": "NoContent"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 404 Not Found.\n\n * 500 Internal Server Error."
          }
        },
        "x-ms-examples": {
          "PrivateEndpointConnections_Delete": {
            "$ref": "./examples/PrivateEndpointConnections_Delete.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/{parentType}/{parentName}/privateEndpointConnections": {
      "get": {
        "tags": [
          "PrivateEndpointConnections"
        ],
        "summary": "Lists all private endpoint connections under a resource.",
        "description": "Get all private endpoint connections under a topic or domain.",
        "operationId": "PrivateEndpointConnections_ListByResource",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group within the user's subscription.",
            "required": true,
            "type": "string"
          },
          {
            "name": "parentType",
            "in": "path",
            "description": "The type of the parent resource. This can be either \\'topics\\' or \\'domains\\'.",
            "required": true,
            "type": "string",
            "enum": [
              "topics",
              "domains"
            ]
          },
          {
            "name": "parentName",
            "in": "path",
            "description": "The name of the parent resource (namely, either, the topic name or domain name).",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/FilterParameter"
          },
          {
            "$ref": "#/parameters/TopParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PrivateEndpointConnectionListResult"
            }
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "x-ms-examples": {
          "PrivateEndpointConnections_ListByResource": {
            "$ref": "./examples/PrivateEndpointConnections_ListByResource.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/{parentType}/{parentName}/privateLinkResources/{privateLinkResourceName}": {
      "get": {
        "tags": [
          "PrivateLinkResources"
        ],
        "summary": "Get a private link resource.",
        "description": "Get properties of a private link resource.",
        "operationId": "PrivateLinkResources_Get",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group within the user's subscription.",
            "required": true,
            "type": "string"
          },
          {
            "name": "parentType",
            "in": "path",
            "description": "The type of the parent resource. This can be either \\'topics\\' or \\'domains\\'.",
            "required": true,
            "type": "string"
          },
          {
            "name": "parentName",
            "in": "path",
            "description": "The name of the parent resource (namely, either, the topic name or domain name).",
            "required": true,
            "type": "string"
          },
          {
            "name": "privateLinkResourceName",
            "in": "path",
            "description": "The name of private link resource.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PrivateLinkResource"
            }
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "x-ms-examples": {
          "PrivateLinkResources_Get": {
            "$ref": "./examples/PrivateLinkResources_Get.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/{parentType}/{parentName}/privateLinkResources": {
      "get": {
        "tags": [
          "PrivateLinkResources"
        ],
        "summary": "List private link resources under specific topic or domain.",
        "description": "List all the private link resources under a topic or domain.",
        "operationId": "PrivateLinkResources_ListByResource",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group within the user's subscription.",
            "required": true,
            "type": "string"
          },
          {
            "name": "parentType",
            "in": "path",
            "description": "The type of the parent resource. This can be either \\'topics\\' or \\'domains\\'.",
            "required": true,
            "type": "string"
          },
          {
            "name": "parentName",
            "in": "path",
            "description": "The name of the parent resource (namely, either, the topic name or domain name).",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/FilterParameter"
          },
          {
            "$ref": "#/parameters/TopParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PrivateLinkResourcesListResult"
            }
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "x-ms-examples": {
          "PrivateLinkResources_ListByResource": {
            "$ref": "./examples/PrivateLinkResources_ListByResource.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{providerNamespace}/{resourceTypeName}/{resourceName}/providers/Microsoft.EventGrid/eventTypes": {
      "get": {
        "tags": [
          "Topics"
        ],
        "summary": "List topic event types.",
        "description": "List event types for a topic.",
        "operationId": "Topics_ListEventTypes",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group within the user's subscription.",
            "required": true,
            "type": "string"
          },
          {
            "name": "providerNamespace",
            "in": "path",
            "description": "Namespace of the provider of the topic.",
            "required": true,
            "type": "string"
          },
          {
            "name": "resourceTypeName",
            "in": "path",
            "description": "Name of the topic type.",
            "required": true,
            "type": "string"
          },
          {
            "name": "resourceName",
            "in": "path",
            "description": "Name of the topic.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EventTypesListResult"
            }
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "x-ms-examples": {
          "Topics_ListEventTypes": {
            "$ref": "./examples/Topics_ListEventTypes.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": null
        }
      }
    },
    "/providers/Microsoft.EventGrid/topicTypes": {
      "get": {
        "tags": [
          "TopicTypes"
        ],
        "summary": "List topic types.",
        "description": "List all registered topic types.",
        "operationId": "TopicTypes_List",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TopicTypesListResult"
            }
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 404 Not Found.\n\n * 500 Internal Server Error."
          }
        },
        "x-ms-pageable": {
          "nextLinkName": null
        },
        "x-ms-examples": {
          "TopicTypes_List": {
            "$ref": "./examples/TopicTypes_List.json"
          }
        }
      }
    },
    "/providers/Microsoft.EventGrid/topicTypes/{topicTypeName}": {
      "get": {
        "tags": [
          "TopicTypes"
        ],
        "summary": "Get a topic type.",
        "description": "Get information about a topic type.",
        "operationId": "TopicTypes_Get",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "topicTypeName",
            "in": "path",
            "description": "Name of the topic type.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TopicTypeInfo"
            }
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 404 Not Found.\n\n * 500 Internal Server Error."
          }
        },
        "x-ms-examples": {
          "TopicTypes_Get": {
            "$ref": "./examples/TopicTypes_Get.json"
          }
        }
      }
    },
    "/providers/Microsoft.EventGrid/topicTypes/{topicTypeName}/eventTypes": {
      "get": {
        "tags": [
          "TopicTypes"
        ],
        "summary": "List event types.",
        "description": "List event types for a topic type.",
        "operationId": "TopicTypes_ListEventTypes",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "topicTypeName",
            "in": "path",
            "description": "Name of the topic type.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EventTypesListResult"
            }
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 404 Not Found.\n\n * 500 Internal Server Error."
          }
        },
        "x-ms-pageable": {
          "nextLinkName": null
        },
        "x-ms-examples": {
          "TopicTypes_ListEventTypes": {
            "$ref": "./examples/TopicTypes_ListEventTypes.json"
          }
        }
      }
    }
  },
  "definitions": {
    "DomainProperties": {
      "description": "Properties of the Domain.",
      "type": "object",
      "properties": {
        "privateEndpointConnections": {
          "description": "List of private endpoint connections.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PrivateEndpointConnection"
          },
          "readOnly": true
        },
        "provisioningState": {
          "description": "Provisioning state of the domain.",
          "enum": [
            "Creating",
            "Updating",
            "Deleting",
            "Succeeded",
            "Canceled",
            "Failed"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "DomainProvisioningState",
            "modelAsString": true
          }
        },
        "endpoint": {
          "description": "Endpoint for the domain.",
          "type": "string",
          "readOnly": true
        },
        "inputSchema": {
          "description": "This determines the format that Event Grid should expect for incoming events published to the domain.",
          "enum": [
            "EventGridSchema",
            "CustomEventSchema",
            "CloudEventSchemaV1_0"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "InputSchema",
            "modelAsString": true
          },
          "default": "EventGridSchema"
        },
        "inputSchemaMapping": {
          "$ref": "#/definitions/InputSchemaMapping",
          "description": "Information about the InputSchemaMapping which specified the info about mapping event payload."
        },
        "metricResourceId": {
          "description": "Metric resource id for the domain.",
          "type": "string",
          "readOnly": true
        },
        "publicNetworkAccess": {
          "description": "This determines if traffic is allowed over public network. By default it is enabled. \r\nYou can further restrict to specific IPs by configuring <seealso cref=\"P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.DomainProperties.InboundIpRules\" />",
          "enum": [
            "Enabled",
            "Disabled"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "PublicNetworkAccess",
            "modelAsString": true
          },
          "default": "Enabled"
        },
        "inboundIpRules": {
          "description": "This can be used to restrict traffic from specific IPs instead of all IPs. Note: These are considered only if PublicNetworkAccess is enabled.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InboundIpRule"
          }
        }
      }
    },
    "PrivateEndpointConnection": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "properties": {
        "properties": {
          "$ref": "#/definitions/PrivateEndpointConnectionProperties",
          "description": "Properties of the PrivateEndpointConnection.",
          "x-ms-client-flatten": true
        }
      }
    },
    "InboundIpRule": {
      "type": "object",
      "properties": {
        "ipMask": {
          "description": "IP Address in CIDR notation e.g., 10.0.0.0/8.",
          "type": "string"
        },
        "action": {
          "description": "Action to perform based on the match or no match of the IpMask.",
          "enum": [
            "Allow"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "IpActionType",
            "modelAsString": true
          }
        }
      }
    },
    "Resource": {
      "description": "Definition of a Resource.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Fully qualified identifier of the resource.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "Name of the resource.",
          "type": "string",
          "readOnly": true
        },
        "type": {
          "description": "Type of the resource.",
          "type": "string",
          "readOnly": true
        }
      },
      "x-ms-azure-resource": true
    },
    "PrivateEndpointConnectionProperties": {
      "description": "Properties of the private endpoint connection resource.",
      "type": "object",
      "properties": {
        "privateEndpoint": {
          "$ref": "#/definitions/PrivateEndpoint",
          "description": "The Private Endpoint resource for this Connection."
        },
        "groupIds": {
          "description": "GroupIds from the private link service resource.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "privateLinkServiceConnectionState": {
          "$ref": "#/definitions/ConnectionState",
          "description": "Details about the state of the connection."
        },
        "provisioningState": {
          "description": "Provisioning state of the Private Endpoint Connection.",
          "enum": [
            "Creating",
            "Updating",
            "Deleting",
            "Succeeded",
            "Canceled",
            "Failed"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ResourceProvisioningState",
            "modelAsString": true
          }
        }
      }
    },
    "PrivateEndpoint": {
      "description": "PrivateEndpoint information.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The ARM identifier for Private Endpoint.",
          "type": "string"
        }
      }
    },
    "ConnectionState": {
      "description": "ConnectionState information.",
      "type": "object",
      "properties": {
        "status": {
          "description": "Status of the connection.",
          "enum": [
            "Pending",
            "Approved",
            "Rejected",
            "Disconnected"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "PersistedConnectionStatus",
            "modelAsString": true
          }
        },
        "description": {
          "description": "Description of the connection state.",
          "type": "string"
        },
        "actionsRequired": {
          "description": "Actions required (if any).",
          "type": "string"
        }
      }
    },
    "JsonInputSchemaMappingProperties": {
      "description": "This can be used to map properties of a source schema (or default values, for certain supported properties) to properties of the EventGridEvent schema.",
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/JsonField",
          "description": "The mapping information for the Id property of the Event Grid Event."
        },
        "topic": {
          "$ref": "#/definitions/JsonField",
          "description": "The mapping information for the Topic property of the Event Grid Event."
        },
        "eventTime": {
          "$ref": "#/definitions/JsonField",
          "description": "The mapping information for the EventTime property of the Event Grid Event."
        },
        "eventType": {
          "$ref": "#/definitions/JsonFieldWithDefault",
          "description": "The mapping information for the EventType property of the Event Grid Event."
        },
        "subject": {
          "$ref": "#/definitions/JsonFieldWithDefault",
          "description": "The mapping information for the Subject property of the Event Grid Event."
        },
        "dataVersion": {
          "$ref": "#/definitions/JsonFieldWithDefault",
          "description": "The mapping information for the DataVersion property of the Event Grid Event."
        }
      }
    },
    "JsonField": {
      "description": "This is used to express the source of an input schema mapping for a single target field in the Event Grid Event schema. This is currently used in the mappings for the 'id', 'topic' and 'eventtime' properties. This represents a field in the input event schema.",
      "type": "object",
      "properties": {
        "sourceField": {
          "description": "Name of a field in the input event schema that's to be used as the source of a mapping.",
          "type": "string"
        }
      }
    },
    "JsonFieldWithDefault": {
      "description": "This is used to express the source of an input schema mapping for a single target field\r\nin the Event Grid Event schema. This is currently used in the mappings for the 'subject',\r\n'eventtype' and 'dataversion' properties. This represents a field in the input event schema\r\nalong with a default value to be used, and at least one of these two properties should be provided.",
      "type": "object",
      "properties": {
        "sourceField": {
          "description": "Name of a field in the input event schema that's to be used as the source of a mapping.",
          "type": "string"
        },
        "defaultValue": {
          "description": "The default value to be used for mapping when a SourceField is not provided or if there's no property with the specified name in the published JSON event payload.",
          "type": "string"
        }
      }
    },
    "JsonInputSchemaMapping": {
      "description": "This enables publishing to Event Grid using a custom input schema. This can be used to map properties from a custom input JSON schema to the Event Grid event schema.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/InputSchemaMapping"
        }
      ],
      "properties": {
        "properties": {
          "$ref": "#/definitions/JsonInputSchemaMappingProperties",
          "description": "JSON Properties of the input schema mapping",
          "x-ms-client-flatten": true
        }
      },
      "x-ms-discriminator-value": "Json"
    },
    "InputSchemaMapping": {
      "description": "By default, Event Grid expects events to be in the Event Grid event schema. Specifying an input schema mapping enables publishing to Event Grid using a custom input schema. Currently, the only supported type of InputSchemaMapping is 'JsonInputSchemaMapping'.",
      "required": [
        "inputSchemaMappingType"
      ],
      "type": "object",
      "properties": {
        "inputSchemaMappingType": {
          "description": "Type of the custom mapping",
          "enum": [
            "Json"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "InputSchemaMappingType",
            "modelAsString": true
          }
        }
      },
      "discriminator": "inputSchemaMappingType"
    },
    "TrackedResource": {
      "description": "Definition of a Tracked Resource.",
      "required": [
        "location"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "properties": {
        "location": {
          "description": "Location of the resource.",
          "type": "string",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "tags": {
          "description": "Tags of the resource.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "Domain": {
      "description": "EventGrid Domain.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TrackedResource"
        }
      ],
      "properties": {
        "properties": {
          "$ref": "#/definitions/DomainProperties",
          "description": "Properties of the domain.",
          "x-ms-client-flatten": true
        },
        "systemData": {
          "description": "The system metadata relating to Domain resource.",
          "type": "object",
          "readOnly": true,
          "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/systemData"
        }
      }
    },
    "DomainUpdateParameters": {
      "description": "Properties of the Domain update.",
      "type": "object",
      "properties": {
        "tags": {
          "description": "Tags of the domains resource.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "$ref": "#/definitions/DomainUpdateParameterProperties",
          "description": "Properties of the resource.",
          "x-ms-client-flatten": true
        }
      }
    },
    "DomainUpdateParameterProperties": {
      "description": "Information of domain update parameter properties.",
      "type": "object",
      "properties": {
        "publicNetworkAccess": {
          "description": "This determines if traffic is allowed over public network. By default it is enabled. \r\nYou can further restrict to specific IPs by configuring <seealso cref=\"P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.DomainUpdateParameterProperties.InboundIpRules\" />",
          "enum": [
            "Enabled",
            "Disabled"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "PublicNetworkAccess",
            "modelAsString": true
          },
          "default": "Enabled"
        },
        "inboundIpRules": {
          "description": "This can be used to restrict traffic from specific IPs instead of all IPs. Note: These are considered only if PublicNetworkAccess is enabled.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InboundIpRule"
          }
        }
      }
    },
    "DomainsListResult": {
      "description": "Result of the List Domains operation.",
      "type": "object",
      "properties": {
        "value": {
          "description": "A collection of Domains.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Domain"
          }
        },
        "nextLink": {
          "description": "A link for the next page of domains.",
          "type": "string"
        }
      }
    },
    "DomainSharedAccessKeys": {
      "description": "Shared access keys of the Domain.",
      "type": "object",
      "properties": {
        "key1": {
          "description": "Shared access key1 for the domain.",
          "type": "string"
        },
        "key2": {
          "description": "Shared access key2 for the domain.",
          "type": "string"
        }
      }
    },
    "DomainRegenerateKeyRequest": {
      "description": "Domain regenerate share access key request.",
      "required": [
        "keyName"
      ],
      "type": "object",
      "properties": {
        "keyName": {
          "description": "Key name to regenerate key1 or key2.",
          "type": "string"
        }
      }
    },
    "DomainTopicProperties": {
      "description": "Properties of the Domain Topic.",
      "type": "object",
      "readOnly": true,
      "properties": {
        "provisioningState": {
          "description": "Provisioning state of the domain topic.",
          "enum": [
            "Creating",
            "Updating",
            "Deleting",
            "Succeeded",
            "Canceled",
            "Failed"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "DomainTopicProvisioningState",
            "modelAsString": true
          }
        }
      }
    },
    "DomainTopic": {
      "description": "Domain Topic.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "properties": {
        "properties": {
          "$ref": "#/definitions/DomainTopicProperties",
          "description": "Properties of the Domain Topic.",
          "readOnly": true,
          "x-ms-client-flatten": true
        },
        "systemData": {
          "description": "The system metadata relating to Domain Topic resource.",
          "type": "object",
          "readOnly": true,
          "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/systemData"
        }
      }
    },
    "DomainTopicsListResult": {
      "description": "Result of the List Domain Topics operation.",
      "type": "object",
      "properties": {
        "value": {
          "description": "A collection of Domain Topics.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DomainTopic"
          }
        },
        "nextLink": {
          "description": "A link for the next page of domain topics.",
          "type": "string"
        }
      }
    },
    "EventSubscriptionProperties": {
      "description": "Properties of the Event Subscription.",
      "type": "object",
      "properties": {
        "topic": {
          "description": "Name of the topic of the event subscription.",
          "type": "string",
          "readOnly": true
        },
        "provisioningState": {
          "description": "Provisioning state of the event subscription.",
          "enum": [
            "Creating",
            "Updating",
            "Deleting",
            "Succeeded",
            "Canceled",
            "Failed",
            "AwaitingManualAction"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "EventSubscriptionProvisioningState",
            "modelAsString": true
          }
        },
        "destination": {
          "$ref": "#/definitions/EventSubscriptionDestination",
          "description": "Information about the destination where events have to be delivered for the event subscription."
        },
        "filter": {
          "$ref": "#/definitions/EventSubscriptionFilter",
          "description": "Information about the filter for the event subscription."
        },
        "labels": {
          "description": "List of user defined labels.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "expirationTimeUtc": {
          "format": "date-time",
          "description": "Expiration time of the event subscription.",
          "type": "string"
        },
        "eventDeliverySchema": {
          "description": "The event delivery schema for the event subscription.",
          "default": "EventGridSchema",
          "enum": [
            "EventGridSchema",
            "CustomInputSchema",
            "CloudEventSchemaV1_0"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "EventDeliverySchema",
            "modelAsString": true
          }
        },
        "retryPolicy": {
          "$ref": "#/definitions/RetryPolicy",
          "description": "The retry policy for events. This can be used to configure maximum number of delivery attempts and time to live for events."
        },
        "deadLetterDestination": {
          "$ref": "#/definitions/DeadLetterDestination",
          "description": "The DeadLetter destination of the event subscription."
        }
      }
    },
    "EventSubscriptionFilter": {
      "description": "Filter for the Event Subscription.",
      "type": "object",
      "properties": {
        "subjectBeginsWith": {
          "description": "An optional string to filter events for an event subscription based on a resource path prefix.\r\nThe format of this depends on the publisher of the events.\r\nWildcard characters are not supported in this path.",
          "type": "string"
        },
        "subjectEndsWith": {
          "description": "An optional string to filter events for an event subscription based on a resource path suffix.\r\nWildcard characters are not supported in this path.",
          "type": "string"
        },
        "includedEventTypes": {
          "description": "A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "isSubjectCaseSensitive": {
          "description": "Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter\r\nshould be compared in a case sensitive manner.",
          "default": false,
          "type": "boolean"
        },
        "advancedFilters": {
          "description": "An array of advanced filters that are used for filtering event subscriptions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AdvancedFilter"
          }
        }
      }
    },
    "RetryPolicy": {
      "description": "Information about the retry policy for an event subscription.",
      "type": "object",
      "properties": {
        "maxDeliveryAttempts": {
          "format": "int32",
          "description": "Maximum number of delivery retry attempts for events.",
          "default": 30,
          "type": "integer"
        },
        "eventTimeToLiveInMinutes": {
          "format": "int32",
          "description": "Time To Live (in minutes) for events.",
          "default": 1440,
          "type": "integer"
        }
      }
    },
    "WebHookEventSubscriptionDestinationProperties": {
      "description": "Information about the webhook destination properties for an event subscription.",
      "type": "object",
      "properties": {
        "endpointUrl": {
          "description": "The URL that represents the endpoint of the destination of an event subscription.",
          "type": "string",
          "x-ms-secret": true
        },
        "endpointBaseUrl": {
          "description": "The base URL that represents the endpoint of the destination of an event subscription.",
          "type": "string",
          "readOnly": true
        },
        "maxEventsPerBatch": {
          "format": "int32",
          "description": "Maximum number of events per batch.",
          "default": 1,
          "type": "integer"
        },
        "preferredBatchSizeInKilobytes": {
          "format": "int32",
          "description": "Preferred batch size in Kilobytes.",
          "default": 64,
          "type": "integer"
        },
        "azureActiveDirectoryTenantId": {
          "description": "The Azure Active Directory Tenant ID to get the access token that will be included as the bearer token in delivery requests.",
          "type": "string"
        },
        "azureActiveDirectoryApplicationIdOrUri": {
          "description": "The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests.",
          "type": "string"
        }
      }
    },
    "StorageBlobDeadLetterDestinationProperties": {
      "description": "Properties of the storage blob based dead letter destination.",
      "type": "object",
      "properties": {
        "resourceId": {
          "description": "The Azure Resource ID of the storage account that is the destination of the deadletter events",
          "type": "string"
        },
        "blobContainerName": {
          "description": "The name of the Storage blob container that is the destination of the deadletter events",
          "type": "string"
        }
      }
    },
    "NumberInAdvancedFilter": {
      "description": "NumberIn Advanced Filter.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AdvancedFilter"
        }
      ],
      "properties": {
        "values": {
          "description": "The set of filter values.",
          "type": "array",
          "items": {
            "format": "double",
            "type": "number"
          }
        }
      },
      "x-ms-discriminator-value": "NumberIn"
    },
    "StorageBlobDeadLetterDestination": {
      "description": "Information about the storage blob based dead letter destination.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/DeadLetterDestination"
        }
      ],
      "properties": {
        "properties": {
          "$ref": "#/definitions/StorageBlobDeadLetterDestinationProperties",
          "description": "The properties of the Storage Blob based deadletter destination",
          "x-ms-client-flatten": true
        }
      },
      "x-ms-discriminator-value": "StorageBlob"
    },
    "NumberNotInAdvancedFilter": {
      "description": "NumberNotIn Advanced Filter.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AdvancedFilter"
        }
      ],
      "properties": {
        "values": {
          "description": "The set of filter values.",
          "type": "array",
          "items": {
            "format": "double",
            "type": "number"
          }
        }
      },
      "x-ms-discriminator-value": "NumberNotIn"
    },
    "NumberLessThanAdvancedFilter": {
      "description": "NumberLessThan Advanced Filter.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AdvancedFilter"
        }
      ],
      "properties": {
        "value": {
          "format": "double",
          "description": "The filter value.",
          "type": "number"
        }
      },
      "x-ms-discriminator-value": "NumberLessThan"
    },
    "NumberGreaterThanAdvancedFilter": {
      "description": "NumberGreaterThan Advanced Filter.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AdvancedFilter"
        }
      ],
      "properties": {
        "value": {
          "format": "double",
          "description": "The filter value.",
          "type": "number"
        }
      },
      "x-ms-discriminator-value": "NumberGreaterThan"
    },
    "NumberLessThanOrEqualsAdvancedFilter": {
      "description": "NumberLessThanOrEquals Advanced Filter.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AdvancedFilter"
        }
      ],
      "properties": {
        "value": {
          "format": "double",
          "description": "The filter value.",
          "type": "number"
        }
      },
      "x-ms-discriminator-value": "NumberLessThanOrEquals"
    },
    "NumberGreaterThanOrEqualsAdvancedFilter": {
      "description": "NumberGreaterThanOrEquals Advanced Filter.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AdvancedFilter"
        }
      ],
      "properties": {
        "value": {
          "format": "double",
          "description": "The filter value.",
          "type": "number"
        }
      },
      "x-ms-discriminator-value": "NumberGreaterThanOrEquals"
    },
    "BoolEqualsAdvancedFilter": {
      "description": "BoolEquals Advanced Filter.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AdvancedFilter"
        }
      ],
      "properties": {
        "value": {
          "description": "The boolean filter value.",
          "type": "boolean"
        }
      },
      "x-ms-discriminator-value": "BoolEquals"
    },
    "StringInAdvancedFilter": {
      "description": "StringIn Advanced Filter.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AdvancedFilter"
        }
      ],
      "properties": {
        "values": {
          "description": "The set of filter values.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-ms-discriminator-value": "StringIn"
    },
    "StringNotInAdvancedFilter": {
      "description": "StringNotIn Advanced Filter.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AdvancedFilter"
        }
      ],
      "properties": {
        "values": {
          "description": "The set of filter values.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-ms-discriminator-value": "StringNotIn"
    },
    "StringBeginsWithAdvancedFilter": {
      "description": "StringBeginsWith Advanced Filter.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AdvancedFilter"
        }
      ],
      "properties": {
        "values": {
          "description": "The set of filter values.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-ms-discriminator-value": "StringBeginsWith"
    },
    "StringEndsWithAdvancedFilter": {
      "description": "StringEndsWith Advanced Filter.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AdvancedFilter"
        }
      ],
      "properties": {
        "values": {
          "description": "The set of filter values.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-ms-discriminator-value": "StringEndsWith"
    },
    "StringContainsAdvancedFilter": {
      "description": "StringContains Advanced Filter.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AdvancedFilter"
        }
      ],
      "properties": {
        "values": {
          "description": "The set of filter values.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-ms-discriminator-value": "StringContains"
    },
    "AdvancedFilter": {
      "description": "This is the base type that represents an advanced filter. To configure an advanced filter, do not directly instantiate an object of this class. Instead, instantiate an object of a derived class such as BoolEqualsAdvancedFilter, NumberInAdvancedFilter, StringEqualsAdvancedFilter etc. depending on the type of the key based on which you want to filter.",
      "required": [
        "operatorType"
      ],
      "type": "object",
      "properties": {
        "operatorType": {
          "description": "The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.",
          "enum": [
            "NumberIn",
            "NumberNotIn",
            "NumberLessThan",
            "NumberGreaterThan",
            "NumberLessThanOrEquals",
            "NumberGreaterThanOrEquals",
            "BoolEquals",
            "StringIn",
            "StringNotIn",
            "StringBeginsWith",
            "StringEndsWith",
            "StringContains"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "AdvancedFilterOperatorType",
            "modelAsString": true
          }
        },
        "key": {
          "description": "The field/property in the event based on which you want to filter.",
          "type": "string"
        }
      },
      "discriminator": "operatorType"
    },
    "WebHookEventSubscriptionDestination": {
      "description": "Information about the webhook destination for an event subscription.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/EventSubscriptionDestination"
        }
      ],
      "properties": {
        "properties": {
          "$ref": "#/definitions/WebHookEventSubscriptionDestinationProperties",
          "description": "WebHook Properties of the event subscription destination.",
          "x-ms-client-flatten": true
        }
      },
      "x-ms-discriminator-value": "WebHook"
    },
    "DeadLetterDestination": {
      "description": "Information about the dead letter destination for an event subscription. To configure a deadletter destination, do not directly instantiate an object of this class. Instead, instantiate an object of a derived class. Currently, StorageBlobDeadLetterDestination is the only class that derives from this class.",
      "type": "object",
      "required": [
        "endpointType"
      ],
      "properties": {
        "endpointType": {
          "description": "Type of the endpoint for the dead letter destination",
          "enum": [
            "StorageBlob"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "DeadLetterEndPointType",
            "modelAsString": true
          }
        }
      },
      "discriminator": "endpointType"
    },
    "EventHubEventSubscriptionDestinationProperties": {
      "description": "The properties for a event hub destination.",
      "type": "object",
      "properties": {
        "resourceId": {
          "description": "The Azure Resource Id that represents the endpoint of an Event Hub destination of an event subscription.",
          "type": "string"
        }
      }
    },
    "EventHubEventSubscriptionDestination": {
      "description": "Information about the event hub destination for an event subscription.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/EventSubscriptionDestination"
        }
      ],
      "properties": {
        "properties": {
          "$ref": "#/definitions/EventHubEventSubscriptionDestinationProperties",
          "description": "Event Hub Properties of the event subscription destination.",
          "x-ms-client-flatten": true
        }
      },
      "x-ms-discriminator-value": "EventHub"
    },
    "StorageQueueEventSubscriptionDestinationProperties": {
      "description": "The properties for a storage queue destination.",
      "type": "object",
      "properties": {
        "resourceId": {
          "description": "The Azure Resource ID of the storage account that contains the queue that is the destination of an event subscription.",
          "type": "string"
        },
        "queueName": {
          "description": "The name of the Storage queue under a storage account that is the destination of an event subscription.",
          "type": "string"
        }
      }
    },
    "StorageQueueEventSubscriptionDestination": {
      "description": "Information about the storage queue destination for an event subscription.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/EventSubscriptionDestination"
        }
      ],
      "properties": {
        "properties": {
          "$ref": "#/definitions/StorageQueueEventSubscriptionDestinationProperties",
          "description": "Storage Queue Properties of the event subscription destination.",
          "x-ms-client-flatten": true
        }
      },
      "x-ms-discriminator-value": "StorageQueue"
    },
    "HybridConnectionEventSubscriptionDestinationProperties": {
      "description": "The properties for a hybrid connection destination.",
      "type": "object",
      "properties": {
        "resourceId": {
          "description": "The Azure Resource ID of an hybrid connection that is the destination of an event subscription.",
          "type": "string"
        }
      }
    },
    "HybridConnectionEventSubscriptionDestination": {
      "description": "Information about the HybridConnection destination for an event subscription.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/EventSubscriptionDestination"
        }
      ],
      "properties": {
        "properties": {
          "$ref": "#/definitions/HybridConnectionEventSubscriptionDestinationProperties",
          "description": "Hybrid connection Properties of the event subscription destination.",
          "x-ms-client-flatten": true
        }
      },
      "x-ms-discriminator-value": "HybridConnection"
    },
    "ServiceBusQueueEventSubscriptionDestinationProperties": {
      "description": "The properties that represent the Service Bus destination of an event subscription.",
      "type": "object",
      "properties": {
        "resourceId": {
          "description": "The Azure Resource Id that represents the endpoint of the Service Bus destination of an event subscription.",
          "type": "string"
        }
      }
    },
    "ServiceBusQueueEventSubscriptionDestination": {
      "description": "Information about the service bus destination for an event subscription.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/EventSubscriptionDestination"
        }
      ],
      "properties": {
        "properties": {
          "$ref": "#/definitions/ServiceBusQueueEventSubscriptionDestinationProperties",
          "description": "Service Bus Properties of the event subscription destination.",
          "x-ms-client-flatten": true
        }
      },
      "x-ms-discriminator-value": "ServiceBusQueue"
    },
    "ServiceBusTopicEventSubscriptionDestinationProperties": {
      "description": "The properties that represent the Service Bus Topic destination of an event subscription.",
      "type": "object",
      "properties": {
        "resourceId": {
          "description": "The Azure Resource Id that represents the endpoint of the Service Bus Topic destination of an event subscription.",
          "type": "string"
        }
      }
    },
    "ServiceBusTopicEventSubscriptionDestination": {
      "description": "Information about the service bus topic destination for an event subscription.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/EventSubscriptionDestination"
        }
      ],
      "properties": {
        "properties": {
          "$ref": "#/definitions/ServiceBusTopicEventSubscriptionDestinationProperties",
          "description": "Service Bus Topic Properties of the event subscription destination.",
          "x-ms-client-flatten": true
        }
      },
      "x-ms-discriminator-value": "ServiceBusTopic"
    },
    "AzureFunctionEventSubscriptionDestinationProperties": {
      "description": "The properties that represent the Azure Function destination of an event subscription.",
      "type": "object",
      "properties": {
        "resourceId": {
          "description": "The Azure Resource Id that represents the endpoint of the Azure Function destination of an event subscription.",
          "type": "string"
        },
        "maxEventsPerBatch": {
          "format": "int32",
          "description": "Maximum number of events per batch.",
          "default": 1,
          "type": "integer"
        },
        "preferredBatchSizeInKilobytes": {
          "format": "int32",
          "description": "Preferred batch size in Kilobytes.",
          "default": 64,
          "type": "integer"
        }
      }
    },
    "AzureFunctionEventSubscriptionDestination": {
      "description": "Information about the azure function destination for an event subscription.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/EventSubscriptionDestination"
        }
      ],
      "properties": {
        "properties": {
          "$ref": "#/definitions/AzureFunctionEventSubscriptionDestinationProperties",
          "description": "Azure Function Properties of the event subscription destination.",
          "x-ms-client-flatten": true
        }
      },
      "x-ms-discriminator-value": "AzureFunction"
    },
    "EventSubscriptionDestination": {
      "description": "Information about the destination for an event subscription.",
      "required": [
        "endpointType"
      ],
      "type": "object",
      "properties": {
        "endpointType": {
          "description": "Type of the endpoint for the event subscription destination.",
          "enum": [
            "WebHook",
            "EventHub",
            "StorageQueue",
            "HybridConnection",
            "ServiceBusQueue",
            "ServiceBusTopic",
            "AzureFunction"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "EndpointType",
            "modelAsString": true
          }
        }
      },
      "discriminator": "endpointType"
    },
    "EventSubscription": {
      "description": "Event Subscription",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "properties": {
        "properties": {
          "$ref": "#/definitions/EventSubscriptionProperties",
          "description": "Properties of the event subscription.",
          "x-ms-client-flatten": true
        },
        "systemData": {
          "description": "The system metadata relating to Event Subscription resource.",
          "type": "object",
          "readOnly": true,
          "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/systemData"
        }
      }
    },
    "EventSubscriptionUpdateParameters": {
      "description": "Properties of the Event Subscription update.",
      "type": "object",
      "properties": {
        "destination": {
          "$ref": "#/definitions/EventSubscriptionDestination",
          "description": "Information about the destination where events have to be delivered for the event subscription."
        },
        "filter": {
          "$ref": "#/definitions/EventSubscriptionFilter",
          "description": "Information about the filter for the event subscription."
        },
        "labels": {
          "description": "List of user defined labels.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "expirationTimeUtc": {
          "format": "date-time",
          "description": "Information about the expiration time for the event subscription.",
          "type": "string"
        },
        "eventDeliverySchema": {
          "description": "The event delivery schema for the event subscription.",
          "enum": [
            "EventGridSchema",
            "CustomInputSchema",
            "CloudEventSchemaV1_0"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "EventDeliverySchema",
            "modelAsString": true
          }
        },
        "retryPolicy": {
          "$ref": "#/definitions/RetryPolicy",
          "description": "The retry policy for events. This can be used to configure maximum number of delivery attempts and time to live for events."
        },
        "deadLetterDestination": {
          "$ref": "#/definitions/DeadLetterDestination",
          "description": "The DeadLetter destination of the event subscription."
        }
      }
    },
    "EventSubscriptionFullUrl": {
      "description": "Full endpoint url of an event subscription",
      "type": "object",
      "properties": {
        "endpointUrl": {
          "description": "The URL that represents the endpoint of the destination of an event subscription.",
          "type": "string"
        }
      }
    },
    "EventSubscriptionsListResult": {
      "description": "Result of the List EventSubscriptions operation",
      "type": "object",
      "properties": {
        "value": {
          "description": "A collection of EventSubscriptions",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EventSubscription"
          }
        },
        "nextLink": {
          "description": "A link for the next page of event subscriptions",
          "type": "string"
        }
      }
    },
    "OperationsListResult": {
      "description": "Result of the List Operations operation",
      "type": "object",
      "properties": {
        "value": {
          "description": "A collection of operations",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Operation"
          }
        }
      }
    },
    "Operation": {
      "description": "Represents an operation returned by the GetOperations request",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the operation",
          "type": "string"
        },
        "display": {
          "$ref": "#/definitions/OperationInfo",
          "description": "Display name of the operation"
        },
        "origin": {
          "description": "Origin of the operation",
          "type": "string"
        },
        "properties": {
          "description": "Properties of the operation",
          "type": "object",
          "x-ms-client-flatten": true
        }
      }
    },
    "OperationInfo": {
      "description": "Information about an operation",
      "type": "object",
      "properties": {
        "provider": {
          "description": "Name of the provider",
          "type": "string"
        },
        "resource": {
          "description": "Name of the resource type",
          "type": "string"
        },
        "operation": {
          "description": "Name of the operation",
          "type": "string"
        },
        "description": {
          "description": "Description of the operation",
          "type": "string"
        }
      }
    },
    "PrivateEndpointConnectionListResult": {
      "description": "Result of the list of all private endpoint connections operation.",
      "type": "object",
      "properties": {
        "value": {
          "description": "A collection of private endpoint connection resources.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PrivateEndpointConnection"
          }
        },
        "nextLink": {
          "description": "A link for the next page of private endpoint connection resources.",
          "type": "string"
        }
      }
    },
    "PrivateLinkResource": {
      "description": "Information of the private link resource.",
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/PrivateLinkResourceProperties",
          "description": "Properties of the private link resource.",
          "x-ms-client-flatten": true
        },
        "id": {
          "description": "Fully qualified identifier of the resource.",
          "type": "string"
        },
        "name": {
          "description": "Name of the resource.",
          "type": "string"
        },
        "type": {
          "description": "Type of the resource.",
          "type": "string"
        }
      }
    },
    "PrivateLinkResourceProperties": {
      "type": "object",
      "properties": {
        "groupId": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "requiredMembers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "requiredZoneNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "PrivateLinkResourcesListResult": {
      "description": "Result of the List private link resources operation.",
      "type": "object",
      "properties": {
        "value": {
          "description": "A collection of private link resources",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PrivateLinkResource"
          }
        },
        "nextLink": {
          "description": "A link for the next page of private link resources.",
          "type": "string"
        }
      }
    },
    "TopicProperties": {
      "description": "Properties of the Topic",
      "type": "object",
      "properties": {
        "privateEndpointConnections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PrivateEndpointConnection"
          },
          "readOnly": true
        },
        "provisioningState": {
          "description": "Provisioning state of the topic.",
          "enum": [
            "Creating",
            "Updating",
            "Deleting",
            "Succeeded",
            "Canceled",
            "Failed"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "TopicProvisioningState",
            "modelAsString": true
          }
        },
        "endpoint": {
          "description": "Endpoint for the topic.",
          "type": "string",
          "readOnly": true
        },
        "inputSchema": {
          "description": "This determines the format that Event Grid should expect for incoming events published to the topic.",
          "enum": [
            "EventGridSchema",
            "CustomEventSchema",
            "CloudEventSchemaV1_0"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "InputSchema",
            "modelAsString": true
          },
          "default": "EventGridSchema"
        },
        "inputSchemaMapping": {
          "$ref": "#/definitions/InputSchemaMapping",
          "description": "This enables publishing using custom event schemas. An InputSchemaMapping can be specified to map various properties of a source schema to various required properties of the EventGridEvent schema."
        },
        "metricResourceId": {
          "description": "Metric resource id for the topic.",
          "type": "string",
          "readOnly": true
        },
        "publicNetworkAccess": {
          "description": "This determines if traffic is allowed over public network. By default it is enabled. \r\nYou can further restrict to specific IPs by configuring <seealso cref=\"P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.TopicProperties.InboundIpRules\" />",
          "enum": [
            "Enabled",
            "Disabled"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "PublicNetworkAccess",
            "modelAsString": true
          },
          "default": "Enabled"
        },
        "inboundIpRules": {
          "description": "This can be used to restrict traffic from specific IPs instead of all IPs. Note: These are considered only if PublicNetworkAccess is enabled.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InboundIpRule"
          }
        }
      }
    },
    "Topic": {
      "description": "EventGrid Topic",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TrackedResource"
        }
      ],
      "properties": {
        "properties": {
          "$ref": "#/definitions/TopicProperties",
          "description": "Properties of the topic.",
          "x-ms-client-flatten": true
        },
        "systemData": {
          "description": "The system metadata relating to Topic resource.",
          "type": "object",
          "readOnly": true,
          "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/systemData"
        }
      }
    },
    "TopicUpdateParameters": {
      "description": "Properties of the Topic update",
      "type": "object",
      "properties": {
        "tags": {
          "description": "Tags of the resource.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "$ref": "#/definitions/TopicUpdateParameterProperties",
          "description": "Properties of the resource.",
          "x-ms-client-flatten": true
        }
      }
    },
    "TopicUpdateParameterProperties": {
      "description": "Information of topic update parameter properties.",
      "type": "object",
      "properties": {
        "publicNetworkAccess": {
          "description": "This determines if traffic is allowed over public network. By default it is enabled. \r\nYou can further restrict to specific IPs by configuring <seealso cref=\"P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.TopicUpdateParameterProperties.InboundIpRules\" />",
          "enum": [
            "Enabled",
            "Disabled"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "PublicNetworkAccess",
            "modelAsString": true
          },
          "default": "Enabled"
        },
        "inboundIpRules": {
          "description": "This can be used to restrict traffic from specific IPs instead of all IPs. Note: These are considered only if PublicNetworkAccess is enabled.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InboundIpRule"
          }
        }
      }
    },
    "TopicsListResult": {
      "description": "Result of the List Topics operation",
      "type": "object",
      "properties": {
        "value": {
          "description": "A collection of Topics",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Topic"
          }
        },
        "nextLink": {
          "description": "A link for the next page of topics",
          "type": "string"
        }
      }
    },
    "TopicSharedAccessKeys": {
      "description": "Shared access keys of the Topic",
      "type": "object",
      "properties": {
        "key1": {
          "description": "Shared access key1 for the topic.",
          "type": "string"
        },
        "key2": {
          "description": "Shared access key2 for the topic.",
          "type": "string"
        }
      }
    },
    "TopicRegenerateKeyRequest": {
      "description": "Topic regenerate share access key request",
      "required": [
        "keyName"
      ],
      "type": "object",
      "properties": {
        "keyName": {
          "description": "Key name to regenerate key1 or key2",
          "type": "string"
        }
      }
    },
    "EventTypesListResult": {
      "description": "Result of the List Event Types operation",
      "type": "object",
      "properties": {
        "value": {
          "description": "A collection of event types",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EventType"
          }
        }
      }
    },
    "EventTypeProperties": {
      "description": "Properties of the event type",
      "type": "object",
      "properties": {
        "displayName": {
          "description": "Display name of the event type.",
          "type": "string"
        },
        "description": {
          "description": "Description of the event type.",
          "type": "string"
        },
        "schemaUrl": {
          "description": "Url of the schema for this event type.",
          "type": "string"
        },
        "isInDefaultSet": {
          "description": "IsInDefaultSet flag of the event type.",
          "type": "boolean"
        }
      }
    },
    "EventType": {
      "description": "Event Type for a subject under a topic",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "properties": {
        "properties": {
          "$ref": "#/definitions/EventTypeProperties",
          "description": "Properties of the event type.",
          "x-ms-client-flatten": true
        }
      }
    },
    "TopicTypesListResult": {
      "description": "Result of the List Topic Types operation",
      "type": "object",
      "properties": {
        "value": {
          "description": "A collection of topic types",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TopicTypeInfo"
          }
        }
      }
    },
    "TopicTypeProperties": {
      "description": "Properties of a topic type.",
      "type": "object",
      "properties": {
        "provider": {
          "description": "Namespace of the provider of the topic type.",
          "type": "string"
        },
        "displayName": {
          "description": "Display Name for the topic type.",
          "type": "string"
        },
        "description": {
          "description": "Description of the topic type.",
          "type": "string"
        },
        "resourceRegionType": {
          "description": "Region type of the resource.",
          "enum": [
            "RegionalResource",
            "GlobalResource"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ResourceRegionType",
            "modelAsString": true
          }
        },
        "provisioningState": {
          "description": "Provisioning state of the topic type",
          "enum": [
            "Creating",
            "Updating",
            "Deleting",
            "Succeeded",
            "Canceled",
            "Failed"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "TopicTypeProvisioningState",
            "modelAsString": true
          }
        },
        "supportedLocations": {
          "description": "List of locations supported by this topic type.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "sourceResourceFormat": {
          "description": "Source resource format.",
          "type": "string"
        }
      }
    },
    "TopicTypeInfo": {
      "description": "Properties of a topic type info.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "properties": {
        "properties": {
          "$ref": "#/definitions/TopicTypeProperties",
          "description": "Properties of the topic type info",
          "x-ms-client-flatten": true
        }
      }
    }
  },
  "parameters": {
    "SubscriptionIdParameter": {
      "name": "subscriptionId",
      "in": "path",
      "description": "Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.",
      "required": true,
      "type": "string"
    },
    "ApiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "description": "Version of the API to be used with the client request.",
      "required": true,
      "type": "string"
    },
    "FilterParameter": {
      "name": "$filter",
      "in": "query",
      "description": "The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "TopParameter": {
      "name": "$top",
      "in": "query",
      "description": "The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.",
      "required": false,
      "type": "integer",
      "format": "int32",
      "x-ms-parameter-location": "method"
    }
  },
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "description": "Azure Active Directory OAuth2 Flow",
      "flow": "implicit",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      }
    }
  }
}
