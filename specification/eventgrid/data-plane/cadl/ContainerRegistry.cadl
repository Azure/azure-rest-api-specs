@doc("Schema of the Data property of an EventGridEvent for a Microsoft.ContainerRegistry.ImagePushed event.")
model ContainerRegistryImagePushedEventData {
}

@doc("Schema of the Data property of an EventGridEvent for a Microsoft.ContainerRegistry.ImageDeleted event.")
model ContainerRegistryImageDeletedEventData {
}

@doc("Schema of the Data property of an EventGridEvent for a Microsoft.ContainerRegistry.ChartPushed event.")
model ContainerRegistryChartPushedEventData {
}

@doc("Schema of the Data property of an EventGridEvent for a Microsoft.ContainerRegistry.ChartDeleted event.")
model ContainerRegistryChartDeletedEventData {
}

@doc("The content of the event request message.")
model ContainerRegistryEventData {
	@doc("The event ID.")
	id?: string;
	@doc("The time at which the event occurred.")
	timestamp?: zonedDateTime;
	@doc("The action that encompasses the provided event.")
	action?: string;
	@doc("The location of the event.")
	location?: string;
	@doc("The target of the event.")
	target?: ContainerRegistryEventTarget;
	@doc("The request that generated the event.")
	request?: ContainerRegistryEventRequest;
	@doc("The agent that initiated the event. For most situations, this could be from the authorization context of the request.")
	actor?: ContainerRegistryEventActor;
	@doc("The registry node that generated the event. Put differently, while the actor initiates the event, the source generates it.")
	source?: ContainerRegistryEventSource;
	@doc("The connected registry information if the event is generated by a connected registry.")
	connectedRegistry?: ContainerRegistryEventConnectedRegistry;
}

@doc("The content of the event request message.")
model ContainerRegistryArtifactEventData {
	@doc("The event ID.")
	id?: string;
	@doc("The time at which the event occurred.")
	timestamp?: zonedDateTime;
	@doc("The action that encompasses the provided event.")
	action?: string;
	@doc("The location of the event.")
	location?: string;
	@doc("The target of the event.")
	target?: ContainerRegistryArtifactEventTarget;
	@doc("The connected registry information if the event is generated by a connected registry.")
	connectedRegistry?: ContainerRegistryEventConnectedRegistry;
}

@doc("The target of the event.")
model ContainerRegistryEventTarget {
	@doc("The MIME type of the referenced object.")
	mediaType?: string;
	@doc("The number of bytes of the content. Same as Length field.")
	size?: int64;
	@doc("The digest of the content, as defined by the Registry V2 HTTP API Specification.")
	digest?: string;
	@doc("The number of bytes of the content. Same as Size field.")
	length?: int64;
	@doc("The repository name.")
	repository?: string;
	@doc("The direct URL to the content.")
	url?: string;
	@doc("The tag name.")
	tag?: string;
}

@doc("The target of the event.")
model ContainerRegistryArtifactEventTarget {
	@doc("The MIME type of the artifact.")
	mediaType?: string;
	@doc("The size in bytes of the artifact.")
	size?: int64;
	@doc("The digest of the artifact.")
	digest?: string;
	@doc("The repository name of the artifact.")
	repository?: string;
	@doc("The tag of the artifact.")
	tag?: string;
	@doc("The name of the artifact.")
	name?: string;
	@doc("The version of the artifact.")
	version?: string;
}

@doc("The request that generated the event.")
model ContainerRegistryEventRequest {
	@doc("The ID of the request that initiated the event.")
	id?: string;
	@doc("The IP or hostname and possibly port of the client connection that initiated the event. This is the RemoteAddr from the standard http request.")
	addr?: string;
	@doc("The externally accessible hostname of the registry instance, as specified by the http host header on incoming requests.")
	host?: string;
	@doc("The request method that generated the event.")
	method?: string;
	@doc("The user agent header of the request.")
	useragent?: string;
}

@doc("The agent that initiated the event. For most situations, this could be from the authorization context of the request.")
model ContainerRegistryEventActor {
	@doc("The subject or username associated with the request context that generated the event.")
	name?: string;
}

@doc("The registry node that generated the event. Put differently, while the actor initiates the event, the source generates it.")
model ContainerRegistryEventSource {
	@doc("The IP or hostname and the port of the registry node that generated the event. Generally, this will be resolved by os.Hostname() along with the running port.")
	addr?: string;
	@doc("The running instance of an application. Changes after each restart.")
	instanceID?: string;
}

@doc("The connected registry information if the event is generated by a connected registry.")
model ContainerRegistryEventConnectedRegistry {
	@doc("The name of the connected registry that generated this event.")
	name?: string;
}

