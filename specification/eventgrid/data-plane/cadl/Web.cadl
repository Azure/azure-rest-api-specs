model WebAppBaseEventData {
  appEventTypeDetail?: AppEventTypeDetail;

  @doc("name of the web site that had this event.")
  name?: string;

  @doc("The client request id generated by the app service for the site API operation that triggered this event.")
  clientRequestId?: string;

  @doc("The correlation request id generated by the app service for the site API operation that triggered this event.")
  correlationRequestId?: string;

  @doc("The request id generated by the app service for the site API operation that triggered this event.")
  requestId?: string;

  @doc("HTTP request URL of this operation.")
  address?: string;

  @doc("HTTP verb of this operation.")
  verb?: string;
}

@doc("Schema of the Data property of an EventGridEvent for a Microsoft.Web.AppUpdated event.")
model WebAppUpdatedEventData is WebAppBaseEventData;

@doc("Schema of the Data property of an EventGridEvent for a Microsoft.Web.BackupOperationStarted event.")
model WebBackupOperationStartedEventData   is WebAppBaseEventData;

@doc("Schema of the Data property of an EventGridEvent for a Microsoft.Web.BackupOperationCompleted event.")
model WebBackupOperationCompletedEventData   is WebAppBaseEventData;

@doc("Schema of the Data property of an EventGridEvent for a Microsoft.Web.BackupOperationFailed event.")
model WebBackupOperationFailedEventData   is WebAppBaseEventData;

@doc("Schema of the Data property of an EventGridEvent for a Microsoft.Web.RestoreOperationStarted event.")
model WebRestoreOperationStartedEventData   is WebAppBaseEventData;

@doc("Schema of the Data property of an EventGridEvent for a Microsoft.Web.RestoreOperationCompleted event.")
model WebRestoreOperationCompletedEventData   is WebAppBaseEventData;

@doc("Schema of the Data property of an EventGridEvent for a Microsoft.Web.RestoreOperationFailed event.")
model WebRestoreOperationFailedEventData   is WebAppBaseEventData;

@doc("Schema of the Data property of an EventGridEvent for a Microsoft.Web.SlotSwapStarted event.")
model WebSlotSwapStartedEventData   is WebAppBaseEventData;

@doc("Schema of the Data property of an EventGridEvent for a Microsoft.Web.SlotSwapCompleted event.")
model WebSlotSwapCompletedEventData   is WebAppBaseEventData;

@doc("Schema of the Data property of an EventGridEvent for a Microsoft.Web.SlotSwapFailed event.")
model WebSlotSwapFailedEventData   is WebAppBaseEventData;

@doc("Schema of the Data property of an EventGridEvent for a Microsoft.Web.SlotSwapWithPreviewStarted event.")
model WebSlotSwapWithPreviewStartedEventData   is WebAppBaseEventData;

@doc("Schema of the Data property of an EventGridEvent for a Microsoft.Web.SlotSwapWithPreviewCancelled event.")
model WebSlotSwapWithPreviewCancelledEventData   is WebAppBaseEventData;

@doc("Schema of the Data property of an EventGridEvent for a Microsoft.Web.AppServicePlanUpdated event.")
model WebAppServicePlanUpdatedEventData {
  appServicePlanEventTypeDetail?: AppServicePlanEventTypeDetail;

  @doc("name of the app service plan that had this event.")
  name?: string;

  @doc("The client request id generated by the app service for the app service plan API operation that triggered this event.")
  clientRequestId?: string;

  @doc("The correlation request id generated by the app service for the app service plan API operation that triggered this event.")
  correlationRequestId?: string;

  @doc("The request id generated by the app service for the app service plan API operation that triggered this event.")
  requestId?: string;

  @doc("HTTP request URL of this operation.")
  address?: string;

  @doc("HTTP verb of this operation.")
  verb?: string;

  @doc("sku of app service plan.")
  sku?: Record<string>;
}

@knownValues(AppActionKV)
model AppAction is string {}
enum AppActionKV {
  Restarted,
  Stopped,
  ChangedAppSettings,
  Started,
  Completed,
  Failed,
}

@doc("Detail of action on the app.")
model AppEventTypeDetail {
  @doc("Type of action of the operation.")
  action?: AppAction;
}

@knownValues(StampKindKV)
model StampKind is string {}
enum StampKindKV {
  Public,
  AseV1,
  AseV2,
}

@knownValues(AppServicePlanActionKV)
model AppServicePlanAction is string {}
enum AppServicePlanActionKV {
  @doc("App Service plan is being updated.")
  Updated,
}

@doc("Detail of action on the app service plan.")
model AppServicePlanEventTypeDetail {
  @doc("Kind of environment where app service plan is.")
  stampKind?: StampKind;

  @doc("Type of action on the app service plan.")
  action?: AppServicePlanAction;
  status?: AsyncStatus;
}

@knownValues(AsyncStatusKV)
model AsyncStatus is string {}
enum AsyncStatusKV {
  @doc("Async operation has started.")
  Started,
  @doc("Async operation has completed.")
  Completed,
  @doc("Async operation failed to complete.")
  Failed,
}

