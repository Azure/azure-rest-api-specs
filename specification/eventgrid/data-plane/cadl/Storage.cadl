enum StorageType{
  blob;
  directory;
}

model StorageBaseEventData<TStorageType> {
  @doc("The name of the API/operation that triggered this event.")
  api?: string;

  @doc("A request id provided by the client of the storage API operation that triggered this event.")
  clientRequestId?: string;

  @doc("The request id generated by the Storage service for the storage API operation that triggered this event.")
  requestId?: string;

  @doc("An opaque string value representing the logical sequence of events for any particular {name} name. Users can use standard string comparison to understand the relative sequence of two events on the same {name} name.", TStorageType)
  sequencer?: string;

  @doc("The identity of the requester that triggered this event.")
  identity?: string;

  @doc("For service use only. Diagnostic data occasionally included by the Azure Storage service. This property should be ignored by event consumers.")
  storageDiagnostics?: Record<string>;
}

model StorageBaseTypeData {
  @doc("The content type of the blob. This is the same as what would be returned in the Content-Type header from the blob.")
  contentType?: string;

  @doc("The type of blob.")
  blobType?: string;
}

model StorageUrlBaseEventData {
  @doc("The size of the blob in bytes. This is the same as what would be returned in the Content-Length header from the blob.")
  contentLength?: int64;

  @doc("The path to the blob.")
  url?: string;
}

@doc("Schema of the Data property of an EventGridEvent for a Microsoft.Storage.BlobCreated event.")
model StorageBlobCreatedEventData {
  @doc("The etag of the blob at the time this event was triggered.")
  eTag?: string;

  @doc("The offset of the blob in bytes.")
  contentOffset?: int64;

  ...StorageBaseEventData<StorageType.blob>;
  ...StorageUrlBaseEventData;
  ...StorageBaseTypeData;
}

@doc("Schema of the Data property of an EventGridEvent for a Microsoft.Storage.BlobDeleted event.")
model StorageBlobDeletedEventData {
  @doc("The path to the blob.")
  url?: string;

  ...StorageBaseEventData<StorageType.blob>;
  ...StorageBaseTypeData;
}

@doc("Schema of the Data property of an EventGridEvent for a Microsoft.Storage.DirectoryCreated event.")
model StorageDirectoryCreatedEventData {
  @doc("The etag of the directory at the time this event was triggered.")
  eTag?: string;

  @doc("The path to the directory.")
  url?: string;

  ...StorageBaseEventData<StorageType.directory>;
}

@doc("Schema of the Data property of an EventGridEvent for a Microsoft.Storage.DirectoryDeleted event.")
model StorageDirectoryDeletedEventData {
  @doc("The path to the deleted directory.")
  url?: string;

  @doc("Is this event for a recursive delete operation.")
  recursive?: string;

  ...StorageBaseEventData<StorageType.directory>;
}

@doc("Schema of the Data property of an EventGridEvent for a Microsoft.Storage.BlobRenamed event.")
model StorageBlobRenamedEventData {
  @doc("The path to the blob that was renamed.")
  sourceUrl?: string;

  @doc("The new path to the blob after the rename operation.")
  destinationUrl?: string;

  ...StorageBaseEventData<StorageType.blob>;
}

@doc("Schema of the Data property of an EventGridEvent for a Microsoft.Storage.DirectoryRenamed event.")
model StorageDirectoryRenamedEventData {
  @doc("The path to the directory that was renamed.")
  sourceUrl?: string;

  @doc("The new path to the directory after the rename operation.")
  destinationUrl?: string;

  ...StorageBaseEventData<StorageType.directory>;
}

@doc("Schema of the Data property of an EventGridEvent for a Microsoft.Storage.LifecyclePolicyCompleted event.")
model StorageLifecyclePolicyCompletedEventData {
  @doc("The time the policy task was scheduled.")
  scheduleTime?: string;
  deleteSummary?: StorageLifecyclePolicyActionSummaryDetail;
  tierToCoolSummary?: StorageLifecyclePolicyActionSummaryDetail;
  tierToArchiveSummary?: StorageLifecyclePolicyActionSummaryDetail;
}

@doc("Execution statistics of a specific policy action in a Blob Management cycle.")
model StorageLifecyclePolicyActionSummaryDetail {
  @doc("Total number of objects to be acted on by this action.")
  totalObjectsCount?: int64;

  @doc("Number of success operations of this action.")
  successCount?: int64;

  @doc("Error messages of this action if any.")
  errorList?: string;
}

@doc("Schema of the Data property of an EventGridEvent for a Microsoft.Storage.BlobTierChanged event.")
model StorageBlobTierChangedEventData {
  ...StorageBaseEventData<StorageType.blob>;
  ...StorageUrlBaseEventData;
  ...StorageBaseTypeData;
}

@doc("Schema of the Data property of an EventGridEvent for a Microsoft.Storage.AsyncOperationInitiated event.")
model StorageAsyncOperationInitiatedEventData {
  ...StorageBaseEventData<StorageType.blob>;
  ...StorageUrlBaseEventData;
  ...StorageBaseTypeData;
}

@doc("Schema of the Data property of an EventGridEvent for an Microsoft.Storage.BlobInventoryPolicyCompleted event.")
model StorageBlobInventoryPolicyCompletedEventData {
  @doc("The time at which inventory policy was scheduled.")
  scheduleDateTime?: zonedDateTime;

  @doc("The account name for which inventory policy is registered.")
  accountName?: string;

  @doc("The rule name for inventory policy.")
  ruleName?: string;

  @doc("The status of inventory run, it can be Succeeded/PartiallySucceeded/Failed.")
  policyRunStatus?: string;

  @doc("The status message for inventory run.")
  policyRunStatusMessage?: string;

  @doc("The policy run id for inventory run.")
  policyRunId?: string;

  @doc("The blob URL for manifest file for inventory run.")
  manifestBlobUrl?: string;
}
