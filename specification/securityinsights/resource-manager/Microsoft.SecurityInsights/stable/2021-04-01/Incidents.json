{
  "swagger": "2.0",
  "info": {
    "title": "Security Insights",
    "description": "API spec for Microsoft.SecurityInsights (Azure Security Insights) resource provider",
    "version": "2021-04-01"
  },
  "host": "management.azure.com",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ],
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "flow": "implicit",
      "description": "Azure Active Directory OAuth2 Flow",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      }
    }
  },
  "paths": {
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/incidents": {
      "get": {
        "x-ms-examples": {
          "Get all incidents.": {
            "$ref": "./examples/incidents/GetIncidents.json"
          }
        },
        "tags": [
          "Incidents"
        ],
        "description": "Gets all incidents.",
        "operationId": "Incidents_List",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionId"
          },
          {
            "$ref": "#/parameters/ResourceGroupName"
          },
          {
            "$ref": "../../../common/1.0/types.json#/parameters/WorkspaceName"
          },
          {
            "$ref": "#/parameters/ODataFilter"
          },
          {
            "$ref": "#/parameters/ODataOrderBy"
          },
          {
            "$ref": "#/parameters/ODataTop"
          },
          {
            "$ref": "#/parameters/ODataSkipToken"
          }
        ],
        "responses": {
          "200": {
            "description": "OK, Operation successfully completed",
            "schema": {
              "$ref": "#/definitions/IncidentList"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/CloudError"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/incidents/{incidentId}": {
      "get": {
        "x-ms-examples": {
          "Get an incident.": {
            "$ref": "./examples/incidents/GetIncidentById.json"
          }
        },
        "tags": [
          "Incidents"
        ],
        "description": "Gets an incident.",
        "operationId": "Incidents_Get",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionId"
          },
          {
            "$ref": "#/parameters/ResourceGroupName"
          },
          {
            "$ref": "../../../common/1.0/types.json#/parameters/WorkspaceName"
          },
          {
            "$ref": "#/parameters/IncidentId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK, Operation successfully completed",
            "schema": {
              "$ref": "#/definitions/Incident"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/CloudError"
            }
          }
        }
      },
      "put": {
        "x-ms-examples": {
          "Creates or updates an incident.": {
            "$ref": "./examples/incidents/CreateIncident.json"
          }
        },
        "tags": [
          "Incidents"
        ],
        "description": "Creates or updates the incident.",
        "operationId": "Incidents_CreateOrUpdate",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionId"
          },
          {
            "$ref": "#/parameters/ResourceGroupName"
          },
          {
            "$ref": "../../../common/1.0/types.json#/parameters/WorkspaceName"
          },
          {
            "$ref": "#/parameters/IncidentId"
          },
          {
            "$ref": "#/parameters/Incident"
          }
        ],
        "responses": {
          "200": {
            "description": "OK, Operation successfully completed",
            "schema": {
              "$ref": "#/definitions/Incident"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Incident"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/CloudError"
            }
          }
        }
      },
      "delete": {
        "x-ms-examples": {
          "Delete an incident.": {
            "$ref": "./examples/incidents/DeleteIncident.json"
          }
        },
        "tags": [
          "Incidents"
        ],
        "description": "Delete the incident.",
        "operationId": "Incidents_Delete",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionId"
          },
          {
            "$ref": "#/parameters/ResourceGroupName"
          },
          {
            "$ref": "../../../common/1.0/types.json#/parameters/WorkspaceName"
          },
          {
            "$ref": "#/parameters/IncidentId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK, Operation successfully completed"
          },
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/CloudError"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/incidents/{incidentId}/alerts": {
      "post": {
        "x-ms-examples": {
          "Get all incident alerts.": {
            "$ref": "./examples/incidents/GetAllIncidentAlerts.json"
          }
        },
        "tags": [
          "IncidentAlerts"
        ],
        "description": "Gets all incident alerts.",
        "operationId": "Incidents_ListOfAlerts",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionId"
          },
          {
            "$ref": "#/parameters/ResourceGroupName"
          },
          {
            "$ref": "../../../common/1.0/types.json#/parameters/WorkspaceName"
          },
          {
            "$ref": "#/parameters/IncidentId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/IncidentAlertList"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/CloudError"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/incidents/{incidentId}/bookmarks": {
      "post": {
        "x-ms-examples": {
          "Get all incident bookmarks.": {
            "$ref": "./examples/incidents/GetAllIncidentBookmarks.json"
          }
        },
        "tags": [
          "IncidentBookmarks"
        ],
        "description": "Gets all incident bookmarks.",
        "operationId": "Incidents_ListOfBookmarks",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionId"
          },
          {
            "$ref": "#/parameters/ResourceGroupName"
          },
          {
            "$ref": "../../../common/1.0/types.json#/parameters/WorkspaceName"
          },
          {
            "$ref": "#/parameters/IncidentId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/IncidentBookmarkList"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/CloudError"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/incidents/{incidentId}/comments": {
      "get": {
        "x-ms-examples": {
          "Get all incident comments.": {
            "$ref": "./examples/incidents/comments/GetAllIncidentComments.json"
          }
        },
        "tags": [
          "IncidentComments"
        ],
        "description": "Gets all incident comments.",
        "operationId": "IncidentComments_ListByIncident",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionId"
          },
          {
            "$ref": "#/parameters/ResourceGroupName"
          },
          {
            "$ref": "../../../common/1.0/types.json#/parameters/WorkspaceName"
          },
          {
            "$ref": "#/parameters/IncidentId"
          },
          {
            "$ref": "#/parameters/ODataFilter"
          },
          {
            "$ref": "#/parameters/ODataOrderBy"
          },
          {
            "$ref": "#/parameters/ODataTop"
          },
          {
            "$ref": "#/parameters/ODataSkipToken"
          }
        ],
        "responses": {
          "200": {
            "description": "OK, Operation successfully completed",
            "schema": {
              "$ref": "#/definitions/IncidentCommentList"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/CloudError"
            }
          }
        },
        "x-ms-odata": "#/definitions/IncidentComment",
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/incidents/{incidentId}/comments/{incidentCommentId}": {
      "get": {
        "x-ms-examples": {
          "Get an incident comment.": {
            "$ref": "./examples/incidents/comments/GetIncidentCommentById.json"
          }
        },
        "tags": [
          "IncidentComments"
        ],
        "description": "Gets an incident comment.",
        "operationId": "IncidentComments_Get",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionId"
          },
          {
            "$ref": "#/parameters/ResourceGroupName"
          },
          {
            "$ref": "../../../common/1.0/types.json#/parameters/WorkspaceName"
          },
          {
            "$ref": "#/parameters/IncidentId"
          },
          {
            "$ref": "#/parameters/IncidentCommentId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK, Operation successfully completed",
            "schema": {
              "$ref": "#/definitions/IncidentComment"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/CloudError"
            }
          }
        }
      },
      "put": {
        "x-ms-examples": {
          "Creates or updates an incident comment.": {
            "$ref": "./examples/incidents/comments/CreateIncidentComment.json"
          }
        },
        "tags": [
          "IncidentComments"
        ],
        "description": "Creates or updates the incident comment.",
        "operationId": "IncidentComments_CreateComment",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionId"
          },
          {
            "$ref": "#/parameters/ResourceGroupName"
          },
          {
            "$ref": "../../../common/1.0/types.json#/parameters/WorkspaceName"
          },
          {
            "$ref": "#/parameters/IncidentId"
          },
          {
            "$ref": "#/parameters/IncidentCommentId"
          },
          {
            "$ref": "#/parameters/IncidentComment"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/IncidentComment"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/IncidentComment"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/CloudError"
            }
          }
        }
      },
      "delete": {
        "x-ms-examples": {
          "Delete the incident comment.": {
            "$ref": "./examples/incidents/comments/DeleteIncidentComment.json"
          }
        },
        "tags": [
          "IncidentComments"
        ],
        "description": "Delete the incident comment.",
        "operationId": "IncidentComments_DeleteComment",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionId"
          },
          {
            "$ref": "#/parameters/ResourceGroupName"
          },
          {
            "$ref": "../../../common/1.0/types.json#/parameters/WorkspaceName"
          },
          {
            "$ref": "#/parameters/IncidentId"
          },
          {
            "$ref": "#/parameters/IncidentCommentId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/CloudError"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/incidents/{incidentId}/entities": {
      "post": {
        "x-ms-examples": {
          "Gets all incident related entities": {
            "$ref": "./examples/incidents/GetAllIncidentEntities.json"
          }
        },
        "tags": [
          "IncidentEntities"
        ],
        "description": "Gets all incident related entities.",
        "operationId": "Incidents_ListOfEntities",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionId"
          },
          {
            "$ref": "#/parameters/ResourceGroupName"
          },
          {
            "$ref": "../../../common/1.0/types.json#/parameters/WorkspaceName"
          },
          {
            "$ref": "#/parameters/IncidentId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/IncidentEntitiesResponse"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/CloudError"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AccountEntity": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        }
      ],
      "description": "Represents an account entity.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/AccountEntityProperties",
          "description": "Account entity properties",
          "x-ms-client-flatten": true
        }
      },
      "type": "object",
      "x-ms-discriminator-value": "Account"
    },
    "AccountEntityProperties": {
      "allOf": [
        {
          "$ref": "#/definitions/EntityCommonProperties"
        }
      ],
      "description": "Account entity property bag.",
      "properties": {
        "aadTenantId": {
          "description": "The Azure Active Directory tenant id.",
          "readOnly": true,
          "type": "string"
        },
        "aadUserId": {
          "description": "The Azure Active Directory user id.",
          "readOnly": true,
          "type": "string"
        },
        "accountName": {
          "description": "The name of the account. This field should hold only the name without any domain added to it, i.e. administrator.",
          "readOnly": true,
          "type": "string"
        },
        "displayName": {
          "description": "The display name of the account.",
          "readOnly": true,
          "type": "string"
        },
        "hostEntityId": {
          "description": "The Host entity id that contains the account in case it is a local account (not domain joined)",
          "readOnly": true,
          "type": "string"
        },
        "isDomainJoined": {
          "description": "Determines whether this is a domain account.",
          "readOnly": true,
          "type": "boolean"
        },
        "ntDomain": {
          "description": "The NetBIOS domain name as it appears in the alert format – domain\\username. Examples: NT AUTHORITY.",
          "readOnly": true,
          "type": "string"
        },
        "objectGuid": {
          "description": "The objectGUID attribute is a single-value attribute that is the unique identifier for the object, assigned by active directory.",
          "format": "uuid",
          "readOnly": true,
          "type": "string"
        },
        "puid": {
          "description": "The Azure Active Directory Passport User ID.",
          "readOnly": true,
          "type": "string"
        },
        "sid": {
          "description": "The account security identifier, e.g. S-1-5-18.",
          "readOnly": true,
          "type": "string"
        },
        "upnSuffix": {
          "description": "The user principal name suffix for the account, in some cases it is also the domain name. Examples: contoso.com.",
          "readOnly": true,
          "type": "string"
        },
        "dnsDomain": {
          "description": "The fully qualified domain DNS name.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "AlertSeverity": {
      "description": "The severity of the alert",
      "enum": [
        "High",
        "Medium",
        "Low",
        "Informational"
      ],
      "type": "string",
      "x-ms-enum": {
        "modelAsString": true,
        "name": "AlertSeverity",
        "values": [
          {
            "description": "High severity",
            "value": "High"
          },
          {
            "description": "Medium severity",
            "value": "Medium"
          },
          {
            "description": "Low severity",
            "value": "Low"
          },
          {
            "description": "Informational severity",
            "value": "Informational"
          }
        ]
      }
    },
    "AttackTactic": {
      "description": "The severity for alerts created by this alert rule.",
      "enum": [
        "InitialAccess",
        "Execution",
        "Persistence",
        "PrivilegeEscalation",
        "DefenseEvasion",
        "CredentialAccess",
        "Discovery",
        "LateralMovement",
        "Collection",
        "Exfiltration",
        "CommandAndControl",
        "Impact"
      ],
      "type": "string",
      "x-ms-enum": {
        "modelAsString": true,
        "name": "AttackTactic"
      }
    },
    "ClientInfo": {
      "description": "Information on the client (user or application) that made some action",
      "properties": {
        "email": {
          "description": "The email of the client.",
          "type": "string"
        },
        "name": {
          "description": "The name of the client.",
          "type": "string"
        },
        "objectId": {
          "description": "The object id of the client.",
          "format": "uuid",
          "type": "string"
        },
        "userPrincipalName": {
          "description": "The user principal name of the client.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "CloudError": {
      "x-ms-external": true,
      "properties": {
        "error": {
          "$ref": "../../../../../common-types/resource-management/v1/types.json#/definitions/ErrorResponse",
          "description": "The error object of the CloudError response"
        }
      },
      "description": "An error response for a resource management request."
    },
    "Entity": {
      "allOf": [
        {
          "$ref": "../../../common/1.0/types.json#/definitions/Resource"
        },
        {
          "$ref": "#/definitions/EntityKind"
        }
      ],
      "description": "Specific entity.",
      "discriminator": "kind",
      "type": "object",
      "required": [
        "kind"
      ]
    },
    "EntityCommonProperties": {
      "description": "Entity common property bag.",
      "properties": {
        "additionalData": {
          "additionalProperties": {
            "type": "object"
          },
          "description": "A bag of custom fields that should be part of the entity and will be presented to the user.",
          "readOnly": true,
          "type": "object"
        },
        "friendlyName": {
          "description": "The graph item display name which is a short humanly readable description of the graph item instance. This property is optional and might be system generated.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "EntityEdges": {
      "description": "The edge that connects the entity to the other entity.",
      "properties": {
        "targetEntityId": {
          "description": "The target entity Id.",
          "type": "string"
        },
        "additionalData": {
          "additionalProperties": {
            "type": "object"
          },
          "description": "A bag of custom fields that should be part of the entity and will be presented to the user.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "EntityInnerKind": {
      "description": "The kind of the entity",
      "enum": [
        "Account",
        "Host",
        "File",
        "AzureResource",
        "CloudApplication",
        "DnsResolution",
        "FileHash",
        "Ip",
        "Malware",
        "Process",
        "RegistryKey",
        "RegistryValue",
        "SecurityGroup",
        "Url",
        "IoTDevice",
        "SecurityAlert",
        "Bookmark",
        "Mailbox",
        "MailCluster",
        "MailMessage",
        "SubmissionMail"
      ],
      "type": "string",
      "x-ms-enum": {
        "modelAsString": true,
        "name": "EntityKind",
        "values": [
          {
            "description": "Entity represents account in the system.",
            "value": "Account"
          },
          {
            "description": "Entity represents host in the system.",
            "value": "Host"
          },
          {
            "description": "Entity represents file in the system.",
            "value": "File"
          },
          {
            "description": "Entity represents azure resource in the system.",
            "value": "AzureResource"
          },
          {
            "description": "Entity represents cloud application in the system.",
            "value": "CloudApplication"
          },
          {
            "description": "Entity represents dns resolution in the system.",
            "value": "DnsResolution"
          },
          {
            "description": "Entity represents file hash in the system.",
            "value": "FileHash"
          },
          {
            "description": "Entity represents ip in the system.",
            "value": "Ip"
          },
          {
            "description": "Entity represents malware in the system.",
            "value": "Malware"
          },
          {
            "description": "Entity represents process in the system.",
            "value": "Process"
          },
          {
            "description": "Entity represents registry key in the system.",
            "value": "RegistryKey"
          },
          {
            "description": "Entity represents registry value in the system.",
            "value": "RegistryValue"
          },
          {
            "description": "Entity represents security group in the system.",
            "value": "SecurityGroup"
          },
          {
            "description": "Entity represents url in the system.",
            "value": "Url"
          },
          {
            "description": "Entity represents IoT device in the system.",
            "value": "IoTDevice"
          },
          {
            "description": "Entity represents security alert in the system.",
            "value": "SecurityAlert"
          },
          {
            "description": "Entity represents bookmark in the system.",
            "value": "Bookmark"
          },
          {
            "description": "Entity represents mail cluster in the system.",
            "value": "MailCluster"
          },
          {
            "description": "Entity represents mail message in the system.",
            "value": "MailMessage"
          },
          {
            "description": "Entity represents mailbox in the system.",
            "value": "Mailbox"
          },
          {
            "description": "Entity represents submission mail in the system.",
            "value": "SubmissionMail"
          }
        ]
      }
    },
    "EntityKind": {
      "description": "Describes an entity with kind.",
      "properties": {
        "kind": {
          "$ref": "#/definitions/EntityInnerKind",
          "description": "The kind of the entity."
        }
      },
      "required": [
        "kind"
      ],
      "type": "object"
    },
    "HuntingBookmark": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        }
      ],
      "description": "Represents a Hunting bookmark entity.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/HuntingBookmarkProperties",
          "description": "HuntingBookmark entity properties",
          "x-ms-client-flatten": true
        }
      },
      "type": "object",
      "x-ms-discriminator-value": "Bookmark"
    },
    "HuntingBookmarkProperties": {
      "allOf": [
        {
          "$ref": "#/definitions/EntityCommonProperties"
        }
      ],
      "description": "Describes bookmark properties",
      "properties": {
        "created": {
          "description": "The time the bookmark was created",
          "format": "date-time",
          "type": "string"
        },
        "createdBy": {
          "$ref": "#/definitions/UserInfo",
          "description": "Describes a user that created the bookmark",
          "type": "object"
        },
        "displayName": {
          "description": "The display name of the bookmark",
          "type": "string"
        },
        "eventTime": {
          "description": "The time of the event",
          "format": "date-time",
          "type": "string"
        },
        "labels": {
          "description": "List of labels relevant to this bookmark",
          "items": {
            "$ref": "#/definitions/Label"
          },
          "type": "array"
        },
        "notes": {
          "description": "The notes of the bookmark",
          "type": "string"
        },
        "query": {
          "description": "The query of the bookmark.",
          "type": "string"
        },
        "queryResult": {
          "description": "The query result of the bookmark.",
          "type": "string"
        },
        "updated": {
          "description": "The last time the bookmark was updated",
          "format": "date-time",
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/UserInfo",
          "description": "Describes a user that updated the bookmark",
          "type": "object"
        },
        "incidentInfo": {
          "$ref": "#/definitions/IncidentInfo",
          "description": "Describes an incident that relates to bookmark",
          "type": "object"
        }
      },
      "required": [
        "displayName",
        "query"
      ],
      "type": "object"
    },
    "Incident": {
      "allOf": [
        {
          "$ref": "../../../common/1.0/types.json#/definitions/ResourceWithEtag"
        }
      ],
      "description": "Represents an incident in Azure Security Insights.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/IncidentProperties",
          "description": "Incident properties",
          "x-ms-client-flatten": true
        }
      },
      "type": "object"
    },
    "IncidentAdditionalData": {
      "description": "Incident additional data property bag.",
      "properties": {
        "alertsCount": {
          "description": "The number of alerts in the incident",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "bookmarksCount": {
          "description": "The number of bookmarks in the incident",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "commentsCount": {
          "description": "The number of comments in the incident",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "alertProductNames": {
          "description": "List of product names of alerts in the incident",
          "items": {
            "description": "Alert product name",
            "type": "string"
          },
          "readOnly": true,
          "type": "array"
        },
        "tactics": {
          "description": "The tactics associated with incident",
          "items": {
            "$ref": "#/definitions/AttackTactic"
          },
          "readOnly": true,
          "type": "array"
        }
      },
      "type": "object"
    },
    "IncidentAlertList": {
      "description": "List of incident alerts.",
      "properties": {
        "value": {
          "description": "Array of incident alerts.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SecurityAlert"
          }
        }
      },
      "required": [
        "value"
      ]
    },
    "IncidentBookmarkList": {
      "description": "List of incident bookmarks.",
      "properties": {
        "value": {
          "description": "Array of incident bookmarks.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HuntingBookmark"
          }
        }
      },
      "required": [
        "value"
      ]
    },
    "IncidentComment": {
      "allOf": [
        {
          "$ref": "../../../common/1.0/types.json#/definitions/ResourceWithEtag"
        }
      ],
      "description": "Represents an incident comment",
      "properties": {
        "properties": {
          "$ref": "#/definitions/IncidentCommentProperties",
          "description": "Incident comment properties",
          "x-ms-client-flatten": true
        }
      },
      "type": "object"
    },
    "IncidentCommentList": {
      "description": "List of incident comments.",
      "properties": {
        "nextLink": {
          "description": "URL to fetch the next set of comments.",
          "readOnly": true,
          "type": "string"
        },
        "value": {
          "description": "Array of comments.",
          "items": {
            "$ref": "#/definitions/IncidentComment"
          },
          "type": "array"
        }
      },
      "required": [
        "value"
      ]
    },
    "IncidentCommentProperties": {
      "description": "Incident comment property bag.",
      "properties": {
        "createdTimeUtc": {
          "description": "The time the comment was created",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "lastModifiedTimeUtc": {
          "description": "The time the comment was updated",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "message": {
          "description": "The comment message",
          "type": "string"
        },
        "author": {
          "$ref": "#/definitions/ClientInfo",
          "description": "Describes the client that created the comment",
          "readOnly": true,
          "type": "object"
        }
      },
      "required": [
        "message"
      ],
      "type": "object"
    },
    "IncidentEntitiesResponse": {
      "description": "The incident related entities response.",
      "properties": {
        "entities": {
          "description": "Array of the incident related entities.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Entity"
          }
        },
        "metaData": {
          "description": "The metadata from the incident related entities results.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IncidentEntitiesResultsMetadata"
          }
        }
      }
    },
    "IncidentEntitiesResultsMetadata": {
      "description": "Information of a specific aggregation in the incident related entities result.",
      "properties": {
        "count": {
          "description": "Total number of aggregations of the given kind in the incident related entities result.",
          "type": "integer",
          "format": "int32"
        },
        "entityKind": {
          "$ref": "#/definitions/EntityInnerKind",
          "description": "The kind of the aggregated entity."
        }
      },
      "required": [
        "entityKind",
        "count"
      ],
      "type": "object"
    },
    "IncidentInfo": {
      "description": "Describes related incident information for the bookmark",
      "properties": {
        "incidentId": {
          "description": "Incident Id",
          "type": "string"
        },
        "severity": {
          "description": "The severity of the incident",
          "enum": [
            "Critical",
            "High",
            "Medium",
            "Low",
            "Informational"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "CaseSeverity",
            "values": [
              {
                "description": "Critical severity",
                "value": "Critical"
              },
              {
                "description": "High severity",
                "value": "High"
              },
              {
                "description": "Medium severity",
                "value": "Medium"
              },
              {
                "description": "Low severity",
                "value": "Low"
              },
              {
                "description": "Informational severity",
                "value": "Informational"
              }
            ]
          }
        },
        "title": {
          "description": "The title of the incident",
          "type": "string"
        },
        "relationName": {
          "description": "Relation Name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "IncidentLabel": {
      "description": "Represents an incident label",
      "properties": {
        "labelName": {
          "description": "The name of the label",
          "type": "string"
        },
        "labelType": {
          "description": "The type of the label",
          "enum": [
            "User",
            "System"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "modelAsString": true,
            "name": "IncidentLabelType",
            "values": [
              {
                "description": "Label manually created by a user",
                "value": "User"
              },
              {
                "description": "Label automatically created by the system",
                "value": "System"
              }
            ]
          }
        }
      },
      "required": [
        "labelName"
      ],
      "type": "object"
    },
    "IncidentList": {
      "description": "List all the incidents.",
      "properties": {
        "nextLink": {
          "description": "URL to fetch the next set of incidents.",
          "readOnly": true,
          "type": "string"
        },
        "value": {
          "description": "Array of incidents.",
          "items": {
            "$ref": "#/definitions/Incident"
          },
          "type": "array"
        }
      },
      "required": [
        "value"
      ]
    },
    "Label": {
      "description": "Label that will be used to tag and filter on.",
      "type": "string"
    },
    "IncidentOwnerInfo": {
      "description": "Information on the user an incident is assigned to",
      "properties": {
        "email": {
          "description": "The email of the user the incident is assigned to.",
          "type": "string"
        },
        "assignedTo": {
          "description": "The name of the user the incident is assigned to.",
          "type": "string"
        },
        "objectId": {
          "description": "The object id of the user the incident is assigned to.",
          "format": "uuid",
          "type": "string"
        },
        "userPrincipalName": {
          "description": "The user principal name of the user the incident is assigned to.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "IncidentProperties": {
      "description": "Describes incident properties",
      "properties": {
        "additionalData": {
          "$ref": "#/definitions/IncidentAdditionalData",
          "description": "Additional data on the incident",
          "readOnly": true,
          "type": "object"
        },
        "classification": {
          "description": "The reason the incident was closed",
          "enum": [
            "Undetermined",
            "TruePositive",
            "BenignPositive",
            "FalsePositive"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "IncidentClassification",
            "values": [
              {
                "description": "Incident classification was undetermined",
                "value": "Undetermined"
              },
              {
                "description": "Incident was true positive",
                "value": "TruePositive"
              },
              {
                "description": "Incident was benign positive",
                "value": "BenignPositive"
              },
              {
                "description": "Incident was false positive",
                "value": "FalsePositive"
              }
            ]
          }
        },
        "classificationComment": {
          "description": "Describes the reason the incident was closed",
          "type": "string"
        },
        "classificationReason": {
          "description": "The classification reason the incident was closed with",
          "enum": [
            "SuspiciousActivity",
            "SuspiciousButExpected",
            "IncorrectAlertLogic",
            "InaccurateData"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "IncidentClassificationReason",
            "values": [
              {
                "description": "Classification reason was suspicious activity",
                "value": "SuspiciousActivity"
              },
              {
                "description": "Classification reason was suspicious but expected",
                "value": "SuspiciousButExpected"
              },
              {
                "description": "Classification reason was incorrect alert logic",
                "value": "IncorrectAlertLogic"
              },
              {
                "description": "Classification reason was inaccurate data",
                "value": "InaccurateData"
              }
            ]
          }
        },
        "createdTimeUtc": {
          "description": "The time the incident was created",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "description": {
          "description": "The description of the incident",
          "type": "string"
        },
        "firstActivityTimeUtc": {
          "description": "The time of the first activity in the incident",
          "format": "date-time",
          "type": "string"
        },
        "incidentUrl": {
          "description": "The deep-link url to the incident in Azure portal",
          "readOnly": true,
          "type": "string"
        },
        "incidentNumber": {
          "description": "A sequential number",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "labels": {
          "description": "List of labels relevant to this incident",
          "items": {
            "$ref": "#/definitions/IncidentLabel"
          },
          "type": "array"
        },
        "lastActivityTimeUtc": {
          "description": "The time of the last activity in the incident",
          "format": "date-time",
          "type": "string"
        },
        "lastModifiedTimeUtc": {
          "description": "The last time the incident was updated",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "owner": {
          "$ref": "#/definitions/IncidentOwnerInfo",
          "description": "Describes a user that the incident is assigned to",
          "type": "object"
        },
        "relatedAnalyticRuleIds": {
          "description": "List of resource ids of Analytic rules related to the incident",
          "items": {
            "description": "Related Analytic rule resource id",
            "type": "string"
          },
          "readOnly": true,
          "type": "array"
        },
        "severity": {
          "description": "The severity of the incident",
          "enum": [
            "High",
            "Medium",
            "Low",
            "Informational"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "IncidentSeverity",
            "values": [
              {
                "description": "High severity",
                "value": "High"
              },
              {
                "description": "Medium severity",
                "value": "Medium"
              },
              {
                "description": "Low severity",
                "value": "Low"
              },
              {
                "description": "Informational severity",
                "value": "Informational"
              }
            ]
          }
        },
        "status": {
          "description": "The status of the incident",
          "enum": [
            "New",
            "Active",
            "Closed"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "IncidentStatus",
            "values": [
              {
                "description": "An active incident which isn't being handled currently",
                "value": "New"
              },
              {
                "description": "An active incident which is being handled",
                "value": "Active"
              },
              {
                "description": "A non-active incident",
                "value": "Closed"
              }
            ]
          }
        },
        "title": {
          "description": "The title of the incident",
          "type": "string"
        }
      },
      "required": [
        "title",
        "severity",
        "status"
      ],
      "type": "object"
    },
    "SecurityAlert": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        }
      ],
      "description": "Represents a security alert entity.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/SecurityAlertProperties",
          "description": "SecurityAlert entity properties",
          "x-ms-client-flatten": true
        }
      },
      "type": "object",
      "x-ms-discriminator-value": "SecurityAlert"
    },
    "SecurityAlertProperties": {
      "allOf": [
        {
          "$ref": "#/definitions/EntityCommonProperties"
        }
      ],
      "description": "SecurityAlert entity property bag.",
      "properties": {
        "alertDisplayName": {
          "description": "The display name of the alert.",
          "readOnly": true,
          "type": "string"
        },
        "alertType": {
          "description": "The type name of the alert.",
          "readOnly": true,
          "type": "string"
        },
        "compromisedEntity": {
          "description": "Display name of the main entity being reported on.",
          "readOnly": true,
          "type": "string"
        },
        "confidenceLevel": {
          "description": "The confidence level of this alert.",
          "enum": [
            "Unknown",
            "Low",
            "High"
          ],
          "readOnly": true,
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "ConfidenceLevel",
            "values": [
              {
                "description": "Unknown confidence, the is the default value",
                "value": "Unknown"
              },
              {
                "description": "Low confidence, meaning we have some doubts this is indeed malicious or part of an attack",
                "value": "Low"
              },
              {
                "description": "High confidence that the alert is true positive malicious",
                "value": "High"
              }
            ]
          }
        },
        "confidenceReasons": {
          "description": "The confidence reasons",
          "items": {
            "description": "confidence reason item",
            "properties": {
              "reason": {
                "description": "The reason's description",
                "readOnly": true,
                "type": "string"
              },
              "reasonType": {
                "description": "The type (category) of the reason",
                "readOnly": true,
                "type": "string"
              }
            },
            "type": "object"
          },
          "readOnly": true,
          "type": "array"
        },
        "confidenceScore": {
          "description": "The confidence score of the alert.",
          "format": "double",
          "readOnly": true,
          "type": "number"
        },
        "confidenceScoreStatus": {
          "description": "The confidence score calculation status, i.e. indicating if score calculation is pending for this alert, not applicable or final.",
          "enum": [
            "NotApplicable",
            "InProcess",
            "NotFinal",
            "Final"
          ],
          "readOnly": true,
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "ConfidenceScoreStatus",
            "values": [
              {
                "description": "Score will not be calculated for this alert as it is not supported by virtual analyst",
                "value": "NotApplicable"
              },
              {
                "description": "No score was set yet and calculation is in progress",
                "value": "InProcess"
              },
              {
                "description": "Score is calculated and shown as part of the alert, but may be updated again at a later time following the processing of additional data",
                "value": "NotFinal"
              },
              {
                "description": "Final score was calculated and available",
                "value": "Final"
              }
            ]
          }
        },
        "description": {
          "description": "Alert description.",
          "readOnly": true,
          "type": "string"
        },
        "endTimeUtc": {
          "description": "The impact end time of the alert (the time of the last event contributing to the alert).",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "intent": {
          "description": "Holds the alert intent stage(s) mapping for this alert.",
          "enum": [
            "Unknown",
            "Probing",
            "Exploitation",
            "Persistence",
            "PrivilegeEscalation",
            "DefenseEvasion",
            "CredentialAccess",
            "Discovery",
            "LateralMovement",
            "Execution",
            "Collection",
            "Exfiltration",
            "CommandAndControl",
            "Impact"
          ],
          "readOnly": true,
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "KillChainIntent",
            "values": [
              {
                "description": "The default value.",
                "value": "Unknown"
              },
              {
                "description": "Probing could be an attempt to access a certain resource regardless of a malicious intent or a failed attempt to gain access to a target system to gather information prior to exploitation. This step is usually detected as an attempt originating from outside the network in attempt to scan the target system and find a way in.",
                "value": "Probing"
              },
              {
                "description": "Exploitation is the stage where an attacker manage to get foothold on the attacked resource. This stage is applicable not only for compute hosts, but also for resources such as user accounts, certificates etc. Adversaries will often be able to control the resource after this stage.",
                "value": "Exploitation"
              },
              {
                "description": "Persistence is any access, action, or configuration change to a system that gives an adversary a persistent presence on that system. Adversaries will often need to maintain access to systems through interruptions such as system restarts, loss of credentials, or other failures that would require a remote access tool to restart or alternate backdoor for them to regain access.",
                "value": "Persistence"
              },
              {
                "description": "Privilege escalation is the result of actions that allow an adversary to obtain a higher level of permissions on a system or network. Certain tools or actions require a higher level of privilege to work and are likely necessary at many points throughout an operation. User accounts with permissions to access specific systems or perform specific functions necessary for adversaries to achieve their objective may also be considered an escalation of privilege.",
                "value": "PrivilegeEscalation"
              },
              {
                "description": "Defense evasion consists of techniques an adversary may use to evade detection or avoid other defenses. Sometimes these actions are the same as or variations of techniques in other categories that have the added benefit of subverting a particular defense or mitigation. ",
                "value": "DefenseEvasion"
              },
              {
                "description": "Credential access represents techniques resulting in access to or control over system, domain, or service credentials that are used within an enterprise environment. Adversaries will likely attempt to obtain legitimate credentials from users or administrator accounts (local system administrator or domain users with administrator access) to use within the network. With sufficient access within a network, an adversary can create accounts for later use within the environment.",
                "value": "CredentialAccess"
              },
              {
                "description": "Discovery consists of techniques that allow the adversary to gain knowledge about the system and internal network. When adversaries gain access to a new system, they must orient themselves to what they now have control of and what benefits operating from that system give to their current objective or overall goals during the intrusion. The operating system provides many native tools that aid in this post-compromise information-gathering phase.",
                "value": "Discovery"
              },
              {
                "description": "Lateral movement consists of techniques that enable an adversary to access and control remote systems on a network and could, but does not necessarily, include execution of tools on remote systems. The lateral movement techniques could allow an adversary to gather information from a system without needing additional tools, such as a remote access tool. An adversary can use lateral movement for many purposes, including remote Execution of tools, pivoting to additional systems, access to specific information or files, access to additional credentials, or to cause an effect.",
                "value": "LateralMovement"
              },
              {
                "description": "The execution tactic represents techniques that result in execution of adversary-controlled code on a local or remote system. This tactic is often used in conjunction with lateral movement to expand access to remote systems on a network.",
                "value": "Execution"
              },
              {
                "description": "Collection consists of techniques used to identify and gather information, such as sensitive files, from a target network prior to exfiltration. This category also covers locations on a system or network where the adversary may look for information to exfiltrate.",
                "value": "Collection"
              },
              {
                "description": "Exfiltration refers to techniques and attributes that result or aid in the adversary removing files and information from a target network. This category also covers locations on a system or network where the adversary may look for information to exfiltrate.",
                "value": "Exfiltration"
              },
              {
                "description": "The command and control tactic represents how adversaries communicate with systems under their control within a target network.",
                "value": "CommandAndControl"
              },
              {
                "description": "The impact intent primary objective is to directly reduce the availability or integrity of a system, service, or network; including manipulation of data to impact a business or operational process. This would often refer to techniques such as ransom-ware, defacement, data manipulation and others.",
                "value": "Impact"
              }
            ]
          }
        },
        "providerAlertId": {
          "description": "The identifier of the alert inside the product which generated the alert.",
          "readOnly": true,
          "type": "string"
        },
        "processingEndTime": {
          "description": "The time the alert was made available for consumption.",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "productComponentName": {
          "description": "The name of a component inside the product which generated the alert.",
          "readOnly": true,
          "type": "string"
        },
        "productName": {
          "description": "The name of the product which published this alert.",
          "readOnly": true,
          "type": "string"
        },
        "productVersion": {
          "description": "The version of the product generating the alert.",
          "readOnly": true,
          "type": "string"
        },
        "remediationSteps": {
          "description": "Manual action items to take to remediate the alert.",
          "items": {
            "type": "string"
          },
          "readOnly": true,
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/AlertSeverity",
          "description": "The severity of the alert"
        },
        "startTimeUtc": {
          "description": "The impact start time of the alert (the time of the first event contributing to the alert).",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "status": {
          "description": "The lifecycle status of the alert.",
          "enum": [
            "Unknown",
            "New",
            "Resolved",
            "Dismissed",
            "InProgress"
          ],
          "readOnly": true,
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "AlertStatus",
            "values": [
              {
                "description": "Unknown value",
                "value": "Unknown"
              },
              {
                "description": "New alert",
                "value": "New"
              },
              {
                "description": "Alert closed after handling",
                "value": "Resolved"
              },
              {
                "description": "Alert dismissed as false positive",
                "value": "Dismissed"
              },
              {
                "description": "Alert is being handled",
                "value": "InProgress"
              }
            ]
          }
        },
        "systemAlertId": {
          "description": "Holds the product identifier of the alert for the product.",
          "readOnly": true,
          "type": "string"
        },
        "tactics": {
          "description": "The tactics of the alert",
          "items": {
            "$ref": "#/definitions/AttackTactic"
          },
          "readOnly": true,
          "type": "array"
        },
        "timeGenerated": {
          "description": "The time the alert was generated.",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "vendorName": {
          "description": "The name of the vendor that raise the alert.",
          "readOnly": true,
          "type": "string"
        },
        "alertLink": {
          "description": "The uri link of the alert.",
          "readOnly": true,
          "type": "string"
        },
        "resourceIdentifiers": {
          "description": "The list of resource identifiers of the alert.",
          "items": {
            "type": "object"
          },
          "readOnly": true,
          "type": "array"
        }
      },
      "type": "object"
    },
    "UserInfo": {
      "description": "User information that made some action",
      "properties": {
        "email": {
          "description": "The email of the user.",
          "readOnly": true,
          "type": "string"
        },
        "name": {
          "description": "The name of the user.",
          "readOnly": true,
          "type": "string"
        },
        "objectId": {
          "description": "The object id of the user.",
          "format": "uuid",
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    }
  },
  "parameters": {
    "Incident": {
      "description": "The incident",
      "in": "body",
      "name": "incident",
      "required": true,
      "schema": {
        "$ref": "#/definitions/Incident"
      },
      "x-ms-parameter-location": "method"
    },
    "IncidentComment": {
      "description": "The incident comment",
      "in": "body",
      "name": "incidentComment",
      "required": true,
      "schema": {
        "$ref": "#/definitions/IncidentComment"
      },
      "x-ms-parameter-location": "method"
    },
    "IncidentCommentId": {
      "description": "Incident comment ID",
      "in": "path",
      "name": "incidentCommentId",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "IncidentId": {
      "description": "Incident ID",
      "in": "path",
      "name": "incidentId",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "ODataFilter": {
      "description": "Filters the results, based on a Boolean condition. Optional.",
      "in": "query",
      "name": "$filter",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "ODataOrderBy": {
      "description": "Sorts the results. Optional.",
      "in": "query",
      "name": "$orderby",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "ODataSkipToken": {
      "description": "Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. Optional.",
      "in": "query",
      "name": "$skipToken",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "ODataTop": {
      "description": "Returns only the first n results. Optional.",
      "format": "int32",
      "in": "query",
      "name": "$top",
      "required": false,
      "type": "integer",
      "x-ms-parameter-location": "method"
    },
    "ResourceGroupName": {
      "description": "The name of the resource group within the user's subscription. The name is case insensitive.",
      "in": "path",
      "maxLength": 90,
      "minLength": 1,
      "name": "resourceGroupName",
      "pattern": "^[-\\w\\._\\(\\)]+$",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "SubscriptionId": {
      "description": "Azure subscription ID",
      "in": "path",
      "name": "subscriptionId",
      "pattern": "^[0-9A-Fa-f]{8}-([0-9A-Fa-f]{4}-){3}[0-9A-Fa-f]{12}$",
      "required": true,
      "type": "string"
    }
  }
}
