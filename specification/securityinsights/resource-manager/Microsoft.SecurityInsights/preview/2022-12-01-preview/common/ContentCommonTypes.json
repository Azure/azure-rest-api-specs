{
  "swagger": "2.0",
  "info": {
    "version": "2022-12-01-preview",
    "title": "Common content metadata types"
  },
  "paths": {},
  "definitions": {
    "contentMetadataContentId": {
      "description": "Static ID for the content.  Used to identify dependencies and content from solutions or community.  Hard-coded/static for out of the box content and solutions. Can be optionally set for user created content to define dependencies.  If an active content item is made from a metadata, both will have the same contentId.",
      "type": "string"
    },
    "contentMetadataParentId": {
      "description": "Full parent resource ID of the content item the metadata is for.  This is the full resource ID including the scope (subscription and resource group)",
      "type": "string"
    },
    "contentMetadataDisplayName": {
      "description": "DisplayName of the content.",
      "type": "string"
    },
    "contentMetadataVersion": {
      "description": "Version of the content.  Default and recommended format is numeric (e.g. 1, 1.0, 1.0.0, 1.0.0.0), following ARM template best practices.  Can also be any string, but then we cannot guarantee any version checks",
      "type": "string"
    },
    "contentMetadataPackageKind": {
      "description": "The package kind",
      "enum": [
        "Solution",
        "Standalone"
      ],
      "type": "string",
      "x-ms-enum": {
        "modelAsString": true,
        "name": "packageKind",
        "values": [
          {
            "value": "Solution"
          },
          {
            "value": "Standalone"
          }
        ]
      }
    },
    "contentMetadataKind": {
      "type": "string",
      "description": "The kind of content the metadata is for.",
      "enum": [
        "DataConnector",
        "DataType",
        "Workbook",
        "WorkbookTemplate",
        "Playbook",
        "PlaybookTemplate",
        "AnalyticsRuleTemplate",
        "AnalyticsRule",
        "HuntingQuery",
        "InvestigationQuery",
        "Parser",
        "Watchlist",
        "WatchlistTemplate",
        "Solution",
        "AzureFunction",
        "LogicAppsCustomConnector",
        "AutomationRule"
      ],
      "x-ms-enum": {
        "modelAsString": true,
        "name": "kind",
        "values": [
          {
            "value": "DataConnector"
          },
          {
            "value": "DataType"
          },
          {
            "value": "Workbook"
          },
          {
            "value": "WorkbookTemplate"
          },
          {
            "value": "Playbook"
          },
          {
            "value": "PlaybookTemplate"
          },
          {
            "value": "AnalyticsRuleTemplate"
          },
          {
            "value": "AnalyticsRule"
          },
          {
            "value": "HuntingQuery"
          },
          {
            "value": "InvestigationQuery"
          },
          {
            "value": "Parser"
          },
          {
            "value": "Watchlist"
          },
          {
            "value": "WatchlistTemplate"
          },
          {
            "value": "Solution"
          },
          {
            "value": "AzureFunction"
          },
          {
            "value": "LogicAppsCustomConnector"
          },
          {
            "value": "AutomationRule"
          }
        ]
      }
    },
    "contentMetadataTrueFalseFlag": {
      "type": "string",
      "description": "The boolean value the metadata is for.",
      "enum": [
        "true",
        "false"
      ],
      "x-ms-enum": {
        "modelAsString": true,
        "name": "flag",
        "values": [
          {
            "value": "true"
          },
          {
            "value": "false"
          }
        ]
      }
    },
    "contentMetadataSource": {
      "description": "The original source of the content item, where it comes from.",
      "type": "object",
      "required": [
        "kind"
      ],
      "properties": {
        "kind": {
          "description": "Source type of the content",
          "type": "string",
          "enum": [
            "LocalWorkspace",
            "Community",
            "Solution",
            "SourceRepository"
          ],
          "x-ms-enum": {
            "modelAsString": true,
            "name": "sourceKind",
            "values": [
              {
                "value": "LocalWorkspace"
              },
              {
                "value": "Community"
              },
              {
                "value": "Solution"
              },
              {
                "value": "SourceRepository"
              }
            ]
          }
        },
        "name": {
          "description": "Name of the content source.  The repo name, solution name, LA workspace name etc.",
          "type": "string"
        },
        "sourceId": {
          "description": "ID of the content source.  The solution ID, workspace ID, etc",
          "type": "string"
        }
      }
    },
    "contentMetadataAuthor": {
      "type": "object",
      "description": "Publisher or creator of the content item.",
      "properties": {
        "name": {
          "description": "Name of the author. Company or person.",
          "type": "string"
        },
        "email": {
          "description": "Email of author contact",
          "type": "string"
        },
        "link": {
          "description": "Link for author/vendor page",
          "type": "string"
        }
      }
    },
    "contentMetadataSupport": {
      "type": "object",
      "description": "Support information for the content item.",
      "required": [
        "tier"
      ],
      "properties": {
        "tier": {
          "description": "Type of support for content item",
          "type": "string",
          "enum": [
            "Microsoft",
            "Partner",
            "Community"
          ],
          "x-ms-enum": {
            "modelAsString": true,
            "name": "supportTier",
            "values": [
              {
                "value": "Microsoft"
              },
              {
                "value": "Partner"
              },
              {
                "value": "Community"
              }
            ]
          }
        },
        "name": {
          "description": "Name of the support contact. Company or person.",
          "type": "string"
        },
        "email": {
          "description": "Email of support contact",
          "type": "string"
        },
        "link": {
          "description": "Link for support help, like to support page to open a ticket etc.",
          "type": "string"
        }
      }
    },
    "contentMetadataDependencies": {
      "description": "Dependencies for the content item, what other content items it requires to work.  Can describe more complex dependencies using a recursive/nested structure. For a single dependency an id/kind/version can be supplied or operator/criteria for complex dependencies.",
      "type": "object",
      "properties": {
        "contentId": {
          "description": "Id of the content item we depend on",
          "$ref": "#/definitions/contentMetadataContentId"
        },
        "kind": {
          "description": "Type of the content item we depend on",
          "$ref": "#/definitions/contentMetadataKind"
        },
        "version": {
          "description": "Version of the the content item we depend on.  Can be blank, * or missing to indicate any version fulfills the dependency.  If version does not match our defined numeric format then an exact match is required.",
          "$ref": "#/definitions/contentMetadataVersion"
        },
        "name": {
          "description": "Name of the content item",
          "type": "string"
        },
        "operator": {
          "description": "Operator used for list of dependencies in criteria array.",
          "type": "string",
          "enum": [
            "AND",
            "OR"
          ],
          "x-ms-enum": {
            "modelAsString": true,
            "name": "operator",
            "values": [
              {
                "value": "AND"
              },
              {
                "value": "OR"
              }
            ]
          }
        },
        "criteria": {
          "description": "This is the list of dependencies we must fulfill, according to the AND/OR operator",
          "type": "array",
          "items": {
            "$ref": "#/definitions/contentMetadataDependencies",
            "description": "Dependencies for the content item, what other content items it requires to work.  Can describe more complex dependencies using a recursive/nested structure. For a single dependency an id/kind/version can be supplied or operator/criteria for complex formats."
          },
          "x-ms-identifiers": [
            "contentId"
          ]
        }
      }
    },
    "contentMetadataCategories": {
      "type": "object",
      "description": "categories for the solution content item",
      "properties": {
        "domains": {
          "description": "domain for the solution content item",
          "type": "array",
          "example": [
            "str1",
            "str2",
            "str3"
          ],
          "items": {
            "type": "string"
          }
        },
        "verticals": {
          "description": "Industry verticals for the solution content item",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "str1",
            "str2",
            "str3"
          ]
        }
      }
    },
    "contentMetadataProviders": {
      "description": "Providers for the solution content item",
      "type": "array",
      "example": [
        "str1",
        "str2",
        "str3"
      ],
      "items": {
        "type": "string"
      }
    },
    "contentMetadataFirstPublishDate": {
      "description": "first publish date of solution content item",
      "type": "string",
      "format": "date"
    },
    "contentMetadataLastPublishDate": {
      "description": "last publish date of solution content item",
      "type": "string",
      "format": "date"
    },
    "contentMetadataCustomVersion": {
      "description": "The custom version of the content. A optional free text",
      "type": "string"
    },
    "contentMetadataContentSchemaVersion": {
      "description": "Schema version of the content. Can be used to distinguish between different flow based on the schema version",
      "type": "string"
    },
    "contentMetadataIcon": {
      "description": "the icon identifier. this id can later be fetched from the metadata",
      "type": "string"
    },
    "contentMetadataThreatAnalysisTactics": {
      "description": "the tactics the resource covers",
      "type": "array",
      "example": [
        "reconnaissance",
        "exfiltration"
      ],
      "items": {
        "type": "string"
      }
    },
    "contentMetadataThreatAnalysisTechniques": {
      "description": "the techniques the resource covers, these have to be aligned with the tactics being used",
      "type": "array",
      "example": [
        "T1548",
        "T1548.001",
        "T1134.003"
      ],
      "items": {
        "type": "string"
      }
    },
    "contentMetadataPreviewImages": {
      "description": "preview image file names. These will be taken from the solution artifacts",
      "type": "array",
      "example": [
        "example.png",
        "example2.jpeg"
      ],
      "items": {
        "type": "string"
      }
    },
    "contentMetadataPreviewImagesDark": {
      "description": "preview image file names. These will be taken from the solution artifacts. used for dark theme support",
      "type": "array",
      "example": [
        "example.png",
        "example2.jpeg"
      ],
      "items": {
        "type": "string"
      }
    },
    "contentMainTemplate": {
      "description": "ARM template resource for main template",
      "allOf": [
        {
          "$ref": "../../../../common/2.0/types.json#/definitions/ResourceWithEtag"
        }
      ],
      "properties": {
        "properties": {
          "description": "main template properties",
          "$ref": "#/definitions/contentMainTemplateProperties",
          "x-ms-client-flatten": true
        }
      },
      "type": "object"
    },
    "contentMainTemplateProperties": {
      "description": "main template properties",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "API version of the ARM resource",
          "type": "string"
        },
        "dependsOn": {
          "description": "dependencies of the ARM template",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resources": {
          "description": "resources in the ARM template",
          "type": "array",
          "items": {
            "$ref": "#/definitions/contentMainTemplate"
          }
        }
      }
    }
  },
  "parameters": {
    "sentinelWorkspaceName": {
      "description": "The name of the workspace.",
      "in": "path",
      "maxLength": 63,
      "minLength": 4,
      "name": "sentinelWorkspaceName",
      "required": true,
      "type": "string",
      "pattern": "^[a-z0-9A-Z][a-z0-9A-Z-]*[a-z0-9A-Z]$",
      "x-ms-parameter-location": "method"
    }
  }
}
