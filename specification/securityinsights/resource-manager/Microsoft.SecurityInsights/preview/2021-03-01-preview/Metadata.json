{
  "swagger": "2.0",
  "info": {
    "title": "Security Insights",
    "description": "API spec for Microsoft.SecurityInsights (Azure Security Insights) resource provider",
    "version": "2021-03-01-preview"
  },
  "host": "management.azure.com",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ],
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "flow": "implicit",
      "description": "Azure Active Directory OAuth2 Flow",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      }
    }
  },
  "paths": {
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{operationalInsightsResourceProvider}/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/metadata": {
      "get": {
        "x-ms-examples": {
          "Get all metadata.": {
            "$ref": "./examples/metadata/GetAllMetadata.json"
          },
          "Get all metadata with OData query parameters": {
            "$ref": "./examples/metadata/GetAllMetadataOData.json"
          }
        },
        "tags": [
          "Metadata"
        ],
        "description": "List of all metadata",
        "operationId": "Metadata_List",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "../../../common/1.0/types.json#/parameters/OperationalInsightsResourceProvider"
          },
          {
            "$ref": "../../../common/1.0/types.json#/parameters/WorkspaceName"
          },
          {
            "$ref": "#/parameters/ODataFilter"
          },
          {
            "$ref": "#/parameters/ODataOrderBy"
          },
          {
            "$ref": "#/parameters/ODataTop"
          },
          {
            "$ref": "#/parameters/ODataSkip"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MetadataList"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../common/1.0/types.json#/definitions/CloudError"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{operationalInsightsResourceProvider}/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/metadata/{metadataName}": {
      "get": {
        "x-ms-examples": {
          "Get single metadata by name": {
            "$ref": "./examples/metadata/GetMetadata.json"
          }
        },
        "tags": [
          "Metadata"
        ],
        "description": "Get a Metadata.",
        "operationId": "Metadata_Get",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "../../../common/1.0/types.json#/parameters/OperationalInsightsResourceProvider"
          },
          {
            "$ref": "../../../common/1.0/types.json#/parameters/WorkspaceName"
          },
          {
            "$ref": "#/parameters/MetadataName"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Metadata"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../common/1.0/types.json#/definitions/CloudError"
            }
          }
        }
      },
      "delete": {
        "x-ms-examples": {
          "Delete metadata.": {
            "$ref": "./examples/metadata/DeleteMetadata.json"
          }
        },
        "tags": [
          "Metadata"
        ],
        "description": "Delete a Metadata.",
        "operationId": "Metadata_Delete",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "../../../common/1.0/types.json#/parameters/OperationalInsightsResourceProvider"
          },
          {
            "$ref": "../../../common/1.0/types.json#/parameters/WorkspaceName"
          },
          {
            "$ref": "#/parameters/MetadataName"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../common/1.0/types.json#/definitions/CloudError"
            }
          }
        }
      },
      "put": {
        "x-ms-examples": {
          "Update metadata.": {
            "$ref": "./examples/metadata/PutMetadata.json"
          }
        },
        "tags": [
          "Metadata"
        ],
        "description": "Create/replace a Metadata.",
        "operationId": "Metadata_Put",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "../../../common/1.0/types.json#/parameters/OperationalInsightsResourceProvider"
          },
          {
            "$ref": "../../../common/1.0/types.json#/parameters/WorkspaceName"
          },
          {
            "$ref": "#/parameters/MetadataName"
          },
          {
            "$ref": "#/parameters/Metadata"
          }
        ],
        "responses": {
          "200": {
            "description": "OK, Operation successfully completed",
            "schema": {
              "$ref": "#/definitions/Metadata"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Metadata"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../common/1.0/types.json#/definitions/CloudError"
            }
          }
        }
      },
      "patch": {
        "x-ms-examples": {
          "Update metadata.": {
            "$ref": "./examples/metadata/PatchMetadata.json"
          }
        },
        "tags": [
          "Metadata"
        ],
        "description": "Partially update an existing Metadata.",
        "operationId": "Metadata_Patch",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "../../../common/1.0/types.json#/parameters/OperationalInsightsResourceProvider"
          },
          {
            "$ref": "../../../common/1.0/types.json#/parameters/WorkspaceName"
          },
          {
            "$ref": "#/parameters/MetadataName"
          },
          {
            "$ref": "#/parameters/Metadata"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Metadata"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../common/1.0/types.json#/definitions/CloudError"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "MetadataList": {
      "description": "List of all the metadata.",
      "properties": {
        "value": {
          "description": "Array of metadata.",
          "items": {
            "$ref": "#/definitions/Metadata"
          },
          "type": "array"
        }
      },
      "required": [
        "value"
      ]
    },
    "Metadata": {
      "allOf": [
        {
          "$ref": "../../../common/1.0/types.json#/definitions/ResourceWithEtag"
        }
      ],
      "description": "Metadata.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/MetadataProperties",
          "description": "Metadata properties",
          "x-ms-client-flatten": true
        }
      },
      "type": "object"
    },
    "MetadataId": {
      "description": "Static ID for the content.  Used to identify dependencies and content from solutions or community.  Hard-coded/static for out of the box content and solutions. Dynamic for user-created.  This is the resource name",
      "type": "string",
      "minLength": 1
    },
    "MetadataParentId": {
      "description": "Full parent resource ID of the content item the metadata is for.  This is the full resource ID including the scope (subscription and resource group)",
      "type": "string",
      "minLength": 1
    },
    "MetadataVersion": {
      "description": "Version of the content.  Default and recommended format is numeric (e.g. 1, 1.0, 1.0.0, 1.0.0.0), following ARM template best practices.  Can also be any string, but then we cannot guarantee any version checks",
      "type": "string"
    },
    "MetadataKind": {
      "type": "string",
      "description": "The kind of content the metadata is for.",
      "enum": [
        "dataConnector",
        "dataType",
        "workbook",
        "workbookTemplate",
        "playbook",
        "analyticRuleTemplate",
        "analyticRule",
        "huntingQuery",
        "investigationQuery",
        "parser"
      ],
      "x-ms-enum": {
        "modelAsString": true,
        "name": "kind",
        "values": [
          {"value": "dataConnector"},
          {"value": "dataType"},
          {"value": "workbook"},
          {"value": "workbookTemplate"},
          {"value": "playbook"},
          {"value": "analyticRuleTemplate"},
          {"value": "analyticRule"},
          {"value": "huntingQuery"},
          {"value": "investigationQuery"},
          {"value": "parser"}
        ]
      }
    },
    "MetadataSource": {          
      "description": "Source of the content.  This is where/how it was created",
      "type": "object",
      "required": ["kind"],
      "properties": {
        "kind": {
          "description": "Source type of the content",
          "type": "string",
          "enum": [
            "localWorkspace",
            "community",
            "solution",
            "sourceRepository"
          ],
          "x-ms-enum": {
            "modelAsString": true,
            "name": "kind",
            "values": [
              {"value": "localWorkspace"},
              {"value": "community"},
              {"value": "solution"},
              {"value": "sourceRepository"}
            ]
          }
        },
        "name": {
          "description": "Name of the content source.  The repo name, solution name, LA workspace name etc.",
          "type": "string"
        }
      }
    },
    "MetadataAuthor": {         
      "type": "object",
      "required": ["name"],
      "description": "The creator of the content item.",
      "properties": {
        "name": {
          "description": "Name of the author.  For localWorkspace it is automatically the workspace user.",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "MetadataSupport": {
      "type": "object",
      "description": "Support information for the metadata - type, name, contact information",
      "required": ["name", "tier"],
      "properties": {
        "tier": {
          "description": "Type of support for content item",
          "type": "string",
          "enum": ["microsoft", "developer", "community"],
          "x-ms-enum": {
            "modelAsString": true,
            "name": "tier",
            "values": [
              {"value": "microsoft"},
              {"value": "developer"},
              {"value": "community"}
            ]
          }
        },
        "name": {
          "description": "Name of support contact or company",
          "type": "string",
          "examples": ["Microsoft", "Joe Contoso"]
        },
        "email": {
          "description": "Email of support contact",
          "type": "string",
          "format": "email"
        },
        "link": {
          "description": "Link for support help, like to support page to open a ticket etc",
          "type": "string",
          "format": "uri",
          "examples": ["https://support.microsoft.com/"]
        }
      }
    },
    "MetadataDependencies": {
      "description": "Dependencies for the content item, what other content items it requires to work.  Can describe more complex dependencies using a recursive/nested structure.  We allow the operators AND/OR.",
      "type": "object",
      "required": ["operator", "criteria"],
      "properties": {
        "operator": {
          "type": "string",
          "enum": ["AND", "OR"],
          "x-ms-enum": {
            "modelAsString": true,
            "name": "tier",
            "values": [
              {"value": "AND"},
              {"value": "OR"}
            ]
          }
        },
        "items": {
          "description": "This is the list of dependencies we must fulfill, according to the AND/OR operator",
          "type": "array",
          "items": {
            "anyOf": [
              {
                "description": "A content dependency is firstly an id and type, version is optional",
                "type": "object",
                "required": ["id", "kind"],
                "properties": {
                  "id": {
                    "description": "Id of the content item we depend on",
                    "$ref": "#/definitions/MetadataId"
                  },
                  "type": {
                    "description": "Type of the content item we depend on",
                    "$ref": "#/definitions/MetadataKind"
                  },
                  "version": {
                    "description": "Version of the the content ite we depend on.  Can be blank, * or missing to indicate any version fulfills the dependency.  If version does not match our defined numeric format then an exact match is required.",
                    "$ref": "#/definitions/MetadataVersion"
                  }
                }
              },
              {
                "$ref": "#/definitions/MetadataDependencies",
                "description": "A nested dependency, this helps for scenarios of requiring combinations of AND/OR.  Example: we need one of 5 data connectors AND a specific playbook AND a specific parser."
              }
            ]
          }
        }
      }},
    "MetadataProperties": {
      "description": "Metadata property bag.",
      "required": [
        "id", "parentId", "kind"
      ],
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/MetadataId",
          "description": "Static ID for the content.  Used to identify dependencies and content from solutions or community.  Hard-coded/static for out of the box content and solutions. Dynamic for user-created.  This is the resource name"
        },
        "parentId": {
          "$ref": "#/definitions/MetadataParentId",
          "description": "Full parent resource ID of the content item the metadata is for.  This is the full resource ID including the scope (subscription and resource group)"
        },
        "version": {
          "$ref": "#/definitions/MetadataVersion",
          "description": "Version of the content.  Default and recommended format is numeric (e.g. 1, 1.0, 1.0.0, 1.0.0.0), following ARM template best practices.  Can also be any string, but then we cannot guarantee any version checks"
        },
        "kind": {
          "$ref": "#/definitions/MetadataKind",
          "description": "The kind of content the metadata is for."
        },
        "source": {
          "$ref": "#/definitions/MetadataSource",
          "description": "Source of the content.  This is where/how it was created."
        },
        "author": {
          "$ref": "#/definitions/MetadataAuthor",
          "description": "The creator of the content item."
        },
        "support": {
          "$ref": "#/definitions/MetadataSupport",
          "description": "Support information for the metadata - type, name, contact information"
        },
        "dependencies": {
          "$ref": "#/definitions/MetadataDependencies",
          "description": "Dependencies for the content item, what other content items it requires to work.  Can describe more complex dependencies using a recursive/nested structure.  We allow the operators AND/OR."
        }
      }
    },
    "MetadataPropertiesPatch": {
      "description": "Metadata property bag for patch requests.  This is the same as the MetadataProperties, but with nothing required",
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/MetadataId",
          "description": "Static ID for the content.  Used to identify dependencies and content from solutions or community.  Hard-coded/static for out of the box content and solutions. Dynamic for user-created.  This is the resource name"
        },
        "parentId": {
          "$ref": "#/definitions/MetadataParentId",
          "description": "Full parent resource ID of the content item the metadata is for.  This is the full resource ID including the scope (subscription and resource group)"
        },
        "version": {
          "$ref": "#/definitions/MetadataVersion",
          "description": "Version of the content.  Default and recommended format is numeric (e.g. 1, 1.0, 1.0.0, 1.0.0.0), following ARM template best practices.  Can also be any string, but then we cannot guarantee any version checks"
        },
        "kind": {
          "$ref": "#/definitions/MetadataKind",
          "description": "The kind of content the metadata is for."
        },
        "source": {
          "$ref": "#/definitions/MetadataSource",
          "description": "Source of the content.  This is where/how it was created."
        },
        "author": {
          "$ref": "#/definitions/MetadataAuthor",
          "description": "The creator of the content item."
        },
        "support": {
          "$ref": "#/definitions/MetadataSupport",
          "description": "Support information for the metadata - type, name, contact information"
        },
        "dependencies": {
          "$ref": "#/definitions/MetadataDependencies",
          "description": "Dependencies for the content item, what other content items it requires to work.  Can describe more complex dependencies using a recursive/nested structure.  We allow the operators AND/OR."
        }
      }
    }
  },
  "parameters": {
    "Metadata": {
      "description": "The Metadata",
      "in": "body",
      "name": "metadata",
      "required": true,
      "schema": {
        "$ref": "#/definitions/Metadata"
      },
      "x-ms-parameter-location": "method"
    },
    "MetadataName": {
      "description": "The Metadata name.",
      "in": "path",
      "name": "metadataName",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "SubscriptionId": {
      "description": "Azure subscription ID",
      "in": "path",
      "name": "subscriptionId",
      "pattern": "^[0-9A-Fa-f]{8}-([0-9A-Fa-f]{4}-){3}[0-9A-Fa-f]{12}$",
      "required": true,
      "type": "string"
    },
    "ResourceGroupName": {
      "description": "The name of the resource group within the user's subscription. The name is case insensitive.",
      "in": "path",
      "maxLength": 90,
      "minLength": 1,
      "name": "resourceGroupName",
      "pattern": "^[-\\w\\._\\(\\)]+$",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "WorkspaceName": {
      "description": "The name of the workspace.",
      "in": "path",
      "name": "workspaceName",
      "maxLength": 90,
      "minLength": 1,
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "OperationalInsightsResourceProvider": {
      "description": "The namespace of workspaces resource provider- Microsoft.OperationalInsights.",
      "in": "path",
      "name": "operationalInsightsResourceProvider",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "ODataFilter": {
      "description": "Filters the results, based on a Boolean condition. Optional.",
      "in": "query",
      "name": "$filter",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "ODataOrderBy": {
      "description": "Sorts the results. Optional.",
      "in": "query",
      "name": "$orderby",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "ODataSkip": {
      "description": "Used to skip n elements in the OData query (offset). Returns a nextLink to the next page of results if there are any left.",
      "in": "query",
      "name": "$skip",
      "required": false,
      "type": "integer",
      "x-ms-parameter-location": "method"
    },
    "ODataTop": {
      "description": "Returns only the first n results. Optional.",
      "format": "int32",
      "in": "query",
      "name": "$top",
      "required": false,
      "type": "integer",
      "x-ms-parameter-location": "method"
    }
  }
}
