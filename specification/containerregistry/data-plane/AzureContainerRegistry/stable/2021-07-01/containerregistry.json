{
  "swagger": "2.0",
  "info": {
    "title": "Azure Container Registry",
    "version": "2021-07-01",
    "description": "Metadata API definition for the Azure Container Registry runtime",
    "x-typespec-generated": [
      {
        "emitter": "@azure-tools/typespec-autorest"
      }
    ]
  },
  "schemes": [
    "https"
  ],
  "x-ms-parameterized-host": {
    "hostTemplate": "{endpoint}",
    "useSchemePrefix": false,
    "parameters": [
      {
        "name": "endpoint",
        "in": "path",
        "required": true,
        "type": "string",
        "format": "uri",
        "x-ms-skip-url-encoding": true
      }
    ]
  },
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "security": [
    {
      "OAuth2Auth": []
    }
  ],
  "securityDefinitions": {
    "OAuth2Auth": {
      "type": "oauth2",
      "flow": "implicit",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "scopes": {}
    }
  },
  "tags": [],
  "paths": {
    "/{nextBlobUuidLink}": {
      "get": {
        "operationId": "ContainerRegistryBlob_GetUploadStatus",
        "description": "Retrieve status of upload identified by uuid. The primary purpose of this\nendpoint is to resolve the current status of a resumable upload.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "nextBlobUuidLink",
            "in": "path",
            "description": "Link acquired from upload start or previous chunk. Note, do not include initial\n/ (must do substring(1) )",
            "required": true,
            "type": "string",
            "x-ms-client-name": "location"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Get blob status": {
            "$ref": "./examples/GetBlobStatus.json"
          }
        }
      },
      "put": {
        "operationId": "ContainerRegistryBlob_CompleteUpload",
        "description": "Complete the upload, providing all the data in the body, if necessary. A\nrequest without a body will just complete the upload with previously uploaded\ncontent.",
        "consumes": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Digest of a BLOB",
            "required": true,
            "type": "string"
          },
          {
            "name": "nextBlobUuidLink",
            "in": "path",
            "description": "Link acquired from upload start or previous chunk. Note, do not include initial\n/ (must do substring(1) )",
            "required": true,
            "type": "string",
            "x-ms-client-name": "location"
          },
          {
            "name": "value",
            "in": "body",
            "description": "Optional raw data of blob",
            "required": false,
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "End a blob upload": {
            "$ref": "./examples/EndBlobUpload.json"
          }
        }
      },
      "patch": {
        "operationId": "ContainerRegistryBlob_UploadChunk",
        "description": "Upload a stream of data without completing the upload.",
        "consumes": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "nextBlobUuidLink",
            "in": "path",
            "description": "Link acquired from upload start or previous chunk. Note, do not include initial\n/ (must do substring(1) )",
            "required": true,
            "type": "string",
            "x-ms-client-name": "location"
          },
          {
            "name": "value",
            "in": "body",
            "description": "Raw data of blob",
            "required": true,
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Upload Blob": {
            "$ref": "./examples/UploadBlob.json"
          }
        }
      },
      "delete": {
        "operationId": "ContainerRegistryBlob_CancelUpload",
        "description": "Cancel outstanding upload processes, releasing associated resources. If this is\nnot called, the unfinished uploads will eventually timeout.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "nextBlobUuidLink",
            "in": "path",
            "description": "Link acquired from upload start or previous chunk. Note, do not include initial\n/ (must do substring(1) )",
            "required": true,
            "type": "string",
            "x-ms-client-name": "location"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "End a blob upload": {
            "$ref": "./examples/CancelBlobUpload.json"
          }
        }
      }
    },
    "/acr/v1/{name}": {
      "get": {
        "operationId": "ContainerRegistry_GetProperties",
        "description": "Get repository attributes",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the image (including the namespace)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/ContainerRepositoryProperties"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Get details of repository": {
            "$ref": "./examples/GetRepositoryAttributes.json"
          }
        }
      },
      "patch": {
        "operationId": "ContainerRegistry_UpdateProperties",
        "description": "Update the attribute identified by `name` where `reference` is the name of the\nrepository.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the image (including the namespace)",
            "required": true,
            "type": "string"
          },
          {
            "name": "value",
            "in": "body",
            "description": "Repository attribute value",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RepositoryWriteableProperties"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/ContainerRepositoryProperties"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Update repository attributes": {
            "$ref": "./examples/UpdateRepositoryAttributes.json"
          }
        }
      },
      "delete": {
        "operationId": "ContainerRegistry_DeleteRepository",
        "description": "Delete the repository identified by `name`",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the image (including the namespace)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/DeleteRepositoryResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Delete a repository": {
            "$ref": "./examples/DeleteAcrRepository.json"
          }
        }
      }
    },
    "/acr/v1/{name}/_manifests": {
      "get": {
        "operationId": "ContainerRegistry_GetManifests",
        "description": "List manifests of a repository",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the image (including the namespace)",
            "required": true,
            "type": "string"
          },
          {
            "name": "last",
            "in": "query",
            "description": "Query parameter for the last item in previous query. Result set will include\nvalues lexically after last.",
            "required": false,
            "type": "string"
          },
          {
            "name": "n",
            "in": "query",
            "description": "query parameter for max number of items",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "orderby query parameter",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/AcrManifests"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Get list of available manifests": {
            "$ref": "./examples/GetManifestList.json"
          }
        }
      }
    },
    "/acr/v1/{name}/_manifests/{digest}": {
      "get": {
        "operationId": "ContainerRegistry_GetManifestProperties",
        "description": "Get manifest attributes",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the image (including the namespace)",
            "required": true,
            "type": "string"
          },
          {
            "name": "digest",
            "in": "path",
            "description": "Digest of a BLOB",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/ArtifactManifestProperties"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Get manifest attributes": {
            "$ref": "./examples/GetManifestAttributes.json"
          }
        }
      },
      "patch": {
        "operationId": "ContainerRegistry_UpdateManifestProperties",
        "description": "Update properties of a manifest",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the image (including the namespace)",
            "required": true,
            "type": "string"
          },
          {
            "name": "digest",
            "in": "path",
            "description": "Digest of a BLOB",
            "required": true,
            "type": "string"
          },
          {
            "name": "value",
            "in": "body",
            "description": "Manifest attribute value",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ManifestWriteableProperties"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/ArtifactManifestProperties"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Update attributes of a manifest": {
            "$ref": "./examples/UpdateManifestAttributes.json"
          }
        }
      }
    },
    "/acr/v1/{name}/_tags": {
      "get": {
        "operationId": "ContainerRegistry_GetTags",
        "description": "List tags of a repository",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the image (including the namespace)",
            "required": true,
            "type": "string"
          },
          {
            "name": "last",
            "in": "query",
            "description": "Query parameter for the last item in previous query. Result set will include\nvalues lexically after last.",
            "required": false,
            "type": "string"
          },
          {
            "name": "n",
            "in": "query",
            "description": "query parameter for max number of items",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "orderby query parameter",
            "required": false,
            "type": "string"
          },
          {
            "name": "digest",
            "in": "query",
            "description": "filter by digest",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/TagList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Get tags of a repository": {
            "$ref": "./examples/GetTagList.json"
          }
        }
      }
    },
    "/acr/v1/{name}/_tags/{reference}": {
      "get": {
        "operationId": "ContainerRegistry_GetTagProperties",
        "description": "Get tag attributes by tag",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the image (including the namespace)",
            "required": true,
            "type": "string"
          },
          {
            "name": "reference",
            "in": "path",
            "description": "Tag name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/ArtifactTagProperties"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Get tag attributes": {
            "$ref": "./examples/GetTagAttributes.json"
          }
        }
      },
      "patch": {
        "operationId": "ContainerRegistry_UpdateTagAttributes",
        "description": "Update tag attributes",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the image (including the namespace)",
            "required": true,
            "type": "string"
          },
          {
            "name": "reference",
            "in": "path",
            "description": "Tag name",
            "required": true,
            "type": "string"
          },
          {
            "name": "value",
            "in": "body",
            "description": "Tag attribute value",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TagWriteableProperties"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/ArtifactTagProperties"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Update attributes of a tag": {
            "$ref": "./examples/UpdateTagAttributes.json"
          }
        }
      },
      "delete": {
        "operationId": "ContainerRegistry_DeleteTag",
        "description": "Delete tag",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the image (including the namespace)",
            "required": true,
            "type": "string"
          },
          {
            "name": "reference",
            "in": "path",
            "description": "Tag name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Delete a tag": {
            "$ref": "./examples/DeleteTag.json"
          }
        }
      }
    },
    "/acr/v1/_catalog": {
      "get": {
        "operationId": "ContainerRegistry_GetRepositories",
        "description": "List repositories",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "last",
            "in": "query",
            "description": "Query parameter for the last item in previous query. Result set will include values lexically after last.",
            "required": false,
            "type": "string"
          },
          {
            "name": "n",
            "in": "query",
            "description": "Query parameter for max number of items",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Repositories"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Get repositories in a registry": {
            "$ref": "./examples/GetRepositoryList.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "link",
          "itemName": "repositories"
        }
      }
    },
    "/oauth2/exchange": {
      "post": {
        "operationId": "Authentication_ExchangeAadAccessTokenForAcrRefreshToken",
        "description": "Exchange AAD tokens for an ACR refresh Token",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "grantType",
            "in": "formData",
            "description": "Can take a value of access_token_refresh_token, or access_token, or\nrefresh_token",
            "required": true,
            "type": "string",
            "enum": [
              "access_token_refresh_token",
              "access_token",
              "refresh_token"
            ],
            "x-ms-enum": {
              "name": "PostContentSchemaGrantType",
              "modelAsString": true,
              "values": [
                {
                  "name": "access_token_refresh_token",
                  "value": "access_token_refresh_token",
                  "description": "Grant type for exchanging both access token and refresh token"
                },
                {
                  "name": "access_token",
                  "value": "access_token",
                  "description": "Grant type for exchanging access token only"
                },
                {
                  "name": "refresh_token",
                  "value": "refresh_token",
                  "description": "Grant type for exchanging refresh token only"
                }
              ]
            }
          },
          {
            "name": "service",
            "in": "formData",
            "description": "Indicates the name of your Azure container registry.",
            "required": true,
            "type": "string"
          },
          {
            "name": "tenant",
            "in": "formData",
            "description": "AAD tenant associated to the AAD credentials.",
            "required": false,
            "type": "string"
          },
          {
            "name": "refreshToken",
            "in": "formData",
            "description": "AAD refresh token, mandatory when grant_type is access_token_refresh_token or\nrefresh_token",
            "required": false,
            "type": "string"
          },
          {
            "name": "accessToken",
            "in": "formData",
            "description": "AAD access token, mandatory when grant_type is access_token_refresh_token or\naccess_token.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/AcrRefreshToken"
            }
          }
        },
        "x-ms-examples": {
          "Exchange AAD Token for ACR Refresh": {
            "$ref": "./examples/PostRefreshToken.json"
          }
        }
      }
    },
    "/oauth2/token": {
      "get": {
        "operationId": "Authentication_GetAcrAccessTokenFromLogin",
        "description": "Exchange Username, Password and Scope for an ACR Access Token",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "service",
            "in": "query",
            "description": "Indicates the name of your Azure container registry.",
            "required": true,
            "type": "string"
          },
          {
            "name": "scope",
            "in": "query",
            "description": "Expected to be a valid scope, and can be specified more than once for multiple\nscope requests. You can obtain this from the Www-Authenticate response header\nfrom the challenge.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/AcrAccessToken"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Get Access Token with username and password": {
            "$ref": "./examples/GetAccessToken.json"
          }
        }
      },
      "post": {
        "operationId": "Authentication_ExchangeAcrRefreshTokenForAcrAccessToken",
        "description": "Exchange ACR Refresh token for an ACR Access Token",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "grantType",
            "in": "formData",
            "description": "Can take a value of access_token_refresh_token, or access_token, or\nrefresh_token",
            "required": true,
            "type": "string",
            "enum": [
              "access_token_refresh_token",
              "access_token",
              "refresh_token"
            ],
            "x-ms-enum": {
              "name": "PostContentSchemaGrantType",
              "modelAsString": true,
              "values": [
                {
                  "name": "access_token_refresh_token",
                  "value": "access_token_refresh_token",
                  "description": "Grant type for exchanging both access token and refresh token"
                },
                {
                  "name": "access_token",
                  "value": "access_token",
                  "description": "Grant type for exchanging access token only"
                },
                {
                  "name": "refresh_token",
                  "value": "refresh_token",
                  "description": "Grant type for exchanging refresh token only"
                }
              ]
            }
          },
          {
            "name": "service",
            "in": "formData",
            "description": "Indicates the name of your Azure container registry.",
            "required": true,
            "type": "string"
          },
          {
            "name": "tenant",
            "in": "formData",
            "description": "AAD tenant associated to the AAD credentials.",
            "required": false,
            "type": "string"
          },
          {
            "name": "refreshToken",
            "in": "formData",
            "description": "AAD refresh token, mandatory when grant_type is access_token_refresh_token or\nrefresh_token",
            "required": false,
            "type": "string"
          },
          {
            "name": "accessToken",
            "in": "formData",
            "description": "AAD access token, mandatory when grant_type is access_token_refresh_token or\naccess_token.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/AcrAccessToken"
            }
          }
        },
        "x-ms-examples": {
          "Get Access Token with Refresh Token": {
            "$ref": "./examples/PostAccessToken.json"
          }
        }
      }
    },
    "/v2/{name}/blobs/{digest}": {
      "get": {
        "operationId": "ContainerRegistryBlob_GetBlob",
        "description": "Retrieve the blob from the registry identified by digest.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the image (including the namespace)",
            "required": true,
            "type": "string"
          },
          {
            "name": "digest",
            "in": "path",
            "description": "Digest of a BLOB",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Get a blob from digest": {
            "$ref": "./examples/GetBlob.json"
          }
        }
      },
      "delete": {
        "operationId": "ContainerRegistryBlob_DeleteBlob",
        "description": "Removes an already uploaded blob.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the image (including the namespace)",
            "required": true,
            "type": "string"
          },
          {
            "name": "digest",
            "in": "path",
            "description": "Digest of a BLOB",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Delete a blob": {
            "$ref": "./examples/DeleteBlob.json"
          }
        }
      },
      "head": {
        "operationId": "ContainerRegistryBlob_CheckBlobExists",
        "description": "Same as GET, except only the headers are returned.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the image (including the namespace)",
            "required": true,
            "type": "string"
          },
          {
            "name": "digest",
            "in": "path",
            "description": "Digest of a BLOB",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Head for a Blob Chunk": {
            "$ref": "./examples/CheckBlob.json"
          }
        }
      }
    },
    "/v2/{name}/blobs/uploads/": {
      "post": {
        "operationId": "ContainerRegistryBlob_MountBlob",
        "description": "Mount a blob identified by the `mount` parameter from another repository.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the image (including the namespace)",
            "required": true,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "Name of the source repository.",
            "required": true,
            "type": "string"
          },
          {
            "name": "mount",
            "in": "query",
            "description": "Digest of blob to mount from the source repository.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Mount a blob from repository": {
            "$ref": "./examples/MountBlob.json"
          }
        }
      }
    },
    "/v2/{name}/manifests/{reference}": {
      "get": {
        "operationId": "ContainerRegistry_GetManifest",
        "description": "Get the manifest identified by `name` and `reference` where `reference` can be\na tag or digest.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the image (including the namespace)",
            "required": true,
            "type": "string"
          },
          {
            "name": "reference",
            "in": "path",
            "description": "A tag or a digest, pointing to a specific image",
            "required": true,
            "type": "string"
          },
          {
            "name": "accept",
            "in": "header",
            "description": "Accept header string delimited by comma. For example,\napplication/vnd.docker.distribution.manifest.v2+json",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/ManifestWrapper"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Get manifest": {
            "$ref": "./examples/GetManifest.json"
          }
        }
      },
      "put": {
        "operationId": "ContainerRegistry_CreateManifest",
        "description": "Put the manifest identified by `name` and `reference` where `reference` can be\na tag or digest.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the image (including the namespace)",
            "required": true,
            "type": "string"
          },
          {
            "name": "reference",
            "in": "path",
            "description": "A tag or a digest, pointing to a specific image",
            "required": true,
            "type": "string"
          },
          {
            "name": "payload",
            "in": "body",
            "description": "Manifest body, can take v1 or v2 values depending on accept header",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Manifest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Put manifest": {
            "$ref": "./examples/CreateManifest.json"
          }
        }
      },
      "delete": {
        "operationId": "ContainerRegistry_DeleteManifest",
        "description": "Delete the manifest identified by `name` and `reference`. Note that a manifest\ncan _only_ be deleted by `digest`.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the image (including the namespace)",
            "required": true,
            "type": "string"
          },
          {
            "name": "reference",
            "in": "path",
            "description": "Digest of a BLOB",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Delete manifest": {
            "$ref": "./examples/DeleteManifest.json"
          }
        }
      }
    },
    "/v2/": {
      "get": {
        "operationId": "ContainerRegistry_CheckDockerV2Support",
        "description": "Tells whether this Docker Registry instance supports Docker Registry HTTP API v2",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Check Docker Registry V2 Support": {
            "$ref": "./examples/GetDockerRegistryV2Support.json"
          }
        }
      }
    }
  },
  "x-ms-paths": {
    "/v2/{name}/blobs/{digest}?_overload=getChunk": {
      "get": {
        "operationId": "ContainerRegistryBlob_GetChunk",
        "description": "Retrieve the blob from the registry identified by `digest`. This endpoint may\nalso support RFC7233 compliant range requests. Support can be detected by\nissuing a HEAD request. If the header `Accept-Range: bytes` is returned, range\nrequests can be used to fetch partial content.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the image (including the namespace)",
            "required": true,
            "type": "string"
          },
          {
            "name": "digest",
            "in": "path",
            "description": "Digest of a BLOB",
            "required": true,
            "type": "string"
          },
          {
            "name": "range",
            "in": "header",
            "description": "Format : bytes=<start>-<end>,  HTTP Range header specifying blob chunk.",
            "required": true,
            "type": "string",
            "x-ms-client-name": "Range"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Get a blob Chunk": {
            "$ref": "./examples/GetBlobChunk.json"
          }
        }
      }
    },
    "/v2/{name}/blobs/{digest}?_overload=checkChunkExists": {
      "head": {
        "operationId": "ContainerRegistryBlob_CheckChunkExists",
        "description": "Same as GET, except only the headers are returned.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the image (including the namespace)",
            "required": true,
            "type": "string"
          },
          {
            "name": "digest",
            "in": "path",
            "description": "Digest of a BLOB",
            "required": true,
            "type": "string"
          },
          {
            "name": "range",
            "in": "header",
            "description": "Format : bytes=<start>-<end>,  HTTP Range header specifying blob chunk.",
            "required": true,
            "type": "string",
            "x-ms-client-name": "Range"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Get headers without blob Chunk": {
            "$ref": "./examples/CheckBlobChunk.json"
          }
        }
      }
    },
    "/v2/{name}/blobs/uploads/?_overload=startUpload": {
      "post": {
        "operationId": "ContainerRegistryBlob_StartUpload",
        "description": "Initiate a resumable blob upload with an empty request body.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the image (including the namespace)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Start a blob upload": {
            "$ref": "./examples/StartBlobUpload.json"
          }
        }
      }
    }
  },
  "definitions": {
    "AcrAccessToken": {
      "type": "object",
      "description": "The ACR access token response containing the access token for authentication.",
      "properties": {
        "access_token": {
          "type": "string",
          "description": "The access token for performing authenticated requests",
          "x-ms-client-name": "accessToken"
        }
      }
    },
    "AcrErrorInfo": {
      "type": "object",
      "description": "Error information",
      "properties": {
        "code": {
          "type": "string",
          "description": "Error code"
        },
        "message": {
          "type": "string",
          "description": "Error message"
        },
        "detail": {
          "type": "object",
          "description": "Error details",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "AcrErrors": {
      "type": "object",
      "description": "Acr error response describing why the operation failed",
      "properties": {
        "errors": {
          "type": "array",
          "description": "Array of detailed error",
          "items": {
            "$ref": "#/definitions/AcrErrorInfo"
          }
        }
      }
    },
    "AcrManifests": {
      "type": "object",
      "description": "Manifest attributes",
      "properties": {
        "registry": {
          "type": "string",
          "description": "Registry login server name. This is likely to be similar to\n{registry-name}.azurecr.io."
        },
        "imageName": {
          "type": "string",
          "description": "Image name"
        },
        "manifests": {
          "type": "array",
          "description": "List of manifests",
          "items": {
            "$ref": "#/definitions/ManifestAttributesBase"
          }
        },
        "link": {
          "type": "string",
          "description": "Link to the next page of results"
        }
      }
    },
    "AcrRefreshToken": {
      "type": "object",
      "description": "The ACR refresh token response containing the refresh token for authentication.",
      "properties": {
        "refresh_token": {
          "type": "string",
          "description": "The refresh token to be used for generating access tokens",
          "x-ms-client-name": "refreshToken"
        }
      }
    },
    "Annotations": {
      "type": "object",
      "description": "Additional information provided through arbitrary metadata.",
      "properties": {
        "org.opencontainers.image.created": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time on which the image was built (string, date-time as defined by\nhttps://tools.ietf.org/html/rfc3339#section-5.6)",
          "x-ms-client-name": "created"
        },
        "org.opencontainers.image.authors": {
          "type": "string",
          "description": "Contact details of the people or organization responsible for the image.",
          "x-ms-client-name": "authors"
        },
        "org.opencontainers.image.url": {
          "type": "string",
          "description": "URL to find more information on the image.",
          "x-ms-client-name": "url"
        },
        "org.opencontainers.image.documentation": {
          "type": "string",
          "description": "URL to get documentation on the image.",
          "x-ms-client-name": "documentation"
        },
        "org.opencontainers.image.source": {
          "type": "string",
          "description": "URL to get source code for building the image.",
          "x-ms-client-name": "source"
        },
        "org.opencontainers.image.version": {
          "type": "string",
          "description": "Version of the packaged software. The version MAY match a label or tag in the\nsource code repository, may also be Semantic versioning-compatible",
          "x-ms-client-name": "version"
        },
        "org.opencontainers.image.revision": {
          "type": "string",
          "description": "Source control revision identifier for the packaged software.",
          "x-ms-client-name": "revision"
        },
        "org.opencontainers.image.vendor": {
          "type": "string",
          "description": "Name of the distributing entity, organization or individual.",
          "x-ms-client-name": "vendor"
        },
        "org.opencontainers.image.licenses": {
          "type": "string",
          "description": "License(s) under which contained software is distributed as an SPDX License\nExpression.",
          "x-ms-client-name": "licenses"
        },
        "org.opencontainers.image.ref.name": {
          "type": "string",
          "description": "Name of the reference for a target.",
          "x-ms-client-name": "name"
        },
        "org.opencontainers.image.title": {
          "type": "string",
          "description": "Human-readable title of the image",
          "x-ms-client-name": "title"
        },
        "org.opencontainers.image.description": {
          "type": "string",
          "description": "Human-readable description of the software packaged in the image",
          "x-ms-client-name": "description"
        }
      },
      "additionalProperties": {
        "additionalProperties": {},
        "type": "object"
      }
    },
    "ArtifactArchitecture": {
      "type": "string",
      "description": "The artifact platform's architecture.",
      "enum": [
        "386",
        "amd64",
        "arm",
        "arm64",
        "mips",
        "mipsle",
        "mips64",
        "mips64le",
        "ppc64",
        "ppc64le",
        "riscv64",
        "s390x",
        "wasm"
      ],
      "x-ms-enum": {
        "name": "ArtifactArchitecture",
        "modelAsString": true,
        "values": [
          {
            "name": "I386",
            "value": "386",
            "description": "i386"
          },
          {
            "name": "Amd64",
            "value": "amd64",
            "description": "AMD64"
          },
          {
            "name": "Arm",
            "value": "arm",
            "description": "ARM"
          },
          {
            "name": "Arm64",
            "value": "arm64",
            "description": "ARM64"
          },
          {
            "name": "Mips",
            "value": "mips",
            "description": "MIPS"
          },
          {
            "name": "MipsLe",
            "value": "mipsle",
            "description": "MIPSLE"
          },
          {
            "name": "Mips64",
            "value": "mips64",
            "description": "MIPS64"
          },
          {
            "name": "Mips64Le",
            "value": "mips64le",
            "description": "MIPS64LE"
          },
          {
            "name": "Ppc64",
            "value": "ppc64",
            "description": "PPC64"
          },
          {
            "name": "Ppc64Le",
            "value": "ppc64le",
            "description": "PPC64LE"
          },
          {
            "name": "RiscV64",
            "value": "riscv64",
            "description": "RISCv64"
          },
          {
            "name": "S390x",
            "value": "s390x",
            "description": "s390x"
          },
          {
            "name": "Wasm",
            "value": "wasm",
            "description": "Wasm"
          }
        ]
      }
    },
    "ArtifactManifestOrderBy": {
      "type": "string",
      "description": "Sort options for ordering manifests in a collection.",
      "enum": [
        "none",
        "timedesc",
        "timeasc"
      ],
      "x-ms-enum": {
        "name": "ArtifactManifestOrderBy",
        "modelAsString": false,
        "values": [
          {
            "name": "None",
            "value": "none",
            "description": "Do not provide an orderby value in the request."
          },
          {
            "name": "LastUpdatedOnDescending",
            "value": "timedesc",
            "description": "Order manifests by LastUpdatedOn field, from most recently updated to least\nrecently updated."
          },
          {
            "name": "LastUpdatedOnAscending",
            "value": "timeasc",
            "description": "Order manifest by LastUpdatedOn field, from least recently updated to most\nrecently updated."
          }
        ]
      }
    },
    "ArtifactManifestPlatform": {
      "type": "object",
      "description": "The artifact's platform, consisting of operating system and architecture.",
      "properties": {
        "digest": {
          "type": "string",
          "description": "Manifest digest",
          "readOnly": true
        },
        "architecture": {
          "$ref": "#/definitions/ArtifactArchitecture",
          "description": "CPU architecture",
          "readOnly": true
        },
        "os": {
          "$ref": "#/definitions/ArtifactOperatingSystem",
          "description": "Operating system",
          "readOnly": true
        }
      },
      "required": [
        "digest"
      ]
    },
    "ArtifactManifestProperties": {
      "type": "object",
      "description": "Manifest attributes details",
      "properties": {
        "registry": {
          "type": "string",
          "description": "Registry login server name. This is likely to be similar to\n{registry-name}.azurecr.io.",
          "readOnly": true
        },
        "imageName": {
          "type": "string",
          "description": "Repository name",
          "readOnly": true
        },
        "manifest": {
          "$ref": "#/definitions/ManifestAttributesBase",
          "description": "Manifest attributes",
          "readOnly": true
        }
      },
      "required": [
        "manifest"
      ]
    },
    "ArtifactOperatingSystem": {
      "type": "string",
      "description": "The artifact platform's operating system.",
      "enum": [
        "aix",
        "android",
        "darwin",
        "dragonfly",
        "freebsd",
        "illumos",
        "ios",
        "js",
        "linux",
        "netbsd",
        "openbsd",
        "plan9",
        "solaris",
        "windows"
      ],
      "x-ms-enum": {
        "name": "ArtifactOperatingSystem",
        "modelAsString": true,
        "values": [
          {
            "name": "Aix",
            "value": "aix",
            "description": "AIX operating system"
          },
          {
            "name": "Android",
            "value": "android",
            "description": "Android operating system"
          },
          {
            "name": "Darwin",
            "value": "darwin",
            "description": "Darwin operating system"
          },
          {
            "name": "Dragonfly",
            "value": "dragonfly",
            "description": "Dragonfly operating system"
          },
          {
            "name": "FreeBsd",
            "value": "freebsd",
            "description": "FreeBSD operating system"
          },
          {
            "name": "Illumos",
            "value": "illumos",
            "description": "Illumos operating system"
          },
          {
            "name": "iOS",
            "value": "ios",
            "description": "iOS operating system"
          },
          {
            "name": "JS",
            "value": "js",
            "description": "JavaScript operating system"
          },
          {
            "name": "Linux",
            "value": "linux",
            "description": "Linux operating system"
          },
          {
            "name": "NetBsd",
            "value": "netbsd",
            "description": "NetBSD operating system"
          },
          {
            "name": "OpenBsd",
            "value": "openbsd",
            "description": "OpenBSD operating system"
          },
          {
            "name": "Plan9",
            "value": "plan9",
            "description": "Plan 9 operating system"
          },
          {
            "name": "Solaris",
            "value": "solaris",
            "description": "Solaris operating system"
          },
          {
            "name": "Windows",
            "value": "windows",
            "description": "Windows operating system"
          }
        ]
      }
    },
    "ArtifactTagOrderBy": {
      "type": "string",
      "description": "Sort options for ordering tags in a collection.",
      "enum": [
        "none",
        "timedesc",
        "timeasc"
      ],
      "x-ms-enum": {
        "name": "ArtifactTagOrderBy",
        "modelAsString": false,
        "values": [
          {
            "name": "None",
            "value": "none",
            "description": "Do not provide an orderby value in the request."
          },
          {
            "name": "LastUpdatedOnDescending",
            "value": "timedesc",
            "description": "Order tags by LastUpdatedOn field, from most recently updated to least recently\nupdated."
          },
          {
            "name": "LastUpdatedOnAscending",
            "value": "timeasc",
            "description": "Order tags by LastUpdatedOn field, from least recently updated to most recently\nupdated."
          }
        ]
      }
    },
    "ArtifactTagProperties": {
      "type": "object",
      "description": "Tag attributes",
      "properties": {
        "registry": {
          "type": "string",
          "description": "Registry login server name. This is likely to be similar to\n{registry-name}.azurecr.io.",
          "readOnly": true
        },
        "imageName": {
          "type": "string",
          "description": "Image name",
          "readOnly": true
        },
        "tag": {
          "$ref": "#/definitions/TagAttributesBase",
          "description": "List of tag attribute details",
          "readOnly": true
        }
      },
      "required": [
        "registry",
        "imageName",
        "tag"
      ]
    },
    "Azure.Core.Foundations.Error": {
      "type": "object",
      "description": "The error object.",
      "properties": {
        "code": {
          "type": "string",
          "description": "One of a server-defined set of error codes."
        },
        "message": {
          "type": "string",
          "description": "A human-readable representation of the error."
        },
        "target": {
          "type": "string",
          "description": "The target of the error."
        },
        "details": {
          "type": "array",
          "description": "An array of details about specific errors that led to this reported error.",
          "items": {
            "$ref": "#/definitions/Azure.Core.Foundations.Error"
          }
        },
        "innererror": {
          "$ref": "#/definitions/Azure.Core.Foundations.InnerError",
          "description": "An object containing more specific information than the current object about the error."
        }
      },
      "required": [
        "code",
        "message"
      ]
    },
    "Azure.Core.Foundations.ErrorResponse": {
      "type": "object",
      "description": "A response containing error details.",
      "properties": {
        "error": {
          "$ref": "#/definitions/Azure.Core.Foundations.Error",
          "description": "The error object."
        }
      },
      "required": [
        "error"
      ]
    },
    "Azure.Core.Foundations.InnerError": {
      "type": "object",
      "description": "An object containing more specific information about the error. As per Azure REST API guidelines - https://aka.ms/AzureRestApiGuidelines#handling-errors.",
      "properties": {
        "code": {
          "type": "string",
          "description": "One of a server-defined set of error codes."
        },
        "innererror": {
          "$ref": "#/definitions/Azure.Core.Foundations.InnerError",
          "description": "Inner error."
        }
      }
    },
    "ContainerRepositoryProperties": {
      "type": "object",
      "description": "Properties of this repository.",
      "properties": {
        "registry": {
          "type": "string",
          "description": "Registry login server name. This is likely to be similar to\n{registry-name}.azurecr.io.",
          "readOnly": true,
          "x-ms-client-name": "registryLoginServer"
        },
        "imageName": {
          "type": "string",
          "description": "Image name",
          "readOnly": true,
          "x-ms-client-name": "name"
        },
        "createdTime": {
          "type": "string",
          "format": "date-time",
          "description": "Image created time",
          "readOnly": true,
          "x-ms-client-name": "createdOn"
        },
        "lastUpdateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Image last update time",
          "readOnly": true,
          "x-ms-client-name": "lastUpdatedOn"
        },
        "manifestCount": {
          "type": "integer",
          "format": "int32",
          "description": "Number of the manifests",
          "readOnly": true
        },
        "tagCount": {
          "type": "integer",
          "format": "int32",
          "description": "Number of the tags",
          "readOnly": true
        },
        "changeableAttributes": {
          "$ref": "#/definitions/RepositoryWriteableProperties",
          "description": "Writeable properties of the resource"
        }
      },
      "required": [
        "registry",
        "imageName",
        "createdTime",
        "lastUpdateTime",
        "manifestCount",
        "tagCount",
        "changeableAttributes"
      ]
    },
    "DeleteRepositoryResult": {
      "type": "object",
      "description": "Deleted repository",
      "properties": {
        "manifestsDeleted": {
          "type": "array",
          "description": "SHA of the deleted image",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "tagsDeleted": {
          "type": "array",
          "description": "Tag of the deleted image",
          "items": {
            "type": "string"
          },
          "readOnly": true
        }
      }
    },
    "Descriptor": {
      "type": "object",
      "description": "Docker V2 image layer descriptor including config and layers",
      "properties": {
        "mediaType": {
          "type": "string",
          "description": "Layer media type"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Layer size"
        },
        "digest": {
          "type": "string",
          "description": "Layer digest"
        },
        "urls": {
          "type": "array",
          "description": "Specifies a list of URIs from which this object may be downloaded.",
          "items": {
            "type": "string"
          }
        },
        "annotations": {
          "$ref": "#/definitions/Annotations",
          "description": "Additional information provided through arbitrary metadata."
        }
      }
    },
    "FsLayer": {
      "type": "object",
      "description": "Image layer information",
      "properties": {
        "blobSum": {
          "type": "string",
          "description": "SHA of an image layer"
        }
      }
    },
    "History": {
      "type": "object",
      "description": "A list of unstructured historical data for v1 compatibility",
      "properties": {
        "v1Compatibility": {
          "type": "string",
          "description": "The raw v1 compatibility information"
        }
      }
    },
    "ImageSignature": {
      "type": "object",
      "description": "Signature of a signed manifest",
      "properties": {
        "header": {
          "$ref": "#/definitions/JWK",
          "description": "A JSON web signature"
        },
        "signature": {
          "type": "string",
          "description": "A signature for the image manifest, signed by a libtrust private key"
        },
        "protected": {
          "type": "string",
          "description": "The signed protected header"
        }
      }
    },
    "JWK": {
      "type": "object",
      "description": "A JSON web signature",
      "properties": {
        "jwk": {
          "$ref": "#/definitions/JWKHeader",
          "description": "JSON web key parameter"
        },
        "alg": {
          "type": "string",
          "description": "The algorithm used to sign or encrypt the JWT"
        }
      }
    },
    "JWKHeader": {
      "type": "object",
      "description": "JSON web key parameter",
      "properties": {
        "crv": {
          "type": "string",
          "description": "crv value"
        },
        "kid": {
          "type": "string",
          "description": "kid value"
        },
        "kty": {
          "type": "string",
          "description": "kty value"
        },
        "x": {
          "type": "string",
          "description": "x value"
        },
        "y": {
          "type": "string",
          "description": "y value"
        }
      }
    },
    "Manifest": {
      "type": "object",
      "description": "Returns the requested manifest file",
      "properties": {
        "schemaVersion": {
          "type": "integer",
          "format": "int32",
          "description": "Schema version"
        }
      }
    },
    "ManifestAttributesBase": {
      "type": "object",
      "description": "Manifest details",
      "properties": {
        "digest": {
          "type": "string",
          "description": "Manifest",
          "readOnly": true
        },
        "imageSize": {
          "type": "integer",
          "format": "int64",
          "description": "Image size",
          "readOnly": true
        },
        "createdTime": {
          "type": "string",
          "format": "date-time",
          "description": "Created time",
          "readOnly": true
        },
        "lastUpdateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Last update time",
          "readOnly": true
        },
        "architecture": {
          "$ref": "#/definitions/ArtifactArchitecture",
          "description": "CPU architecture",
          "readOnly": true
        },
        "os": {
          "$ref": "#/definitions/ArtifactOperatingSystem",
          "description": "Operating system",
          "readOnly": true
        },
        "references": {
          "type": "array",
          "description": "List of artifacts that are referenced by this manifest list, with information\nabout the platform each supports.  This list will be empty if this is a leaf\nmanifest and not a manifest list.",
          "items": {
            "$ref": "#/definitions/ArtifactManifestPlatform"
          },
          "readOnly": true
        },
        "configMediaType": {
          "type": "string",
          "description": "Config blob media type"
        },
        "tags": {
          "type": "array",
          "description": "List of tags",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "changeableAttributes": {
          "$ref": "#/definitions/ManifestWriteableProperties",
          "description": "Writeable properties of the resource"
        }
      },
      "required": [
        "digest",
        "createdTime",
        "lastUpdateTime"
      ]
    },
    "ManifestAttributesManifest": {
      "type": "object",
      "description": "List of manifest attributes",
      "properties": {
        "references": {
          "type": "array",
          "description": "List of manifest attributes details",
          "items": {
            "$ref": "#/definitions/ArtifactManifestPlatform"
          }
        }
      }
    },
    "ManifestList": {
      "type": "object",
      "description": "Returns the requested Docker multi-arch-manifest file",
      "properties": {
        "mediaType": {
          "type": "string",
          "description": "Media type for this Manifest"
        },
        "manifests": {
          "type": "array",
          "description": "List of V2 image layer information",
          "items": {
            "$ref": "#/definitions/ManifestListAttributes"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/Manifest"
        }
      ]
    },
    "ManifestListAttributes": {
      "type": "object",
      "description": "Attributes of a manifest in a manifest list.",
      "properties": {
        "mediaType": {
          "type": "string",
          "description": "The MIME type of the referenced object. This will generally be\napplication/vnd.docker.image.manifest.v2+json, but it could also be\napplication/vnd.docker.image.manifest.v1+json"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "The size in bytes of the object"
        },
        "digest": {
          "type": "string",
          "description": "The digest of the content, as defined by the Registry V2 HTTP API Specification"
        },
        "platform": {
          "$ref": "#/definitions/Platform",
          "description": "The platform object describes the platform which the image in the manifest runs\non. A full list of valid operating system and architecture values are listed in\nthe Go language documentation for $GOOS and $GOARCH"
        }
      }
    },
    "ManifestWrapper": {
      "type": "object",
      "description": "Returns the requested manifest file",
      "properties": {
        "mediaType": {
          "type": "string",
          "description": "Media type for this Manifest"
        },
        "manifests": {
          "type": "array",
          "description": "(ManifestList, OCIIndex) List of V2 image layer information",
          "items": {
            "$ref": "#/definitions/ManifestListAttributes"
          }
        },
        "config": {
          "$ref": "#/definitions/Descriptor",
          "description": "(V2, OCI) Image config descriptor"
        },
        "layers": {
          "type": "array",
          "description": "(V2, OCI) List of V2 image layer information",
          "items": {
            "$ref": "#/definitions/Descriptor"
          }
        },
        "annotations": {
          "$ref": "#/definitions/Annotations",
          "description": "(OCI, OCIIndex) Additional metadata"
        },
        "architecture": {
          "type": "string",
          "description": "(V1) CPU architecture"
        },
        "name": {
          "type": "string",
          "description": "(V1) Image name"
        },
        "tag": {
          "type": "string",
          "description": "(V1) Image tag"
        },
        "fsLayers": {
          "type": "array",
          "description": "(V1) List of layer information",
          "items": {
            "$ref": "#/definitions/FsLayer"
          }
        },
        "history": {
          "type": "array",
          "description": "(V1) Image history",
          "items": {
            "$ref": "#/definitions/History"
          }
        },
        "signatures": {
          "type": "array",
          "description": "(V1) Image signature",
          "items": {
            "$ref": "#/definitions/ImageSignature"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/Manifest"
        }
      ]
    },
    "ManifestWriteableProperties": {
      "type": "object",
      "description": "Changeable attributes",
      "properties": {
        "deleteEnabled": {
          "type": "boolean",
          "description": "Delete enabled"
        },
        "writeEnabled": {
          "type": "boolean",
          "description": "Write enabled"
        },
        "listEnabled": {
          "type": "boolean",
          "description": "List enabled"
        },
        "readEnabled": {
          "type": "boolean",
          "description": "Read enabled"
        }
      }
    },
    "OCIIndex": {
      "type": "object",
      "description": "Returns the requested OCI index file",
      "properties": {
        "manifests": {
          "type": "array",
          "description": "List of OCI image layer information",
          "items": {
            "$ref": "#/definitions/ManifestListAttributes"
          }
        },
        "annotations": {
          "$ref": "#/definitions/Annotations",
          "description": "Additional information provided through arbitrary metadata."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/Manifest"
        }
      ]
    },
    "OCIManifest": {
      "type": "object",
      "description": "Returns the requested OCI Manifest file",
      "properties": {
        "config": {
          "$ref": "#/definitions/Descriptor",
          "description": "V2 image config descriptor"
        },
        "layers": {
          "type": "array",
          "description": "List of V2 image layer information",
          "items": {
            "$ref": "#/definitions/Descriptor"
          }
        },
        "annotations": {
          "$ref": "#/definitions/Annotations",
          "description": "Additional information provided through arbitrary metadata."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/Manifest"
        }
      ]
    },
    "Paths108HwamOauth2ExchangePostRequestbodyContentApplicationXWwwFormUrlencodedSchema": {
      "type": "object",
      "properties": {
        "grantType": {
          "$ref": "#/definitions/PostContentSchemaGrantType",
          "description": "Can take a value of access_token_refresh_token, or access_token, or\nrefresh_token"
        },
        "service": {
          "type": "string",
          "description": "Indicates the name of your Azure container registry."
        },
        "tenant": {
          "type": "string",
          "description": "AAD tenant associated to the AAD credentials."
        },
        "acrRefreshToken": {
          "type": "string",
          "description": "AAD refresh token, mandatory when grant_type is access_token_refresh_token or\nrefresh_token"
        },
        "accessToken": {
          "type": "string",
          "description": "AAD access token, mandatory when grant_type is access_token_refresh_token or\naccess_token."
        }
      },
      "required": [
        "grantType",
        "service"
      ]
    },
    "PathsV3R3RxOauth2TokenPostRequestbodyContentApplicationXWwwFormUrlencodedSchema": {
      "type": "object",
      "properties": {
        "service": {
          "type": "string",
          "description": "Indicates the name of your Azure container registry."
        },
        "scope": {
          "type": "string",
          "description": "Which is expected to be a valid scope, and can be specified more than once for\nmultiple scope requests. You obtained this from the Www-Authenticate response\nheader from the challenge."
        },
        "refreshToken": {
          "type": "string",
          "description": "Must be a valid ACR refresh token"
        },
        "grantType": {
          "$ref": "#/definitions/TokenGrantType",
          "description": "Grant type is expected to be refresh_token"
        }
      },
      "required": [
        "service",
        "scope",
        "refreshToken",
        "grantType"
      ]
    },
    "Platform": {
      "type": "object",
      "description": "The platform object describes the platform which the image in the manifest runs\non. A full list of valid operating system and architecture values are listed in\nthe Go language documentation for $GOOS and $GOARCH",
      "properties": {
        "architecture": {
          "type": "string",
          "description": "Specifies the CPU architecture, for example amd64 or ppc64le."
        },
        "os": {
          "type": "string",
          "description": "The os field specifies the operating system, for example linux or windows."
        },
        "os.version": {
          "type": "string",
          "description": "The optional os.version field specifies the operating system version, for\nexample 10.0.10586.",
          "x-ms-client-name": "osVersion"
        },
        "os.features": {
          "type": "array",
          "description": "The optional os.features field specifies an array of strings, each listing a\nrequired OS feature (for example on Windows win32k",
          "items": {
            "type": "string"
          },
          "x-ms-client-name": "osFeatures"
        },
        "variant": {
          "type": "string",
          "description": "The optional variant field specifies a variant of the CPU, for example armv6l\nto specify a particular CPU variant of the ARM CPU."
        },
        "features": {
          "type": "array",
          "description": "The optional features field specifies an array of strings, each listing a\nrequired CPU feature (for example sse4 or aes",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "PostContentSchemaGrantType": {
      "type": "string",
      "description": "Can take a value of access_token_refresh_token, or access_token, or\nrefresh_token",
      "enum": [
        "access_token_refresh_token",
        "access_token",
        "refresh_token"
      ],
      "x-ms-enum": {
        "name": "PostContentSchemaGrantType",
        "modelAsString": true,
        "values": [
          {
            "name": "access_token_refresh_token",
            "value": "access_token_refresh_token",
            "description": "Grant type for exchanging both access token and refresh token"
          },
          {
            "name": "access_token",
            "value": "access_token",
            "description": "Grant type for exchanging access token only"
          },
          {
            "name": "refresh_token",
            "value": "refresh_token",
            "description": "Grant type for exchanging refresh token only"
          }
        ]
      }
    },
    "Repositories": {
      "type": "object",
      "description": "List of repositories",
      "properties": {
        "repositories": {
          "type": "array",
          "description": "Repository names",
          "items": {
            "type": "string"
          }
        },
        "link": {
          "type": "string",
          "description": "Link to the next page of results"
        }
      }
    },
    "RepositoryTags": {
      "type": "object",
      "description": "Result of the request to list tags of the image",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the image"
        },
        "tags": {
          "type": "array",
          "description": "List of tags",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "RepositoryWriteableProperties": {
      "type": "object",
      "description": "Changeable attributes for Repository",
      "properties": {
        "deleteEnabled": {
          "type": "boolean",
          "description": "Delete enabled",
          "x-ms-client-name": "canDelete"
        },
        "writeEnabled": {
          "type": "boolean",
          "description": "Write enabled",
          "x-ms-client-name": "canWrite"
        },
        "listEnabled": {
          "type": "boolean",
          "description": "List enabled",
          "x-ms-client-name": "canList"
        },
        "readEnabled": {
          "type": "boolean",
          "description": "Read enabled",
          "x-ms-client-name": "canRead"
        }
      }
    },
    "TagAttributesBase": {
      "type": "object",
      "description": "Tag attribute details",
      "properties": {
        "name": {
          "type": "string",
          "description": "Tag name",
          "readOnly": true
        },
        "digest": {
          "type": "string",
          "description": "Tag digest",
          "readOnly": true
        },
        "createdTime": {
          "type": "string",
          "format": "date-time",
          "description": "Tag created time",
          "readOnly": true
        },
        "lastUpdateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Tag last update time",
          "readOnly": true
        },
        "signed": {
          "type": "boolean",
          "description": "Is signed"
        },
        "changeableAttributes": {
          "$ref": "#/definitions/TagWriteableProperties",
          "description": "Writeable properties of the resource"
        }
      },
      "required": [
        "name",
        "digest",
        "createdTime",
        "lastUpdateTime",
        "changeableAttributes"
      ]
    },
    "TagAttributesTag": {
      "type": "object",
      "description": "Tag",
      "properties": {
        "signatureRecord": {
          "type": "string",
          "description": "SignatureRecord value"
        }
      }
    },
    "TagList": {
      "type": "object",
      "description": "List of tag details",
      "properties": {
        "registry": {
          "type": "string",
          "description": "Registry login server name. This is likely to be similar to\n{registry-name}.azurecr.io."
        },
        "imageName": {
          "type": "string",
          "description": "Image name"
        },
        "tags": {
          "type": "array",
          "description": "List of tag attribute details",
          "items": {
            "$ref": "#/definitions/TagAttributesBase"
          }
        },
        "link": {
          "type": "string",
          "description": "Link to the next page of results"
        }
      },
      "required": [
        "registry",
        "imageName",
        "tags"
      ]
    },
    "TagWriteableProperties": {
      "type": "object",
      "description": "Changeable attributes",
      "properties": {
        "deleteEnabled": {
          "type": "boolean",
          "description": "Delete enabled"
        },
        "writeEnabled": {
          "type": "boolean",
          "description": "Write enabled"
        },
        "listEnabled": {
          "type": "boolean",
          "description": "List enabled"
        },
        "readEnabled": {
          "type": "boolean",
          "description": "Read enabled"
        }
      }
    },
    "TokenGrantType": {
      "type": "string",
      "description": "Grant type is expected to be refresh_token",
      "enum": [
        "refresh_token",
        "password"
      ],
      "x-ms-enum": {
        "name": "TokenGrantType",
        "modelAsString": false,
        "values": [
          {
            "name": "refresh_token",
            "value": "refresh_token"
          },
          {
            "name": "password",
            "value": "password"
          }
        ]
      }
    },
    "V1Manifest": {
      "type": "object",
      "description": "Returns the requested V1 manifest file",
      "properties": {
        "architecture": {
          "type": "string",
          "description": "CPU architecture"
        },
        "name": {
          "type": "string",
          "description": "Image name"
        },
        "tag": {
          "type": "string",
          "description": "Image tag"
        },
        "fsLayers": {
          "type": "array",
          "description": "List of layer information",
          "items": {
            "$ref": "#/definitions/FsLayer"
          }
        },
        "history": {
          "type": "array",
          "description": "Image history",
          "items": {
            "$ref": "#/definitions/History"
          }
        },
        "signatures": {
          "type": "array",
          "description": "Image signature",
          "items": {
            "$ref": "#/definitions/ImageSignature"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/Manifest"
        }
      ]
    },
    "V2Manifest": {
      "type": "object",
      "description": "Returns the requested Docker V2 Manifest file",
      "properties": {
        "mediaType": {
          "type": "string",
          "description": "Media type for this Manifest"
        },
        "config": {
          "$ref": "#/definitions/Descriptor",
          "description": "V2 image config descriptor"
        },
        "layers": {
          "type": "array",
          "description": "List of V2 image layer information",
          "items": {
            "$ref": "#/definitions/Descriptor"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/Manifest"
        }
      ]
    }
  },
  "parameters": {
    "Azure.Core.Foundations.ApiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "description": "The API version to use for this operation.",
      "required": true,
      "type": "string",
      "minLength": 1,
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "apiVersion"
    }
  }
}
