{
  "swagger":"2.0",
  "info":{  
    "version":"2018-02-01-preview",
    "title":"ContainerRegistryManagementClient"
  },
  "host":"management.azure.com",
  "basePath":"/",
  "schemes":[  
    "https"
  ],
  "consumes":[  
    "application/json"
  ],
  "produces":[  
    "application/json"
  ],
  "paths":{  
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/builds":{  
      "get":{  
        "tags":[  
          "Builds"
        ],
        "operationId":"Builds_List",
        "parameters":[  
          {  
            "$ref":"#/parameters/SubscriptionIdParameter"
          },
          {  
            "$ref":"#/parameters/ResourceGroupNameParameter"
          },
          {  
            "$ref":"#/parameters/RegistryNameParameter"
          },
          {  
            "$ref":"#/parameters/ApiVersionParameter"
          },
          {  
            "name":"$filter",
            "in":"query",
            "description":"The builds filter to apply on the operation.",
            "required":false,
            "type":"string"
          },
          {  
            "name":"$top",
            "in":"query",
            "description":"$top is supported for get list of builds, which limits the maximum number of builds to return.",
            "required":false,
            "type":"integer",
            "format":"int32"
          },
          {  
            "name":"$skipToken",
            "in":"query",
            "description":"$skipToken is supported on get list of builds, which provides the next page in the list of builds.",
            "required":false,
            "type":"string"
          }
        ],
        "responses":{  
          "200":{  
            "description":"The request was successful; the request was well-formed and received properly.",
            "schema":{  
              "$ref":"#/definitions/BuildListResult"
            }
          },
          "default":{  
            "description":"Error response describing why the operation failed."
          }
        },
        "x-ms-odata":"#/definitions/BuildFilter",
        "x-ms-pageable":{  
          "nextLinkName":"nextLink"
        },
        "x-ms-examples":{  
          "Builds_List":{  
            "$ref":"./examples/BuildsList.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/builds/{buildId}":{  
      "get":{  
        "tags":[  
          "Builds"
        ],
        "operationId":"Builds_Get",
        "parameters":[  
          {  
            "$ref":"#/parameters/SubscriptionIdParameter"
          },
          {  
            "$ref":"#/parameters/ResourceGroupNameParameter"
          },
          {  
            "$ref":"#/parameters/RegistryNameParameter"
          },
          {  
            "$ref":"#/parameters/ApiVersionParameter"
          },
          {  
            "name":"buildId",
            "in":"path",
            "required":true,
            "type":"string"
          }
        ],
        "responses":{  
          "200":{  
            "description":"The request was successful; the request was well-formed and received properly.",
            "schema":{  
              "$ref":"#/definitions/Build"
            }
          },
          "default":{  
            "description":"Error response describing why the operation failed. If the registry/build doesn't exist, 404 (Not found) is returned."
          }
        },
        "x-ms-examples":{  
          "Builds_Get":{  
            "$ref":"./examples/BuildsGet.json"
          }
        }
      },
      "patch":{  
        "tags":[  
          "Builds"
        ],
        "operationId":"Builds_Update",
        "parameters":[  
          {  
            "$ref":"#/parameters/SubscriptionIdParameter"
          },
          {  
            "$ref":"#/parameters/ResourceGroupNameParameter"
          },
          {  
            "$ref":"#/parameters/RegistryNameParameter"
          },
          {  
            "$ref":"#/parameters/ApiVersionParameter"
          },
          {  
            "name":"buildId",
            "in":"path",
            "required":true,
            "type":"string"
          },
          {  
            "name":"buildUpdateParameters",
            "in":"body",
            "required":true,
            "schema":{  
              "$ref":"#/definitions/BuildUpdateParameters"
            }
          }
        ],
        "responses":{  
          "200":{  
            "description":"The request was successful; the request was well-formed and received properly.",
            "schema":{  
              "$ref":"#/definitions/Build"
            }
          },
          "201":{  
            "description":"The request was successfully accepted; the operation will complete asynchronously. The provisioning state of the resource should indicate the current state of the resource.",
            "schema":{  
              "$ref":"#/definitions/Build"
            }
          },
          "default":{  
            "description":"Error response describing why the operation failed. If the registry/build doesn't exist, 404 (Not found) is returned. If any of the input parameters is wrong, 400(Bad Request) is returned."
          }
        },
        "x-ms-long-running-operation":true,
        "x-ms-examples":{  
          "Builds_Update":{  
            "$ref":"./examples/BuildsUpdate.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/builds/{buildId}/getLogLink":{  
      "post":{  
        "tags":[  
          "Builds"
        ],
        "operationId":"Builds_GetLogLink",
        "parameters":[  
          {  
            "$ref":"#/parameters/SubscriptionIdParameter"
          },
          {  
            "$ref":"#/parameters/ResourceGroupNameParameter"
          },
          {  
            "$ref":"#/parameters/RegistryNameParameter"
          },
          {  
            "$ref":"#/parameters/ApiVersionParameter"
          },
          {  
            "name":"buildId",
            "in":"path",
            "required":true,
            "type":"string"
          }
        ],
        "responses":{  
          "200":{  
            "description":"The request was successful; the request was well-formed and received properly.",
            "schema":{  
              "$ref":"#/definitions/BuildGetLogResult"
            }
          },
          "default":{  
            "description":"Error response describing why the operation failed. If the registry/build doesn't exist, 404 (Not found) is returned."
          }
        },
        "x-ms-examples":{  
          "Builds_GetLogLink":{  
            "$ref":"./examples/BuildsGetLogLink.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/builds/{buildId}/cancel":{  
      "post":{  
        "tags":[  
          "Builds"
        ],
        "operationId":"Builds_Cancel",
        "parameters":[  
          {  
            "$ref":"#/parameters/SubscriptionIdParameter"
          },
          {  
            "$ref":"#/parameters/ResourceGroupNameParameter"
          },
          {  
            "$ref":"#/parameters/RegistryNameParameter"
          },
          {  
            "$ref":"#/parameters/ApiVersionParameter"
          },
          {  
            "name":"buildId",
            "in":"path",
            "required":true,
            "type":"string"
          }
        ],
        "responses":{  
          "200":{  
            "description":"The request was successful; the request was well-formed and received properly."
          },
          "202":{  
            "description":"The request was successfully accepted; the operation will complete asynchronously."
          },
          "default":{  
            "description":"Error response describing why the operation failed. If the registry/build doesn't exist, 404 (Not found) is returned."
          }
        },
        "x-ms-long-running-operation":true,
        "x-ms-examples":{  
          "Builds_Cancel":{  
            "$ref":"./examples/BuildsCancel.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/buildTasks/{buildTaskName}/steps":{  
      "get":{  
        "tags":[  
          "BuildSteps"
        ],
        "operationId":"BuildSteps_List",
        "parameters":[  
          {  
            "$ref":"#/parameters/SubscriptionIdParameter"
          },
          {  
            "$ref":"#/parameters/ResourceGroupNameParameter"
          },
          {  
            "$ref":"#/parameters/RegistryNameParameter"
          },
          {  
            "$ref":"#/parameters/ApiVersionParameter"
          },
          {  
            "$ref":"#/parameters/BuildTaskNameParameter"
          }
        ],
        "responses":{  
          "200":{  
            "description":"The request was successful; the request was well-formed and received properly.",
            "schema":{  
              "$ref":"#/definitions/BuildStepList"
            }
          },
          "default":{  
            "description":"Error response describing why the operation failed."
          }
        },
        "x-ms-pageable":{  
          "nextLinkName":"nextLink"
        },
<<<<<<< HEAD
        "x-ms-examples":{  
          "BuildSteps_List":{  
            "$ref":"./examples/BuildStepsList.json"
=======
        "x-ms-examples":{
          "Tasks_List":{
            "$ref":"./examples/TasksList.json"
>>>>>>> 39d335bd87b6488a1bc942e863414a2f5ecac148
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/buildTasks/{buildTaskName}/steps/{stepName}":{  
      "get":{  
        "tags":[  
          "BuildSteps"
        ],
        "operationId":"BuildSteps_Get",
        "parameters":[  
          {  
            "$ref":"#/parameters/SubscriptionIdParameter"
          },
          {  
            "$ref":"#/parameters/ResourceGroupNameParameter"
          },
          {  
            "$ref":"#/parameters/RegistryNameParameter"
          },
          {  
            "$ref":"#/parameters/ApiVersionParameter"
          },
          {  
            "$ref":"#/parameters/BuildTaskNameParameter"
          },
          {  
            "$ref":"#/parameters/StepNameParameter"
          }
        ],
        "responses":{  
          "200":{  
            "description":"The request was successful; the request was well-formed and received properly.",
            "schema":{  
              "$ref":"#/definitions/BuildStep"
            }
          },
          "default":{  
            "description":"Error response describing why the operation failed. If the registry/step doesn't exist, 404 (Not found) is returned."
          }
        },
<<<<<<< HEAD
        "x-ms-examples":{  
          "BuildSteps_Get":{  
            "$ref":"./examples/BuildStepsGet.json"
          }
        }
      },
      "put":{  
        "tags":[  
          "BuildSteps"
=======
        "x-ms-examples":{
          "Tasks_Get":{
            "$ref":"./examples/TasksGet.json"
          }
        }
      },
      "put":{
        "tags":[
          "Tasks"
>>>>>>> 39d335bd87b6488a1bc942e863414a2f5ecac148
        ],
        "operationId":"BuildSteps_Create",
        "parameters":[  
          {  
            "$ref":"#/parameters/SubscriptionIdParameter"
          },
          {  
            "$ref":"#/parameters/ResourceGroupNameParameter"
          },
          {  
            "$ref":"#/parameters/RegistryNameParameter"
          },
          {  
            "$ref":"#/parameters/ApiVersionParameter"
          },
          {  
            "$ref":"#/parameters/BuildTaskNameParameter"
          },
          {  
            "$ref":"#/parameters/StepNameParameter"
          },
          {  
            "name":"buildStepCreateParameters",
            "in":"body",
            "required":true,
            "schema":{  
              "$ref":"#/definitions/BuildStep"
            }
          }
        ],
        "responses":{  
          "200":{  
            "description":"The request was successful; the request was well-formed and received properly.",
            "schema":{  
              "$ref":"#/definitions/BuildStep"
            }
          },
          "201":{  
            "description":"The request was successfully accepted; the operation will complete asynchronously. The provisioning state of the resource should indicate the current state of the resource.",
            "schema":{  
              "$ref":"#/definitions/BuildStep"
            }
          },
          "default":{  
            "description":"Error response describing why the operation failed. If the registry doesn't exist, 404 (Not found) is returned.If any of the input parameters is wrong, 400(Bad Request) is returned."
          }
        },
        "x-ms-long-running-operation":true,
<<<<<<< HEAD
        "x-ms-examples":{  
          "BuildSteps_Create":{  
            "$ref":"./examples/BuildStepsCreate.json"
          }
        }
      },
      "delete":{  
        "tags":[  
          "BuildSteps"
=======
        "x-ms-examples":{
          "Tasks_Create":{
            "$ref":"./examples/TasksCreate.json"
          }
        }
      },
      "delete":{
        "tags":[
          "Tasks"
>>>>>>> 39d335bd87b6488a1bc942e863414a2f5ecac148
        ],
        "operationId":"BuildSteps_Delete",
        "parameters":[  
          {  
            "$ref":"#/parameters/SubscriptionIdParameter"
          },
          {  
            "$ref":"#/parameters/ResourceGroupNameParameter"
          },
          {  
            "$ref":"#/parameters/RegistryNameParameter"
          },
          {  
            "$ref":"#/parameters/ApiVersionParameter"
          },
          {  
            "$ref":"#/parameters/BuildTaskNameParameter"
          },
          {  
            "$ref":"#/parameters/StepNameParameter"
          }
        ],
        "responses":{  
          "200":{  
            "description":"The request was successful; the request was well-formed and received properly."
          },
          "202":{  
            "description":"The request was successfully accepted; the operation will complete asynchronously."
          },
          "default":{  
            "description":"Error response describing why the operation failed."
          }
        },
        "x-ms-long-running-operation":true,
<<<<<<< HEAD
        "x-ms-examples":{  
          "BuildSteps_Delete":{  
            "$ref":"./examples/BuildStepsDelete.json"
          }
        }
      },
      "patch":{  
        "tags":[  
          "BuildSteps"
=======
        "x-ms-examples":{
          "Tasks_Delete":{
            "$ref":"./examples/TasksDelete.json"
          }
        }
      },
      "patch":{
        "tags":[
          "Tasks"
>>>>>>> 39d335bd87b6488a1bc942e863414a2f5ecac148
        ],
        "operationId":"BuildSteps_Update",
        "parameters":[  
          {  
            "$ref":"#/parameters/SubscriptionIdParameter"
          },
          {  
            "$ref":"#/parameters/ResourceGroupNameParameter"
          },
          {  
            "$ref":"#/parameters/RegistryNameParameter"
          },
          {  
            "$ref":"#/parameters/ApiVersionParameter"
          },
          {  
            "$ref":"#/parameters/BuildTaskNameParameter"
          },
          {  
            "$ref":"#/parameters/StepNameParameter"
          },
          {  
            "name":"buildStepUpdateParameters",
            "in":"body",
            "required":true,
            "schema":{  
              "$ref":"#/definitions/BuildStepUpdateParameters"
            }
          }
        ],
        "responses":{  
          "200":{  
            "description":"The request was successful; the request was well-formed and received properly.",
            "schema":{  
              "$ref":"#/definitions/BuildStep"
            }
          },
          "201":{  
            "description":"The request was successfully accepted; the operation will complete asynchronously. The provisioning state of the resource should indicate the current state of the resource.",
            "schema":{  
              "$ref":"#/definitions/BuildStep"
            }
          },
          "default":{  
            "description":"Error response describing why the operation failed. If the registry/step doesn't exist, 404 (Not found) is returned.If any of the input parameters is wrong, 400(Bad Request) is returned."
          }
        },
        "x-ms-long-running-operation":true,
        "x-ms-examples":{  
          "BuildSteps_Update":{  
            "$ref":"./examples/BuildStepsUpdate.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/buildTasks/{buildTaskName}/steps/{stepName}/listBuildArguments":{  
      "post":{  
        "tags":[  
          "BuildSteps"
        ],
        "operationId":"BuildSteps_ListBuildArguments",
        "parameters":[  
          {  
            "$ref":"#/parameters/SubscriptionIdParameter"
          },
          {  
            "$ref":"#/parameters/ResourceGroupNameParameter"
          },
          {  
            "$ref":"#/parameters/RegistryNameParameter"
          },
          {  
            "$ref":"#/parameters/ApiVersionParameter"
          },
          {  
            "$ref":"#/parameters/BuildTaskNameParameter"
          },
          {  
            "$ref":"#/parameters/StepNameParameter"
          }
        ],
        "responses":{  
          "200":{  
            "description":"The request was successful; the request was well-formed and received properly.",
            "schema":{  
              "$ref":"#/definitions/BuildArgumentList"
            }
          },
          "default":{  
            "description":"Error response describing why the operation failed. If the registry/step doesn't exist, 404 (Not found) is returned."
          }
        },
        "x-ms-pageable":{  
          "nextLinkName":"nextLink"
        },
        "x-ms-examples":{  
          "BuildSteps_ListBuildArguments":{  
            "$ref":"./examples/BuildStepsListBuildArguments.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/buildTasks":{  
      "get":{  
        "tags":[  
          "BuildTasks"
        ],
        "operationId":"BuildTasks_List",
        "parameters":[  
          {  
            "$ref":"#/parameters/SubscriptionIdParameter"
          },
          {  
            "$ref":"#/parameters/ResourceGroupNameParameter"
          },
          {  
            "$ref":"#/parameters/RegistryNameParameter"
          },
          {  
            "$ref":"#/parameters/ApiVersionParameter"
          },
          {  
            "name":"$filter",
            "in":"query",
            "description":"The build task filter to apply on the operation.",
            "required":false,
            "type":"string"
          },
          {  
            "name":"$skipToken",
            "in":"query",
            "description":"$skipToken is supported on get list of build tasks, which provides the next page in the list of tasks.",
            "required":false,
            "type":"string"
          }
        ],
        "responses":{  
          "200":{  
            "description":"The request was successful; the request was well-formed and received properly.",
            "schema":{  
              "$ref":"#/definitions/BuildTaskListResult"
            }
          },
          "default":{  
            "description":"Error response describing why the operation failed."
          }
        },
        "x-ms-odata":"#/definitions/BuildTaskFilter",
        "x-ms-pageable":{  
          "nextLinkName":"nextLink"
        },
        "x-ms-examples":{  
          "BuildTasks_List":{  
            "$ref":"./examples/BuildTasksList.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/buildTasks/{buildTaskName}":{  
      "get":{  
        "tags":[  
          "BuildTasks"
        ],
        "operationId":"BuildTasks_Get",
        "parameters":[  
          {  
            "$ref":"#/parameters/SubscriptionIdParameter"
          },
          {  
            "$ref":"#/parameters/ResourceGroupNameParameter"
          },
          {  
            "$ref":"#/parameters/RegistryNameParameter"
          },
          {  
            "$ref":"#/parameters/ApiVersionParameter"
          },
          {  
            "$ref":"#/parameters/BuildTaskNameParameter"
          }
        ],
        "responses":{  
          "200":{  
            "description":"The request was successful; the request was well-formed and received properly.",
            "schema":{  
              "$ref":"#/definitions/BuildTask"
            }
          },
          "default":{  
            "description":"Error response describing why the operation failed. If the registry doesn't exist, 404 (Not found) is returned."
          }
        },
        "x-ms-examples":{  
          "BuildTasks_Get":{  
            "$ref":"./examples/BuildTasksGet.json"
          }
        }
      },
      "put":{  
        "tags":[  
          "BuildTasks"
        ],
        "operationId":"BuildTasks_Create",
        "parameters":[  
          {  
            "$ref":"#/parameters/SubscriptionIdParameter"
          },
          {  
            "$ref":"#/parameters/ResourceGroupNameParameter"
          },
          {  
            "$ref":"#/parameters/RegistryNameParameter"
          },
          {  
            "$ref":"#/parameters/ApiVersionParameter"
          },
          {  
            "$ref":"#/parameters/BuildTaskNameParameter"
          },
          {  
            "name":"buildTaskCreateParameters",
            "in":"body",
            "required":true,
            "schema":{  
              "$ref":"#/definitions/BuildTask"
            }
          }
        ],
        "responses":{  
          "200":{  
            "description":"The request was successful; the request was well-formed and received properly.",
            "schema":{  
              "$ref":"#/definitions/BuildTask"
            }
          },
          "201":{  
            "description":"The request was successfully accepted; the operation will complete asynchronously. The provisioning state of the resource should indicate the current state of the resource.",
            "schema":{  
              "$ref":"#/definitions/BuildTask"
            }
          },
          "default":{  
            "description":"Error response describing why the operation failed. If the registry doesn't exist, 404 (Not found) is returned. If any of the input parameters is wrong, 400(Bad Request) is returned."
          }
        },
        "x-ms-long-running-operation":true,
        "x-ms-examples":{  
          "BuildTasks_Create":{  
            "$ref":"./examples/BuildTasksCreate.json"
          }
        }
      },
      "delete":{  
        "tags":[  
          "BuildTasks"
        ],
        "operationId":"BuildTasks_Delete",
        "parameters":[  
          {  
            "$ref":"#/parameters/SubscriptionIdParameter"
          },
          {  
            "$ref":"#/parameters/ResourceGroupNameParameter"
          },
          {  
            "$ref":"#/parameters/RegistryNameParameter"
          },
          {  
            "$ref":"#/parameters/ApiVersionParameter"
          },
          {  
            "$ref":"#/parameters/BuildTaskNameParameter"
          }
        ],
        "responses":{  
          "200":{  
            "description":"The request was successful; the request was well-formed and received properly."
          },
          "202":{  
            "description":"The request was successfully accepted; the operation will complete asynchronously."
          },
          "204":{  
            "description":"No Content - the specified resource was not found."
          },
          "default":{  
            "description":"Error response describing why the operation failed."
          }
        },
        "x-ms-long-running-operation":true,
        "x-ms-examples":{  
          "BuildTasks_Delete":{  
            "$ref":"./examples/BuildTasksDelete.json"
          }
        }
      },
      "patch":{  
        "tags":[  
          "BuildTasks"
        ],
        "operationId":"BuildTasks_Update",
        "parameters":[  
          {  
            "$ref":"#/parameters/SubscriptionIdParameter"
          },
          {  
            "$ref":"#/parameters/ResourceGroupNameParameter"
          },
          {  
            "$ref":"#/parameters/RegistryNameParameter"
          },
          {  
            "$ref":"#/parameters/ApiVersionParameter"
          },
          {  
            "$ref":"#/parameters/BuildTaskNameParameter"
          },
          {  
            "name":"buildTaskUpdateParameters",
            "in":"body",
            "required":true,
            "schema":{  
              "$ref":"#/definitions/BuildTaskUpdateParameters"
            }
          }
        ],
        "responses":{  
          "200":{  
            "description":"The request was successful; the request was well-formed and received properly.",
            "schema":{  
              "$ref":"#/definitions/BuildTask"
            }
          },
          "201":{  
            "description":"The request was successfully accepted; the operation will complete asynchronously. The provisioning state of the resource should indicate the current state of the resource.",
            "schema":{  
              "$ref":"#/definitions/BuildTask"
            }
          },
          "default":{  
            "description":"Error response describing why the operation failed. If the registry doesn't exist, 404 (Not found) is returned. If any of the input parameters is wrong, 400(Bad Request) is returned."
          }
        },
        "x-ms-long-running-operation":true,
        "x-ms-examples":{  
          "BuildTasks_Update":{  
            "$ref":"./examples/BuildTasksUpdate.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/buildTasks/{buildTaskName}/listSourceRepositoryProperties":{  
      "post":{  
        "tags":[  
          "BuildTasks"
        ],
        "operationId":"BuildTasks_ListSourceRepositoryProperties",
        "parameters":[  
          {  
            "$ref":"#/parameters/SubscriptionIdParameter"
          },
          {  
            "$ref":"#/parameters/ResourceGroupNameParameter"
          },
          {  
            "$ref":"#/parameters/RegistryNameParameter"
          },
          {  
            "$ref":"#/parameters/ApiVersionParameter"
          },
          {  
            "$ref":"#/parameters/BuildTaskNameParameter"
          }
        ],
        "responses":{  
          "200":{  
            "description":"The request was successful; the request was well-formed and received properly.",
            "schema":{  
              "$ref":"#/definitions/SourceRepositoryProperties"
            }
          },
          "default":{  
            "description":"Error response describing why the operation failed. If the registry doesn't exist, 404 (Not found) is returned."
          }
        },
        "x-ms-examples":{  
          "BuildTasks_ListSourceRepositoryProperties":{  
            "$ref":"./examples/BuildTasksListSourceRepositoryProperties.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/queueBuild":{  
      "post":{  
        "tags":[  
          "Registries"
        ],
        "operationId":"Registries_QueueBuild",
        "parameters":[  
          {  
            "$ref":"#/parameters/SubscriptionIdParameter"
          },
          {  
            "$ref":"#/parameters/ResourceGroupNameParameter"
          },
          {  
            "$ref":"#/parameters/RegistryNameParameter"
          },
          {  
            "$ref":"#/parameters/ApiVersionParameter"
          },
          {  
            "name":"buildRequest",
            "in":"body",
            "required":true,
            "schema":{  
              "$ref":"#/definitions/QueueBuildRequest"
            }
          }
        ],
        "responses":{  
          "200":{  
            "description":"The request was successful; the request was well-formed and received properly.",
            "schema":{  
              "$ref":"#/definitions/Build"
            }
          },
          "202":{  
            "description":"The request was successfully accepted; the operation will complete asynchronously."
          },
          "default":{  
            "description":"Error response describing why the operation failed. If the registry/build doesn't exist, 404 (Not found) is returned. If any of the input parameters is wrong, 400(Bad Request) is returned."
          }
        },
        "x-ms-long-running-operation":true,
        "x-ms-examples":{  
          "Registries_QueueBuild":{  
            "$ref":"./examples/RegistriesQueueBuild.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/getBuildSourceUploadUrl":{  
      "post":{  
        "tags":[  
          "Registries"
        ],
        "operationId":"Registries_GetBuildSourceUploadUrl",
        "parameters":[  
          {  
            "$ref":"#/parameters/SubscriptionIdParameter"
          },
          {  
            "$ref":"#/parameters/ResourceGroupNameParameter"
          },
          {  
            "$ref":"#/parameters/RegistryNameParameter"
          },
          {  
            "$ref":"#/parameters/ApiVersionParameter"
          }
        ],
        "responses":{  
          "200":{  
            "description":"The request was successful; the request was well-formed and received properly.",
            "schema":{  
              "$ref":"#/definitions/SourceUploadDefinition"
            }
          },
          "default":{  
            "description":"Error response describing why the operation failed. If the registry/build doesn't exist, 404 (Not found) is returned."
          }
        },
        "x-ms-examples":{  
          "Registries_GetBuildSourceUploadUrl":{  
            "$ref":"./examples/RegistriesGetBuildSourceUploadUrl.json"
          }
        }
      }
    }
  },
  "definitions":{  
    "BuildListResult":{  
      "type":"object",
      "properties":{  
        "value":{  
          "type":"array",
          "items":{  
            "$ref":"#/definitions/Build"
          }
        },
        "nextLink":{  
          "type":"string"
        }
      }
    },
    "Build":{  
      "type":"object",
      "allOf":[  
        {  
          "$ref":"#/definitions/ProxyResource"
        }
      ],
      "properties":{  
        "properties":{  
          "$ref":"#/definitions/BuildProperties",
          "x-ms-client-flatten":true
        }
      }
    },
    "BuildProperties":{  
      "type":"object",
      "properties":{  
        "buildId":{  
          "type":"string"
        },
        "status":{  
          "enum":[  
            "Queued",
            "Started",
            "Running",
            "Succeeded",
            "Failed",
            "Canceled",
            "Error",
            "Timeout"
          ],
          "type":"string",
          "x-ms-enum":{  
            "name":"BuildStatus",
            "modelAsString":true
          }
        },
        "lastUpdatedTime":{  
          "format":"date-time",
          "type":"string"
        },
        "buildType":{  
          "enum":[  
            "AutoBuild",
            "QuickBuild"
          ],
          "type":"string",
          "x-ms-enum":{  
            "name":"BuildType",
            "modelAsString":true
          }
        },
        "createTime":{  
          "format":"date-time",
          "type":"string"
        },
        "startTime":{  
          "format":"date-time",
          "type":"string"
        },
        "finishTime":{  
          "format":"date-time",
          "type":"string"
        },
        "outputImages":{  
          "type":"array",
          "items":{  
            "$ref":"#/definitions/ImageDescriptor"
          }
        },
        "buildTask":{  
          "type":"string"
        },
        "imageUpdateTrigger":{  
          "$ref":"#/definitions/ImageUpdateTrigger"
        },
        "gitCommitTrigger":{  
          "$ref":"#/definitions/GitCommitTrigger"
        },
        "isArchiveEnabled":{  
          "default":false,
          "type":"boolean"
        },
        "platform":{  
          "$ref":"#/definitions/PlatformProperties"
        },
        "provisioningState":{  
          "enum":[  
            "Creating",
            "Updating",
            "Deleting",
            "Succeeded",
            "Failed",
            "Canceled"
          ],
          "type":"string",
          "x-ms-enum":{  
            "name":"ProvisioningState",
            "modelAsString":true
          }
        }
      }
    },
    "ImageDescriptor":{  
      "type":"object",
      "properties":{  
        "registry":{  
          "type":"string"
        },
        "repository":{  
          "type":"string"
        },
        "tag":{  
          "type":"string"
        },
        "digest":{  
          "type":"string"
        }
      }
    },
    "ImageUpdateTrigger":{  
      "type":"object",
      "properties":{  
        "id":{  
          "type":"string"
        },
        "timestamp":{  
          "format":"date-time",
          "type":"string"
        },
        "images":{  
          "type":"array",
          "items":{  
            "$ref":"#/definitions/ImageDescriptor"
          }
        }
      }
    },
    "GitCommitTrigger":{  
      "type":"object",
      "properties":{  
        "id":{  
          "type":"string"
        },
        "commitId":{  
          "type":"string"
        },
        "repositoryUrl":{  
          "type":"string"
        },
        "branchName":{  
          "type":"string"
        },
        "providerType":{  
          "type":"string"
        }
      }
    },
    "PlatformProperties":{  
      "required":[  
        "osType"
      ],
      "type":"object",
      "properties":{  
        "osType":{  
          "enum":[  
            "Windows",
            "Linux"
          ],
          "type":"string",
          "x-ms-enum":{  
            "name":"OsType",
            "modelAsString":true
          }
        },
        "cpu":{  
          "format":"int32",
          "type":"integer"
        }
      }
    },
    "BuildFilter":{  
      "type":"object",
      "properties":{  
        "buildId":{  
          "type":"string"
        },
        "buildType":{  
          "enum":[  
            "AutoBuild",
            "QuickBuild"
          ],
          "type":"string",
          "x-ms-enum":{  
            "name":"BuildType",
            "modelAsString":true
          }
        },
        "status":{  
          "enum":[  
            "Queued",
            "Started",
            "Running",
            "Succeeded",
            "Failed",
            "Canceled",
            "Error",
            "Timeout"
          ],
          "type":"string",
          "x-ms-enum":{  
            "name":"BuildStatus",
            "modelAsString":true
          }
        },
        "createTime":{  
          "format":"date-time",
          "type":"string"
        },
        "finishTime":{  
          "format":"date-time",
          "type":"string"
        },
        "outputImageManifests":{  
          "type":"string"
        },
        "isArchiveEnabled":{  
          "type":"boolean"
        },
        "buildTaskName":{  
          "type":"string"
        }
      }
    },
    "BuildUpdateParameters":{  
      "type":"object",
      "properties":{  
        "isArchiveEnabled":{  
          "type":"boolean"
        }
      }
    },
    "BuildGetLogResult":{  
      "type":"object",
      "properties":{  
        "logLink":{  
          "type":"string"
        }
      }
    },
    "BuildStepList":{  
      "type":"object",
      "properties":{  
        "value":{  
          "type":"array",
          "items":{  
            "$ref":"#/definitions/BuildStep"
          }
        },
        "nextLink":{  
          "type":"string"
        }
      }
    },
    "BuildStep":{  
      "type":"object",
      "allOf":[  
        {  
          "$ref":"#/definitions/ProxyResource"
        }
      ],
      "properties":{  
        "properties":{  
          "$ref":"#/definitions/BuildStepProperties"
        }
      }
    },
    "BuildStepProperties":{  
      "type":"object",
      "properties":{  
        "provisioningState":{  
          "enum":[  
            "Creating",
            "Updating",
            "Deleting",
            "Succeeded",
            "Failed",
            "Canceled"
          ],
          "type":"string",
          "readOnly":true,
          "x-ms-enum":{  
            "name":"ProvisioningState",
            "modelAsString":true
          }
        },
        "type":{  
          "enum":[  
            "Docker"
          ],
          "type":"string",
          "readOnly":true,
          "x-ms-enum":{  
            "name":"BuildStepType",
            "modelAsString":true
          }
        }
      },
      "discriminator":"type"
    },
    "BuildStepUpdateParameters":{  
      "type":"object",
      "properties":{  
        "properties":{  
          "$ref":"#/definitions/BuildStepPropertiesUpdateParameters"
        },
        "tags":{  
          "type":"object",
          "additionalProperties":{  
            "type":"string"
          }
        }
      }
    },
    "BuildStepPropertiesUpdateParameters":{  
      "type":"object",
      "properties":{  
        "type":{  
          "enum":[  
            "Docker"
          ],
          "type":"string",
          "readOnly":true,
          "x-ms-enum":{  
            "name":"BuildStepType",
            "modelAsString":true
          }
        }
      },
      "discriminator":"type"
    },
    "BuildArgumentList":{  
      "type":"object",
      "properties":{  
        "value":{  
          "type":"array",
          "items":{  
            "$ref":"#/definitions/BuildArgument"
          }
        },
        "nextLink":{  
          "type":"string"
        }
      }
    },
    "BuildArgument":{  
      "required":[  
        "type",
        "name",
        "value"
      ],
      "type":"object",
      "properties":{  
        "type":{  
          "enum":[  
            "DockerBuildArgument"
          ],
          "type":"string",
          "x-ms-enum":{  
            "name":"BuildArgumentType",
            "modelAsString":true
          }
        },
        "name":{  
          "type":"string"
        },
        "value":{  
          "type":"string"
        },
        "isSecret":{  
          "default":false,
          "type":"boolean"
        }
      }
    },
    "BuildTaskListResult":{  
      "type":"object",
      "properties":{  
        "value":{  
          "type":"array",
          "items":{  
            "$ref":"#/definitions/BuildTask"
          }
        },
        "nextLink":{  
          "type":"string"
        }
      }
    },
    "BuildTask":{  
      "type":"object",
      "allOf":[  
        {  
          "$ref":"#/definitions/Resource"
        }
      ],
      "properties":{  
        "properties":{  
          "$ref":"#/definitions/BuildTaskProperties",
          "x-ms-client-flatten":true
        }
      }
    },
    "BuildTaskProperties":{  
      "required":[  
        "alias",
        "sourceRepository",
        "platform"
      ],
      "type":"object",
      "properties":{  
        "provisioningState":{  
          "enum":[  
            "Creating",
            "Updating",
            "Deleting",
            "Succeeded",
            "Failed",
            "Canceled"
          ],
          "type":"string",
          "readOnly":true,
          "x-ms-enum":{  
            "name":"ProvisioningState",
            "modelAsString":true
          }
        },
        "creationDate":{  
          "format":"date-time",
          "type":"string",
          "readOnly":true
        },
        "alias":{  
          "type":"string"
        },
        "status":{  
          "enum":[  
            "Disabled",
            "Enabled"
          ],
          "type":"string",
          "x-ms-enum":{  
            "name":"BuildTaskStatus",
            "modelAsString":true
          }
        },
        "sourceRepository":{  
          "$ref":"#/definitions/SourceRepositoryProperties"
        },
        "platform":{  
          "$ref":"#/definitions/PlatformProperties"
        },
        "timeout":{  
          "format":"int32",
          "default":3600,
          "maximum":28800,
          "minimum":300,
          "type":"integer"
        }
      }
    },
    "SourceRepositoryProperties":{  
      "required":[  
        "sourceControlType",
        "repositoryUrl"
      ],
      "type":"object",
      "properties":{  
        "sourceControlType":{  
          "enum":[  
            "Github",
            "VisualStudioTeamService"
          ],
          "type":"string",
          "x-ms-enum":{  
            "name":"SourceControlType",
            "modelAsString":true
          }
        },
        "repositoryUrl":{  
          "type":"string"
        },
        "isCommitTriggerEnabled":{  
          "default":false,
          "type":"boolean"
        },
        "sourceControlAuthProperties":{  
          "$ref":"#/definitions/SourceControlAuthInfo"
        }
      }
    },
    "SourceControlAuthInfo":{  
      "required":[  
        "tokenType",
        "token"
      ],
      "type":"object",
      "properties":{  
        "tokenType":{  
          "enum":[  
            "PAT",
            "OAuth"
          ],
          "type":"string",
          "x-ms-enum":{  
            "name":"TokenType",
            "modelAsString":true
          }
        },
        "token":{  
          "type":"string"
        },
        "refreshToken":{  
          "type":"string"
        },
        "scope":{  
          "type":"string"
        },
        "expiresIn":{  
          "format":"int32",
          "type":"integer"
        }
      }
    },
    "BuildTaskFilter":{  
      "type":"object",
      "properties":{  
        "alias":{  
          "type":"string"
        }
      }
    },
    "BuildTaskUpdateParameters":{  
      "type":"object",
      "properties":{  
        "properties":{  
          "$ref":"#/definitions/BuildTaskPropertiesUpdateParameters",
          "x-ms-client-flatten":true
        },
        "tags":{  
          "type":"object",
          "additionalProperties":{  
            "type":"string"
          }
        }
      }
    },
    "BuildTaskPropertiesUpdateParameters":{  
      "type":"object",
      "properties":{  
        "alias":{  
          "type":"string"
        },
        "status":{  
          "enum":[  
            "Disabled",
            "Enabled"
          ],
          "type":"string",
          "x-ms-enum":{  
            "name":"BuildTaskStatus",
            "modelAsString":true
          }
        },
        "platform":{  
          "$ref":"#/definitions/PlatformProperties"
        },
        "timeout":{  
          "format":"int32",
          "maximum":28800,
          "minimum":300,
          "type":"integer"
        },
        "sourceRepository":{  
          "$ref":"#/definitions/SourceRepositoryUpdateParameters"
        }
      }
    },
    "SourceRepositoryUpdateParameters":{  
      "type":"object",
      "properties":{  
        "sourceControlAuthProperties":{  
          "$ref":"#/definitions/SourceControlAuthInfo"
        },
        "isCommitTriggerEnabled":{  
          "type":"boolean"
        }
      }
    },
    "QueueBuildRequest":{  
      "type":"object",
      "properties":{  
        "type":{  
          "type":"string",
          "readOnly":true
        }
      },
      "discriminator":"type"
    },
    "SourceUploadDefinition":{  
      "type":"object",
      "properties":{  
        "uploadUrl":{  
          "type":"string"
        },
        "relativePath":{  
          "type":"string"
        }
      }
    },
    "Resource":{  
      "description":"An Azure resource.",
      "required":[  
        "location"
      ],
      "properties":{  
        "id":{  
          "description":"The resource ID.",
          "type":"string",
          "readOnly":true
        },
        "name":{  
          "description":"The name of the resource.",
          "type":"string",
          "readOnly":true
        },
        "type":{  
          "description":"The type of the resource.",
          "type":"string",
          "readOnly":true
        },
        "location":{  
          "description":"The location of the resource. This cannot be changed after the resource is created.",
          "type":"string",
          "x-ms-mutability":[  
            "read",
            "create"
          ]
        },
        "tags":{  
          "description":"The tags of the resource.",
          "type":"object",
          "additionalProperties":{  
            "type":"string"
          }
        }
      },
      "x-ms-azure-resource":true
    },
    "ProxyResource":{  
      "description":"The resource model definition for a ARM proxy resource. It will have everything other than required location and tags.",
      "properties":{  
        "id":{  
          "description":"The resource ID.",
          "type":"string",
          "readOnly":true
        },
        "name":{  
          "description":"The name of the resource.",
          "type":"string",
          "readOnly":true
        },
        "type":{  
          "description":"The type of the resource.",
          "type":"string",
          "readOnly":true
        }
      },
      "x-ms-azure-resource":true
    },
    "DockerBuildStep":{  
      "type":"object",
      "allOf":[  
        {  
          "$ref":"#/definitions/BuildStepProperties"
        }
      ],
      "properties":{  
        "branch":{  
          "type":"string"
        },
        "imageNames":{  
          "type":"array",
          "items":{  
            "type":"string"
          }
        },
        "isPushEnabled":{  
          "default":true,
          "type":"boolean"
        },
        "noCache":{  
          "default":false,
          "type":"boolean"
        },
        "dockerFilePath":{  
          "type":"string"
        },
        "contextPath":{  
          "type":"string"
        },
        "buildArguments":{  
          "type":"array",
          "items":{  
            "$ref":"#/definitions/BuildArgument"
          }
        },
        "baseImageDependencies":{  
          "type":"array",
          "items":{  
            "$ref":"#/definitions/BaseImageDependency"
          },
          "readOnly":true
        },
        "baseImageTrigger":{  
          "enum":[  
            "All",
            "Runtime",
            "None"
          ],
          "type":"string",
          "x-ms-enum":{  
            "name":"BaseImageTriggerType",
            "modelAsString":true
          }
        }
      },
      "x-ms-discriminator-value":"Docker"
    },
    "BaseImageDependency":{  
      "type":"object",
      "properties":{  
        "type":{  
          "enum":[  
            "BuildTime",
            "RunTime"
          ],
          "type":"string",
          "x-ms-enum":{  
            "name":"BaseImageDependencyType",
            "modelAsString":true
          }
        },
        "registry":{  
          "type":"string"
        },
        "repository":{  
          "type":"string"
        },
        "tag":{  
          "type":"string"
        },
        "digest":{  
          "type":"string"
        }
      }
    },
    "DockerBuildStepUpdateParameters":{  
      "required":[  
        "type"
      ],
      "type":"object",
      "allOf":[  
        {  
          "$ref":"#/definitions/BuildStepPropertiesUpdateParameters"
        }
      ],
      "properties":{  
        "branch":{  
          "type":"string"
        },
        "imageNames":{  
          "type":"array",
          "items":{  
            "type":"string"
          }
        },
        "isPushEnabled":{  
          "type":"boolean"
        },
        "noCache":{  
          "type":"boolean"
        },
        "dockerFilePath":{  
          "type":"string"
        },
        "contextPath":{  
          "type":"string"
        },
        "buildArguments":{  
          "type":"array",
          "items":{  
            "$ref":"#/definitions/BuildArgument"
          }
        },
        "baseImageTrigger":{  
          "enum":[  
            "All",
            "Runtime",
            "None"
          ],
          "type":"string",
          "x-ms-enum":{  
            "name":"BaseImageTriggerType",
            "modelAsString":true
          }
        }
      },
      "x-ms-discriminator-value":"Docker"
    },
    "BuildTaskBuildRequest":{  
      "required":[  
        "type",
        "buildTaskName"
      ],
      "type":"object",
      "allOf":[  
        {  
          "$ref":"#/definitions/QueueBuildRequest"
        }
      ],
      "properties":{  
        "buildTaskName":{  
          "type":"string"
        }
      },
      "x-ms-discriminator-value":"BuildTask"
    },
    "QuickBuildRequest":{  
      "required":[  
        "type",
        "sourceLocation",
        "platform",
        "dockerFilePath"
      ],
      "type":"object",
      "allOf":[  
        {  
          "$ref":"#/definitions/QueueBuildRequest"
        }
      ],
      "properties":{  
        "imageNames":{  
          "type":"array",
          "items":{  
            "type":"string"
          }
        },
        "sourceLocation":{  
          "type":"string"
        },
        "buildArguments":{  
          "type":"array",
          "items":{  
            "$ref":"#/definitions/BuildArgument"
          }
        },
        "isPushEnabled":{  
          "default":true,
          "type":"boolean"
        },
        "noCache":{  
          "default":false,
          "type":"boolean"
        },
        "timeout":{  
          "format":"int32",
          "default":3600,
          "maximum":28800,
          "minimum":300,
          "type":"integer"
        },
        "platform":{  
          "$ref":"#/definitions/PlatformProperties"
        },
        "dockerFilePath":{  
          "type":"string"
        }
      },
      "x-ms-discriminator-value":"QuickBuild"
    }
  },
  "parameters":{  
    "SubscriptionIdParameter":{  
      "name":"subscriptionId",
      "in":"path",
      "description":"The Microsoft Azure subscription ID.",
      "required":true,
      "type":"string"
    },
    "ResourceGroupNameParameter":{  
      "name":"resourceGroupName",
      "in":"path",
      "description":"The name of the resource group to which the container registry belongs.",
      "required":true,
      "type":"string",
      "minLength":1,
      "x-ms-parameter-location":"method"
    },
    "RegistryNameParameter":{  
      "name":"registryName",
      "in":"path",
      "description":"The name of the container registry.",
      "required":true,
      "type":"string",
      "maxLength":50,
      "minLength":5,
      "pattern":"^[a-zA-Z0-9]*$",
      "x-ms-parameter-location":"method"
    },
    "ApiVersionParameter":{  
      "name":"api-version",
      "in":"query",
      "description":"The client API version.",
      "required":true,
      "type":"string"
    },
    "BuildTaskNameParameter":{  
      "name":"buildTaskName",
      "in":"path",
      "description":"The name of the container registry build task.",
      "required":true,
      "type":"string",
      "maxLength":50,
      "minLength":5,
      "pattern":"^[a-zA-Z0-9]*$",
      "x-ms-parameter-location":"method"
    },
    "StepNameParameter":{  
      "name":"stepName",
      "in":"path",
      "description":"The name of a build step for a container registry build task.",
      "required":true,
      "type":"string",
      "maxLength":50,
      "minLength":5,
      "pattern":"^[a-zA-Z0-9]*$",
      "x-ms-parameter-location":"method"
    }
  },
  "securityDefinitions":{  
    "azure_auth":{  
      "flow":"implicit",
      "authorizationUrl":"https://login.microsoftonline.com/common/oauth2/authorize",
      "scopes":{  
        "user_impersonation":"impersonate your user account"
      },
      "type":"oauth2",
      "description":"Azure Active Directory OAuth2 Flow"
    }
  },
  "security":[  
    {  
      "azure_auth":[  
        "user_impersonation"
      ]
    }
  ]
}