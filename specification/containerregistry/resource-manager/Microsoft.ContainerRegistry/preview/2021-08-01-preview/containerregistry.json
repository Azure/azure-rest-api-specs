{
  "swagger": "2.0",
  "info": {
    "title": "ContainerRegistryManagementClient",
    "version": "2021-08-01-preview"
  },
  "host": "management.azure.com",
  "schemes": [
    "https"
  ],
  "paths": {
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/connectedRegistries/{connectedRegistryName}": {
      "get": {
        "tags": [
          "ConnectedRegistries"
        ],
        "description": "Gets the properties of the connected registry.",
        "operationId": "ConnectedRegistries_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/ConnectedRegistryNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/ConnectedRegistry"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed. If the resource does not exist, 404 (Not found) is returned.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "ConnectedRegistryGet": {
            "$ref": "./examples/ConnectedRegistryGet.json"
          }
        }
      },
      "put": {
        "tags": [
          "ConnectedRegistries"
        ],
        "description": "Creates a connected registry for a container registry with the specified parameters.",
        "operationId": "ConnectedRegistries_Create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/ConnectedRegistryNameParameter"
          },
          {
            "in": "body",
            "name": "connectedRegistryCreateParameters",
            "description": "The parameters for creating a connectedRegistry.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConnectedRegistry"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/ConnectedRegistry"
            }
          },
          "201": {
            "description": "The request was successful; the operation will complete asynchronously.",
            "schema": {
              "$ref": "#/definitions/ConnectedRegistry"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed. If any of the input parameters are invalid, 400 (Bad Request) is returned. If the request cannot be processed due to a conflict in the request, 409 (Conflict) is returned.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "ConnectedRegistryCreate": {
            "$ref": "./examples/ConnectedRegistryCreate.json"
          }
        }
      },
      "patch": {
        "tags": [
          "ConnectedRegistries"
        ],
        "description": "Updates a connected registry with the specified parameters.",
        "operationId": "ConnectedRegistries_Update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/ConnectedRegistryNameParameter"
          },
          {
            "in": "body",
            "name": "connectedRegistryUpdateParameters",
            "description": "The parameters for updating a connectedRegistry.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConnectedRegistryUpdateParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/ConnectedRegistry"
            }
          },
          "201": {
            "description": "The request was successful; the operation will complete asynchronously.",
            "schema": {
              "$ref": "#/definitions/ConnectedRegistry"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed. If any of the input parameters are invalid, 400 (Bad Request) is returned. If the request cannot be processed due to a conflict in the request, 409 (Conflict) is returned.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "ConnectedRegistryUpdate": {
            "$ref": "./examples/ConnectedRegistryUpdate.json"
          }
        }
      },
      "delete": {
        "tags": [
          "ConnectedRegistries"
        ],
        "description": "Deletes a connected registry from a container registry.",
        "operationId": "ConnectedRegistries_Delete",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/ConnectedRegistryNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly."
          },
          "202": {
            "description": "The request was successful; the operation will complete asynchronously."
          },
          "204": {
            "description": "The webhook does not exist in the subscription."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "ConnectedRegistryDelete": {
            "$ref": "./examples/ConnectedRegistryDelete.json"
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/connectedRegistries": {
      "get": {
        "tags": [
          "ConnectedRegistries"
        ],
        "description": "Lists all connected registries for the specified container registry.",
        "operationId": "ConnectedRegistries_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/ConnectedRegistryFilterParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/ConnectedRegistryListResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "ConnectedRegistryList": {
            "$ref": "./examples/ConnectedRegistryList.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/connectedRegistries/{connectedRegistryName}/deactivate": {
      "post": {
        "tags": [
          "ConnectedRegistries"
        ],
        "description": "Deactivates the connected registry instance.",
        "operationId": "ConnectedRegistries_Deactivate",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/ConnectedRegistryNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly."
          },
          "202": {
            "description": "The request was successful; the operation will complete asynchronously."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "ConnectedRegistryDeactivate": {
            "$ref": "./examples/ConnectedRegistryDeactivate.json"
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/exportPipelines/{exportPipelineName}": {
      "get": {
        "tags": [
          "ExportPipelines"
        ],
        "description": "Gets the properties of the export pipeline.",
        "operationId": "ExportPipelines_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/ExportPipelineNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/ExportPipeline"
            }
          }
        },
        "x-ms-examples": {
          "ExportPipelineGet": {
            "$ref": "./examples/ExportPipelineGet.json"
          }
        }
      },
      "put": {
        "tags": [
          "ExportPipelines"
        ],
        "description": "Creates an export pipeline for a container registry with the specified parameters.",
        "operationId": "ExportPipelines_Create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/ExportPipelineNameParameter"
          },
          {
            "in": "body",
            "name": "exportPipelineCreateParameters",
            "description": "The parameters for creating an export pipeline.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExportPipeline"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the operation has completed successfully.",
            "schema": {
              "$ref": "#/definitions/ExportPipeline"
            }
          },
          "201": {
            "description": "The request was successful; the operation will complete asynchronously.",
            "schema": {
              "$ref": "#/definitions/ExportPipeline"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "ExportPipelineCreate": {
            "$ref": "./examples/ExportPipelineCreate.json"
          }
        }
      },
      "delete": {
        "tags": [
          "ExportPipelines"
        ],
        "description": "Deletes an export pipeline from a container registry.",
        "operationId": "ExportPipelines_Delete",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/ExportPipelineNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly."
          },
          "202": {
            "description": "The request was successful; the operation will complete asynchronously."
          },
          "204": {
            "description": "The export pipeline does not exist in the subscription."
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "ExportPipelineDelete": {
            "$ref": "./examples/ExportPipelineDelete.json"
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/exportPipelines": {
      "get": {
        "tags": [
          "ExportPipelines"
        ],
        "description": "Lists all export pipelines for the specified container registry.",
        "operationId": "ExportPipelines_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/ExportPipelineListResult"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "ExportPipelineList": {
            "$ref": "./examples/ExportPipelineList.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/importImage": {
      "post": {
        "tags": [
          "Registries"
        ],
        "description": "Copies an image to this container registry from the specified container registry.",
        "operationId": "Registries_ImportImage",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "in": "body",
            "name": "parameters",
            "description": "The parameters specifying the image to copy and the source container registry.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ImportImageParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the operation has completed successfully."
          },
          "202": {
            "description": "The request was successful; the operation will complete asynchronously."
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "ImportImageByTag": {
            "$ref": "./examples/ImportImageByTag.json"
          },
          "ImportImageByManifestDigest": {
            "$ref": "./examples/ImportImageByManifestDigest.json"
          },
          "ImportImageFromPublicRegistry": {
            "$ref": "./examples/ImportImageFromPublicRegistry.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/importPipelines/{importPipelineName}": {
      "get": {
        "tags": [
          "ImportPipelines"
        ],
        "description": "Gets the properties of the import pipeline.",
        "operationId": "ImportPipelines_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/ImportPipelineNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/ImportPipeline"
            }
          }
        },
        "x-ms-examples": {
          "ImportPipelineGet": {
            "$ref": "./examples/ImportPipelineGet.json"
          }
        }
      },
      "put": {
        "tags": [
          "ImportPipelines"
        ],
        "description": "Creates an import pipeline for a container registry with the specified parameters.",
        "operationId": "ImportPipelines_Create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/ImportPipelineNameParameter"
          },
          {
            "in": "body",
            "name": "importPipelineCreateParameters",
            "description": "The parameters for creating an import pipeline.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ImportPipeline"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the operation has completed successfully.",
            "schema": {
              "$ref": "#/definitions/ImportPipeline"
            }
          },
          "201": {
            "description": "The request was successful; the operation will complete asynchronously.",
            "schema": {
              "$ref": "#/definitions/ImportPipeline"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "ImportPipelineCreate": {
            "$ref": "./examples/ImportPipelineCreate.json"
          }
        }
      },
      "delete": {
        "tags": [
          "ImportPipelines"
        ],
        "description": "Deletes an import pipeline from a container registry.",
        "operationId": "ImportPipelines_Delete",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/ImportPipelineNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly."
          },
          "202": {
            "description": "The request was successful; the operation will complete asynchronously."
          },
          "204": {
            "description": "The import pipeline does not exist in the subscription."
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "ImportPipelineDelete": {
            "$ref": "./examples/ImportPipelineDelete.json"
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/importPipelines": {
      "get": {
        "tags": [
          "ImportPipelines"
        ],
        "description": "Lists all import pipelines for the specified container registry.",
        "operationId": "ImportPipelines_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/ImportPipelineListResult"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "ImportPipelineList": {
            "$ref": "./examples/ImportPipelineList.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.ContainerRegistry/checkNameAvailability": {
      "post": {
        "tags": [
          "Operations",
          "Operation"
        ],
        "description": "Checks whether the container registry name is available for use. The name must contain only alphanumeric characters, be globally unique, and between 5 and 50 characters in length.",
        "operationId": "Registries_CheckNameAvailability",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "in": "body",
            "name": "registryNameCheckRequest",
            "description": "The object containing information for the availability request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegistryNameCheckRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/RegistryNameStatus"
            }
          }
        },
        "x-ms-examples": {
          "RegistryCheckNameAvailable": {
            "$ref": "./examples/RegistryCheckNameAvailable.json"
          },
          "RegistryCheckNameNotAvailable": {
            "$ref": "./examples/RegistryCheckNameNotAvailable.json"
          }
        }
      }
    },
    "/providers/Microsoft.ContainerRegistry/operations": {
      "get": {
        "tags": [
          "Operations",
          "Operation"
        ],
        "description": "Lists all of the available Azure Container Registry REST API operations.",
        "operationId": "Operations_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/OperationListResult"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "OperationList": {
            "$ref": "./examples/OperationList.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/pipelineRuns/{pipelineRunName}": {
      "get": {
        "tags": [
          "PipelineRuns"
        ],
        "description": "Gets the detailed information for a given pipeline run.",
        "operationId": "PipelineRuns_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/PipelineRunNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well - formed and received properly.",
            "schema": {
              "$ref": "#/definitions/PipelineRun"
            }
          }
        },
        "x-ms-examples": {
          "PipelineRunGet": {
            "$ref": "./examples/PipelineRunGet.json"
          }
        }
      },
      "put": {
        "tags": [
          "PipelineRuns"
        ],
        "description": "Creates a pipeline run for a container registry with the specified parameters",
        "operationId": "PipelineRuns_Create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/PipelineRunNameParameter"
          },
          {
            "in": "body",
            "name": "pipelineRunCreateParameters",
            "description": "The parameters for creating a pipeline run.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PipelineRun"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well - formed and received properly.",
            "schema": {
              "$ref": "#/definitions/PipelineRun"
            }
          },
          "201": {
            "description": "The request was successful; the operation will complete asynchronously.",
            "schema": {
              "$ref": "#/definitions/PipelineRun"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "PipelineRunCreate_Export": {
            "$ref": "./examples/PipelineRunCreate_Export.json"
          },
          "PipelineRunCreate_Import": {
            "$ref": "./examples/PipelineRunCreate_Import.json"
          }
        }
      },
      "delete": {
        "tags": [
          "PipelineRuns"
        ],
        "description": "Deletes a pipeline run from a container registry.",
        "operationId": "PipelineRuns_Delete",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/PipelineRunNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly."
          },
          "202": {
            "description": "The request was successful; the operation will complete asynchronously."
          },
          "204": {
            "description": "The pipeline run does not exist in the subscription."
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "PipelineRunDelete": {
            "$ref": "./examples/PipelineRunDelete.json"
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/pipelineRuns": {
      "get": {
        "tags": [
          "PipelineRuns"
        ],
        "description": "Lists all the pipeline runs for the specified container registry.",
        "operationId": "PipelineRuns_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well - formed and received properly.",
            "schema": {
              "$ref": "#/definitions/PipelineRunListResult"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "PipelineRunList": {
            "$ref": "./examples/PipelineRunList.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/privateEndpointConnections/{privateEndpointConnectionName}": {
      "put": {
        "tags": [
          "PrivateEndpointConnections"
        ],
        "description": "Update the state of specified private endpoint connection associated with the container registry.",
        "operationId": "PrivateEndpointConnections_CreateOrUpdate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/PrivateEndpointConnectionNameParameter"
          },
          {
            "in": "body",
            "name": "privateEndpointConnection",
            "description": "The parameters for creating a private endpoint connection.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PrivateEndpointConnection"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/PrivateEndpointConnection"
            }
          },
          "201": {
            "description": "The request was successful; the operation will complete asynchronously.",
            "schema": {
              "$ref": "#/definitions/PrivateEndpointConnection"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "PrivateEndpointConnectionCreateOrUpdate": {
            "$ref": "./examples/PrivateEndpointConnectionCreateOrUpdate.json"
          }
        }
      },
      "get": {
        "tags": [
          "PrivateEndpointConnections"
        ],
        "description": "Get the specified private endpoint connection associated with the container registry.",
        "operationId": "PrivateEndpointConnections_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/PrivateEndpointConnectionNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/PrivateEndpointConnection"
            }
          }
        },
        "x-ms-examples": {
          "PrivateEndpointConnectionGet": {
            "$ref": "./examples/PrivateEndpointConnectionGet.json"
          }
        }
      },
      "delete": {
        "tags": [
          "PrivateEndpointConnections"
        ],
        "description": "Deletes the specified private endpoint connection associated with the container registry.",
        "operationId": "PrivateEndpointConnections_Delete",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/PrivateEndpointConnectionNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly."
          },
          "202": {
            "description": "The request was successful; the operation will complete asynchronously."
          },
          "204": {
            "description": "The private endpoint connection does not exist in the subscription."
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "PrivateEndpointConnectionDelete": {
            "$ref": "./examples/PrivateEndpointConnectionDelete.json"
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/privateEndpointConnections": {
      "get": {
        "tags": [
          "PrivateEndpointConnections"
        ],
        "description": "List all private endpoint connections in a container registry.",
        "operationId": "PrivateEndpointConnections_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/PrivateEndpointConnectionListResult"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "PrivateEndpointConnectionList": {
            "$ref": "./examples/PrivateEndpointConnectionList.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}": {
      "get": {
        "tags": [
          "Registries"
        ],
        "description": "Gets the properties of the specified container registry.",
        "operationId": "Registries_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/Registry"
            }
          }
        },
        "x-ms-examples": {
          "RegistryGet": {
            "$ref": "./examples/RegistryGet.json"
          }
        }
      },
      "put": {
        "tags": [
          "Registries"
        ],
        "description": "Creates a container registry with the specified parameters.",
        "operationId": "Registries_Create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "in": "body",
            "name": "registry",
            "description": "The parameters for creating a container registry.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Registry"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/Registry"
            }
          },
          "201": {
            "description": "The request was successful; the operation will complete asynchronously.",
            "schema": {
              "$ref": "#/definitions/Registry"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "RegistryCreate": {
            "$ref": "./examples/RegistryCreate.json"
          },
          "RegistryCreateZoneRedundant": {
            "$ref": "./examples/RegistryCreateZoneRedundant.json"
          }
        }
      },
      "patch": {
        "tags": [
          "Registries"
        ],
        "description": "Updates a container registry with the specified parameters.",
        "operationId": "Registries_Update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "in": "body",
            "name": "registryUpdateParameters",
            "description": "The parameters for updating a container registry.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegistryUpdateParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/Registry"
            }
          },
          "201": {
            "description": "The request was successful; the operation will complete asynchronously.",
            "schema": {
              "$ref": "#/definitions/Registry"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "RegistryUpdate": {
            "$ref": "./examples/RegistryUpdate.json"
          }
        }
      },
      "delete": {
        "tags": [
          "Registries"
        ],
        "description": "Deletes a container registry.",
        "operationId": "Registries_Delete",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly."
          },
          "202": {
            "description": "The request was successful; the operation will complete asynchronously."
          },
          "204": {
            "description": "The container registry does not exist in the subscription."
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "RegistryDelete": {
            "$ref": "./examples/RegistryDelete.json"
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries": {
      "get": {
        "tags": [
          "Registries"
        ],
        "description": "Lists all the container registries under the specified resource group.",
        "operationId": "Registries_ListByResourceGroup",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/RegistryListResult"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "RegistryListByResourceGroup": {
            "$ref": "./examples/RegistryListByResourceGroup.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.ContainerRegistry/registries": {
      "get": {
        "tags": [
          "Registries"
        ],
        "description": "Lists all the container registries under the specified subscription.",
        "operationId": "Registries_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/RegistryListResult"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "RegistryList": {
            "$ref": "./examples/RegistryList.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/listCredentials": {
      "post": {
        "tags": [
          "Registries"
        ],
        "description": "Lists the login credentials for the specified container registry.",
        "operationId": "Registries_ListCredentials",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the list of credentials retrieved and returned successfully.",
            "schema": {
              "$ref": "#/definitions/RegistryListCredentialsResult"
            }
          }
        },
        "x-ms-examples": {
          "RegistryListCredentials": {
            "$ref": "./examples/RegistryListCredentials.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/regenerateCredential": {
      "post": {
        "tags": [
          "Registries"
        ],
        "description": "Regenerates one of the login credentials for the specified container registry.",
        "operationId": "Registries_RegenerateCredential",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "in": "body",
            "name": "regenerateCredentialParameters",
            "description": "Specifies name of the password which should be regenerated -- password or password2.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegenerateCredentialParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the specified credential regenerated successfully.",
            "schema": {
              "$ref": "#/definitions/RegistryListCredentialsResult"
            }
          }
        },
        "x-ms-examples": {
          "RegistryRegenerateCredential": {
            "$ref": "./examples/RegistryRegenerateCredential.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/listUsages": {
      "get": {
        "tags": [
          "Registries"
        ],
        "description": "Gets the quota usages for the specified container registry.",
        "operationId": "Registries_ListUsages",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the registry usages retrieved and returned successfully.",
            "schema": {
              "$ref": "#/definitions/RegistryUsageListResult"
            }
          }
        },
        "x-ms-examples": {
          "RegistryListUsages": {
            "$ref": "./examples/RegistryListUsages.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/privateLinkResources": {
      "get": {
        "tags": [
          "Registries"
        ],
        "description": "Lists the private link resources for a container registry.",
        "operationId": "Registries_ListPrivateLinkResources",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the private link resources were retrieved and returned successfully.",
            "schema": {
              "$ref": "#/definitions/PrivateLinkResourceListResult"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "RegistryListPrivateLinkResources": {
            "$ref": "./examples/RegistryListPrivateLinkResources.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/replications/{replicationName}": {
      "get": {
        "tags": [
          "Replications"
        ],
        "description": "Gets the properties of the specified replication.",
        "operationId": "Replications_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/ReplicationNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/Replication"
            }
          }
        },
        "x-ms-examples": {
          "ReplicationGet": {
            "$ref": "./examples/ReplicationGet.json"
          }
        }
      },
      "put": {
        "tags": [
          "Replications"
        ],
        "description": "Creates a replication for a container registry with the specified parameters.",
        "operationId": "Replications_Create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/ReplicationNameParameter"
          },
          {
            "in": "body",
            "name": "replication",
            "description": "The parameters for creating a replication.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Replication"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/Replication"
            }
          },
          "201": {
            "description": "The request was successful; the operation will complete asynchronously.",
            "schema": {
              "$ref": "#/definitions/Replication"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "ReplicationCreate": {
            "$ref": "./examples/ReplicationCreate.json"
          },
          "ReplicationCreateZoneRedundant": {
            "$ref": "./examples/ReplicationCreateZoneRedundant.json"
          }
        }
      },
      "patch": {
        "tags": [
          "Replications"
        ],
        "description": "Updates a replication for a container registry with the specified parameters.",
        "operationId": "Replications_Update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/ReplicationNameParameter"
          },
          {
            "in": "body",
            "name": "replicationUpdateParameters",
            "description": "The parameters for updating a replication.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReplicationUpdateParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/Replication"
            }
          },
          "201": {
            "description": "The request was successful; the operation will complete asynchronously.",
            "schema": {
              "$ref": "#/definitions/Replication"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "ReplicationUpdate": {
            "$ref": "./examples/ReplicationUpdate.json"
          }
        }
      },
      "delete": {
        "tags": [
          "Replications"
        ],
        "description": "Deletes a replication from a container registry.",
        "operationId": "Replications_Delete",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/ReplicationNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly."
          },
          "202": {
            "description": "The request was successful; the operation will complete asynchronously."
          },
          "204": {
            "description": "The replication does not exist in the subscription."
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "ReplicationDelete": {
            "$ref": "./examples/ReplicationDelete.json"
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/replications": {
      "get": {
        "tags": [
          "Replications"
        ],
        "description": "Lists all the replications for the specified container registry.",
        "operationId": "Replications_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/ReplicationListResult"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "ReplicationList": {
            "$ref": "./examples/ReplicationList.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/scopeMaps/{scopeMapName}": {
      "get": {
        "tags": [
          "ScopeMaps"
        ],
        "description": "Gets the properties of the specified scope map.",
        "operationId": "ScopeMaps_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/ScopeMapNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/ScopeMap"
            }
          }
        },
        "x-ms-examples": {
          "ScopeMapGet": {
            "$ref": "./examples/ScopeMapGet.json"
          }
        }
      },
      "put": {
        "tags": [
          "ScopeMaps"
        ],
        "description": "Creates a scope map for a container registry with the specified parameters.",
        "operationId": "ScopeMaps_Create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/ScopeMapNameParameter"
          },
          {
            "in": "body",
            "name": "scopeMapCreateParameters",
            "description": "The parameters for creating a scope map.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ScopeMap"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/ScopeMap"
            }
          },
          "201": {
            "description": "The request was successful; the operation will complete asynchronously.",
            "schema": {
              "$ref": "#/definitions/ScopeMap"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "ScopeMapCreate": {
            "$ref": "./examples/ScopeMapCreate.json"
          }
        }
      },
      "patch": {
        "tags": [
          "ScopeMaps"
        ],
        "description": "Updates a scope map with the specified parameters.",
        "operationId": "ScopeMaps_Update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/ScopeMapNameParameter"
          },
          {
            "in": "body",
            "name": "scopeMapUpdateParameters",
            "description": "The parameters for updating a scope map.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ScopeMapUpdateParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/ScopeMap"
            }
          },
          "201": {
            "description": "The request was successful; the operation will complete asynchronously.",
            "schema": {
              "$ref": "#/definitions/ScopeMap"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "ScopeMapUpdate": {
            "$ref": "./examples/ScopeMapUpdate.json"
          }
        }
      },
      "delete": {
        "tags": [
          "ScopeMaps"
        ],
        "description": "Deletes a scope map from a container registry.",
        "operationId": "ScopeMaps_Delete",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/ScopeMapNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly."
          },
          "202": {
            "description": "The request was successful; the operation will complete asynchronously."
          },
          "204": {
            "description": "The scopemap does not exist in the subscription."
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "ScopeMapDelete": {
            "$ref": "./examples/ScopeMapDelete.json"
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/scopeMaps": {
      "get": {
        "tags": [
          "ScopeMaps"
        ],
        "description": "Lists all the scope maps for the specified container registry.",
        "operationId": "ScopeMaps_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/ScopeMapListResult"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "ScopeMapList": {
            "$ref": "./examples/ScopeMapList.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tokens/{tokenName}": {
      "get": {
        "tags": [
          "Tokens"
        ],
        "description": "Gets the properties of the specified token.",
        "operationId": "Tokens_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/TokenNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/Token"
            }
          }
        },
        "x-ms-examples": {
          "TokenGet": {
            "$ref": "./examples/TokenGet.json"
          }
        }
      },
      "put": {
        "tags": [
          "Tokens"
        ],
        "description": "Creates a token for a container registry with the specified parameters.",
        "operationId": "Tokens_Create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/TokenNameParameter"
          },
          {
            "in": "body",
            "name": "tokenCreateParameters",
            "description": "The parameters for creating a token.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/Token"
            }
          },
          "201": {
            "description": "The request was successful; the operation will complete asynchronously.",
            "schema": {
              "$ref": "#/definitions/Token"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "TokenCreate": {
            "$ref": "./examples/TokenCreate.json"
          }
        }
      },
      "patch": {
        "tags": [
          "Tokens"
        ],
        "description": "Updates a token with the specified parameters.",
        "operationId": "Tokens_Update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/TokenNameParameter"
          },
          {
            "in": "body",
            "name": "tokenUpdateParameters",
            "description": "The parameters for updating a token.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TokenUpdateParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/Token"
            }
          },
          "201": {
            "description": "The request was successful; the operation will complete asynchronously.",
            "schema": {
              "$ref": "#/definitions/Token"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "TokenUpdate": {
            "$ref": "./examples/TokenUpdate.json"
          }
        }
      },
      "delete": {
        "tags": [
          "Tokens"
        ],
        "description": "Deletes a token from a container registry.",
        "operationId": "Tokens_Delete",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/TokenNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly."
          },
          "202": {
            "description": "The request was successful; the operation will complete asynchronously."
          },
          "204": {
            "description": "The token does not exist in the subscription."
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "TokenDelete": {
            "$ref": "./examples/TokenDelete.json"
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tokens": {
      "get": {
        "tags": [
          "Tokens"
        ],
        "description": "Lists all the tokens for the specified container registry.",
        "operationId": "Tokens_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/TokenListResult"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "TokenList": {
            "$ref": "./examples/TokenList.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/generateCredentials": {
      "post": {
        "tags": [
          "Registries"
        ],
        "description": "Generate keys for a token of a specified container registry.",
        "operationId": "Registries_GenerateCredentials",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "in": "body",
            "name": "generateCredentialsParameters",
            "description": "The parameters for generating credentials.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GenerateCredentialsParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/GenerateCredentialsResult"
            }
          },
          "202": {
            "description": "The request was successful; the operation will complete asynchronously."
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "RegistryGenerateCredentials": {
            "$ref": "./examples/RegistryGenerateCredentials.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks/{webhookName}": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "description": "Gets the properties of the specified webhook.",
        "operationId": "Webhooks_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/WebhookNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/Webhook"
            }
          }
        },
        "x-ms-examples": {
          "WebhookGet": {
            "$ref": "./examples/WebhookGet.json"
          }
        }
      },
      "put": {
        "tags": [
          "Webhooks"
        ],
        "description": "Creates a webhook for a container registry with the specified parameters.",
        "operationId": "Webhooks_Create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/WebhookNameParameter"
          },
          {
            "in": "body",
            "name": "webhookCreateParameters",
            "description": "The parameters for creating a webhook.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebhookCreateParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/Webhook"
            }
          },
          "201": {
            "description": "The request was successful; the operation will complete asynchronously.",
            "schema": {
              "$ref": "#/definitions/Webhook"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "WebhookCreate": {
            "$ref": "./examples/WebhookCreate.json"
          }
        }
      },
      "patch": {
        "tags": [
          "Webhooks"
        ],
        "description": "Updates a webhook with the specified parameters.",
        "operationId": "Webhooks_Update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/WebhookNameParameter"
          },
          {
            "in": "body",
            "name": "webhookUpdateParameters",
            "description": "The parameters for updating a webhook.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebhookUpdateParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/Webhook"
            }
          },
          "201": {
            "description": "The request was successful; the operation will complete asynchronously.",
            "schema": {
              "$ref": "#/definitions/Webhook"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "WebhookUpdate": {
            "$ref": "./examples/WebhookUpdate.json"
          }
        }
      },
      "delete": {
        "tags": [
          "Webhooks"
        ],
        "description": "Deletes a webhook from a container registry.",
        "operationId": "Webhooks_Delete",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/WebhookNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly."
          },
          "202": {
            "description": "The request was successful; the operation will complete asynchronously."
          },
          "204": {
            "description": "The webhook does not exist in the subscription."
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "WebhookDelete": {
            "$ref": "./examples/WebhookDelete.json"
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "description": "Lists all the webhooks for the specified container registry.",
        "operationId": "Webhooks_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/WebhookListResult"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "WebhookList": {
            "$ref": "./examples/WebhookList.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks/{webhookName}/ping": {
      "post": {
        "tags": [
          "Webhooks"
        ],
        "description": "Triggers a ping event to be sent to the webhook.",
        "operationId": "Webhooks_Ping",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/WebhookNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/EventInfo"
            }
          }
        },
        "x-ms-examples": {
          "WebhookPing": {
            "$ref": "./examples/WebhookPing.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks/{webhookName}/getCallbackConfig": {
      "post": {
        "tags": [
          "Webhooks"
        ],
        "description": "Gets the configuration of service URI and custom headers for the webhook.",
        "operationId": "Webhooks_GetCallbackConfig",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/WebhookNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/CallbackConfig"
            }
          }
        },
        "x-ms-examples": {
          "WebhookGetCallbackConfig": {
            "$ref": "./examples/WebhookGetCallbackConfig.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks/{webhookName}/listEvents": {
      "post": {
        "tags": [
          "Webhooks"
        ],
        "description": "Lists recent events for the specified webhook.",
        "operationId": "Webhooks_ListEvents",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/WebhookNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/EventListResult"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "WebhookListEvents": {
            "$ref": "./examples/WebhookListEvents.json"
          }
        }
      }
    }
  },
  "definitions": {
    "ActivationProperties": {
      "description": "The activation properties of the connected registry.",
      "type": "object",
      "properties": {
        "status": {
          "description": "The activation status of the connected registry.",
          "enum": [
            "Active",
            "Inactive"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "ActivationStatus",
            "modelAsString": true
          }
        }
      }
    },
    "ActiveDirectoryObject": {
      "description": "The Active Directory Object that will be used for authenticating the token of a container registry.",
      "type": "object",
      "properties": {
        "objectId": {
          "description": "The user/group/application object ID for Active Directory Object that will be used for authenticating the token of a container registry.",
          "type": "string"
        },
        "tenantId": {
          "description": "The tenant ID of user/group/application object Active Directory Object that will be used for authenticating the token of a container registry.",
          "type": "string"
        }
      }
    },
    "Actor": {
      "description": "The agent that initiated the event. For most situations, this could be from the authorization context of the request.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The subject or username associated with the request context that generated the event.",
          "type": "string"
        }
      }
    },
    "CallbackConfig": {
      "description": "The configuration of service URI and custom headers for the webhook.",
      "required": [
        "serviceUri"
      ],
      "type": "object",
      "properties": {
        "serviceUri": {
          "description": "The service URI for the webhook to post notifications.",
          "type": "string"
        },
        "customHeaders": {
          "description": "Custom headers that will be added to the webhook notifications.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ConnectedRegistry": {
      "description": "An object that represents a connected registry for a container registry.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ProxyResource"
        }
      ],
      "properties": {
        "properties": {
          "allOf": [
            {
              "$ref": "#/definitions/ConnectedRegistryProperties"
            }
          ],
          "x-ms-client-flatten": true
        }
      }
    },
    "ConnectedRegistryListResult": {
      "description": "The result of a request to list connected registries for a container registry.",
      "type": "object",
      "properties": {
        "value": {
          "description": "The list of connected registries. Since this list may be incomplete, the nextLink field should be used to request the next list of connected registries.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConnectedRegistry"
          }
        },
        "nextLink": {
          "description": "The URI that can be used to request the next list of connected registries.",
          "type": "string"
        }
      }
    },
    "ConnectedRegistryProperties": {
      "description": "The properties of a connected registry.",
      "required": [
        "mode",
        "parent"
      ],
      "type": "object",
      "properties": {
        "provisioningState": {
          "description": "Provisioning state of the resource.",
          "enum": [
            "Creating",
            "Updating",
            "Deleting",
            "Succeeded",
            "Failed",
            "Canceled"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "ProvisioningState",
            "modelAsString": true
          }
        },
        "mode": {
          "description": "The mode of the connected registry resource that indicates the permissions of the registry.",
          "enum": [
            "ReadWrite",
            "ReadOnly",
            "Registry",
            "Mirror"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ConnectedRegistryMode",
            "modelAsString": true
          }
        },
        "version": {
          "description": "The current version of ACR runtime on the connected registry.",
          "type": "string",
          "readOnly": true
        },
        "connectionState": {
          "description": "The current connection state of the connected registry.",
          "enum": [
            "Online",
            "Offline",
            "Syncing",
            "Unhealthy"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "ConnectionState",
            "modelAsString": true
          }
        },
        "lastActivityTime": {
          "format": "date-time",
          "description": "The last activity time of the connected registry.",
          "type": "string",
          "readOnly": true
        },
        "activation": {
          "allOf": [
            {
              "$ref": "#/definitions/ActivationProperties"
            }
          ],
          "readOnly": true
        },
        "parent": {
          "$ref": "#/definitions/ParentProperties"
        },
        "clientTokenIds": {
          "description": "The list of the ACR token resource IDs used to authenticate clients to the connected registry.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "loginServer": {
          "$ref": "#/definitions/LoginServerProperties"
        },
        "logging": {
          "$ref": "#/definitions/LoggingProperties"
        },
        "statusDetails": {
          "description": "The list of current statuses of the connected registry.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/StatusDetailProperties"
          },
          "readOnly": true
        },
        "notificationsList": {
          "description": "The list of notifications subscription information for the connected registry.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ConnectedRegistryUpdateParameters": {
      "description": "The parameters for updating a connected registry.",
      "type": "object",
      "properties": {
        "properties": {
          "allOf": [
            {
              "$ref": "#/definitions/ConnectedRegistryUpdateProperties"
            }
          ],
          "x-ms-client-flatten": true
        }
      }
    },
    "ConnectedRegistryUpdateProperties": {
      "description": "The parameters for updating token properties.",
      "type": "object",
      "properties": {
        "syncProperties": {
          "$ref": "#/definitions/SyncUpdateProperties"
        },
        "logging": {
          "$ref": "#/definitions/LoggingProperties"
        },
        "clientTokenIds": {
          "description": "The list of the ACR token resource IDs used to authenticate clients to the connected registry.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "notificationsList": {
          "description": "The list of notifications subscription information for the connected registry.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "EncryptionProperty": {
      "type": "object",
      "properties": {
        "status": {
          "description": "Indicates whether or not the encryption is enabled for container registry.",
          "enum": [
            "enabled",
            "disabled"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "EncryptionStatus",
            "modelAsString": true
          }
        },
        "keyVaultProperties": {
          "$ref": "#/definitions/KeyVaultProperties"
        }
      }
    },
    "ErrorResponse": {
      "description": "An error response from the Azure Container Registry service.",
      "properties": {
        "error": {
          "$ref": "#/definitions/ErrorResponseBody"
        }
      }
    },
    "ErrorResponseBody": {
      "description": "An error response from the Azure Container Registry service.",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "description": "error code.",
          "type": "string"
        },
        "message": {
          "description": "error message.",
          "type": "string"
        },
        "target": {
          "description": "target of the particular error.",
          "type": "string"
        },
        "details": {
          "$ref": "#/definitions/InnerErrorDescription"
        }
      }
    },
    "Event": {
      "description": "The event for a webhook.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/EventInfo"
        }
      ],
      "properties": {
        "eventRequestMessage": {
          "$ref": "#/definitions/EventRequestMessage"
        },
        "eventResponseMessage": {
          "$ref": "#/definitions/EventResponseMessage"
        }
      }
    },
    "EventContent": {
      "description": "The content of the event request message.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The event ID.",
          "type": "string"
        },
        "timestamp": {
          "format": "date-time",
          "description": "The time at which the event occurred.",
          "type": "string"
        },
        "action": {
          "description": "The action that encompasses the provided event.",
          "type": "string"
        },
        "target": {
          "$ref": "#/definitions/Target"
        },
        "request": {
          "$ref": "#/definitions/Request"
        },
        "actor": {
          "$ref": "#/definitions/Actor"
        },
        "source": {
          "$ref": "#/definitions/Source"
        }
      }
    },
    "EventInfo": {
      "description": "The basic information of an event.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The event ID.",
          "type": "string"
        }
      }
    },
    "EventListResult": {
      "description": "The result of a request to list events for a webhook.",
      "type": "object",
      "properties": {
        "value": {
          "description": "The list of events. Since this list may be incomplete, the nextLink field should be used to request the next list of events.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Event"
          }
        },
        "nextLink": {
          "description": "The URI that can be used to request the next list of events.",
          "type": "string"
        }
      }
    },
    "EventRequestMessage": {
      "description": "The event request message sent to the service URI.",
      "type": "object",
      "properties": {
        "content": {
          "$ref": "#/definitions/EventContent"
        },
        "headers": {
          "description": "The headers of the event request message.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "method": {
          "description": "The HTTP method used to send the event request message.",
          "type": "string"
        },
        "requestUri": {
          "description": "The URI used to send the event request message.",
          "type": "string"
        },
        "version": {
          "description": "The HTTP message version.",
          "type": "string"
        }
      }
    },
    "EventResponseMessage": {
      "description": "The event response message received from the service URI.",
      "type": "object",
      "properties": {
        "content": {
          "description": "The content of the event response message.",
          "type": "string"
        },
        "headers": {
          "description": "The headers of the event response message.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "reasonPhrase": {
          "description": "The reason phrase of the event response message.",
          "type": "string"
        },
        "statusCode": {
          "description": "The status code of the event response message.",
          "type": "string"
        },
        "version": {
          "description": "The HTTP message version.",
          "type": "string"
        }
      }
    },
    "ExportPipeline": {
      "description": "An object that represents an export pipeline for a container registry.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ProxyResource"
        }
      ],
      "properties": {
        "location": {
          "description": "The location of the export pipeline.",
          "type": "string"
        },
        "identity": {
          "$ref": "#/definitions/IdentityProperties"
        },
        "properties": {
          "allOf": [
            {
              "$ref": "#/definitions/ExportPipelineProperties"
            }
          ],
          "x-ms-client-flatten": true
        }
      }
    },
    "ExportPipelineListResult": {
      "description": "The result of a request to list export pipelines for a container registry.",
      "type": "object",
      "properties": {
        "value": {
          "description": "The list of export pipelines. Since this list may be incomplete, the nextLink field should be used to request the next list of export pipelines.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExportPipeline"
          }
        },
        "nextLink": {
          "description": "The URI that can be used to request the next list of pipeline runs.",
          "type": "string"
        }
      }
    },
    "ExportPipelineProperties": {
      "description": "The properties of an export pipeline.",
      "required": [
        "target"
      ],
      "type": "object",
      "properties": {
        "target": {
          "$ref": "#/definitions/ExportPipelineTargetProperties"
        },
        "options": {
          "description": "The list of all options configured for the pipeline.",
          "type": "array",
          "items": {
            "enum": [
              "OverwriteTags",
              "OverwriteBlobs",
              "DeleteSourceBlobOnSuccess",
              "ContinueOnErrors"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "PipelineOptions",
              "modelAsString": true
            }
          }
        },
        "provisioningState": {
          "description": "The provisioning state of the pipeline at the time the operation was called.",
          "enum": [
            "Creating",
            "Updating",
            "Deleting",
            "Succeeded",
            "Failed",
            "Canceled"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "ProvisioningState",
            "modelAsString": true
          }
        }
      }
    },
    "ExportPipelineTargetProperties": {
      "description": "The properties of the export pipeline target.",
      "required": [
        "keyVaultUri"
      ],
      "type": "object",
      "properties": {
        "type": {
          "description": "The type of target for the export pipeline.",
          "type": "string"
        },
        "uri": {
          "description": "The target uri of the export pipeline.\r\nWhen 'AzureStorageBlob': \"https://accountName.blob.core.windows.net/containerName/blobName\"\r\nWhen 'AzureStorageBlobContainer':  \"https://accountName.blob.core.windows.net/containerName\"",
          "type": "string"
        },
        "keyVaultUri": {
          "description": "They key vault secret uri to obtain the target storage SAS token.",
          "type": "string"
        }
      }
    },
    "ExportPolicy": {
      "description": "The export policy for a container registry.",
      "type": "object",
      "properties": {
        "status": {
          "description": "The value that indicates whether the policy is enabled or not.",
          "default": "enabled",
          "enum": [
            "enabled",
            "disabled"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ExportPolicyStatus",
            "modelAsString": true
          }
        }
      }
    },
    "GenerateCredentialsParameters": {
      "description": "The parameters used to generate credentials for a specified token or user of a container registry.",
      "type": "object",
      "properties": {
        "tokenId": {
          "description": "The resource ID of the token for which credentials have to be generated.",
          "type": "string"
        },
        "expiry": {
          "format": "date-time",
          "description": "The expiry date of the generated credentials after which the credentials become invalid.",
          "type": "string"
        },
        "name": {
          "description": "Specifies name of the password which should be regenerated if any -- password1 or password2.",
          "enum": [
            "password1",
            "password2"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "TokenPasswordName",
            "modelAsString": true
          }
        }
      }
    },
    "GenerateCredentialsResult": {
      "description": "The response from the GenerateCredentials operation.",
      "type": "object",
      "properties": {
        "username": {
          "description": "The username for a container registry.",
          "type": "string"
        },
        "passwords": {
          "description": "The list of passwords for a container registry.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TokenPassword"
          }
        }
      }
    },
    "IdentityProperties": {
      "description": "Managed identity for the resource.",
      "type": "object",
      "properties": {
        "principalId": {
          "description": "The principal ID of resource identity.",
          "type": "string"
        },
        "tenantId": {
          "description": "The tenant ID of resource.",
          "type": "string"
        },
        "type": {
          "description": "The identity type.",
          "enum": [
            "SystemAssigned",
            "UserAssigned",
            "SystemAssigned, UserAssigned",
            "None"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ResourceIdentityType",
            "modelAsString": false
          }
        },
        "userAssignedIdentities": {
          "description": "The list of user identities associated with the resource. The user identity \r\ndictionary key references will be ARM resource ids in the form: \r\n'/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/\r\n    providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/UserIdentityProperties"
          }
        }
      }
    },
    "ImportImageMode": {
      "enum": [
        "NoForce",
        "Force"
      ],
      "type": "string"
    },
    "ImportImageParameters": {
      "required": [
        "source"
      ],
      "type": "object",
      "properties": {
        "source": {
          "$ref": "#/definitions/ImportSource"
        },
        "targetTags": {
          "description": "List of strings of the form repo[:tag]. When tag is omitted the source will be used (or 'latest' if source tag is also omitted).",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "untaggedTargetRepositories": {
          "description": "List of strings of repository names to do a manifest only copy. No tag will be created.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "mode": {
          "default": "NoForce",
          "enum": [
            "NoForce",
            "Force"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ImportMode",
            "modelAsString": true
          }
        }
      }
    },
    "ImportPipeline": {
      "description": "An object that represents an import pipeline for a container registry.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ProxyResource"
        }
      ],
      "properties": {
        "location": {
          "description": "The location of the import pipeline.",
          "type": "string"
        },
        "identity": {
          "$ref": "#/definitions/IdentityProperties"
        },
        "properties": {
          "allOf": [
            {
              "$ref": "#/definitions/ImportPipelineProperties"
            }
          ],
          "x-ms-client-flatten": true
        }
      }
    },
    "ImportPipelineListResult": {
      "description": "The result of a request to list import pipelines for a container registry.",
      "type": "object",
      "properties": {
        "value": {
          "description": "The list of import pipelines. Since this list may be incomplete, the nextLink field should be used to request the next list of import pipelines.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ImportPipeline"
          }
        },
        "nextLink": {
          "description": "The URI that can be used to request the next list of pipeline runs.",
          "type": "string"
        }
      }
    },
    "ImportPipelineProperties": {
      "description": "The properties of an import pipeline.",
      "required": [
        "source"
      ],
      "type": "object",
      "properties": {
        "source": {
          "$ref": "#/definitions/ImportPipelineSourceProperties"
        },
        "trigger": {
          "$ref": "#/definitions/PipelineTriggerProperties"
        },
        "options": {
          "description": "The list of all options configured for the pipeline.",
          "type": "array",
          "items": {
            "enum": [
              "OverwriteTags",
              "OverwriteBlobs",
              "DeleteSourceBlobOnSuccess",
              "ContinueOnErrors"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "PipelineOptions",
              "modelAsString": true
            }
          }
        },
        "provisioningState": {
          "description": "The provisioning state of the pipeline at the time the operation was called.",
          "enum": [
            "Creating",
            "Updating",
            "Deleting",
            "Succeeded",
            "Failed",
            "Canceled"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "ProvisioningState",
            "modelAsString": true
          }
        }
      }
    },
    "ImportPipelineSourceProperties": {
      "description": "The properties of the import pipeline source.",
      "required": [
        "keyVaultUri"
      ],
      "type": "object",
      "properties": {
        "type": {
          "description": "The type of source for the import pipeline.",
          "default": "AzureStorageBlobContainer",
          "enum": [
            "AzureStorageBlobContainer"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "PipelineSourceType",
            "modelAsString": true
          }
        },
        "uri": {
          "description": "The source uri of the import pipeline.\r\nWhen 'AzureStorageBlob': \"https://accountName.blob.core.windows.net/containerName/blobName\"\r\nWhen 'AzureStorageBlobContainer': \"https://accountName.blob.core.windows.net/containerName\"",
          "type": "string"
        },
        "keyVaultUri": {
          "description": "They key vault secret uri to obtain the source storage SAS token.",
          "type": "string"
        }
      }
    },
    "ImportSource": {
      "required": [
        "sourceImage"
      ],
      "type": "object",
      "properties": {
        "resourceId": {
          "description": "The resource identifier of the source Azure Container Registry.",
          "type": "string"
        },
        "registryUri": {
          "description": "The address of the source registry (e.g. 'mcr.microsoft.com').",
          "type": "string"
        },
        "credentials": {
          "$ref": "#/definitions/ImportSourceCredentials"
        },
        "sourceImage": {
          "description": "Repository name of the source image.\r\nSpecify an image by repository ('hello-world'). This will use the 'latest' tag.\r\nSpecify an image by tag ('hello-world:latest').\r\nSpecify an image by sha256-based manifest digest ('hello-world@sha256:abc123').",
          "type": "string"
        }
      }
    },
    "ImportSourceCredentials": {
      "required": [
        "password"
      ],
      "type": "object",
      "properties": {
        "username": {
          "description": "The username to authenticate with the source registry.",
          "type": "string"
        },
        "password": {
          "description": "The password used to authenticate with the source registry.",
          "type": "string"
        }
      }
    },
    "InnerErrorDescription": {
      "description": "inner error.",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "description": "error code.",
          "type": "string"
        },
        "message": {
          "description": "error message.",
          "type": "string"
        },
        "target": {
          "description": "target of the particular error.",
          "type": "string"
        }
      }
    },
    "IPRule": {
      "description": "IP rule with specific IP or IP range in CIDR format.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "action": {
          "description": "The action of IP ACL rule.",
          "default": "Allow",
          "enum": [
            "Allow"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "Action",
            "modelAsString": true
          }
        },
        "value": {
          "description": "Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.",
          "type": "string",
          "x-ms-client-name": "IPAddressOrRange"
        }
      }
    },
    "KeyVaultProperties": {
      "type": "object",
      "properties": {
        "keyIdentifier": {
          "description": "Key vault uri to access the encryption key.",
          "type": "string"
        },
        "versionedKeyIdentifier": {
          "description": "The fully qualified key identifier that includes the version of the key that is actually used for encryption.",
          "type": "string",
          "readOnly": true
        },
        "identity": {
          "description": "The client id of the identity which will be used to access key vault.",
          "type": "string"
        },
        "keyRotationEnabled": {
          "description": "Auto key rotation status for a CMK enabled registry.",
          "type": "boolean",
          "readOnly": true
        },
        "lastKeyRotationTimestamp": {
          "format": "date-time",
          "description": "Timestamp of the last successful key rotation.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "LoggingProperties": {
      "description": "The logging properties of the connected registry.",
      "type": "object",
      "properties": {
        "logLevel": {
          "description": "The verbosity of logs persisted on the connected registry.",
          "default": "Information",
          "enum": [
            "Debug",
            "Information",
            "Warning",
            "Error",
            "None"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "LogLevel",
            "modelAsString": true
          }
        },
        "auditLogStatus": {
          "description": "Indicates whether audit logs are enabled on the connected registry.",
          "default": "Disabled",
          "enum": [
            "Enabled",
            "Disabled"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "AuditLogStatus",
            "modelAsString": true
          }
        }
      }
    },
    "LoginServerProperties": {
      "description": "The login server properties of the connected registry.",
      "type": "object",
      "properties": {
        "host": {
          "description": "The host of the connected registry. Can be FQDN or IP.",
          "type": "string",
          "readOnly": true
        },
        "tls": {
          "allOf": [
            {
              "$ref": "#/definitions/TlsProperties"
            }
          ],
          "readOnly": true
        }
      }
    },
    "NetworkRuleSet": {
      "description": "The network rule set for a container registry.",
      "required": [
        "defaultAction"
      ],
      "type": "object",
      "properties": {
        "defaultAction": {
          "description": "The default action of allow or deny when no other rules match.",
          "default": "Allow",
          "enum": [
            "Allow",
            "Deny"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "DefaultAction",
            "modelAsString": true
          }
        },
        "virtualNetworkRules": {
          "description": "The virtual network rules.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VirtualNetworkRule"
          }
        },
        "ipRules": {
          "description": "The IP ACL rules.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IPRule"
          }
        }
      }
    },
    "OperationDefinition": {
      "description": "The definition of a container registry operation.",
      "type": "object",
      "properties": {
        "origin": {
          "description": "The origin information of the container registry operation.",
          "type": "string"
        },
        "name": {
          "description": "Operation name: {provider}/{resource}/{operation}.",
          "type": "string"
        },
        "display": {
          "$ref": "#/definitions/OperationDisplayDefinition"
        },
        "properties": {
          "allOf": [
            {
              "$ref": "#/definitions/OperationPropertiesDefinition"
            }
          ],
          "x-ms-client-flatten": true
        },
        "isDataAction": {
          "description": "This property indicates if the operation is an action or a data action\r\nref: https://docs.microsoft.com/en-us/azure/role-based-access-control/role-definitions#management-and-data-operations",
          "type": "boolean"
        }
      }
    },
    "OperationDisplayDefinition": {
      "description": "The display information for a container registry operation.",
      "type": "object",
      "properties": {
        "provider": {
          "description": "The resource provider name: Microsoft.ContainerRegistry.",
          "type": "string"
        },
        "resource": {
          "description": "The resource on which the operation is performed.",
          "type": "string"
        },
        "operation": {
          "description": "The operation that users can perform.",
          "type": "string"
        },
        "description": {
          "description": "The description for the operation.",
          "type": "string"
        }
      }
    },
    "OperationListResult": {
      "description": "The result of a request to list container registry operations.",
      "type": "object",
      "properties": {
        "value": {
          "description": "The list of container registry operations. Since this list may be incomplete, the nextLink field should be used to request the next list of operations.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OperationDefinition"
          }
        },
        "nextLink": {
          "description": "The URI that can be used to request the next list of container registry operations.",
          "type": "string"
        }
      }
    },
    "OperationLogSpecificationDefinition": {
      "description": "The definition of Azure Monitoring log.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Log name.",
          "type": "string"
        },
        "displayName": {
          "description": "Log display name.",
          "type": "string"
        },
        "blobDuration": {
          "description": "Log blob duration.",
          "type": "string"
        }
      }
    },
    "OperationMetricSpecificationDefinition": {
      "description": "The definition of Azure Monitoring metric.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Metric name.",
          "type": "string"
        },
        "displayName": {
          "description": "Metric display name.",
          "type": "string"
        },
        "displayDescription": {
          "description": "Metric description.",
          "type": "string"
        },
        "unit": {
          "description": "Metric unit.",
          "type": "string"
        },
        "aggregationType": {
          "description": "Metric aggregation type.",
          "type": "string"
        },
        "internalMetricName": {
          "description": "Internal metric name.",
          "type": "string"
        }
      }
    },
    "OperationPropertiesDefinition": {
      "description": "The definition of Azure Monitoring properties.",
      "type": "object",
      "properties": {
        "serviceSpecification": {
          "$ref": "#/definitions/OperationServiceSpecificationDefinition"
        }
      }
    },
    "OperationServiceSpecificationDefinition": {
      "description": "The definition of Azure Monitoring list.",
      "type": "object",
      "properties": {
        "metricSpecifications": {
          "description": "A list of Azure Monitoring metrics definition.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OperationMetricSpecificationDefinition"
          }
        },
        "logSpecifications": {
          "description": "A list of Azure Monitoring log definitions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OperationLogSpecificationDefinition"
          }
        }
      }
    },
    "PackageType": {
      "description": "The properties of a package type.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the package type.",
          "type": "string"
        },
        "endpoint": {
          "description": "The endpoint of the package type.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ParentProperties": {
      "description": "The properties of the connected registry parent.",
      "required": [
        "syncProperties"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "The resource ID of the parent to which the connected registry will be associated.",
          "type": "string"
        },
        "syncProperties": {
          "$ref": "#/definitions/SyncProperties"
        }
      }
    },
    "PipelineRun": {
      "description": "An object that represents a pipeline run for a container registry.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ProxyResource"
        }
      ],
      "properties": {
        "properties": {
          "allOf": [
            {
              "$ref": "#/definitions/PipelineRunProperties"
            }
          ],
          "x-ms-client-flatten": true
        }
      }
    },
    "PipelineRunListResult": {
      "description": "The result of a request to list pipeline runs for a container registry.",
      "type": "object",
      "properties": {
        "value": {
          "description": "The list of pipeline runs. Since this list may be incomplete, the nextLink field should be used to request the next list of pipeline runs.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PipelineRun"
          }
        },
        "nextLink": {
          "description": "The URI that can be used to request the next list of pipeline runs.",
          "type": "string"
        }
      }
    },
    "PipelineRunProperties": {
      "description": "The properties of a pipeline run.",
      "type": "object",
      "properties": {
        "provisioningState": {
          "description": "The provisioning state of a pipeline run.",
          "enum": [
            "Creating",
            "Updating",
            "Deleting",
            "Succeeded",
            "Failed",
            "Canceled"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "ProvisioningState",
            "modelAsString": true
          }
        },
        "request": {
          "$ref": "#/definitions/PipelineRunRequest"
        },
        "response": {
          "allOf": [
            {
              "$ref": "#/definitions/PipelineRunResponse"
            }
          ],
          "readOnly": true
        },
        "forceUpdateTag": {
          "description": "How the pipeline run should be forced to recreate even if the pipeline run configuration has not changed.",
          "type": "string"
        }
      }
    },
    "PipelineRunRequest": {
      "description": "The request properties provided for a pipeline run.",
      "type": "object",
      "properties": {
        "pipelineResourceId": {
          "description": "The resource ID of the pipeline to run.",
          "type": "string"
        },
        "artifacts": {
          "description": "List of source artifacts to be transferred by the pipeline. \r\nSpecify an image by repository ('hello-world'). This will use the 'latest' tag.\r\nSpecify an image by tag ('hello-world:latest').\r\nSpecify an image by sha256-based manifest digest ('hello-world@sha256:abc123').",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "source": {
          "$ref": "#/definitions/PipelineRunSourceProperties"
        },
        "target": {
          "$ref": "#/definitions/PipelineRunTargetProperties"
        },
        "catalogDigest": {
          "description": "The digest of the tar used to transfer the artifacts.",
          "type": "string"
        }
      }
    },
    "PipelineRunResponse": {
      "description": "The response properties returned for a pipeline run.",
      "type": "object",
      "properties": {
        "status": {
          "description": "The current status of the pipeline run.",
          "type": "string"
        },
        "importedArtifacts": {
          "description": "The artifacts imported in the pipeline run.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "progress": {
          "$ref": "#/definitions/ProgressProperties"
        },
        "startTime": {
          "format": "date-time",
          "description": "The time the pipeline run started.",
          "type": "string"
        },
        "finishTime": {
          "format": "date-time",
          "description": "The time the pipeline run finished.",
          "type": "string"
        },
        "source": {
          "$ref": "#/definitions/ImportPipelineSourceProperties"
        },
        "target": {
          "$ref": "#/definitions/ExportPipelineTargetProperties"
        },
        "catalogDigest": {
          "description": "The digest of the tar used to transfer the artifacts.",
          "type": "string"
        },
        "trigger": {
          "$ref": "#/definitions/PipelineTriggerDescriptor"
        },
        "pipelineRunErrorMessage": {
          "description": "The detailed error message for the pipeline run in the case of failure.",
          "type": "string"
        }
      }
    },
    "PipelineRunSourceProperties": {
      "type": "object",
      "properties": {
        "type": {
          "description": "The type of the source.",
          "default": "AzureStorageBlob",
          "enum": [
            "AzureStorageBlob"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "PipelineRunSourceType",
            "modelAsString": true
          }
        },
        "name": {
          "description": "The name of the source.",
          "type": "string"
        }
      }
    },
    "PipelineRunTargetProperties": {
      "type": "object",
      "properties": {
        "type": {
          "description": "The type of the target.",
          "default": "AzureStorageBlob",
          "enum": [
            "AzureStorageBlob"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "PipelineRunTargetType",
            "modelAsString": true
          }
        },
        "name": {
          "description": "The name of the target.",
          "type": "string"
        }
      }
    },
    "PipelineSourceTriggerDescriptor": {
      "type": "object",
      "properties": {
        "timestamp": {
          "format": "date-time",
          "description": "The timestamp when the source update happened.",
          "type": "string"
        }
      }
    },
    "PipelineSourceTriggerProperties": {
      "required": [
        "status"
      ],
      "type": "object",
      "properties": {
        "status": {
          "description": "The current status of the source trigger.",
          "default": "Enabled",
          "enum": [
            "Enabled",
            "Disabled"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "TriggerStatus",
            "modelAsString": true
          }
        }
      }
    },
    "PipelineTriggerDescriptor": {
      "type": "object",
      "properties": {
        "sourceTrigger": {
          "$ref": "#/definitions/PipelineSourceTriggerDescriptor"
        }
      }
    },
    "PipelineTriggerProperties": {
      "type": "object",
      "properties": {
        "sourceTrigger": {
          "$ref": "#/definitions/PipelineSourceTriggerProperties"
        }
      }
    },
    "Policies": {
      "description": "The policies for a container registry.",
      "type": "object",
      "properties": {
        "quarantinePolicy": {
          "$ref": "#/definitions/QuarantinePolicy"
        },
        "trustPolicy": {
          "$ref": "#/definitions/TrustPolicy"
        },
        "retentionPolicy": {
          "$ref": "#/definitions/RetentionPolicy"
        },
        "exportPolicy": {
          "$ref": "#/definitions/ExportPolicy"
        }
      }
    },
    "PrivateEndpoint": {
      "description": "The Private Endpoint resource.",
      "type": "object",
      "properties": {
        "id": {
          "description": "This is private endpoint resource created with Microsoft.Network resource provider.",
          "type": "string"
        }
      }
    },
    "PrivateEndpointConnection": {
      "description": "An object that represents a private endpoint connection for a container registry.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ProxyResource"
        }
      ],
      "properties": {
        "properties": {
          "allOf": [
            {
              "$ref": "#/definitions/PrivateEndpointConnectionProperties"
            }
          ],
          "x-ms-client-flatten": true
        }
      }
    },
    "PrivateEndpointConnectionListResult": {
      "description": "The result of a request to list private endpoint connections for a container registry.",
      "type": "object",
      "properties": {
        "value": {
          "description": "The list of private endpoint connections. Since this list may be incomplete, the nextLink field should be used to request the next list of private endpoint connections.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PrivateEndpointConnection"
          }
        },
        "nextLink": {
          "description": "The URI that can be used to request the next list of private endpoint connections.",
          "type": "string"
        }
      }
    },
    "PrivateEndpointConnectionProperties": {
      "description": "The properties of a private endpoint connection.",
      "type": "object",
      "properties": {
        "privateEndpoint": {
          "$ref": "#/definitions/PrivateEndpoint"
        },
        "privateLinkServiceConnectionState": {
          "$ref": "#/definitions/PrivateLinkServiceConnectionState"
        },
        "provisioningState": {
          "description": "The provisioning state of private endpoint connection resource.",
          "enum": [
            "Creating",
            "Updating",
            "Deleting",
            "Succeeded",
            "Failed",
            "Canceled"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "ProvisioningState",
            "modelAsString": true
          }
        }
      }
    },
    "PrivateLinkResource": {
      "description": "A resource that supports private link capabilities.",
      "type": "object",
      "properties": {
        "type": {
          "description": "The resource type is private link resource.",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "The resource ID.",
          "type": "string"
        },
        "name": {
          "description": "The name of the resource.",
          "type": "string"
        },
        "properties": {
          "allOf": [
            {
              "$ref": "#/definitions/PrivateLinkResourceProperties"
            }
          ],
          "x-ms-client-flatten": true
        }
      }
    },
    "PrivateLinkResourceListResult": {
      "description": "The result of a request to list private link resources for a container registry.",
      "type": "object",
      "properties": {
        "value": {
          "description": "The list of private link resources. Since this list may be incomplete, the nextLink field should be used to request the next list of private link resources.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PrivateLinkResource"
          }
        },
        "nextLink": {
          "description": "The URI that can be used to request the next list of private link resources.",
          "type": "string"
        }
      }
    },
    "PrivateLinkResourceProperties": {
      "description": "The properties of a private link resource.",
      "type": "object",
      "properties": {
        "groupId": {
          "description": "The private link resource group id.",
          "type": "string"
        },
        "requiredMembers": {
          "description": "The private link resource required member names.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "requiredZoneNames": {
          "description": "The private link resource Private link DNS zone name.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "PrivateLinkServiceConnectionState": {
      "description": "The state of a private link service connection.",
      "type": "object",
      "properties": {
        "status": {
          "description": "The private link service connection status.",
          "enum": [
            "Approved",
            "Pending",
            "Rejected",
            "Disconnected"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ConnectionStatus",
            "modelAsString": true
          }
        },
        "description": {
          "description": "The description for connection status. For example if connection is rejected it can indicate reason for rejection.",
          "type": "string"
        },
        "actionsRequired": {
          "description": "A message indicating if changes on the service provider require any updates on the consumer.",
          "enum": [
            "None",
            "Recreate"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ActionsRequired",
            "modelAsString": true
          }
        }
      }
    },
    "ProgressProperties": {
      "type": "object",
      "properties": {
        "percentage": {
          "description": "The percentage complete of the copy operation.",
          "type": "string"
        }
      }
    },
    "ProxyResource": {
      "description": "The resource model definition for a ARM proxy resource. It will have everything other than required location and tags.",
      "properties": {
        "id": {
          "description": "The resource ID.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "The name of the resource.",
          "type": "string",
          "readOnly": true
        },
        "type": {
          "description": "The type of the resource.",
          "type": "string",
          "readOnly": true
        },
        "systemData": {
          "description": "Metadata pertaining to creation and last modification of the resource.",
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/SystemData"
            }
          ],
          "readOnly": true
        }
      },
      "x-ms-azure-resource": true
    },
    "QuarantinePolicy": {
      "description": "The quarantine policy for a container registry.",
      "type": "object",
      "properties": {
        "status": {
          "description": "The value that indicates whether the policy is enabled or not.",
          "default": "disabled",
          "enum": [
            "enabled",
            "disabled"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "PolicyStatus",
            "modelAsString": true
          }
        }
      }
    },
    "RegenerateCredentialParameters": {
      "description": "The parameters used to regenerate the login credential.",
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "Specifies name of the password which should be regenerated -- password or password2.",
          "enum": [
            "password",
            "password2"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "PasswordName",
            "modelAsString": false
          }
        }
      }
    },
    "Registry": {
      "description": "An object that represents a container registry.",
      "required": [
        "sku"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "properties": {
        "sku": {
          "$ref": "#/definitions/Sku"
        },
        "identity": {
          "$ref": "#/definitions/IdentityProperties"
        },
        "properties": {
          "allOf": [
            {
              "$ref": "#/definitions/RegistryProperties"
            }
          ],
          "x-ms-client-flatten": true
        }
      }
    },
    "RegistryListCredentialsResult": {
      "description": "The response from the ListCredentials operation.",
      "type": "object",
      "properties": {
        "username": {
          "description": "The username for a container registry.",
          "type": "string"
        },
        "passwords": {
          "description": "The list of passwords for a container registry.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RegistryPassword"
          }
        }
      }
    },
    "RegistryListResult": {
      "description": "The result of a request to list container registries.",
      "type": "object",
      "properties": {
        "value": {
          "description": "The list of container registries. Since this list may be incomplete, the nextLink field should be used to request the next list of container registries.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Registry"
          }
        },
        "nextLink": {
          "description": "The URI that can be used to request the next list of container registries.",
          "type": "string"
        }
      }
    },
    "RegistryNameCheckRequest": {
      "description": "A request to check whether a container registry name is available.",
      "required": [
        "name",
        "type"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the container registry.",
          "maxLength": 50,
          "minLength": 5,
          "pattern": "^[a-zA-Z0-9]*$",
          "type": "string"
        },
        "type": {
          "description": "The resource type of the container registry. This field must be set to 'Microsoft.ContainerRegistry/registries'.",
          "enum": [
            "Microsoft.ContainerRegistry/registries"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ContainerRegistryResourceType",
            "modelAsString": false
          }
        }
      }
    },
    "RegistryNameStatus": {
      "description": "The result of a request to check the availability of a container registry name.",
      "type": "object",
      "properties": {
        "nameAvailable": {
          "description": "The value that indicates whether the name is available.",
          "type": "boolean"
        },
        "reason": {
          "description": "If any, the reason that the name is not available.",
          "type": "string"
        },
        "message": {
          "description": "If any, the error message that provides more detail for the reason that the name is not available.",
          "type": "string"
        }
      }
    },
    "RegistryPassword": {
      "description": "The login password for the container registry.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The password name.",
          "enum": [
            "password",
            "password2"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "PasswordName",
            "modelAsString": false
          }
        },
        "value": {
          "description": "The password value.",
          "type": "string"
        }
      }
    },
    "RegistryProperties": {
      "description": "The properties of a container registry.",
      "type": "object",
      "properties": {
        "loginServer": {
          "description": "The URL that can be used to log into the container registry.",
          "type": "string",
          "readOnly": true
        },
        "creationDate": {
          "format": "date-time",
          "description": "The creation date of the container registry in ISO8601 format.",
          "type": "string",
          "readOnly": true
        },
        "provisioningState": {
          "description": "The provisioning state of the container registry at the time the operation was called.",
          "enum": [
            "Creating",
            "Updating",
            "Deleting",
            "Succeeded",
            "Failed",
            "Canceled"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "ProvisioningState",
            "modelAsString": true
          }
        },
        "status": {
          "allOf": [
            {
              "$ref": "#/definitions/Status"
            }
          ],
          "readOnly": true
        },
        "adminUserEnabled": {
          "description": "The value that indicates whether the admin user is enabled.",
          "default": false,
          "type": "boolean"
        },
        "networkRuleSet": {
          "$ref": "#/definitions/NetworkRuleSet"
        },
        "policies": {
          "$ref": "#/definitions/Policies"
        },
        "encryption": {
          "$ref": "#/definitions/EncryptionProperty"
        },
        "dataEndpointEnabled": {
          "description": "Enable a single data endpoint per region for serving data.",
          "type": "boolean"
        },
        "dataEndpointHostNames": {
          "description": "List of host names that will serve data when dataEndpointEnabled is true.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "privateEndpointConnections": {
          "description": "List of private endpoint connections for a container registry.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PrivateEndpointConnection"
          },
          "readOnly": true
        },
        "publicNetworkAccess": {
          "description": "Whether or not public network access is allowed for the container registry.",
          "default": "Enabled",
          "enum": [
            "Enabled",
            "Disabled"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "PublicNetworkAccess",
            "modelAsString": true
          }
        },
        "networkRuleBypassOptions": {
          "description": "Whether to allow trusted Azure services to access a network restricted registry.",
          "default": "AzureServices",
          "enum": [
            "AzureServices",
            "None"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "NetworkRuleBypassOptions",
            "modelAsString": true
          }
        },
        "zoneRedundancy": {
          "description": "Whether or not zone redundancy is enabled for this container registry",
          "default": "Disabled",
          "enum": [
            "Enabled",
            "Disabled"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ZoneRedundancy",
            "modelAsString": true
          }
        },
        "anonymousPullEnabled": {
          "description": "Enables registry-wide pull from unauthenticated clients.",
          "default": false,
          "type": "boolean"
        }
      }
    },
    "RegistryPropertiesUpdateParameters": {
      "description": "The parameters for updating the properties of a container registry.",
      "type": "object",
      "properties": {
        "adminUserEnabled": {
          "description": "The value that indicates whether the admin user is enabled.",
          "type": "boolean"
        },
        "networkRuleSet": {
          "$ref": "#/definitions/NetworkRuleSet"
        },
        "policies": {
          "$ref": "#/definitions/Policies"
        },
        "encryption": {
          "$ref": "#/definitions/EncryptionProperty"
        },
        "dataEndpointEnabled": {
          "description": "Enable a single data endpoint per region for serving data.",
          "type": "boolean"
        },
        "publicNetworkAccess": {
          "description": "Whether or not public network access is allowed for the container registry.",
          "enum": [
            "Enabled",
            "Disabled"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "PublicNetworkAccess",
            "modelAsString": true
          }
        },
        "networkRuleBypassOptions": {
          "description": "Whether to allow trusted Azure services to access a network restricted registry.",
          "default": "AzureServices",
          "enum": [
            "AzureServices",
            "None"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "NetworkRuleBypassOptions",
            "modelAsString": true
          }
        },
        "anonymousPullEnabled": {
          "description": "Enables registry-wide pull from unauthenticated clients.",
          "type": "boolean"
        }
      }
    },
    "RegistryUpdateParameters": {
      "description": "The parameters for updating a container registry.",
      "type": "object",
      "properties": {
        "identity": {
          "$ref": "#/definitions/IdentityProperties"
        },
        "tags": {
          "description": "The tags for the container registry.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "sku": {
          "$ref": "#/definitions/Sku"
        },
        "properties": {
          "allOf": [
            {
              "$ref": "#/definitions/RegistryPropertiesUpdateParameters"
            }
          ],
          "x-ms-client-flatten": true
        }
      }
    },
    "RegistryUsage": {
      "description": "The quota usage for a container registry.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the usage.",
          "type": "string"
        },
        "limit": {
          "format": "int64",
          "description": "The limit of the usage.",
          "type": "integer"
        },
        "currentValue": {
          "format": "int64",
          "description": "The current value of the usage.",
          "type": "integer"
        },
        "unit": {
          "description": "The unit of measurement.",
          "enum": [
            "Count",
            "Bytes"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "RegistryUsageUnit",
            "modelAsString": true
          }
        }
      }
    },
    "RegistryUsageListResult": {
      "description": "The result of a request to get container registry quota usages.",
      "type": "object",
      "properties": {
        "value": {
          "description": "The list of container registry quota usages.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RegistryUsage"
          }
        }
      }
    },
    "Replication": {
      "description": "An object that represents a replication for a container registry.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "properties": {
        "properties": {
          "allOf": [
            {
              "$ref": "#/definitions/ReplicationProperties"
            }
          ],
          "x-ms-client-flatten": true
        }
      }
    },
    "ReplicationListResult": {
      "description": "The result of a request to list replications for a container registry.",
      "type": "object",
      "properties": {
        "value": {
          "description": "The list of replications. Since this list may be incomplete, the nextLink field should be used to request the next list of replications.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Replication"
          }
        },
        "nextLink": {
          "description": "The URI that can be used to request the next list of replications.",
          "type": "string"
        }
      }
    },
    "ReplicationProperties": {
      "description": "The properties of a replication.",
      "type": "object",
      "properties": {
        "provisioningState": {
          "description": "The provisioning state of the replication at the time the operation was called.",
          "enum": [
            "Creating",
            "Updating",
            "Deleting",
            "Succeeded",
            "Failed",
            "Canceled"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "ProvisioningState",
            "modelAsString": true
          }
        },
        "status": {
          "allOf": [
            {
              "$ref": "#/definitions/Status"
            }
          ],
          "readOnly": true
        },
        "regionEndpointEnabled": {
          "description": "Specifies whether the replication's regional endpoint is enabled. Requests will not be routed to a replication whose regional endpoint is disabled, however its data will continue to be synced with other replications.",
          "default": true,
          "type": "boolean"
        },
        "zoneRedundancy": {
          "description": "Whether or not zone redundancy is enabled for this container registry replication",
          "default": "Disabled",
          "enum": [
            "Enabled",
            "Disabled"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ZoneRedundancy",
            "modelAsString": true
          }
        }
      }
    },
    "ReplicationUpdateParameters": {
      "description": "The parameters for updating a replication.",
      "type": "object",
      "properties": {
        "tags": {
          "description": "The tags for the replication.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "allOf": [
            {
              "$ref": "#/definitions/ReplicationUpdateParametersProperties"
            }
          ],
          "x-ms-client-flatten": true
        }
      }
    },
    "ReplicationUpdateParametersProperties": {
      "type": "object",
      "properties": {
        "regionEndpointEnabled": {
          "description": "Specifies whether the replication's regional endpoint is enabled. Requests will not be routed to a replication whose regional endpoint is disabled, however its data will continue to be synced with other replications.",
          "type": "boolean"
        }
      }
    },
    "Request": {
      "description": "The request that generated the event.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The ID of the request that initiated the event.",
          "type": "string"
        },
        "addr": {
          "description": "The IP or hostname and possibly port of the client connection that initiated the event. This is the RemoteAddr from the standard http request.",
          "type": "string"
        },
        "host": {
          "description": "The externally accessible hostname of the registry instance, as specified by the http host header on incoming requests.",
          "type": "string"
        },
        "method": {
          "description": "The request method that generated the event.",
          "type": "string"
        },
        "useragent": {
          "description": "The user agent header of the request.",
          "type": "string"
        }
      }
    },
    "Resource": {
      "description": "An Azure resource.",
      "required": [
        "location"
      ],
      "properties": {
        "id": {
          "description": "The resource ID.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "The name of the resource.",
          "type": "string",
          "readOnly": true
        },
        "type": {
          "description": "The type of the resource.",
          "type": "string",
          "readOnly": true
        },
        "location": {
          "description": "The location of the resource. This cannot be changed after the resource is created.",
          "type": "string",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "tags": {
          "description": "The tags of the resource.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "systemData": {
          "description": "Metadata pertaining to creation and last modification of the resource.",
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/SystemData"
            }
          ],
          "readOnly": true
        }
      },
      "x-ms-azure-resource": true
    },
    "RetentionPolicy": {
      "description": "The retention policy for a container registry.",
      "type": "object",
      "properties": {
        "days": {
          "format": "int32",
          "description": "The number of days to retain an untagged manifest after which it gets purged.",
          "default": 7,
          "type": "integer"
        },
        "lastUpdatedTime": {
          "format": "date-time",
          "description": "The timestamp when the policy was last updated.",
          "type": "string",
          "readOnly": true
        },
        "status": {
          "description": "The value that indicates whether the policy is enabled or not.",
          "default": "disabled",
          "enum": [
            "enabled",
            "disabled"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "PolicyStatus",
            "modelAsString": true
          }
        }
      }
    },
    "ScopeMap": {
      "description": "An object that represents a scope map for a container registry.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ProxyResource"
        }
      ],
      "properties": {
        "properties": {
          "allOf": [
            {
              "$ref": "#/definitions/ScopeMapProperties"
            }
          ],
          "x-ms-client-flatten": true
        }
      }
    },
    "ScopeMapListResult": {
      "description": "The result of a request to list scope maps for a container registry.",
      "type": "object",
      "properties": {
        "value": {
          "description": "The list of scope maps. Since this list may be incomplete, the nextLink field should be used to request the next list of scope maps.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScopeMap"
          }
        },
        "nextLink": {
          "description": "The URI that can be used to request the next list of scope maps.",
          "type": "string"
        }
      }
    },
    "ScopeMapProperties": {
      "description": "The properties of a scope map.",
      "required": [
        "actions"
      ],
      "type": "object",
      "properties": {
        "description": {
          "description": "The user friendly description of the scope map.",
          "type": "string"
        },
        "type": {
          "description": "The type of the scope map. E.g. BuildIn scope map.",
          "type": "string",
          "readOnly": true
        },
        "creationDate": {
          "format": "date-time",
          "description": "The creation date of scope map.",
          "type": "string",
          "readOnly": true
        },
        "provisioningState": {
          "description": "Provisioning state of the resource.",
          "enum": [
            "Creating",
            "Updating",
            "Deleting",
            "Succeeded",
            "Failed",
            "Canceled"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "ProvisioningState",
            "modelAsString": true
          }
        },
        "actions": {
          "description": "The list of scoped permissions for registry artifacts.\r\nE.g. repositories/repository-name/content/read,\r\nrepositories/repository-name/metadata/write",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ScopeMapPropertiesUpdateParameters": {
      "description": "The update parameters for scope map properties.",
      "type": "object",
      "properties": {
        "description": {
          "description": "The user friendly description of the scope map.",
          "type": "string"
        },
        "actions": {
          "description": "The list of scope permissions for registry artifacts.\r\nE.g. repositories/repository-name/pull, \r\nrepositories/repository-name/delete",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ScopeMapUpdateParameters": {
      "description": "The properties for updating the scope map.",
      "type": "object",
      "properties": {
        "properties": {
          "allOf": [
            {
              "$ref": "#/definitions/ScopeMapPropertiesUpdateParameters"
            }
          ],
          "x-ms-client-flatten": true
        }
      }
    },
    "Sku": {
      "description": "The SKU of a container registry.",
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "The SKU name of the container registry. Required for registry creation.",
          "enum": [
            "Classic",
            "Basic",
            "Standard",
            "Premium"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "SkuName",
            "modelAsString": true
          }
        },
        "tier": {
          "description": "The SKU tier based on the SKU name.",
          "enum": [
            "Classic",
            "Basic",
            "Standard",
            "Premium"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "SkuTier",
            "modelAsString": true
          }
        }
      }
    },
    "Source": {
      "description": "The registry node that generated the event. Put differently, while the actor initiates the event, the source generates it.",
      "type": "object",
      "properties": {
        "addr": {
          "description": "The IP or hostname and the port of the registry node that generated the event. Generally, this will be resolved by os.Hostname() along with the running port.",
          "type": "string"
        },
        "instanceID": {
          "description": "The running instance of an application. Changes after each restart.",
          "type": "string"
        }
      }
    },
    "Status": {
      "description": "The status of an Azure resource at the time the operation was called.",
      "type": "object",
      "properties": {
        "displayStatus": {
          "description": "The short label for the status.",
          "type": "string",
          "readOnly": true
        },
        "message": {
          "description": "The detailed message for the status, including alerts and error messages.",
          "type": "string",
          "readOnly": true
        },
        "timestamp": {
          "format": "date-time",
          "description": "The timestamp when the status was changed to the current value.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "StatusDetailProperties": {
      "description": "The status detail properties of the connected registry.",
      "type": "object",
      "properties": {
        "type": {
          "description": "The component of the connected registry corresponding to the status.",
          "type": "string",
          "readOnly": true
        },
        "code": {
          "description": "The code of the status.",
          "type": "string",
          "readOnly": true
        },
        "description": {
          "description": "The description of the status.",
          "type": "string",
          "readOnly": true
        },
        "timestamp": {
          "format": "date-time",
          "description": "The timestamp of the status.",
          "type": "string",
          "readOnly": true
        },
        "correlationId": {
          "description": "The correlation ID of the status.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "StorageAccountProperties": {
      "description": "The properties of a storage account for a container registry. Only applicable to Classic SKU.",
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "The resource ID of the storage account.",
          "type": "string"
        }
      }
    },
    "SyncProperties": {
      "description": "The sync properties of the connected registry with its parent.",
      "required": [
        "messageTtl",
        "tokenId"
      ],
      "type": "object",
      "properties": {
        "tokenId": {
          "description": "The resource ID of the ACR token used to authenticate the connected registry to its parent during sync.",
          "type": "string"
        },
        "schedule": {
          "description": "The cron expression indicating the schedule that the connected registry will sync with its parent.",
          "type": "string"
        },
        "syncWindow": {
          "format": "duration",
          "description": "The time window during which sync is enabled for each schedule occurrence. Specify the duration using the format P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601.",
          "type": "string"
        },
        "messageTtl": {
          "format": "duration",
          "description": "The period of time for which a message is available to sync before it is expired. Specify the duration using the format P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601.",
          "type": "string"
        },
        "lastSyncTime": {
          "format": "date-time",
          "description": "The last time a sync occurred between the connected registry and its parent.",
          "type": "string",
          "readOnly": true
        },
        "gatewayEndpoint": {
          "description": "The gateway endpoint used by the connected registry to communicate with its parent.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "SyncUpdateProperties": {
      "description": "The parameters for updating the sync properties of the connected registry with its parent.",
      "type": "object",
      "properties": {
        "schedule": {
          "description": "The cron expression indicating the schedule that the connected registry will sync with its parent.",
          "type": "string"
        },
        "syncWindow": {
          "format": "duration",
          "description": "The time window during which sync is enabled for each schedule occurrence. Specify the duration using the format P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601.",
          "type": "string"
        },
        "messageTtl": {
          "format": "duration",
          "description": "The period of time for which a message is available to sync before it is expired. Specify the duration using the format P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601.",
          "type": "string"
        }
      }
    },
    "SystemData": {
      "description": "Metadata pertaining to creation and last modification of the resource.",
      "type": "object",
      "properties": {
        "createdBy": {
          "description": "The identity that created the resource.",
          "type": "string"
        },
        "createdByType": {
          "description": "The type of identity that created the resource.",
          "enum": [
            "User",
            "Application",
            "ManagedIdentity",
            "Key"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "createdByType",
            "modelAsString": true
          }
        },
        "createdAt": {
          "format": "date-time",
          "description": "The timestamp of resource creation (UTC).",
          "type": "string"
        },
        "lastModifiedBy": {
          "description": "The identity that last modified the resource.",
          "type": "string"
        },
        "lastModifiedByType": {
          "description": "The type of identity that last modified the resource.",
          "enum": [
            "User",
            "Application",
            "ManagedIdentity",
            "Key"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "lastModifiedByType",
            "modelAsString": true
          }
        },
        "lastModifiedAt": {
          "format": "date-time",
          "description": "The timestamp of resource modification (UTC).",
          "type": "string"
        }
      },
      "readOnly": true
    },
    "Target": {
      "description": "The target of the event.",
      "type": "object",
      "properties": {
        "mediaType": {
          "description": "The MIME type of the referenced object.",
          "type": "string"
        },
        "size": {
          "format": "int64",
          "description": "The number of bytes of the content. Same as Length field.",
          "type": "integer"
        },
        "digest": {
          "description": "The digest of the content, as defined by the Registry V2 HTTP API Specification.",
          "type": "string"
        },
        "length": {
          "format": "int64",
          "description": "The number of bytes of the content. Same as Size field.",
          "type": "integer"
        },
        "repository": {
          "description": "The repository name.",
          "type": "string"
        },
        "url": {
          "description": "The direct URL to the content.",
          "type": "string"
        },
        "tag": {
          "description": "The tag name.",
          "type": "string"
        },
        "name": {
          "description": "The name of the artifact.",
          "type": "string"
        },
        "version": {
          "description": "The version of the artifact.",
          "type": "string"
        }
      }
    },
    "TlsCertificateProperties": {
      "description": "The TLS certificate properties of the connected registry login server.",
      "type": "object",
      "properties": {
        "type": {
          "description": "The type of certificate location.",
          "enum": [
            "LocalDirectory"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "CertificateType",
            "modelAsString": true
          }
        },
        "location": {
          "description": "Indicates the location of the certificates.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "TlsProperties": {
      "description": "The TLS properties of the connected registry login server.",
      "type": "object",
      "properties": {
        "status": {
          "description": "Indicates whether HTTPS is enabled for the login server.",
          "enum": [
            "Enabled",
            "Disabled"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "TlsStatus",
            "modelAsString": true
          }
        },
        "certificate": {
          "allOf": [
            {
              "$ref": "#/definitions/TlsCertificateProperties"
            }
          ],
          "readOnly": true
        }
      }
    },
    "Token": {
      "description": "An object that represents a token for a container registry.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ProxyResource"
        }
      ],
      "properties": {
        "properties": {
          "allOf": [
            {
              "$ref": "#/definitions/TokenProperties"
            }
          ],
          "x-ms-client-flatten": true
        }
      }
    },
    "TokenCertificate": {
      "description": "The properties of a certificate used for authenticating a token.",
      "type": "object",
      "properties": {
        "name": {
          "enum": [
            "certificate1",
            "certificate2"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "TokenCertificateName",
            "modelAsString": true
          }
        },
        "expiry": {
          "format": "date-time",
          "description": "The expiry datetime of the certificate.",
          "type": "string"
        },
        "thumbprint": {
          "description": "The thumbprint of the certificate.",
          "type": "string"
        },
        "encodedPemCertificate": {
          "description": "Base 64 encoded string of the public certificate1 in PEM format that will be used for authenticating the token.",
          "type": "string"
        }
      }
    },
    "TokenCredentialsProperties": {
      "description": "The properties of the credentials that can be used for authenticating the token.",
      "type": "object",
      "properties": {
        "certificates": {
          "description": "The list of certificates configured with the token.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TokenCertificate"
          }
        },
        "passwords": {
          "description": "The list of passwords generated for the token.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TokenPassword"
          }
        }
      }
    },
    "TokenListResult": {
      "description": "The result of a request to list tokens for a container registry.",
      "type": "object",
      "properties": {
        "value": {
          "description": "The list of tokens. Since this list may be incomplete, the nextLink field should be used to request the next list of tokens.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Token"
          }
        },
        "nextLink": {
          "description": "The URI that can be used to request the next list of tokens.",
          "type": "string"
        }
      }
    },
    "TokenPassword": {
      "description": "The password that will be used for authenticating the token of a container registry.",
      "type": "object",
      "properties": {
        "creationTime": {
          "format": "date-time",
          "description": "The creation datetime of the password.",
          "type": "string"
        },
        "expiry": {
          "format": "date-time",
          "description": "The expiry datetime of the password.",
          "type": "string"
        },
        "name": {
          "description": "The password name \"password1\" or \"password2\"",
          "enum": [
            "password1",
            "password2"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "TokenPasswordName",
            "modelAsString": true
          }
        },
        "value": {
          "description": "The password value.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "TokenProperties": {
      "description": "The properties of a token.",
      "type": "object",
      "properties": {
        "creationDate": {
          "format": "date-time",
          "description": "The creation date of scope map.",
          "type": "string",
          "readOnly": true
        },
        "provisioningState": {
          "description": "Provisioning state of the resource.",
          "enum": [
            "Creating",
            "Updating",
            "Deleting",
            "Succeeded",
            "Failed",
            "Canceled"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "ProvisioningState",
            "modelAsString": true
          }
        },
        "scopeMapId": {
          "description": "The resource ID of the scope map to which the token will be associated with.",
          "type": "string"
        },
        "credentials": {
          "$ref": "#/definitions/TokenCredentialsProperties"
        },
        "status": {
          "description": "The status of the token example enabled or disabled.",
          "enum": [
            "enabled",
            "disabled"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "TokenStatus",
            "modelAsString": true
          }
        }
      }
    },
    "TokenUpdateParameters": {
      "description": "The parameters for updating a token.",
      "type": "object",
      "properties": {
        "properties": {
          "allOf": [
            {
              "$ref": "#/definitions/TokenUpdateProperties"
            }
          ],
          "x-ms-client-flatten": true
        }
      }
    },
    "TokenUpdateProperties": {
      "description": "The parameters for updating token properties.",
      "type": "object",
      "properties": {
        "scopeMapId": {
          "description": "The resource ID of the scope map to which the token will be associated with.",
          "type": "string"
        },
        "status": {
          "description": "The status of the token example enabled or disabled.",
          "enum": [
            "enabled",
            "disabled"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "TokenStatus",
            "modelAsString": true
          }
        },
        "credentials": {
          "$ref": "#/definitions/TokenCredentialsProperties"
        }
      }
    },
    "TrustPolicy": {
      "description": "The content trust policy for a container registry.",
      "type": "object",
      "properties": {
        "type": {
          "description": "The type of trust policy.",
          "default": "Notary",
          "enum": [
            "Notary"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "TrustPolicyType",
            "modelAsString": true
          }
        },
        "status": {
          "description": "The value that indicates whether the policy is enabled or not.",
          "default": "disabled",
          "enum": [
            "enabled",
            "disabled"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "PolicyStatus",
            "modelAsString": true
          }
        }
      }
    },
    "UserIdentityProperties": {
      "type": "object",
      "properties": {
        "principalId": {
          "description": "The principal id of user assigned identity.",
          "type": "string"
        },
        "clientId": {
          "description": "The client id of user assigned identity.",
          "type": "string"
        }
      }
    },
    "VirtualNetworkRule": {
      "description": "Virtual network rule.",
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "action": {
          "description": "The action of virtual network rule.",
          "default": "Allow",
          "enum": [
            "Allow"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "Action",
            "modelAsString": true
          }
        },
        "id": {
          "description": "Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.",
          "type": "string",
          "x-ms-client-name": "VirtualNetworkResourceId"
        }
      }
    },
    "Webhook": {
      "description": "An object that represents a webhook for a container registry.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "properties": {
        "properties": {
          "allOf": [
            {
              "$ref": "#/definitions/WebhookProperties"
            }
          ],
          "x-ms-client-flatten": true
        }
      }
    },
    "WebhookCreateParameters": {
      "description": "The parameters for creating a webhook.",
      "required": [
        "location"
      ],
      "type": "object",
      "properties": {
        "tags": {
          "description": "The tags for the webhook.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "location": {
          "description": "The location of the webhook. This cannot be changed after the resource is created.",
          "type": "string"
        },
        "properties": {
          "allOf": [
            {
              "$ref": "#/definitions/WebhookPropertiesCreateParameters"
            }
          ],
          "x-ms-client-flatten": true
        }
      }
    },
    "WebhookListResult": {
      "description": "The result of a request to list webhooks for a container registry.",
      "type": "object",
      "properties": {
        "value": {
          "description": "The list of webhooks. Since this list may be incomplete, the nextLink field should be used to request the next list of webhooks.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Webhook"
          }
        },
        "nextLink": {
          "description": "The URI that can be used to request the next list of webhooks.",
          "type": "string"
        }
      }
    },
    "WebhookProperties": {
      "description": "The properties of a webhook.",
      "required": [
        "actions"
      ],
      "type": "object",
      "properties": {
        "status": {
          "description": "The status of the webhook at the time the operation was called.",
          "enum": [
            "enabled",
            "disabled"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "WebhookStatus",
            "modelAsString": true
          }
        },
        "scope": {
          "description": "The scope of repositories where the event can be triggered. For example, 'foo:*' means events for all tags under repository 'foo'. 'foo:bar' means events for 'foo:bar' only. 'foo' is equivalent to 'foo:latest'. Empty means all events.",
          "type": "string"
        },
        "actions": {
          "description": "The list of actions that trigger the webhook to post notifications.",
          "type": "array",
          "items": {
            "enum": [
              "push",
              "delete",
              "quarantine",
              "chart_push",
              "chart_delete"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "WebhookAction",
              "modelAsString": true
            }
          }
        },
        "provisioningState": {
          "description": "The provisioning state of the webhook at the time the operation was called.",
          "enum": [
            "Creating",
            "Updating",
            "Deleting",
            "Succeeded",
            "Failed",
            "Canceled"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "ProvisioningState",
            "modelAsString": true
          }
        }
      }
    },
    "WebhookPropertiesCreateParameters": {
      "description": "The parameters for creating the properties of a webhook.",
      "required": [
        "actions",
        "serviceUri"
      ],
      "type": "object",
      "properties": {
        "serviceUri": {
          "description": "The service URI for the webhook to post notifications.",
          "type": "string",
          "x-ms-secret": true
        },
        "customHeaders": {
          "description": "Custom headers that will be added to the webhook notifications.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-ms-secret": true
        },
        "status": {
          "description": "The status of the webhook at the time the operation was called.",
          "enum": [
            "enabled",
            "disabled"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "WebhookStatus",
            "modelAsString": true
          }
        },
        "scope": {
          "description": "The scope of repositories where the event can be triggered. For example, 'foo:*' means events for all tags under repository 'foo'. 'foo:bar' means events for 'foo:bar' only. 'foo' is equivalent to 'foo:latest'. Empty means all events.",
          "type": "string"
        },
        "actions": {
          "description": "The list of actions that trigger the webhook to post notifications.",
          "type": "array",
          "items": {
            "enum": [
              "push",
              "delete",
              "quarantine",
              "chart_push",
              "chart_delete"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "WebhookAction",
              "modelAsString": true
            }
          }
        }
      }
    },
    "WebhookPropertiesUpdateParameters": {
      "description": "The parameters for updating the properties of a webhook.",
      "type": "object",
      "properties": {
        "serviceUri": {
          "description": "The service URI for the webhook to post notifications.",
          "type": "string",
          "x-ms-secret": true
        },
        "customHeaders": {
          "description": "Custom headers that will be added to the webhook notifications.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-ms-secret": true
        },
        "status": {
          "description": "The status of the webhook at the time the operation was called.",
          "enum": [
            "enabled",
            "disabled"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "WebhookStatus",
            "modelAsString": true
          }
        },
        "scope": {
          "description": "The scope of repositories where the event can be triggered. For example, 'foo:*' means events for all tags under repository 'foo'. 'foo:bar' means events for 'foo:bar' only. 'foo' is equivalent to 'foo:latest'. Empty means all events.",
          "type": "string"
        },
        "actions": {
          "description": "The list of actions that trigger the webhook to post notifications.",
          "type": "array",
          "items": {
            "enum": [
              "push",
              "delete",
              "quarantine",
              "chart_push",
              "chart_delete"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "WebhookAction",
              "modelAsString": true
            }
          }
        }
      }
    },
    "WebhookUpdateParameters": {
      "description": "The parameters for updating a webhook.",
      "type": "object",
      "properties": {
        "tags": {
          "description": "The tags for the webhook.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "allOf": [
            {
              "$ref": "#/definitions/WebhookPropertiesUpdateParameters"
            }
          ],
          "x-ms-client-flatten": true
        }
      }
    }
  },
  "parameters": {
    "SubscriptionIdParameter": {
      "in": "path",
      "name": "subscriptionId",
      "description": "The Microsoft Azure subscription ID.",
      "required": true,
      "type": "string"
    },
    "ApiVersionParameter": {
      "in": "query",
      "name": "api-version",
      "description": "The client API version.",
      "required": true,
      "type": "string"
    },
    "ResourceGroupParameter": {
      "in": "path",
      "name": "resourceGroupName",
      "description": "The name of the resource group to which the container registry belongs.",
      "required": true,
      "type": "string",
      "minLength": 1,
      "x-ms-parameter-location": "method"
    },
    "RegistryNameParameter": {
      "in": "path",
      "name": "registryName",
      "description": "The name of the container registry.",
      "required": true,
      "type": "string",
      "maxLength": 50,
      "minLength": 5,
      "pattern": "^[a-zA-Z0-9]*$",
      "x-ms-parameter-location": "method"
    },
    "WebhookNameParameter": {
      "in": "path",
      "name": "webhookName",
      "description": "The name of the webhook.",
      "required": true,
      "type": "string",
      "maxLength": 50,
      "minLength": 5,
      "pattern": "^[a-zA-Z0-9]*$",
      "x-ms-parameter-location": "method"
    },
    "ReplicationNameParameter": {
      "in": "path",
      "name": "replicationName",
      "description": "The name of the replication.",
      "required": true,
      "type": "string",
      "maxLength": 50,
      "minLength": 5,
      "pattern": "^[a-zA-Z0-9]*$",
      "x-ms-parameter-location": "method"
    },
    "ScopeMapNameParameter": {
      "in": "path",
      "name": "scopeMapName",
      "description": "The name of the scope map.",
      "required": true,
      "type": "string",
      "maxLength": 50,
      "minLength": 5,
      "pattern": "^[a-zA-Z0-9-_]*$",
      "x-ms-parameter-location": "method"
    },
    "TokenNameParameter": {
      "in": "path",
      "name": "tokenName",
      "description": "The name of the token.",
      "required": true,
      "type": "string",
      "maxLength": 50,
      "minLength": 5,
      "pattern": "^[a-zA-Z0-9-]*$",
      "x-ms-parameter-location": "method"
    },
    "PrivateEndpointConnectionNameParameter": {
      "in": "path",
      "name": "privateEndpointConnectionName",
      "description": "The name of the private endpoint connection.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "ExportPipelineNameParameter": {
      "in": "path",
      "name": "exportPipelineName",
      "description": "The name of the export pipeline.",
      "required": true,
      "type": "string",
      "maxLength": 50,
      "minLength": 5,
      "pattern": "^[a-zA-Z0-9]*$",
      "x-ms-parameter-location": "method"
    },
    "ImportPipelineNameParameter": {
      "in": "path",
      "name": "importPipelineName",
      "description": "The name of the import pipeline.",
      "required": true,
      "type": "string",
      "maxLength": 50,
      "minLength": 5,
      "pattern": "^[a-zA-Z0-9]*$",
      "x-ms-parameter-location": "method"
    },
    "PipelineRunNameParameter": {
      "in": "path",
      "name": "pipelineRunName",
      "description": "The name of the pipeline run.",
      "required": true,
      "type": "string",
      "maxLength": 50,
      "minLength": 5,
      "pattern": "^[a-zA-Z0-9]*$",
      "x-ms-parameter-location": "method"
    },
    "ConnectedRegistryNameParameter": {
      "in": "path",
      "name": "connectedRegistryName",
      "description": "The name of the connected registry.",
      "required": true,
      "type": "string",
      "maxLength": 50,
      "minLength": 5,
      "pattern": "^[a-zA-Z0-9]*$",
      "x-ms-parameter-location": "method"
    },
    "ConnectedRegistryFilterParameter": {
      "in": "query",
      "name": "$filter",
      "description": "An OData filter expression that describes a subset of connectedRegistries to return. The parameters that can be filtered are parent.id (the resource id of the connectedRegistry parent), mode, and connectionState. The supported operator is eq.",
      "type": "string",
      "x-ms-parameter-location": "method"
    }
  },
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "flow": "implicit",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      },
      "description": "Azure Active Directory OAuth2 Flow"
    }
  },
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ]
}