start generated example for Tables_ListByWorkspace, rule:MaximumSet
{ message: 'extractResponse', level: '\u001b[32minfo\u001b[39m' }
{
  message: {
    parameters: {
      subscriptionId: '00000000-0000-0000-0000-00000000000',
      resourceGroupName: 'rgTables',
      workspaceName: 'oiautorest6685',
      'api-version': '2020-10-01'
    },
    responses: {
      '200': {
        headers: undefined,
        body: {
          value: [
            {
              properties: {
                schema: {
                  name: 'AzureNetworkFlow',
                  displayName: 'aaaaaaaaaaaaaaaa',
                  description: 'aaaaaaaaaaaa',
                  columns: [
                    {
                      name: 'aaaaaaaa',
                      type: 'String',
                      dataTypeHint: 'URI',
                      displayName: 'aaaaaaaaaaaaaaaaaaaaaaaaaaa',
                      description: 'a',
                      isDefaultDisplay: true,
                      isHidden: true
                    }
                  ],
                  standardColumns: [
                    {
                      isHidden: true,
                      name: 'TenantId',
                      type: 'guid',
                      dataTypeHint: 'URI',
                      displayName: 'aaaaaaaaaaaaaa',
                      description: 'aaaaaaaaa',
                      isDefaultDisplay: true
                    },
                    {
                      isHidden: true,
                      name: 'SourceSystem',
                      type: 'string',
                      dataTypeHint: 'URI',
                      displayName: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                      description: 'aaaaaaaaaaaaaa',
                      isDefaultDisplay: true
                    },
                    {
                      isHidden: true,
                      name: 'TimeGenerated',
                      type: 'dateTime',
                      dataTypeHint: 'URI',
                      displayName: 'aaaaaaaaaaaaaaaaaaaaaa',
                      description: 'aaaaaaaaaaaaaaaaa',
                      isDefaultDisplay: true
                    },
                    {
                      isHidden: true,
                      name: 'AgentID',
                      type: 'string',
                      dataTypeHint: 'URI',
                      displayName: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                      description: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                      isDefaultDisplay: true
                    },
                    {
                      isHidden: true,
                      name: 'SourceIP',
                      type: 'string',
                      dataTypeHint: 'URI',
                      displayName: 'aaaaaaa',
                      description: 'aaaaaaaaaaaaaaaaaaaaaaaa',
                      isDefaultDisplay: true
                    },
                    {
                      isHidden: true,
                      name: 'Protocol',
                      type: 'string',
                      dataTypeHint: 'URI',
                      displayName: 'aaaaaaaaaaaaaaa',
                      description: 'aaaaaaa',
                      isDefaultDisplay: true
                    },
                    {
                      isHidden: true,
                      name: 'SourcePort',
                      type: 'int',
                      dataTypeHint: 'URI',
                      displayName: 'aaaaaaaaaaaaaaaaaaaaa',
                      description: 'aaaaaaaaa',
                      isDefaultDisplay: true
                    },
                    {
                      isHidden: true,
                      name: 'DestinationPort',
                      type: 'int',
                      dataTypeHint: 'URI',
                      displayName: 'aaaaaaaaaaaaaaaaaaaaaaaa',
                      description: 'aaaaaaaaaaaaaaaaaa',
                      isDefaultDisplay: true
                    },
                    {
                      isHidden: true,
                      name: 'TcpFlags',
                      type: 'int',
                      dataTypeHint: 'URI',
                      displayName: 'aaaaaaaaaaaaaaaa',
                      description: 'aaaaaaaaaaaa',
                      isDefaultDisplay: true
                    },
                    {
                      isHidden: true,
                      name: 'Packets',
                      type: 'int',
                      dataTypeHint: 'URI',
                      displayName: 'aa',
                      description: 'aaaaaaaaaaaaaaaaaaaaaaa',
                      isDefaultDisplay: true
                    },
                    {
                      isHidden: true,
                      name: 'Bytes',
                      type: 'int',
                      dataTypeHint: 'URI',
                      displayName: 'aaaaaaaaaaaaaaaaaaaaaaaaaaa',
                      description: 'a',
                      isDefaultDisplay: true
                    },
                    {
                      isHidden: true,
                      name: 'BytesOut',
                      type: 'int',
                      dataTypeHint: 'URI',
                      displayName: 'aaaaaaaaaaa',
                      description: 'aaaaaaaaa',
                      isDefaultDisplay: true
                    },
                    {
                      isHidden: true,
                      name: 'DurationInMs',
                      type: 'int',
                      dataTypeHint: 'URI',
                      displayName: 'aaaaaaaaaaaaaaa',
                      description: 'aaaaaaaaaa',
                      isDefaultDisplay: true
                    },
                    {
                      isHidden: true,
                      name: 'RstCount',
                      type: 'int',
                      dataTypeHint: 'URI',
                      displayName: 'aaaaaaaaaaaa',
                      description: 'aaaaaaaaaaaaaa',
                      isDefaultDisplay: true
                    },
                    {
                      isHidden: true,
                      name: 'MaxSampleRtt',
                      type: 'int',
                      dataTypeHint: 'URI',
                      displayName: 'aaaaaaaaaaaaaaa',
                      description: 'aaaaaaaaaaaaaaaaaaa',
                      isDefaultDisplay: true
                    }
                  ],
                  categories: [ 'aaaaaaaaaaaaaaaaaaa' ],
                  labels: [ 'aaaaaaaaaaaaaaaaaaaa' ],
                  source: 'Microsoft',
                  solutions: [ 'LogManagement' ],
                  isTroubleshootingAllowed: true
                },
                provisioningState: 'Succeeded',
                isTroubleshootingAllowed: true,
                retentionInDays: 30,
                isTroubleshootEnabled: true,
                lastTroubleshootDate: 'aaaaa'
              },
              name: 'AzureNetworkFlow',
              id: '/subscriptions/00000000-0000-0000-0000-00000000000/resourcegroups/oiautorest6685/providers/Microsoft.OperationalInsights/workspaces/oiautorest6685/tables/AzureNetworkFlow',
              type: 'aaaaaaaaaaaaaaaaaaaaaa'
            },
            {
              properties: {
                schema: {
                  name: 'SurfaceHubDns',
                  displayName: 'aaaaaaaaaaaaaaaaaaaaaaaa',
                  description: 'aaaaaaaaaa',
                  columns: [
                    {
                      name: 'aaaaaaaa',
                      type: 'String',
                      dataTypeHint: 'URI',
                      displayName: 'aaaaaaaaaaaaaaaaaaaaaaaaaaa',
                      description: 'a',
                      isDefaultDisplay: true,
                      isHidden: true
                    }
                  ],
                  standardColumns: [
                    {
                      isHidden: true,
                      name: 'TenantId',
                      type: 'guid',
                      dataTypeHint: 'URI',
                      displayName: 'aaaaaaaaaaaaaaaaa',
                      description: 'aaaaaaaaaaaa',
                      isDefaultDisplay: true
                    },
                    {
                      isHidden: true,
                      name: 'SourceSystem',
                      type: 'string',
                      dataTypeHint: 'URI',
                      displayName: 'aaaaaaaaaaaaaaaaaaaaa',
                      description: 'aa',
                      isDefaultDisplay: true
                    },
                    {
                      isHidden: true,
                      name: 'TimeGenerated',
                      type: 'dateTime',
                      dataTypeHint: 'URI',
                      displayName: 'aaaaaaaaaaaaaaaaaaaaaaaaaaa',
                      description: 'aaaaaaaaaaaaaaaaaaaaa',
                      isDefaultDisplay: true
                    },
                    {
                      isHidden: true,
                      name: 'QueryName',
                      type: 'string',
                      dataTypeHint: 'URI',
                      displayName: 'aaaaaaaaaaaaaaaaa',
                      description: 'aaaaaaaaaaaaa',
                      isDefaultDisplay: true
                    },
                    {
                      isHidden: true,
                      name: 'ComputerName',
                      type: 'string',
                      dataTypeHint: 'URI',
                      displayName: 'aaaaaaaaaaaaaaaaaaaaaaaaaaa',
                      description: 'aaaaaaaaaaaaaaaaaaaaa',
                      isDefaultDisplay: true
                    }
                  ],
                  categories: [ 'aaaaaaaaaaaaaaaaaaaaaa' ],
                  labels: [ 'aaaaaaaaaaa' ],
                  source: 'Microsoft',
                  solutions: [ 'LogManagement' ],
                  isTroubleshootingAllowed: true
                },
                provisioningState: 'Succeeded',
                isTroubleshootingAllowed: true,
                retentionInDays: 30,
                isTroubleshootEnabled: true,
                lastTroubleshootDate: 'aaaaaaaaaaa'
              },
              name: 'SurfaceHubDns',
              id: '/subscriptions/00000000-0000-0000-0000-00000000000/resourcegroups/oiautorest6685/providers/Microsoft.OperationalInsights/workspaces/oiautorest6685/tables/SurfaceHubDns',
              type: 'aaaaaaaaaaaaaaaaaaaaa'
            }
          ]
        }
      }
    }
  },
  level: '\u001b[32minfo\u001b[39m'
}
example file path: C:\one\Mgmt\azure-rest-api-specs\specification\operationalinsights\resource-manager\Microsoft.OperationalInsights\preview\2021-03-01-privatepreview\examples\Tables_ListByWorkspace_MaximumSet_Gen.json
{
  message: 'start validating generated example for Tables_ListByWorkspace',
  level: '\u001b[32minfo\u001b[39m'
}
{
  message: 'Validating "examples" and "x-ms-examples" in  .\\Tables.json:\n',
  level: '\u001b[32minfo\u001b[39m'
}
{
  message: 'Request parameters for x-ms-example "TablesListByWorkspace" in operation "Tables_ListByWorkspace" is valid.',
  level: '\u001b[32minfo\u001b[39m'
}
{
  '0': {
    code: 'RESPONSE_VALIDATION_ERROR',
    id: 'OAV108',
    message: 'Found errors in validating the response with statusCode "200" for x-ms-example "TablesListByWorkspace" in operation "Tables_ListByWorkspace".',
    innerErrors: [
      {
        code: 'INVALID_RESPONSE_BODY',
        errors: [
          {
            code: 'ANY_OF_MISSING',
            params: [],
            message: "Data does not match any schemas from 'anyOf'",
            path: [ 'value' ],
            title: '#/definitions/TablesListResult/properties/value',
            inner: [
              {
                code: 'ANY_OF_MISSING',
                params: [],
                message: "Data does not match any schemas from 'anyOf'",
                path: [ 'value', 0 ],
                title: '#/definitions/TablesListResult/properties/value/items',
                inner: [
                  {
                    code: 'ANY_OF_MISSING',
                    params: [],
                    message: "Data does not match any schemas from 'anyOf'",
                    path: [ 0, 'properties' ],
                    title: '#/definitions/Table/properties/properties',
                    inner: [
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'properties', 'schema' ],
                        title: '#/definitions/TableProperties/properties/schema',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 'schema', 'standardColumns' ],
                            title: '#/definitions/Schema/properties/standardColumns',
                            inner: [
                              {
                                code: 'ANY_OF_MISSING',
                                params: [],
                                message: "Data does not match any schemas from 'anyOf'",
                                path: [ 'standardColumns', 0 ],
                                title: '#/definitions/Schema/properties/standardColumns/items',
                                inner: [
                                  {
                                    code: 'ANY_OF_MISSING',
                                    params: [],
                                    message: "Data does not match any schemas from 'anyOf'",
                                    path: [ 0, 'type' ],
                                    title: '#/definitions/Column/properties/type',
                                    inner: [
                                      {
                                        code: 'ENUM_CASE_MISMATCH',
                                        params: [ 'guid' ],
                                        message: 'Enum does not match case for: guid',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        description: "Coulmn's data type.",
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/TableList.json'
                                      },
                                      {
                                        code: 'INVALID_TYPE',
                                        params: [ 'null', 'string' ],
                                        message: 'Expected type null but found type string',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/TableList.json'
                                      }
                                    ],
                                    position: { line: 315, column: 17 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/TableList.json'
                                  },
                                  {
                                    code: 'INVALID_TYPE',
                                    params: [ 'null', 'object' ],
                                    message: 'Expected type null but found type object',
                                    path: [ 0 ],
                                    title: '#/definitions/Schema/properties/standardColumns/items',
                                    position: { line: 393, column: 20 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/TableList.json'
                                  }
                                ],
                                position: { line: 393, column: 20 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableList.json'
                              },
                              {
                                code: 'ANY_OF_MISSING',
                                params: [],
                                message: "Data does not match any schemas from 'anyOf'",
                                path: [ 'standardColumns', 1 ],
                                title: '#/definitions/Schema/properties/standardColumns/items',
                                inner: [
                                  {
                                    code: 'ANY_OF_MISSING',
                                    params: [],
                                    message: "Data does not match any schemas from 'anyOf'",
                                    path: [ 1, 'type' ],
                                    title: '#/definitions/Column/properties/type',
                                    inner: [
                                      {
                                        code: 'ENUM_CASE_MISMATCH',
                                        params: [ 'string' ],
                                        message: 'Enum does not match case for: string',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        description: "Coulmn's data type.",
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/TableList.json'
                                      },
                                      {
                                        code: 'INVALID_TYPE',
                                        params: [ 'null', 'string' ],
                                        message: 'Expected type null but found type string',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/TableList.json'
                                      }
                                    ],
                                    position: { line: 315, column: 17 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/TableList.json'
                                  },
                                  {
                                    code: 'INVALID_TYPE',
                                    params: [ 'null', 'object' ],
                                    message: 'Expected type null but found type object',
                                    path: [ 1 ],
                                    title: '#/definitions/Schema/properties/standardColumns/items',
                                    position: { line: 393, column: 20 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/TableList.json'
                                  }
                                ],
                                position: { line: 393, column: 20 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableList.json'
                              },
                              {
                                code: 'ANY_OF_MISSING',
                                params: [],
                                message: "Data does not match any schemas from 'anyOf'",
                                path: [ 'standardColumns', 2 ],
                                title: '#/definitions/Schema/properties/standardColumns/items',
                                inner: [
                                  {
                                    code: 'ANY_OF_MISSING',
                                    params: [],
                                    message: "Data does not match any schemas from 'anyOf'",
                                    path: [ 2, 'type' ],
                                    title: '#/definitions/Column/properties/type',
                                    inner: [
                                      {
                                        code: 'ENUM_CASE_MISMATCH',
                                        params: [ 'dateTime' ],
                                        message: 'Enum does not match case for: dateTime',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        description: "Coulmn's data type.",
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/TableList.json'
                                      },
                                      {
                                        code: 'INVALID_TYPE',
                                        params: [ 'null', 'string' ],
                                        message: 'Expected type null but found type string',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/TableList.json'
                                      }
                                    ],
                                    position: { line: 315, column: 17 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/TableList.json'
                                  },
                                  {
                                    code: 'INVALID_TYPE',
                                    params: [ 'null', 'object' ],
                                    message: 'Expected type null but found type object',
                                    path: [ 2 ],
                                    title: '#/definitions/Schema/properties/standardColumns/items',
                                    position: { line: 393, column: 20 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/TableList.json'
                                  }
                                ],
                                position: { line: 393, column: 20 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableList.json'
                              },
                              {
                                code: 'ANY_OF_MISSING',
                                params: [],
                                message: "Data does not match any schemas from 'anyOf'",
                                path: [ 'standardColumns', 3 ],
                                title: '#/definitions/Schema/properties/standardColumns/items',
                                inner: [
                                  {
                                    code: 'ANY_OF_MISSING',
                                    params: [],
                                    message: "Data does not match any schemas from 'anyOf'",
                                    path: [ 3, 'type' ],
                                    title: '#/definitions/Column/properties/type',
                                    inner: [
                                      {
                                        code: 'ENUM_CASE_MISMATCH',
                                        params: [ 'string' ],
                                        message: 'Enum does not match case for: string',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        description: "Coulmn's data type.",
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/TableList.json'
                                      },
                                      {
                                        code: 'INVALID_TYPE',
                                        params: [ 'null', 'string' ],
                                        message: 'Expected type null but found type string',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/TableList.json'
                                      }
                                    ],
                                    position: { line: 315, column: 17 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/TableList.json'
                                  },
                                  {
                                    code: 'INVALID_TYPE',
                                    params: [ 'null', 'object' ],
                                    message: 'Expected type null but found type object',
                                    path: [ 3 ],
                                    title: '#/definitions/Schema/properties/standardColumns/items',
                                    position: { line: 393, column: 20 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/TableList.json'
                                  }
                                ],
                                position: { line: 393, column: 20 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableList.json'
                              },
                              {
                                code: 'ANY_OF_MISSING',
                                params: [],
                                message: "Data does not match any schemas from 'anyOf'",
                                path: [ 'standardColumns', 4 ],
                                title: '#/definitions/Schema/properties/standardColumns/items',
                                inner: [
                                  {
                                    code: 'ANY_OF_MISSING',
                                    params: [],
                                    message: "Data does not match any schemas from 'anyOf'",
                                    path: [ 4, 'type' ],
                                    title: '#/definitions/Column/properties/type',
                                    inner: [
                                      {
                                        code: 'ENUM_CASE_MISMATCH',
                                        params: [ 'string' ],
                                        message: 'Enum does not match case for: string',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        description: "Coulmn's data type.",
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/TableList.json'
                                      },
                                      {
                                        code: 'INVALID_TYPE',
                                        params: [ 'null', 'string' ],
                                        message: 'Expected type null but found type string',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/TableList.json'
                                      }
                                    ],
                                    position: { line: 315, column: 17 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/TableList.json'
                                  },
                                  {
                                    code: 'INVALID_TYPE',
                                    params: [ 'null', 'object' ],
                                    message: 'Expected type null but found type object',
                                    path: [ 4 ],
                                    title: '#/definitions/Schema/properties/standardColumns/items',
                                    position: { line: 393, column: 20 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/TableList.json'
                                  }
                                ],
                                position: { line: 393, column: 20 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableList.json'
                              },
                              {
                                code: 'ANY_OF_MISSING',
                                params: [],
                                message: "Data does not match any schemas from 'anyOf'",
                                path: [ 'standardColumns', 5 ],
                                title: '#/definitions/Schema/properties/standardColumns/items',
                                inner: [
                                  {
                                    code: 'ANY_OF_MISSING',
                                    params: [],
                                    message: "Data does not match any schemas from 'anyOf'",
                                    path: [ 5, 'type' ],
                                    title: '#/definitions/Column/properties/type',
                                    inner: [
                                      {
                                        code: 'ENUM_CASE_MISMATCH',
                                        params: [ 'string' ],
                                        message: 'Enum does not match case for: string',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        description: "Coulmn's data type.",
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/TableList.json'
                                      },
                                      {
                                        code: 'INVALID_TYPE',
                                        params: [ 'null', 'string' ],
                                        message: 'Expected type null but found type string',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/TableList.json'
                                      }
                                    ],
                                    position: { line: 315, column: 17 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/TableList.json'
                                  },
                                  {
                                    code: 'INVALID_TYPE',
                                    params: [ 'null', 'object' ],
                                    message: 'Expected type null but found type object',
                                    path: [ 5 ],
                                    title: '#/definitions/Schema/properties/standardColumns/items',
                                    position: { line: 393, column: 20 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/TableList.json'
                                  }
                                ],
                                position: { line: 393, column: 20 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableList.json'
                              },
                              {
                                code: 'ANY_OF_MISSING',
                                params: [],
                                message: "Data does not match any schemas from 'anyOf'",
                                path: [ 'standardColumns', 6 ],
                                title: '#/definitions/Schema/properties/standardColumns/items',
                                inner: [
                                  {
                                    code: 'ANY_OF_MISSING',
                                    params: [],
                                    message: "Data does not match any schemas from 'anyOf'",
                                    path: [ 6, 'type' ],
                                    title: '#/definitions/Column/properties/type',
                                    inner: [
                                      {
                                        code: 'ENUM_CASE_MISMATCH',
                                        params: [ 'int' ],
                                        message: 'Enum does not match case for: int',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        description: "Coulmn's data type.",
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/TableList.json'
                                      },
                                      {
                                        code: 'INVALID_TYPE',
                                        params: [ 'null', 'string' ],
                                        message: 'Expected type null but found type string',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/TableList.json'
                                      }
                                    ],
                                    position: { line: 315, column: 17 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/TableList.json'
                                  },
                                  {
                                    code: 'INVALID_TYPE',
                                    params: [ 'null', 'object' ],
                                    message: 'Expected type null but found type object',
                                    path: [ 6 ],
                                    title: '#/definitions/Schema/properties/standardColumns/items',
                                    position: { line: 393, column: 20 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/TableList.json'
                                  }
                                ],
                                position: { line: 393, column: 20 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableList.json'
                              },
                              {
                                code: 'ANY_OF_MISSING',
                                params: [],
                                message: "Data does not match any schemas from 'anyOf'",
                                path: [ 'standardColumns', 7 ],
                                title: '#/definitions/Schema/properties/standardColumns/items',
                                inner: [
                                  {
                                    code: 'ANY_OF_MISSING',
                                    params: [],
                                    message: "Data does not match any schemas from 'anyOf'",
                                    path: [ 7, 'type' ],
                                    title: '#/definitions/Column/properties/type',
                                    inner: [
                                      {
                                        code: 'ENUM_CASE_MISMATCH',
                                        params: [ 'int' ],
                                        message: 'Enum does not match case for: int',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        description: "Coulmn's data type.",
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/TableList.json'
                                      },
                                      {
                                        code: 'INVALID_TYPE',
                                        params: [ 'null', 'string' ],
                                        message: 'Expected type null but found type string',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/TableList.json'
                                      }
                                    ],
                                    position: { line: 315, column: 17 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/TableList.json'
                                  },
                                  {
                                    code: 'INVALID_TYPE',
                                    params: [ 'null', 'object' ],
                                    message: 'Expected type null but found type object',
                                    path: [ 7 ],
                                    title: '#/definitions/Schema/properties/standardColumns/items',
                                    position: { line: 393, column: 20 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/TableList.json'
                                  }
                                ],
                                position: { line: 393, column: 20 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableList.json'
                              },
                              {
                                code: 'ANY_OF_MISSING',
                                params: [],
                                message: "Data does not match any schemas from 'anyOf'",
                                path: [ 'standardColumns', 8 ],
                                title: '#/definitions/Schema/properties/standardColumns/items',
                                inner: [
                                  {
                                    code: 'ANY_OF_MISSING',
                                    params: [],
                                    message: "Data does not match any schemas from 'anyOf'",
                                    path: [ 8, 'type' ],
                                    title: '#/definitions/Column/properties/type',
                                    inner: [
                                      {
                                        code: 'ENUM_CASE_MISMATCH',
                                        params: [ 'int' ],
                                        message: 'Enum does not match case for: int',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        description: "Coulmn's data type.",
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/TableList.json'
                                      },
                                      {
                                        code: 'INVALID_TYPE',
                                        params: [ 'null', 'string' ],
                                        message: 'Expected type null but found type string',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/TableList.json'
                                      }
                                    ],
                                    position: { line: 315, column: 17 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/TableList.json'
                                  },
                                  {
                                    code: 'INVALID_TYPE',
                                    params: [ 'null', 'object' ],
                                    message: 'Expected type null but found type object',
                                    path: [ 8 ],
                                    title: '#/definitions/Schema/properties/standardColumns/items',
                                    position: { line: 393, column: 20 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/TableList.json'
                                  }
                                ],
                                position: { line: 393, column: 20 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableList.json'
                              },
                              {
                                code: 'ANY_OF_MISSING',
                                params: [],
                                message: "Data does not match any schemas from 'anyOf'",
                                path: [ 'standardColumns', 9 ],
                                title: '#/definitions/Schema/properties/standardColumns/items',
                                inner: [
                                  {
                                    code: 'ANY_OF_MISSING',
                                    params: [],
                                    message: "Data does not match any schemas from 'anyOf'",
                                    path: [ 9, 'type' ],
                                    title: '#/definitions/Column/properties/type',
                                    inner: [
                                      {
                                        code: 'ENUM_CASE_MISMATCH',
                                        params: [ 'int' ],
                                        message: 'Enum does not match case for: int',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        description: "Coulmn's data type.",
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/TableList.json'
                                      },
                                      {
                                        code: 'INVALID_TYPE',
                                        params: [ 'null', 'string' ],
                                        message: 'Expected type null but found type string',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/TableList.json'
                                      }
                                    ],
                                    position: { line: 315, column: 17 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/TableList.json'
                                  },
                                  {
                                    code: 'INVALID_TYPE',
                                    params: [ 'null', 'object' ],
                                    message: 'Expected type null but found type object',
                                    path: [ 9 ],
                                    title: '#/definitions/Schema/properties/standardColumns/items',
                                    position: { line: 393, column: 20 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/TableList.json'
                                  }
                                ],
                                position: { line: 393, column: 20 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableList.json'
                              },
                              {
                                code: 'ANY_OF_MISSING',
                                params: [],
                                message: "Data does not match any schemas from 'anyOf'",
                                path: [ 'standardColumns', 10 ],
                                title: '#/definitions/Schema/properties/standardColumns/items',
                                inner: [
                                  {
                                    code: 'ANY_OF_MISSING',
                                    params: [],
                                    message: "Data does not match any schemas from 'anyOf'",
                                    path: [ 10, 'type' ],
                                    title: '#/definitions/Column/properties/type',
                                    inner: [
                                      {
                                        code: 'ENUM_CASE_MISMATCH',
                                        params: [ 'int' ],
                                        message: 'Enum does not match case for: int',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        description: "Coulmn's data type.",
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/TableList.json'
                                      },
                                      {
                                        code: 'INVALID_TYPE',
                                        params: [ 'null', 'string' ],
                                        message: 'Expected type null but found type string',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/TableList.json'
                                      }
                                    ],
                                    position: { line: 315, column: 17 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/TableList.json'
                                  },
                                  {
                                    code: 'INVALID_TYPE',
                                    params: [ 'null', 'object' ],
                                    message: 'Expected type null but found type object',
                                    path: [ 10 ],
                                    title: '#/definitions/Schema/properties/standardColumns/items',
                                    position: { line: 393, column: 20 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/TableList.json'
                                  }
                                ],
                                position: { line: 393, column: 20 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableList.json'
                              },
                              {
                                code: 'ANY_OF_MISSING',
                                params: [],
                                message: "Data does not match any schemas from 'anyOf'",
                                path: [ 'standardColumns', 11 ],
                                title: '#/definitions/Schema/properties/standardColumns/items',
                                inner: [
                                  {
                                    code: 'ANY_OF_MISSING',
                                    params: [],
                                    message: "Data does not match any schemas from 'anyOf'",
                                    path: [ 11, 'type' ],
                                    title: '#/definitions/Column/properties/type',
                                    inner: [
                                      {
                                        code: 'ENUM_CASE_MISMATCH',
                                        params: [ 'int' ],
                                        message: 'Enum does not match case for: int',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        description: "Coulmn's data type.",
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/TableList.json'
                                      },
                                      {
                                        code: 'INVALID_TYPE',
                                        params: [ 'null', 'string' ],
                                        message: 'Expected type null but found type string',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/TableList.json'
                                      }
                                    ],
                                    position: { line: 315, column: 17 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/TableList.json'
                                  },
                                  {
                                    code: 'INVALID_TYPE',
                                    params: [ 'null', 'object' ],
                                    message: 'Expected type null but found type object',
                                    path: [ 11 ],
                                    title: '#/definitions/Schema/properties/standardColumns/items',
                                    position: { line: 393, column: 20 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/TableList.json'
                                  }
                                ],
                                position: { line: 393, column: 20 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableList.json'
                              },
                              {
                                code: 'ANY_OF_MISSING',
                                params: [],
                                message: "Data does not match any schemas from 'anyOf'",
                                path: [ 'standardColumns', 12 ],
                                title: '#/definitions/Schema/properties/standardColumns/items',
                                inner: [
                                  {
                                    code: 'ANY_OF_MISSING',
                                    params: [],
                                    message: "Data does not match any schemas from 'anyOf'",
                                    path: [ 12, 'type' ],
                                    title: '#/definitions/Column/properties/type',
                                    inner: [
                                      {
                                        code: 'ENUM_CASE_MISMATCH',
                                        params: [ 'int' ],
                                        message: 'Enum does not match case for: int',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        description: "Coulmn's data type.",
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/TableList.json'
                                      },
                                      {
                                        code: 'INVALID_TYPE',
                                        params: [ 'null', 'string' ],
                                        message: 'Expected type null but found type string',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/TableList.json'
                                      }
                                    ],
                                    position: { line: 315, column: 17 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/TableList.json'
                                  },
                                  {
                                    code: 'INVALID_TYPE',
                                    params: [ 'null', 'object' ],
                                    message: 'Expected type null but found type object',
                                    path: [ 12 ],
                                    title: '#/definitions/Schema/properties/standardColumns/items',
                                    position: { line: 393, column: 20 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/TableList.json'
                                  }
                                ],
                                position: { line: 393, column: 20 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableList.json'
                              },
                              {
                                code: 'ANY_OF_MISSING',
                                params: [],
                                message: "Data does not match any schemas from 'anyOf'",
                                path: [ 'standardColumns', 13 ],
                                title: '#/definitions/Schema/properties/standardColumns/items',
                                inner: [
                                  {
                                    code: 'ANY_OF_MISSING',
                                    params: [],
                                    message: "Data does not match any schemas from 'anyOf'",
                                    path: [ 13, 'type' ],
                                    title: '#/definitions/Column/properties/type',
                                    inner: [
                                      {
                                        code: 'ENUM_CASE_MISMATCH',
                                        params: [ 'int' ],
                                        message: 'Enum does not match case for: int',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        description: "Coulmn's data type.",
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/TableList.json'
                                      },
                                      {
                                        code: 'INVALID_TYPE',
                                        params: [ 'null', 'string' ],
                                        message: 'Expected type null but found type string',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/TableList.json'
                                      }
                                    ],
                                    position: { line: 315, column: 17 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/TableList.json'
                                  },
                                  {
                                    code: 'INVALID_TYPE',
                                    params: [ 'null', 'object' ],
                                    message: 'Expected type null but found type object',
                                    path: [ 13 ],
                                    title: '#/definitions/Schema/properties/standardColumns/items',
                                    position: { line: 393, column: 20 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/TableList.json'
                                  }
                                ],
                                position: { line: 393, column: 20 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableList.json'
                              },
                              {
                                code: 'ANY_OF_MISSING',
                                params: [],
                                message: "Data does not match any schemas from 'anyOf'",
                                path: [ 'standardColumns', 14 ],
                                title: '#/definitions/Schema/properties/standardColumns/items',
                                inner: [
                                  {
                                    code: 'ANY_OF_MISSING',
                                    params: [],
                                    message: "Data does not match any schemas from 'anyOf'",
                                    path: [ 14, 'type' ],
                                    title: '#/definitions/Column/properties/type',
                                    inner: [
                                      {
                                        code: 'ENUM_CASE_MISMATCH',
                                        params: [ 'int' ],
                                        message: 'Enum does not match case for: int',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        description: "Coulmn's data type.",
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/TableList.json'
                                      },
                                      {
                                        code: 'INVALID_TYPE',
                                        params: [ 'null', 'string' ],
                                        message: 'Expected type null but found type string',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/TableList.json'
                                      }
                                    ],
                                    position: { line: 315, column: 17 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/TableList.json'
                                  },
                                  {
                                    code: 'INVALID_TYPE',
                                    params: [ 'null', 'object' ],
                                    message: 'Expected type null but found type object',
                                    path: [ 14 ],
                                    title: '#/definitions/Schema/properties/standardColumns/items',
                                    position: { line: 393, column: 20 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/TableList.json'
                                  }
                                ],
                                position: { line: 393, column: 20 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableList.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'array' ],
                                message: 'Expected type null but found type array',
                                path: [ 'standardColumns' ],
                                title: '#/definitions/Schema/properties/standardColumns',
                                position: { line: 390, column: 28 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableList.json'
                              }
                            ],
                            position: { line: 390, column: 28 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableList.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 'schema' ],
                            title: '#/definitions/TableProperties/properties/schema',
                            position: { line: 466, column: 19 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableList.json'
                          }
                        ],
                        position: { line: 466, column: 19 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableList.json'
                      },
                      {
                        code: 'INVALID_TYPE',
                        params: [ 'null', 'object' ],
                        message: 'Expected type null but found type object',
                        path: [ 'properties' ],
                        title: '#/definitions/Table/properties/properties',
                        position: { line: 488, column: 23 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableList.json'
                      }
                    ],
                    position: { line: 488, column: 23 },
                    url: '.\\Tables.json',
                    directives: {},
                    jsonUrl: 'examples/TableList.json'
                  },
                  {
                    code: 'INVALID_TYPE',
                    params: [ 'null', 'object' ],
                    message: 'Expected type null but found type object',
                    path: [ 0 ],
                    title: '#/definitions/TablesListResult/properties/value/items',
                    position: { line: 505, column: 20 },
                    url: '.\\Tables.json',
                    directives: {},
                    jsonUrl: 'examples/TableList.json'
                  }
                ],
                position: { line: 505, column: 20 },
                url: '.\\Tables.json',
                directives: {},
                jsonPosition: { line: 12, column: 11 },
                jsonUrl: 'examples/TableList.json'
              },
              {
                code: 'ANY_OF_MISSING',
                params: [],
                message: "Data does not match any schemas from 'anyOf'",
                path: [ 'value', 1 ],
                title: '#/definitions/TablesListResult/properties/value/items',
                inner: [
                  {
                    code: 'ANY_OF_MISSING',
                    params: [],
                    message: "Data does not match any schemas from 'anyOf'",
                    path: [ 1, 'properties' ],
                    title: '#/definitions/Table/properties/properties',
                    inner: [
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'properties', 'schema' ],
                        title: '#/definitions/TableProperties/properties/schema',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 'schema', 'standardColumns' ],
                            title: '#/definitions/Schema/properties/standardColumns',
                            inner: [
                              {
                                code: 'ANY_OF_MISSING',
                                params: [],
                                message: "Data does not match any schemas from 'anyOf'",
                                path: [ 'standardColumns', 0 ],
                                title: '#/definitions/Schema/properties/standardColumns/items',
                                inner: [
                                  {
                                    code: 'ANY_OF_MISSING',
                                    params: [],
                                    message: "Data does not match any schemas from 'anyOf'",
                                    path: [ 0, 'type' ],
                                    title: '#/definitions/Column/properties/type',
                                    inner: [
                                      {
                                        code: 'ENUM_CASE_MISMATCH',
                                        params: [ 'guid' ],
                                        message: 'Enum does not match case for: guid',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        description: "Coulmn's data type.",
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/TableList.json'
                                      },
                                      {
                                        code: 'INVALID_TYPE',
                                        params: [ 'null', 'string' ],
                                        message: 'Expected type null but found type string',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/TableList.json'
                                      }
                                    ],
                                    position: { line: 315, column: 17 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/TableList.json'
                                  },
                                  {
                                    code: 'INVALID_TYPE',
                                    params: [ 'null', 'object' ],
                                    message: 'Expected type null but found type object',
                                    path: [ 0 ],
                                    title: '#/definitions/Schema/properties/standardColumns/items',
                                    position: { line: 393, column: 20 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/TableList.json'
                                  }
                                ],
                                position: { line: 393, column: 20 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableList.json'
                              },
                              {
                                code: 'ANY_OF_MISSING',
                                params: [],
                                message: "Data does not match any schemas from 'anyOf'",
                                path: [ 'standardColumns', 1 ],
                                title: '#/definitions/Schema/properties/standardColumns/items',
                                inner: [
                                  {
                                    code: 'ANY_OF_MISSING',
                                    params: [],
                                    message: "Data does not match any schemas from 'anyOf'",
                                    path: [ 1, 'type' ],
                                    title: '#/definitions/Column/properties/type',
                                    inner: [
                                      {
                                        code: 'ENUM_CASE_MISMATCH',
                                        params: [ 'string' ],
                                        message: 'Enum does not match case for: string',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        description: "Coulmn's data type.",
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/TableList.json'
                                      },
                                      {
                                        code: 'INVALID_TYPE',
                                        params: [ 'null', 'string' ],
                                        message: 'Expected type null but found type string',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/TableList.json'
                                      }
                                    ],
                                    position: { line: 315, column: 17 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/TableList.json'
                                  },
                                  {
                                    code: 'INVALID_TYPE',
                                    params: [ 'null', 'object' ],
                                    message: 'Expected type null but found type object',
                                    path: [ 1 ],
                                    title: '#/definitions/Schema/properties/standardColumns/items',
                                    position: { line: 393, column: 20 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/TableList.json'
                                  }
                                ],
                                position: { line: 393, column: 20 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableList.json'
                              },
                              {
                                code: 'ANY_OF_MISSING',
                                params: [],
                                message: "Data does not match any schemas from 'anyOf'",
                                path: [ 'standardColumns', 2 ],
                                title: '#/definitions/Schema/properties/standardColumns/items',
                                inner: [
                                  {
                                    code: 'ANY_OF_MISSING',
                                    params: [],
                                    message: "Data does not match any schemas from 'anyOf'",
                                    path: [ 2, 'type' ],
                                    title: '#/definitions/Column/properties/type',
                                    inner: [
                                      {
                                        code: 'ENUM_CASE_MISMATCH',
                                        params: [ 'dateTime' ],
                                        message: 'Enum does not match case for: dateTime',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        description: "Coulmn's data type.",
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/TableList.json'
                                      },
                                      {
                                        code: 'INVALID_TYPE',
                                        params: [ 'null', 'string' ],
                                        message: 'Expected type null but found type string',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/TableList.json'
                                      }
                                    ],
                                    position: { line: 315, column: 17 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/TableList.json'
                                  },
                                  {
                                    code: 'INVALID_TYPE',
                                    params: [ 'null', 'object' ],
                                    message: 'Expected type null but found type object',
                                    path: [ 2 ],
                                    title: '#/definitions/Schema/properties/standardColumns/items',
                                    position: { line: 393, column: 20 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/TableList.json'
                                  }
                                ],
                                position: { line: 393, column: 20 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableList.json'
                              },
                              {
                                code: 'ANY_OF_MISSING',
                                params: [],
                                message: "Data does not match any schemas from 'anyOf'",
                                path: [ 'standardColumns', 3 ],
                                title: '#/definitions/Schema/properties/standardColumns/items',
                                inner: [
                                  {
                                    code: 'ANY_OF_MISSING',
                                    params: [],
                                    message: "Data does not match any schemas from 'anyOf'",
                                    path: [ 3, 'type' ],
                                    title: '#/definitions/Column/properties/type',
                                    inner: [
                                      {
                                        code: 'ENUM_CASE_MISMATCH',
                                        params: [ 'string' ],
                                        message: 'Enum does not match case for: string',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        description: "Coulmn's data type.",
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/TableList.json'
                                      },
                                      {
                                        code: 'INVALID_TYPE',
                                        params: [ 'null', 'string' ],
                                        message: 'Expected type null but found type string',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/TableList.json'
                                      }
                                    ],
                                    position: { line: 315, column: 17 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/TableList.json'
                                  },
                                  {
                                    code: 'INVALID_TYPE',
                                    params: [ 'null', 'object' ],
                                    message: 'Expected type null but found type object',
                                    path: [ 3 ],
                                    title: '#/definitions/Schema/properties/standardColumns/items',
                                    position: { line: 393, column: 20 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/TableList.json'
                                  }
                                ],
                                position: { line: 393, column: 20 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableList.json'
                              },
                              {
                                code: 'ANY_OF_MISSING',
                                params: [],
                                message: "Data does not match any schemas from 'anyOf'",
                                path: [ 'standardColumns', 4 ],
                                title: '#/definitions/Schema/properties/standardColumns/items',
                                inner: [
                                  {
                                    code: 'ANY_OF_MISSING',
                                    params: [],
                                    message: "Data does not match any schemas from 'anyOf'",
                                    path: [ 4, 'type' ],
                                    title: '#/definitions/Column/properties/type',
                                    inner: [
                                      {
                                        code: 'ENUM_CASE_MISMATCH',
                                        params: [ 'string' ],
                                        message: 'Enum does not match case for: string',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        description: "Coulmn's data type.",
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/TableList.json'
                                      },
                                      {
                                        code: 'INVALID_TYPE',
                                        params: [ 'null', 'string' ],
                                        message: 'Expected type null but found type string',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/TableList.json'
                                      }
                                    ],
                                    position: { line: 315, column: 17 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/TableList.json'
                                  },
                                  {
                                    code: 'INVALID_TYPE',
                                    params: [ 'null', 'object' ],
                                    message: 'Expected type null but found type object',
                                    path: [ 4 ],
                                    title: '#/definitions/Schema/properties/standardColumns/items',
                                    position: { line: 393, column: 20 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/TableList.json'
                                  }
                                ],
                                position: { line: 393, column: 20 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableList.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'array' ],
                                message: 'Expected type null but found type array',
                                path: [ 'standardColumns' ],
                                title: '#/definitions/Schema/properties/standardColumns',
                                position: { line: 390, column: 28 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableList.json'
                              }
                            ],
                            position: { line: 390, column: 28 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableList.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 'schema' ],
                            title: '#/definitions/TableProperties/properties/schema',
                            position: { line: 466, column: 19 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableList.json'
                          }
                        ],
                        position: { line: 466, column: 19 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableList.json'
                      },
                      {
                        code: 'INVALID_TYPE',
                        params: [ 'null', 'object' ],
                        message: 'Expected type null but found type object',
                        path: [ 'properties' ],
                        title: '#/definitions/Table/properties/properties',
                        position: { line: 488, column: 23 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableList.json'
                      }
                    ],
                    position: { line: 488, column: 23 },
                    url: '.\\Tables.json',
                    directives: {},
                    jsonUrl: 'examples/TableList.json'
                  },
                  {
                    code: 'INVALID_TYPE',
                    params: [ 'null', 'object' ],
                    message: 'Expected type null but found type object',
                    path: [ 1 ],
                    title: '#/definitions/TablesListResult/properties/value/items',
                    position: { line: 505, column: 20 },
                    url: '.\\Tables.json',
                    directives: {},
                    jsonUrl: 'examples/TableList.json'
                  }
                ],
                position: { line: 505, column: 20 },
                url: '.\\Tables.json',
                directives: {},
                jsonPosition: { line: 171, column: 11 },
                jsonUrl: 'examples/TableList.json'
              },
              {
                code: 'INVALID_TYPE',
                params: [ 'null', 'array' ],
                message: 'Expected type null but found type array',
                path: [ 'value' ],
                title: '#/definitions/TablesListResult/properties/value',
                position: { line: 503, column: 18 },
                url: '.\\Tables.json',
                directives: {},
                jsonPosition: { line: 11, column: 18 },
                jsonUrl: 'examples/TableList.json'
              }
            ],
            position: { line: 503, column: 18 },
            url: '.\\Tables.json',
            directives: {},
            jsonPosition: { line: 11, column: 18 },
            jsonUrl: 'examples/TableList.json'
          }
        ],
        message: "Invalid body: Data does not match any schemas from 'anyOf'",
        path: []
      }
    ]
  },
  level: '\u001b[31merror\u001b[39m',
  message: 'Found errors in validating the response with statusCode "200" for x-ms-example "TablesListByWorkspace" in operation "Tables_ListByWorkspace".:\n'
}
{
  message: 'Request parameters for x-ms-example "Tables_ListByWorkspace_MaximumSet_Gen" in operation "Tables_ListByWorkspace" is valid.',
  level: '\u001b[32minfo\u001b[39m'
}
{
  '0': {
    code: 'RESPONSE_VALIDATION_ERROR',
    id: 'OAV108',
    message: 'Found errors in validating the response with statusCode "200" for x-ms-example "Tables_ListByWorkspace_MaximumSet_Gen" in operation "Tables_ListByWorkspace".',
    innerErrors: [
      {
        code: 'INVALID_RESPONSE_BODY',
        errors: [
          {
            code: 'ANY_OF_MISSING',
            params: [],
            message: "Data does not match any schemas from 'anyOf'",
            path: [ 'value' ],
            title: '#/definitions/TablesListResult/properties/value',
            inner: [
              {
                code: 'ANY_OF_MISSING',
                params: [],
                message: "Data does not match any schemas from 'anyOf'",
                path: [ 'value', 0 ],
                title: '#/definitions/TablesListResult/properties/value/items',
                inner: [
                  {
                    code: 'ANY_OF_MISSING',
                    params: [],
                    message: "Data does not match any schemas from 'anyOf'",
                    path: [ 0, 'properties' ],
                    title: '#/definitions/Table/properties/properties',
                    inner: [
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'properties', 'schema' ],
                        title: '#/definitions/TableProperties/properties/schema',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 'schema', 'standardColumns' ],
                            title: '#/definitions/Schema/properties/standardColumns',
                            inner: [
                              {
                                code: 'ANY_OF_MISSING',
                                params: [],
                                message: "Data does not match any schemas from 'anyOf'",
                                path: [ 'standardColumns', 0 ],
                                title: '#/definitions/Schema/properties/standardColumns/items',
                                inner: [
                                  {
                                    code: 'ANY_OF_MISSING',
                                    params: [],
                                    message: "Data does not match any schemas from 'anyOf'",
                                    path: [ 0, 'type' ],
                                    title: '#/definitions/Column/properties/type',
                                    inner: [
                                      {
                                        code: 'ENUM_CASE_MISMATCH',
                                        params: [ 'guid' ],
                                        message: 'Enum does not match case for: guid',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        description: "Coulmn's data type.",
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                      },
                                      {
                                        code: 'INVALID_TYPE',
                                        params: [ 'null', 'string' ],
                                        message: 'Expected type null but found type string',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                      }
                                    ],
                                    position: { line: 315, column: 17 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                  },
                                  {
                                    code: 'INVALID_TYPE',
                                    params: [ 'null', 'object' ],
                                    message: 'Expected type null but found type object',
                                    path: [ 0 ],
                                    title: '#/definitions/Schema/properties/standardColumns/items',
                                    position: { line: 393, column: 20 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                  }
                                ],
                                position: { line: 393, column: 20 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                              },
                              {
                                code: 'ANY_OF_MISSING',
                                params: [],
                                message: "Data does not match any schemas from 'anyOf'",
                                path: [ 'standardColumns', 1 ],
                                title: '#/definitions/Schema/properties/standardColumns/items',
                                inner: [
                                  {
                                    code: 'ANY_OF_MISSING',
                                    params: [],
                                    message: "Data does not match any schemas from 'anyOf'",
                                    path: [ 1, 'type' ],
                                    title: '#/definitions/Column/properties/type',
                                    inner: [
                                      {
                                        code: 'ENUM_CASE_MISMATCH',
                                        params: [ 'string' ],
                                        message: 'Enum does not match case for: string',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        description: "Coulmn's data type.",
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                      },
                                      {
                                        code: 'INVALID_TYPE',
                                        params: [ 'null', 'string' ],
                                        message: 'Expected type null but found type string',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                      }
                                    ],
                                    position: { line: 315, column: 17 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                  },
                                  {
                                    code: 'INVALID_TYPE',
                                    params: [ 'null', 'object' ],
                                    message: 'Expected type null but found type object',
                                    path: [ 1 ],
                                    title: '#/definitions/Schema/properties/standardColumns/items',
                                    position: { line: 393, column: 20 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                  }
                                ],
                                position: { line: 393, column: 20 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                              },
                              {
                                code: 'ANY_OF_MISSING',
                                params: [],
                                message: "Data does not match any schemas from 'anyOf'",
                                path: [ 'standardColumns', 2 ],
                                title: '#/definitions/Schema/properties/standardColumns/items',
                                inner: [
                                  {
                                    code: 'ANY_OF_MISSING',
                                    params: [],
                                    message: "Data does not match any schemas from 'anyOf'",
                                    path: [ 2, 'type' ],
                                    title: '#/definitions/Column/properties/type',
                                    inner: [
                                      {
                                        code: 'ENUM_CASE_MISMATCH',
                                        params: [ 'dateTime' ],
                                        message: 'Enum does not match case for: dateTime',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        description: "Coulmn's data type.",
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                      },
                                      {
                                        code: 'INVALID_TYPE',
                                        params: [ 'null', 'string' ],
                                        message: 'Expected type null but found type string',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                      }
                                    ],
                                    position: { line: 315, column: 17 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                  },
                                  {
                                    code: 'INVALID_TYPE',
                                    params: [ 'null', 'object' ],
                                    message: 'Expected type null but found type object',
                                    path: [ 2 ],
                                    title: '#/definitions/Schema/properties/standardColumns/items',
                                    position: { line: 393, column: 20 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                  }
                                ],
                                position: { line: 393, column: 20 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                              },
                              {
                                code: 'ANY_OF_MISSING',
                                params: [],
                                message: "Data does not match any schemas from 'anyOf'",
                                path: [ 'standardColumns', 3 ],
                                title: '#/definitions/Schema/properties/standardColumns/items',
                                inner: [
                                  {
                                    code: 'ANY_OF_MISSING',
                                    params: [],
                                    message: "Data does not match any schemas from 'anyOf'",
                                    path: [ 3, 'type' ],
                                    title: '#/definitions/Column/properties/type',
                                    inner: [
                                      {
                                        code: 'ENUM_CASE_MISMATCH',
                                        params: [ 'string' ],
                                        message: 'Enum does not match case for: string',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        description: "Coulmn's data type.",
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                      },
                                      {
                                        code: 'INVALID_TYPE',
                                        params: [ 'null', 'string' ],
                                        message: 'Expected type null but found type string',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                      }
                                    ],
                                    position: { line: 315, column: 17 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                  },
                                  {
                                    code: 'INVALID_TYPE',
                                    params: [ 'null', 'object' ],
                                    message: 'Expected type null but found type object',
                                    path: [ 3 ],
                                    title: '#/definitions/Schema/properties/standardColumns/items',
                                    position: { line: 393, column: 20 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                  }
                                ],
                                position: { line: 393, column: 20 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                              },
                              {
                                code: 'ANY_OF_MISSING',
                                params: [],
                                message: "Data does not match any schemas from 'anyOf'",
                                path: [ 'standardColumns', 4 ],
                                title: '#/definitions/Schema/properties/standardColumns/items',
                                inner: [
                                  {
                                    code: 'ANY_OF_MISSING',
                                    params: [],
                                    message: "Data does not match any schemas from 'anyOf'",
                                    path: [ 4, 'type' ],
                                    title: '#/definitions/Column/properties/type',
                                    inner: [
                                      {
                                        code: 'ENUM_CASE_MISMATCH',
                                        params: [ 'string' ],
                                        message: 'Enum does not match case for: string',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        description: "Coulmn's data type.",
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                      },
                                      {
                                        code: 'INVALID_TYPE',
                                        params: [ 'null', 'string' ],
                                        message: 'Expected type null but found type string',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                      }
                                    ],
                                    position: { line: 315, column: 17 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                  },
                                  {
                                    code: 'INVALID_TYPE',
                                    params: [ 'null', 'object' ],
                                    message: 'Expected type null but found type object',
                                    path: [ 4 ],
                                    title: '#/definitions/Schema/properties/standardColumns/items',
                                    position: { line: 393, column: 20 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                  }
                                ],
                                position: { line: 393, column: 20 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                              },
                              {
                                code: 'ANY_OF_MISSING',
                                params: [],
                                message: "Data does not match any schemas from 'anyOf'",
                                path: [ 'standardColumns', 5 ],
                                title: '#/definitions/Schema/properties/standardColumns/items',
                                inner: [
                                  {
                                    code: 'ANY_OF_MISSING',
                                    params: [],
                                    message: "Data does not match any schemas from 'anyOf'",
                                    path: [ 5, 'type' ],
                                    title: '#/definitions/Column/properties/type',
                                    inner: [
                                      {
                                        code: 'ENUM_CASE_MISMATCH',
                                        params: [ 'string' ],
                                        message: 'Enum does not match case for: string',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        description: "Coulmn's data type.",
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                      },
                                      {
                                        code: 'INVALID_TYPE',
                                        params: [ 'null', 'string' ],
                                        message: 'Expected type null but found type string',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                      }
                                    ],
                                    position: { line: 315, column: 17 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                  },
                                  {
                                    code: 'INVALID_TYPE',
                                    params: [ 'null', 'object' ],
                                    message: 'Expected type null but found type object',
                                    path: [ 5 ],
                                    title: '#/definitions/Schema/properties/standardColumns/items',
                                    position: { line: 393, column: 20 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                  }
                                ],
                                position: { line: 393, column: 20 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                              },
                              {
                                code: 'ANY_OF_MISSING',
                                params: [],
                                message: "Data does not match any schemas from 'anyOf'",
                                path: [ 'standardColumns', 6 ],
                                title: '#/definitions/Schema/properties/standardColumns/items',
                                inner: [
                                  {
                                    code: 'ANY_OF_MISSING',
                                    params: [],
                                    message: "Data does not match any schemas from 'anyOf'",
                                    path: [ 6, 'type' ],
                                    title: '#/definitions/Column/properties/type',
                                    inner: [
                                      {
                                        code: 'ENUM_CASE_MISMATCH',
                                        params: [ 'int' ],
                                        message: 'Enum does not match case for: int',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        description: "Coulmn's data type.",
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                      },
                                      {
                                        code: 'INVALID_TYPE',
                                        params: [ 'null', 'string' ],
                                        message: 'Expected type null but found type string',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                      }
                                    ],
                                    position: { line: 315, column: 17 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                  },
                                  {
                                    code: 'INVALID_TYPE',
                                    params: [ 'null', 'object' ],
                                    message: 'Expected type null but found type object',
                                    path: [ 6 ],
                                    title: '#/definitions/Schema/properties/standardColumns/items',
                                    position: { line: 393, column: 20 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                  }
                                ],
                                position: { line: 393, column: 20 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                              },
                              {
                                code: 'ANY_OF_MISSING',
                                params: [],
                                message: "Data does not match any schemas from 'anyOf'",
                                path: [ 'standardColumns', 7 ],
                                title: '#/definitions/Schema/properties/standardColumns/items',
                                inner: [
                                  {
                                    code: 'ANY_OF_MISSING',
                                    params: [],
                                    message: "Data does not match any schemas from 'anyOf'",
                                    path: [ 7, 'type' ],
                                    title: '#/definitions/Column/properties/type',
                                    inner: [
                                      {
                                        code: 'ENUM_CASE_MISMATCH',
                                        params: [ 'int' ],
                                        message: 'Enum does not match case for: int',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        description: "Coulmn's data type.",
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                      },
                                      {
                                        code: 'INVALID_TYPE',
                                        params: [ 'null', 'string' ],
                                        message: 'Expected type null but found type string',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                      }
                                    ],
                                    position: { line: 315, column: 17 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                  },
                                  {
                                    code: 'INVALID_TYPE',
                                    params: [ 'null', 'object' ],
                                    message: 'Expected type null but found type object',
                                    path: [ 7 ],
                                    title: '#/definitions/Schema/properties/standardColumns/items',
                                    position: { line: 393, column: 20 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                  }
                                ],
                                position: { line: 393, column: 20 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                              },
                              {
                                code: 'ANY_OF_MISSING',
                                params: [],
                                message: "Data does not match any schemas from 'anyOf'",
                                path: [ 'standardColumns', 8 ],
                                title: '#/definitions/Schema/properties/standardColumns/items',
                                inner: [
                                  {
                                    code: 'ANY_OF_MISSING',
                                    params: [],
                                    message: "Data does not match any schemas from 'anyOf'",
                                    path: [ 8, 'type' ],
                                    title: '#/definitions/Column/properties/type',
                                    inner: [
                                      {
                                        code: 'ENUM_CASE_MISMATCH',
                                        params: [ 'int' ],
                                        message: 'Enum does not match case for: int',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        description: "Coulmn's data type.",
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                      },
                                      {
                                        code: 'INVALID_TYPE',
                                        params: [ 'null', 'string' ],
                                        message: 'Expected type null but found type string',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                      }
                                    ],
                                    position: { line: 315, column: 17 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                  },
                                  {
                                    code: 'INVALID_TYPE',
                                    params: [ 'null', 'object' ],
                                    message: 'Expected type null but found type object',
                                    path: [ 8 ],
                                    title: '#/definitions/Schema/properties/standardColumns/items',
                                    position: { line: 393, column: 20 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                  }
                                ],
                                position: { line: 393, column: 20 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                              },
                              {
                                code: 'ANY_OF_MISSING',
                                params: [],
                                message: "Data does not match any schemas from 'anyOf'",
                                path: [ 'standardColumns', 9 ],
                                title: '#/definitions/Schema/properties/standardColumns/items',
                                inner: [
                                  {
                                    code: 'ANY_OF_MISSING',
                                    params: [],
                                    message: "Data does not match any schemas from 'anyOf'",
                                    path: [ 9, 'type' ],
                                    title: '#/definitions/Column/properties/type',
                                    inner: [
                                      {
                                        code: 'ENUM_CASE_MISMATCH',
                                        params: [ 'int' ],
                                        message: 'Enum does not match case for: int',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        description: "Coulmn's data type.",
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                      },
                                      {
                                        code: 'INVALID_TYPE',
                                        params: [ 'null', 'string' ],
                                        message: 'Expected type null but found type string',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                      }
                                    ],
                                    position: { line: 315, column: 17 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                  },
                                  {
                                    code: 'INVALID_TYPE',
                                    params: [ 'null', 'object' ],
                                    message: 'Expected type null but found type object',
                                    path: [ 9 ],
                                    title: '#/definitions/Schema/properties/standardColumns/items',
                                    position: { line: 393, column: 20 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                  }
                                ],
                                position: { line: 393, column: 20 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                              },
                              {
                                code: 'ANY_OF_MISSING',
                                params: [],
                                message: "Data does not match any schemas from 'anyOf'",
                                path: [ 'standardColumns', 10 ],
                                title: '#/definitions/Schema/properties/standardColumns/items',
                                inner: [
                                  {
                                    code: 'ANY_OF_MISSING',
                                    params: [],
                                    message: "Data does not match any schemas from 'anyOf'",
                                    path: [ 10, 'type' ],
                                    title: '#/definitions/Column/properties/type',
                                    inner: [
                                      {
                                        code: 'ENUM_CASE_MISMATCH',
                                        params: [ 'int' ],
                                        message: 'Enum does not match case for: int',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        description: "Coulmn's data type.",
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                      },
                                      {
                                        code: 'INVALID_TYPE',
                                        params: [ 'null', 'string' ],
                                        message: 'Expected type null but found type string',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                      }
                                    ],
                                    position: { line: 315, column: 17 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                  },
                                  {
                                    code: 'INVALID_TYPE',
                                    params: [ 'null', 'object' ],
                                    message: 'Expected type null but found type object',
                                    path: [ 10 ],
                                    title: '#/definitions/Schema/properties/standardColumns/items',
                                    position: { line: 393, column: 20 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                  }
                                ],
                                position: { line: 393, column: 20 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                              },
                              {
                                code: 'ANY_OF_MISSING',
                                params: [],
                                message: "Data does not match any schemas from 'anyOf'",
                                path: [ 'standardColumns', 11 ],
                                title: '#/definitions/Schema/properties/standardColumns/items',
                                inner: [
                                  {
                                    code: 'ANY_OF_MISSING',
                                    params: [],
                                    message: "Data does not match any schemas from 'anyOf'",
                                    path: [ 11, 'type' ],
                                    title: '#/definitions/Column/properties/type',
                                    inner: [
                                      {
                                        code: 'ENUM_CASE_MISMATCH',
                                        params: [ 'int' ],
                                        message: 'Enum does not match case for: int',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        description: "Coulmn's data type.",
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                      },
                                      {
                                        code: 'INVALID_TYPE',
                                        params: [ 'null', 'string' ],
                                        message: 'Expected type null but found type string',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                      }
                                    ],
                                    position: { line: 315, column: 17 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                  },
                                  {
                                    code: 'INVALID_TYPE',
                                    params: [ 'null', 'object' ],
                                    message: 'Expected type null but found type object',
                                    path: [ 11 ],
                                    title: '#/definitions/Schema/properties/standardColumns/items',
                                    position: { line: 393, column: 20 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                  }
                                ],
                                position: { line: 393, column: 20 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                              },
                              {
                                code: 'ANY_OF_MISSING',
                                params: [],
                                message: "Data does not match any schemas from 'anyOf'",
                                path: [ 'standardColumns', 12 ],
                                title: '#/definitions/Schema/properties/standardColumns/items',
                                inner: [
                                  {
                                    code: 'ANY_OF_MISSING',
                                    params: [],
                                    message: "Data does not match any schemas from 'anyOf'",
                                    path: [ 12, 'type' ],
                                    title: '#/definitions/Column/properties/type',
                                    inner: [
                                      {
                                        code: 'ENUM_CASE_MISMATCH',
                                        params: [ 'int' ],
                                        message: 'Enum does not match case for: int',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        description: "Coulmn's data type.",
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                      },
                                      {
                                        code: 'INVALID_TYPE',
                                        params: [ 'null', 'string' ],
                                        message: 'Expected type null but found type string',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                      }
                                    ],
                                    position: { line: 315, column: 17 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                  },
                                  {
                                    code: 'INVALID_TYPE',
                                    params: [ 'null', 'object' ],
                                    message: 'Expected type null but found type object',
                                    path: [ 12 ],
                                    title: '#/definitions/Schema/properties/standardColumns/items',
                                    position: { line: 393, column: 20 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                  }
                                ],
                                position: { line: 393, column: 20 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                              },
                              {
                                code: 'ANY_OF_MISSING',
                                params: [],
                                message: "Data does not match any schemas from 'anyOf'",
                                path: [ 'standardColumns', 13 ],
                                title: '#/definitions/Schema/properties/standardColumns/items',
                                inner: [
                                  {
                                    code: 'ANY_OF_MISSING',
                                    params: [],
                                    message: "Data does not match any schemas from 'anyOf'",
                                    path: [ 13, 'type' ],
                                    title: '#/definitions/Column/properties/type',
                                    inner: [
                                      {
                                        code: 'ENUM_CASE_MISMATCH',
                                        params: [ 'int' ],
                                        message: 'Enum does not match case for: int',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        description: "Coulmn's data type.",
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                      },
                                      {
                                        code: 'INVALID_TYPE',
                                        params: [ 'null', 'string' ],
                                        message: 'Expected type null but found type string',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                      }
                                    ],
                                    position: { line: 315, column: 17 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                  },
                                  {
                                    code: 'INVALID_TYPE',
                                    params: [ 'null', 'object' ],
                                    message: 'Expected type null but found type object',
                                    path: [ 13 ],
                                    title: '#/definitions/Schema/properties/standardColumns/items',
                                    position: { line: 393, column: 20 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                  }
                                ],
                                position: { line: 393, column: 20 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                              },
                              {
                                code: 'ANY_OF_MISSING',
                                params: [],
                                message: "Data does not match any schemas from 'anyOf'",
                                path: [ 'standardColumns', 14 ],
                                title: '#/definitions/Schema/properties/standardColumns/items',
                                inner: [
                                  {
                                    code: 'ANY_OF_MISSING',
                                    params: [],
                                    message: "Data does not match any schemas from 'anyOf'",
                                    path: [ 14, 'type' ],
                                    title: '#/definitions/Column/properties/type',
                                    inner: [
                                      {
                                        code: 'ENUM_CASE_MISMATCH',
                                        params: [ 'int' ],
                                        message: 'Enum does not match case for: int',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        description: "Coulmn's data type.",
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                      },
                                      {
                                        code: 'INVALID_TYPE',
                                        params: [ 'null', 'string' ],
                                        message: 'Expected type null but found type string',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                      }
                                    ],
                                    position: { line: 315, column: 17 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                  },
                                  {
                                    code: 'INVALID_TYPE',
                                    params: [ 'null', 'object' ],
                                    message: 'Expected type null but found type object',
                                    path: [ 14 ],
                                    title: '#/definitions/Schema/properties/standardColumns/items',
                                    position: { line: 393, column: 20 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                  }
                                ],
                                position: { line: 393, column: 20 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'array' ],
                                message: 'Expected type null but found type array',
                                path: [ 'standardColumns' ],
                                title: '#/definitions/Schema/properties/standardColumns',
                                position: { line: 390, column: 28 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                              }
                            ],
                            position: { line: 390, column: 28 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 'schema' ],
                            title: '#/definitions/TableProperties/properties/schema',
                            position: { line: 466, column: 19 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                          }
                        ],
                        position: { line: 466, column: 19 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                      },
                      {
                        code: 'INVALID_TYPE',
                        params: [ 'null', 'object' ],
                        message: 'Expected type null but found type object',
                        path: [ 'properties' ],
                        title: '#/definitions/Table/properties/properties',
                        position: { line: 488, column: 23 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                      }
                    ],
                    position: { line: 488, column: 23 },
                    url: '.\\Tables.json',
                    directives: {},
                    jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                  },
                  {
                    code: 'INVALID_TYPE',
                    params: [ 'null', 'object' ],
                    message: 'Expected type null but found type object',
                    path: [ 0 ],
                    title: '#/definitions/TablesListResult/properties/value/items',
                    position: { line: 505, column: 20 },
                    url: '.\\Tables.json',
                    directives: {},
                    jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                  }
                ],
                position: { line: 505, column: 20 },
                url: '.\\Tables.json',
                directives: {},
                jsonPosition: { line: 12, column: 11 },
                jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
              },
              {
                code: 'ANY_OF_MISSING',
                params: [],
                message: "Data does not match any schemas from 'anyOf'",
                path: [ 'value', 1 ],
                title: '#/definitions/TablesListResult/properties/value/items',
                inner: [
                  {
                    code: 'ANY_OF_MISSING',
                    params: [],
                    message: "Data does not match any schemas from 'anyOf'",
                    path: [ 1, 'properties' ],
                    title: '#/definitions/Table/properties/properties',
                    inner: [
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'properties', 'schema' ],
                        title: '#/definitions/TableProperties/properties/schema',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 'schema', 'standardColumns' ],
                            title: '#/definitions/Schema/properties/standardColumns',
                            inner: [
                              {
                                code: 'ANY_OF_MISSING',
                                params: [],
                                message: "Data does not match any schemas from 'anyOf'",
                                path: [ 'standardColumns', 0 ],
                                title: '#/definitions/Schema/properties/standardColumns/items',
                                inner: [
                                  {
                                    code: 'ANY_OF_MISSING',
                                    params: [],
                                    message: "Data does not match any schemas from 'anyOf'",
                                    path: [ 0, 'type' ],
                                    title: '#/definitions/Column/properties/type',
                                    inner: [
                                      {
                                        code: 'ENUM_CASE_MISMATCH',
                                        params: [ 'guid' ],
                                        message: 'Enum does not match case for: guid',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        description: "Coulmn's data type.",
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                      },
                                      {
                                        code: 'INVALID_TYPE',
                                        params: [ 'null', 'string' ],
                                        message: 'Expected type null but found type string',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                      }
                                    ],
                                    position: { line: 315, column: 17 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                  },
                                  {
                                    code: 'INVALID_TYPE',
                                    params: [ 'null', 'object' ],
                                    message: 'Expected type null but found type object',
                                    path: [ 0 ],
                                    title: '#/definitions/Schema/properties/standardColumns/items',
                                    position: { line: 393, column: 20 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                  }
                                ],
                                position: { line: 393, column: 20 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                              },
                              {
                                code: 'ANY_OF_MISSING',
                                params: [],
                                message: "Data does not match any schemas from 'anyOf'",
                                path: [ 'standardColumns', 1 ],
                                title: '#/definitions/Schema/properties/standardColumns/items',
                                inner: [
                                  {
                                    code: 'ANY_OF_MISSING',
                                    params: [],
                                    message: "Data does not match any schemas from 'anyOf'",
                                    path: [ 1, 'type' ],
                                    title: '#/definitions/Column/properties/type',
                                    inner: [
                                      {
                                        code: 'ENUM_CASE_MISMATCH',
                                        params: [ 'string' ],
                                        message: 'Enum does not match case for: string',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        description: "Coulmn's data type.",
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                      },
                                      {
                                        code: 'INVALID_TYPE',
                                        params: [ 'null', 'string' ],
                                        message: 'Expected type null but found type string',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                      }
                                    ],
                                    position: { line: 315, column: 17 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                  },
                                  {
                                    code: 'INVALID_TYPE',
                                    params: [ 'null', 'object' ],
                                    message: 'Expected type null but found type object',
                                    path: [ 1 ],
                                    title: '#/definitions/Schema/properties/standardColumns/items',
                                    position: { line: 393, column: 20 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                  }
                                ],
                                position: { line: 393, column: 20 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                              },
                              {
                                code: 'ANY_OF_MISSING',
                                params: [],
                                message: "Data does not match any schemas from 'anyOf'",
                                path: [ 'standardColumns', 2 ],
                                title: '#/definitions/Schema/properties/standardColumns/items',
                                inner: [
                                  {
                                    code: 'ANY_OF_MISSING',
                                    params: [],
                                    message: "Data does not match any schemas from 'anyOf'",
                                    path: [ 2, 'type' ],
                                    title: '#/definitions/Column/properties/type',
                                    inner: [
                                      {
                                        code: 'ENUM_CASE_MISMATCH',
                                        params: [ 'dateTime' ],
                                        message: 'Enum does not match case for: dateTime',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        description: "Coulmn's data type.",
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                      },
                                      {
                                        code: 'INVALID_TYPE',
                                        params: [ 'null', 'string' ],
                                        message: 'Expected type null but found type string',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                      }
                                    ],
                                    position: { line: 315, column: 17 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                  },
                                  {
                                    code: 'INVALID_TYPE',
                                    params: [ 'null', 'object' ],
                                    message: 'Expected type null but found type object',
                                    path: [ 2 ],
                                    title: '#/definitions/Schema/properties/standardColumns/items',
                                    position: { line: 393, column: 20 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                  }
                                ],
                                position: { line: 393, column: 20 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                              },
                              {
                                code: 'ANY_OF_MISSING',
                                params: [],
                                message: "Data does not match any schemas from 'anyOf'",
                                path: [ 'standardColumns', 3 ],
                                title: '#/definitions/Schema/properties/standardColumns/items',
                                inner: [
                                  {
                                    code: 'ANY_OF_MISSING',
                                    params: [],
                                    message: "Data does not match any schemas from 'anyOf'",
                                    path: [ 3, 'type' ],
                                    title: '#/definitions/Column/properties/type',
                                    inner: [
                                      {
                                        code: 'ENUM_CASE_MISMATCH',
                                        params: [ 'string' ],
                                        message: 'Enum does not match case for: string',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        description: "Coulmn's data type.",
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                      },
                                      {
                                        code: 'INVALID_TYPE',
                                        params: [ 'null', 'string' ],
                                        message: 'Expected type null but found type string',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                      }
                                    ],
                                    position: { line: 315, column: 17 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                  },
                                  {
                                    code: 'INVALID_TYPE',
                                    params: [ 'null', 'object' ],
                                    message: 'Expected type null but found type object',
                                    path: [ 3 ],
                                    title: '#/definitions/Schema/properties/standardColumns/items',
                                    position: { line: 393, column: 20 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                  }
                                ],
                                position: { line: 393, column: 20 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                              },
                              {
                                code: 'ANY_OF_MISSING',
                                params: [],
                                message: "Data does not match any schemas from 'anyOf'",
                                path: [ 'standardColumns', 4 ],
                                title: '#/definitions/Schema/properties/standardColumns/items',
                                inner: [
                                  {
                                    code: 'ANY_OF_MISSING',
                                    params: [],
                                    message: "Data does not match any schemas from 'anyOf'",
                                    path: [ 4, 'type' ],
                                    title: '#/definitions/Column/properties/type',
                                    inner: [
                                      {
                                        code: 'ENUM_CASE_MISMATCH',
                                        params: [ 'string' ],
                                        message: 'Enum does not match case for: string',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        description: "Coulmn's data type.",
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                      },
                                      {
                                        code: 'INVALID_TYPE',
                                        params: [ 'null', 'string' ],
                                        message: 'Expected type null but found type string',
                                        path: [ 'type' ],
                                        title: '#/definitions/Column/properties/type',
                                        position: { line: 315, column: 17 },
                                        url: '.\\Tables.json',
                                        directives: {},
                                        jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                      }
                                    ],
                                    position: { line: 315, column: 17 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                  },
                                  {
                                    code: 'INVALID_TYPE',
                                    params: [ 'null', 'object' ],
                                    message: 'Expected type null but found type object',
                                    path: [ 4 ],
                                    title: '#/definitions/Schema/properties/standardColumns/items',
                                    position: { line: 393, column: 20 },
                                    url: '.\\Tables.json',
                                    directives: {},
                                    jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                                  }
                                ],
                                position: { line: 393, column: 20 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'array' ],
                                message: 'Expected type null but found type array',
                                path: [ 'standardColumns' ],
                                title: '#/definitions/Schema/properties/standardColumns',
                                position: { line: 390, column: 28 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                              }
                            ],
                            position: { line: 390, column: 28 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 'schema' ],
                            title: '#/definitions/TableProperties/properties/schema',
                            position: { line: 466, column: 19 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                          }
                        ],
                        position: { line: 466, column: 19 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                      },
                      {
                        code: 'INVALID_TYPE',
                        params: [ 'null', 'object' ],
                        message: 'Expected type null but found type object',
                        path: [ 'properties' ],
                        title: '#/definitions/Table/properties/properties',
                        position: { line: 488, column: 23 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                      }
                    ],
                    position: { line: 488, column: 23 },
                    url: '.\\Tables.json',
                    directives: {},
                    jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                  },
                  {
                    code: 'INVALID_TYPE',
                    params: [ 'null', 'object' ],
                    message: 'Expected type null but found type object',
                    path: [ 1 ],
                    title: '#/definitions/TablesListResult/properties/value/items',
                    position: { line: 505, column: 20 },
                    url: '.\\Tables.json',
                    directives: {},
                    jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
                  }
                ],
                position: { line: 505, column: 20 },
                url: '.\\Tables.json',
                directives: {},
                jsonPosition: { line: 188, column: 11 },
                jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
              },
              {
                code: 'INVALID_TYPE',
                params: [ 'null', 'array' ],
                message: 'Expected type null but found type array',
                path: [ 'value' ],
                title: '#/definitions/TablesListResult/properties/value',
                position: { line: 503, column: 18 },
                url: '.\\Tables.json',
                directives: {},
                jsonPosition: { line: 11, column: 18 },
                jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
              }
            ],
            position: { line: 503, column: 18 },
            url: '.\\Tables.json',
            directives: {},
            jsonPosition: { line: 11, column: 18 },
            jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json'
          }
        ],
        message: "Invalid body: Data does not match any schemas from 'anyOf'",
        path: []
      }
    ]
  },
  level: '\u001b[31merror\u001b[39m',
  message: 'Found errors in validating the response with statusCode "200" for x-ms-example "Tables_ListByWorkspace_MaximumSet_Gen" in operation "Tables_ListByWorkspace".:\n'
}
{
  message: 'the validation raised below error:',
  level: '\u001b[31merror\u001b[39m'
}
{
  message: [
    {
      operationId: 'Tables_ListByWorkspace',
      scenario: 'TablesListByWorkspace',
      source: 'response',
      responseCode: '200',
      severity: 1,
      code: 'ENUM_CASE_MISMATCH',
      details: {
        code: 'ENUM_CASE_MISMATCH',
        params: [ 'guid' ],
        message: 'Enum does not match case for: guid',
        path: '$/value/0/properties/schema/standardColumns/standardColumns/0/type',
        title: '#/definitions/Column/properties/type',
        description: "Coulmn's data type.",
        position: { line: 315, column: 17 },
        url: '.\\Tables.json',
        directives: {},
        jsonUrl: 'examples/TableList.json',
        jsonPath: "$['value'][0]['properties']['schema']['standardColumns']['standardColumns'][0]['type']",
        similarPaths: [ '$/value/1/properties/schema/standardColumns/0/type' ],
        similarJsonPaths: [
          "$['value'][1]['properties']['schema']['standardColumns'][0]['type']"
        ]
      }
    },
    {
      operationId: 'Tables_ListByWorkspace',
      scenario: 'TablesListByWorkspace',
      source: 'response',
      responseCode: '200',
      severity: 1,
      code: 'ENUM_CASE_MISMATCH',
      details: {
        code: 'ENUM_CASE_MISMATCH',
        params: [ 'string' ],
        message: 'Enum does not match case for: string',
        path: '$/value/0/properties/schema/standardColumns/1/type',
        title: '#/definitions/Column/properties/type',
        description: "Coulmn's data type.",
        position: { line: 315, column: 17 },
        url: '.\\Tables.json',
        directives: {},
        jsonUrl: 'examples/TableList.json',
        jsonPath: "$['value'][0]['properties']['schema']['standardColumns'][1]['type']",
        similarPaths: [
          '$/value/0/properties/schema/standardColumns/3/type',
          '$/value/0/properties/schema/standardColumns/4/type',
          '$/value/0/properties/schema/standardColumns/5/type',
          '$/value/1/properties/schema/standardColumns/standardColumns/1/type'
        ],
        similarJsonPaths: [
          "$['value'][0]['properties']['schema']['standardColumns'][3]['type']",
          "$['value'][0]['properties']['schema']['standardColumns'][4]['type']",
          "$['value'][0]['properties']['schema']['standardColumns'][5]['type']",
          "$['value'][1]['properties']['schema']['standardColumns']['standardColumns'][1]['type']"
        ]
      }
    },
    {
      operationId: 'Tables_ListByWorkspace',
      scenario: 'TablesListByWorkspace',
      source: 'response',
      responseCode: '200',
      severity: 1,
      code: 'ENUM_CASE_MISMATCH',
      details: {
        code: 'ENUM_CASE_MISMATCH',
        params: [ 'dateTime' ],
        message: 'Enum does not match case for: dateTime',
        path: '$/value/0/properties/schema/standardColumns/2/type',
        title: '#/definitions/Column/properties/type',
        description: "Coulmn's data type.",
        position: { line: 315, column: 17 },
        url: '.\\Tables.json',
        directives: {},
        jsonUrl: 'examples/TableList.json',
        jsonPath: "$['value'][0]['properties']['schema']['standardColumns'][2]['type']",
        similarPaths: [ '$/value/1/properties/schema/standardColumns/2/type' ],
        similarJsonPaths: [
          "$['value'][1]['properties']['schema']['standardColumns'][2]['type']"
        ]
      }
    },
    {
      operationId: 'Tables_ListByWorkspace',
      scenario: 'TablesListByWorkspace',
      source: 'response',
      responseCode: '200',
      severity: 1,
      code: 'ENUM_CASE_MISMATCH',
      details: {
        code: 'ENUM_CASE_MISMATCH',
        params: [ 'int' ],
        message: 'Enum does not match case for: int',
        path: '$/value/0/properties/schema/standardColumns/6/type',
        title: '#/definitions/Column/properties/type',
        description: "Coulmn's data type.",
        position: { line: 315, column: 17 },
        url: '.\\Tables.json',
        directives: {},
        jsonUrl: 'examples/TableList.json',
        jsonPath: "$['value'][0]['properties']['schema']['standardColumns'][6]['type']",
        similarPaths: [
          '$/value/0/properties/schema/standardColumns/7/type',
          '$/value/0/properties/schema/standardColumns/8/type',
          '$/value/0/properties/schema/standardColumns/9/type',
          '$/value/0/properties/schema/standardColumns/10/type',
          '$/value/0/properties/schema/standardColumns/11/type',
          '$/value/0/properties/schema/standardColumns/12/type',
          '$/value/0/properties/schema/standardColumns/13/type',
          '$/value/0/properties/schema/standardColumns/14/type'
        ],
        similarJsonPaths: [
          "$['value'][0]['properties']['schema']['standardColumns'][7]['type']",
          "$['value'][0]['properties']['schema']['standardColumns'][8]['type']",
          "$['value'][0]['properties']['schema']['standardColumns'][9]['type']",
          "$['value'][0]['properties']['schema']['standardColumns'][10]['type']",
          "$['value'][0]['properties']['schema']['standardColumns'][11]['type']",
          "$['value'][0]['properties']['schema']['standardColumns'][12]['type']",
          "$['value'][0]['properties']['schema']['standardColumns'][13]['type']",
          "$['value'][0]['properties']['schema']['standardColumns'][14]['type']"
        ]
      }
    },
    {
      operationId: 'Tables_ListByWorkspace',
      scenario: 'Tables_ListByWorkspace_MaximumSet_Gen',
      source: 'response',
      responseCode: '200',
      severity: 1,
      code: 'ENUM_CASE_MISMATCH',
      details: {
        code: 'ENUM_CASE_MISMATCH',
        params: [ 'guid' ],
        message: 'Enum does not match case for: guid',
        path: '$/value/0/properties/schema/standardColumns/standardColumns/0/type',
        title: '#/definitions/Column/properties/type',
        description: "Coulmn's data type.",
        position: { line: 315, column: 17 },
        url: '.\\Tables.json',
        directives: {},
        jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json',
        jsonPath: "$['value'][0]['properties']['schema']['standardColumns']['standardColumns'][0]['type']",
        similarPaths: [ '$/value/1/properties/schema/standardColumns/0/type' ],
        similarJsonPaths: [
          "$['value'][1]['properties']['schema']['standardColumns'][0]['type']"
        ]
      }
    },
    {
      operationId: 'Tables_ListByWorkspace',
      scenario: 'Tables_ListByWorkspace_MaximumSet_Gen',
      source: 'response',
      responseCode: '200',
      severity: 1,
      code: 'ENUM_CASE_MISMATCH',
      details: {
        code: 'ENUM_CASE_MISMATCH',
        params: [ 'string' ],
        message: 'Enum does not match case for: string',
        path: '$/value/0/properties/schema/standardColumns/1/type',
        title: '#/definitions/Column/properties/type',
        description: "Coulmn's data type.",
        position: { line: 315, column: 17 },
        url: '.\\Tables.json',
        directives: {},
        jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json',
        jsonPath: "$['value'][0]['properties']['schema']['standardColumns'][1]['type']",
        similarPaths: [
          '$/value/0/properties/schema/standardColumns/3/type',
          '$/value/0/properties/schema/standardColumns/4/type',
          '$/value/0/properties/schema/standardColumns/5/type',
          '$/value/1/properties/schema/standardColumns/standardColumns/1/type'
        ],
        similarJsonPaths: [
          "$['value'][0]['properties']['schema']['standardColumns'][3]['type']",
          "$['value'][0]['properties']['schema']['standardColumns'][4]['type']",
          "$['value'][0]['properties']['schema']['standardColumns'][5]['type']",
          "$['value'][1]['properties']['schema']['standardColumns']['standardColumns'][1]['type']"
        ]
      }
    },
    {
      operationId: 'Tables_ListByWorkspace',
      scenario: 'Tables_ListByWorkspace_MaximumSet_Gen',
      source: 'response',
      responseCode: '200',
      severity: 1,
      code: 'ENUM_CASE_MISMATCH',
      details: {
        code: 'ENUM_CASE_MISMATCH',
        params: [ 'dateTime' ],
        message: 'Enum does not match case for: dateTime',
        path: '$/value/0/properties/schema/standardColumns/2/type',
        title: '#/definitions/Column/properties/type',
        description: "Coulmn's data type.",
        position: { line: 315, column: 17 },
        url: '.\\Tables.json',
        directives: {},
        jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json',
        jsonPath: "$['value'][0]['properties']['schema']['standardColumns'][2]['type']",
        similarPaths: [ '$/value/1/properties/schema/standardColumns/2/type' ],
        similarJsonPaths: [
          "$['value'][1]['properties']['schema']['standardColumns'][2]['type']"
        ]
      }
    },
    {
      operationId: 'Tables_ListByWorkspace',
      scenario: 'Tables_ListByWorkspace_MaximumSet_Gen',
      source: 'response',
      responseCode: '200',
      severity: 1,
      code: 'ENUM_CASE_MISMATCH',
      details: {
        code: 'ENUM_CASE_MISMATCH',
        params: [ 'int' ],
        message: 'Enum does not match case for: int',
        path: '$/value/0/properties/schema/standardColumns/6/type',
        title: '#/definitions/Column/properties/type',
        description: "Coulmn's data type.",
        position: { line: 315, column: 17 },
        url: '.\\Tables.json',
        directives: {},
        jsonUrl: 'examples/Tables_ListByWorkspace_MaximumSet_Gen.json',
        jsonPath: "$['value'][0]['properties']['schema']['standardColumns'][6]['type']",
        similarPaths: [
          '$/value/0/properties/schema/standardColumns/7/type',
          '$/value/0/properties/schema/standardColumns/8/type',
          '$/value/0/properties/schema/standardColumns/9/type',
          '$/value/0/properties/schema/standardColumns/10/type',
          '$/value/0/properties/schema/standardColumns/11/type',
          '$/value/0/properties/schema/standardColumns/12/type',
          '$/value/0/properties/schema/standardColumns/13/type',
          '$/value/0/properties/schema/standardColumns/14/type'
        ],
        similarJsonPaths: [
          "$['value'][0]['properties']['schema']['standardColumns'][7]['type']",
          "$['value'][0]['properties']['schema']['standardColumns'][8]['type']",
          "$['value'][0]['properties']['schema']['standardColumns'][9]['type']",
          "$['value'][0]['properties']['schema']['standardColumns'][10]['type']",
          "$['value'][0]['properties']['schema']['standardColumns'][11]['type']",
          "$['value'][0]['properties']['schema']['standardColumns'][12]['type']",
          "$['value'][0]['properties']['schema']['standardColumns'][13]['type']",
          "$['value'][0]['properties']['schema']['standardColumns'][14]['type']"
        ]
      }
    }
  ],
  level: '\u001b[31merror\u001b[39m'
}
start generated example for Tables_Upsert, rule:MaximumSet
{ message: 'extractResponse', level: '\u001b[32minfo\u001b[39m' }
{
  message: {
    parameters: {
      subscriptionId: '00000000-0000-0000-0000-00000000000',
      resourceGroupName: 'rgTables',
      workspaceName: 'oiautorest6685',
      'api-version': '2020-10-01',
      tableName: 'AzureNetworkFlow',
      parameters: {
        properties: {
          retentionInDays: 45,
          isTroubleshootEnabled: true,
          schema: {
            displayName: 'aaaaaaaaaaaa',
            description: 'a',
            columns: [
              {
                name: 'aaaaaaaa',
                type: 'String',
                dataTypeHint: 'URI',
                displayName: 'aaaaaaaaaaaaaaaaaaaaaaaaaaa',
                description: 'a'
              }
            ]
          }
        }
      }
    },
    responses: {
      '200': {
        headers: undefined,
        body: {
          properties: {
            retentionInDays: 45,
            isTroubleshootingAllowed: true,
            isTroubleshootEnabled: true,
            lastTroubleshootDate: 'aaaaaaa',
            schema: {
              name: 'AzureNetworkFlow',
              displayName: 'aaaaaaaaaaaa',
              description: 'a',
              columns: [
                {
                  name: 'aaaaaaaa',
                  type: 'String',
                  dataTypeHint: 'URI',
                  displayName: 'aaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  description: 'a',
                  isDefaultDisplay: true,
                  isHidden: true
                }
              ],
              standardColumns: [
                {
                  isHidden: true,
                  name: 'TenantId',
                  type: 'guid',
                  dataTypeHint: 'URI',
                  displayName: 'aaaaaaaaaaaaaa',
                  description: 'aaaaaaaaa',
                  isDefaultDisplay: true
                },
                {
                  isHidden: true,
                  name: 'SourceSystem',
                  type: 'string',
                  dataTypeHint: 'URI',
                  displayName: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  description: 'aaaaaaaaaaaaaa',
                  isDefaultDisplay: true
                },
                {
                  isHidden: true,
                  name: 'TimeGenerated',
                  type: 'dateTime',
                  dataTypeHint: 'URI',
                  displayName: 'aaaaaaaaaaaaaaaaaaaaaa',
                  description: 'aaaaaaaaaaaaaaaaa',
                  isDefaultDisplay: true
                },
                {
                  isHidden: true,
                  name: 'AgentID',
                  type: 'string',
                  dataTypeHint: 'URI',
                  displayName: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  description: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  isDefaultDisplay: true
                },
                {
                  isHidden: true,
                  name: 'SourceIP',
                  type: 'string',
                  dataTypeHint: 'URI',
                  displayName: 'aaaaaaa',
                  description: 'aaaaaaaaaaaaaaaaaaaaaaaa',
                  isDefaultDisplay: true
                },
                {
                  isHidden: true,
                  name: 'Protocol',
                  type: 'string',
                  dataTypeHint: 'URI',
                  displayName: 'aaaaaaaaaaaaaaa',
                  description: 'aaaaaaa',
                  isDefaultDisplay: true
                },
                {
                  isHidden: true,
                  name: 'SourcePort',
                  type: 'int',
                  dataTypeHint: 'URI',
                  displayName: 'aaaaaaaaaaaaaaaaaaaaa',
                  description: 'aaaaaaaaa',
                  isDefaultDisplay: true
                },
                {
                  isHidden: true,
                  name: 'DestinationPort',
                  type: 'int',
                  dataTypeHint: 'URI',
                  displayName: 'aaaaaaaaaaaaaaaaaaaaaaaa',
                  description: 'aaaaaaaaaaaaaaaaaa',
                  isDefaultDisplay: true
                },
                {
                  isHidden: true,
                  name: 'TcpFlags',
                  type: 'int',
                  dataTypeHint: 'URI',
                  displayName: 'aaaaaaaaaaaaaaaa',
                  description: 'aaaaaaaaaaaa',
                  isDefaultDisplay: true
                },
                {
                  isHidden: true,
                  name: 'Packets',
                  type: 'int',
                  dataTypeHint: 'URI',
                  displayName: 'aa',
                  description: 'aaaaaaaaaaaaaaaaaaaaaaa',
                  isDefaultDisplay: true
                },
                {
                  isHidden: true,
                  name: 'Bytes',
                  type: 'int',
                  dataTypeHint: 'URI',
                  displayName: 'aaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  description: 'a',
                  isDefaultDisplay: true
                },
                {
                  isHidden: true,
                  name: 'BytesOut',
                  type: 'int',
                  dataTypeHint: 'URI',
                  displayName: 'aaaaaaaaaaa',
                  description: 'aaaaaaaaa',
                  isDefaultDisplay: true
                },
                {
                  isHidden: true,
                  name: 'DurationInMs',
                  type: 'int',
                  dataTypeHint: 'URI',
                  displayName: 'aaaaaaaaaaaaaaa',
                  description: 'aaaaaaaaaa',
                  isDefaultDisplay: true
                },
                {
                  isHidden: true,
                  name: 'RstCount',
                  type: 'int',
                  dataTypeHint: 'URI',
                  displayName: 'aaaaaaaaaaaa',
                  description: 'aaaaaaaaaaaaaa',
                  isDefaultDisplay: true
                },
                {
                  isHidden: true,
                  name: 'MaxSampleRtt',
                  type: 'int',
                  dataTypeHint: 'URI',
                  displayName: 'aaaaaaaaaaaaaaa',
                  description: 'aaaaaaaaaaaaaaaaaaa',
                  isDefaultDisplay: true
                }
              ],
              categories: [ 'aaaaaaaaaaaaaaaaaa' ],
              labels: [ 'aaaaaaaaaaaaaaaaaaaaaaaaaaa' ],
              source: 'Microsoft',
              solutions: [ 'LogManagement' ],
              isTroubleshootingAllowed: true
            },
            provisioningState: 'Succeeded'
          },
          id: '/subscriptions/00000000-0000-0000-0000-00000000000/resourcegroups/oiautorest6685/providers/Microsoft.OperationalInsights/workspaces/oiautorest6685/tables/AzureNetworkFlow',
          name: 'AzureNetworkFlow',
          type: 'aaaaaaaaaaaaaa'
        }
      },
      '202': { headers: undefined, body: undefined }
    }
  },
  level: '\u001b[32minfo\u001b[39m'
}
example file path: C:\one\Mgmt\azure-rest-api-specs\specification\operationalinsights\resource-manager\Microsoft.OperationalInsights\preview\2021-03-01-privatepreview\examples\Tables_Upsert_MaximumSet_Gen.json
{
  message: 'start validating generated example for Tables_Upsert',
  level: '\u001b[32minfo\u001b[39m'
}
{
  message: 'Validating "examples" and "x-ms-examples" in  .\\Tables.json:\n',
  level: '\u001b[32minfo\u001b[39m'
}
{
  code: 'RESPONSE_STATUS_CODE_NOT_IN_EXAMPLE',
  id: 'OAV111',
  message: 'Following response status codes "202" for operation "Tables_Upsert" were present in the swagger spec, however they were not present in x-ms-examples. Please provide them.',
  level: '\u001b[31merror\u001b[39m'
}
{
  code: 'RESPONSE_STATUS_CODE_NOT_IN_EXAMPLE',
  id: 'OAV111',
  message: 'Following response status codes "202" for operation "Tables_Upsert" were present in the swagger spec, however they were not present in x-ms-examples. Please provide them.',
  level: '\u001b[31merror\u001b[39m'
}
{
  code: 'RESPONSE_SCHEMA_NOT_IN_SPEC',
  id: 'OAV113',
  message: 'Response statusCode "202" for operation "Tables_Upsert" has response body provided in the example, however the response does not have a "schema" defined in the swagger spec.',
  level: '\u001b[31merror\u001b[39m'
}
{
  code: 'RESPONSE_STATUS_CODE_NOT_IN_EXAMPLE',
  id: 'OAV111',
  message: 'Following response status codes "200" for operation "Tables_Upsert" were present in the swagger spec, however they were not present in x-ms-examples. Please provide them.',
  level: '\u001b[31merror\u001b[39m'
}
{
  message: 'Request parameters for x-ms-example "TableCreate_MetaDataChange" in operation "Tables_Upsert" is valid.',
  level: '\u001b[32minfo\u001b[39m'
}
{
  '0': {
    code: 'RESPONSE_VALIDATION_ERROR',
    id: 'OAV108',
    message: 'Found errors in validating the response with statusCode "200" for x-ms-example "TableCreate_MetaDataChange" in operation "Tables_Upsert".',
    innerErrors: [
      {
        code: 'INVALID_RESPONSE_BODY',
        errors: [
          {
            code: 'ANY_OF_MISSING',
            params: [],
            message: "Data does not match any schemas from 'anyOf'",
            path: [ 'properties' ],
            title: '#/definitions/Table/properties/properties',
            inner: [
              {
                code: 'ANY_OF_MISSING',
                params: [],
                message: "Data does not match any schemas from 'anyOf'",
                path: [ 'properties', 'schema' ],
                title: '#/definitions/TableProperties/properties/schema',
                inner: [
                  {
                    code: 'ANY_OF_MISSING',
                    params: [],
                    message: "Data does not match any schemas from 'anyOf'",
                    path: [ 'schema', 'standardColumns' ],
                    title: '#/definitions/Schema/properties/standardColumns',
                    inner: [
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 0 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 0, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'guid' ],
                                message: 'Enum does not match case for: guid',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 0 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 1 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 1, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'string' ],
                                message: 'Enum does not match case for: string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 1 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 2 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 2, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'dateTime' ],
                                message: 'Enum does not match case for: dateTime',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 2 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 3 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 3, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'string' ],
                                message: 'Enum does not match case for: string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 3 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 4 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 4, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'string' ],
                                message: 'Enum does not match case for: string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 4 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 5 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 5, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'string' ],
                                message: 'Enum does not match case for: string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 5 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 6 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 6, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 6 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 7 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 7, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 7 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 8 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 8, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 8 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 9 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 9, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 9 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 10 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 10, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 10 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 11 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 11, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 11 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 12 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 12, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 12 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 13 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 13, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 13 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 14 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 14, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 14 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                      },
                      {
                        code: 'INVALID_TYPE',
                        params: [ 'null', 'array' ],
                        message: 'Expected type null but found type array',
                        path: [ 'standardColumns' ],
                        title: '#/definitions/Schema/properties/standardColumns',
                        position: { line: 390, column: 28 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                      }
                    ],
                    position: { line: 390, column: 28 },
                    url: '.\\Tables.json',
                    directives: {},
                    jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                  },
                  {
                    code: 'INVALID_TYPE',
                    params: [ 'null', 'object' ],
                    message: 'Expected type null but found type object',
                    path: [ 'schema' ],
                    title: '#/definitions/TableProperties/properties/schema',
                    position: { line: 466, column: 19 },
                    url: '.\\Tables.json',
                    directives: {},
                    jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                  }
                ],
                position: { line: 466, column: 19 },
                url: '.\\Tables.json',
                directives: {},
                jsonPosition: { line: 18, column: 23 },
                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
              },
              {
                code: 'INVALID_TYPE',
                params: [ 'null', 'object' ],
                message: 'Expected type null but found type object',
                path: [ 'properties' ],
                title: '#/definitions/Table/properties/properties',
                position: { line: 488, column: 23 },
                url: '.\\Tables.json',
                directives: {},
                jsonPosition: { line: 17, column: 25 },
                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
              }
            ],
            position: { line: 488, column: 23 },
            url: '.\\Tables.json',
            directives: {},
            jsonPosition: { line: 17, column: 25 },
            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
          }
        ],
        message: "Invalid body: Data does not match any schemas from 'anyOf'",
        path: []
      }
    ]
  },
  level: '\u001b[31merror\u001b[39m',
  message: 'Found errors in validating the response with statusCode "200" for x-ms-example "TableCreate_MetaDataChange" in operation "Tables_Upsert".:\n'
}
{
  '0': {
    code: 'RESPONSE_VALIDATION_ERROR',
    id: 'OAV108',
    message: 'Found errors in validating the response with statusCode "202" for x-ms-example "TableCreate_MetaDataChange" in operation "Tables_Upsert".',
    innerErrors: [
      {
        code: 'RESPONSE_STATUS_CODE_NOT_IN_EXAMPLE',
        id: 'OAV111',
        message: 'Following response status codes "202" for operation "Tables_Upsert" were present in the swagger spec, however they were not present in x-ms-examples. Please provide them.',
        level: 'error',
        [Symbol(level)]: 'error',
        [Symbol(message)]: '{"code":"RESPONSE_STATUS_CODE_NOT_IN_EXAMPLE","id":"OAV111","message":"Following response status codes \\"202\\" for operation \\"Tables_Upsert\\" were present in the swagger spec, however they were not present in x-ms-examples. Please provide them.","level":"error"}'
      }
    ]
  },
  level: '\u001b[31merror\u001b[39m',
  message: 'Found errors in validating the response with statusCode "202" for x-ms-example "TableCreate_MetaDataChange" in operation "Tables_Upsert".:\n'
}
{
  code: 'REQUEST_VALIDATION_ERROR',
  id: 'OAV109',
  message: 'Found errors in validating the request for x-ms-example "TableCreate_SchemaChange" in operation "Tables_Upsert".:\n' +
    ' Found errors in validating the request for x-ms-example "TableCreate_SchemaChange" in operation "Tables_Upsert".',
  innerErrors: [
    {
      code: 'INVALID_REQUEST_PARAMETER',
      errors: [
        {
          code: 'ANY_OF_MISSING',
          params: [],
          message: "Data does not match any schemas from 'anyOf'",
          path: [ 'properties' ],
          title: '{"path":["definitions","Table","properties","properties"],"position":{"line":488,"column":23},"url":".\\\\Tables.json","directives":{}}',
          inner: [
            {
              code: 'ANY_OF_MISSING',
              params: [],
              message: "Data does not match any schemas from 'anyOf'",
              path: [ 'properties', 'schema' ],
              title: '{"path":["definitions","TableProperties","properties","schema"],"position":{"line":466,"column":19},"url":".\\\\Tables.json","directives":{}}',
              inner: [
                {
                  code: 'ANY_OF_MISSING',
                  params: [],
                  message: "Data does not match any schemas from 'anyOf'",
                  path: [ 'schema', 'columns' ],
                  title: '{"path":["definitions","Schema","properties","columns"],"position":{"line":383,"column":20},"url":".\\\\Tables.json","directives":{}}',
                  inner: [
                    {
                      code: 'ANY_OF_MISSING',
                      params: [],
                      message: "Data does not match any schemas from 'anyOf'",
                      path: [ 'columns', 0 ],
                      title: '{"path":["definitions","Schema","properties","columns","items"],"position":{"line":385,"column":20},"url":".\\\\Tables.json","directives":{}}',
                      inner: [
                        {
                          code: 'ANY_OF_MISSING',
                          params: [],
                          message: "Data does not match any schemas from 'anyOf'",
                          path: [ 0, 'type' ],
                          title: '{"path":["definitions","Column","properties","type"],"position":{"line":315,"column":17},"url":".\\\\Tables.json","directives":{}}',
                          inner: [
                            {
                              code: 'ENUM_CASE_MISMATCH',
                              params: [ 'guid' ],
                              message: 'Enum does not match case for: guid',
                              path: [ 'type' ],
                              title: '{"path":["definitions","Column","properties","type"],"position":{"line":315,"column":17},"url":".\\\\Tables.json","directives":{}}',
                              description: "Coulmn's data type."
                            },
                            {
                              code: 'INVALID_TYPE',
                              params: [ 'null', 'string' ],
                              message: 'Expected type null but found type string',
                              path: [ 'type' ],
                              title: '{"path":["definitions","Column","properties","type"],"position":{"line":315,"column":17},"url":".\\\\Tables.json","directives":{}}'
                            }
                          ]
                        },
                        {
                          code: 'INVALID_TYPE',
                          params: [ 'null', 'object' ],
                          message: 'Expected type null but found type object',
                          path: [ 0 ],
                          title: '{"path":["definitions","Schema","properties","columns","items"],"position":{"line":385,"column":20},"url":".\\\\Tables.json","directives":{}}'
                        }
                      ]
                    },
                    {
                      code: 'INVALID_TYPE',
                      params: [ 'null', 'array' ],
                      message: 'Expected type null but found type array',
                      path: [ 'columns' ],
                      title: '{"path":["definitions","Schema","properties","columns"],"position":{"line":383,"column":20},"url":".\\\\Tables.json","directives":{}}'
                    }
                  ]
                },
                {
                  code: 'INVALID_TYPE',
                  params: [ 'null', 'object' ],
                  message: 'Expected type null but found type object',
                  path: [ 'schema' ],
                  title: '{"path":["definitions","TableProperties","properties","schema"],"position":{"line":466,"column":19},"url":".\\\\Tables.json","directives":{}}'
                }
              ]
            },
            {
              code: 'INVALID_TYPE',
              params: [ 'null', 'object' ],
              message: 'Expected type null but found type object',
              path: [ 'properties' ],
              title: '{"path":["definitions","Table","properties","properties"],"position":{"line":488,"column":23},"url":".\\\\Tables.json","directives":{}}'
            }
          ]
        }
      ],
      in: 'body',
      message: 'Invalid parameter (parameters): Value failed JSON Schema validation',
      name: 'parameters',
      path: [ 'parameters', 'parameters' ],
      schemaPath: '#/paths/~1subscriptions~1{subscriptionId}~1resourcegroups~1{resourceGroupName}~1providers~1Microsoft.OperationalInsights~1workspaces~1{workspaceName}~1tables~1{tableName}/put/parameters/5',
      title: '{"path":["parameters","parameters"],"position":{"line":8,"column":19},"url":"examples/TableCreateUpdate_Schema.json"}'
    }
  ],
  level: '\u001b[31merror\u001b[39m'
}
{
  '0': {
    code: 'RESPONSE_VALIDATION_ERROR',
    id: 'OAV108',
    message: 'Found errors in validating the response with statusCode "200" for x-ms-example "TableCreate_SchemaChange" in operation "Tables_Upsert".',
    innerErrors: [
      {
        code: 'INVALID_RESPONSE_BODY',
        errors: [
          {
            code: 'ANY_OF_MISSING',
            params: [],
            message: "Data does not match any schemas from 'anyOf'",
            path: [ 'properties' ],
            title: '#/definitions/Table/properties/properties',
            inner: [
              {
                code: 'ANY_OF_MISSING',
                params: [],
                message: "Data does not match any schemas from 'anyOf'",
                path: [ 'properties', 'schema' ],
                title: '#/definitions/TableProperties/properties/schema',
                inner: [
                  {
                    code: 'ANY_OF_MISSING',
                    params: [],
                    message: "Data does not match any schemas from 'anyOf'",
                    path: [ 'schema', 'columns' ],
                    title: '#/definitions/Schema/properties/columns',
                    inner: [
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'columns', 0 ],
                        title: '#/definitions/Schema/properties/columns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 0, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'guid' ],
                                message: 'Enum does not match case for: guid',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 0 ],
                            title: '#/definitions/Schema/properties/columns/items',
                            position: { line: 385, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          }
                        ],
                        position: { line: 385, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                      },
                      {
                        code: 'INVALID_TYPE',
                        params: [ 'null', 'array' ],
                        message: 'Expected type null but found type array',
                        path: [ 'columns' ],
                        title: '#/definitions/Schema/properties/columns',
                        position: { line: 383, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                      }
                    ],
                    position: { line: 383, column: 20 },
                    url: '.\\Tables.json',
                    directives: {},
                    jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                  },
                  {
                    code: 'ANY_OF_MISSING',
                    params: [],
                    message: "Data does not match any schemas from 'anyOf'",
                    path: [ 'schema', 'standardColumns' ],
                    title: '#/definitions/Schema/properties/standardColumns',
                    inner: [
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 0 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 0, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'guid' ],
                                message: 'Enum does not match case for: guid',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 0 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 1 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 1, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'string' ],
                                message: 'Enum does not match case for: string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 1 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 2 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 2, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'dateTime' ],
                                message: 'Enum does not match case for: dateTime',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 2 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 3 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 3, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'string' ],
                                message: 'Enum does not match case for: string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 3 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 4 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 4, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'string' ],
                                message: 'Enum does not match case for: string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 4 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 5 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 5, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'string' ],
                                message: 'Enum does not match case for: string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 5 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 6 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 6, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 6 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 7 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 7, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 7 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 8 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 8, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 8 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 9 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 9, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 9 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 10 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 10, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 10 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 11 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 11, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 11 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 12 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 12, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 12 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 13 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 13, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 13 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 14 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 14, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 14 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                      },
                      {
                        code: 'INVALID_TYPE',
                        params: [ 'null', 'array' ],
                        message: 'Expected type null but found type array',
                        path: [ 'standardColumns' ],
                        title: '#/definitions/Schema/properties/standardColumns',
                        position: { line: 390, column: 28 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                      }
                    ],
                    position: { line: 390, column: 28 },
                    url: '.\\Tables.json',
                    directives: {},
                    jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                  },
                  {
                    code: 'INVALID_TYPE',
                    params: [ 'null', 'object' ],
                    message: 'Expected type null but found type object',
                    path: [ 'schema' ],
                    title: '#/definitions/TableProperties/properties/schema',
                    position: { line: 466, column: 19 },
                    url: '.\\Tables.json',
                    directives: {},
                    jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                  }
                ],
                position: { line: 466, column: 19 },
                url: '.\\Tables.json',
                directives: {},
                jsonPosition: { line: 25, column: 21 },
                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
              },
              {
                code: 'INVALID_TYPE',
                params: [ 'null', 'object' ],
                message: 'Expected type null but found type object',
                path: [ 'properties' ],
                title: '#/definitions/Table/properties/properties',
                position: { line: 488, column: 23 },
                url: '.\\Tables.json',
                directives: {},
                jsonPosition: { line: 24, column: 23 },
                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
              }
            ],
            position: { line: 488, column: 23 },
            url: '.\\Tables.json',
            directives: {},
            jsonPosition: { line: 24, column: 23 },
            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
          }
        ],
        message: "Invalid body: Data does not match any schemas from 'anyOf'",
        path: []
      }
    ]
  },
  level: '\u001b[31merror\u001b[39m',
  message: 'Found errors in validating the response with statusCode "200" for x-ms-example "TableCreate_SchemaChange" in operation "Tables_Upsert".:\n'
}
{
  '0': {
    code: 'RESPONSE_VALIDATION_ERROR',
    id: 'OAV108',
    message: 'Found errors in validating the response with statusCode "202" for x-ms-example "TableCreate_SchemaChange" in operation "Tables_Upsert".',
    innerErrors: [
      {
        code: 'RESPONSE_STATUS_CODE_NOT_IN_EXAMPLE',
        id: 'OAV111',
        message: 'Following response status codes "202" for operation "Tables_Upsert" were present in the swagger spec, however they were not present in x-ms-examples. Please provide them.',
        level: 'error',
        [Symbol(level)]: 'error',
        [Symbol(message)]: '{"code":"RESPONSE_STATUS_CODE_NOT_IN_EXAMPLE","id":"OAV111","message":"Following response status codes \\"202\\" for operation \\"Tables_Upsert\\" were present in the swagger spec, however they were not present in x-ms-examples. Please provide them.","level":"error"}'
      }
    ]
  },
  level: '\u001b[31merror\u001b[39m',
  message: 'Found errors in validating the response with statusCode "202" for x-ms-example "TableCreate_SchemaChange" in operation "Tables_Upsert".:\n'
}
{
  code: 'REQUEST_VALIDATION_ERROR',
  id: 'OAV109',
  message: 'Found errors in validating the request for x-ms-example "TableCreate_SchemaMetadaChange" in operation "Tables_Upsert".:\n' +
    ' Found errors in validating the request for x-ms-example "TableCreate_SchemaMetadaChange" in operation "Tables_Upsert".',
  innerErrors: [
    {
      code: 'INVALID_REQUEST_PARAMETER',
      errors: [
        {
          code: 'ANY_OF_MISSING',
          params: [],
          message: "Data does not match any schemas from 'anyOf'",
          path: [ 'properties' ],
          title: '{"path":["definitions","Table","properties","properties"],"position":{"line":488,"column":23},"url":".\\\\Tables.json","directives":{}}',
          inner: [
            {
              code: 'ANY_OF_MISSING',
              params: [],
              message: "Data does not match any schemas from 'anyOf'",
              path: [ 'properties', 'schema' ],
              title: '{"path":["definitions","TableProperties","properties","schema"],"position":{"line":466,"column":19},"url":".\\\\Tables.json","directives":{}}',
              inner: [
                {
                  code: 'ANY_OF_MISSING',
                  params: [],
                  message: "Data does not match any schemas from 'anyOf'",
                  path: [ 'schema', 'columns' ],
                  title: '{"path":["definitions","Schema","properties","columns"],"position":{"line":383,"column":20},"url":".\\\\Tables.json","directives":{}}',
                  inner: [
                    {
                      code: 'ANY_OF_MISSING',
                      params: [],
                      message: "Data does not match any schemas from 'anyOf'",
                      path: [ 'columns', 0 ],
                      title: '{"path":["definitions","Schema","properties","columns","items"],"position":{"line":385,"column":20},"url":".\\\\Tables.json","directives":{}}',
                      inner: [
                        {
                          code: 'ANY_OF_MISSING',
                          params: [],
                          message: "Data does not match any schemas from 'anyOf'",
                          path: [ 0, 'type' ],
                          title: '{"path":["definitions","Column","properties","type"],"position":{"line":315,"column":17},"url":".\\\\Tables.json","directives":{}}',
                          inner: [
                            {
                              code: 'ENUM_CASE_MISMATCH',
                              params: [ 'guid' ],
                              message: 'Enum does not match case for: guid',
                              path: [ 'type' ],
                              title: '{"path":["definitions","Column","properties","type"],"position":{"line":315,"column":17},"url":".\\\\Tables.json","directives":{}}',
                              description: "Coulmn's data type."
                            },
                            {
                              code: 'INVALID_TYPE',
                              params: [ 'null', 'string' ],
                              message: 'Expected type null but found type string',
                              path: [ 'type' ],
                              title: '{"path":["definitions","Column","properties","type"],"position":{"line":315,"column":17},"url":".\\\\Tables.json","directives":{}}'
                            }
                          ]
                        },
                        {
                          code: 'INVALID_TYPE',
                          params: [ 'null', 'object' ],
                          message: 'Expected type null but found type object',
                          path: [ 0 ],
                          title: '{"path":["definitions","Schema","properties","columns","items"],"position":{"line":385,"column":20},"url":".\\\\Tables.json","directives":{}}'
                        }
                      ]
                    },
                    {
                      code: 'INVALID_TYPE',
                      params: [ 'null', 'array' ],
                      message: 'Expected type null but found type array',
                      path: [ 'columns' ],
                      title: '{"path":["definitions","Schema","properties","columns"],"position":{"line":383,"column":20},"url":".\\\\Tables.json","directives":{}}'
                    }
                  ]
                },
                {
                  code: 'INVALID_TYPE',
                  params: [ 'null', 'object' ],
                  message: 'Expected type null but found type object',
                  path: [ 'schema' ],
                  title: '{"path":["definitions","TableProperties","properties","schema"],"position":{"line":466,"column":19},"url":".\\\\Tables.json","directives":{}}'
                }
              ]
            },
            {
              code: 'INVALID_TYPE',
              params: [ 'null', 'object' ],
              message: 'Expected type null but found type object',
              path: [ 'properties' ],
              title: '{"path":["definitions","Table","properties","properties"],"position":{"line":488,"column":23},"url":".\\\\Tables.json","directives":{}}'
            }
          ]
        }
      ],
      in: 'body',
      message: 'Invalid parameter (parameters): Value failed JSON Schema validation',
      name: 'parameters',
      path: [ 'parameters', 'parameters' ],
      schemaPath: '#/paths/~1subscriptions~1{subscriptionId}~1resourcegroups~1{resourceGroupName}~1providers~1Microsoft.OperationalInsights~1workspaces~1{workspaceName}~1tables~1{tableName}/put/parameters/5',
      title: '{"path":["parameters","parameters"],"position":{"line":8,"column":19},"url":"examples/TableCreateUpdate_SchemaMetaData.json"}'
    }
  ],
  level: '\u001b[31merror\u001b[39m'
}
{
  '0': {
    code: 'RESPONSE_VALIDATION_ERROR',
    id: 'OAV108',
    message: 'Found errors in validating the response with statusCode "200" for x-ms-example "TableCreate_SchemaMetadaChange" in operation "Tables_Upsert".',
    innerErrors: [
      {
        code: 'RESPONSE_STATUS_CODE_NOT_IN_EXAMPLE',
        id: 'OAV111',
        message: 'Following response status codes "200" for operation "Tables_Upsert" were present in the swagger spec, however they were not present in x-ms-examples. Please provide them.',
        level: 'error',
        [Symbol(level)]: 'error',
        [Symbol(message)]: '{"code":"RESPONSE_STATUS_CODE_NOT_IN_EXAMPLE","id":"OAV111","message":"Following response status codes \\"200\\" for operation \\"Tables_Upsert\\" were present in the swagger spec, however they were not present in x-ms-examples. Please provide them.","level":"error"}'
      }
    ]
  },
  level: '\u001b[31merror\u001b[39m',
  message: 'Found errors in validating the response with statusCode "200" for x-ms-example "TableCreate_SchemaMetadaChange" in operation "Tables_Upsert".:\n'
}
{
  '0': {
    code: 'RESPONSE_VALIDATION_ERROR',
    id: 'OAV108',
    message: 'Found errors in validating the response with statusCode "202" for x-ms-example "TableCreate_SchemaMetadaChange" in operation "Tables_Upsert".',
    innerErrors: [
      {
        code: 'RESPONSE_SCHEMA_NOT_IN_SPEC',
        id: 'OAV113',
        message: 'Response statusCode "202" for operation "Tables_Upsert" has response body provided in the example, however the response does not have a "schema" defined in the swagger spec.',
        level: 'error',
        [Symbol(level)]: 'error',
        [Symbol(message)]: '{"code":"RESPONSE_SCHEMA_NOT_IN_SPEC","id":"OAV113","message":"Response statusCode \\"202\\" for operation \\"Tables_Upsert\\" has response body provided in the example, however the response does not have a \\"schema\\" defined in the swagger spec.","level":"error"}'
      }
    ]
  },
  level: '\u001b[31merror\u001b[39m',
  message: 'Found errors in validating the response with statusCode "202" for x-ms-example "TableCreate_SchemaMetadaChange" in operation "Tables_Upsert".:\n'
}
{
  message: 'Request parameters for x-ms-example "Tables_Upsert_MaximumSet_Gen" in operation "Tables_Upsert" is valid.',
  level: '\u001b[32minfo\u001b[39m'
}
{
  '0': {
    code: 'RESPONSE_VALIDATION_ERROR',
    id: 'OAV108',
    message: 'Found errors in validating the response with statusCode "200" for x-ms-example "Tables_Upsert_MaximumSet_Gen" in operation "Tables_Upsert".',
    innerErrors: [
      {
        code: 'INVALID_RESPONSE_BODY',
        errors: [
          {
            code: 'ANY_OF_MISSING',
            params: [],
            message: "Data does not match any schemas from 'anyOf'",
            path: [ 'properties' ],
            title: '#/definitions/Table/properties/properties',
            inner: [
              {
                code: 'ANY_OF_MISSING',
                params: [],
                message: "Data does not match any schemas from 'anyOf'",
                path: [ 'properties', 'schema' ],
                title: '#/definitions/TableProperties/properties/schema',
                inner: [
                  {
                    code: 'ANY_OF_MISSING',
                    params: [],
                    message: "Data does not match any schemas from 'anyOf'",
                    path: [ 'schema', 'standardColumns' ],
                    title: '#/definitions/Schema/properties/standardColumns',
                    inner: [
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 0 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 0, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'guid' ],
                                message: 'Enum does not match case for: guid',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 0 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 1 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 1, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'string' ],
                                message: 'Enum does not match case for: string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 1 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 2 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 2, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'dateTime' ],
                                message: 'Enum does not match case for: dateTime',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 2 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 3 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 3, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'string' ],
                                message: 'Enum does not match case for: string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 3 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 4 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 4, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'string' ],
                                message: 'Enum does not match case for: string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 4 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 5 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 5, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'string' ],
                                message: 'Enum does not match case for: string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 5 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 6 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 6, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 6 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 7 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 7, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 7 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 8 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 8, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 8 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 9 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 9, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 9 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 10 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 10, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 10 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 11 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 11, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 11 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 12 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 12, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 12 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 13 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 13, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 13 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 14 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 14, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 14 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                      },
                      {
                        code: 'INVALID_TYPE',
                        params: [ 'null', 'array' ],
                        message: 'Expected type null but found type array',
                        path: [ 'standardColumns' ],
                        title: '#/definitions/Schema/properties/standardColumns',
                        position: { line: 390, column: 28 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                      }
                    ],
                    position: { line: 390, column: 28 },
                    url: '.\\Tables.json',
                    directives: {},
                    jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                  },
                  {
                    code: 'INVALID_TYPE',
                    params: [ 'null', 'object' ],
                    message: 'Expected type null but found type object',
                    path: [ 'schema' ],
                    title: '#/definitions/TableProperties/properties/schema',
                    position: { line: 466, column: 19 },
                    url: '.\\Tables.json',
                    directives: {},
                    jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
                  }
                ],
                position: { line: 466, column: 19 },
                url: '.\\Tables.json',
                directives: {},
                jsonPosition: { line: 36, column: 21 },
                jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
              },
              {
                code: 'INVALID_TYPE',
                params: [ 'null', 'object' ],
                message: 'Expected type null but found type object',
                path: [ 'properties' ],
                title: '#/definitions/Table/properties/properties',
                position: { line: 488, column: 23 },
                url: '.\\Tables.json',
                directives: {},
                jsonPosition: { line: 31, column: 23 },
                jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
              }
            ],
            position: { line: 488, column: 23 },
            url: '.\\Tables.json',
            directives: {},
            jsonPosition: { line: 31, column: 23 },
            jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json'
          }
        ],
        message: "Invalid body: Data does not match any schemas from 'anyOf'",
        path: []
      }
    ]
  },
  level: '\u001b[31merror\u001b[39m',
  message: 'Found errors in validating the response with statusCode "200" for x-ms-example "Tables_Upsert_MaximumSet_Gen" in operation "Tables_Upsert".:\n'
}
{
  message: 'Response with statusCode "202" for x-ms-example "Tables_Upsert_MaximumSet_Gen" in operation "Tables_Upsert" is valid.',
  level: '\u001b[32minfo\u001b[39m'
}
{
  message: 'the validation raised below error:',
  level: '\u001b[31merror\u001b[39m'
}
{
  message: [
    {
      operationId: 'Tables_Upsert',
      scenario: 'TableCreate_MetaDataChange',
      source: 'response',
      responseCode: '200',
      severity: 1,
      code: 'ENUM_CASE_MISMATCH',
      details: {
        code: 'ENUM_CASE_MISMATCH',
        params: [ 'guid' ],
        message: 'Enum does not match case for: guid',
        path: '$/properties/schema/standardColumns/0/type',
        title: '#/definitions/Column/properties/type',
        description: "Coulmn's data type.",
        position: { line: 315, column: 17 },
        url: '.\\Tables.json',
        directives: {},
        jsonUrl: 'examples/TableCreateUpdate_MetaData.json',
        jsonPath: "$['properties']['schema']['standardColumns'][0]['type']"
      }
    },
    {
      operationId: 'Tables_Upsert',
      scenario: 'TableCreate_MetaDataChange',
      source: 'response',
      responseCode: '200',
      severity: 1,
      code: 'ENUM_CASE_MISMATCH',
      details: {
        code: 'ENUM_CASE_MISMATCH',
        params: [ 'string' ],
        message: 'Enum does not match case for: string',
        path: '$/properties/schema/standardColumns/1/type',
        title: '#/definitions/Column/properties/type',
        description: "Coulmn's data type.",
        position: { line: 315, column: 17 },
        url: '.\\Tables.json',
        directives: {},
        jsonUrl: 'examples/TableCreateUpdate_MetaData.json',
        jsonPath: "$['properties']['schema']['standardColumns'][1]['type']",
        similarPaths: [
          '$/properties/schema/standardColumns/3/type',
          '$/properties/schema/standardColumns/4/type',
          '$/properties/schema/standardColumns/5/type'
        ],
        similarJsonPaths: [
          "$['properties']['schema']['standardColumns'][3]['type']",
          "$['properties']['schema']['standardColumns'][4]['type']",
          "$['properties']['schema']['standardColumns'][5]['type']"
        ]
      }
    },
    {
      operationId: 'Tables_Upsert',
      scenario: 'TableCreate_MetaDataChange',
      source: 'response',
      responseCode: '200',
      severity: 1,
      code: 'ENUM_CASE_MISMATCH',
      details: {
        code: 'ENUM_CASE_MISMATCH',
        params: [ 'dateTime' ],
        message: 'Enum does not match case for: dateTime',
        path: '$/properties/schema/standardColumns/2/type',
        title: '#/definitions/Column/properties/type',
        description: "Coulmn's data type.",
        position: { line: 315, column: 17 },
        url: '.\\Tables.json',
        directives: {},
        jsonUrl: 'examples/TableCreateUpdate_MetaData.json',
        jsonPath: "$['properties']['schema']['standardColumns'][2]['type']"
      }
    },
    {
      operationId: 'Tables_Upsert',
      scenario: 'TableCreate_MetaDataChange',
      source: 'response',
      responseCode: '200',
      severity: 1,
      code: 'ENUM_CASE_MISMATCH',
      details: {
        code: 'ENUM_CASE_MISMATCH',
        params: [ 'int' ],
        message: 'Enum does not match case for: int',
        path: '$/properties/schema/standardColumns/6/type',
        title: '#/definitions/Column/properties/type',
        description: "Coulmn's data type.",
        position: { line: 315, column: 17 },
        url: '.\\Tables.json',
        directives: {},
        jsonUrl: 'examples/TableCreateUpdate_MetaData.json',
        jsonPath: "$['properties']['schema']['standardColumns'][6]['type']",
        similarPaths: [
          '$/properties/schema/standardColumns/7/type',
          '$/properties/schema/standardColumns/8/type',
          '$/properties/schema/standardColumns/9/type',
          '$/properties/schema/standardColumns/10/type',
          '$/properties/schema/standardColumns/11/type',
          '$/properties/schema/standardColumns/12/type',
          '$/properties/schema/standardColumns/13/type',
          '$/properties/schema/standardColumns/14/type'
        ],
        similarJsonPaths: [
          "$['properties']['schema']['standardColumns'][7]['type']",
          "$['properties']['schema']['standardColumns'][8]['type']",
          "$['properties']['schema']['standardColumns'][9]['type']",
          "$['properties']['schema']['standardColumns'][10]['type']",
          "$['properties']['schema']['standardColumns'][11]['type']",
          "$['properties']['schema']['standardColumns'][12]['type']",
          "$['properties']['schema']['standardColumns'][13]['type']",
          "$['properties']['schema']['standardColumns'][14]['type']"
        ]
      }
    },
    {
      operationId: 'Tables_Upsert',
      scenario: 'TableCreate_MetaDataChange',
      source: 'response',
      responseCode: '202',
      severity: 0,
      code: 'RESPONSE_STATUS_CODE_NOT_IN_EXAMPLE',
      details: {
        code: 'RESPONSE_STATUS_CODE_NOT_IN_EXAMPLE',
        id: 'OAV111',
        message: 'Following response status codes "202" for operation "Tables_Upsert" were present in the swagger spec, however they were not present in x-ms-examples. Please provide them.',
        level: 'error',
        [Symbol(level)]: 'error',
        [Symbol(message)]: '{"code":"RESPONSE_STATUS_CODE_NOT_IN_EXAMPLE","id":"OAV111","message":"Following response status codes \\"202\\" for operation \\"Tables_Upsert\\" were present in the swagger spec, however they were not present in x-ms-examples. Please provide them.","level":"error"}'
      }
    },
    {
      operationId: 'Tables_Upsert',
      scenario: 'TableCreate_SchemaChange',
      source: 'request',
      responseCode: 'ALL',
      severity: 1,
      code: 'ENUM_CASE_MISMATCH',
      details: {
        code: 'ENUM_CASE_MISMATCH',
        params: [ 'guid' ],
        message: 'Enum does not match case for: guid',
        path: '$/properties/schema/columns/0/type',
        title: '#/definitions/Column/properties/type',
        description: "Coulmn's data type.",
        jsonPath: "$['properties']['schema']['columns'][0]['type']",
        position: { line: 315, column: 17 },
        url: '.\\Tables.json',
        directives: {}
      }
    },
    {
      operationId: 'Tables_Upsert',
      scenario: 'TableCreate_SchemaChange',
      source: 'response',
      responseCode: '200',
      severity: 1,
      code: 'ENUM_CASE_MISMATCH',
      details: {
        code: 'ENUM_CASE_MISMATCH',
        params: [ 'guid' ],
        message: 'Enum does not match case for: guid',
        path: '$/properties/schema/columns/0/type',
        title: '#/definitions/Column/properties/type',
        description: "Coulmn's data type.",
        position: { line: 315, column: 17 },
        url: '.\\Tables.json',
        directives: {},
        jsonUrl: 'examples/TableCreateUpdate_Schema.json',
        jsonPath: "$['properties']['schema']['columns'][0]['type']"
      }
    },
    {
      operationId: 'Tables_Upsert',
      scenario: 'TableCreate_SchemaChange',
      source: 'response',
      responseCode: '200',
      severity: 1,
      code: 'ENUM_CASE_MISMATCH',
      details: {
        code: 'ENUM_CASE_MISMATCH',
        params: [ 'guid' ],
        message: 'Enum does not match case for: guid',
        path: '$/properties/schema/standardColumns/0/type',
        title: '#/definitions/Column/properties/type',
        description: "Coulmn's data type.",
        position: { line: 315, column: 17 },
        url: '.\\Tables.json',
        directives: {},
        jsonUrl: 'examples/TableCreateUpdate_Schema.json',
        jsonPath: "$['properties']['schema']['standardColumns'][0]['type']"
      }
    },
    {
      operationId: 'Tables_Upsert',
      scenario: 'TableCreate_SchemaChange',
      source: 'response',
      responseCode: '200',
      severity: 1,
      code: 'ENUM_CASE_MISMATCH',
      details: {
        code: 'ENUM_CASE_MISMATCH',
        params: [ 'string' ],
        message: 'Enum does not match case for: string',
        path: '$/properties/schema/standardColumns/1/type',
        title: '#/definitions/Column/properties/type',
        description: "Coulmn's data type.",
        position: { line: 315, column: 17 },
        url: '.\\Tables.json',
        directives: {},
        jsonUrl: 'examples/TableCreateUpdate_Schema.json',
        jsonPath: "$['properties']['schema']['standardColumns'][1]['type']",
        similarPaths: [
          '$/properties/schema/standardColumns/3/type',
          '$/properties/schema/standardColumns/4/type',
          '$/properties/schema/standardColumns/5/type'
        ],
        similarJsonPaths: [
          "$['properties']['schema']['standardColumns'][3]['type']",
          "$['properties']['schema']['standardColumns'][4]['type']",
          "$['properties']['schema']['standardColumns'][5]['type']"
        ]
      }
    },
    {
      operationId: 'Tables_Upsert',
      scenario: 'TableCreate_SchemaChange',
      source: 'response',
      responseCode: '200',
      severity: 1,
      code: 'ENUM_CASE_MISMATCH',
      details: {
        code: 'ENUM_CASE_MISMATCH',
        params: [ 'dateTime' ],
        message: 'Enum does not match case for: dateTime',
        path: '$/properties/schema/standardColumns/2/type',
        title: '#/definitions/Column/properties/type',
        description: "Coulmn's data type.",
        position: { line: 315, column: 17 },
        url: '.\\Tables.json',
        directives: {},
        jsonUrl: 'examples/TableCreateUpdate_Schema.json',
        jsonPath: "$['properties']['schema']['standardColumns'][2]['type']"
      }
    },
    {
      operationId: 'Tables_Upsert',
      scenario: 'TableCreate_SchemaChange',
      source: 'response',
      responseCode: '200',
      severity: 1,
      code: 'ENUM_CASE_MISMATCH',
      details: {
        code: 'ENUM_CASE_MISMATCH',
        params: [ 'int' ],
        message: 'Enum does not match case for: int',
        path: '$/properties/schema/standardColumns/6/type',
        title: '#/definitions/Column/properties/type',
        description: "Coulmn's data type.",
        position: { line: 315, column: 17 },
        url: '.\\Tables.json',
        directives: {},
        jsonUrl: 'examples/TableCreateUpdate_Schema.json',
        jsonPath: "$['properties']['schema']['standardColumns'][6]['type']",
        similarPaths: [
          '$/properties/schema/standardColumns/7/type',
          '$/properties/schema/standardColumns/8/type',
          '$/properties/schema/standardColumns/9/type',
          '$/properties/schema/standardColumns/10/type',
          '$/properties/schema/standardColumns/11/type',
          '$/properties/schema/standardColumns/12/type',
          '$/properties/schema/standardColumns/13/type',
          '$/properties/schema/standardColumns/14/type'
        ],
        similarJsonPaths: [
          "$['properties']['schema']['standardColumns'][7]['type']",
          "$['properties']['schema']['standardColumns'][8]['type']",
          "$['properties']['schema']['standardColumns'][9]['type']",
          "$['properties']['schema']['standardColumns'][10]['type']",
          "$['properties']['schema']['standardColumns'][11]['type']",
          "$['properties']['schema']['standardColumns'][12]['type']",
          "$['properties']['schema']['standardColumns'][13]['type']",
          "$['properties']['schema']['standardColumns'][14]['type']"
        ]
      }
    },
    {
      operationId: 'Tables_Upsert',
      scenario: 'TableCreate_SchemaChange',
      source: 'response',
      responseCode: '202',
      severity: 0,
      code: 'RESPONSE_STATUS_CODE_NOT_IN_EXAMPLE',
      details: {
        code: 'RESPONSE_STATUS_CODE_NOT_IN_EXAMPLE',
        id: 'OAV111',
        message: 'Following response status codes "202" for operation "Tables_Upsert" were present in the swagger spec, however they were not present in x-ms-examples. Please provide them.',
        level: 'error',
        [Symbol(level)]: 'error',
        [Symbol(message)]: '{"code":"RESPONSE_STATUS_CODE_NOT_IN_EXAMPLE","id":"OAV111","message":"Following response status codes \\"202\\" for operation \\"Tables_Upsert\\" were present in the swagger spec, however they were not present in x-ms-examples. Please provide them.","level":"error"}'
      }
    },
    {
      operationId: 'Tables_Upsert',
      scenario: 'TableCreate_SchemaMetadaChange',
      source: 'request',
      responseCode: 'ALL',
      severity: 1,
      code: 'ENUM_CASE_MISMATCH',
      details: {
        code: 'ENUM_CASE_MISMATCH',
        params: [ 'guid' ],
        message: 'Enum does not match case for: guid',
        path: '$/properties/schema/columns/0/type',
        title: '#/definitions/Column/properties/type',
        description: "Coulmn's data type.",
        jsonPath: "$['properties']['schema']['columns'][0]['type']",
        position: { line: 315, column: 17 },
        url: '.\\Tables.json',
        directives: {}
      }
    },
    {
      operationId: 'Tables_Upsert',
      scenario: 'TableCreate_SchemaMetadaChange',
      source: 'response',
      responseCode: '200',
      severity: 0,
      code: 'RESPONSE_STATUS_CODE_NOT_IN_EXAMPLE',
      details: {
        code: 'RESPONSE_STATUS_CODE_NOT_IN_EXAMPLE',
        id: 'OAV111',
        message: 'Following response status codes "200" for operation "Tables_Upsert" were present in the swagger spec, however they were not present in x-ms-examples. Please provide them.',
        level: 'error',
        [Symbol(level)]: 'error',
        [Symbol(message)]: '{"code":"RESPONSE_STATUS_CODE_NOT_IN_EXAMPLE","id":"OAV111","message":"Following response status codes \\"200\\" for operation \\"Tables_Upsert\\" were present in the swagger spec, however they were not present in x-ms-examples. Please provide them.","level":"error"}'
      }
    },
    {
      operationId: 'Tables_Upsert',
      scenario: 'TableCreate_SchemaMetadaChange',
      source: 'response',
      responseCode: '202',
      severity: 0,
      code: 'RESPONSE_SCHEMA_NOT_IN_SPEC',
      details: {
        code: 'RESPONSE_SCHEMA_NOT_IN_SPEC',
        id: 'OAV113',
        message: 'Response statusCode "202" for operation "Tables_Upsert" has response body provided in the example, however the response does not have a "schema" defined in the swagger spec.',
        level: 'error',
        [Symbol(level)]: 'error',
        [Symbol(message)]: '{"code":"RESPONSE_SCHEMA_NOT_IN_SPEC","id":"OAV113","message":"Response statusCode \\"202\\" for operation \\"Tables_Upsert\\" has response body provided in the example, however the response does not have a \\"schema\\" defined in the swagger spec.","level":"error"}'
      }
    },
    {
      operationId: 'Tables_Upsert',
      scenario: 'Tables_Upsert_MaximumSet_Gen',
      source: 'response',
      responseCode: '200',
      severity: 1,
      code: 'ENUM_CASE_MISMATCH',
      details: {
        code: 'ENUM_CASE_MISMATCH',
        params: [ 'guid' ],
        message: 'Enum does not match case for: guid',
        path: '$/properties/schema/standardColumns/0/type',
        title: '#/definitions/Column/properties/type',
        description: "Coulmn's data type.",
        position: { line: 315, column: 17 },
        url: '.\\Tables.json',
        directives: {},
        jsonPosition: { line: 204, column: 17 },
        jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json',
        jsonPath: "$['properties']['schema']['standardColumns'][0]['type']"
      }
    },
    {
      operationId: 'Tables_Upsert',
      scenario: 'Tables_Upsert_MaximumSet_Gen',
      source: 'response',
      responseCode: '200',
      severity: 1,
      code: 'ENUM_CASE_MISMATCH',
      details: {
        code: 'ENUM_CASE_MISMATCH',
        params: [ 'string' ],
        message: 'Enum does not match case for: string',
        path: '$/properties/schema/standardColumns/1/type',
        title: '#/definitions/Column/properties/type',
        description: "Coulmn's data type.",
        position: { line: 315, column: 17 },
        url: '.\\Tables.json',
        directives: {},
        jsonPosition: { line: 204, column: 17 },
        jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json',
        jsonPath: "$['properties']['schema']['standardColumns'][1]['type']",
        similarPaths: [
          '$/properties/schema/standardColumns/3/type',
          '$/properties/schema/standardColumns/4/type',
          '$/properties/schema/standardColumns/5/type'
        ],
        similarJsonPaths: [
          "$['properties']['schema']['standardColumns'][3]['type']",
          "$['properties']['schema']['standardColumns'][4]['type']",
          "$['properties']['schema']['standardColumns'][5]['type']"
        ]
      }
    },
    {
      operationId: 'Tables_Upsert',
      scenario: 'Tables_Upsert_MaximumSet_Gen',
      source: 'response',
      responseCode: '200',
      severity: 1,
      code: 'ENUM_CASE_MISMATCH',
      details: {
        code: 'ENUM_CASE_MISMATCH',
        params: [ 'dateTime' ],
        message: 'Enum does not match case for: dateTime',
        path: '$/properties/schema/standardColumns/2/type',
        title: '#/definitions/Column/properties/type',
        description: "Coulmn's data type.",
        position: { line: 315, column: 17 },
        url: '.\\Tables.json',
        directives: {},
        jsonPosition: { line: 204, column: 17 },
        jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json',
        jsonPath: "$['properties']['schema']['standardColumns'][2]['type']"
      }
    },
    {
      operationId: 'Tables_Upsert',
      scenario: 'Tables_Upsert_MaximumSet_Gen',
      source: 'response',
      responseCode: '200',
      severity: 1,
      code: 'ENUM_CASE_MISMATCH',
      details: {
        code: 'ENUM_CASE_MISMATCH',
        params: [ 'int' ],
        message: 'Enum does not match case for: int',
        path: '$/properties/schema/standardColumns/6/type',
        title: '#/definitions/Column/properties/type',
        description: "Coulmn's data type.",
        position: { line: 315, column: 17 },
        url: '.\\Tables.json',
        directives: {},
        jsonPosition: { line: 204, column: 17 },
        jsonUrl: 'examples/Tables_Upsert_MaximumSet_Gen.json',
        jsonPath: "$['properties']['schema']['standardColumns'][6]['type']",
        similarPaths: [
          '$/properties/schema/standardColumns/7/type',
          '$/properties/schema/standardColumns/8/type',
          '$/properties/schema/standardColumns/9/type',
          '$/properties/schema/standardColumns/10/type',
          '$/properties/schema/standardColumns/11/type',
          '$/properties/schema/standardColumns/12/type',
          '$/properties/schema/standardColumns/13/type',
          '$/properties/schema/standardColumns/14/type'
        ],
        similarJsonPaths: [
          "$['properties']['schema']['standardColumns'][7]['type']",
          "$['properties']['schema']['standardColumns'][8]['type']",
          "$['properties']['schema']['standardColumns'][9]['type']",
          "$['properties']['schema']['standardColumns'][10]['type']",
          "$['properties']['schema']['standardColumns'][11]['type']",
          "$['properties']['schema']['standardColumns'][12]['type']",
          "$['properties']['schema']['standardColumns'][13]['type']",
          "$['properties']['schema']['standardColumns'][14]['type']"
        ]
      }
    }
  ],
  level: '\u001b[31merror\u001b[39m'
}
start generated example for Tables_Update, rule:MaximumSet
example file path: C:\one\Mgmt\azure-rest-api-specs\specification\operationalinsights\resource-manager\Microsoft.OperationalInsights\preview\2021-03-01-privatepreview\examples\Tables_Update_MaximumSet_Gen.json
{ message: 'extractResponse', level: '\u001b[32minfo\u001b[39m' }
{
  message: {
    parameters: {
      subscriptionId: '00000000-0000-0000-0000-00000000000',
      resourceGroupName: 'rgTables',
      workspaceName: 'oiautorest6685',
      'api-version': '2020-10-01',
      tableName: 'AzureNetworkFlow',
      parameters: {
        properties: {
          retentionInDays: 45,
          isTroubleshootEnabled: true,
          schema: {
            displayName: 'aaaaaaaaaaaa',
            description: 'a',
            columns: [
              {
                name: 'aaaaaaaa',
                type: 'String',
                dataTypeHint: 'URI',
                displayName: 'aaaaaaaaaaaaaaaaaaaaaaaaaaa',
                description: 'a'
              }
            ]
          }
        }
      }
    },
    responses: {
      '200': {
        headers: undefined,
        body: {
          properties: {
            retentionInDays: 45,
            isTroubleshootingAllowed: true,
            isTroubleshootEnabled: true,
            lastTroubleshootDate: 'aaaaaaa',
            schema: {
              name: 'AzureNetworkFlow',
              displayName: 'aaaaaaaaaaaa',
              description: 'a',
              columns: [
                {
                  name: 'aaaaaaaa',
                  type: 'String',
                  dataTypeHint: 'URI',
                  displayName: 'aaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  description: 'a',
                  isDefaultDisplay: true,
                  isHidden: true
                }
              ],
              standardColumns: [
                {
                  isHidden: true,
                  name: 'TenantId',
                  type: 'guid',
                  dataTypeHint: 'URI',
                  displayName: 'aaaaaaaaaaaaaa',
                  description: 'aaaaaaaaa',
                  isDefaultDisplay: true
                },
                {
                  isHidden: true,
                  name: 'SourceSystem',
                  type: 'string',
                  dataTypeHint: 'URI',
                  displayName: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  description: 'aaaaaaaaaaaaaa',
                  isDefaultDisplay: true
                },
                {
                  isHidden: true,
                  name: 'TimeGenerated',
                  type: 'dateTime',
                  dataTypeHint: 'URI',
                  displayName: 'aaaaaaaaaaaaaaaaaaaaaa',
                  description: 'aaaaaaaaaaaaaaaaa',
                  isDefaultDisplay: true
                },
                {
                  isHidden: true,
                  name: 'AgentID',
                  type: 'string',
                  dataTypeHint: 'URI',
                  displayName: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  description: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  isDefaultDisplay: true
                },
                {
                  isHidden: true,
                  name: 'SourceIP',
                  type: 'string',
                  dataTypeHint: 'URI',
                  displayName: 'aaaaaaa',
                  description: 'aaaaaaaaaaaaaaaaaaaaaaaa',
                  isDefaultDisplay: true
                },
                {
                  isHidden: true,
                  name: 'Protocol',
                  type: 'string',
                  dataTypeHint: 'URI',
                  displayName: 'aaaaaaaaaaaaaaa',
                  description: 'aaaaaaa',
                  isDefaultDisplay: true
                },
                {
                  isHidden: true,
                  name: 'SourcePort',
                  type: 'int',
                  dataTypeHint: 'URI',
                  displayName: 'aaaaaaaaaaaaaaaaaaaaa',
                  description: 'aaaaaaaaa',
                  isDefaultDisplay: true
                },
                {
                  isHidden: true,
                  name: 'DestinationPort',
                  type: 'int',
                  dataTypeHint: 'URI',
                  displayName: 'aaaaaaaaaaaaaaaaaaaaaaaa',
                  description: 'aaaaaaaaaaaaaaaaaa',
                  isDefaultDisplay: true
                },
                {
                  isHidden: true,
                  name: 'TcpFlags',
                  type: 'int',
                  dataTypeHint: 'URI',
                  displayName: 'aaaaaaaaaaaaaaaa',
                  description: 'aaaaaaaaaaaa',
                  isDefaultDisplay: true
                },
                {
                  isHidden: true,
                  name: 'Packets',
                  type: 'int',
                  dataTypeHint: 'URI',
                  displayName: 'aa',
                  description: 'aaaaaaaaaaaaaaaaaaaaaaa',
                  isDefaultDisplay: true
                },
                {
                  isHidden: true,
                  name: 'Bytes',
                  type: 'int',
                  dataTypeHint: 'URI',
                  displayName: 'aaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  description: 'a',
                  isDefaultDisplay: true
                },
                {
                  isHidden: true,
                  name: 'BytesOut',
                  type: 'int',
                  dataTypeHint: 'URI',
                  displayName: 'aaaaaaaaaaa',
                  description: 'aaaaaaaaa',
                  isDefaultDisplay: true
                },
                {
                  isHidden: true,
                  name: 'DurationInMs',
                  type: 'int',
                  dataTypeHint: 'URI',
                  displayName: 'aaaaaaaaaaaaaaa',
                  description: 'aaaaaaaaaa',
                  isDefaultDisplay: true
                },
                {
                  isHidden: true,
                  name: 'RstCount',
                  type: 'int',
                  dataTypeHint: 'URI',
                  displayName: 'aaaaaaaaaaaa',
                  description: 'aaaaaaaaaaaaaa',
                  isDefaultDisplay: true
                },
                {
                  isHidden: true,
                  name: 'MaxSampleRtt',
                  type: 'int',
                  dataTypeHint: 'URI',
                  displayName: 'aaaaaaaaaaaaaaa',
                  description: 'aaaaaaaaaaaaaaaaaaa',
                  isDefaultDisplay: true
                }
              ],
              categories: [ 'aaaaaaaaaaaaaaaaaa' ],
              labels: [ 'aaaaaaaaaaaaaaaaaaaaaaaaaaa' ],
              source: 'Microsoft',
              solutions: [ 'LogManagement' ],
              isTroubleshootingAllowed: true
            },
            provisioningState: 'Succeeded'
          },
          id: '/subscriptions/00000000-0000-0000-0000-00000000000/resourcegroups/oiautorest6685/providers/Microsoft.OperationalInsights/workspaces/oiautorest6685/tables/AzureNetworkFlow',
          name: 'AzureNetworkFlow',
          type: 'aaaaaaaaaaaaaa'
        }
      },
      '202': { headers: undefined, body: undefined }
    }
  },
  level: '\u001b[32minfo\u001b[39m'
}
{
  message: 'start validating generated example for Tables_Update',
  level: '\u001b[32minfo\u001b[39m'
}
{
  message: 'Validating "examples" and "x-ms-examples" in  .\\Tables.json:\n',
  level: '\u001b[32minfo\u001b[39m'
}
{
  code: 'RESPONSE_STATUS_CODE_NOT_IN_EXAMPLE',
  id: 'OAV111',
  message: 'Following response status codes "202" for operation "Tables_Update" were present in the swagger spec, however they were not present in x-ms-examples. Please provide them.',
  level: '\u001b[31merror\u001b[39m'
}
{
  code: 'RESPONSE_STATUS_CODE_NOT_IN_EXAMPLE',
  id: 'OAV111',
  message: 'Following response status codes "202" for operation "Tables_Update" were present in the swagger spec, however they were not present in x-ms-examples. Please provide them.',
  level: '\u001b[31merror\u001b[39m'
}
{
  code: 'RESPONSE_SCHEMA_NOT_IN_SPEC',
  id: 'OAV113',
  message: 'Response statusCode "202" for operation "Tables_Update" has response body provided in the example, however the response does not have a "schema" defined in the swagger spec.',
  level: '\u001b[31merror\u001b[39m'
}
{
  code: 'RESPONSE_STATUS_CODE_NOT_IN_EXAMPLE',
  id: 'OAV111',
  message: 'Following response status codes "200" for operation "Tables_Update" were present in the swagger spec, however they were not present in x-ms-examples. Please provide them.',
  level: '\u001b[31merror\u001b[39m'
}
{
  message: 'Request parameters for x-ms-example "TableCreate_MetaDataChange" in operation "Tables_Update" is valid.',
  level: '\u001b[32minfo\u001b[39m'
}
{
  '0': {
    code: 'RESPONSE_VALIDATION_ERROR',
    id: 'OAV108',
    message: 'Found errors in validating the response with statusCode "200" for x-ms-example "TableCreate_MetaDataChange" in operation "Tables_Update".',
    innerErrors: [
      {
        code: 'INVALID_RESPONSE_BODY',
        errors: [
          {
            code: 'ANY_OF_MISSING',
            params: [],
            message: "Data does not match any schemas from 'anyOf'",
            path: [ 'properties' ],
            title: '#/definitions/Table/properties/properties',
            inner: [
              {
                code: 'ANY_OF_MISSING',
                params: [],
                message: "Data does not match any schemas from 'anyOf'",
                path: [ 'properties', 'schema' ],
                title: '#/definitions/TableProperties/properties/schema',
                inner: [
                  {
                    code: 'ANY_OF_MISSING',
                    params: [],
                    message: "Data does not match any schemas from 'anyOf'",
                    path: [ 'schema', 'standardColumns' ],
                    title: '#/definitions/Schema/properties/standardColumns',
                    inner: [
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 0 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 0, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'guid' ],
                                message: 'Enum does not match case for: guid',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 0 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 1 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 1, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'string' ],
                                message: 'Enum does not match case for: string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 1 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 2 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 2, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'dateTime' ],
                                message: 'Enum does not match case for: dateTime',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 2 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 3 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 3, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'string' ],
                                message: 'Enum does not match case for: string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 3 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 4 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 4, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'string' ],
                                message: 'Enum does not match case for: string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 4 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 5 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 5, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'string' ],
                                message: 'Enum does not match case for: string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 5 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 6 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 6, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 6 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 7 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 7, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 7 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 8 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 8, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 8 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 9 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 9, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 9 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 10 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 10, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 10 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 11 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 11, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 11 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 12 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 12, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 12 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 13 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 13, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 13 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 14 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 14, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 14 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                      },
                      {
                        code: 'INVALID_TYPE',
                        params: [ 'null', 'array' ],
                        message: 'Expected type null but found type array',
                        path: [ 'standardColumns' ],
                        title: '#/definitions/Schema/properties/standardColumns',
                        position: { line: 390, column: 28 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                      }
                    ],
                    position: { line: 390, column: 28 },
                    url: '.\\Tables.json',
                    directives: {},
                    jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                  },
                  {
                    code: 'INVALID_TYPE',
                    params: [ 'null', 'object' ],
                    message: 'Expected type null but found type object',
                    path: [ 'schema' ],
                    title: '#/definitions/TableProperties/properties/schema',
                    position: { line: 466, column: 19 },
                    url: '.\\Tables.json',
                    directives: {},
                    jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
                  }
                ],
                position: { line: 466, column: 19 },
                url: '.\\Tables.json',
                directives: {},
                jsonPosition: { line: 18, column: 23 },
                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
              },
              {
                code: 'INVALID_TYPE',
                params: [ 'null', 'object' ],
                message: 'Expected type null but found type object',
                path: [ 'properties' ],
                title: '#/definitions/Table/properties/properties',
                position: { line: 488, column: 23 },
                url: '.\\Tables.json',
                directives: {},
                jsonPosition: { line: 17, column: 25 },
                jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
              }
            ],
            position: { line: 488, column: 23 },
            url: '.\\Tables.json',
            directives: {},
            jsonPosition: { line: 17, column: 25 },
            jsonUrl: 'examples/TableCreateUpdate_MetaData.json'
          }
        ],
        message: "Invalid body: Data does not match any schemas from 'anyOf'",
        path: []
      }
    ]
  },
  level: '\u001b[31merror\u001b[39m',
  message: 'Found errors in validating the response with statusCode "200" for x-ms-example "TableCreate_MetaDataChange" in operation "Tables_Update".:\n'
}
{
  '0': {
    code: 'RESPONSE_VALIDATION_ERROR',
    id: 'OAV108',
    message: 'Found errors in validating the response with statusCode "202" for x-ms-example "TableCreate_MetaDataChange" in operation "Tables_Update".',
    innerErrors: [
      {
        code: 'RESPONSE_STATUS_CODE_NOT_IN_EXAMPLE',
        id: 'OAV111',
        message: 'Following response status codes "202" for operation "Tables_Update" were present in the swagger spec, however they were not present in x-ms-examples. Please provide them.',
        level: 'error',
        [Symbol(level)]: 'error',
        [Symbol(message)]: '{"code":"RESPONSE_STATUS_CODE_NOT_IN_EXAMPLE","id":"OAV111","message":"Following response status codes \\"202\\" for operation \\"Tables_Update\\" were present in the swagger spec, however they were not present in x-ms-examples. Please provide them.","level":"error"}'
      }
    ]
  },
  level: '\u001b[31merror\u001b[39m',
  message: 'Found errors in validating the response with statusCode "202" for x-ms-example "TableCreate_MetaDataChange" in operation "Tables_Update".:\n'
}
{
  code: 'REQUEST_VALIDATION_ERROR',
  id: 'OAV109',
  message: 'Found errors in validating the request for x-ms-example "TableCreate_SchemaChange" in operation "Tables_Update".:\n' +
    ' Found errors in validating the request for x-ms-example "TableCreate_SchemaChange" in operation "Tables_Update".',
  innerErrors: [
    {
      code: 'INVALID_REQUEST_PARAMETER',
      errors: [
        {
          code: 'ANY_OF_MISSING',
          params: [],
          message: "Data does not match any schemas from 'anyOf'",
          path: [ 'properties' ],
          title: '{"path":["definitions","Table","properties","properties"],"position":{"line":488,"column":23},"url":".\\\\Tables.json","directives":{}}',
          inner: [
            {
              code: 'ANY_OF_MISSING',
              params: [],
              message: "Data does not match any schemas from 'anyOf'",
              path: [ 'properties', 'schema' ],
              title: '{"path":["definitions","TableProperties","properties","schema"],"position":{"line":466,"column":19},"url":".\\\\Tables.json","directives":{}}',
              inner: [
                {
                  code: 'ANY_OF_MISSING',
                  params: [],
                  message: "Data does not match any schemas from 'anyOf'",
                  path: [ 'schema', 'columns' ],
                  title: '{"path":["definitions","Schema","properties","columns"],"position":{"line":383,"column":20},"url":".\\\\Tables.json","directives":{}}',
                  inner: [
                    {
                      code: 'ANY_OF_MISSING',
                      params: [],
                      message: "Data does not match any schemas from 'anyOf'",
                      path: [ 'columns', 0 ],
                      title: '{"path":["definitions","Schema","properties","columns","items"],"position":{"line":385,"column":20},"url":".\\\\Tables.json","directives":{}}',
                      inner: [
                        {
                          code: 'ANY_OF_MISSING',
                          params: [],
                          message: "Data does not match any schemas from 'anyOf'",
                          path: [ 0, 'type' ],
                          title: '{"path":["definitions","Column","properties","type"],"position":{"line":315,"column":17},"url":".\\\\Tables.json","directives":{}}',
                          inner: [
                            {
                              code: 'ENUM_CASE_MISMATCH',
                              params: [ 'guid' ],
                              message: 'Enum does not match case for: guid',
                              path: [ 'type' ],
                              title: '{"path":["definitions","Column","properties","type"],"position":{"line":315,"column":17},"url":".\\\\Tables.json","directives":{}}',
                              description: "Coulmn's data type."
                            },
                            {
                              code: 'INVALID_TYPE',
                              params: [ 'null', 'string' ],
                              message: 'Expected type null but found type string',
                              path: [ 'type' ],
                              title: '{"path":["definitions","Column","properties","type"],"position":{"line":315,"column":17},"url":".\\\\Tables.json","directives":{}}'
                            }
                          ]
                        },
                        {
                          code: 'INVALID_TYPE',
                          params: [ 'null', 'object' ],
                          message: 'Expected type null but found type object',
                          path: [ 0 ],
                          title: '{"path":["definitions","Schema","properties","columns","items"],"position":{"line":385,"column":20},"url":".\\\\Tables.json","directives":{}}'
                        }
                      ]
                    },
                    {
                      code: 'INVALID_TYPE',
                      params: [ 'null', 'array' ],
                      message: 'Expected type null but found type array',
                      path: [ 'columns' ],
                      title: '{"path":["definitions","Schema","properties","columns"],"position":{"line":383,"column":20},"url":".\\\\Tables.json","directives":{}}'
                    }
                  ]
                },
                {
                  code: 'INVALID_TYPE',
                  params: [ 'null', 'object' ],
                  message: 'Expected type null but found type object',
                  path: [ 'schema' ],
                  title: '{"path":["definitions","TableProperties","properties","schema"],"position":{"line":466,"column":19},"url":".\\\\Tables.json","directives":{}}'
                }
              ]
            },
            {
              code: 'INVALID_TYPE',
              params: [ 'null', 'object' ],
              message: 'Expected type null but found type object',
              path: [ 'properties' ],
              title: '{"path":["definitions","Table","properties","properties"],"position":{"line":488,"column":23},"url":".\\\\Tables.json","directives":{}}'
            }
          ]
        }
      ],
      in: 'body',
      message: 'Invalid parameter (parameters): Value failed JSON Schema validation',
      name: 'parameters',
      path: [ 'parameters', 'parameters' ],
      schemaPath: '#/paths/~1subscriptions~1{subscriptionId}~1resourcegroups~1{resourceGroupName}~1providers~1Microsoft.OperationalInsights~1workspaces~1{workspaceName}~1tables~1{tableName}/patch/parameters/5',
      title: '{"path":["parameters","parameters"],"position":{"line":8,"column":19},"url":"examples/TableCreateUpdate_Schema.json"}'
    }
  ],
  level: '\u001b[31merror\u001b[39m'
}
{
  '0': {
    code: 'RESPONSE_VALIDATION_ERROR',
    id: 'OAV108',
    message: 'Found errors in validating the response with statusCode "200" for x-ms-example "TableCreate_SchemaChange" in operation "Tables_Update".',
    innerErrors: [
      {
        code: 'INVALID_RESPONSE_BODY',
        errors: [
          {
            code: 'ANY_OF_MISSING',
            params: [],
            message: "Data does not match any schemas from 'anyOf'",
            path: [ 'properties' ],
            title: '#/definitions/Table/properties/properties',
            inner: [
              {
                code: 'ANY_OF_MISSING',
                params: [],
                message: "Data does not match any schemas from 'anyOf'",
                path: [ 'properties', 'schema' ],
                title: '#/definitions/TableProperties/properties/schema',
                inner: [
                  {
                    code: 'ANY_OF_MISSING',
                    params: [],
                    message: "Data does not match any schemas from 'anyOf'",
                    path: [ 'schema', 'columns' ],
                    title: '#/definitions/Schema/properties/columns',
                    inner: [
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'columns', 0 ],
                        title: '#/definitions/Schema/properties/columns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 0, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'guid' ],
                                message: 'Enum does not match case for: guid',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 0 ],
                            title: '#/definitions/Schema/properties/columns/items',
                            position: { line: 385, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          }
                        ],
                        position: { line: 385, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                      },
                      {
                        code: 'INVALID_TYPE',
                        params: [ 'null', 'array' ],
                        message: 'Expected type null but found type array',
                        path: [ 'columns' ],
                        title: '#/definitions/Schema/properties/columns',
                        position: { line: 383, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                      }
                    ],
                    position: { line: 383, column: 20 },
                    url: '.\\Tables.json',
                    directives: {},
                    jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                  },
                  {
                    code: 'ANY_OF_MISSING',
                    params: [],
                    message: "Data does not match any schemas from 'anyOf'",
                    path: [ 'schema', 'standardColumns' ],
                    title: '#/definitions/Schema/properties/standardColumns',
                    inner: [
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 0 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 0, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'guid' ],
                                message: 'Enum does not match case for: guid',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 0 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 1 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 1, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'string' ],
                                message: 'Enum does not match case for: string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 1 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 2 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 2, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'dateTime' ],
                                message: 'Enum does not match case for: dateTime',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 2 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 3 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 3, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'string' ],
                                message: 'Enum does not match case for: string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 3 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 4 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 4, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'string' ],
                                message: 'Enum does not match case for: string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 4 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 5 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 5, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'string' ],
                                message: 'Enum does not match case for: string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 5 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 6 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 6, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 6 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 7 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 7, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 7 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 8 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 8, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 8 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 9 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 9, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 9 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 10 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 10, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 10 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 11 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 11, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 11 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 12 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 12, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 12 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 13 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 13, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 13 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 14 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 14, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 14 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                      },
                      {
                        code: 'INVALID_TYPE',
                        params: [ 'null', 'array' ],
                        message: 'Expected type null but found type array',
                        path: [ 'standardColumns' ],
                        title: '#/definitions/Schema/properties/standardColumns',
                        position: { line: 390, column: 28 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                      }
                    ],
                    position: { line: 390, column: 28 },
                    url: '.\\Tables.json',
                    directives: {},
                    jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                  },
                  {
                    code: 'INVALID_TYPE',
                    params: [ 'null', 'object' ],
                    message: 'Expected type null but found type object',
                    path: [ 'schema' ],
                    title: '#/definitions/TableProperties/properties/schema',
                    position: { line: 466, column: 19 },
                    url: '.\\Tables.json',
                    directives: {},
                    jsonUrl: 'examples/TableCreateUpdate_Schema.json'
                  }
                ],
                position: { line: 466, column: 19 },
                url: '.\\Tables.json',
                directives: {},
                jsonPosition: { line: 25, column: 21 },
                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
              },
              {
                code: 'INVALID_TYPE',
                params: [ 'null', 'object' ],
                message: 'Expected type null but found type object',
                path: [ 'properties' ],
                title: '#/definitions/Table/properties/properties',
                position: { line: 488, column: 23 },
                url: '.\\Tables.json',
                directives: {},
                jsonPosition: { line: 24, column: 23 },
                jsonUrl: 'examples/TableCreateUpdate_Schema.json'
              }
            ],
            position: { line: 488, column: 23 },
            url: '.\\Tables.json',
            directives: {},
            jsonPosition: { line: 24, column: 23 },
            jsonUrl: 'examples/TableCreateUpdate_Schema.json'
          }
        ],
        message: "Invalid body: Data does not match any schemas from 'anyOf'",
        path: []
      }
    ]
  },
  level: '\u001b[31merror\u001b[39m',
  message: 'Found errors in validating the response with statusCode "200" for x-ms-example "TableCreate_SchemaChange" in operation "Tables_Update".:\n'
}
{
  '0': {
    code: 'RESPONSE_VALIDATION_ERROR',
    id: 'OAV108',
    message: 'Found errors in validating the response with statusCode "202" for x-ms-example "TableCreate_SchemaChange" in operation "Tables_Update".',
    innerErrors: [
      {
        code: 'RESPONSE_STATUS_CODE_NOT_IN_EXAMPLE',
        id: 'OAV111',
        message: 'Following response status codes "202" for operation "Tables_Update" were present in the swagger spec, however they were not present in x-ms-examples. Please provide them.',
        level: 'error',
        [Symbol(level)]: 'error',
        [Symbol(message)]: '{"code":"RESPONSE_STATUS_CODE_NOT_IN_EXAMPLE","id":"OAV111","message":"Following response status codes \\"202\\" for operation \\"Tables_Update\\" were present in the swagger spec, however they were not present in x-ms-examples. Please provide them.","level":"error"}'
      }
    ]
  },
  level: '\u001b[31merror\u001b[39m',
  message: 'Found errors in validating the response with statusCode "202" for x-ms-example "TableCreate_SchemaChange" in operation "Tables_Update".:\n'
}
{
  code: 'REQUEST_VALIDATION_ERROR',
  id: 'OAV109',
  message: 'Found errors in validating the request for x-ms-example "TableCreate_SchemaMetadaChange" in operation "Tables_Update".:\n' +
    ' Found errors in validating the request for x-ms-example "TableCreate_SchemaMetadaChange" in operation "Tables_Update".',
  innerErrors: [
    {
      code: 'INVALID_REQUEST_PARAMETER',
      errors: [
        {
          code: 'ANY_OF_MISSING',
          params: [],
          message: "Data does not match any schemas from 'anyOf'",
          path: [ 'properties' ],
          title: '{"path":["definitions","Table","properties","properties"],"position":{"line":488,"column":23},"url":".\\\\Tables.json","directives":{}}',
          inner: [
            {
              code: 'ANY_OF_MISSING',
              params: [],
              message: "Data does not match any schemas from 'anyOf'",
              path: [ 'properties', 'schema' ],
              title: '{"path":["definitions","TableProperties","properties","schema"],"position":{"line":466,"column":19},"url":".\\\\Tables.json","directives":{}}',
              inner: [
                {
                  code: 'ANY_OF_MISSING',
                  params: [],
                  message: "Data does not match any schemas from 'anyOf'",
                  path: [ 'schema', 'columns' ],
                  title: '{"path":["definitions","Schema","properties","columns"],"position":{"line":383,"column":20},"url":".\\\\Tables.json","directives":{}}',
                  inner: [
                    {
                      code: 'ANY_OF_MISSING',
                      params: [],
                      message: "Data does not match any schemas from 'anyOf'",
                      path: [ 'columns', 0 ],
                      title: '{"path":["definitions","Schema","properties","columns","items"],"position":{"line":385,"column":20},"url":".\\\\Tables.json","directives":{}}',
                      inner: [
                        {
                          code: 'ANY_OF_MISSING',
                          params: [],
                          message: "Data does not match any schemas from 'anyOf'",
                          path: [ 0, 'type' ],
                          title: '{"path":["definitions","Column","properties","type"],"position":{"line":315,"column":17},"url":".\\\\Tables.json","directives":{}}',
                          inner: [
                            {
                              code: 'ENUM_CASE_MISMATCH',
                              params: [ 'guid' ],
                              message: 'Enum does not match case for: guid',
                              path: [ 'type' ],
                              title: '{"path":["definitions","Column","properties","type"],"position":{"line":315,"column":17},"url":".\\\\Tables.json","directives":{}}',
                              description: "Coulmn's data type."
                            },
                            {
                              code: 'INVALID_TYPE',
                              params: [ 'null', 'string' ],
                              message: 'Expected type null but found type string',
                              path: [ 'type' ],
                              title: '{"path":["definitions","Column","properties","type"],"position":{"line":315,"column":17},"url":".\\\\Tables.json","directives":{}}'
                            }
                          ]
                        },
                        {
                          code: 'INVALID_TYPE',
                          params: [ 'null', 'object' ],
                          message: 'Expected type null but found type object',
                          path: [ 0 ],
                          title: '{"path":["definitions","Schema","properties","columns","items"],"position":{"line":385,"column":20},"url":".\\\\Tables.json","directives":{}}'
                        }
                      ]
                    },
                    {
                      code: 'INVALID_TYPE',
                      params: [ 'null', 'array' ],
                      message: 'Expected type null but found type array',
                      path: [ 'columns' ],
                      title: '{"path":["definitions","Schema","properties","columns"],"position":{"line":383,"column":20},"url":".\\\\Tables.json","directives":{}}'
                    }
                  ]
                },
                {
                  code: 'INVALID_TYPE',
                  params: [ 'null', 'object' ],
                  message: 'Expected type null but found type object',
                  path: [ 'schema' ],
                  title: '{"path":["definitions","TableProperties","properties","schema"],"position":{"line":466,"column":19},"url":".\\\\Tables.json","directives":{}}'
                }
              ]
            },
            {
              code: 'INVALID_TYPE',
              params: [ 'null', 'object' ],
              message: 'Expected type null but found type object',
              path: [ 'properties' ],
              title: '{"path":["definitions","Table","properties","properties"],"position":{"line":488,"column":23},"url":".\\\\Tables.json","directives":{}}'
            }
          ]
        }
      ],
      in: 'body',
      message: 'Invalid parameter (parameters): Value failed JSON Schema validation',
      name: 'parameters',
      path: [ 'parameters', 'parameters' ],
      schemaPath: '#/paths/~1subscriptions~1{subscriptionId}~1resourcegroups~1{resourceGroupName}~1providers~1Microsoft.OperationalInsights~1workspaces~1{workspaceName}~1tables~1{tableName}/patch/parameters/5',
      title: '{"path":["parameters","parameters"],"position":{"line":8,"column":19},"url":"examples/TableCreateUpdate_SchemaMetaData.json"}'
    }
  ],
  level: '\u001b[31merror\u001b[39m'
}
{
  '0': {
    code: 'RESPONSE_VALIDATION_ERROR',
    id: 'OAV108',
    message: 'Found errors in validating the response with statusCode "200" for x-ms-example "TableCreate_SchemaMetadaChange" in operation "Tables_Update".',
    innerErrors: [
      {
        code: 'RESPONSE_STATUS_CODE_NOT_IN_EXAMPLE',
        id: 'OAV111',
        message: 'Following response status codes "200" for operation "Tables_Update" were present in the swagger spec, however they were not present in x-ms-examples. Please provide them.',
        level: 'error',
        [Symbol(level)]: 'error',
        [Symbol(message)]: '{"code":"RESPONSE_STATUS_CODE_NOT_IN_EXAMPLE","id":"OAV111","message":"Following response status codes \\"200\\" for operation \\"Tables_Update\\" were present in the swagger spec, however they were not present in x-ms-examples. Please provide them.","level":"error"}'
      }
    ]
  },
  level: '\u001b[31merror\u001b[39m',
  message: 'Found errors in validating the response with statusCode "200" for x-ms-example "TableCreate_SchemaMetadaChange" in operation "Tables_Update".:\n'
}
{
  '0': {
    code: 'RESPONSE_VALIDATION_ERROR',
    id: 'OAV108',
    message: 'Found errors in validating the response with statusCode "202" for x-ms-example "TableCreate_SchemaMetadaChange" in operation "Tables_Update".',
    innerErrors: [
      {
        code: 'RESPONSE_SCHEMA_NOT_IN_SPEC',
        id: 'OAV113',
        message: 'Response statusCode "202" for operation "Tables_Update" has response body provided in the example, however the response does not have a "schema" defined in the swagger spec.',
        level: 'error',
        [Symbol(level)]: 'error',
        [Symbol(message)]: '{"code":"RESPONSE_SCHEMA_NOT_IN_SPEC","id":"OAV113","message":"Response statusCode \\"202\\" for operation \\"Tables_Update\\" has response body provided in the example, however the response does not have a \\"schema\\" defined in the swagger spec.","level":"error"}'
      }
    ]
  },
  level: '\u001b[31merror\u001b[39m',
  message: 'Found errors in validating the response with statusCode "202" for x-ms-example "TableCreate_SchemaMetadaChange" in operation "Tables_Update".:\n'
}
{
  message: 'Request parameters for x-ms-example "Tables_Update_MaximumSet_Gen" in operation "Tables_Update" is valid.',
  level: '\u001b[32minfo\u001b[39m'
}
{
  '0': {
    code: 'RESPONSE_VALIDATION_ERROR',
    id: 'OAV108',
    message: 'Found errors in validating the response with statusCode "200" for x-ms-example "Tables_Update_MaximumSet_Gen" in operation "Tables_Update".',
    innerErrors: [
      {
        code: 'INVALID_RESPONSE_BODY',
        errors: [
          {
            code: 'ANY_OF_MISSING',
            params: [],
            message: "Data does not match any schemas from 'anyOf'",
            path: [ 'properties' ],
            title: '#/definitions/Table/properties/properties',
            inner: [
              {
                code: 'ANY_OF_MISSING',
                params: [],
                message: "Data does not match any schemas from 'anyOf'",
                path: [ 'properties', 'schema' ],
                title: '#/definitions/TableProperties/properties/schema',
                inner: [
                  {
                    code: 'ANY_OF_MISSING',
                    params: [],
                    message: "Data does not match any schemas from 'anyOf'",
                    path: [ 'schema', 'standardColumns' ],
                    title: '#/definitions/Schema/properties/standardColumns',
                    inner: [
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 0 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 0, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'guid' ],
                                message: 'Enum does not match case for: guid',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 0 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 1 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 1, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'string' ],
                                message: 'Enum does not match case for: string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 1 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 2 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 2, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'dateTime' ],
                                message: 'Enum does not match case for: dateTime',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 2 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 3 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 3, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'string' ],
                                message: 'Enum does not match case for: string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 3 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 4 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 4, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'string' ],
                                message: 'Enum does not match case for: string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 4 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 5 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 5, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'string' ],
                                message: 'Enum does not match case for: string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 5 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 6 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 6, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 6 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 7 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 7, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 7 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 8 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 8, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 8 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 9 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 9, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 9 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 10 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 10, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 10 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 11 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 11, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 11 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 12 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 12, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 12 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 13 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 13, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 13 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 14 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 14, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 204, column: 17 },
                                jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 14 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                      },
                      {
                        code: 'INVALID_TYPE',
                        params: [ 'null', 'array' ],
                        message: 'Expected type null but found type array',
                        path: [ 'standardColumns' ],
                        title: '#/definitions/Schema/properties/standardColumns',
                        position: { line: 390, column: 28 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                      }
                    ],
                    position: { line: 390, column: 28 },
                    url: '.\\Tables.json',
                    directives: {},
                    jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                  },
                  {
                    code: 'INVALID_TYPE',
                    params: [ 'null', 'object' ],
                    message: 'Expected type null but found type object',
                    path: [ 'schema' ],
                    title: '#/definitions/TableProperties/properties/schema',
                    position: { line: 466, column: 19 },
                    url: '.\\Tables.json',
                    directives: {},
                    jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
                  }
                ],
                position: { line: 466, column: 19 },
                url: '.\\Tables.json',
                directives: {},
                jsonPosition: { line: 36, column: 21 },
                jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
              },
              {
                code: 'INVALID_TYPE',
                params: [ 'null', 'object' ],
                message: 'Expected type null but found type object',
                path: [ 'properties' ],
                title: '#/definitions/Table/properties/properties',
                position: { line: 488, column: 23 },
                url: '.\\Tables.json',
                directives: {},
                jsonPosition: { line: 31, column: 23 },
                jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
              }
            ],
            position: { line: 488, column: 23 },
            url: '.\\Tables.json',
            directives: {},
            jsonPosition: { line: 31, column: 23 },
            jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json'
          }
        ],
        message: "Invalid body: Data does not match any schemas from 'anyOf'",
        path: []
      }
    ]
  },
  level: '\u001b[31merror\u001b[39m',
  message: 'Found errors in validating the response with statusCode "200" for x-ms-example "Tables_Update_MaximumSet_Gen" in operation "Tables_Update".:\n'
}
{
  message: 'Response with statusCode "202" for x-ms-example "Tables_Update_MaximumSet_Gen" in operation "Tables_Update" is valid.',
  level: '\u001b[32minfo\u001b[39m'
}
{
  message: 'the validation raised below error:',
  level: '\u001b[31merror\u001b[39m'
}
{
  message: [
    {
      operationId: 'Tables_Update',
      scenario: 'TableCreate_MetaDataChange',
      source: 'response',
      responseCode: '200',
      severity: 1,
      code: 'ENUM_CASE_MISMATCH',
      details: {
        code: 'ENUM_CASE_MISMATCH',
        params: [ 'guid' ],
        message: 'Enum does not match case for: guid',
        path: '$/properties/schema/standardColumns/0/type',
        title: '#/definitions/Column/properties/type',
        description: "Coulmn's data type.",
        position: { line: 315, column: 17 },
        url: '.\\Tables.json',
        directives: {},
        jsonUrl: 'examples/TableCreateUpdate_MetaData.json',
        jsonPath: "$['properties']['schema']['standardColumns'][0]['type']"
      }
    },
    {
      operationId: 'Tables_Update',
      scenario: 'TableCreate_MetaDataChange',
      source: 'response',
      responseCode: '200',
      severity: 1,
      code: 'ENUM_CASE_MISMATCH',
      details: {
        code: 'ENUM_CASE_MISMATCH',
        params: [ 'string' ],
        message: 'Enum does not match case for: string',
        path: '$/properties/schema/standardColumns/1/type',
        title: '#/definitions/Column/properties/type',
        description: "Coulmn's data type.",
        position: { line: 315, column: 17 },
        url: '.\\Tables.json',
        directives: {},
        jsonUrl: 'examples/TableCreateUpdate_MetaData.json',
        jsonPath: "$['properties']['schema']['standardColumns'][1]['type']",
        similarPaths: [
          '$/properties/schema/standardColumns/3/type',
          '$/properties/schema/standardColumns/4/type',
          '$/properties/schema/standardColumns/5/type'
        ],
        similarJsonPaths: [
          "$['properties']['schema']['standardColumns'][3]['type']",
          "$['properties']['schema']['standardColumns'][4]['type']",
          "$['properties']['schema']['standardColumns'][5]['type']"
        ]
      }
    },
    {
      operationId: 'Tables_Update',
      scenario: 'TableCreate_MetaDataChange',
      source: 'response',
      responseCode: '200',
      severity: 1,
      code: 'ENUM_CASE_MISMATCH',
      details: {
        code: 'ENUM_CASE_MISMATCH',
        params: [ 'dateTime' ],
        message: 'Enum does not match case for: dateTime',
        path: '$/properties/schema/standardColumns/2/type',
        title: '#/definitions/Column/properties/type',
        description: "Coulmn's data type.",
        position: { line: 315, column: 17 },
        url: '.\\Tables.json',
        directives: {},
        jsonUrl: 'examples/TableCreateUpdate_MetaData.json',
        jsonPath: "$['properties']['schema']['standardColumns'][2]['type']"
      }
    },
    {
      operationId: 'Tables_Update',
      scenario: 'TableCreate_MetaDataChange',
      source: 'response',
      responseCode: '200',
      severity: 1,
      code: 'ENUM_CASE_MISMATCH',
      details: {
        code: 'ENUM_CASE_MISMATCH',
        params: [ 'int' ],
        message: 'Enum does not match case for: int',
        path: '$/properties/schema/standardColumns/6/type',
        title: '#/definitions/Column/properties/type',
        description: "Coulmn's data type.",
        position: { line: 315, column: 17 },
        url: '.\\Tables.json',
        directives: {},
        jsonUrl: 'examples/TableCreateUpdate_MetaData.json',
        jsonPath: "$['properties']['schema']['standardColumns'][6]['type']",
        similarPaths: [
          '$/properties/schema/standardColumns/7/type',
          '$/properties/schema/standardColumns/8/type',
          '$/properties/schema/standardColumns/9/type',
          '$/properties/schema/standardColumns/10/type',
          '$/properties/schema/standardColumns/11/type',
          '$/properties/schema/standardColumns/12/type',
          '$/properties/schema/standardColumns/13/type',
          '$/properties/schema/standardColumns/14/type'
        ],
        similarJsonPaths: [
          "$['properties']['schema']['standardColumns'][7]['type']",
          "$['properties']['schema']['standardColumns'][8]['type']",
          "$['properties']['schema']['standardColumns'][9]['type']",
          "$['properties']['schema']['standardColumns'][10]['type']",
          "$['properties']['schema']['standardColumns'][11]['type']",
          "$['properties']['schema']['standardColumns'][12]['type']",
          "$['properties']['schema']['standardColumns'][13]['type']",
          "$['properties']['schema']['standardColumns'][14]['type']"
        ]
      }
    },
    {
      operationId: 'Tables_Update',
      scenario: 'TableCreate_MetaDataChange',
      source: 'response',
      responseCode: '202',
      severity: 0,
      code: 'RESPONSE_STATUS_CODE_NOT_IN_EXAMPLE',
      details: {
        code: 'RESPONSE_STATUS_CODE_NOT_IN_EXAMPLE',
        id: 'OAV111',
        message: 'Following response status codes "202" for operation "Tables_Update" were present in the swagger spec, however they were not present in x-ms-examples. Please provide them.',
        level: 'error',
        [Symbol(level)]: 'error',
        [Symbol(message)]: '{"code":"RESPONSE_STATUS_CODE_NOT_IN_EXAMPLE","id":"OAV111","message":"Following response status codes \\"202\\" for operation \\"Tables_Update\\" were present in the swagger spec, however they were not present in x-ms-examples. Please provide them.","level":"error"}'
      }
    },
    {
      operationId: 'Tables_Update',
      scenario: 'TableCreate_SchemaChange',
      source: 'request',
      responseCode: 'ALL',
      severity: 1,
      code: 'ENUM_CASE_MISMATCH',
      details: {
        code: 'ENUM_CASE_MISMATCH',
        params: [ 'guid' ],
        message: 'Enum does not match case for: guid',
        path: '$/properties/schema/columns/0/type',
        title: '#/definitions/Column/properties/type',
        description: "Coulmn's data type.",
        jsonPath: "$['properties']['schema']['columns'][0]['type']",
        position: { line: 315, column: 17 },
        url: '.\\Tables.json',
        directives: {}
      }
    },
    {
      operationId: 'Tables_Update',
      scenario: 'TableCreate_SchemaChange',
      source: 'response',
      responseCode: '200',
      severity: 1,
      code: 'ENUM_CASE_MISMATCH',
      details: {
        code: 'ENUM_CASE_MISMATCH',
        params: [ 'guid' ],
        message: 'Enum does not match case for: guid',
        path: '$/properties/schema/columns/0/type',
        title: '#/definitions/Column/properties/type',
        description: "Coulmn's data type.",
        position: { line: 315, column: 17 },
        url: '.\\Tables.json',
        directives: {},
        jsonUrl: 'examples/TableCreateUpdate_Schema.json',
        jsonPath: "$['properties']['schema']['columns'][0]['type']"
      }
    },
    {
      operationId: 'Tables_Update',
      scenario: 'TableCreate_SchemaChange',
      source: 'response',
      responseCode: '200',
      severity: 1,
      code: 'ENUM_CASE_MISMATCH',
      details: {
        code: 'ENUM_CASE_MISMATCH',
        params: [ 'guid' ],
        message: 'Enum does not match case for: guid',
        path: '$/properties/schema/standardColumns/0/type',
        title: '#/definitions/Column/properties/type',
        description: "Coulmn's data type.",
        position: { line: 315, column: 17 },
        url: '.\\Tables.json',
        directives: {},
        jsonUrl: 'examples/TableCreateUpdate_Schema.json',
        jsonPath: "$['properties']['schema']['standardColumns'][0]['type']"
      }
    },
    {
      operationId: 'Tables_Update',
      scenario: 'TableCreate_SchemaChange',
      source: 'response',
      responseCode: '200',
      severity: 1,
      code: 'ENUM_CASE_MISMATCH',
      details: {
        code: 'ENUM_CASE_MISMATCH',
        params: [ 'string' ],
        message: 'Enum does not match case for: string',
        path: '$/properties/schema/standardColumns/1/type',
        title: '#/definitions/Column/properties/type',
        description: "Coulmn's data type.",
        position: { line: 315, column: 17 },
        url: '.\\Tables.json',
        directives: {},
        jsonUrl: 'examples/TableCreateUpdate_Schema.json',
        jsonPath: "$['properties']['schema']['standardColumns'][1]['type']",
        similarPaths: [
          '$/properties/schema/standardColumns/3/type',
          '$/properties/schema/standardColumns/4/type',
          '$/properties/schema/standardColumns/5/type'
        ],
        similarJsonPaths: [
          "$['properties']['schema']['standardColumns'][3]['type']",
          "$['properties']['schema']['standardColumns'][4]['type']",
          "$['properties']['schema']['standardColumns'][5]['type']"
        ]
      }
    },
    {
      operationId: 'Tables_Update',
      scenario: 'TableCreate_SchemaChange',
      source: 'response',
      responseCode: '200',
      severity: 1,
      code: 'ENUM_CASE_MISMATCH',
      details: {
        code: 'ENUM_CASE_MISMATCH',
        params: [ 'dateTime' ],
        message: 'Enum does not match case for: dateTime',
        path: '$/properties/schema/standardColumns/2/type',
        title: '#/definitions/Column/properties/type',
        description: "Coulmn's data type.",
        position: { line: 315, column: 17 },
        url: '.\\Tables.json',
        directives: {},
        jsonUrl: 'examples/TableCreateUpdate_Schema.json',
        jsonPath: "$['properties']['schema']['standardColumns'][2]['type']"
      }
    },
    {
      operationId: 'Tables_Update',
      scenario: 'TableCreate_SchemaChange',
      source: 'response',
      responseCode: '200',
      severity: 1,
      code: 'ENUM_CASE_MISMATCH',
      details: {
        code: 'ENUM_CASE_MISMATCH',
        params: [ 'int' ],
        message: 'Enum does not match case for: int',
        path: '$/properties/schema/standardColumns/6/type',
        title: '#/definitions/Column/properties/type',
        description: "Coulmn's data type.",
        position: { line: 315, column: 17 },
        url: '.\\Tables.json',
        directives: {},
        jsonUrl: 'examples/TableCreateUpdate_Schema.json',
        jsonPath: "$['properties']['schema']['standardColumns'][6]['type']",
        similarPaths: [
          '$/properties/schema/standardColumns/7/type',
          '$/properties/schema/standardColumns/8/type',
          '$/properties/schema/standardColumns/9/type',
          '$/properties/schema/standardColumns/10/type',
          '$/properties/schema/standardColumns/11/type',
          '$/properties/schema/standardColumns/12/type',
          '$/properties/schema/standardColumns/13/type',
          '$/properties/schema/standardColumns/14/type'
        ],
        similarJsonPaths: [
          "$['properties']['schema']['standardColumns'][7]['type']",
          "$['properties']['schema']['standardColumns'][8]['type']",
          "$['properties']['schema']['standardColumns'][9]['type']",
          "$['properties']['schema']['standardColumns'][10]['type']",
          "$['properties']['schema']['standardColumns'][11]['type']",
          "$['properties']['schema']['standardColumns'][12]['type']",
          "$['properties']['schema']['standardColumns'][13]['type']",
          "$['properties']['schema']['standardColumns'][14]['type']"
        ]
      }
    },
    {
      operationId: 'Tables_Update',
      scenario: 'TableCreate_SchemaChange',
      source: 'response',
      responseCode: '202',
      severity: 0,
      code: 'RESPONSE_STATUS_CODE_NOT_IN_EXAMPLE',
      details: {
        code: 'RESPONSE_STATUS_CODE_NOT_IN_EXAMPLE',
        id: 'OAV111',
        message: 'Following response status codes "202" for operation "Tables_Update" were present in the swagger spec, however they were not present in x-ms-examples. Please provide them.',
        level: 'error',
        [Symbol(level)]: 'error',
        [Symbol(message)]: '{"code":"RESPONSE_STATUS_CODE_NOT_IN_EXAMPLE","id":"OAV111","message":"Following response status codes \\"202\\" for operation \\"Tables_Update\\" were present in the swagger spec, however they were not present in x-ms-examples. Please provide them.","level":"error"}'
      }
    },
    {
      operationId: 'Tables_Update',
      scenario: 'TableCreate_SchemaMetadaChange',
      source: 'request',
      responseCode: 'ALL',
      severity: 1,
      code: 'ENUM_CASE_MISMATCH',
      details: {
        code: 'ENUM_CASE_MISMATCH',
        params: [ 'guid' ],
        message: 'Enum does not match case for: guid',
        path: '$/properties/schema/columns/0/type',
        title: '#/definitions/Column/properties/type',
        description: "Coulmn's data type.",
        jsonPath: "$['properties']['schema']['columns'][0]['type']",
        position: { line: 315, column: 17 },
        url: '.\\Tables.json',
        directives: {}
      }
    },
    {
      operationId: 'Tables_Update',
      scenario: 'TableCreate_SchemaMetadaChange',
      source: 'response',
      responseCode: '200',
      severity: 0,
      code: 'RESPONSE_STATUS_CODE_NOT_IN_EXAMPLE',
      details: {
        code: 'RESPONSE_STATUS_CODE_NOT_IN_EXAMPLE',
        id: 'OAV111',
        message: 'Following response status codes "200" for operation "Tables_Update" were present in the swagger spec, however they were not present in x-ms-examples. Please provide them.',
        level: 'error',
        [Symbol(level)]: 'error',
        [Symbol(message)]: '{"code":"RESPONSE_STATUS_CODE_NOT_IN_EXAMPLE","id":"OAV111","message":"Following response status codes \\"200\\" for operation \\"Tables_Update\\" were present in the swagger spec, however they were not present in x-ms-examples. Please provide them.","level":"error"}'
      }
    },
    {
      operationId: 'Tables_Update',
      scenario: 'TableCreate_SchemaMetadaChange',
      source: 'response',
      responseCode: '202',
      severity: 0,
      code: 'RESPONSE_SCHEMA_NOT_IN_SPEC',
      details: {
        code: 'RESPONSE_SCHEMA_NOT_IN_SPEC',
        id: 'OAV113',
        message: 'Response statusCode "202" for operation "Tables_Update" has response body provided in the example, however the response does not have a "schema" defined in the swagger spec.',
        level: 'error',
        [Symbol(level)]: 'error',
        [Symbol(message)]: '{"code":"RESPONSE_SCHEMA_NOT_IN_SPEC","id":"OAV113","message":"Response statusCode \\"202\\" for operation \\"Tables_Update\\" has response body provided in the example, however the response does not have a \\"schema\\" defined in the swagger spec.","level":"error"}'
      }
    },
    {
      operationId: 'Tables_Update',
      scenario: 'Tables_Update_MaximumSet_Gen',
      source: 'response',
      responseCode: '200',
      severity: 1,
      code: 'ENUM_CASE_MISMATCH',
      details: {
        code: 'ENUM_CASE_MISMATCH',
        params: [ 'guid' ],
        message: 'Enum does not match case for: guid',
        path: '$/properties/schema/standardColumns/0/type',
        title: '#/definitions/Column/properties/type',
        description: "Coulmn's data type.",
        position: { line: 315, column: 17 },
        url: '.\\Tables.json',
        directives: {},
        jsonPosition: { line: 204, column: 17 },
        jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json',
        jsonPath: "$['properties']['schema']['standardColumns'][0]['type']"
      }
    },
    {
      operationId: 'Tables_Update',
      scenario: 'Tables_Update_MaximumSet_Gen',
      source: 'response',
      responseCode: '200',
      severity: 1,
      code: 'ENUM_CASE_MISMATCH',
      details: {
        code: 'ENUM_CASE_MISMATCH',
        params: [ 'string' ],
        message: 'Enum does not match case for: string',
        path: '$/properties/schema/standardColumns/1/type',
        title: '#/definitions/Column/properties/type',
        description: "Coulmn's data type.",
        position: { line: 315, column: 17 },
        url: '.\\Tables.json',
        directives: {},
        jsonPosition: { line: 204, column: 17 },
        jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json',
        jsonPath: "$['properties']['schema']['standardColumns'][1]['type']",
        similarPaths: [
          '$/properties/schema/standardColumns/3/type',
          '$/properties/schema/standardColumns/4/type',
          '$/properties/schema/standardColumns/5/type'
        ],
        similarJsonPaths: [
          "$['properties']['schema']['standardColumns'][3]['type']",
          "$['properties']['schema']['standardColumns'][4]['type']",
          "$['properties']['schema']['standardColumns'][5]['type']"
        ]
      }
    },
    {
      operationId: 'Tables_Update',
      scenario: 'Tables_Update_MaximumSet_Gen',
      source: 'response',
      responseCode: '200',
      severity: 1,
      code: 'ENUM_CASE_MISMATCH',
      details: {
        code: 'ENUM_CASE_MISMATCH',
        params: [ 'dateTime' ],
        message: 'Enum does not match case for: dateTime',
        path: '$/properties/schema/standardColumns/2/type',
        title: '#/definitions/Column/properties/type',
        description: "Coulmn's data type.",
        position: { line: 315, column: 17 },
        url: '.\\Tables.json',
        directives: {},
        jsonPosition: { line: 204, column: 17 },
        jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json',
        jsonPath: "$['properties']['schema']['standardColumns'][2]['type']"
      }
    },
    {
      operationId: 'Tables_Update',
      scenario: 'Tables_Update_MaximumSet_Gen',
      source: 'response',
      responseCode: '200',
      severity: 1,
      code: 'ENUM_CASE_MISMATCH',
      details: {
        code: 'ENUM_CASE_MISMATCH',
        params: [ 'int' ],
        message: 'Enum does not match case for: int',
        path: '$/properties/schema/standardColumns/6/type',
        title: '#/definitions/Column/properties/type',
        description: "Coulmn's data type.",
        position: { line: 315, column: 17 },
        url: '.\\Tables.json',
        directives: {},
        jsonPosition: { line: 204, column: 17 },
        jsonUrl: 'examples/Tables_Update_MaximumSet_Gen.json',
        jsonPath: "$['properties']['schema']['standardColumns'][6]['type']",
        similarPaths: [
          '$/properties/schema/standardColumns/7/type',
          '$/properties/schema/standardColumns/8/type',
          '$/properties/schema/standardColumns/9/type',
          '$/properties/schema/standardColumns/10/type',
          '$/properties/schema/standardColumns/11/type',
          '$/properties/schema/standardColumns/12/type',
          '$/properties/schema/standardColumns/13/type',
          '$/properties/schema/standardColumns/14/type'
        ],
        similarJsonPaths: [
          "$['properties']['schema']['standardColumns'][7]['type']",
          "$['properties']['schema']['standardColumns'][8]['type']",
          "$['properties']['schema']['standardColumns'][9]['type']",
          "$['properties']['schema']['standardColumns'][10]['type']",
          "$['properties']['schema']['standardColumns'][11]['type']",
          "$['properties']['schema']['standardColumns'][12]['type']",
          "$['properties']['schema']['standardColumns'][13]['type']",
          "$['properties']['schema']['standardColumns'][14]['type']"
        ]
      }
    }
  ],
  level: '\u001b[31merror\u001b[39m'
}
start generated example for Tables_Get, rule:MaximumSet
example file path: C:\one\Mgmt\azure-rest-api-specs\specification\operationalinsights\resource-manager\Microsoft.OperationalInsights\preview\2021-03-01-privatepreview\examples\Tables_Get_MaximumSet_Gen.json
{ message: 'extractResponse', level: '\u001b[32minfo\u001b[39m' }
{
  message: {
    parameters: {
      subscriptionId: '00000000-0000-0000-0000-00000000000',
      resourceGroupName: 'rgTables',
      workspaceName: 'oiautorest6685',
      'api-version': '2020-10-01',
      tableName: 'AzureNetworkFlow'
    },
    responses: {
      '200': {
        headers: undefined,
        body: {
          properties: {
            retentionInDays: 45,
            isTroubleshootingAllowed: true,
            isTroubleshootEnabled: true,
            lastTroubleshootDate: 'aaaaaaa',
            schema: {
              name: 'AzureNetworkFlow',
              displayName: 'aaaaaaaaaaaa',
              description: 'a',
              columns: [
                {
                  name: 'aaaaaaaa',
                  type: 'String',
                  dataTypeHint: 'URI',
                  displayName: 'aaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  description: 'a',
                  isDefaultDisplay: true,
                  isHidden: true
                }
              ],
              standardColumns: [
                {
                  isHidden: true,
                  name: 'TenantId',
                  type: 'guid',
                  dataTypeHint: 'URI',
                  displayName: 'aaaaaaaaaaaaaa',
                  description: 'aaaaaaaaa',
                  isDefaultDisplay: true
                },
                {
                  isHidden: true,
                  name: 'SourceSystem',
                  type: 'string',
                  dataTypeHint: 'URI',
                  displayName: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  description: 'aaaaaaaaaaaaaa',
                  isDefaultDisplay: true
                },
                {
                  isHidden: true,
                  name: 'TimeGenerated',
                  type: 'dateTime',
                  dataTypeHint: 'URI',
                  displayName: 'aaaaaaaaaaaaaaaaaaaaaa',
                  description: 'aaaaaaaaaaaaaaaaa',
                  isDefaultDisplay: true
                },
                {
                  isHidden: true,
                  name: 'AgentID',
                  type: 'string',
                  dataTypeHint: 'URI',
                  displayName: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  description: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  isDefaultDisplay: true
                },
                {
                  isHidden: true,
                  name: 'SourceIP',
                  type: 'string',
                  dataTypeHint: 'URI',
                  displayName: 'aaaaaaa',
                  description: 'aaaaaaaaaaaaaaaaaaaaaaaa',
                  isDefaultDisplay: true
                },
                {
                  isHidden: true,
                  name: 'Protocol',
                  type: 'string',
                  dataTypeHint: 'URI',
                  displayName: 'aaaaaaaaaaaaaaa',
                  description: 'aaaaaaa',
                  isDefaultDisplay: true
                },
                {
                  isHidden: true,
                  name: 'SourcePort',
                  type: 'int',
                  dataTypeHint: 'URI',
                  displayName: 'aaaaaaaaaaaaaaaaaaaaa',
                  description: 'aaaaaaaaa',
                  isDefaultDisplay: true
                },
                {
                  isHidden: true,
                  name: 'DestinationPort',
                  type: 'int',
                  dataTypeHint: 'URI',
                  displayName: 'aaaaaaaaaaaaaaaaaaaaaaaa',
                  description: 'aaaaaaaaaaaaaaaaaa',
                  isDefaultDisplay: true
                },
                {
                  isHidden: true,
                  name: 'TcpFlags',
                  type: 'int',
                  dataTypeHint: 'URI',
                  displayName: 'aaaaaaaaaaaaaaaa',
                  description: 'aaaaaaaaaaaa',
                  isDefaultDisplay: true
                },
                {
                  isHidden: true,
                  name: 'Packets',
                  type: 'int',
                  dataTypeHint: 'URI',
                  displayName: 'aa',
                  description: 'aaaaaaaaaaaaaaaaaaaaaaa',
                  isDefaultDisplay: true
                },
                {
                  isHidden: true,
                  name: 'Bytes',
                  type: 'int',
                  dataTypeHint: 'URI',
                  displayName: 'aaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  description: 'a',
                  isDefaultDisplay: true
                },
                {
                  isHidden: true,
                  name: 'BytesOut',
                  type: 'int',
                  dataTypeHint: 'URI',
                  displayName: 'aaaaaaaaaaa',
                  description: 'aaaaaaaaa',
                  isDefaultDisplay: true
                },
                {
                  isHidden: true,
                  name: 'DurationInMs',
                  type: 'int',
                  dataTypeHint: 'URI',
                  displayName: 'aaaaaaaaaaaaaaa',
                  description: 'aaaaaaaaaa',
                  isDefaultDisplay: true
                },
                {
                  isHidden: true,
                  name: 'RstCount',
                  type: 'int',
                  dataTypeHint: 'URI',
                  displayName: 'aaaaaaaaaaaa',
                  description: 'aaaaaaaaaaaaaa',
                  isDefaultDisplay: true
                },
                {
                  isHidden: true,
                  name: 'MaxSampleRtt',
                  type: 'int',
                  dataTypeHint: 'URI',
                  displayName: 'aaaaaaaaaaaaaaa',
                  description: 'aaaaaaaaaaaaaaaaaaa',
                  isDefaultDisplay: true
                }
              ],
              categories: [ 'aaaaaaaaaaaaaaaaaa' ],
              labels: [ 'aaaaaaaaaaaaaaaaaaaaaaaaaaa' ],
              source: 'Microsoft',
              solutions: [ 'LogManagement' ],
              isTroubleshootingAllowed: true
            },
            provisioningState: 'Succeeded'
          },
          id: '/subscriptions/00000000-0000-0000-0000-00000000000/resourcegroups/oiautorest6685/providers/Microsoft.OperationalInsights/workspaces/oiautorest6685/tables/AzureNetworkFlow',
          name: 'AzureNetworkFlow',
          type: 'aaaaaaaaaaaaaa'
        }
      }
    }
  },
  level: '\u001b[32minfo\u001b[39m'
}
{
  message: 'start validating generated example for Tables_Get',
  level: '\u001b[32minfo\u001b[39m'
}
{
  message: 'Validating "examples" and "x-ms-examples" in  .\\Tables.json:\n',
  level: '\u001b[32minfo\u001b[39m'
}
{
  message: 'Request parameters for x-ms-example "TablesGet" in operation "Tables_Get" is valid.',
  level: '\u001b[32minfo\u001b[39m'
}
{
  '0': {
    code: 'RESPONSE_VALIDATION_ERROR',
    id: 'OAV108',
    message: 'Found errors in validating the response with statusCode "200" for x-ms-example "TablesGet" in operation "Tables_Get".',
    innerErrors: [
      {
        code: 'INVALID_RESPONSE_BODY',
        errors: [
          {
            code: 'ANY_OF_MISSING',
            params: [],
            message: "Data does not match any schemas from 'anyOf'",
            path: [ 'properties' ],
            title: '#/definitions/Table/properties/properties',
            inner: [
              {
                code: 'ANY_OF_MISSING',
                params: [],
                message: "Data does not match any schemas from 'anyOf'",
                path: [ 'properties', 'schema' ],
                title: '#/definitions/TableProperties/properties/schema',
                inner: [
                  {
                    code: 'ANY_OF_MISSING',
                    params: [],
                    message: "Data does not match any schemas from 'anyOf'",
                    path: [ 'schema', 'standardColumns' ],
                    title: '#/definitions/Schema/properties/standardColumns',
                    inner: [
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 0 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 0, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'guid' ],
                                message: 'Enum does not match case for: guid',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableGet.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableGet.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableGet.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 0 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableGet.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableGet.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 1 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 1, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'string' ],
                                message: 'Enum does not match case for: string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableGet.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableGet.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableGet.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 1 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableGet.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableGet.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 2 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 2, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'guid' ],
                                message: 'Enum does not match case for: guid',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableGet.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableGet.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableGet.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 2 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableGet.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableGet.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 3 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 3, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'string' ],
                                message: 'Enum does not match case for: string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableGet.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableGet.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableGet.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 3 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableGet.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableGet.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 4 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 4, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'dateTime' ],
                                message: 'Enum does not match case for: dateTime',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableGet.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableGet.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableGet.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 4 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableGet.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableGet.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 5 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 5, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'string' ],
                                message: 'Enum does not match case for: string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableGet.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableGet.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableGet.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 5 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableGet.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableGet.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 6 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 6, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'string' ],
                                message: 'Enum does not match case for: string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableGet.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonUrl: 'examples/TableGet.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableGet.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 6 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/TableGet.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableGet.json'
                      },
                      {
                        code: 'INVALID_TYPE',
                        params: [ 'null', 'array' ],
                        message: 'Expected type null but found type array',
                        path: [ 'standardColumns' ],
                        title: '#/definitions/Schema/properties/standardColumns',
                        position: { line: 390, column: 28 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/TableGet.json'
                      }
                    ],
                    position: { line: 390, column: 28 },
                    url: '.\\Tables.json',
                    directives: {},
                    jsonUrl: 'examples/TableGet.json'
                  },
                  {
                    code: 'INVALID_TYPE',
                    params: [ 'null', 'object' ],
                    message: 'Expected type null but found type object',
                    path: [ 'schema' ],
                    title: '#/definitions/TableProperties/properties/schema',
                    position: { line: 466, column: 19 },
                    url: '.\\Tables.json',
                    directives: {},
                    jsonUrl: 'examples/TableGet.json'
                  }
                ],
                position: { line: 466, column: 19 },
                url: '.\\Tables.json',
                directives: {},
                jsonPosition: { line: 13, column: 21 },
                jsonUrl: 'examples/TableGet.json'
              },
              {
                code: 'INVALID_TYPE',
                params: [ 'null', 'object' ],
                message: 'Expected type null but found type object',
                path: [ 'properties' ],
                title: '#/definitions/Table/properties/properties',
                position: { line: 488, column: 23 },
                url: '.\\Tables.json',
                directives: {},
                jsonPosition: { line: 12, column: 23 },
                jsonUrl: 'examples/TableGet.json'
              }
            ],
            position: { line: 488, column: 23 },
            url: '.\\Tables.json',
            directives: {},
            jsonPosition: { line: 12, column: 23 },
            jsonUrl: 'examples/TableGet.json'
          }
        ],
        message: "Invalid body: Data does not match any schemas from 'anyOf'",
        path: []
      }
    ]
  },
  level: '\u001b[31merror\u001b[39m',
  message: 'Found errors in validating the response with statusCode "200" for x-ms-example "TablesGet" in operation "Tables_Get".:\n'
}
{
  message: 'Request parameters for x-ms-example "Tables_Get_MaximumSet_Gen" in operation "Tables_Get" is valid.',
  level: '\u001b[32minfo\u001b[39m'
}
{
  '0': {
    code: 'RESPONSE_VALIDATION_ERROR',
    id: 'OAV108',
    message: 'Found errors in validating the response with statusCode "200" for x-ms-example "Tables_Get_MaximumSet_Gen" in operation "Tables_Get".',
    innerErrors: [
      {
        code: 'INVALID_RESPONSE_BODY',
        errors: [
          {
            code: 'ANY_OF_MISSING',
            params: [],
            message: "Data does not match any schemas from 'anyOf'",
            path: [ 'properties' ],
            title: '#/definitions/Table/properties/properties',
            inner: [
              {
                code: 'ANY_OF_MISSING',
                params: [],
                message: "Data does not match any schemas from 'anyOf'",
                path: [ 'properties', 'schema' ],
                title: '#/definitions/TableProperties/properties/schema',
                inner: [
                  {
                    code: 'ANY_OF_MISSING',
                    params: [],
                    message: "Data does not match any schemas from 'anyOf'",
                    path: [ 'schema', 'standardColumns' ],
                    title: '#/definitions/Schema/properties/standardColumns',
                    inner: [
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 0 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 0, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'guid' ],
                                message: 'Enum does not match case for: guid',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 185, column: 17 },
                                jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 185, column: 17 },
                                jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 0 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 1 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 1, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'string' ],
                                message: 'Enum does not match case for: string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 185, column: 17 },
                                jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 185, column: 17 },
                                jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 1 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 2 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 2, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'dateTime' ],
                                message: 'Enum does not match case for: dateTime',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 185, column: 17 },
                                jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 185, column: 17 },
                                jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 2 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 3 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 3, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'string' ],
                                message: 'Enum does not match case for: string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 185, column: 17 },
                                jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 185, column: 17 },
                                jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 3 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 4 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 4, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'string' ],
                                message: 'Enum does not match case for: string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 185, column: 17 },
                                jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 185, column: 17 },
                                jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 4 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 5 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 5, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'string' ],
                                message: 'Enum does not match case for: string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 185, column: 17 },
                                jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 185, column: 17 },
                                jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 5 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 6 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 6, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 185, column: 17 },
                                jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 185, column: 17 },
                                jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 6 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 7 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 7, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 185, column: 17 },
                                jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 185, column: 17 },
                                jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 7 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 8 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 8, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 185, column: 17 },
                                jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 185, column: 17 },
                                jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 8 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 9 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 9, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 185, column: 17 },
                                jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 185, column: 17 },
                                jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 9 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 10 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 10, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 185, column: 17 },
                                jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 185, column: 17 },
                                jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 10 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 11 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 11, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 185, column: 17 },
                                jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 185, column: 17 },
                                jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 11 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 12 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 12, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 185, column: 17 },
                                jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 185, column: 17 },
                                jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 12 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 13 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 13, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 185, column: 17 },
                                jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 185, column: 17 },
                                jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 13 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                      },
                      {
                        code: 'ANY_OF_MISSING',
                        params: [],
                        message: "Data does not match any schemas from 'anyOf'",
                        path: [ 'standardColumns', 14 ],
                        title: '#/definitions/Schema/properties/standardColumns/items',
                        inner: [
                          {
                            code: 'ANY_OF_MISSING',
                            params: [],
                            message: "Data does not match any schemas from 'anyOf'",
                            path: [ 14, 'type' ],
                            title: '#/definitions/Column/properties/type',
                            inner: [
                              {
                                code: 'ENUM_CASE_MISMATCH',
                                params: [ 'int' ],
                                message: 'Enum does not match case for: int',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                description: "Coulmn's data type.",
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 185, column: 17 },
                                jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                              },
                              {
                                code: 'INVALID_TYPE',
                                params: [ 'null', 'string' ],
                                message: 'Expected type null but found type string',
                                path: [ 'type' ],
                                title: '#/definitions/Column/properties/type',
                                position: { line: 315, column: 17 },
                                url: '.\\Tables.json',
                                directives: {},
                                jsonPosition: { line: 185, column: 17 },
                                jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                              }
                            ],
                            position: { line: 315, column: 17 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                          },
                          {
                            code: 'INVALID_TYPE',
                            params: [ 'null', 'object' ],
                            message: 'Expected type null but found type object',
                            path: [ 14 ],
                            title: '#/definitions/Schema/properties/standardColumns/items',
                            position: { line: 393, column: 20 },
                            url: '.\\Tables.json',
                            directives: {},
                            jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                          }
                        ],
                        position: { line: 393, column: 20 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                      },
                      {
                        code: 'INVALID_TYPE',
                        params: [ 'null', 'array' ],
                        message: 'Expected type null but found type array',
                        path: [ 'standardColumns' ],
                        title: '#/definitions/Schema/properties/standardColumns',
                        position: { line: 390, column: 28 },
                        url: '.\\Tables.json',
                        directives: {},
                        jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                      }
                    ],
                    position: { line: 390, column: 28 },
                    url: '.\\Tables.json',
                    directives: {},
                    jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                  },
                  {
                    code: 'INVALID_TYPE',
                    params: [ 'null', 'object' ],
                    message: 'Expected type null but found type object',
                    path: [ 'schema' ],
                    title: '#/definitions/TableProperties/properties/schema',
                    position: { line: 466, column: 19 },
                    url: '.\\Tables.json',
                    directives: {},
                    jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
                  }
                ],
                position: { line: 466, column: 19 },
                url: '.\\Tables.json',
                directives: {},
                jsonPosition: { line: 17, column: 21 },
                jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
              },
              {
                code: 'INVALID_TYPE',
                params: [ 'null', 'object' ],
                message: 'Expected type null but found type object',
                path: [ 'properties' ],
                title: '#/definitions/Table/properties/properties',
                position: { line: 488, column: 23 },
                url: '.\\Tables.json',
                directives: {},
                jsonPosition: { line: 12, column: 23 },
                jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
              }
            ],
            position: { line: 488, column: 23 },
            url: '.\\Tables.json',
            directives: {},
            jsonPosition: { line: 12, column: 23 },
            jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json'
          }
        ],
        message: "Invalid body: Data does not match any schemas from 'anyOf'",
        path: []
      }
    ]
  },
  level: '\u001b[31merror\u001b[39m',
  message: 'Found errors in validating the response with statusCode "200" for x-ms-example "Tables_Get_MaximumSet_Gen" in operation "Tables_Get".:\n'
}
{
  message: 'the validation raised below error:',
  level: '\u001b[31merror\u001b[39m'
}
{
  message: [
    {
      operationId: 'Tables_Get',
      scenario: 'TablesGet',
      source: 'response',
      responseCode: '200',
      severity: 1,
      code: 'ENUM_CASE_MISMATCH',
      details: {
        code: 'ENUM_CASE_MISMATCH',
        params: [ 'guid' ],
        message: 'Enum does not match case for: guid',
        path: '$/properties/schema/standardColumns/0/type',
        title: '#/definitions/Column/properties/type',
        description: "Coulmn's data type.",
        position: { line: 315, column: 17 },
        url: '.\\Tables.json',
        directives: {},
        jsonUrl: 'examples/TableGet.json',
        jsonPath: "$['properties']['schema']['standardColumns'][0]['type']",
        similarPaths: [ '$/properties/schema/standardColumns/2/type' ],
        similarJsonPaths: [ "$['properties']['schema']['standardColumns'][2]['type']" ]
      }
    },
    {
      operationId: 'Tables_Get',
      scenario: 'TablesGet',
      source: 'response',
      responseCode: '200',
      severity: 1,
      code: 'ENUM_CASE_MISMATCH',
      details: {
        code: 'ENUM_CASE_MISMATCH',
        params: [ 'string' ],
        message: 'Enum does not match case for: string',
        path: '$/properties/schema/standardColumns/1/type',
        title: '#/definitions/Column/properties/type',
        description: "Coulmn's data type.",
        position: { line: 315, column: 17 },
        url: '.\\Tables.json',
        directives: {},
        jsonUrl: 'examples/TableGet.json',
        jsonPath: "$['properties']['schema']['standardColumns'][1]['type']",
        similarPaths: [
          '$/properties/schema/standardColumns/3/type',
          '$/properties/schema/standardColumns/5/type',
          '$/properties/schema/standardColumns/6/type'
        ],
        similarJsonPaths: [
          "$['properties']['schema']['standardColumns'][3]['type']",
          "$['properties']['schema']['standardColumns'][5]['type']",
          "$['properties']['schema']['standardColumns'][6]['type']"
        ]
      }
    },
    {
      operationId: 'Tables_Get',
      scenario: 'TablesGet',
      source: 'response',
      responseCode: '200',
      severity: 1,
      code: 'ENUM_CASE_MISMATCH',
      details: {
        code: 'ENUM_CASE_MISMATCH',
        params: [ 'dateTime' ],
        message: 'Enum does not match case for: dateTime',
        path: '$/properties/schema/standardColumns/4/type',
        title: '#/definitions/Column/properties/type',
        description: "Coulmn's data type.",
        position: { line: 315, column: 17 },
        url: '.\\Tables.json',
        directives: {},
        jsonUrl: 'examples/TableGet.json',
        jsonPath: "$['properties']['schema']['standardColumns'][4]['type']"
      }
    },
    {
      operationId: 'Tables_Get',
      scenario: 'Tables_Get_MaximumSet_Gen',
      source: 'response',
      responseCode: '200',
      severity: 1,
      code: 'ENUM_CASE_MISMATCH',
      details: {
        code: 'ENUM_CASE_MISMATCH',
        params: [ 'guid' ],
        message: 'Enum does not match case for: guid',
        path: '$/properties/schema/standardColumns/0/type',
        title: '#/definitions/Column/properties/type',
        description: "Coulmn's data type.",
        position: { line: 315, column: 17 },
        url: '.\\Tables.json',
        directives: {},
        jsonPosition: { line: 185, column: 17 },
        jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json',
        jsonPath: "$['properties']['schema']['standardColumns'][0]['type']"
      }
    },
    {
      operationId: 'Tables_Get',
      scenario: 'Tables_Get_MaximumSet_Gen',
      source: 'response',
      responseCode: '200',
      severity: 1,
      code: 'ENUM_CASE_MISMATCH',
      details: {
        code: 'ENUM_CASE_MISMATCH',
        params: [ 'string' ],
        message: 'Enum does not match case for: string',
        path: '$/properties/schema/standardColumns/1/type',
        title: '#/definitions/Column/properties/type',
        description: "Coulmn's data type.",
        position: { line: 315, column: 17 },
        url: '.\\Tables.json',
        directives: {},
        jsonPosition: { line: 185, column: 17 },
        jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json',
        jsonPath: "$['properties']['schema']['standardColumns'][1]['type']",
        similarPaths: [
          '$/properties/schema/standardColumns/3/type',
          '$/properties/schema/standardColumns/4/type',
          '$/properties/schema/standardColumns/5/type'
        ],
        similarJsonPaths: [
          "$['properties']['schema']['standardColumns'][3]['type']",
          "$['properties']['schema']['standardColumns'][4]['type']",
          "$['properties']['schema']['standardColumns'][5]['type']"
        ]
      }
    },
    {
      operationId: 'Tables_Get',
      scenario: 'Tables_Get_MaximumSet_Gen',
      source: 'response',
      responseCode: '200',
      severity: 1,
      code: 'ENUM_CASE_MISMATCH',
      details: {
        code: 'ENUM_CASE_MISMATCH',
        params: [ 'dateTime' ],
        message: 'Enum does not match case for: dateTime',
        path: '$/properties/schema/standardColumns/2/type',
        title: '#/definitions/Column/properties/type',
        description: "Coulmn's data type.",
        position: { line: 315, column: 17 },
        url: '.\\Tables.json',
        directives: {},
        jsonPosition: { line: 185, column: 17 },
        jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json',
        jsonPath: "$['properties']['schema']['standardColumns'][2]['type']"
      }
    },
    {
      operationId: 'Tables_Get',
      scenario: 'Tables_Get_MaximumSet_Gen',
      source: 'response',
      responseCode: '200',
      severity: 1,
      code: 'ENUM_CASE_MISMATCH',
      details: {
        code: 'ENUM_CASE_MISMATCH',
        params: [ 'int' ],
        message: 'Enum does not match case for: int',
        path: '$/properties/schema/standardColumns/6/type',
        title: '#/definitions/Column/properties/type',
        description: "Coulmn's data type.",
        position: { line: 315, column: 17 },
        url: '.\\Tables.json',
        directives: {},
        jsonPosition: { line: 185, column: 17 },
        jsonUrl: 'examples/Tables_Get_MaximumSet_Gen.json',
        jsonPath: "$['properties']['schema']['standardColumns'][6]['type']",
        similarPaths: [
          '$/properties/schema/standardColumns/7/type',
          '$/properties/schema/standardColumns/8/type',
          '$/properties/schema/standardColumns/9/type',
          '$/properties/schema/standardColumns/10/type',
          '$/properties/schema/standardColumns/11/type',
          '$/properties/schema/standardColumns/12/type',
          '$/properties/schema/standardColumns/13/type',
          '$/properties/schema/standardColumns/14/type'
        ],
        similarJsonPaths: [
          "$['properties']['schema']['standardColumns'][7]['type']",
          "$['properties']['schema']['standardColumns'][8]['type']",
          "$['properties']['schema']['standardColumns'][9]['type']",
          "$['properties']['schema']['standardColumns'][10]['type']",
          "$['properties']['schema']['standardColumns'][11]['type']",
          "$['properties']['schema']['standardColumns'][12]['type']",
          "$['properties']['schema']['standardColumns'][13]['type']",
          "$['properties']['schema']['standardColumns'][14]['type']"
        ]
      }
    }
  ],
  level: '\u001b[31merror\u001b[39m'
}
start generated example for Tables_Delete, rule:MaximumSet
{ message: 'extractResponse', level: '\u001b[32minfo\u001b[39m' }
{
  message: {
    parameters: {
      subscriptionId: '00000000-0000-0000-0000-00000000000',
      resourceGroupName: 'rgTables',
      workspaceName: 'oiautorest6685',
      'api-version': '2020-10-01',
      tableName: 'AzureNetworkFlow'
    },
    responses: {
      '200': { headers: undefined, body: undefined },
      '202': { headers: undefined, body: undefined }
    }
  },
  level: '\u001b[32minfo\u001b[39m'
}
example file path: C:\one\Mgmt\azure-rest-api-specs\specification\operationalinsights\resource-manager\Microsoft.OperationalInsights\preview\2021-03-01-privatepreview\examples\Tables_Delete_MaximumSet_Gen.json
{
  message: 'start validating generated example for Tables_Delete',
  level: '\u001b[32minfo\u001b[39m'
}
{
  message: 'Validating "examples" and "x-ms-examples" in  .\\Tables.json:\n',
  level: '\u001b[32minfo\u001b[39m'
}
{
  code: 'RESPONSE_SCHEMA_NOT_IN_SPEC',
  id: 'OAV113',
  message: 'Response statusCode "200" for operation "Tables_Delete" has response body provided in the example, however the response does not have a "schema" defined in the swagger spec.',
  level: '\u001b[31merror\u001b[39m'
}
{
  code: 'RESPONSE_SCHEMA_NOT_IN_SPEC',
  id: 'OAV113',
  message: 'Response statusCode "202" for operation "Tables_Delete" has response body provided in the example, however the response does not have a "schema" defined in the swagger spec.',
  level: '\u001b[31merror\u001b[39m'
}
{
  message: 'Request parameters for x-ms-example "TablesGet" in operation "Tables_Delete" is valid.',
  level: '\u001b[32minfo\u001b[39m'
}
{
  '0': {
    code: 'RESPONSE_VALIDATION_ERROR',
    id: 'OAV108',
    message: 'Found errors in validating the response with statusCode "200" for x-ms-example "TablesGet" in operation "Tables_Delete".',
    innerErrors: [
      {
        code: 'RESPONSE_SCHEMA_NOT_IN_SPEC',
        id: 'OAV113',
        message: 'Response statusCode "200" for operation "Tables_Delete" has response body provided in the example, however the response does not have a "schema" defined in the swagger spec.',
        level: 'error',
        [Symbol(level)]: 'error',
        [Symbol(message)]: '{"code":"RESPONSE_SCHEMA_NOT_IN_SPEC","id":"OAV113","message":"Response statusCode \\"200\\" for operation \\"Tables_Delete\\" has response body provided in the example, however the response does not have a \\"schema\\" defined in the swagger spec.","level":"error"}'
      }
    ]
  },
  level: '\u001b[31merror\u001b[39m',
  message: 'Found errors in validating the response with statusCode "200" for x-ms-example "TablesGet" in operation "Tables_Delete".:\n'
}
{
  '0': {
    code: 'RESPONSE_VALIDATION_ERROR',
    id: 'OAV108',
    message: 'Found errors in validating the response with statusCode "202" for x-ms-example "TablesGet" in operation "Tables_Delete".',
    innerErrors: [
      {
        code: 'RESPONSE_SCHEMA_NOT_IN_SPEC',
        id: 'OAV113',
        message: 'Response statusCode "202" for operation "Tables_Delete" has response body provided in the example, however the response does not have a "schema" defined in the swagger spec.',
        level: 'error',
        [Symbol(level)]: 'error',
        [Symbol(message)]: '{"code":"RESPONSE_SCHEMA_NOT_IN_SPEC","id":"OAV113","message":"Response statusCode \\"202\\" for operation \\"Tables_Delete\\" has response body provided in the example, however the response does not have a \\"schema\\" defined in the swagger spec.","level":"error"}'
      }
    ]
  },
  level: '\u001b[31merror\u001b[39m',
  message: 'Found errors in validating the response with statusCode "202" for x-ms-example "TablesGet" in operation "Tables_Delete".:\n'
}
{
  message: 'Request parameters for x-ms-example "Tables_Delete_MaximumSet_Gen" in operation "Tables_Delete" is valid.',
  level: '\u001b[32minfo\u001b[39m'
}
{
  message: 'Response with statusCode "200" for x-ms-example "Tables_Delete_MaximumSet_Gen" in operation "Tables_Delete" is valid.',
  level: '\u001b[32minfo\u001b[39m'
}
{
  message: 'Response with statusCode "202" for x-ms-example "Tables_Delete_MaximumSet_Gen" in operation "Tables_Delete" is valid.',
  level: '\u001b[32minfo\u001b[39m'
}
{
  message: 'the validation raised below error:',
  level: '\u001b[31merror\u001b[39m'
}
{
  message: [
    {
      operationId: 'Tables_Delete',
      scenario: 'TablesGet',
      source: 'response',
      responseCode: '200',
      severity: 0,
      code: 'RESPONSE_SCHEMA_NOT_IN_SPEC',
      details: {
        code: 'RESPONSE_SCHEMA_NOT_IN_SPEC',
        id: 'OAV113',
        message: 'Response statusCode "200" for operation "Tables_Delete" has response body provided in the example, however the response does not have a "schema" defined in the swagger spec.',
        level: 'error',
        [Symbol(level)]: 'error',
        [Symbol(message)]: '{"code":"RESPONSE_SCHEMA_NOT_IN_SPEC","id":"OAV113","message":"Response statusCode \\"200\\" for operation \\"Tables_Delete\\" has response body provided in the example, however the response does not have a \\"schema\\" defined in the swagger spec.","level":"error"}'
      }
    },
    {
      operationId: 'Tables_Delete',
      scenario: 'TablesGet',
      source: 'response',
      responseCode: '202',
      severity: 0,
      code: 'RESPONSE_SCHEMA_NOT_IN_SPEC',
      details: {
        code: 'RESPONSE_SCHEMA_NOT_IN_SPEC',
        id: 'OAV113',
        message: 'Response statusCode "202" for operation "Tables_Delete" has response body provided in the example, however the response does not have a "schema" defined in the swagger spec.',
        level: 'error',
        [Symbol(level)]: 'error',
        [Symbol(message)]: '{"code":"RESPONSE_SCHEMA_NOT_IN_SPEC","id":"OAV113","message":"Response statusCode \\"202\\" for operation \\"Tables_Delete\\" has response body provided in the example, however the response does not have a \\"schema\\" defined in the swagger spec.","level":"error"}'
      }
    }
  ],
  level: '\u001b[31merror\u001b[39m'
}
