{
  "swagger": "2.0",
  "info": {
    "title": "DataPlaneAccountClient",
    "description": "Creates a Microsoft.Purview data plane account client.",
    "version": "2023-10-01-preview"
  },
  "host": "purview.azure.com",
  "basePath": "/account/",
  "schemes": [
    "https"
  ],
  "paths": {
    "/": {
      "get": {
        "tags": [
          "Account"
        ],
        "description": "Get an account",
        "operationId": "Accounts_GetAccountProperties",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          },
          "default": {
            "description": "An error response received from the provider.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseModel"
            }
          }
        },
        "x-ms-examples": {
          "Accounts_GetAccountProperties": {
            "$ref": "./examples/Accounts_GetAccountProperties.json"
          }
        }
      },
      "patch": {
        "tags": [
          "Account"
        ],
        "description": "Updates an account",
        "operationId": "Accounts_UpdateAccountProperties",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DataPlaneAccountUpdateParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          },
          "default": {
            "description": "An error response received from the provider.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseModel"
            }
          }
        },
        "x-ms-examples": {
          "Accounts_UpdateAccountProperties": {
            "$ref": "./examples/Accounts_UpdateAccountProperties.json"
          }
        }
      }
    },
    "/listkeys": {
      "post": {
        "tags": [
          "Account"
        ],
        "description": "Lists the connection strings that allow connecting with the Managed Event Hub, if it is provisioned. Those connection strings are aimed to receive messages from the ATLAS_ENTITIES hub or to send messages to the ATLAS_HOOK hub.",
        "operationId": "Accounts_GetAccessKeys",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AccessKeys"
            }
          },
          "default": {
            "description": "An error response received from the provider.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseModel"
            }
          }
        },
        "x-ms-examples": {
          "Accounts_GetAccessKeys": {
            "$ref": "./examples/Accounts_GetAccessKeys.json"
          }
        }
      }
    },
    "/regeneratekeys": {
      "post": {
        "tags": [
          "Account"
        ],
        "description": "Regenerates either the primary or secondary key of the Managed Event Hub, if it is provisioned.",
        "operationId": "Accounts_RegenerateAccessKeys",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccessKeyOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AccessKeys"
            }
          },
          "default": {
            "description": "An error response received from the provider.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseModel"
            }
          }
        },
        "x-ms-examples": {
          "Accounts_RegenerateAccessKeys": {
            "$ref": "./examples/Accounts_RegenerateAccessKeys.json"
          }
        }
      }
    },
    "/collections/{collectionName}": {
      "get": {
        "tags": [
          "Collection"
        ],
        "description": "Get a collection",
        "operationId": "Collections_GetCollection",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collectionName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Collection"
            }
          },
          "default": {
            "description": "An error response received from the provider.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseModel"
            }
          }
        },
        "x-ms-examples": {
          "Collections_GetCollection": {
            "$ref": "./examples/Collections_GetCollection.json"
          }
        }
      },
      "put": {
        "tags": [
          "Collection"
        ],
        "description": "Creates or updates a collection entity.",
        "operationId": "Collections_CreateOrUpdateCollection",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collectionName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Collection"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Collection"
            }
          },
          "default": {
            "description": "An error response received from the provider.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseModel"
            }
          }
        },
        "x-ms-examples": {
          "Collections_CreateOrUpdateCollection": {
            "$ref": "./examples/Collections_CreateOrUpdateCollection.json"
          }
        }
      },
      "delete": {
        "tags": [
          "Collection"
        ],
        "description": "Deletes a Collection entity.",
        "operationId": "Collections_DeleteCollection",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collectionName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "An error response received from the provider.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseModel"
            }
          }
        },
        "x-ms-examples": {
          "Collections_DeleteCollection": {
            "$ref": "./examples/Collections_DeleteCollection.json"
          }
        }
      }
    },
    "/collections": {
      "get": {
        "tags": [
          "Collection"
        ],
        "description": "List the collections in the account.",
        "operationId": "Collections_ListCollections",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "query",
            "name": "$skipToken",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CollectionList"
            }
          },
          "default": {
            "description": "An error response received from the provider.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseModel"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "Collections_ListCollections": {
            "$ref": "./examples/Collections_ListCollections.json"
          }
        }
      }
    },
    "/collections/{collectionName}/getChildCollectionNames": {
      "get": {
        "tags": [
          "Collection"
        ],
        "description": "Lists the child collections names in the collection.",
        "operationId": "Collections_ListChildCollectionNames",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collectionName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "query",
            "name": "$skipToken",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CollectionNameResponseList"
            }
          },
          "default": {
            "description": "An error response received from the provider.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseModel"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "Collections_ListChildCollectionNames": {
            "$ref": "./examples/Collections_ListChildCollectionNames.json"
          }
        }
      }
    },
    "/collections/{collectionName}/getCollectionPath": {
      "get": {
        "tags": [
          "Collection"
        ],
        "description": "Gets the parent name and parent friendly name chains that represent the collection path.",
        "operationId": "Collections_GetCollectionPath",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collectionName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "query",
            "name": "$skipToken",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CollectionPathResponse"
            }
          },
          "default": {
            "description": "An error response received from the provider.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseModel"
            }
          }
        },
        "x-ms-examples": {
          "Collections_GetCollectionPath": {
            "$ref": "./examples/Collections_GetCollectionPath.json"
          }
        }
      }
    },
    "/contactAssignments/{contactAssignmentId}": {
      "get": {
        "tags": [
          "ContactAssignment"
        ],
        "description": "Get a contactAssignment",
        "operationId": "ContactAssignments_GetContactAssignment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contactAssignmentId",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ContactAssignment"
            }
          },
          "default": {
            "description": "An error response received from the provider.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseModel"
            }
          }
        },
        "x-ms-examples": {
          "ContactAssignments_GetContactAssignment": {
            "$ref": "./examples/ContactAssignments_GetContactAssignment.json"
          }
        }
      },
      "put": {
        "tags": [
          "ContactAssignment"
        ],
        "description": "Creates or updates a contactAssignment entity.",
        "operationId": "ContactAssignments_CreateOrUpdateContactAssignment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contactAssignmentId",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContactAssignment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ContactAssignment"
            }
          },
          "default": {
            "description": "An error response received from the provider.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseModel"
            }
          }
        },
        "x-ms-examples": {
          "ContactAssignments_CreateOrUpdateContactAssignment": {
            "$ref": "./examples/ContactAssignments_CreateOrUpdateContactAssignment.json"
          }
        }
      },
      "delete": {
        "tags": [
          "ContactAssignment"
        ],
        "description": "Deletes a ContactAssignment entity.",
        "operationId": "ContactAssignments_DeleteContactAssignment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contactAssignmentId",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "An error response received from the provider.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseModel"
            }
          }
        },
        "x-ms-examples": {
          "ContactAssignments_DeleteContactAssignment": {
            "$ref": "./examples/ContactAssignments_DeleteContactAssignment.json"
          }
        }
      }
    },
    "/contactAssignments": {
      "get": {
        "tags": [
          "ContactAssignment"
        ],
        "description": "List the contactAssignments in the account.",
        "operationId": "ContactAssignments_ListContactAssignments",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "scope",
            "type": "string"
          },
          {
            "in": "query",
            "name": "contactGroupDefinition",
            "type": "string"
          },
          {
            "in": "query",
            "name": "referenceType",
            "type": "string",
            "enum": [
              "Unknown",
              "CollectionReference",
              "ContactGroupDefinitionReference",
              "DatasourceReference",
              "ScanReference",
              "AdaptiveScopeReference"
            ],
            "x-ms-enum": {
              "name": "EntityReferenceType",
              "modelAsString": true
            }
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "query",
            "name": "$skipToken",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ContactAssignmentList"
            }
          },
          "default": {
            "description": "An error response received from the provider.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseModel"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "ContactAssignments_ListContactAssignments": {
            "$ref": "./examples/ContactAssignments_ListContactAssignments.json"
          }
        }
      }
    },
    "/getScopedContactGroupNames": {
      "get": {
        "tags": [
          "ContactAssignment"
        ],
        "description": "Gets the distinct list of contact group names for the provided scope.",
        "operationId": "ContactAssignments_ListScopedContactGroupNames",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "scope",
            "type": "string"
          },
          {
            "in": "query",
            "name": "referenceType",
            "type": "string",
            "enum": [
              "Unknown",
              "CollectionReference",
              "ContactGroupDefinitionReference",
              "DatasourceReference",
              "ScanReference",
              "AdaptiveScopeReference"
            ],
            "x-ms-enum": {
              "name": "EntityReferenceType",
              "modelAsString": true
            }
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "query",
            "name": "$skipToken",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ContactGroupNameList"
            }
          },
          "default": {
            "description": "An error response received from the provider.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseModel"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "ContactAssignments_ListScopedContactGroupNames": {
            "$ref": "./examples/ContactAssignments_ListScopedContactGroupNames.json"
          }
        }
      }
    },
    "/contactGroupDefinitions/{contactGroupDefinitionName}": {
      "get": {
        "tags": [
          "ContactGroupDefinition"
        ],
        "description": "Get a contactGroupDefinition",
        "operationId": "ContactGroupDefinitions_GetContactGroupDefinition",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contactGroupDefinitionName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ContactGroupDefinition"
            }
          },
          "default": {
            "description": "An error response received from the provider.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseModel"
            }
          }
        },
        "x-ms-examples": {
          "ContactGroupDefinitions_GetContactGroupDefinition": {
            "$ref": "./examples/ContactGroupDefinitions_GetContactGroupDefinition.json"
          }
        }
      },
      "put": {
        "tags": [
          "ContactGroupDefinition"
        ],
        "description": "Creates or updates a contact group definition entity.",
        "operationId": "ContactGroupDefinitions_CreateOrUpdateContactGroupDefinition",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contactGroupDefinitionName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContactGroupDefinition"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ContactGroupDefinition"
            }
          },
          "default": {
            "description": "An error response received from the provider.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseModel"
            }
          }
        },
        "x-ms-examples": {
          "ContactGroupDefinitions_CreateOrUpdateContactGroupDefinition": {
            "$ref": "./examples/ContactGroupDefinitions_CreateOrUpdateContactGroupDefinition.json"
          }
        }
      },
      "delete": {
        "tags": [
          "ContactGroupDefinition"
        ],
        "description": "Deletes a ContactGroupDefinition entity.",
        "operationId": "ContactGroupDefinitions_DeleteContactGroupDefinition",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contactGroupDefinitionName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "An error response received from the provider.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseModel"
            }
          }
        },
        "x-ms-examples": {
          "ContactGroupDefinitions_DeleteContactGroupDefinition": {
            "$ref": "./examples/ContactGroupDefinitions_DeleteContactGroupDefinition.json"
          }
        }
      }
    },
    "/contactGroupDefinitions": {
      "get": {
        "tags": [
          "ContactGroupDefinition"
        ],
        "description": "List the contactGroupDefinitions in the account.",
        "operationId": "ContactGroupDefinitions_ListContactGroupDefinitions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "query",
            "name": "$skipToken",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ContactGroupDefinitionList"
            }
          },
          "default": {
            "description": "An error response received from the provider.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseModel"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "ContactGroupDefinitions_ListContactGroupDefinitions": {
            "$ref": "./examples/ContactGroupDefinitions_ListContactGroupDefinitions.json"
          }
        }
      }
    },
    "/domains/{domainName}": {
      "get": {
        "tags": [
          "Domain"
        ],
        "description": "Get a domain",
        "operationId": "Domains_GetDomain",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "domainName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Domain"
            }
          },
          "default": {
            "description": "An error response received from the provider.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseModel"
            }
          }
        },
        "x-ms-examples": {
          "Domains_GetDomain": {
            "$ref": "./examples/Domains_GetDomain.json"
          }
        }
      }
    },
    "/domains": {
      "get": {
        "tags": [
          "Domain"
        ],
        "description": "List the domains in the account.",
        "operationId": "Domains_ListDomains",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "query",
            "name": "$skipToken",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DomainList"
            }
          },
          "default": {
            "description": "An error response received from the provider.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseModel"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "Domains_ListDomains": {
            "$ref": "./examples/Domains_ListDomains.json"
          }
        }
      }
    },
    "/features": {
      "post": {
        "tags": [
          "ExposureControl"
        ],
        "description": "Gets details from a list of features.",
        "operationId": "ExposureControl_GetFeatures",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchFeatureRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BatchFeatureStatus"
            }
          },
          "default": {
            "description": "An error response received from the provider.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseModel"
            }
          }
        },
        "x-ms-examples": {
          "ExposureControl_GetFeatures": {
            "$ref": "./examples/ExposureControl_GetFeatures.json"
          }
        }
      }
    },
    "/resourceSetRuleConfigs/defaultResourceSetRuleConfig": {
      "get": {
        "tags": [
          "ResourceSetRuleConfig"
        ],
        "description": "Get a resource set config service model.",
        "operationId": "ResourceSetRules_GetResourceSetRule",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ResourceSetRuleConfig"
            }
          },
          "default": {
            "description": "An error response received from the provider.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseModel"
            }
          }
        },
        "x-ms-examples": {
          "ResourceSetRules_GetResourceSetRule": {
            "$ref": "./examples/ResourceSetRules_GetResourceSetRule.json"
          }
        }
      },
      "put": {
        "tags": [
          "ResourceSetRuleConfig"
        ],
        "description": "Creates or updates an resource set config.",
        "operationId": "ResourceSetRules_CreateOrUpdateResourceSetRule",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResourceSetRuleConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ResourceSetRuleConfig"
            }
          },
          "default": {
            "description": "An error response received from the provider.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseModel"
            }
          }
        },
        "x-ms-examples": {
          "ResourceSetRules_CreateOrUpdateResourceSetRule": {
            "$ref": "./examples/ResourceSetRules_CreateOrUpdateResourceSetRule.json"
          }
        }
      },
      "delete": {
        "tags": [
          "ResourceSetRuleConfig"
        ],
        "description": "Deletes a ResourceSetRuleConfig resource.",
        "operationId": "ResourceSetRules_DeleteResourceSetRule",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "An error response received from the provider.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseModel"
            }
          }
        },
        "x-ms-examples": {
          "ResourceSetRules_DeleteResourceSetRule": {
            "$ref": "./examples/ResourceSetRules_DeleteResourceSetRule.json"
          }
        }
      }
    },
    "/resourceSetRuleConfigs": {
      "get": {
        "tags": [
          "ResourceSetRuleConfig"
        ],
        "description": "Get a resource set config service model.",
        "operationId": "ResourceSetRules_ListResourceSetRules",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "query",
            "name": "$skipToken",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ResourceSetRuleConfigList"
            }
          },
          "default": {
            "description": "An error response received from the provider.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseModel"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "ResourceSetRules_ListResourceSetRules": {
            "$ref": "./examples/ResourceSetRules_ListResourceSetRules.json"
          }
        }
      }
    }
  },
  "definitions": {
    "AccessKeyOptions": {
      "description": "A access key options used for regeneration.",
      "type": "object",
      "properties": {
        "keyType": {
          "description": "The access key type.",
          "enum": [
            "PrimaryAtlasKafkaKey",
            "SecondaryAtlasKafkaKey"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "AccessKeyType",
            "modelAsString": true
          }
        }
      }
    },
    "AccessKeys": {
      "description": "The Account access keys.",
      "type": "object",
      "properties": {
        "atlasKafkaPrimaryEndpoint": {
          "description": "Gets or sets the primary connection string.",
          "type": "string"
        },
        "atlasKafkaSecondaryEndpoint": {
          "description": "Gets or sets the secondary connection string.",
          "type": "string"
        }
      }
    },
    "Account": {
      "description": "Account resource",
      "type": "object",
      "properties": {
        "id": {
          "description": "Gets or sets the identifier.",
          "type": "string",
          "readOnly": true
        },
        "identity": {
          "$ref": "#/definitions/Identity"
        },
        "location": {
          "description": "Gets or sets the location.",
          "type": "string"
        },
        "name": {
          "description": "Gets or sets the name.",
          "type": "string",
          "readOnly": true
        },
        "properties": {
          "$ref": "#/definitions/AccountProperties"
        },
        "sku": {
          "$ref": "#/definitions/AccountSku"
        },
        "systemData": {
          "$ref": "#/definitions/SystemData"
        },
        "tags": {
          "description": "Tags on the azure resource.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "type": {
          "description": "Gets or sets the type.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "AccountEndpoints": {
      "description": "The account endpoints",
      "type": "object",
      "properties": {
        "catalog": {
          "description": "Gets the catalog endpoint.",
          "type": "string",
          "readOnly": true
        },
        "scan": {
          "description": "Gets the scan endpoint.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "AccountMergeInfo": {
      "description": "The public Account Merge Info model.",
      "type": "object",
      "properties": {
        "accountLocation": {
          "description": "The account location of the *other* account in the merge operation.",
          "type": "string",
          "readOnly": true
        },
        "accountName": {
          "description": "The account name of the *other* account in the merge operation.",
          "type": "string",
          "readOnly": true
        },
        "accountResourceGroupName": {
          "description": "The resource group name of the *other* account in the merge operation.",
          "type": "string",
          "readOnly": true
        },
        "accountSubscriptionId": {
          "description": "The subscription id of the *other* account in the merge operation.",
          "type": "string",
          "readOnly": true
        },
        "mergeStatus": {
          "description": "The status of the merge operation.",
          "enum": [
            "Succeeded",
            "Failed",
            "InProgress"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "MergeStatus",
            "modelAsString": true
          }
        },
        "typeOfAccount": {
          "description": "The type of account this account is for the merge operation.",
          "enum": [
            "Primary",
            "Secondary"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "MergeAccountType",
            "modelAsString": true
          }
        }
      }
    },
    "AccountProperties": {
      "description": "The account properties",
      "type": "object",
      "properties": {
        "accountStatus": {
          "$ref": "#/definitions/AccountStatus"
        },
        "cloudConnectors": {
          "$ref": "#/definitions/CloudConnectors"
        },
        "createdAt": {
          "format": "date-time",
          "description": "Gets the time at which the entity was created.",
          "type": "string",
          "readOnly": true
        },
        "createdBy": {
          "description": "Gets the creator of the entity.",
          "type": "string",
          "readOnly": true
        },
        "createdByObjectId": {
          "description": "Gets the creators of the entity's object id.",
          "type": "string",
          "readOnly": true
        },
        "defaultDomain": {
          "description": "Gets or sets the default domain in the account.",
          "type": "string",
          "readOnly": true
        },
        "endpoints": {
          "$ref": "#/definitions/AccountEndpoints"
        },
        "friendlyName": {
          "description": "Gets or sets the friendly name.",
          "type": "string",
          "readOnly": true
        },
        "ingestionStorage": {
          "$ref": "#/definitions/IngestionStorage"
        },
        "managedEventHubState": {
          "description": "Gets or sets the state of managed eventhub. If enabled managed eventhub will be created, if disabled the managed eventhub will be removed.",
          "default": "NotSpecified",
          "enum": [
            "NotSpecified",
            "Disabled",
            "Enabled"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ManagedEventHubState",
            "modelAsString": true
          }
        },
        "managedResourceGroupName": {
          "description": "Gets or sets the managed resource group name",
          "type": "string"
        },
        "managedResources": {
          "$ref": "#/definitions/ManagedResources"
        },
        "managedResourcesPublicNetworkAccess": {
          "description": "Gets or sets the public network access for managed resources",
          "enum": [
            "NotSpecified",
            "Enabled",
            "Disabled"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "PublicNetworkAccess",
            "modelAsString": true
          }
        },
        "mergeInfo": {
          "$ref": "#/definitions/AccountMergeInfo"
        },
        "privateEndpointConnections": {
          "description": "Gets the private endpoint connections information.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PrivateEndpointConnection"
          },
          "readOnly": true
        },
        "provisioningState": {
          "description": "Gets or sets the state of the provisioning.",
          "enum": [
            "Unknown",
            "Creating",
            "Moving",
            "Deleting",
            "SoftDeleting",
            "SoftDeleted",
            "Failed",
            "Succeeded",
            "Canceled"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "ProvisioningState",
            "modelAsString": true
          }
        },
        "publicNetworkAccess": {
          "description": "Gets or sets the public network access.",
          "default": "Enabled",
          "enum": [
            "NotSpecified",
            "Enabled",
            "Disabled"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "PublicNetworkAccess",
            "modelAsString": true
          }
        }
      }
    },
    "AccountSku": {
      "description": "The Sku",
      "type": "object",
      "properties": {
        "capacity": {
          "format": "int32",
          "description": "Gets or sets the sku capacity.",
          "type": "integer"
        },
        "name": {
          "description": "Gets or sets the sku name.",
          "enum": [
            "Standard",
            "Free"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "AccountSkuName",
            "modelAsString": true
          }
        }
      }
    },
    "AccountStatus": {
      "description": "The account status.",
      "type": "object",
      "properties": {
        "accountProvisioningState": {
          "description": "Gets the account status code.",
          "enum": [
            "Unknown",
            "Creating",
            "Updating",
            "Moving",
            "Deleting",
            "SoftDeleting",
            "SoftDeleted",
            "Failed",
            "Succeeded",
            "Canceled"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "AccountProvisioningState",
            "modelAsString": true
          }
        },
        "errorDetails": {
          "$ref": "#/definitions/ErrorModel"
        }
      }
    },
    "AdvancedResourceSet": {
      "description": "The resource set processing property of the account.",
      "type": "object",
      "properties": {
        "modifiedAt": {
          "format": "date-time",
          "description": "Date at which ResourceSetProcessing property of the account is updated.",
          "type": "string"
        },
        "resourceSetProcessing": {
          "description": "The advanced resource property of the account.",
          "enum": [
            "Default",
            "Advanced"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "resourceSetProcessing",
            "modelAsString": true
          }
        }
      }
    },
    "BatchFeatureRequest": {
      "description": "Feature request model",
      "type": "object",
      "properties": {
        "features": {
          "description": "Set of features",
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "BatchFeatureStatus": {
      "description": "List of features with enabled status",
      "type": "object",
      "properties": {
        "features": {
          "description": "Features with enabled status",
          "type": "object",
          "additionalProperties": {
            "type": "boolean"
          },
          "readOnly": true
        }
      }
    },
    "CloudConnectors": {
      "description": "External Cloud Service connectors",
      "type": "object",
      "properties": {
        "awsExternalId": {
          "description": "AWS external identifier.\r\nConfigured in AWS to allow use of the role arn used for scanning",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "Collection": {
      "description": "Collection resource.",
      "type": "object",
      "properties": {
        "collectionProvisioningState": {
          "description": "Gets the state of the provisioning.",
          "enum": [
            "Unknown",
            "Creating",
            "Moving",
            "Deleting",
            "Failed",
            "Succeeded"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "CollectionProvisioningState",
            "modelAsString": true
          }
        },
        "description": {
          "description": "Gets or sets the description.",
          "type": "string"
        },
        "domain": {
          "description": "Gets the domain.",
          "type": "string",
          "readOnly": true
        },
        "friendlyName": {
          "description": "Gets or sets the friendly name of the collection.",
          "type": "string"
        },
        "name": {
          "description": "Gets the name.",
          "type": "string",
          "readOnly": true
        },
        "parentCollection": {
          "$ref": "#/definitions/CollectionReference"
        },
        "systemData": {
          "$ref": "#/definitions/SystemData"
        }
      }
    },
    "CollectionList": {
      "description": "Paged list of collections.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "count": {
          "format": "int64",
          "description": "Total item count.",
          "type": "integer"
        },
        "nextLink": {
          "description": "The Url of next result page.",
          "type": "string"
        },
        "value": {
          "description": "Collection of items of type results.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Collection"
          }
        }
      }
    },
    "CollectionNameResponse": {
      "description": "Collection resource.",
      "type": "object",
      "properties": {
        "friendlyName": {
          "description": "Gets or sets the friendly name of the collection.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "Gets the name.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "CollectionNameResponseList": {
      "description": "Paged list of collections.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "count": {
          "format": "int64",
          "description": "Total item count.",
          "type": "integer"
        },
        "nextLink": {
          "description": "The Url of next result page.",
          "type": "string"
        },
        "value": {
          "description": "Collection of items of type results.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CollectionNameResponse"
          }
        }
      }
    },
    "CollectionPathResponse": {
      "description": "Collection resource.",
      "type": "object",
      "properties": {
        "parentFriendlyNameChain": {
          "description": "The friendly names of ancestors starting from the default (root) collection and ending with the immediate parent.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "parentNameChain": {
          "description": "The names of ancestors starting from the default (root) collection and ending with the immediate parent.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        }
      }
    },
    "CollectionReference": {
      "description": "Reference to a Collection.",
      "type": "object",
      "properties": {
        "referenceName": {
          "description": "Gets or sets the reference name.",
          "type": "string"
        },
        "type": {
          "description": "Gets or sets the reference type property.",
          "type": "string"
        }
      }
    },
    "ComplexReplacerConfig": {
      "type": "object",
      "properties": {
        "createdBy": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "disableRecursiveReplacerApplication": {
          "type": "boolean"
        },
        "lastUpdatedTimestamp": {
          "format": "int64",
          "type": "integer"
        },
        "modifiedBy": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "typeName": {
          "type": "string"
        }
      }
    },
    "ContactAssignment": {
      "description": "ContactAssignment resource.",
      "type": "object",
      "properties": {
        "assignmentId": {
          "format": "uuid",
          "description": "Gets or sets the id of the assignment.",
          "type": "string"
        },
        "contactGroup": {
          "$ref": "#/definitions/EntityReference"
        },
        "principalId": {
          "description": "Gets or sets the principal Id.",
          "type": "string"
        },
        "scope": {
          "$ref": "#/definitions/EntityReference"
        },
        "systemData": {
          "$ref": "#/definitions/SystemData"
        }
      }
    },
    "ContactAssignmentList": {
      "description": "Paged list of contactAssignment.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "count": {
          "format": "int64",
          "description": "Total item count.",
          "type": "integer"
        },
        "nextLink": {
          "description": "The Url of next result page.",
          "type": "string"
        },
        "value": {
          "description": "Collection of items of type results.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContactAssignment"
          }
        }
      }
    },
    "ContactGroupDefinition": {
      "description": "ContactGroupDefinition resource.",
      "type": "object",
      "properties": {
        "contactGroupType": {
          "description": "Gets or sets the contact group definition type.",
          "enum": [
            "Custom",
            "System"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "ContactGroupType",
            "modelAsString": true
          }
        },
        "description": {
          "description": "Gets or sets the description.",
          "type": "string"
        },
        "friendlyName": {
          "description": "Gets or sets the friendly name.",
          "type": "string"
        },
        "name": {
          "description": "Gets the name.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ContactGroupDefinitionList": {
      "description": "Paged list of contactGroupDefinition.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "count": {
          "format": "int64",
          "description": "Total item count.",
          "type": "integer"
        },
        "nextLink": {
          "description": "The Url of next result page.",
          "type": "string"
        },
        "value": {
          "description": "Collection of items of type results.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContactGroupDefinition"
          }
        }
      }
    },
    "ContactGroupNameList": {
      "description": "Paged list of contact group names.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "count": {
          "format": "int64",
          "description": "Total item count.",
          "type": "integer"
        },
        "nextLink": {
          "description": "The Url of next result page.",
          "type": "string"
        },
        "value": {
          "description": "Collection of items of type results.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "DataPlaneAccountUpdateParameters": {
      "description": "The account properties that can be updated through data plane.",
      "type": "object",
      "properties": {
        "friendlyName": {
          "description": "The friendly name for the azure resource.",
          "type": "string"
        }
      }
    },
    "Domain": {
      "description": "Domain resource.",
      "type": "object",
      "properties": {
        "containerType": {
          "description": "Gets the container type.",
          "enum": [
            "Domain",
            "Collection"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ContainerType",
            "modelAsString": true
          }
        },
        "description": {
          "description": "Gets or sets the description.",
          "type": "string"
        },
        "environment": {
          "description": "Gets the environment of the domain.",
          "enum": [
            "Prod",
            "Test"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "DomainEnvironment",
            "modelAsString": true
          }
        },
        "friendlyName": {
          "description": "Gets or sets the friendly name of the domain.",
          "type": "string"
        },
        "identity": {
          "$ref": "#/definitions/Identity",
          "readOnly": true
        },
        "mergeInfo": {
          "$ref": "#/definitions/DomainMergeInfo",
          "readOnly": true
        },
        "name": {
          "description": "Gets the name.",
          "type": "string",
          "readOnly": true
        },
        "provisioningState": {
          "description": "Gets the state of the provisioning.",
          "enum": [
            "Unknown",
            "Creating",
            "Moving",
            "Deleting",
            "Failed",
            "Succeeded"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "DomainProvisioningState",
            "modelAsString": true
          }
        },
        "systemData": {
          "$ref": "#/definitions/SystemData"
        }
      }
    },
    "DomainList": {
      "description": "Paged list of domains.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "count": {
          "format": "int64",
          "description": "Total item count.",
          "type": "integer"
        },
        "nextLink": {
          "description": "The Url of next result page.",
          "type": "string"
        },
        "value": {
          "description": "Collection of items of type results.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Domain"
          }
        }
      }
    },
    "DomainMergeInfo": {
      "description": "The public Domain Merge Info model.",
      "type": "object",
      "properties": {
        "accountLocation": {
          "description": "The account location of the source account in the merge operation.",
          "type": "string",
          "readOnly": true
        },
        "accountName": {
          "description": "The account name of the source account in the merge operation.",
          "type": "string",
          "readOnly": true
        },
        "accountResourceGroupName": {
          "description": "The resource group name of the source account in the merge operation.",
          "type": "string",
          "readOnly": true
        },
        "accountSubscriptionId": {
          "description": "The subscription id of the source account in the merge operation.",
          "type": "string",
          "readOnly": true
        },
        "mergeStatus": {
          "description": "The status of the merge operation.",
          "enum": [
            "Succeeded",
            "Failed",
            "InProgress"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "MergeStatus",
            "modelAsString": true
          }
        }
      }
    },
    "EntityReference": {
      "description": "Entity reference type.",
      "type": "object",
      "properties": {
        "referenceName": {
          "description": "Gets or sets the reference name.",
          "type": "string"
        },
        "type": {
          "description": "Gets or sets the reference type property.",
          "enum": [
            "Unknown",
            "CollectionReference",
            "ContactGroupDefinitionReference",
            "DatasourceReference",
            "ScanReference",
            "AdaptiveScopeReference"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "EntityReferenceType",
            "modelAsString": true
          }
        }
      }
    },
    "ErrorModel": {
      "description": "Default error model",
      "type": "object",
      "properties": {
        "code": {
          "description": "Gets or sets the code.",
          "type": "string",
          "readOnly": true
        },
        "details": {
          "description": "Gets or sets the details.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ErrorModel"
          },
          "readOnly": true
        },
        "message": {
          "description": "Gets or sets the messages.",
          "type": "string",
          "readOnly": true
        },
        "target": {
          "description": "Gets or sets the target.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ErrorResponseModel": {
      "description": "Default error response model",
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/ErrorModel"
        }
      }
    },
    "FastRegex": {
      "type": "object",
      "properties": {
        "maxDigits": {
          "format": "int32",
          "type": "integer"
        },
        "maxLetters": {
          "format": "int32",
          "type": "integer"
        },
        "minDashes": {
          "format": "int32",
          "type": "integer"
        },
        "minDigits": {
          "format": "int32",
          "type": "integer"
        },
        "minDigitsOrLetters": {
          "format": "int32",
          "type": "integer"
        },
        "minDots": {
          "format": "int32",
          "type": "integer"
        },
        "minHex": {
          "format": "int32",
          "type": "integer"
        },
        "minLetters": {
          "format": "int32",
          "type": "integer"
        },
        "minUnderscores": {
          "format": "int32",
          "type": "integer"
        },
        "options": {
          "format": "int32",
          "type": "integer"
        },
        "regexStr": {
          "type": "string"
        }
      }
    },
    "Filter": {
      "required": [
        "name",
        "path"
      ],
      "type": "object",
      "properties": {
        "createdBy": {
          "default": "AzureDataCatalog",
          "type": "string"
        },
        "filterType": {
          "enum": [
            "Pattern",
            "Regex"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "FilterType",
            "modelAsString": true
          }
        },
        "lastUpdatedTimestamp": {
          "format": "int64",
          "type": "integer"
        },
        "modifiedBy": {
          "default": "AzureDataCatalog",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "path": {
          "type": "string"
        }
      }
    },
    "Identity": {
      "description": "The Managed Identity of the resource",
      "type": "object",
      "properties": {
        "principalId": {
          "description": "Service principal object Id",
          "type": "string",
          "readOnly": true
        },
        "tenantId": {
          "description": "Tenant Id",
          "type": "string",
          "readOnly": true
        },
        "type": {
          "description": "Identity Type",
          "enum": [
            "None",
            "SystemAssigned",
            "UserAssigned"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ManagedIdentityType",
            "modelAsString": true
          }
        },
        "userAssignedIdentities": {
          "description": "User Assigned Identities",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/UserAssignedIdentity"
          }
        }
      }
    },
    "IngestionStorage": {
      "description": "Ingestion Storage Account Info",
      "type": "object",
      "properties": {
        "id": {
          "description": "Gets or sets the Id.",
          "type": "string",
          "readOnly": true
        },
        "primaryEndpoint": {
          "description": "Gets or sets the primary endpoint.",
          "type": "string",
          "readOnly": true
        },
        "publicNetworkAccess": {
          "description": "Gets or sets the public network access setting",
          "enum": [
            "NotSpecified",
            "Enabled",
            "Disabled"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "PublicNetworkAccess",
            "modelAsString": true
          }
        }
      }
    },
    "ManagedResources": {
      "description": "The managed resources in customer subscription.",
      "type": "object",
      "properties": {
        "eventHubNamespace": {
          "description": "Gets the managed event hub namespace resource identifier.",
          "type": "string",
          "readOnly": true
        },
        "resourceGroup": {
          "description": "Gets the managed resource group resource identifier. This resource group will host resource dependencies for the account.",
          "type": "string",
          "readOnly": true
        },
        "storageAccount": {
          "description": "Gets the managed storage account resource identifier.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "NormalizationRule": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "dynamicReplacement": {
          "type": "boolean"
        },
        "entityTypes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "lastUpdatedTimestamp": {
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "regex": {
          "$ref": "#/definitions/FastRegex"
        },
        "replaceWith": {
          "type": "string"
        },
        "version": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "PathPatternExtractorConfig": {
      "required": [
        "createdBy",
        "enableDefaultPatterns"
      ],
      "type": "object",
      "properties": {
        "acceptedPatterns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Filter"
          }
        },
        "complexReplacers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ComplexReplacerConfig"
          }
        },
        "createdBy": {
          "type": "string"
        },
        "enableDefaultPatterns": {
          "type": "boolean"
        },
        "lastUpdatedTimestamp": {
          "format": "int64",
          "type": "integer"
        },
        "modifiedBy": {
          "default": "AzureDataCatalog",
          "type": "string"
        },
        "normalizationRules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NormalizationRule"
          }
        },
        "regexReplacers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RegexReplacer"
          }
        },
        "rejectedPatterns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Filter"
          }
        },
        "scopedRules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScopedRule"
          }
        },
        "version": {
          "format": "int32",
          "default": 0,
          "type": "integer"
        }
      }
    },
    "PrivateEndpoint": {
      "description": "A private endpoint class.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The private endpoint identifier.",
          "type": "string"
        }
      }
    },
    "PrivateEndpointConnection": {
      "description": "A private endpoint connection class.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Gets or sets the identifier.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "Gets or sets the name.",
          "type": "string",
          "readOnly": true
        },
        "properties": {
          "$ref": "#/definitions/PrivateEndpointConnectionProperties"
        },
        "systemData": {
          "$ref": "#/definitions/SystemData"
        },
        "type": {
          "description": "Gets or sets the type.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "PrivateEndpointConnectionProperties": {
      "description": "A private endpoint connection properties class.",
      "type": "object",
      "properties": {
        "privateEndpoint": {
          "$ref": "#/definitions/PrivateEndpoint"
        },
        "privateLinkServiceConnectionState": {
          "$ref": "#/definitions/PrivateLinkServiceConnectionState"
        },
        "provisioningState": {
          "description": "The provisioning state.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "PrivateLinkServiceConnectionState": {
      "description": "The private link service connection state.",
      "type": "object",
      "properties": {
        "actionsRequired": {
          "description": "The required actions.",
          "type": "string"
        },
        "description": {
          "description": "The description.",
          "type": "string"
        },
        "status": {
          "description": "The status.",
          "enum": [
            "Unknown",
            "Pending",
            "Approved",
            "Rejected",
            "Disconnected"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "PrivateEndpointConnectionStatus",
            "modelAsString": true
          }
        }
      }
    },
    "RegexReplacer": {
      "required": [
        "disabled",
        "name"
      ],
      "type": "object",
      "properties": {
        "condition": {
          "type": "string"
        },
        "createdBy": {
          "default": "AzureDataCatalog",
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "disableRecursiveReplacerApplication": {
          "type": "boolean"
        },
        "doNotReplaceRegex": {
          "$ref": "#/definitions/FastRegex"
        },
        "lastUpdatedTimestamp": {
          "format": "int64",
          "type": "integer"
        },
        "modifiedBy": {
          "default": "AzureDataCatalog",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "regex": {
          "$ref": "#/definitions/FastRegex"
        },
        "replaceWith": {
          "type": "string"
        }
      }
    },
    "ResourceSetRuleConfig": {
      "description": "ResourceSetRuleConfig implementation class.",
      "type": "object",
      "properties": {
        "advancedResourceSet": {
          "$ref": "#/definitions/AdvancedResourceSet"
        },
        "name": {
          "description": "The name of the rule",
          "type": "string",
          "readOnly": true
        },
        "pathPatternConfig": {
          "$ref": "#/definitions/PathPatternExtractorConfig"
        }
      }
    },
    "ResourceSetRuleConfigList": {
      "description": "Paged list of account resources",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "count": {
          "format": "int64",
          "description": "Total item count.",
          "type": "integer"
        },
        "nextLink": {
          "description": "The Url of next result page.",
          "type": "string"
        },
        "value": {
          "description": "Collection of items of type results.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceSetRuleConfig"
          }
        }
      }
    },
    "Rule": {
      "required": [
        "qualifiedName"
      ],
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string"
        },
        "isResourceSet": {
          "default": true,
          "type": "boolean"
        },
        "lastUpdatedTimestamp": {
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "qualifiedName": {
          "type": "string"
        }
      }
    },
    "ScopedRule": {
      "required": [
        "bindingUrl",
        "storeType"
      ],
      "type": "object",
      "properties": {
        "bindingUrl": {
          "type": "string"
        },
        "rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Rule"
          }
        },
        "storeType": {
          "type": "string"
        }
      }
    },
    "SystemData": {
      "description": "Metadata pertaining to creation and last modification of the resource.",
      "type": "object",
      "properties": {
        "createdAt": {
          "format": "date-time",
          "description": "The timestamp of resource creation (UTC).",
          "type": "string",
          "readOnly": true
        },
        "createdBy": {
          "description": "The identity that created the resource.",
          "type": "string",
          "readOnly": true
        },
        "createdByType": {
          "description": "The type of identity that created the resource.",
          "enum": [
            "User",
            "Application",
            "ManagedIdentity",
            "Key"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "IdentityType",
            "modelAsString": true
          }
        },
        "lastModifiedAt": {
          "format": "date-time",
          "description": "The timestamp of the last modification the resource (UTC).",
          "type": "string",
          "readOnly": true
        },
        "lastModifiedBy": {
          "description": "The identity that last modified the resource.",
          "type": "string",
          "readOnly": true
        },
        "lastModifiedByType": {
          "description": "The type of identity that last modified the resource.",
          "enum": [
            "User",
            "Application",
            "ManagedIdentity",
            "Key"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "IdentityType",
            "modelAsString": true
          }
        }
      }
    },
    "UserAssignedIdentity": {
      "description": "Uses client ID and Principal ID",
      "type": "object",
      "properties": {
        "clientId": {
          "description": "Gets or Sets Client ID",
          "type": "string",
          "readOnly": true
        },
        "principalId": {
          "description": "Gets or Sets Principal ID",
          "type": "string",
          "readOnly": true
        }
      }
    }
  },
  "parameters": {
    "Endpoint": {
      "in": "path",
      "name": "Endpoint",
      "description": "The endpoint. Example: https://{accountName}.purview.azure.com",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "client",
      "x-ms-skip-url-encoding": true
    },
    "api-version": {
      "in": "query",
      "name": "api-version",
      "description": "The api version to use.",
      "required": true,
      "type": "string",
      "x-ms-client-name": "ApiVersion"
    }
  },
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "flow": "implicit",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      },
      "description": "Azure Active Directory OAuth2 Flow."
    }
  }
}
