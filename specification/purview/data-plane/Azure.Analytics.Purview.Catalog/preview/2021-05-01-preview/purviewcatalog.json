{
  "swagger": "2.0",
  "info": {
    "title": "Purview Catalog Service REST API Document",
    "description": "Purview Catalog Service is a fully managed cloud service whose users can discover the data sources they need and understand the data sources they find. At the same time, Data Catalog helps organizations get more value from their existing investments. This spec defines REST API of Purview Catalog Service.",
    "version": "2021-05-01-preview"
  },
  "x-ms-parameterized-host": {
    "hostTemplate": "{Endpoint}",
    "useSchemePrefix": false,
    "parameters": [
      {
        "$ref": "#/parameters/Endpoint"
      }
    ]
  },
  "basePath": "/api",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "azure_auth": {
      "flow": "implicit",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      },
      "type": "oauth2",
      "description": "Azure Active Directory OAuth2 Flow."
    }
  },
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ],
  "paths": {
    "/atlas/v2/entity": {
      "post": {
        "tags": [
          "Entity"
        ],
        "description": "Create or update an entity in Atlas.\nExisting entity is matched using its unique guid if supplied or by its unique attributes eg: qualifiedName.\nMap and array of collections are not well supported. E.g., array<array<int>>, array<map<string, int>>.",
        "operationId": "Entity_CreateOrUpdate",
        "x-ms-examples": {
          "Entity_Create": {
            "$ref": "./examples/Entity_Create.json"
          },
          "Entity_Update": {
            "$ref": "./examples/Entity_Update.json"
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "entity",
            "description": "Atlas entity with extended information.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AtlasEntityWithExtInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Created with EntityMutationResponse.",
            "schema": {
              "$ref": "#/definitions/EntityMutationResponse"
            }
          }
        }
      }
    },
    "/atlas/v2/entity/bulk": {
      "get": {
        "tags": [
          "Entity"
        ],
        "description": "List entities in bulk identified by its GUIDs.",
        "operationId": "Entity_ListByGuids",
        "x-ms-examples": {
          "Entity_ListByGuids": {
            "$ref": "./examples/Entity_ListByGuids.json"
          }
        },
        "parameters": [
          {
            "name": "guids",
            "in": "query",
            "description": "An array of GUIDs of entities to create.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "$ref": "#/parameters/minExtInfo"
          },
          {
            "$ref": "#/parameters/ignoreRelationships"
          },
          {
            "$ref": "#/parameters/excludeRelationshipTypes"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "schema": {
              "$ref": "#/definitions/AtlasEntitiesWithExtInfo"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Entity"
        ],
        "description": "Create or update entities in Atlas in bulk.\nExisting entity is matched using its unique guid if supplied or by its unique attributes eg: qualifiedName.\nMap and array of collections are not well supported. E.g., array<array<int>>, array<map<string, int>>.",
        "operationId": "Entity_CreateOrUpdateEntities",
        "x-ms-examples": {
          "Entity_CreateOrUpdateEntities": {
            "$ref": "./examples/Entity_CreateOrUpdateEntities.json"
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "entities",
            "description": "An array of entities to create or update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AtlasEntitiesWithExtInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "schema": {
              "$ref": "#/definitions/EntityMutationResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Entity"
        ],
        "description": "Delete a list of entities in bulk identified by their GUIDs or unique attributes.",
        "operationId": "Entity_DeleteByGuids",
        "x-ms-examples": {
          "Entity_DeleteByGuids": {
            "$ref": "./examples/Entity_DeleteByGuids.json"
          }
        },
        "parameters": [
          {
            "name": "guids",
            "in": "query",
            "description": "An array of GUIDs of entities to delete.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted with EntityMutationResponse.",
            "schema": {
              "$ref": "#/definitions/EntityMutationResponse"
            }
          }
        }
      }
    },
    "/atlas/v2/entity/bulk/classification": {
      "post": {
        "tags": [
          "Entity"
        ],
        "description": "Associate a classification to multiple entities in bulk.",
        "operationId": "Entity_AddClassification",
        "x-ms-examples": {
          "Entity_AddClassificationToEntityByGuids": {
            "$ref": "./examples/Entity_AddClassificationToEntityByGuids.json"
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "The request to associate a classification to multiple entities.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClassificationAssociateRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content."
          }
        }
      }
    },
    "/atlas/v2/entity/guid/{guid}": {
      "get": {
        "tags": [
          "Entity"
        ],
        "operationId": "Entity_GetByGuid",
        "x-ms-examples": {
          "Entity_GetByGuid": {
            "$ref": "./examples/Entity_GetByGuid.json"
          }
        },
        "description": "Get complete definition of an entity given its GUID.",
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          },
          {
            "$ref": "#/parameters/minExtInfo"
          },
          {
            "$ref": "#/parameters/ignoreRelationships"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "schema": {
              "$ref": "#/definitions/AtlasEntityWithExtInfo"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Entity"
        ],
        "description": "Update entity partially - create or update entity attribute identified by its GUID.\nSupports only primitive attribute type and entity references.\nIt does not support updating complex types like arrays, and maps.\nNull updates are not possible.",
        "operationId": "Entity_PartialUpdateEntityAttributeByGuid",
        "x-ms-examples": {
          "Entity_PartialUpdateEntityAttributeByGuid": {
            "$ref": "./examples/Entity_PartialUpdateEntityAttributeByGuid.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          },
          {
            "name": "name",
            "in": "query",
            "description": "The name of the attribute.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The value of the attribute.",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated with EntityMutationResponse.",
            "schema": {
              "$ref": "#/definitions/EntityMutationResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Entity"
        ],
        "description": "Delete an entity identified by its GUID.",
        "operationId": "Entity_DeleteByGuid",
        "x-ms-examples": {
          "Entity_DeleteByGuid": {
            "$ref": "./examples/Entity_DeleteByGuid.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted with EntityMutationResponse.",
            "schema": {
              "$ref": "#/definitions/EntityMutationResponse"
            }
          }
        }
      }
    },
    "/atlas/v2/entity/guid/{guid}/classification/{classificationName}": {
      "get": {
        "tags": [
          "Entity"
        ],
        "description": "List classifications for a given entity represented by a GUID.",
        "operationId": "Entity_GetClassification",
        "x-ms-examples": {
          "Entity_GetClassification": {
            "$ref": "./examples/Entity_GetClassification.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          },
          {
            "$ref": "#/parameters/classificationName"
          }
        ],
        "responses": {
          "200": {
            "description": "The classification for the given entity GUID.",
            "schema": {
              "$ref": "#/definitions/AtlasClassification"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Entity"
        ],
        "description": "Delete a given classification from an existing entity represented by a GUID.",
        "operationId": "Entity_DeleteClassification",
        "x-ms-examples": {
          "Entity_DeleteClassification": {
            "$ref": "./examples/Entity_DeleteClassification.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          },
          {
            "$ref": "#/parameters/classificationName"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content."
          }
        }
      }
    },
    "/atlas/v2/entity/guid/{guid}/classifications": {
      "get": {
        "tags": [
          "Entity"
        ],
        "description": "List classifications for a given entity represented by a GUID.",
        "operationId": "Entity_GetClassifications",
        "x-ms-examples": {
          "Entity_GetClassifications": {
            "$ref": "./examples/Entity_GetClassifications.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of classifications for the given entity GUID.",
            "schema": {
              "$ref": "#/definitions/AtlasClassifications"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Entity"
        ],
        "description": "Add classifications to an existing entity represented by a GUID.",
        "operationId": "Entity_AddClassifications",
        "x-ms-examples": {
          "Entity_AddClassifications": {
            "$ref": "./examples/Entity_AddClassifications.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          },
          {
            "in": "body",
            "name": "classifications",
            "description": "An array of classifications to be added.",
            "required": true,
            "schema": {
              "type": "array",
              "description": "An array of classifications.",
              "items": {
                "$ref": "#/definitions/AtlasClassification"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content."
          }
        }
      },
      "put": {
        "tags": [
          "Entity"
        ],
        "description": "Update classifications to an existing entity represented by a guid.",
        "operationId": "Entity_UpdateClassifications",
        "x-ms-examples": {
          "Entity_UpdateClassifications": {
            "$ref": "./examples/Entity_UpdateClassifications.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          },
          {
            "in": "body",
            "name": "classifications",
            "description": "An array of classifications to be updated.",
            "required": true,
            "schema": {
              "type": "array",
              "description": "An array of classifications.",
              "items": {
                "$ref": "#/definitions/AtlasClassification"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content."
          }
        }
      }
    },
    "/atlas/v2/entity/uniqueAttribute/type/{typeName}": {
      "get": {
        "tags": [
          "Entity"
        ],
        "description": "Get complete definition of an entity given its type and unique attribute.\nIn addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format:\nattr:\\<attrName>=<attrValue>. \nNOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.\nThe REST request would look something like this:\nGET /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.",
        "operationId": "Entity_GetByUniqueAttributes",
        "x-ms-examples": {
          "Entity_GetByUniqueAttributes": {
            "$ref": "./examples/Entity_GetByUniqueAttributes.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/typeName"
          },
          {
            "$ref": "#/parameters/minExtInfo"
          },
          {
            "$ref": "#/parameters/ignoreRelationships"
          },
          {
            "name": "attr:qualifiedName",
            "in": "query",
            "description": "The qualified name of the entity.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "AtlasEntityWithExtInfo.",
            "schema": {
              "$ref": "#/definitions/AtlasEntityWithExtInfo"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Entity"
        ],
        "description": "Update entity partially - Allow a subset of attributes to be updated on\nan entity which is identified by its type and unique attribute  eg: Referenceable.qualifiedName.\nNull updates are not possible.\nIn addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format:\nattr:<attrName>=<attrValue>.\nNOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.\nThe REST request would look something like this:\nPUT /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.",
        "operationId": "Entity_PartialUpdateEntityByUniqueAttributes",
        "x-ms-examples": {
          "Entity_PartialUpdateEntityByUniqueAttributes": {
            "$ref": "./examples/Entity_PartialUpdateEntityByUniqueAttributes.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/typeName"
          },
          {
            "name": "attr:qualifiedName",
            "in": "query",
            "description": "The qualified name of the entity.",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "atlasEntityWithExtInfo",
            "description": "Atlas entity with extended information.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AtlasEntityWithExtInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated with EntityMutationResponse.",
            "schema": {
              "$ref": "#/definitions/EntityMutationResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Entity"
        ],
        "description": "Delete an entity identified by its type and unique attributes.\nIn addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format:\nattr:\\<attrName>=\\<attrValue>.\nNOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.\nThe REST request would look something like this:\nDELETE /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.",
        "operationId": "Entity_DeleteByUniqueAttribute",
        "x-ms-examples": {
          "Entity_DeleteByUniqueAttribute": {
            "$ref": "./examples/Entity_DeleteByUniqueAttribute.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/typeName"
          },
          {
            "name": "attr:qualifiedName",
            "in": "query",
            "description": "The qualified name of the entity.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted with EntityMutationResponse.",
            "schema": {
              "$ref": "#/definitions/EntityMutationResponse"
            }
          }
        }
      }
    },
    "/atlas/v2/entity/uniqueAttribute/type/{typeName}/classification/{classificationName}": {
      "delete": {
        "tags": [
          "Entity"
        ],
        "description": "Delete a given classification from an entity identified by its type and unique attributes.",
        "operationId": "Entity_DeleteClassificationByUniqueAttribute",
        "x-ms-examples": {
          "Entity_DeleteClassificationByUniqueAttribute": {
            "$ref": "./examples/Entity_DeleteClassificationByUniqueAttribute.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/typeName"
          },
          {
            "$ref": "#/parameters/classificationName"
          },
          {
            "name": "attr:qualifiedName",
            "in": "query",
            "description": "The qualified name of the entity.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content."
          }
        }
      }
    },
    "/atlas/v2/entity/uniqueAttribute/type/{typeName}/classifications": {
      "post": {
        "tags": [
          "Entity"
        ],
        "description": "Add classification to the entity identified by its type and unique attributes.",
        "operationId": "Entity_AddClassificationsByUniqueAttribute",
        "x-ms-examples": {
          "Entity_AddClassificationsByUniqueAttribute": {
            "$ref": "./examples/Entity_AddClassificationsByUniqueAttribute.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/typeName"
          },
          {
            "name": "attr:qualifiedName",
            "in": "query",
            "description": "The qualified name of the entity.",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "atlasClassificationArray",
            "description": "An array of classification to be added.",
            "required": true,
            "schema": {
              "type": "array",
              "description": "An array of classification.",
              "items": {
                "$ref": "#/definitions/AtlasClassification"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content."
          }
        }
      },
      "put": {
        "tags": [
          "Entity"
        ],
        "description": "Update classification on an entity identified by its type and unique attributes.",
        "operationId": "Entity_UpdateClassificationsByUniqueAttribute",
        "x-ms-examples": {
          "Entity_UpdateClassificationsByUniqueAttribute": {
            "$ref": "./examples/Entity_UpdateClassificationsByUniqueAttribute.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/typeName"
          },
          {
            "name": "attr:qualifiedName",
            "in": "query",
            "description": "The qualified name of the entity.",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "atlasClassificationArray",
            "description": "An array of classification to be updated.",
            "required": true,
            "schema": {
              "type": "array",
              "description": "An array of classification.",
              "items": {
                "$ref": "#/definitions/AtlasClassification"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content."
          }
        }
      }
    },
    "/atlas/v2/entity/bulk/setClassifications": {
      "post": {
        "tags": [
          "Entity"
        ],
        "description": "Set classifications on entities in bulk.",
        "operationId": "Entity_SetClassifications",
        "x-ms-examples": {
          "Entity_SetClassifications": {
            "$ref": "./examples/Entity_SetClassifications.json"
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "entityHeaders",
            "description": "Atlas entity headers.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AtlasEntityHeaders"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "description": "Response that indicates each classification mutation result.",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/atlas/v2/entity/bulk/uniqueAttribute/type/{typeName}": {
      "get": {
        "tags": [
          "Entity"
        ],
        "description": "Bulk API to retrieve list of entities identified by its unique attributes.\n\nIn addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format\n\ntypeName=\\<typeName>&attr_1:\\<attrName>=\\<attrValue>&attr_2:\\<attrName>=\\<attrValue>&attr_3:\\<attrName>=\\<attrValue>\n\nNOTE: The attrName should be an unique attribute for the given entity-type\n\nThe REST request would look something like this\n\nGET /v2/entity/bulk/uniqueAttribute/type/hive_db?attr_0:qualifiedName=db1@cl1&attr_2:qualifiedName=db2@cl1",
        "operationId": "Entity_GetEntitiesByUniqueAttributes",
        "x-ms-examples": {
          "Entity_GetEntitiesByUniqueAttributes": {
            "$ref": "./examples/Entity_GetEntitiesByUniqueAttributes.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/typeName"
          },
          {
            "$ref": "#/parameters/minExtInfo"
          },
          {
            "$ref": "#/parameters/ignoreRelationships"
          },
          {
            "name": "attr_N:qualifiedName",
            "in": "query",
            "description": "Qualified name of an entity. E.g. to find 2 entities you can set attrs_0:qualifiedName=db1@cl1&attrs_2:qualifiedName=db2@cl1",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "schema": {
              "$ref": "#/definitions/AtlasEntitiesWithExtInfo"
            }
          }
        }
      }
    },
    "/atlas/v2/entity/guid/{guid}/header": {
      "get": {
        "tags": [
          "Entity"
        ],
        "description": "Get entity header given its GUID.",
        "operationId": "Entity_GetHeader",
        "x-ms-examples": {
          "Entity_GetHeader": {
            "$ref": "./examples/Entity_GetHeader.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/AtlasEntityHeader"
            },
            "description": "AtlasEntityHeader"
          }
        }
      }
    },
    "/atlas/v2/glossary": {
      "get": {
        "tags": [
          "Glossary"
        ],
        "description": "Get all glossaries registered with Atlas.",
        "operationId": "Glossary_ListGlossaries",
        "x-ms-examples": {
          "Glossary_ListGlossaries": {
            "$ref": "./examples/Glossary_ListGlossaries.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of existing glossaries fitting the search criteria or empty list if nothing matches.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AtlasGlossary"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Glossary"
        ],
        "description": "Create a glossary.",
        "operationId": "Glossary_CreateGlossary",
        "x-ms-examples": {
          "Glossary_CreateGlossary": {
            "$ref": "./examples/Glossary_CreateGlossary.json"
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "atlasGlossary",
            "description": "Glossary definition, terms & categories can be anchored to a glossary.\nUsing the anchor attribute when creating the Term/Category.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AtlasGlossary"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK. If glossary creation was successful.",
            "schema": {
              "$ref": "#/definitions/AtlasGlossary"
            }
          }
        }
      }
    },
    "/atlas/v2/glossary/categories": {
      "post": {
        "tags": [
          "Glossary"
        ],
        "description": "Create glossary category in bulk.",
        "operationId": "Glossary_CreateGlossaryCategories",
        "x-ms-examples": {
          "Glossary_CreateGlossaryCategories": {
            "$ref": "./examples/Glossary_CreateGlossaryCategories.json"
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "glossaryCategory",
            "description": "An array of glossary category definitions to be created.",
            "required": true,
            "schema": {
              "type": "array",
              "description": "An array of glossary category definitions.",
              "items": {
                "$ref": "#/definitions/AtlasGlossaryCategory"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK. If bulk glossary category creation was successful.",
            "schema": {
              "type": "array",
              "description": "An array of glossary category created successfully in bulk.",
              "items": {
                "$ref": "#/definitions/AtlasGlossaryCategory"
              }
            }
          }
        }
      }
    },
    "/atlas/v2/glossary/category": {
      "post": {
        "tags": [
          "Glossary"
        ],
        "description": "Create a glossary category.",
        "operationId": "Glossary_CreateGlossaryCategory",
        "x-ms-examples": {
          "Glossary_CreateGlossaryCategory": {
            "$ref": "./examples/Glossary_CreateGlossaryCategory.json"
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "glossaryCategory",
            "description": "The glossary category definition. A category must be anchored to a Glossary when creating.\nOptionally, terms belonging to the category and the hierarchy can also be defined during creation.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AtlasGlossaryCategory"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK. If glossary category creation was successful.",
            "schema": {
              "$ref": "#/definitions/AtlasGlossaryCategory"
            }
          }
        }
      }
    },
    "/atlas/v2/glossary/category/{categoryGuid}": {
      "get": {
        "tags": [
          "Glossary"
        ],
        "description": "Get specific glossary category by its GUID.",
        "operationId": "Glossary_GetGlossaryCategory",
        "x-ms-examples": {
          "Glossary_GetGlossaryCategory": {
            "$ref": "./examples/Glossary_GetGlossaryCategory.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/categoryGuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. If glossary category exists for given GUID.",
            "schema": {
              "$ref": "#/definitions/AtlasGlossaryCategory"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Glossary"
        ],
        "description": "Update the given glossary category by its GUID.",
        "operationId": "Glossary_UpdateGlossaryCategory",
        "x-ms-examples": {
          "Glossary_UpdateGlossaryCategory": {
            "$ref": "./examples/Glossary_UpdateGlossaryCategory.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/categoryGuid"
          },
          {
            "in": "body",
            "name": "glossaryCategory",
            "description": "The glossary category to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AtlasGlossaryCategory"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK. If glossary category partial update was successful.",
            "schema": {
              "$ref": "#/definitions/AtlasGlossaryCategory"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Glossary"
        ],
        "description": "Delete a glossary category.",
        "operationId": "Glossary_DeleteGlossaryCategory",
        "x-ms-examples": {
          "Glossary_DeleteGlossaryCategory": {
            "$ref": "./examples/Glossary_DeleteGlossaryCategory.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/categoryGuid"
          }
        ],
        "responses": {
          "204": {
            "description": "OK. If glossary category deletion is successful."
          }
        }
      }
    },
    "/atlas/v2/glossary/category/{categoryGuid}/partial": {
      "put": {
        "tags": [
          "Glossary"
        ],
        "description": "Update the glossary category partially.",
        "operationId": "Glossary_PartialUpdateGlossaryCategory",
        "x-ms-examples": {
          "Glossary_PartialUpdateGlossaryCategory": {
            "$ref": "./examples/Glossary_PartialUpdateGlossaryCategory.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/categoryGuid"
          },
          {
            "in": "body",
            "name": "partialUpdates",
            "description": "A map containing keys as attribute names and values as corresponding attribute values for partial update.",
            "required": true,
            "schema": {
              "type": "object",
              "description": "A map containing keys as attribute names and values as corresponding attribute values.",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK. If glossary category partial update was successful.",
            "schema": {
              "$ref": "#/definitions/AtlasGlossaryCategory"
            }
          }
        }
      }
    },
    "/atlas/v2/glossary/category/{categoryGuid}/related": {
      "get": {
        "tags": [
          "Glossary"
        ],
        "description": "Get all related categories (parent and children). Limit, offset, and sort parameters are currently not being enabled and won't work even they are passed.",
        "operationId": "Glossary_ListRelatedCategories",
        "x-ms-examples": {
          "Glossary_ListRelatedCategories": {
            "$ref": "./examples/Glossary_ListRelatedCategories.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/categoryGuid"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. Gets an array of related categories.",
            "schema": {
              "type": "object",
              "description": "An array of related categories.",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/AtlasRelatedCategoryHeader"
                }
              }
            }
          }
        }
      }
    },
    "/atlas/v2/glossary/category/{categoryGuid}/terms": {
      "get": {
        "tags": [
          "Glossary"
        ],
        "description": "Get all terms associated with the specific category.",
        "operationId": "Glossary_ListCategoryTerms",
        "x-ms-examples": {
          "Glossary_ListCategoryTerms": {
            "$ref": "./examples/Glossary_ListCategoryTerms.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/categoryGuid"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of terms for the given category or an empty list.",
            "schema": {
              "type": "array",
              "description": "An array of terms for the given category or an empty list.",
              "items": {
                "$ref": "#/definitions/AtlasRelatedTermHeader"
              }
            }
          }
        }
      }
    },
    "/atlas/v2/glossary/term": {
      "post": {
        "tags": [
          "Glossary"
        ],
        "description": "Create a glossary term.",
        "operationId": "Glossary_CreateGlossaryTerm",
        "x-ms-examples": {
          "Glossary_CreateGlossaryTerm": {
            "$ref": "./examples/Glossary_CreateGlossaryTerm.json"
          },
          "Glossary_CreateGlossaryTermWithTermTemplate": {
            "$ref": "./examples/Glossary_CreateGlossaryTermWithTermTemplate.json"
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "glossaryTerm",
            "description": "The glossary term definition. A term must be anchored to a Glossary at the time of creation.\nOptionally it can be categorized as well.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AtlasGlossaryTerm"
            }
          },
          {
            "$ref": "#/parameters/includeTermHierarchy"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. If glossary term creation was successful.",
            "schema": {
              "$ref": "#/definitions/AtlasGlossaryTerm"
            }
          }
        }
      }
    },
    "/atlas/v2/glossary/term/{termGuid}": {
      "get": {
        "tags": [
          "Glossary"
        ],
        "description": "Get a specific glossary term by its GUID.",
        "operationId": "Glossary_GetGlossaryTerm",
        "x-ms-examples": {
          "Glossary_GetGlossaryTerm": {
            "$ref": "./examples/Glossary_GetGlossaryTerm.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/termGuid"
          },
          {
            "$ref": "#/parameters/includeTermHierarchy"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. If glossary term exists for given GUID.",
            "schema": {
              "$ref": "#/definitions/AtlasGlossaryTerm"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Glossary"
        ],
        "description": "Update the given glossary term by its GUID.",
        "operationId": "Glossary_UpdateGlossaryTerm",
        "x-ms-examples": {
          "Glossary_UpdateGlossaryTerm": {
            "$ref": "./examples/Glossary_UpdateGlossaryTerm.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/termGuid"
          },
          {
            "in": "body",
            "name": "glossaryTerm",
            "description": "The glossary term to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AtlasGlossaryTerm"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK. If glossary term update was successful.",
            "schema": {
              "$ref": "#/definitions/AtlasGlossaryTerm"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Glossary"
        ],
        "description": "Delete a glossary term.",
        "operationId": "Glossary_DeleteGlossaryTerm",
        "x-ms-examples": {
          "Glossary_DeleteGlossaryTerm": {
            "$ref": "./examples/Glossary_DeleteGlossaryTerm.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/termGuid"
          }
        ],
        "responses": {
          "204": {
            "description": "OK. If glossary term delete was successful."
          }
        }
      }
    },
    "/atlas/v2/glossary/term/{termGuid}/partial": {
      "put": {
        "tags": [
          "Glossary"
        ],
        "description": "Update the glossary term partially.",
        "operationId": "Glossary_PartialUpdateGlossaryTerm",
        "x-ms-examples": {
          "Glossary_PartialUpdateGlossaryTerm": {
            "$ref": "./examples/Glossary_PartialUpdateGlossaryTerm.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/termGuid"
          },
          {
            "$ref": "#/parameters/includeTermHierarchy"
          },
          {
            "in": "body",
            "name": "partialUpdates",
            "description": "A map containing keys as attribute names and values as corresponding attribute values to be updated.",
            "required": true,
            "schema": {
              "type": "object",
              "description": "A map containing keys as attribute names and values as corresponding attribute values.",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK. If glossary partial update was successful.",
            "schema": {
              "$ref": "#/definitions/AtlasGlossaryTerm"
            }
          }
        }
      }
    },
    "/atlas/v2/glossary/terms": {
      "post": {
        "tags": [
          "Glossary"
        ],
        "description": "Create glossary terms in bulk.",
        "operationId": "Glossary_CreateGlossaryTerms",
        "x-ms-examples": {
          "Glossary_CreateGlossaryTerms": {
            "$ref": "./examples/Glossary_CreateGlossaryTerms.json"
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "glossaryTerm",
            "description": "An array of glossary term definitions to be created in bulk.",
            "required": true,
            "schema": {
              "type": "array",
              "description": "An array of glossary term definitions.",
              "items": {
                "$ref": "#/definitions/AtlasGlossaryTerm"
              }
            }
          },
          {
            "$ref": "#/parameters/includeTermHierarchy"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. If bulk glossary terms creation was successful.",
            "schema": {
              "type": "array",
              "description": "If bulk glossary terms creation was successful.",
              "items": {
                "$ref": "#/definitions/AtlasGlossaryTerm"
              }
            }
          }
        }
      }
    },
    "/atlas/v2/glossary/terms/{termGuid}/assignedEntities": {
      "get": {
        "tags": [
          "Glossary"
        ],
        "description": "Get all related objects assigned with the specified term.",
        "operationId": "Glossary_GetEntitiesAssignedWithTerm",
        "x-ms-examples": {
          "Glossary_GetEntitiesAssignedWithTerm": {
            "$ref": "./examples/Glossary_ListEntitiesAssignedWithTerm.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/termGuid"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. An array of related objects (if any) for the given glossary or an empty list.",
            "schema": {
              "type": "array",
              "description": "An array of related objects (if any) for the given glossary or an empty list.",
              "items": {
                "$ref": "#/definitions/AtlasRelatedObjectId"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Glossary"
        ],
        "description": "Assign the given term to the provided list of related objects.",
        "operationId": "Glossary_AssignTermToEntities",
        "x-ms-examples": {
          "Glossary_AssignTermToEntities": {
            "$ref": "./examples/Glossary_AssignTermToEntities.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/termGuid"
          },
          {
            "in": "body",
            "name": "relatedObjectIds",
            "description": "An array of related object IDs to which the term has to be associated.",
            "required": true,
            "schema": {
              "type": "array",
              "description": "An array of related object IDs to which the term has to be associated.",
              "items": {
                "$ref": "#/definitions/AtlasRelatedObjectId"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK. If the term assignment was successful."
          }
        }
      },
      "put": {
        "tags": [
          "Glossary"
        ],
        "description": "Delete the term assignment for the given list of related objects.",
        "operationId": "Glossary_RemoveTermAssignmentFromEntities",
        "x-ms-examples": {
          "Glossary_RemoveTermAssignmentFromEntities": {
            "$ref": "./examples/Glossary_RemoveTermAssignmentFromEntities.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/termGuid"
          },
          {
            "in": "body",
            "name": "relatedObjectIds",
            "description": "An array of related object IDs from which the term has to be dissociated.",
            "required": true,
            "schema": {
              "type": "array",
              "description": "An array of related object IDs from which the term has to be dissociated.",
              "items": {
                "$ref": "#/definitions/AtlasRelatedObjectId"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK. If glossary term dissociation was successful."
          }
        }
      },
      "delete": {
        "tags": [
          "Glossary"
        ],
        "description": "Delete the term assignment for the given list of related objects.",
        "operationId": "Glossary_DeleteTermAssignmentFromEntities",
        "x-ms-examples": {
          "Glossary_RemoveTermAssignmentFromEntities": {
            "$ref": "./examples/Glossary_RemoveTermAssignmentFromEntities.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/termGuid"
          },
          {
            "in": "body",
            "name": "relatedObjectIds",
            "description": "An array of related object IDs from which the term has to be dissociated.",
            "required": true,
            "schema": {
              "type": "array",
              "description": "An array of related object IDs from which the term has to be dissociated.",
              "items": {
                "$ref": "#/definitions/AtlasRelatedObjectId"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK. If glossary term dissociation was successful."
          }
        }
      }
    },
    "/atlas/v2/glossary/terms/{termGuid}/related": {
      "get": {
        "tags": [
          "Glossary"
        ],
        "description": "Get all related terms for a specific term by its GUID. Limit, offset, and sort parameters are currently not being enabled and won't work even they are passed.",
        "operationId": "Glossary_ListRelatedTerms",
        "x-ms-examples": {
          "Glossary_ListRelatedTerms": {
            "$ref": "./examples/Glossary_ListRelatedTerms.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/termGuid"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. An array of related glossary terms for the given glossary or an empty list.",
            "schema": {
              "type": "object",
              "description": "An array of related glossary terms for the given glossary or an empty list.",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/AtlasRelatedTermHeader"
                }
              }
            }
          }
        }
      }
    },
    "/atlas/v2/glossary/{glossaryGuid}": {
      "get": {
        "tags": [
          "Glossary"
        ],
        "description": "Get a specific Glossary by its GUID.",
        "operationId": "Glossary_GetGlossary",
        "x-ms-examples": {
          "Glossary_GetGlossary": {
            "$ref": "./examples/Glossary_GetGlossary.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/glossaryGuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. If glossary with given guid exists.",
            "schema": {
              "$ref": "#/definitions/AtlasGlossary"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Glossary"
        ],
        "description": "Update the given glossary.",
        "operationId": "Glossary_UpdateGlossary",
        "x-ms-examples": {
          "Glossary_UpdateGlossary": {
            "$ref": "./examples/Glossary_UpdateGlossary.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/glossaryGuid"
          },
          {
            "in": "body",
            "name": "updatedGlossary",
            "description": "The glossary definition to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AtlasGlossary"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK. If glossary update was successful.",
            "schema": {
              "$ref": "#/definitions/AtlasGlossary"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Glossary"
        ],
        "description": "Delete a glossary.",
        "operationId": "Glossary_DeleteGlossary",
        "x-ms-examples": {
          "Glossary_DeleteGlossary": {
            "$ref": "./examples/Glossary_DeleteGlossary.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/glossaryGuid"
          }
        ],
        "responses": {
          "204": {
            "description": "OK. If glossary delete was successful."
          }
        }
      }
    },
    "/atlas/v2/glossary/{glossaryGuid}/categories": {
      "get": {
        "tags": [
          "Glossary"
        ],
        "description": "Get the categories belonging to a specific glossary.",
        "operationId": "Glossary_ListGlossaryCategories",
        "x-ms-examples": {
          "Glossary_ListGlossaryCategories": {
            "$ref": "./examples/Glossary_ListGlossaryCategories.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/glossaryGuid"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. An array of glossary categories for the given glossary or an empty list.",
            "schema": {
              "type": "array",
              "description": "An array of glossary categories for the given glossary or an empty list.",
              "items": {
                "$ref": "#/definitions/AtlasGlossaryCategory"
              }
            }
          }
        }
      }
    },
    "/atlas/v2/glossary/{glossaryGuid}/categories/headers": {
      "get": {
        "tags": [
          "Glossary"
        ],
        "description": "Get the category headers belonging to a specific glossary.",
        "operationId": "Glossary_ListGlossaryCategoriesHeaders",
        "x-ms-examples": {
          "Glossary_ListGlossaryCategoriesHeaders": {
            "$ref": "./examples/Glossary_ListGlossaryCategoriesHeaders.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/glossaryGuid"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. An array of glossary category headers for the given glossary or an empty list.",
            "schema": {
              "type": "array",
              "description": "An array of glossary category headers for the given glossary or an empty list.",
              "items": {
                "$ref": "#/definitions/AtlasRelatedCategoryHeader"
              }
            }
          }
        }
      }
    },
    "/atlas/v2/glossary/{glossaryGuid}/detailed": {
      "get": {
        "tags": [
          "Glossary"
        ],
        "description": "Get a specific glossary with detailed information.",
        "operationId": "Glossary_GetDetailedGlossary",
        "x-ms-examples": {
          "Glossary_GetDetailedGlossary": {
            "$ref": "./examples/Glossary_GetDetailedGlossary.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/glossaryGuid"
          },
          {
            "$ref": "#/parameters/includeTermHierarchy"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. If glossary exists for given GUID.",
            "schema": {
              "$ref": "#/definitions/AtlasGlossaryExtInfo"
            }
          }
        }
      }
    },
    "/atlas/v2/glossary/{glossaryGuid}/partial": {
      "put": {
        "tags": [
          "Glossary"
        ],
        "description": "Update the glossary partially. Some properties such as qualifiedName are not allowed to be updated.",
        "operationId": "Glossary_PartialUpdateGlossary",
        "x-ms-examples": {
          "Glossary_PartialUpdateGlossary": {
            "$ref": "./examples/Glossary_PartialUpdateGlossary.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/glossaryGuid"
          },
          {
            "$ref": "#/parameters/includeTermHierarchy"
          },
          {
            "in": "body",
            "name": "partialUpdates",
            "description": "A map containing keys as attribute names and values as corresponding attribute values.",
            "required": true,
            "schema": {
              "type": "object",
              "description": "A map containing keys as attribute names and values as corresponding attribute values.",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK. If glossary partial update was successful.",
            "schema": {
              "$ref": "#/definitions/AtlasGlossary"
            }
          }
        }
      }
    },
    "/atlas/v2/glossary/{glossaryGuid}/terms": {
      "get": {
        "tags": [
          "Glossary"
        ],
        "description": "Get terms belonging to a specific glossary.",
        "operationId": "Glossary_ListGlossaryTerms",
        "x-ms-examples": {
          "Glossary_ListGlossaryTerms": {
            "$ref": "./examples/Glossary_ListGlossaryTerms.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/glossaryGuid"
          },
          {
            "$ref": "#/parameters/includeTermHierarchy"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. An array of glossary terms for the given glossary or an empty list.",
            "schema": {
              "type": "array",
              "description": "An array of glossary terms for the given glossary or an empty list.",
              "items": {
                "$ref": "#/definitions/AtlasGlossaryTerm"
              }
            }
          }
        }
      }
    },
    "/atlas/v2/glossary/{glossaryGuid}/terms/headers": {
      "get": {
        "tags": [
          "Glossary"
        ],
        "description": "Get term headers belonging to a specific glossary.",
        "operationId": "Glossary_ListGlossaryTermHeaders",
        "x-ms-examples": {
          "Glossary_ListGlossaryTermHeaders": {
            "$ref": "./examples/Glossary_ListGlossaryTermHeaders.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/glossaryGuid"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. An array of glossary terms for the given glossary or an empty list.",
            "schema": {
              "type": "array",
              "description": "An array of glossary terms for the given glossary or an empty list.",
              "items": {
                "$ref": "#/definitions/AtlasRelatedTermHeader"
              }
            }
          }
        }
      }
    },
    "/glossary/{glossaryGuid}/terms/import": {
      "post": {
        "tags": [
          "Glossary"
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Import Glossary Terms from local csv file",
        "operationId": "Glossary_ImportGlossaryTermsViaCsv",
        "x-ms-examples": {
          "Glossary_ImportGlossaryTermsViaCsv": {
            "$ref": "./examples/Glossary_GetImportCSVOperationStatus.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/glossaryGuid"
          },
          {
            "$ref": "#/parameters/includeTermHierarchy"
          },
          {
            "in": "formData",
            "name": "file",
            "description": "The csv file to import glossary terms from.",
            "required": true,
            "type": "file"
          },
          {
            "$ref": "#/parameters/purviewAPIVersion"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted. A job to import glossary terms via csv has been accepted.",
            "schema": {
              "$ref": "#/definitions/ImportCSVOperation"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        }
      }
    },
    "/glossary/name/{glossaryName}/terms/import": {
      "post": {
        "tags": [
          "Glossary"
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Import Glossary Terms from local csv file by glossaryName",
        "operationId": "Glossary_ImportGlossaryTermsViaCsvByGlossaryName",
        "x-ms-examples": {
          "Glossary_ImportGlossaryTermsViaCsvByGlossaryName": {
            "$ref": "./examples/Glossary_GetImportCSVOperationStatusByGloassaryName.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/glossaryName"
          },
          {
            "$ref": "#/parameters/includeTermHierarchy"
          },
          {
            "in": "formData",
            "name": "file",
            "description": "The csv file to import glossary terms from.",
            "required": true,
            "type": "file"
          },
          {
            "$ref": "#/parameters/purviewAPIVersion"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted. A job to import glossary terms via csv has been accepted.",
            "schema": {
              "$ref": "#/definitions/ImportCSVOperation"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        }
      }
    },
    "/glossary/terms/import/{operationGuid}": {
      "get": {
        "tags": [
          "Glossary"
        ],
        "description": "Get the status of import csv operation",
        "operationId": "Glossary_GetImportCsvOperationStatus",
        "x-ms-examples": {
          "Glossary_GetImportCsvOperationStatus": {
            "$ref": "./examples/Glossary_GetImportCSVOperationStatusByOperationguid.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/operationGuid"
          },
          {
            "$ref": "#/parameters/purviewAPIVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. Return the status of import csv operation.",
            "schema": {
              "$ref": "#/definitions/ImportCSVOperation"
            }
          }
        }
      }
    },
    "/glossary/{glossaryGuid}/terms/export": {
      "post": {
        "tags": [
          "Glossary"
        ],
        "description": "Export Glossary Terms as csv file",
        "operationId": "Glossary_ExportGlossaryTermsAsCsv",
        "produces": [
          "text/csv"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/glossaryGuid"
          },
          {
            "$ref": "#/parameters/includeTermHierarchy"
          },
          {
            "in": "body",
            "name": "termGuids",
            "description": "An array of term guids.",
            "required": true,
            "schema": {
              "type": "array",
              "description": "An array of term guids.",
              "items": {
                "$ref": "#/definitions/TermGuid"
              }
            }
          },
          {
            "$ref": "#/parameters/purviewAPIVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. A csv file contains terms with given term guids will be generated.",
            "schema": {
              "type": "file"
            }
          }
        }
      }
    },
    "/glossary/name/{glossaryName}/terms": {
      "get": {
        "tags": [
          "Glossary"
        ],
        "description": "Get terms by glossary name.",
        "operationId": "Glossary_ListTermsByGlossaryName",
        "x-ms-examples": {
          "Glossary_ListTermsByGlossaryName": {
            "$ref": "./examples/Glossary_ListTermsByGlossaryName.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/glossaryName"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/includeTermHierarchy"
          },
          {
            "$ref": "#/parameters/purviewAPIVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. An array of glossary terms for the given glossary or an empty list.",
            "schema": {
              "type": "array",
              "description": "An array of glossary terms for the given glossary or an empty list.",
              "items": {
                "$ref": "#/definitions/AtlasGlossaryTerm"
              }
            }
          }
        }
      }
    },
    "/search/query": {
      "post": {
        "tags": [
          "Discovery"
        ],
        "description": "Gets data using search.",
        "operationId": "Discovery_Query",
        "x-ms-examples": {
          "Discovery_Query": {
            "$ref": "./examples/Discovery_Query.json"
          },
          "Discovery_Query_And": {
            "$ref": "./examples/Discovery_Query_And.json"
          },
          "Discovery_Query_Not": {
            "$ref": "./examples/Discovery_Query_Not.json"
          },
          "Discovery_Query_AndOrNested": {
            "$ref": "./examples/Discovery_Query_AndOrNested.json"
          },
          "Discovery_Query_Attribute": {
            "$ref": "./examples/Discovery_Query_Attribute.json"
          },
          "Discovery_Query_Classification": {
            "$ref": "./examples/Discovery_Query_Classification.json"
          },
          "Discovery_Query_FileExtension": {
            "$ref": "./examples/Discovery_Query_FileExtension.json"
          },
          "Discovery_Query_Id": {
            "$ref": "./examples/Discovery_Query_Id.json"
          },
          "Discovery_Query_Type": {
            "$ref": "./examples/Discovery_Query_Type.json"
          },
          "Discovery_Query_AssetType": {
            "$ref": "./examples/Discovery_Query_AssetType.json"
          },
          "Discovery_Query_Term": {
            "$ref": "./examples/Discovery_Query_Term.json"
          },
          "Discovery_Query_TermOfGlossary": {
            "$ref": "./examples/Discovery_Query_TermOfGlossary.json"
          },
          "Discovery_Query_Facet": {
            "$ref": "./examples/Discovery_Query_Facet.json"
          },
          "Discovery_Query_Taxonomy": {
            "$ref": "./examples/Discovery_Query_Taxonomy.json"
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "searchRequest",
            "description": "An object specifying the search criteria.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SearchRequest"
            }
          },
          {
            "$ref": "#/parameters/purviewAPIVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. On successful lookup of the advanced search.",
            "schema": {
              "$ref": "#/definitions/SearchResult"
            }
          }
        }
      }
    },
    "/search/suggest": {
      "post": {
        "tags": [
          "Discovery"
        ],
        "description": "Get search suggestions by query criteria.",
        "operationId": "Discovery_Suggest",
        "x-ms-examples": {
          "Discovery_Suggest": {
            "$ref": "./examples/Discovery_Suggest.json"
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "suggestRequest",
            "description": "An object specifying the suggest criteria.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SuggestRequest"
            }
          },
          {
            "$ref": "#/parameters/purviewAPIVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. On successful lookup of the suggestions.",
            "schema": {
              "$ref": "#/definitions/SuggestResult"
            }
          }
        }
      }
    },
    "/browse": {
      "post": {
        "tags": [
          "Discovery"
        ],
        "description": "Browse entities by path or entity type.",
        "operationId": "Discovery_Browse",
        "x-ms-examples": {
          "Discovery_Browse_Path": {
            "$ref": "./examples/Discovery_Browse_Path.json"
          },
          "Discovery_Browse_EntityType": {
            "$ref": "./examples/Discovery_Browse_EntityType.json"
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "browseRequest",
            "description": "An object specifying the browse criteria.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BrowseRequest"
            }
          },
          {
            "$ref": "#/parameters/purviewAPIVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. On successful get the entities to browse.",
            "schema": {
              "$ref": "#/definitions/BrowseResult"
            }
          }
        }
      }
    },
    "/search/autocomplete": {
      "post": {
        "tags": [
          "Discovery"
        ],
        "description": "Get auto complete options.",
        "operationId": "Discovery_AutoComplete",
        "x-ms-examples": {
          "Discovery_AutoComplete": {
            "$ref": "./examples/Discovery_AutoComplete.json"
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "autoCompleteRequest",
            "description": "An object specifying the autocomplete criteria.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AutoCompleteRequest"
            }
          },
          {
            "$ref": "#/parameters/purviewAPIVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. On successful lookup of the auto complete options.",
            "schema": {
              "$ref": "#/definitions/AutoCompleteResult"
            }
          }
        }
      }
    },
    "/atlas/v2/lineage/{guid}": {
      "get": {
        "tags": [
          "Lineage"
        ],
        "description": "Get lineage info of the entity specified by GUID.",
        "operationId": "Lineage_GetLineageGraph",
        "x-ms-examples": {
          "GetLineageGraph": {
            "$ref": "./examples/GetLineageGraph.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          },
          {
            "$ref": "#/parameters/depth"
          },
          {
            "$ref": "#/parameters/width"
          },
          {
            "$ref": "#/parameters/direction"
          },
          {
            "$ref": "#/parameters/includeParent"
          },
          {
            "$ref": "#/parameters/getDerivedLineage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. If the request is valid.",
            "schema": {
              "$ref": "#/definitions/AtlasLineageInfo"
            }
          }
        }
      }
    },
    "/lineage/{guid}/next/": {
      "get": {
        "tags": [
          "Lineage"
        ],
        "description": "Return immediate next page lineage info about entity with pagination",
        "operationId": "Lineage_NextPageLineage",
        "x-ms-examples": {
          "NextPageLineage": {
            "$ref": "./examples/NextPageLineage.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          },
          {
            "$ref": "#/parameters/direction"
          },
          {
            "$ref": "#/parameters/getDerivedLineage"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/purviewAPIVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. If the input is valid.",
            "schema": {
              "$ref": "#/definitions/AtlasLineageInfo"
            }
          }
        }
      }
    },
    "/atlas/v2/relationship": {
      "post": {
        "tags": [
          "Relationship"
        ],
        "description": "Create a new relationship between entities.",
        "operationId": "Relationship_Create",
        "x-ms-examples": {
          "Relationship_Create": {
            "$ref": "./examples/Relationship_Create.json"
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "relationship",
            "description": "The AtlasRelationship object containing the information for the relationship to be created.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AtlasRelationship"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK. The relationship is created.",
            "schema": {
              "$ref": "#/definitions/AtlasRelationship"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Relationship"
        ],
        "description": "Update an existing relationship between entities.",
        "operationId": "Relationship_Update",
        "x-ms-examples": {
          "Relationship_Update": {
            "$ref": "./examples/Relationship_Update.json"
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "relationship",
            "description": "The AtlasRelationship object containing the information for the relationship to be created.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AtlasRelationship"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK. The relationship is updated.",
            "schema": {
              "$ref": "#/definitions/AtlasRelationship"
            }
          }
        }
      }
    },
    "/atlas/v2/relationship/guid/{guid}": {
      "get": {
        "tags": [
          "Relationship"
        ],
        "description": "Get relationship information between entities by its GUID.",
        "operationId": "Relationship_Get",
        "x-ms-examples": {
          "Relationship_Get": {
            "$ref": "./examples/Relationship_Get.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/relationshipGuid"
          },
          {
            "$ref": "#/parameters/extendedInfo"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "schema": {
              "$ref": "#/definitions/AtlasRelationshipWithExtInfo"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Relationship"
        ],
        "description": "Delete a relationship between entities by its GUID.",
        "operationId": "Relationship_Delete",
        "x-ms-examples": {
          "Relationship_Delete": {
            "$ref": "./examples/Relationship_Delete.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/relationshipGuid"
          }
        ],
        "responses": {
          "204": {
            "description": "OK. The relationship is deleted."
          }
        }
      }
    },
    "/atlas/v2/types/classificationdef/guid/{guid}": {
      "get": {
        "tags": [
          "Types"
        ],
        "description": "Get the classification definition for the given GUID.",
        "operationId": "Types_GetClassificationDefByGuid",
        "x-ms-examples": {
          "Types_GetClassificationDefByGuid": {
            "$ref": "./examples/Types_GetClassificationDefByGuid.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/classificationDefGuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. On successful lookup of the the classification definition by its GUID.",
            "schema": {
              "$ref": "#/definitions/AtlasClassificationDef"
            }
          }
        }
      }
    },
    "/atlas/v2/types/classificationdef/name/{name}": {
      "get": {
        "tags": [
          "Types"
        ],
        "description": "Get the classification definition by its name (unique).",
        "operationId": "Types_GetClassificationDefByName",
        "x-ms-examples": {
          "Types_GetClassificationDefByName": {
            "$ref": "./examples/Types_GetClassificationDefByName.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/classificationDefName"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. On successful lookup of the the classification definition by its name.",
            "schema": {
              "$ref": "#/definitions/AtlasClassificationDef"
            }
          }
        }
      }
    },
    "/atlas/v2/types/entitydef/guid/{guid}": {
      "get": {
        "tags": [
          "Types"
        ],
        "description": "Get the Entity definition for the given GUID.",
        "operationId": "Types_GetEntityDefinitionByGuid",
        "x-ms-examples": {
          "Types_GetEntityDefinitionByGuid": {
            "$ref": "./examples/Types_GetEntityDefinitionByGuid.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/entityDefGuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. On successful lookup of the the entity definition by its GUID.",
            "schema": {
              "$ref": "#/definitions/AtlasEntityDef"
            }
          }
        }
      }
    },
    "/atlas/v2/types/entitydef/name/{name}": {
      "get": {
        "tags": [
          "Types"
        ],
        "description": "Get the entity definition by its name (unique).",
        "operationId": "Types_GetEntityDefinitionByName",
        "x-ms-examples": {
          "Types_GetEntityDefinitionByName": {
            "$ref": "./examples/Types_GetEntityDefinitionByName.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/entityDefName"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. On successful lookup of the the entity definition by its name.",
            "schema": {
              "$ref": "#/definitions/AtlasEntityDef"
            }
          }
        }
      }
    },
    "/atlas/v2/types/enumdef/guid/{guid}": {
      "get": {
        "tags": [
          "Types"
        ],
        "description": "Get the enum definition for the given GUID.",
        "operationId": "Types_GetEnumDefByGuid",
        "x-ms-examples": {
          "Types_GetEnumDefByGuid": {
            "$ref": "./examples/Types_GetEnumDefByGuid.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/enumDefGuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. On successful lookup of the the enum definition by its GUID.",
            "schema": {
              "$ref": "#/definitions/AtlasEnumDef"
            }
          }
        }
      }
    },
    "/atlas/v2/types/enumdef/name/{name}": {
      "get": {
        "tags": [
          "Types"
        ],
        "description": "Get the enum definition by its name (unique).",
        "operationId": "Types_GetEnumDefByName",
        "x-ms-examples": {
          "Types_GetEnumDefByName": {
            "$ref": "./examples/Types_GetEnumDefByName.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/enumDefName"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. On successful lookup of the the enum definition by its name.",
            "schema": {
              "$ref": "#/definitions/AtlasEnumDef"
            }
          }
        }
      }
    },
    "/atlas/v2/types/relationshipdef/guid/{guid}": {
      "get": {
        "tags": [
          "Types"
        ],
        "description": "Get the relationship definition for the given GUID.",
        "operationId": "Types_GetRelationshipDefByGuid",
        "x-ms-examples": {
          "Types_GetRelationshipDefByGuid": {
            "$ref": "./examples/Types_GetRelationshipDefByGuid.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/relationshipDefGuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. On successful lookup of the the relationship definition by its GUID.",
            "schema": {
              "$ref": "#/definitions/AtlasRelationshipDef"
            }
          }
        }
      }
    },
    "/atlas/v2/types/relationshipdef/name/{name}": {
      "get": {
        "tags": [
          "Types"
        ],
        "description": "Get the relationship definition by its name (unique).",
        "operationId": "Types_GetRelationshipDefByName",
        "x-ms-examples": {
          "Types_GetRelationshipDefByName": {
            "$ref": "./examples/Types_GetRelationshipDefByName.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/relationshipDefName"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. On successful lookup of the the relationship definition by its name.",
            "schema": {
              "$ref": "#/definitions/AtlasRelationshipDef"
            }
          }
        }
      }
    },
    "/atlas/v2/types/structdef/guid/{guid}": {
      "get": {
        "tags": [
          "Types"
        ],
        "description": "Get the struct definition for the given GUID.",
        "operationId": "Types_GetStructDefByGuid",
        "x-ms-examples": {
          "Types_GetStructDefByGuid": {
            "$ref": "./examples/Types_GetStructDefByGuid.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/structDefGuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. On successful lookup of the the struct definition by its GUID.",
            "schema": {
              "$ref": "#/definitions/AtlasStructDef"
            }
          }
        }
      }
    },
    "/atlas/v2/types/structdef/name/{name}": {
      "get": {
        "tags": [
          "Types"
        ],
        "description": "Get the struct definition by its name (unique).",
        "operationId": "Types_GetStructDefByName",
        "x-ms-examples": {
          "Types_GetStructDefByName": {
            "$ref": "./examples/Types_GetStructDefByName.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/structDefName"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. On successful lookup of the the struct definition by its name.",
            "schema": {
              "$ref": "#/definitions/AtlasStructDef"
            }
          }
        }
      }
    },
    "/atlas/v2/types/typedef/guid/{guid}": {
      "get": {
        "tags": [
          "Types"
        ],
        "description": "Get the type definition for the given GUID.",
        "operationId": "Types_GetTypeDefinitionByGuid",
        "x-ms-examples": {
          "Types_GetTypeDefinitionByGuid": {
            "$ref": "./examples/Types_GetTypeDefinitionByGuid.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/typeDefGuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. On successful lookup of the the type definition by its GUID.",
            "schema": {
              "$ref": "#/definitions/AtlasTypeDef"
            }
          }
        }
      }
    },
    "/atlas/v2/types/typedef/name/{name}": {
      "get": {
        "tags": [
          "Types"
        ],
        "description": "Get the type definition by its name (unique).",
        "operationId": "Types_GetTypeDefinitionByName",
        "x-ms-examples": {
          "Types_GetTypeDefinitionByName": {
            "$ref": "./examples/Types_GetTypeDefinitionByName.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/typeDefName"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. On successful lookup of the the type definition by its name.",
            "schema": {
              "$ref": "#/definitions/AtlasTypeDef"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Types"
        ],
        "description": "Delete API for type identified by its name.",
        "operationId": "Types_DeleteTypeByName",
        "x-ms-examples": {
          "Types_DeleteTypeByName": {
            "$ref": "./examples/Types_DeleteTypeByName.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/typeDefName"
          }
        ],
        "responses": {
          "204": {
            "description": "On successful deletion of the requested type definitions"
          }
        }
      }
    },
    "/atlas/v2/types/typedefs": {
      "get": {
        "tags": [
          "Types"
        ],
        "description": "Get all type definitions in Atlas in bulk.",
        "operationId": "Types_GetAllTypeDefinitions",
        "x-ms-examples": {
          "Types_GetAllTypeDefinitions": {
            "$ref": "./examples/Types_GetAllTypeDefinitions.json"
          },
          "Types_GetAllTermTemplateDef": {
            "$ref": "./examples/Types_GetAllTermTemplateDef.json"
          },
          "Types_GetAllEnumDef": {
            "$ref": "./examples/Types_GetAllEnumDef.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/includeTermTemplate"
          },
          {
            "$ref": "#/parameters/type"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. AtlasTypesDef with type definitions matching the search criteria or else returns empty list of type definitions.",
            "schema": {
              "$ref": "#/definitions/AtlasTypesDef"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Types"
        ],
        "description": "Create all atlas type definitions in bulk, only new definitions will be created.\nAny changes to the existing definitions will be discarded.",
        "operationId": "Types_CreateTypeDefinitions",
        "x-ms-examples": {
          "Types_CreateTypeDefinitions": {
            "$ref": "./examples/Types_CreateTypeDefinitions.json"
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "typesDef",
            "description": "A composite wrapper object with corresponding lists of the type definition.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AtlasTypesDef"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK. On successful update of requested type definitions.",
            "schema": {
              "$ref": "#/definitions/AtlasTypesDef"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Types"
        ],
        "description": "Update all types in bulk, changes detected in the type definitions would be persisted.",
        "operationId": "Types_UpdateAtlasTypeDefinitions",
        "x-ms-examples": {
          "Types_UpdateAtlasTypeDefinitions": {
            "$ref": "./examples/Types_UpdateAtlasTypeDefinitions.json"
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "typesDef",
            "description": "A composite object that captures all type definition changes.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AtlasTypesDef"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK. On successful update of requested type definitions.",
            "schema": {
              "$ref": "#/definitions/AtlasTypesDef"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Types"
        ],
        "description": "Delete API for all types in bulk.",
        "operationId": "Types_DeleteTypeDefinitions",
        "x-ms-examples": {
          "Types_DeleteTypeDefinitions": {
            "$ref": "./examples/Types_DeleteTypeDefinitions.json"
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "typesDef",
            "description": "A composite object that captures all types to be deleted",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AtlasTypesDef"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK. On successful deletion of the requested type definitions."
          }
        }
      }
    },
    "/atlas/v2/types/typedefs/headers": {
      "get": {
        "tags": [
          "Types"
        ],
        "description": "List all type definitions returned as a list of minimal information header.",
        "operationId": "Types_ListTypeDefinitionHeaders",
        "x-ms-examples": {
          "Types_ListTypeDefinitionHeaders": {
            "$ref": "./examples/Types_ListTypeDefinitionHeaders.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/includeTermTemplate"
          },
          {
            "$ref": "#/parameters/type"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of AtlasTypeDefHeader matching the search criteria\nor an empty list if no match.",
            "schema": {
              "type": "array",
              "description": "An array of AtlasTypeDefHeader matching the search criteria\nor an empty list if no match.",
              "items": {
                "$ref": "#/definitions/AtlasTypeDefHeader"
              }
            }
          }
        }
      }
    },
    "/types/termtemplatedef/guid/{guid}": {
      "get": {
        "tags": [
          "Types"
        ],
        "description": "Get the term template definition for the given GUID.",
        "operationId": "Types_GetTermTemplateDefByGuid",
        "x-ms-examples": {
          "Types_GetTermTemplateDefByGuid": {
            "$ref": "./examples/Types_GetTermTemplateDefByGuid.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/termTemplateDefGuid"
          },
          {
            "$ref": "#/parameters/purviewAPIVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. On successful lookup of the the term template definition by its GUID.",
            "schema": {
              "$ref": "#/definitions/TermTemplateDef"
            }
          }
        }
      }
    },
    "/types/termtemplatedef/name/{name}": {
      "get": {
        "tags": [
          "Types"
        ],
        "description": "Get the term template definition by its name (unique).",
        "operationId": "Types_GetTermTemplateDefByName",
        "x-ms-examples": {
          "Types_GetTermTemplateDefByName": {
            "$ref": "./examples/Types_GetTermTemplateDefByName.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/termTemplateDefName"
          },
          {
            "$ref": "#/parameters/purviewAPIVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. On successful lookup of the the term template definition by its name.",
            "schema": {
              "$ref": "#/definitions/TermTemplateDef"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AtlasAttributeDef": {
      "type": "object",
      "properties": {
        "cardinality": {
          "$ref": "#/definitions/Cardinality"
        },
        "constraints": {
          "type": "array",
          "description": "An array of constraints.",
          "items": {
            "$ref": "#/definitions/AtlasConstraintDef"
          }
        },
        "defaultValue": {
          "type": "string",
          "description": "The default value of the attribute."
        },
        "description": {
          "type": "string",
          "description": "The description of the attribute."
        },
        "includeInNotification": {
          "type": "boolean",
          "description": "Determines if it is included in notification."
        },
        "isIndexable": {
          "type": "boolean",
          "description": "Determines if it is indexable."
        },
        "isOptional": {
          "type": "boolean",
          "description": "Determines if it is optional."
        },
        "isUnique": {
          "type": "boolean",
          "description": "Determines if it unique."
        },
        "name": {
          "type": "string",
          "description": "The name of the attribute."
        },
        "options": {
          "type": "object",
          "description": "The options for the attribute.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "typeName": {
          "type": "string",
          "description": "The name of the type."
        },
        "valuesMaxCount": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum count of the values."
        },
        "valuesMinCount": {
          "type": "integer",
          "format": "int32",
          "description": "The minimum count of the values."
        }
      },
      "title": "AtlasAttributeDef",
      "description": "class that captures details of a struct-attribute."
    },
    "AtlasBaseModelObject": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string",
          "description": "The GUID of the object."
        }
      },
      "title": "AtlasBaseModelObject",
      "description": "The base model object."
    },
    "AtlasBaseTypeDef": {
      "type": "object",
      "properties": {
        "category": {
          "$ref": "#/definitions/TypeCategory"
        },
        "createTime": {
          "type": "number",
          "description": "The created time of the record."
        },
        "createdBy": {
          "type": "string",
          "description": "The user who created the record."
        },
        "dateFormatter": {
          "$ref": "#/definitions/DateFormat"
        },
        "description": {
          "type": "string",
          "description": "The description of the type definition."
        },
        "guid": {
          "type": "string",
          "description": "The GUID of the type definition."
        },
        "name": {
          "type": "string",
          "description": "The name of the type definition."
        },
        "options": {
          "type": "object",
          "description": "The options for the type definition.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "serviceType": {
          "readOnly": false,
          "description": "The service type.",
          "type": "string"
        },
        "typeVersion": {
          "type": "string",
          "description": "The version of the type."
        },
        "updateTime": {
          "type": "number",
          "description": "The update time of the record."
        },
        "updatedBy": {
          "type": "string",
          "description": "The user who updated the record."
        },
        "version": {
          "type": "number",
          "description": "The version of the record."
        },
        "lastModifiedTS": {
          "$ref": "#/definitions/LastModifiedTS"
        }
      },
      "title": "AtlasBaseTypeDef",
      "description": "Base class that captures common-attributes for all Atlas types."
    },
    "AtlasClassification": {
      "type": "object",
      "title": "AtlasClassification",
      "allOf": [
        {
          "$ref": "#/definitions/AtlasStruct"
        },
        {
          "properties": {
            "entityGuid": {
              "type": "string",
              "description": "The GUID of the entity."
            },
            "entityStatus": {
              "$ref": "#/definitions/Status"
            },
            "removePropagationsOnEntityDelete": {
              "type": "boolean",
              "description": "Determines if propagations will be removed on entity deletion."
            },
            "validityPeriods": {
              "type": "array",
              "description": "An array of time boundaries indicating validity periods.",
              "items": {
                "$ref": "#/definitions/TimeBoundary"
              }
            },
            "source": {
              "type": "string",
              "description": "indicate the source who create the classification detail"
            },
            "sourceDetails": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "properties": {}
              },
              "description": "more detail on source information"
            }
          }
        }
      ],
      "description": "An instance of a classification; it doesn't have an identity, this object exists only when associated with an entity."
    },
    "AtlasClassificationDef": {
      "type": "object",
      "title": "AtlasClassificationDef",
      "allOf": [
        {
          "$ref": "#/definitions/AtlasStructDef"
        },
        {
          "properties": {
            "entityTypes": {
              "type": "array",
              "description": "Specifying a list of entityType names in the classificationDef, ensures that classifications can\nonly be applied to those entityTypes.\n<ul>\n<li>Any subtypes of the entity types inherit the restriction</li>\n<li>Any classificationDef subtypes inherit the parents entityTypes restrictions</li>\n<li>Any classificationDef subtypes can further restrict the parents entityTypes restrictions by specifying a subset of the entityTypes</li>\n<li>An empty entityTypes list when there are no parent restrictions means there are no restrictions</li>\n<li>An empty entityTypes list when there are parent restrictions means that the subtype picks up the parents restrictions</li>\n<li>If a list of entityTypes are supplied, where one inherits from another, this will be rejected. This should encourage cleaner classificationsDefs</li>\n</ul>",
              "items": {
                "type": "string"
              }
            },
            "subTypes": {
              "type": "array",
              "description": "An array of sub types.",
              "items": {
                "type": "string"
              }
            },
            "superTypes": {
              "type": "array",
              "description": "An array of super types.",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ],
      "description": "class that captures details of a classification-type."
    },
    "AtlasClassifications": {
      "type": "object",
      "title": "AtlasClassifications",
      "allOf": [
        {
          "$ref": "#/definitions/PList"
        }
      ],
      "description": "REST serialization friendly list."
    },
    "AtlasConstraintDef": {
      "type": "object",
      "properties": {
        "params": {
          "type": "object",
          "description": "The parameters of the constraint definition.",
          "additionalProperties": {
            "type": "object",
            "properties": {}
          }
        },
        "type": {
          "type": "string",
          "description": "The type of the constraint."
        }
      },
      "title": "AtlasConstraintDef",
      "description": "class that captures details of a constraint."
    },
    "AtlasEntitiesWithExtInfo": {
      "type": "object",
      "title": "AtlasEntitiesWithExtInfo",
      "allOf": [
        {
          "$ref": "#/definitions/AtlasEntityExtInfo"
        },
        {
          "properties": {
            "entities": {
              "type": "array",
              "description": "An array of entities.",
              "items": {
                "$ref": "#/definitions/AtlasEntity"
              }
            }
          }
        }
      ],
      "description": "An instance of an entity along with extended info - like hive_table, hive_database."
    },
    "AtlasEntity": {
      "type": "object",
      "title": "AtlasEntity",
      "allOf": [
        {
          "$ref": "#/definitions/AtlasStruct"
        },
        {
          "properties": {
            "classifications": {
              "type": "array",
              "description": "An array of classifications.",
              "items": {
                "$ref": "#/definitions/AtlasClassification"
              }
            },
            "createTime": {
              "type": "number",
              "description": "The created time of the record."
            },
            "createdBy": {
              "type": "string",
              "description": "The user who created the record."
            },
            "guid": {
              "type": "string",
              "description": "The GUID of the entity."
            },
            "homeId": {
              "type": "string",
              "description": "The home ID of the entity."
            },
            "meanings": {
              "type": "array",
              "description": "An array of term assignment headers indicating the meanings of the entity.",
              "items": {
                "$ref": "#/definitions/AtlasTermAssignmentHeader"
              }
            },
            "provenanceType": {
              "readOnly": false,
              "description": "Used to record the provenance of an instance of an entity or relationship.",
              "type": "number"
            },
            "proxy": {
              "type": "boolean",
              "description": "Determines if there's a proxy."
            },
            "relationshipAttributes": {
              "type": "object",
              "description": "The attributes of relationship.",
              "additionalProperties": {
                "type": "object",
                "properties": {}
              }
            },
            "status": {
              "$ref": "#/definitions/Status"
            },
            "updateTime": {
              "type": "number",
              "description": "The update time of the record."
            },
            "updatedBy": {
              "type": "string",
              "description": "The user who updated the record."
            },
            "version": {
              "type": "number",
              "description": "The version of the entity."
            },
            "source": {
              "type": "string",
              "description": "indicate the source who create the classification detail"
            },
            "sourceDetails": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "properties": {}
              },
              "description": "more detail on source information"
            },
            "contacts": {
              "type": "object",
              "description": "The dictionary of contacts for terms. Key could be Expert or Owner.",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ContactBasic"
                }
              }
            }
          }
        }
      ],
      "description": "An instance of an entity - like hive_table, hive_database."
    },
    "TermTemplateDef": {
      "type": "object",
      "title": "TermTemplateDef",
      "allOf": [
        {
          "$ref": "#/definitions/AtlasStructDef"
        }
      ],
      "description": "term template definition for glossary term."
    },
    "AtlasEntityDef": {
      "type": "object",
      "title": "AtlasEntityDef",
      "allOf": [
        {
          "$ref": "#/definitions/AtlasStructDef"
        },
        {
          "properties": {
            "subTypes": {
              "type": "array",
              "description": "An array of sub types.",
              "items": {
                "type": "string"
              }
            },
            "superTypes": {
              "type": "array",
              "description": "An array of super types.",
              "items": {
                "type": "string"
              }
            },
            "relationshipAttributeDefs": {
              "type": "array",
              "description": "An array of relationship attributes.",
              "items": {
                "$ref": "#/definitions/AtlasRelationshipAttributeDef"
              }
            }
          }
        }
      ],
      "description": "class that captures details of a entity-type."
    },
    "AtlasEntityExtInfo": {
      "type": "object",
      "properties": {
        "referredEntities": {
          "type": "object",
          "description": "The referred entities.",
          "additionalProperties": {
            "$ref": "#/definitions/AtlasEntity"
          }
        }
      },
      "title": "AtlasEntityExtInfo",
      "description": "An instance of an entity along with extended info - like hive_table, hive_database."
    },
    "AtlasEntityHeader": {
      "type": "object",
      "title": "AtlasEntityHeader",
      "allOf": [
        {
          "$ref": "#/definitions/AtlasStruct"
        },
        {
          "properties": {
            "classificationNames": {
              "type": "array",
              "description": "An array of classification names.",
              "items": {
                "type": "string"
              }
            },
            "classifications": {
              "type": "array",
              "description": "An array of classifications.",
              "items": {
                "$ref": "#/definitions/AtlasClassification"
              }
            },
            "displayText": {
              "type": "string",
              "description": "The display text."
            },
            "guid": {
              "type": "string",
              "description": "The GUID of the record."
            },
            "meaningNames": {
              "type": "array",
              "description": "An array of meanings.",
              "items": {
                "type": "string"
              }
            },
            "meanings": {
              "type": "array",
              "description": "An array of term assignment headers.",
              "items": {
                "$ref": "#/definitions/AtlasTermAssignmentHeader"
              }
            },
            "status": {
              "$ref": "#/definitions/Status"
            }
          }
        }
      ],
      "description": "An instance of an entity - like hive_table, hive_database."
    },
    "AtlasEntityHeaders": {
      "type": "object",
      "title": "AtlasEntityHeaders",
      "properties": {
        "guidHeaderMap": {
          "readOnly": false,
          "description": "The description of the guid header map,",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/AtlasEntityHeader"
          }
        }
      },
      "description": "An instance of an entity header map."
    },
    "AtlasEntityWithExtInfo": {
      "type": "object",
      "title": "AtlasEntityWithExtInfo",
      "allOf": [
        {
          "$ref": "#/definitions/AtlasEntityExtInfo"
        },
        {
          "properties": {
            "entity": {
              "$ref": "#/definitions/AtlasEntity"
            }
          }
        }
      ],
      "description": "An instance of an entity along with extended info - like hive_table, hive_database."
    },
    "AtlasEnumDef": {
      "type": "object",
      "title": "AtlasEnumDef",
      "allOf": [
        {
          "$ref": "#/definitions/AtlasBaseTypeDef"
        },
        {
          "properties": {
            "defaultValue": {
              "type": "string",
              "description": "The default value."
            },
            "elementDefs": {
              "type": "array",
              "description": "An array of enum element definitions.",
              "items": {
                "$ref": "#/definitions/AtlasEnumElementDef"
              }
            }
          }
        }
      ],
      "description": "class that captures details of an enum-type."
    },
    "AtlasEnumElementDef": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "The description of the enum element definition."
        },
        "ordinal": {
          "type": "number",
          "description": "The ordinal of the enum element definition."
        },
        "value": {
          "type": "string",
          "description": "The value of the enum element definition."
        }
      },
      "title": "AtlasEnumElementDef",
      "description": "class that captures details of an enum-element."
    },
    "AtlasGlossary": {
      "type": "object",
      "title": "AtlasGlossary",
      "allOf": [
        {
          "$ref": "#/definitions/AtlasGlossaryBaseObject"
        },
        {
          "properties": {
            "categories": {
              "type": "array",
              "description": "An array of categories.",
              "items": {
                "$ref": "#/definitions/AtlasRelatedCategoryHeader"
              }
            },
            "language": {
              "type": "string",
              "description": "The language of the glossary."
            },
            "terms": {
              "type": "array",
              "description": "An array of related term headers.",
              "items": {
                "$ref": "#/definitions/AtlasRelatedTermHeader"
              }
            },
            "usage": {
              "type": "string",
              "description": "The usage of the glossary."
            }
          }
        }
      ],
      "description": "The glossary object."
    },
    "AtlasGlossaryBaseObject": {
      "type": "object",
      "title": "AtlasGlossaryBaseObject",
      "allOf": [
        {
          "$ref": "#/definitions/AtlasBaseModelObject"
        },
        {
          "properties": {
            "classifications": {
              "type": "array",
              "description": "An array of classifications.",
              "items": {
                "$ref": "#/definitions/AtlasClassification"
              }
            },
            "longDescription": {
              "type": "string",
              "description": "The long version description."
            },
            "name": {
              "type": "string",
              "description": "The name of the glossary object."
            },
            "qualifiedName": {
              "type": "string",
              "description": "The qualified name of the glossary object."
            },
            "shortDescription": {
              "type": "string",
              "description": "The short version of description."
            },
            "lastModifiedTS": {
              "$ref": "#/definitions/LastModifiedTS"
            }
          }
        }
      ],
      "description": "The glossary base object."
    },
    "AtlasGlossaryCategory": {
      "type": "object",
      "title": "AtlasGlossaryCategory",
      "allOf": [
        {
          "$ref": "#/definitions/AtlasGlossaryBaseObject"
        },
        {
          "properties": {
            "anchor": {
              "$ref": "#/definitions/AtlasGlossaryHeader"
            },
            "childrenCategories": {
              "type": "array",
              "description": "An array of children categories.",
              "items": {
                "$ref": "#/definitions/AtlasRelatedCategoryHeader"
              }
            },
            "parentCategory": {
              "$ref": "#/definitions/AtlasRelatedCategoryHeader"
            },
            "terms": {
              "type": "array",
              "description": "An array of related term headers.",
              "items": {
                "$ref": "#/definitions/AtlasRelatedTermHeader"
              }
            }
          }
        }
      ],
      "description": "The glossary category."
    },
    "AtlasGlossaryExtInfo": {
      "type": "object",
      "title": "AtlasGlossaryExtInfo",
      "allOf": [
        {
          "$ref": "#/definitions/AtlasGlossary"
        },
        {
          "properties": {
            "categoryInfo": {
              "type": "object",
              "description": "The glossary category information.",
              "additionalProperties": {
                "$ref": "#/definitions/AtlasGlossaryCategory"
              }
            },
            "termInfo": {
              "type": "object",
              "description": "The glossary term information.",
              "additionalProperties": {
                "$ref": "#/definitions/AtlasGlossaryTerm"
              }
            }
          }
        }
      ],
      "description": "The extended information of glossary."
    },
    "AtlasGlossaryHeader": {
      "type": "object",
      "properties": {
        "displayText": {
          "type": "string",
          "description": "The display text."
        },
        "glossaryGuid": {
          "type": "string",
          "description": "The GUID of the glossary."
        },
        "relationGuid": {
          "type": "string",
          "description": "The GUID of the relationship."
        }
      },
      "title": "AtlasGlossaryHeader",
      "description": "The glossary header with basic information."
    },
    "AtlasGlossaryTerm": {
      "type": "object",
      "title": "AtlasGlossaryTerm",
      "allOf": [
        {
          "$ref": "#/definitions/AtlasGlossaryBaseObject"
        },
        {
          "properties": {
            "abbreviation": {
              "type": "string",
              "description": "The abbreviation of the term."
            },
            "templateName": {
              "type": "array",
              "items": {
                "type": "object"
              }
            },
            "anchor": {
              "$ref": "#/definitions/AtlasGlossaryHeader"
            },
            "antonyms": {
              "type": "array",
              "description": "An array of related term headers as antonyms.",
              "items": {
                "$ref": "#/definitions/AtlasRelatedTermHeader"
              }
            },
            "createTime": {
              "type": "number",
              "description": "The created time of the record."
            },
            "createdBy": {
              "type": "string",
              "description": "The user who created the record."
            },
            "updateTime": {
              "type": "number",
              "description": "The update time of the record."
            },
            "updatedBy": {
              "type": "string",
              "description": "The user who updated the record."
            },
            "status": {
              "$ref": "#/definitions/TermStatus"
            },
            "resources": {
              "type": "array",
              "description": "An array of resource link for term",
              "items": {
                "$ref": "#/definitions/ResourceLink"
              }
            },
            "contacts": {
              "type": "object",
              "description": "The dictionary of contacts for terms. Key could be Expert or Steward.",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ContactBasic"
                }
              }
            },
            "attributes": {
              "$ref": "#/definitions/TermCustomAttributes"
            },
            "assignedEntities": {
              "type": "array",
              "description": "An array of related object IDs.",
              "items": {
                "$ref": "#/definitions/AtlasRelatedObjectId"
              }
            },
            "categories": {
              "type": "array",
              "description": "An array of term categorization headers.",
              "items": {
                "$ref": "#/definitions/AtlasTermCategorizationHeader"
              }
            },
            "classifies": {
              "type": "array",
              "description": "An array of related term headers.",
              "items": {
                "$ref": "#/definitions/AtlasRelatedTermHeader"
              }
            },
            "examples": {
              "type": "array",
              "description": "An array of examples.",
              "items": {
                "type": "string"
              }
            },
            "isA": {
              "type": "array",
              "description": "An array of related term headers indicating the is-a relationship.",
              "items": {
                "$ref": "#/definitions/AtlasRelatedTermHeader"
              }
            },
            "preferredTerms": {
              "type": "array",
              "description": "An array of preferred related term headers.",
              "items": {
                "$ref": "#/definitions/AtlasRelatedTermHeader"
              }
            },
            "preferredToTerms": {
              "type": "array",
              "description": "An array of related term headers that are preferred to.",
              "items": {
                "$ref": "#/definitions/AtlasRelatedTermHeader"
              }
            },
            "replacedBy": {
              "type": "array",
              "description": "An array of related term headers that are replaced by.",
              "items": {
                "$ref": "#/definitions/AtlasRelatedTermHeader"
              }
            },
            "replacementTerms": {
              "type": "array",
              "description": "An array of related term headers for replacement.",
              "items": {
                "$ref": "#/definitions/AtlasRelatedTermHeader"
              }
            },
            "seeAlso": {
              "type": "array",
              "description": "An array of related term headers for see also.",
              "items": {
                "$ref": "#/definitions/AtlasRelatedTermHeader"
              }
            },
            "synonyms": {
              "type": "array",
              "description": "An array of related term headers as synonyms.",
              "items": {
                "$ref": "#/definitions/AtlasRelatedTermHeader"
              }
            },
            "translatedTerms": {
              "type": "array",
              "description": "An array of translated related term headers.",
              "items": {
                "$ref": "#/definitions/AtlasRelatedTermHeader"
              }
            },
            "translationTerms": {
              "type": "array",
              "description": "An array of related term headers for translation.",
              "items": {
                "$ref": "#/definitions/AtlasRelatedTermHeader"
              }
            },
            "usage": {
              "type": "string",
              "description": "The usage of the term."
            },
            "validValues": {
              "type": "array",
              "description": "An array of related term headers as valid values.",
              "items": {
                "$ref": "#/definitions/AtlasRelatedTermHeader"
              }
            },
            "validValuesFor": {
              "type": "array",
              "description": "An array of related term headers as valid values for other records.",
              "items": {
                "$ref": "#/definitions/AtlasRelatedTermHeader"
              }
            }
          }
        }
      ],
      "description": "The glossary term."
    },
    "ResourceLink": {
      "title": "ResourceLink",
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string",
          "description": "Display name for url."
        },
        "url": {
          "type": "string",
          "description": "web url. http or https"
        }
      }
    },
    "ContactBasic": {
      "title": "ContactBasic",
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Azure Active Directory object Id."
        },
        "info": {
          "type": "string",
          "description": "additional information to describe this contact."
        }
      }
    },
    "TermStatus": {
      "type": "string",
      "title": "Status",
      "description": "Status of the AtlasGlossaryTerm",
      "enum": [
        "Draft",
        "Approved",
        "Alert",
        "Expired"
      ],
      "x-ms-enum": {
        "name": "TermStatus",
        "modelAsString": true
      }
    },
    "TermCustomAttributes": {
      "title": "attributes",
      "description": "The custom attributes of the term, which is map<string,map<string,object>>.\nThe key of the first layer map is term template name.",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/TermCustomAttributesExtraProperties"
      }
    },
    "TermCustomAttributesExtraProperties": {
      "type": "object",
      "description": "The term attribute name and attribute value, which is map<string,object>",
      "additionalProperties": {
        "type": "object",
        "description": "The value of custom term attribute"
      }
    },
    "AtlasLineageInfo": {
      "type": "object",
      "properties": {
        "baseEntityGuid": {
          "type": "string",
          "description": "The GUID of the base entity."
        },
        "guidEntityMap": {
          "type": "object",
          "description": "The GUID entity map.",
          "additionalProperties": {
            "$ref": "#/definitions/AtlasEntityHeader"
          }
        },
        "widthCounts": {
          "type": "object",
          "description": "The entity count in specific direction.",
          "additionalProperties": {
            "$ref": "#/definitions/AtlasLineageInfoExtraProperties"
          }
        },
        "lineageDepth": {
          "type": "integer",
          "format": "int32",
          "description": "The depth of lineage."
        },
        "lineageWidth": {
          "type": "integer",
          "format": "int32",
          "description": "The width of lineage."
        },
        "includeParent": {
          "type": "boolean",
          "description": "True to return the parent of the base entity."
        },
        "childrenCount": {
          "type": "integer",
          "format": "int32",
          "description": "The number of children node."
        },
        "lineageDirection": {
          "$ref": "#/definitions/LineageDirection"
        },
        "parentRelations": {
          "type": "array",
          "description": "An array of parentRelations relations.",
          "items": {
            "$ref": "#/definitions/ParentRelation"
          }
        },
        "relations": {
          "type": "array",
          "description": "An array of lineage relations.",
          "items": {
            "$ref": "#/definitions/LineageRelation"
          }
        }
      },
      "title": "AtlasLineageInfo",
      "description": "The lineage information."
    },
    "AtlasLineageInfoExtraProperties": {
      "type": "object",
      "description": "The lineage direction",
      "additionalProperties": {
        "type": "object",
        "description": "The entity guid."
      }
    },
    "AtlasObjectId": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string",
          "description": "The GUID of the object."
        },
        "typeName": {
          "type": "string",
          "description": "The name of the type."
        },
        "uniqueAttributes": {
          "type": "object",
          "description": "The unique attributes of the object.",
          "additionalProperties": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "title": "AtlasObjectId",
      "description": "Reference to an object-instance of an Atlas type - like entity."
    },
    "AtlasRelatedCategoryHeader": {
      "type": "object",
      "properties": {
        "categoryGuid": {
          "type": "string",
          "description": "The GUID of the category."
        },
        "description": {
          "type": "string",
          "description": "The description of the category header."
        },
        "displayText": {
          "type": "string",
          "description": "The display text."
        },
        "parentCategoryGuid": {
          "type": "string",
          "description": "The GUID of the parent category."
        },
        "relationGuid": {
          "type": "string",
          "description": "The GUID of the relationship."
        }
      },
      "title": "AtlasRelatedCategoryHeader",
      "description": "The header of the related category."
    },
    "AtlasRelatedObjectId": {
      "type": "object",
      "title": "AtlasRelatedObjectId",
      "allOf": [
        {
          "$ref": "#/definitions/AtlasObjectId"
        },
        {
          "properties": {
            "displayText": {
              "type": "string",
              "description": "The display text."
            },
            "entityStatus": {
              "$ref": "#/definitions/Status"
            },
            "relationshipType": {
              "type": "string"
            },
            "relationshipAttributes": {
              "$ref": "#/definitions/AtlasStruct"
            },
            "relationshipGuid": {
              "type": "string",
              "description": "The GUID of the relationship."
            },
            "relationshipStatus": {
              "$ref": "#/definitions/Status_AtlasRelationship"
            }
          }
        }
      ],
      "description": "Reference to an object-instance of AtlasEntity type used in relationship attribute values"
    },
    "AtlasRelatedTermHeader": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "The description of the related term."
        },
        "displayText": {
          "type": "string",
          "description": "The display text."
        },
        "expression": {
          "type": "string",
          "description": "The expression of the term."
        },
        "relationGuid": {
          "type": "string",
          "description": "The GUID of the relationship."
        },
        "source": {
          "type": "string",
          "description": "The source of the term."
        },
        "status": {
          "$ref": "#/definitions/AtlasTermRelationshipStatus"
        },
        "steward": {
          "type": "string",
          "description": "The steward of the term."
        },
        "termGuid": {
          "type": "string",
          "description": "The GUID of the term."
        }
      },
      "title": "AtlasRelatedTermHeader",
      "description": "The header of the related term."
    },
    "AtlasRelationship": {
      "type": "object",
      "title": "AtlasRelationship",
      "allOf": [
        {
          "$ref": "#/definitions/AtlasStruct"
        },
        {
          "properties": {
            "createTime": {
              "type": "number",
              "description": "The created time of the record."
            },
            "createdBy": {
              "type": "string",
              "description": "The user who created the record."
            },
            "end1": {
              "$ref": "#/definitions/AtlasObjectId"
            },
            "end2": {
              "$ref": "#/definitions/AtlasObjectId"
            },
            "guid": {
              "type": "string",
              "description": "The GUID of the relationship."
            },
            "homeId": {
              "type": "string",
              "description": "The home ID of the relationship."
            },
            "label": {
              "type": "string",
              "description": "The label of the relationship."
            },
            "provenanceType": {
              "readOnly": false,
              "description": "Used to record the provenance of an instance of an entity or relationship",
              "type": "number"
            },
            "status": {
              "$ref": "#/definitions/Status_AtlasRelationship"
            },
            "updateTime": {
              "type": "number",
              "description": "The update time of the record."
            },
            "updatedBy": {
              "type": "string",
              "description": "The user who updated the record."
            },
            "version": {
              "type": "number",
              "description": "The version of the relationship."
            }
          }
        }
      ],
      "description": "Atlas relationship instance."
    },
    "AtlasRelationshipDef": {
      "type": "object",
      "title": "AtlasRelationshipDef",
      "allOf": [
        {
          "$ref": "#/definitions/AtlasStructDef"
        },
        {
          "properties": {
            "endDef1": {
              "$ref": "#/definitions/AtlasRelationshipEndDef"
            },
            "endDef2": {
              "$ref": "#/definitions/AtlasRelationshipEndDef"
            },
            "relationshipCategory": {
              "$ref": "#/definitions/RelationshipCategory"
            },
            "relationshipLabel": {
              "type": "string",
              "description": "The label of the relationship."
            }
          }
        }
      ],
      "description": "AtlasRelationshipDef is a TypeDef that defines a relationship.\n<p>\nAs with other typeDefs the AtlasRelationshipDef has a name. Once created the RelationshipDef has a guid.\nThe name and the guid are the 2 ways that the RelationshipDef is identified.\n<p>\nRelationshipDefs have 2 ends, each of which specify cardinality, an EntityDef type name and name and optionally\nwhether the end is a container.\n<p>\nRelationshipDefs can have AttributeDefs - though only primitive types are allowed. <br>\nRelationshipDefs have a relationshipCategory specifying the UML type of relationship required <br>\nThe way EntityDefs and RelationshipDefs are intended to be used is that EntityDefs will define AttributeDefs these AttributeDefs\nwill not specify an EntityDef type name as their types.\n<p>\nRelationshipDefs introduce new attributes to the entity instances. For example\n<p>\nEntityDef A might have attributes attr1,attr2,attr3 <br>\nEntityDef B might have attributes attr4,attr5,attr6 <br>\nRelationshipDef AtoB might define 2 ends <br>\n\n<pre>\n   end1:  type A, name attr7\n   end2:  type B, name attr8  </pre>\n\n<p>\nWhen an instance of EntityDef A is created, it will have attributes attr1,attr2,attr3,attr7 <br>\nWhen an instance of EntityDef B is created, it will have attributes attr4,attr5,attr6,attr8\n<p>\nIn this way relationshipDefs can be authored separately from entityDefs and can inject relationship attributes into\nthe entity instances"
    },
    "AtlasRelationshipEndDef": {
      "type": "object",
      "properties": {
        "cardinality": {
          "$ref": "#/definitions/Cardinality"
        },
        "description": {
          "type": "string",
          "description": "The description of the relationship end definition."
        },
        "isContainer": {
          "type": "boolean",
          "description": "Determines if it is container."
        },
        "isLegacyAttribute": {
          "type": "boolean",
          "description": "Determines if it is a legacy attribute."
        },
        "name": {
          "type": "string",
          "description": "The name of the relationship end definition."
        },
        "type": {
          "type": "string",
          "description": "The type of the relationship end."
        }
      },
      "title": "AtlasRelationshipEndDef",
      "description": "The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an\nattribute name, cardinality and whether it  is the container end of the relationship."
    },
    "AtlasRelationshipAttributeDef": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AtlasAttributeDef"
        },
        {
          "properties": {
            "isLegacyAttribute": {
              "type": "boolean",
              "description": "Determines if it is a legacy attribute."
            },
            "relationshipTypeName": {
              "type": "string",
              "description": "The name of the relationship type."
            }
          }
        }
      ],
      "title": "AtlasRelationshipEndDef",
      "description": "The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an\nattribute name, cardinality and whether it  is the container end of the relationship."
    },
    "AtlasRelationshipWithExtInfo": {
      "type": "object",
      "properties": {
        "referredEntities": {
          "type": "object",
          "description": "The referred entity header.",
          "additionalProperties": {
            "$ref": "#/definitions/AtlasEntityHeader"
          }
        },
        "relationship": {
          "$ref": "#/definitions/AtlasRelationship"
        }
      },
      "title": "AtlasRelationshipWithExtInfo",
      "description": "The relationship with extended information."
    },
    "AtlasStruct": {
      "type": "object",
      "properties": {
        "attributes": {
          "type": "object",
          "description": "The attributes of the struct.",
          "additionalProperties": {
            "type": "object",
            "properties": {}
          }
        },
        "typeName": {
          "type": "string",
          "description": "The name of the type."
        },
        "lastModifiedTS": {
          "$ref": "#/definitions/LastModifiedTS"
        }
      },
      "title": "AtlasStruct",
      "description": "Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification."
    },
    "AtlasStructDef": {
      "type": "object",
      "title": "AtlasStructDef",
      "allOf": [
        {
          "$ref": "#/definitions/AtlasBaseTypeDef"
        },
        {
          "properties": {
            "attributeDefs": {
              "type": "array",
              "description": "An array of attribute definitions.",
              "items": {
                "$ref": "#/definitions/AtlasAttributeDef"
              }
            }
          }
        }
      ],
      "description": "class that captures details of a struct-type."
    },
    "AtlasTermAssignmentHeader": {
      "type": "object",
      "properties": {
        "confidence": {
          "type": "integer",
          "format": "int32",
          "description": "The confidence of the term assignment."
        },
        "createdBy": {
          "type": "string",
          "description": "The user who created the record."
        },
        "description": {
          "type": "string",
          "description": "The description of the term assignment."
        },
        "displayText": {
          "type": "string",
          "description": "The display text."
        },
        "expression": {
          "type": "string",
          "description": "The expression of the term assignment."
        },
        "relationGuid": {
          "type": "string",
          "description": "The GUID of the relationship."
        },
        "source": {
          "type": "string",
          "description": "The source of the term."
        },
        "status": {
          "$ref": "#/definitions/AtlasTermAssignmentStatus"
        },
        "steward": {
          "type": "string",
          "description": "The steward of the term."
        },
        "termGuid": {
          "type": "string",
          "description": "The GUID of the term."
        }
      },
      "title": "AtlasTermAssignmentHeader",
      "description": "The header for term assignment."
    },
    "AtlasTermAssignmentStatus": {
      "type": "string",
      "title": "AtlasTermAssignmentStatus",
      "description": "The status of terms assignment.",
      "enum": [
        "DISCOVERED",
        "PROPOSED",
        "IMPORTED",
        "VALIDATED",
        "DEPRECATED",
        "OBSOLETE",
        "OTHER"
      ],
      "x-ms-enum": {
        "name": "AtlasTermAssignmentStatus",
        "modelAsString": true
      }
    },
    "AtlasTermCategorizationHeader": {
      "type": "object",
      "properties": {
        "categoryGuid": {
          "type": "string",
          "description": "The GUID of the category."
        },
        "description": {
          "type": "string",
          "description": "The description of the record."
        },
        "displayText": {
          "type": "string",
          "description": "The display text."
        },
        "relationGuid": {
          "type": "string",
          "description": "The GUID of the relationship."
        },
        "status": {
          "$ref": "#/definitions/AtlasTermRelationshipStatus"
        }
      },
      "title": "AtlasTermCategorizationHeader",
      "description": "The basic information for term categorization."
    },
    "AtlasTermRelationshipStatus": {
      "type": "string",
      "title": "AtlasTermRelationshipStatus",
      "description": "The status of term relationship.",
      "enum": [
        "DRAFT",
        "ACTIVE",
        "DEPRECATED",
        "OBSOLETE",
        "OTHER"
      ],
      "x-ms-enum": {
        "name": "AtlasTermRelationshipStatus",
        "modelAsString": true
      }
    },
    "AtlasTypeDefHeader": {
      "type": "object",
      "properties": {
        "category": {
          "$ref": "#/definitions/TypeCategory"
        },
        "guid": {
          "type": "string",
          "description": "The GUID of the type definition."
        },
        "name": {
          "type": "string",
          "description": "The name of the type definition."
        }
      },
      "title": "AtlasTypeDefHeader",
      "description": "The basic information of the type definition."
    },
    "AtlasTypesDef": {
      "type": "object",
      "properties": {
        "classificationDefs": {
          "type": "array",
          "description": "An array of classification definitions.",
          "items": {
            "$ref": "#/definitions/AtlasClassificationDef"
          }
        },
        "entityDefs": {
          "type": "array",
          "description": "An array of entity definitions.",
          "items": {
            "$ref": "#/definitions/AtlasEntityDef"
          }
        },
        "enumDefs": {
          "type": "array",
          "description": "An array of enum definitions.",
          "items": {
            "$ref": "#/definitions/AtlasEnumDef"
          }
        },
        "relationshipDefs": {
          "type": "array",
          "description": "An array of relationship definitions.",
          "items": {
            "$ref": "#/definitions/AtlasRelationshipDef"
          }
        },
        "structDefs": {
          "type": "array",
          "description": "An array of struct definitions.",
          "items": {
            "$ref": "#/definitions/AtlasStructDef"
          }
        },
        "termTemplateDefs": {
          "type": "array",
          "description": "An array of term template definitions.",
          "items": {
            "$ref": "#/definitions/TermTemplateDef"
          }
        }
      },
      "title": "AtlasTypesDef",
      "description": "The definitions of types."
    },
    "AtlasExtraTypeDef": {
      "type": "object",
      "properties": {
        "entityTypes": {
          "type": "array",
          "description": "Specifying a list of entityType names in the classificationDef, ensures that classifications can\nonly be applied to those entityTypes.\n<ul>\n<li>Any subtypes of the entity types inherit the restriction</li>\n<li>Any classificationDef subtypes inherit the parents entityTypes restrictions</li>\n<li>Any classificationDef subtypes can further restrict the parents entityTypes restrictions by specifying a subset of the entityTypes</li>\n<li>An empty entityTypes list when there are no parent restrictions means there are no restrictions</li>\n<li>An empty entityTypes list when there are parent restrictions means that the subtype picks up the parents restrictions</li>\n<li>If a list of entityTypes are supplied, where one inherits from another, this will be rejected. This should encourage cleaner classificationsDefs</li>\n</ul>",
          "items": {
            "type": "string"
          }
        },
        "subTypes": {
          "type": "array",
          "description": "An array of sub types.",
          "items": {
            "type": "string"
          }
        },
        "superTypes": {
          "type": "array",
          "description": "An array of super types.",
          "items": {
            "type": "string"
          }
        },
        "relationshipAttributeDefs": {
          "type": "array",
          "description": "An array of relationship attributes.",
          "items": {
            "$ref": "#/definitions/AtlasRelationshipAttributeDef"
          }
        },
        "defaultValue": {
          "type": "string",
          "description": "The default value."
        },
        "elementDefs": {
          "type": "array",
          "description": "An array of enum element definitions.",
          "items": {
            "$ref": "#/definitions/AtlasEnumElementDef"
          }
        },
        "endDef1": {
          "$ref": "#/definitions/AtlasRelationshipEndDef"
        },
        "endDef2": {
          "$ref": "#/definitions/AtlasRelationshipEndDef"
        },
        "relationshipCategory": {
          "$ref": "#/definitions/RelationshipCategory"
        },
        "relationshipLabel": {
          "type": "string",
          "description": "The label of the relationship."
        },
        "attributeDefs": {
          "type": "array",
          "description": "An array of attribute definitions.",
          "items": {
            "$ref": "#/definitions/AtlasAttributeDef"
          }
        }
      },
      "title": "AtlasExtraTypeDef",
      "description": "Extra properties for a type."
    },
    "AtlasTypeDef": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AtlasBaseTypeDef"
        },
        {
          "$ref": "#/definitions/AtlasExtraTypeDef"
        }
      ],
      "title": "AtlasTypeDef",
      "description": "The definitions of type."
    },
    "Cardinality": {
      "type": "string",
      "title": "Cardinality",
      "description": "single-valued attribute or multi-valued attribute.",
      "enum": [
        "SINGLE",
        "LIST",
        "SET"
      ],
      "x-ms-enum": {
        "name": "Cardinality",
        "modelAsString": true
      }
    },
    "ClassificationAssociateRequest": {
      "type": "object",
      "properties": {
        "classification": {
          "$ref": "#/definitions/AtlasClassification"
        },
        "entityGuids": {
          "type": "array",
          "description": "The GUID of the entity.",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "ClassificationAssociateRequest",
      "description": "The request for classification association."
    },
    "DateFormat": {
      "type": "object",
      "title": "DateFormat",
      "properties": {
        "availableLocales": {
          "type": "array",
          "description": "An array of available locales.",
          "items": {
            "type": "string"
          }
        },
        "calendar": {
          "type": "number"
        },
        "dateInstance": {
          "$ref": "#/definitions/DateFormat"
        },
        "dateTimeInstance": {
          "$ref": "#/definitions/DateFormat"
        },
        "instance": {
          "$ref": "#/definitions/DateFormat"
        },
        "lenient": {
          "type": "boolean",
          "description": "Determines the leniency of the date format."
        },
        "numberFormat": {
          "$ref": "#/definitions/NumberFormat"
        },
        "timeInstance": {
          "$ref": "#/definitions/DateFormat"
        },
        "timeZone": {
          "$ref": "#/definitions/TimeZone"
        }
      },
      "description": "The date format."
    },
    "EntityMutationResponse": {
      "type": "object",
      "properties": {
        "guidAssignments": {
          "type": "object",
          "description": "A map of GUID assignments with entities.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "mutatedEntities": {
          "type": "object",
          "description": "The entity headers of mutated entities.",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/AtlasEntityHeader"
            }
          }
        },
        "partialUpdatedEntities": {
          "type": "array",
          "description": "An array of entity headers that partially updated.",
          "items": {
            "$ref": "#/definitions/AtlasEntityHeader"
          }
        }
      },
      "title": "EntityMutationResponse",
      "description": "The mutation response of entity."
    },
    "LineageDirection": {
      "type": "string",
      "title": "LineageDirection",
      "description": "The enum of lineage direction.",
      "enum": [
        "INPUT",
        "OUTPUT",
        "BOTH"
      ],
      "x-ms-enum": {
        "name": "LineageDirection",
        "modelAsString": true
      }
    },
    "LineageRelation": {
      "type": "object",
      "properties": {
        "fromEntityId": {
          "type": "string",
          "description": "The GUID of from-entity."
        },
        "relationshipId": {
          "type": "string",
          "description": "The GUID of relationship."
        },
        "toEntityId": {
          "type": "string",
          "description": "The GUID of to-entity."
        }
      },
      "title": "LineageRelation",
      "description": "The lineage relation with GUID of the from and to entity."
    },
    "ParentRelation": {
      "type": "object",
      "properties": {
        "childEntityId": {
          "type": "string",
          "description": "The GUID of child entity."
        },
        "relationshipId": {
          "type": "string",
          "description": "The GUID of relationship."
        },
        "parentEntityId": {
          "type": "string",
          "description": "The GUID of parent entity."
        }
      },
      "title": "ParentRelation",
      "description": "The lineage parents relation with GUID of the parent entity and to child entity."
    },
    "NumberFormat": {
      "type": "object",
      "title": "NumberFormat",
      "properties": {
        "availableLocales": {
          "type": "array",
          "description": "The number format.",
          "items": {
            "type": "string"
          }
        },
        "currency": {
          "type": "string",
          "description": "The currency."
        },
        "currencyInstance": {
          "$ref": "#/definitions/NumberFormat"
        },
        "groupingUsed": {
          "type": "boolean",
          "description": "Determines if grouping is used."
        },
        "instance": {
          "$ref": "#/definitions/NumberFormat"
        },
        "integerInstance": {
          "$ref": "#/definitions/NumberFormat"
        },
        "maximumFractionDigits": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum of fraction digits."
        },
        "maximumIntegerDigits": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum of integer digits."
        },
        "minimumFractionDigits": {
          "type": "integer",
          "format": "int32",
          "description": "The minimum of fraction digits."
        },
        "minimumIntegerDigits": {
          "type": "integer",
          "format": "int32",
          "description": "The minimum of integer digits."
        },
        "numberInstance": {
          "$ref": "#/definitions/NumberFormat"
        },
        "parseIntegerOnly": {
          "type": "boolean",
          "description": "Determines if only integer is parsed."
        },
        "percentInstance": {
          "$ref": "#/definitions/NumberFormat"
        },
        "roundingMode": {
          "$ref": "#/definitions/RoundingMode"
        }
      },
      "description": "The number format."
    },
    "TermGuid": {
      "type": "string",
      "title": "termGuid",
      "description": "The globally unique identifier for glossary term."
    },
    "PList": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "description": "An array of objects.",
          "items": {
            "type": "object",
            "properties": {}
          }
        },
        "pageSize": {
          "type": "integer",
          "format": "int32",
          "description": "The size of the page."
        },
        "sortBy": {
          "type": "string",
          "description": "The sorted by field."
        },
        "sortType": {
          "$ref": "#/definitions/SortType"
        },
        "startIndex": {
          "type": "integer",
          "format": "int64",
          "description": "The start index of the page."
        },
        "totalCount": {
          "type": "integer",
          "format": "int64",
          "description": "The total count of items."
        }
      },
      "title": "PList",
      "description": "Paginated-list, for returning search results."
    },
    "RelationshipCategory": {
      "type": "string",
      "title": "RelationshipCategory",
      "description": "The Relationship category determines the style of relationship around containment and lifecycle.\nUML terminology is used for the values.\n<p>\nASSOCIATION is a relationship with no containment. <br>\nCOMPOSITION and AGGREGATION are containment relationships.\n<p>\nThe difference being in the lifecycles of the container and its children. In the COMPOSITION case,\nthe children cannot exist without the container. For AGGREGATION, the life cycles\nof the container and children are totally independent.",
      "enum": [
        "ASSOCIATION",
        "AGGREGATION",
        "COMPOSITION"
      ],
      "x-ms-enum": {
        "name": "RelationshipCategory",
        "modelAsString": true
      }
    },
    "RoundingMode": {
      "type": "string",
      "title": "RoundingMode",
      "description": "The enum of rounding mode.",
      "enum": [
        "UP",
        "DOWN",
        "CEILING",
        "FLOOR",
        "HALF_UP",
        "HALF_DOWN",
        "HALF_EVEN",
        "UNNECESSARY"
      ],
      "x-ms-enum": {
        "name": "RoundingMode",
        "modelAsString": true
      }
    },
    "SortType": {
      "type": "string",
      "title": "SortType",
      "description": "to specify whether the result should be sorted? If yes, whether asc or desc.",
      "enum": [
        "NONE",
        "ASC",
        "DESC"
      ],
      "x-ms-enum": {
        "name": "SortType",
        "modelAsString": true
      }
    },
    "Status": {
      "type": "string",
      "title": "Status",
      "description": "Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.",
      "enum": [
        "ACTIVE",
        "DELETED"
      ],
      "x-ms-enum": {
        "name": "Status",
        "modelAsString": true
      }
    },
    "Status_AtlasRelationship": {
      "type": "string",
      "title": "Status",
      "description": "The enum of relationship status.",
      "enum": [
        "ACTIVE",
        "DELETED"
      ],
      "x-ms-enum": {
        "name": "Status_AtlasRelationship",
        "modelAsString": true
      }
    },
    "TimeBoundary": {
      "type": "object",
      "properties": {
        "endTime": {
          "type": "string",
          "description": "The end of the time boundary."
        },
        "startTime": {
          "type": "string",
          "description": "The start of the time boundary."
        },
        "timeZone": {
          "type": "string",
          "description": "The timezone of the time boundary."
        }
      },
      "title": "TimeBoundary",
      "description": "Captures time-boundary details"
    },
    "TimeZone": {
      "type": "object",
      "properties": {
        "dstSavings": {
          "type": "integer",
          "format": "int32",
          "description": "The value of the daylight saving time."
        },
        "id": {
          "type": "string",
          "description": "The ID of the timezone."
        },
        "availableIds": {
          "type": "array",
          "description": "An array of available IDs.",
          "items": {
            "type": "string"
          }
        },
        "default": {
          "$ref": "#/definitions/TimeZone"
        },
        "displayName": {
          "type": "string",
          "description": "The display name of the timezone."
        },
        "rawOffset": {
          "type": "integer",
          "format": "int32",
          "description": "The raw offset of the timezone."
        }
      },
      "title": "TimeZone",
      "description": "The timezone information."
    },
    "TypeCategory": {
      "type": "string",
      "title": "TypeCategory",
      "description": "The enum of type category.",
      "enum": [
        "PRIMITIVE",
        "OBJECT_ID_TYPE",
        "ENUM",
        "STRUCT",
        "CLASSIFICATION",
        "ENTITY",
        "ARRAY",
        "MAP",
        "RELATIONSHIP",
        "TERM_TEMPLATE"
      ],
      "x-ms-enum": {
        "name": "TypeCategory",
        "modelAsString": true
      }
    },
    "SuggestResult": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SuggestResultValue"
          }
        }
      },
      "title": "SuggestResult",
      "description": "The result item of the search suggest."
    },
    "BrowseResult": {
      "type": "object",
      "properties": {
        "@search.count": {
          "type": "integer",
          "format": "int32",
          "description": "The total number of browse results."
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BrowseResultValue"
          }
        }
      },
      "title": "BrowseResult",
      "description": "The result item of the browse request."
    },
    "SuggestResultValue": {
      "type": "object",
      "properties": {
        "@search.score": {
          "type": "number",
          "format": "float",
          "description": "The search score calculated by the search engine. The results are ordered by search score by default."
        },
        "@search.text": {
          "type": "string",
          "description": "The target text that contains the keyword as prefix. The keyword is wrapped with emphasis mark."
        },
        "description": {
          "type": "string",
          "description": "The description of the record."
        },
        "id": {
          "type": "string",
          "description": "The GUID of the record."
        },
        "name": {
          "type": "string",
          "description": "The name of the record."
        },
        "owner": {
          "type": "string",
          "description": "The owner of the record. This is an Atlas native attribute."
        },
        "qualifiedName": {
          "type": "string",
          "description": "The qualified name of the record."
        },
        "entityType": {
          "type": "string",
          "description": "The type name of the record."
        },
        "classification": {
          "type": "array",
          "description": "The classifications of the record.",
          "items": {
            "type": "string"
          }
        },
        "label": {
          "type": "array",
          "description": "The labels of the record.",
          "items": {
            "type": "string"
          }
        },
        "term": {
          "type": "array",
          "description": "The terms assigned to the record.",
          "items": {
            "$ref": "#/definitions/TermSearchResultValue"
          }
        },
        "contact": {
          "type": "array",
          "description": "The contacts of the record.",
          "items": {
            "$ref": "#/definitions/ContactSearchResultValue"
          }
        },
        "assetType": {
          "type": "array",
          "description": "The asset types of the record.",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "SuggestResultValue",
      "description": "The value item of the search suggest."
    },
    "BrowseResultValue": {
      "type": "object",
      "properties": {
        "entityType": {
          "type": "string",
          "description": "The type name of the record."
        },
        "id": {
          "type": "string",
          "description": "The GUID of the record."
        },
        "isLeaf": {
          "type": "boolean",
          "description": "If the record is a leaf entity."
        },
        "name": {
          "type": "string",
          "description": "The name of the record."
        },
        "owner": {
          "type": "array",
          "description": "The owners of the record.",
          "items": {
            "$ref": "#/definitions/BrowseResultOwner"
          }
        },
        "path": {
          "type": "string",
          "description": "The path of the record."
        },
        "qualifiedName": {
          "type": "string",
          "description": "The qualified name of the record."
        }
      },
      "title": "BrowseResultValue",
      "description": "The value item of the browse result."
    },
    "BrowseResultOwner": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The GUID of the owner."
        },
        "displayName": {
          "type": "string",
          "description": "The display name of the owner."
        },
        "mail": {
          "type": "string",
          "description": "The mail of the owner."
        },
        "contactType": {
          "type": "string",
          "description": "The contact type of the owner. The value will be Owner."
        }
      },
      "title": "BrowseResultOwner",
      "description": "The value item of the browse owner."
    },
    "SearchResult": {
      "type": "object",
      "properties": {
        "@search.count": {
          "type": "integer",
          "format": "int32",
          "description": "The total number of search results (not the number of documents in a single page)."
        },
        "@search.facets": {
          "$ref": "#/definitions/SearchFacetResultValue"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SearchResultValue"
          }
        }
      },
      "title": "SearchResult",
      "description": "The result of the search result."
    },
    "SearchFacetResultValue": {
      "type": "object",
      "properties": {
        "assetType": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SearchFacetItemValue"
          }
        },
        "classification": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SearchFacetItemValue"
          }
        },
        "classificationCategory": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SearchFacetItemValue"
          }
        },
        "contactId": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SearchFacetItemValue"
          }
        },
        "fileExtension": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SearchFacetItemValue"
          }
        },
        "label": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SearchFacetItemValue"
          }
        },
        "term": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SearchFacetItemValue"
          }
        }
      },
      "title": "Context",
      "description": "A facet list that consists of index fields assetType ,classification, classificationCategory, contactId, fileExtension, label, and label. When the facet is specified in the request, the value of the facet is returned as an element of @search.facets."
    },
    "SearchFacetItemValue": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The count of the facet item."
        },
        "value": {
          "type": "string",
          "description": "The name of the facet item."
        }
      },
      "title": "SearchFacetItemValue",
      "description": "The content of a search facet result item."
    },
    "SearchFacetItem": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The count of the facet item."
        },
        "facet": {
          "type": "string",
          "description": "The name of the facet item."
        },
        "sort": {
          "type": "object"
        }
      },
      "title": "SearchFacetItemValue",
      "description": "The content of a search facet result item."
    },
    "SearchResultValue": {
      "type": "object",
      "properties": {
        "@search.score": {
          "type": "number",
          "format": "float",
          "description": "The search score calculated by the search engine. The results are ordered by search score by default."
        },
        "@search.highlights": {
          "$ref": "#/definitions/SearchHighlights"
        },
        "@search.text": {
          "type": "string",
          "description": "The target text that contains the keyword as prefix. The keyword is wrapped with emphasis mark."
        },
        "description": {
          "type": "string",
          "description": "The description of the record."
        },
        "id": {
          "type": "string",
          "description": "The GUID of the record."
        },
        "name": {
          "type": "string",
          "description": "The name of the record."
        },
        "owner": {
          "type": "string",
          "description": "The owner of the record. This is an Atlas native attribute."
        },
        "qualifiedName": {
          "type": "string",
          "description": "The qualified name of the record."
        },
        "entityType": {
          "type": "string",
          "description": "The type name of the record."
        },
        "classification": {
          "type": "array",
          "description": "The classifications of the record.",
          "items": {
            "type": "string"
          }
        },
        "label": {
          "type": "array",
          "description": "The labels of the record.",
          "items": {
            "type": "string"
          }
        },
        "term": {
          "type": "array",
          "description": "The terms assigned to the record.",
          "items": {
            "$ref": "#/definitions/TermSearchResultValue"
          }
        },
        "contact": {
          "type": "array",
          "description": "The contacts of the record.",
          "items": {
            "$ref": "#/definitions/ContactSearchResultValue"
          }
        },
        "assetType": {
          "type": "array",
          "description": "The asset types of the record.",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "SearchResultValue",
      "description": "The value item of the search result."
    },
    "SearchHighlights": {
      "type": "object",
      "description": "A highlight list that consists of index fields id ,qualifiedName, name, description, entityType. When the keyword appears in those fields, the value of the field, attached with emphasis mark, is returned as an element of @search.highlights.",
      "properties": {
        "id": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "qualifiedName": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "entityType": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "SearchHighlights"
    },
    "TermSearchResultValue": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the term."
        },
        "glossaryName": {
          "type": "string",
          "description": "The name of the glossary which contains the term."
        },
        "guid": {
          "type": "string",
          "description": "The GUID of the term."
        }
      },
      "title": "Context",
      "description": "The context."
    },
    "ContactSearchResultValue": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The GUID of the contact."
        },
        "info": {
          "type": "string",
          "description": "The description of the contact."
        },
        "contactType": {
          "type": "string",
          "description": "The type of the contact. It can be Expert or Owner for an entity. It can be Expert or Steward for a glossary term."
        }
      },
      "title": "contact",
      "description": "The contact in the search and suggest result."
    },
    "AutoCompleteRequest": {
      "type": "object",
      "properties": {
        "keywords": {
          "type": "string",
          "description": "The keywords applied to all fields that support autocomplete operation. It must be at least 1 character, and no more than 100 characters."
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "description": "The number of autocomplete results we hope to return. The default value is 50. The value must be a number between 1 and 100."
        },
        "filter": {
          "type": "object",
          "description": "The filter for the autocomplete request."
        }
      },
      "title": "AutoCompleteRequest",
      "description": "The query of autocomplete request."
    },
    "AutoCompleteResult": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AutoCompleteResultValue"
          }
        }
      },
      "title": "AutoCompleteResult",
      "description": "The result of the autocomplete request."
    },
    "AutoCompleteResultValue": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string",
          "description": "The completed term or phrase."
        },
        "queryPlusText": {
          "type": "string",
          "description": "The completed search query text."
        }
      },
      "title": "AutoCompleteResultValue",
      "description": "The value item of the autocomplete suggest."
    },
    "SearchRequest": {
      "type": "object",
      "properties": {
        "keywords": {
          "type": "string",
          "description": "The keywords applied to all searchable fields."
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "The offset. The default value is 0."
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "description": "The limit of the number of the search result. default value is 50; maximum value is 1000."
        },
        "filter": {
          "type": "object",
          "description": "The filter for the search. See examples for the usage of supported filters."
        },
        "facets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SearchFacetItem"
          }
        },
        "taxonomySetting": {
          "type": "object",
          "properties": {
            "assetTypes": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "facet": {
              "$ref": "#/definitions/SearchFacetItem"
            }
          }
        }
      },
      "title": "SearchRequest",
      "description": "The search query of advanced search request."
    },
    "BrowseRequest": {
      "type": "object",
      "properties": {
        "entityType": {
          "type": "string",
          "description": "The entity type to browse as the root level entry point."
        },
        "path": {
          "type": "string",
          "description": "The path to browse the next level child entities."
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "description": "The number of browse items we hope to return."
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "The offset. The default value is 0."
        }
      },
      "title": "BrowseRequest",
      "description": "The criteria of browse request."
    },
    "SuggestRequest": {
      "type": "object",
      "properties": {
        "keywords": {
          "type": "string",
          "description": "The keywords applied to all fields that support suggest operation. It must be at least 1 character, and no more than 100 characters. In the index schema we defined a default suggester which lists all the supported fields and specifies a search mode."
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "description": "The number of suggestions we hope to return. The default value is 5. The value must be a number between 1 and 100."
        },
        "filter": {
          "type": "object",
          "description": "The filter for the search."
        }
      },
      "title": "SuggestRequest",
      "description": "The query of suggest request."
    },
    "ImportCSVOperation": {
      "type": "object",
      "title": "Status of import csv operation",
      "description": "The status of import csv operation",
      "properties": {
        "id": {
          "type": "string",
          "description": "guid string"
        },
        "status": {
          "$ref": "#/definitions/ImportCSVOperationStatus"
        },
        "createTime": {
          "type": "string",
          "description": "The created time of the record."
        },
        "lastUpdateTime": {
          "type": "string",
          "description": "The last updated time of the record."
        },
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/ImportCSVOperationProperties"
        },
        "error": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/ImportCSVOperationError"
        }
      }
    },
    "ImportCSVOperationProperties": {
      "type": "object",
      "properties": {
        "importedTerms": {
          "type": "string",
          "description": "Term numbers that already imported successfully"
        },
        "totalTermsDetected": {
          "type": "string",
          "description": "Total term numbers that detected in csv"
        }
      }
    },
    "ImportCSVOperationError": {
      "type": "object",
      "properties": {
        "errorCode": {
          "type": "integer",
          "description": "Error code from async import job if fail"
        },
        "errorMessage": {
          "type": "string",
          "description": "Error message from async import job if fail"
        }
      }
    },
    "ImportCSVOperationStatus": {
      "type": "string",
      "enum": [
        "NotStarted",
        "Succeeded",
        "Failed",
        "Running"
      ],
      "x-ms-enum": {
        "name": "ImportCSVOperationStatus",
        "modelAsString": true
      },
      "title": "ImportCSVOperationStatus",
      "description": "Enum of the status of import csv operation."
    },
    "LastModifiedTS": {
      "type": "string",
      "title": "lastModifiedTS",
      "description": "ETag for concurrency control."
    }
  },
  "parameters": {
    "Endpoint": {
      "name": "Endpoint",
      "description": "The catalog endpoint of your Purview account. Example: https://{accountName}.catalog.purview.azure.com",
      "x-ms-parameter-location": "client",
      "required": true,
      "type": "string",
      "in": "path",
      "x-ms-skip-url-encoding": true
    },
    "guid": {
      "name": "guid",
      "description": "The globally unique identifier of the entity.",
      "in": "path",
      "required": true,
      "type": "string",
      "minLength": 1,
      "maxLength": 4096,
      "x-ms-parameter-location": "method"
    },
    "classificationName": {
      "name": "classificationName",
      "description": "The name of the classification.",
      "in": "path",
      "required": true,
      "type": "string",
      "minLength": 1,
      "maxLength": 4096,
      "x-ms-parameter-location": "method"
    },
    "typeName": {
      "name": "typeName",
      "description": "The name of the type.",
      "in": "path",
      "required": true,
      "type": "string",
      "minLength": 1,
      "maxLength": 4096,
      "x-ms-parameter-location": "method"
    },
    "categoryGuid": {
      "name": "categoryGuid",
      "description": "The globally unique identifier of the category.",
      "in": "path",
      "required": true,
      "type": "string",
      "minLength": 1,
      "maxLength": 4096,
      "x-ms-parameter-location": "method"
    },
    "limit": {
      "name": "limit",
      "description": "The page size - by default there is no paging.",
      "in": "query",
      "required": false,
      "type": "integer",
      "format": "int32",
      "x-ms-parameter-location": "method"
    },
    "offset": {
      "name": "offset",
      "description": "The offset for pagination purpose.",
      "in": "query",
      "required": false,
      "type": "integer",
      "format": "int32",
      "x-ms-parameter-location": "method"
    },
    "sort": {
      "name": "sort",
      "description": "The sort order, ASC (default) or DESC.",
      "in": "query",
      "required": false,
      "type": "string",
      "default": "ASC",
      "x-ms-parameter-location": "method"
    },
    "termGuid": {
      "name": "termGuid",
      "in": "path",
      "description": "The globally unique identifier for glossary term.",
      "required": true,
      "type": "string",
      "minLength": 1,
      "maxLength": 4096,
      "x-ms-parameter-location": "method"
    },
    "glossaryGuid": {
      "name": "glossaryGuid",
      "in": "path",
      "description": "The globally unique identifier for glossary.",
      "required": true,
      "type": "string",
      "minLength": 1,
      "maxLength": 4096,
      "x-ms-parameter-location": "method"
    },
    "operationGuid": {
      "name": "operationGuid",
      "in": "path",
      "description": "The globally unique identifier for async operation/job.",
      "required": true,
      "type": "string",
      "minLength": 1,
      "maxLength": 4096,
      "x-ms-parameter-location": "method"
    },
    "glossaryName": {
      "name": "glossaryName",
      "in": "path",
      "description": "The name of the glossary.",
      "required": true,
      "type": "string",
      "minLength": 1,
      "maxLength": 4096,
      "x-ms-parameter-location": "method"
    },
    "searchLimit": {
      "name": "limit",
      "description": "Limits the result set to only include the specified number of entries.",
      "in": "query",
      "required": false,
      "type": "integer",
      "format": "int32",
      "x-ms-parameter-location": "method"
    },
    "searchKeyword": {
      "name": "keyword",
      "description": "The keyword to get auto complete.",
      "in": "query",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "depth": {
      "name": "depth",
      "description": "The number of hops for lineage.",
      "in": "query",
      "required": false,
      "type": "integer",
      "default": 3,
      "format": "int32",
      "x-ms-parameter-location": "method"
    },
    "width": {
      "name": "width",
      "description": "The number of max expanding width in lineage.",
      "in": "query",
      "required": false,
      "type": "integer",
      "default": 10,
      "format": "int32",
      "x-ms-parameter-location": "method"
    },
    "direction": {
      "name": "direction",
      "description": "The direction of the lineage, which could be INPUT, OUTPUT or BOTH.",
      "in": "query",
      "required": true,
      "type": "string",
      "enum": [
        "BOTH",
        "INPUT",
        "OUTPUT"
      ],
      "x-ms-enum": {
        "name": "direction",
        "modelAsString": true
      },
      "x-ms-parameter-location": "method"
    },
    "includeParent": {
      "name": "includeParent",
      "description": "True to include the parent chain in the response.",
      "in": "query",
      "required": false,
      "type": "boolean",
      "x-ms-parameter-location": "method"
    },
    "getDerivedLineage": {
      "name": "getDerivedLineage",
      "description": "True to include derived lineage in the response",
      "in": "query",
      "required": false,
      "type": "boolean",
      "x-ms-parameter-location": "method"
    },
    "extendedInfo": {
      "name": "extendedInfo",
      "description": "Limits whether includes extended information.",
      "in": "query",
      "required": false,
      "type": "boolean",
      "x-ms-parameter-location": "method"
    },
    "relationshipGuid": {
      "name": "guid",
      "description": "The globally unique identifier of the relationship.",
      "in": "path",
      "required": true,
      "type": "string",
      "minLength": 1,
      "maxLength": 4096,
      "x-ms-parameter-location": "method"
    },
    "classificationDefGuid": {
      "name": "guid",
      "description": "The globally unique identifier of the classification.",
      "in": "path",
      "required": true,
      "type": "string",
      "minLength": 1,
      "maxLength": 4096,
      "x-ms-parameter-location": "method"
    },
    "classificationDefName": {
      "name": "name",
      "description": "The name of the classification.",
      "in": "path",
      "required": true,
      "type": "string",
      "minLength": 1,
      "maxLength": 4096,
      "x-ms-parameter-location": "method"
    },
    "entityDefGuid": {
      "name": "guid",
      "description": "The globally unique identifier of the entity.",
      "in": "path",
      "required": true,
      "type": "string",
      "minLength": 1,
      "maxLength": 4096,
      "x-ms-parameter-location": "method"
    },
    "entityDefName": {
      "name": "name",
      "description": "The name of the entity.",
      "in": "path",
      "required": true,
      "type": "string",
      "minLength": 1,
      "maxLength": 4096,
      "x-ms-parameter-location": "method"
    },
    "termTemplateDefGuid": {
      "name": "guid",
      "description": "The globally unique identifier of the term template.",
      "in": "path",
      "required": true,
      "type": "string",
      "minLength": 1,
      "maxLength": 4096,
      "x-ms-parameter-location": "method"
    },
    "termTemplateDefName": {
      "name": "name",
      "description": "The name of the term template.",
      "in": "path",
      "required": true,
      "type": "string",
      "minLength": 1,
      "maxLength": 4096,
      "x-ms-parameter-location": "method"
    },
    "enumDefGuid": {
      "name": "guid",
      "description": "The globally unique identifier of the enum.",
      "in": "path",
      "required": true,
      "type": "string",
      "minLength": 1,
      "maxLength": 4096,
      "x-ms-parameter-location": "method"
    },
    "enumDefName": {
      "name": "name",
      "description": "The name of the enum.",
      "in": "path",
      "required": true,
      "type": "string",
      "minLength": 1,
      "maxLength": 4096,
      "x-ms-parameter-location": "method"
    },
    "relationshipDefGuid": {
      "name": "guid",
      "description": "The globally unique identifier of the relationship.",
      "in": "path",
      "required": true,
      "type": "string",
      "minLength": 1,
      "maxLength": 4096,
      "x-ms-parameter-location": "method"
    },
    "relationshipDefName": {
      "name": "name",
      "description": "The name of the relationship.",
      "in": "path",
      "required": true,
      "type": "string",
      "minLength": 1,
      "maxLength": 4096,
      "x-ms-parameter-location": "method"
    },
    "structDefGuid": {
      "name": "guid",
      "description": "The globally unique identifier of the struct.",
      "in": "path",
      "required": true,
      "type": "string",
      "minLength": 1,
      "maxLength": 4096,
      "x-ms-parameter-location": "method"
    },
    "structDefName": {
      "name": "name",
      "description": "The name of the struct.",
      "in": "path",
      "required": true,
      "type": "string",
      "minLength": 1,
      "maxLength": 4096,
      "x-ms-parameter-location": "method"
    },
    "typeDefGuid": {
      "name": "guid",
      "description": "The globally unique identifier of the type.",
      "in": "path",
      "required": true,
      "type": "string",
      "minLength": 1,
      "maxLength": 4096,
      "x-ms-parameter-location": "method"
    },
    "typeDefName": {
      "name": "name",
      "description": "The name of the type.",
      "in": "path",
      "required": true,
      "type": "string",
      "minLength": 1,
      "maxLength": 4096,
      "x-ms-parameter-location": "method"
    },
    "userId": {
      "name": "userId",
      "description": "The user ID.",
      "in": "path",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "principalId": {
      "name": "principalId",
      "description": "The principal ID.",
      "in": "path",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "minExtInfo": {
      "name": "minExtInfo",
      "description": "Whether to return minimal information for referred entities.",
      "in": "query",
      "required": false,
      "type": "boolean",
      "default": false,
      "x-ms-parameter-location": "method"
    },
    "ignoreRelationships": {
      "name": "ignoreRelationships",
      "description": "Whether to ignore relationship attributes.",
      "in": "query",
      "required": false,
      "type": "boolean",
      "default": false,
      "x-ms-parameter-location": "method"
    },
    "excludeRelationshipTypes": {
      "name": "excludeRelationshipTypes",
      "description": "An array of the relationship types need to be excluded from the response.",
      "in": "query",
      "required": false,
      "type": "array",
      "items": {
        "type": "string"
      },
      "collectionFormat": "multi",
      "x-ms-parameter-location": "method"
    },
    "includeTermTemplate": {
      "name": "includeTermTemplate",
      "description": "Whether include termtemplatedef when return all typedefs.\nThis is always true when search filter type=term_template",
      "in": "query",
      "required": false,
      "type": "boolean",
      "default": false,
      "x-ms-parameter-location": "method"
    },
    "includeTermHierarchy": {
      "name": "includeTermHierarchy",
      "description": "Whether include term hierarchy",
      "in": "query",
      "required": false,
      "type": "boolean",
      "default": false,
      "x-ms-parameter-location": "method"
    },
    "purviewAPIVersion": {
      "name": "api-version",
      "description": "Version of Purview APIs",
      "in": "query",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "atlasAPIVersion": {
      "name": "api-version",
      "description": "Version of Atlas APIs",
      "in": "query",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "type": {
      "name": "type",
      "description": "Typedef name as search filter when get typedefs.",
      "in": "query",
      "required": false,
      "type": "string",
      "enum": [
        "enum",
        "entity",
        "classification",
        "relationship",
        "struct",
        "term_template"
      ],
      "x-ms-enum": {
        "name": "type",
        "modelAsString": true
      },
      "x-ms-parameter-location": "method"
    }
  }
}
