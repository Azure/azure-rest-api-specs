{
  "swagger": "2.0",
  "info": {
    "title": "Purview Workflow Service REST API Document",
    "version": "2022-05-01-preview",
    "description": "Workflows are automated, repeatable business processes which allow organizations to track changes, enforce policy compliance, and ensure quality data across their data landscape.Workflow service is a micro service within Microsoft Purview to validate and orchestrate CUD (create, update, delete) operations on their data entities. This spec defines REST API of Purview Workflow Service, which could used for creating Purview workflow client."
  },
  "host": "purview.azure.com",
  "x-ms-parameterized-host": {
    "hostTemplate": "{endpoint}",
    "useSchemePrefix": false,
    "parameters": [
      {
        "$ref": "#/parameters/endpoint"
      }
    ]
  },
  "basePath": "/workflow",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "flow": "implicit",
      "description": "Azure Active Directory OAuth2 Flow",
      "scopes": {
        "https://purview.azure.net/.default": "Default authorization scope."
      }
    }
  },
  "security": [
    {
      "azure_auth": [
        "https://purview.azure.net/.default"
      ]
    }
  ],
  "paths": {
    "/workflows": {
      "get": {
        "tags": [
          "Workflows"
        ],
        "description": "List all workflows.",
        "operationId": "ListWorkflows",
        "x-ms-examples": {
          "Workflows_List": {
            "$ref": "./examples/ListWorkflows.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "parameters": [
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/WorkflowMetadataList"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/workflows/{workflowId}": {
      "get": {
        "tags": [
          "Workflows"
        ],
        "description": "Get a specific workflow.",
        "operationId": "GetWorkflow",
        "x-ms-examples": {
          "WorkflowDefinition_Get": {
            "$ref": "./examples/GetWorkflow.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/workflowId"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Workflow"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Workflows"
        ],
        "description": "Create or update a workflow.",
        "operationId": "CreateOrUpdateWorkflow",
        "x-ms-examples": {
          "Workflow_CreateOrUpdate": {
            "$ref": "./examples/CreateOrUpdateWorkflow.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/workflowId"
          },
          {
            "name": "workflowCreateOrUpdateCommand",
            "in": "body",
            "required": true,
            "description": "Create or update workflow payload.",
            "schema": {
              "$ref": "#/definitions/WorkflowCreateOrUpdateCommand"
            }
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Workflow"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Workflows"
        ],
        "description": "Delete a workflow.",
        "operationId": "DeleteWorkflow",
        "x-ms-examples": {
          "Workflow_Delete": {
            "$ref": "./examples/DeleteWorkflow.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/workflowId"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/userrequests": {
      "post": {
        "tags": [
          "UserRequests"
        ],
        "description": "Submit a user request for requestor, a user  request describes user ask to do operation(s) on Purview. If any workflowâ€™s trigger matches with an operation in request, a run of the workflow is created.",
        "operationId": "SubmitUserRequests",
        "x-ms-examples": {
          "UserRequests_Submit": {
            "$ref": "./examples/SubmitUserRequests.json"
          }
        },
        "parameters": [
          {
            "name": "userRequestsPayload",
            "in": "body",
            "required": true,
            "description": "The payload of submitting a user request.",
            "schema": {
              "$ref": "#/definitions/UserRequestsPayload"
            }
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserRequestsResponse"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "get": {
        "tags": [
          "UserRequests"
        ],
        "description": "List all user requests.",
        "operationId": "ListUserRequests",
        "x-ms-examples": {
          "Workflows_List": {
            "$ref": "./examples/ListUserRequests.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "parameters": [
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserRequestsResponseList"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/userrequests/{requestId}": {
      "get": {
        "tags": [
          "UserRequests"
        ],
        "description": "Get a specific user requests.",
        "operationId": "GetUserRequests",
        "x-ms-examples": {
          "UserRequests_Get": {
            "$ref": "./examples/GetUserRequests.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "$ref": "#/parameters/requestId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserRequestsResponse"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/userrequests/{requestId}/cancel": {
      "post": {
        "tags": [
          "UserRequests"
        ],
        "description": "Cancel a user request.",
        "operationId": "CancelUserRequests",
        "x-ms-examples": {
          "UserRequests_Cancel": {
            "$ref": "./examples/CancelUserRequests.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "name": "cancelReply",
            "in": "body",
            "required": true,
            "description": "Reply of canceling a user request.",
            "schema": {
              "$ref": "#/definitions/UserRequestsCancelReply"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/runs": {
      "get": {
        "tags": [
          "WorkflowRun"
        ],
        "description": "List workflow runs.",
        "operationId": "ListWorkflowRuns",
        "x-ms-examples": {
          "WorkflowRuns_List": {
            "$ref": "./examples/ListWorkflowRuns.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "parameters": [
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "$ref": "#/parameters/timeWindow"
          },
          {
            "$ref": "#/parameters/orderBy"
          },
          {
            "$ref": "#/parameters/runStatuses"
          },
          {
            "$ref": "#/parameters/userRequestIds"
          },
          {
            "$ref": "#/parameters/workflowIds"
          },
          {
            "$ref": "#/parameters/maxpagesize"
          },
          {
            "$ref": "#/parameters/continuationToken"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/WorkflowRunList"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/runs/{workflowRunId}": {
      "get": {
        "tags": [
          "WorkflowRun"
        ],
        "description": "Get a workflow run.",
        "operationId": "GetWorkflowRun",
        "x-ms-examples": {
          "WorkflowRun_Get": {
            "$ref": "./examples/GetWorkflowRun.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "$ref": "#/parameters/workflowRunId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/WorkflowRun"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/runs/{workflowRunId}/cancel": {
      "post": {
        "tags": [
          "WorkflowRun"
        ],
        "description": "Cancel a workflow run.",
        "operationId": "CancelWorkflowRun",
        "x-ms-examples": {
          "WorkflowRun_Cancel": {
            "$ref": "./examples/CancelWorkflowRun.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "$ref": "#/parameters/workflowRunId"
          },
          {
            "name": "runCancelReply",
            "in": "body",
            "required": true,
            "description": "Reply of canceling a workflow run.",
            "schema": {
              "$ref": "#/definitions/WorkflowRunCancelReply"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/tasks": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "description": "Get all workflow tasks.",
        "operationId": "ListTasks",
        "x-ms-examples": {
          "Tasks_List": {
            "$ref": "./examples/ListWorkflowTasks.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "parameters": [
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "$ref": "#/parameters/requestRole"
          },
          {
            "$ref": "#/parameters/workflowIds"
          },
          {
            "$ref": "#/parameters/timeWindow"
          },
          {
            "$ref": "#/parameters/maxpagesize"
          },
          {
            "$ref": "#/parameters/orderBy"
          },
          {
            "$ref": "#/parameters/taskTypes"
          },
          {
            "$ref": "#/parameters/taskStatuses"
          },
          {
            "$ref": "#/parameters/workflowNameKeyword"
          },
          {
            "$ref": "#/parameters/continuationToken"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TasksList"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/tasks/{taskId}": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "description": "Get a work task.",
        "operationId": "GetWorkflowTask",
        "x-ms-examples": {
          "WorkTask_Get": {
            "$ref": "./examples/GetWorkflowTask.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/taskId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/WorkflowTask"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/tasks/{taskId}/approve-approval": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "description": "Approve an approval request.",
        "operationId": "ApproveApprovalRequest",
        "x-ms-examples": {
          "ApprovalRequest_Approve": {
            "$ref": "./examples/ApproveApprovalRequest.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/taskId"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "name": "approvalResponseComment",
            "in": "body",
            "required": true,
            "description": "The request body of approving an approval request.",
            "schema": {
              "$ref": "#/definitions/ApprovalResponseComment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/tasks/{taskId}/reject-approval": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "description": "Reject an approval request.",
        "operationId": "RejectApprovalRequest",
        "x-ms-examples": {
          "ApprovalRequest_Reject": {
            "$ref": "./examples/RejectApprovalRequest.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/taskId"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "name": "approvalResponseComment",
            "in": "body",
            "required": true,
            "description": "The request body of rejecting an approval request.",
            "schema": {
              "$ref": "#/definitions/ApprovalResponseComment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/tasks/{taskId}/reassign": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "description": "Reassign a workflow task.",
        "operationId": "ReassignWorkflowTask",
        "x-ms-examples": {
          "ApprovalRequest_Reassign": {
            "$ref": "./examples/ReassignWorkflowTask.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/taskId"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "name": "reassignCommand",
            "in": "body",
            "required": true,
            "description": "The request body of reassigning a workflow task.",
            "schema": {
              "$ref": "#/definitions/ReassignCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/tasks/{taskId}/change-task-status": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "description": "Update the status of a workflow task request.",
        "operationId": "UpdateTaskRequest",
        "x-ms-examples": {
          "TaskRequest_Update": {
            "$ref": "./examples/UpdateTaskRequest.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/taskId"
          },
          {
            "name": "taskUpdateCommand",
            "in": "body",
            "required": true,
            "description": "Request body of updating workflow task request.",
            "schema": {
              "$ref": "#/definitions/TaskUpdateCommand"
            }
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/tasks/{taskId}/claim-task": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "description": "Claim a DSAR task request.",
        "operationId": "ClaimDASRTaskRequest",
        "x-ms-examples": {
          "DASRTaskRequest_Claim": {
            "$ref": "./examples/ClaimDASRTaskRequest.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/taskId"
          },
          {
            "name": "dsarTaskClaimCommand",
            "in": "body",
            "required": true,
            "description": "Request body of claiming DSAR task request.",
            "schema": {
              "$ref": "#/definitions/DSARTaskClaimCommand"
            }
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/tasks/{taskId}/release-task": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "description": "Release a DSAR task request.",
        "operationId": "ReleaseDASRTaskRequest",
        "x-ms-examples": {
          "DASRTaskRequest_Release": {
            "$ref": "./examples/ReleaseDASRTaskRequest.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/taskId"
          },
          {
            "name": "dsarTaskReleaseCommand",
            "in": "body",
            "required": true,
            "description": "Request body of releasing DSAR task request.",
            "schema": {
              "$ref": "#/definitions/DSARTaskReleaseCommand"
            }
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "WorkflowMetadataList": {
      "type": "object",
      "description": "The workflow list.",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkflowMetadata"
          },
          "description": "The value of workflow list."
        },
        "nextLink": {
          "type": "string",
          "description": "The URL to get the next set of results."
        }
      },
      "required": [
        "value"
      ]
    },
    "WorkflowMetadata": {
      "description": "The workflow metadata, action DAGs are not included.",
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "The id of workflow."
        },
        "triggers": {
          "$ref": "#/definitions/Triggers"
        },
        "createdTime": {
          "type": "string",
          "format": "date-time",
          "description": "The created time of workflow."
        },
        "createdBy": {
          "type": "string",
          "description": "The person who created the workflow."
        },
        "lastUpdateTime": {
          "$ref": "#/definitions/LastUpdateTime"
        },
        "updatedBy": {
          "type": "string",
          "description": "The person who updated the workflow."
        },
        "name": {
          "type": "string",
          "description": "The name of a workflow."
        },
        "isEnabled": {
          "type": "boolean",
          "description": "Whether the workflow enabled or not."
        },
        "description": {
          "type": "string",
          "description": "Description of a workflow."
        }
      },
      "required": [
        "id",
        "triggers",
        "createdTime",
        "createdBy",
        "lastUpdateTime",
        "updatedBy",
        "name",
        "isEnabled",
        "description"
      ]
    },
    "Triggers": {
      "type": "array",
      "description": "It describes under what condition a workflow will run.  ",
      "items": {
        "$ref": "#/definitions/Trigger"
      }
    },
    "Trigger": {
      "type": "object",
      "description": "Describes under what condition a workflow will run.",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "when_term_creation_is_requested",
            "when_term_deletion_is_requested",
            "when_term_update_is_requested",
            "when_terms_import_is_requested",
            "when_data_access_grant_is_requested",
            "when_asset_update_is_requested",
            "when_dsar_deletion_is_requested",
            "when_dsar_export_is_requested"
          ],
          "x-ms-enum": {
            "name": "TriggerType",
            "modelAsString": true
          }
        },
        "underTermHierarchy": {
          "type": "string",
          "description": "Glossary term hierarchy path."
        },
        "underCollection": {
          "type": "string",
          "description": "The collection name."
        },
        "underGlossary": {
          "type": "string",
          "description": "The glossary guid."
        }
      },
      "required": [
        "type"
      ]
    },
    "WorkflowCreateOrUpdateCommand": {
      "type": "object",
      "description": "Create or update workflow payload.",
      "properties": {
        "triggers": {
          "$ref": "#/definitions/Triggers"
        },
        "name": {
          "type": "string",
          "description": "The workflow name."
        },
        "isEnabled": {
          "type": "boolean",
          "description": "Whether the workflow enabled or not."
        },
        "description": {
          "type": "string",
          "description": "Description of a workflow."
        },
        "actionDAG": {
          "type": "object",
          "description": "The action DAG(Directed Acyclic Graph), it defines actual flow."
        }
      },
      "required": [
        "triggers",
        "name",
        "isEnabled",
        "description"
      ]
    },
    "Workflow": {
      "description": "The workflow properties. It includes the associated objects, type, actual flow and other properties of a workflow.",
      "allOf": [
        {
          "$ref": "#/definitions/WorkflowMetadata"
        },
        {
          "type": "object",
          "properties": {
            "actionDAG": {
              "type": "object",
              "description": "The action DAG(Directed Acyclic Graph), it defines steps to be executed in a workflow run and their order."
            }
          },
          "required": [
            "actionDAG"
          ]
        }
      ]
    },
    "UserRequestsPayload": {
      "type": "object",
      "properties": {
        "requestId": {
          "type": "string",
          "format": "uuid",
          "description": "The user request id."
        },
        "operations": {
          "type": "array",
          "description": "The list of operations user want to submit, each operation matches one Purview API call and will do the operation directly.",
          "items": {
            "$ref": "#/definitions/Operation"
          }
        }
      },
      "required": [
        "requestId",
        "operations"
      ]
    },
    "Operation": {
      "type": "object",
      "description": "The operation user want to submit, it matches one Purview API call and will do the operation directly",
      "properties": {
        "type": {
          "$ref": "#/definitions/WorkflowRunType"
        },
        "payload": {
          "type": "object",
          "description": "The payload of each operation which user want to submit."
        },
        "workflowRunIds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkflowRunId"
          }
        }
      },
      "required": [
        "type",
        "payload"
      ]
    },
    "UserRequestsResponse": {
      "description": "Describes user ask to do operation(s) on Purview. If any workflow's trigger matches with an operation in request, a run of the workflow is created. Each operation in user request matches one Purview API call doing the operation directly.",
      "allOf": [
        {
          "$ref": "#/definitions/UserRequestsPayload"
        }
      ],
      "type": "object",
      "properties": {
        "requestor": {
          "$ref": "#/definitions/RequestorId"
        },
        "status": {
          "$ref": "#/definitions/Status"
        }
      }
    },
    "Status": {
      "type": "string",
      "description": "The status of an action.",
      "enum": [
        "InProgress",
        "Failed",
        "Completed",
        "Canceling",
        "CancelationFailed",
        "Canceled"
      ],
      "x-ms-enum": {
        "name": "UserRequestStatus",
        "modelAsString": true
      }
    },
    "UserRequestsResponseList": {
      "type": "object",
      "description": "The list of user requests.",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserRequestsResponse"
          },
          "description": "The value of user requests list."
        },
        "nextLink": {
          "type": "string",
          "description": "The URL to get the next set of results."
        }
      },
      "required": [
        "value"
      ]
    },
    "UserRequestsCancelReply": {
      "type": "object",
      "properties": {
        "comment": {
          "type": "string",
          "description": "The comment of canceling a user request."
        }
      }
    },
    "WorkflowRunId": {
      "type": "string",
      "format": "uuid",
      "description": "The workflow run id."
    },
    "WorkflowId": {
      "type": "string",
      "format": "uuid",
      "description": "The workflow id."
    },
    "RequestorId": {
      "type": "string",
      "format": "uuid",
      "description": "The person who triggered the workflow run."
    },
    "WorkflowRunList": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkflowRunMetadata"
          },
          "description": "The value of workflow run list."
        },
        "nextLink": {
          "type": "string",
          "description": "The URL to get the next set of results."
        }
      },
      "required": [
        "value"
      ]
    },
    "WorkflowRunMetadata": {
      "description": "The execution of a workflow. It includes status of the entire run and other properties of a run. ",
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/WorkflowRunId"
        },
        "workflowId": {
          "$ref": "#/definitions/WorkflowId"
        },
        "startTime": {
          "type": "string",
          "description": "Workflow run start time.",
          "format": "date-time"
        },
        "requestor": {
          "$ref": "#/definitions/RequestorId"
        },
        "userRequestId": {
          "type": "string",
          "format": "uuid",
          "description": "The user request id."
        },
        "runPayload": {
          "$ref": "#/definitions/WorkflowRunPayload"
        },
        "status": {
          "$ref": "#/definitions/Status"
        },
        "endTime": {
          "type": "string",
          "description": "The time of workflow run completed."
        },
        "cancelTime": {
          "type": "string",
          "description": "The time of workflow run be canceled."
        },
        "cancelComment": {
          "type": "string",
          "description": "The comment when cancel a workflow run."
        }
      },
      "required": [
        "id",
        "workflowId",
        "startTime",
        "requestor",
        "runPayload",
        "status"
      ]
    },
    "WorkflowRunPayload": {
      "type": "object",
      "description": "The input of a workflow run. Align with operation in user request. ",
      "properties": {
        "type": {
          "$ref": "#/definitions/WorkflowRunType"
        },
        "targetValue": {
          "type": "string",
          "description": "The target value which need involve workflow to update."
        }
      },
      "required": [
        "type",
        "targetValue"
      ]
    },
    "WorkflowRun": {
      "description": "The execution of a workflow. It includes workflow action DAG at run time (action DAG snapshot), run payload, status of the entire run and other properties of a run. ",
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/WorkflowRunId"
        },
        "workflowId": {
          "$ref": "#/definitions/WorkflowId"
        },
        "startTime": {
          "type": "string",
          "description": "Workflow run start time.",
          "format": "date-time"
        },
        "requestor": {
          "$ref": "#/definitions/RequestorId"
        },
        "userRequestId": {
          "type": "string",
          "format": "uuid",
          "description": "The user request id."
        },
        "runPayload": {
          "type": "object",
          "description": "The input of a workflow run. Align with operation in user request. ",
          "properties": {
            "type": {
              "$ref": "#/definitions/WorkflowRunType"
            },
            "targetValue": {
              "type": "string",
              "description": "The target value which need involve workflow to update."
            },
            "payload": {
              "type": "object",
              "description": "The payload of each operation which user want to submit."
            }
          },
          "required": [
            "type",
            "targetValue",
            "payload"
          ]
        },
        "status": {
          "$ref": "#/definitions/Status"
        },
        "endTime": {
          "type": "string",
          "description": "The time of workflow run completed."
        },
        "cancelTime": {
          "type": "string",
          "description": "The time of workflow run be canceled."
        },
        "cancelComment": {
          "type": "string",
          "description": "The comment when cancel a workflow run."
        },
        "actionDAG": {
          "type": "object",
          "description": "The action DAG(Directed Acyclic Graph), it defines actual flow."
        },
        "detail": {
          "$ref": "#/definitions/WorkflowRunDetail"
        }
      },
      "required": [
        "actionDAG",
        "detail"
      ]
    },
    "WorkflowRunDetail": {
      "type": "object",
      "description": "It refers to the \"detail\" property of a workflow run object, which contains run context and runtime information of actions.",
      "properties": {
        "runInput": {
          "description": "Built-in variables starts with @runInput. Its properties are determined by trigger type at workflow run time. ",
          "type": "object"
        },
        "actions": {
          "type": "object"
        }
      },
      "required": [
        "runInput",
        "actions"
      ]
    },
    "WorkflowRunCancelReply": {
      "type": "object",
      "properties": {
        "comment": {
          "type": "string",
          "description": "The comment of canceling a workflow run."
        }
      }
    },
    "TasksList": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkflowTask"
          },
          "description": "The value of workflow tasks list."
        },
        "nextLink": {
          "type": "string",
          "description": "The URL to get the next set of results."
        }
      },
      "required": [
        "value"
      ]
    },
    "WorkflowTask": {
      "discriminator": "type",
      "type": "object",
      "description": "An actionable item assigned to assignees. It is created when approval or task action starts to execute. Approval is one kind of task.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The workflow task type.",
          "enum": [
            "approval",
            "task"
          ],
          "x-ms-enum": {
            "name": "TaskType",
            "modelAsString": true
          }
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "The workflow task id."
        },
        "title": {
          "type": "string",
          "description": "The workflow task title."
        },
        "workflowRunId": {
          "$ref": "#/definitions/WorkflowRunId"
        },
        "workflowId": {
          "$ref": "#/definitions/WorkflowId"
        },
        "requestorId": {
          "$ref": "#/definitions/RequestorId"
        },
        "submittedTime": {
          "$ref": "#/definitions/SubmittedTime"
        },
        "lastUpdatedTime": {
          "$ref": "#/definitions/LastUpdateTime"
        },
        "payload": {
          "$ref": "#/definitions/TaskRunPayload"
        }
      },
      "required": [
        "type",
        "id",
        "title",
        "workflowRunId",
        "workflowId",
        "requestorId",
        "submittedTime",
        "lastUpdatedTime",
        "payload"
      ]
    },
    "TaskRunPayload": {
      "type": "object",
      "description": "Info and material that helps assignees to take action.",
      "properties": {
        "type": {
          "$ref": "#/definitions/WorkflowRunType"
        },
        "targetValue": {
          "type": "string",
          "description": "The target value of entity which user want to involve workflow to update."
        },
        "payload": {
          "type": "object",
          "description": "The input payload when submit a user request."
        }
      },
      "required": [
        "type",
        "targetValue",
        "payload"
      ]
    },
    "WorkflowRunType": {
      "type": "string",
      "description": "The workflow run type.",
      "enum": [
        "CreateTerm",
        "UpdateTerm",
        "DeleteTerm",
        "ImportTerms",
        "UpdateAsset",
        "GrantDataAccess",
        "DSARDelete",
        "DSARExport"
      ],
      "x-ms-enum": {
        "name": "OperationType",
        "modelAsString": true
      }
    },
    "SubmittedTime": {
      "type": "string",
      "format": "date-time",
      "description": "The submitted time of an action."
    },
    "LastUpdateTime": {
      "type": "string",
      "format": "date-time",
      "description": "The last update time of an action."
    },
    "ApprovalDetail": {
      "x-ms-discriminator-value": "approval",
      "description": "The workflow approval task properties.",
      "allOf": [
        {
          "$ref": "#/definitions/WorkflowTask"
        },
        {
          "properties": {
            "approvalDetail": {
              "type": "object",
              "properties": {
                "approvalType": {
                  "type": "string",
                  "description": "The approval type of an approval task.",
                  "enum": [
                    "PendingOnAny",
                    "PendingOnAll"
                  ],
                  "x-ms-enum": {
                    "name": "ApprovalType",
                    "modelAsString": true
                  }
                },
                "status": {
                  "type": "string",
                  "description": "The status of an approval task.",
                  "enum": [
                    "Pending",
                    "Approved",
                    "Rejected",
                    "Canceled"
                  ],
                  "x-ms-enum": {
                    "name": "ApprovalTaskStatus",
                    "modelAsString": true
                  }
                },
                "approvers": {
                  "type": "object",
                  "items": {
                    "$ref": "#/definitions/ApproverResponse"
                  },
                  "description": "The list of approvers with reply."
                }
              },
              "required": [
                "approvalType",
                "status",
                "approvers"
              ]
            }
          }
        }
      ]
    },
    "ApproverResponse": {
      "type": "object",
      "description": "The response of approvers for a workflow task.",
      "properties": {
        "reply": {
          "type": "string",
          "description": "The response for an approval task.",
          "enum": [
            "approved",
            "rejected",
            "pending"
          ],
          "x-ms-enum": {
            "name": "ApprovalResponse",
            "modelAsString": true
          }
        },
        "comment": {
          "type": "string",
          "description": "The comment of approving or rejecting an approval request."
        },
        "responseTime": {
          "type": "string",
          "format": "date-time",
          "description": "The reply time of approver to a workflow task."
        }
      },
      "required": [
        "reply"
      ]
    },
    "TaskDetail": {
      "x-ms-discriminator-value": "task",
      "description": "The workflow task request properties.",
      "allOf": [
        {
          "$ref": "#/definitions/WorkflowTask"
        },
        {
          "type": "object",
          "description": "The details of task request."
        }
      ]
    },
    "ApprovalResponseComment": {
      "type": "object",
      "properties": {
        "comment": {
          "type": "string",
          "description": "The comment of approving or rejecting an approval request."
        }
      }
    },
    "ReassignCommand": {
      "type": "object",
      "properties": {
        "reassignments": {
          "type": "array",
          "description": "The request body of reassigning a workflow task.",
          "items": {
            "type": "object",
            "properties": {
              "reassignFrom": {
                "type": "string",
                "format": "uuid",
                "description": "Reassign a workflow task from a user or a group."
              },
              "reassignTo": {
                "type": "string",
                "format": "uuid",
                "description": "Reassign a workflow task to a user or a group."
              }
            },
            "required": [
              "reassignFrom",
              "reassignTo"
            ]
          }
        }
      }
    },
    "TaskUpdateCommand": {
      "type": "object",
      "properties": {
        "newStatus": {
          "type": "string",
          "description": "The new status will be used to update the task."
        },
        "comment": {
          "type": "string",
          "description": "The comment when update a task."
        }
      },
      "required": [
        "newStatus"
      ]
    },
    "DSARTaskClaimCommand": {
      "type": "object",
      "properties": {
        "claimedBy": {
          "type": "string",
          "format": "uuid",
          "description": "The user claimed this DSAR task request."
        },
        "comment": {
          "type": "string",
          "description": "The comment when claiming a DSAR task."
        }
      }
    },
    "DSARTaskReleaseCommand": {
      "type": "object",
      "properties": {
        "claimedBy": {
          "type": "string",
          "format": "uuid",
          "description": "The user unclaimed this DSAR task request."
        },
        "comment": {
          "type": "string",
          "description": "The comment when releasing a DSAR task."
        }
      }
    },
    "ErrorResponse": {
      "description": "Default error response model",
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/ErrorModel"
        }
      }
    },
    "ErrorModel": {
      "description": "Default error model",
      "type": "object",
      "properties": {
        "code": {
          "description": "Gets or sets the code.",
          "type": "string"
        },
        "details": {
          "description": "Gets or sets the details.",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/ErrorModel"
          },
          "x-ms-identifiers": [
            "code"
          ]
        },
        "message": {
          "description": "Gets or sets the messages.",
          "type": "string"
        },
        "target": {
          "description": "Gets or sets the target.",
          "type": "string"
        }
      },
      "required": [
        "code",
        "message"
      ]
    }
  },
  "parameters": {
    "api-version": {
      "name": "api-version",
      "description": "Version of Purview APIs",
      "in": "query",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "client"
    },
    "endpoint": {
      "name": "endpoint",
      "description": "The account endpoint of your Purview account. Example: https://{accountName}.purview.azure.com/",
      "x-ms-parameter-location": "client",
      "required": true,
      "type": "string",
      "in": "path",
      "format": "url",
      "x-ms-skip-url-encoding": true
    },
    "workflowId": {
      "name": "workflowId",
      "in": "path",
      "required": true,
      "type": "string",
      "format": "uuid",
      "description": "The workflow id."
    },
    "requestId": {
      "name": "requestId",
      "in": "path",
      "required": true,
      "type": "string",
      "format": "uuid",
      "description": "The request id."
    },
    "workflowRunId": {
      "name": "workflowRunId",
      "in": "path",
      "required": true,
      "type": "string",
      "format": "uuid",
      "description": "The workflow run id."
    },
    "taskId": {
      "name": "taskId",
      "in": "path",
      "required": true,
      "type": "string",
      "format": "uuid",
      "description": "The task id."
    },
    "timeWindow": {
      "name": "timeWindow",
      "in": "query",
      "required": false,
      "type": "array",
      "items": {
        "type": "string",
        "enum": [
          "1d",
          "7d",
          "30d",
          "90d"
        ],
        "x-ms-enum": {
          "name": "TimeWindow",
          "modelAsString": true
        }
      },
      "description": "Time window of filtering items."
    },
    "orderBy": {
      "name": "orderBy",
      "in": "query",
      "required": false,
      "type": "string",
      "enum": [
        "submittedTime",
        "requestor"
      ],
      "x-ms-enum": {
        "name": "sortKey",
        "modelAsString": true
      },
      "description": "The key word which used to sort the results."
    },
    "maxpagesize": {
      "name": "maxpagesize",
      "in": "query",
      "required": false,
      "type": "integer",
      "format": "int32",
      "description": "The maximum page size to get the items at one time."
    },
    "continuationToken": {
      "name": "continuationToken",
      "in": "query",
      "required": false,
      "type": "string",
      "description": "The continuation token used for getting the next page of items."
    },
    "taskTypes": {
      "name": "taskTypes",
      "in": "query",
      "required": false,
      "type": "array",
      "items": {
        "type": "string",
        "enum": [
          "approval",
          "task"
        ],
        "x-ms-enum": {
          "name": "TaskType",
          "modelAsString": true
        }
      },
      "description": "Filter items by workflow task type."
    },
    "workflowIds": {
      "name": "workflowIds",
      "in": "query",
      "required": false,
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "Filter items by workflow id list."
    },
    "userRequestIds": {
      "name": "userRequestIds",
      "in": "query",
      "required": false,
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "Filter items by user request id list."
    },
    "runStatuses": {
      "name": "runStatuses",
      "in": "query",
      "required": false,
      "type": "array",
      "items": {
        "type": "string",
        "enum": [
          "InProgress",
          "Failed",
          "Completed",
          "NotStarted",
          "Canceling",
          "CancellationFailed",
          "Canceled"
        ],
        "x-ms-enum": {
          "name": "status",
          "modelAsString": true
        }
      },
      "description": "Filter workflow runs by workflow run status."
    },
    "taskStatuses": {
      "name": "taskStatuses",
      "in": "query",
      "required": false,
      "type": "array",
      "items": {
        "type": "string",
        "enum": [
          "Pending",
          "Approved",
          "Rejected",
          "Canceled",
          "NotStarted",
          "InProgress",
          "Completed"
        ],
        "x-ms-enum": {
          "name": "status",
          "modelAsString": true
        }
      },
      "description": "Filter workflow tasks by status."
    },
    "workflowNameKeyword": {
      "name": "workflowNameKeyword",
      "in": "query",
      "required": false,
      "type": "string",
      "description": "The key word which could used to filter workflow item with related workflow."
    },
    "requestRole": {
      "name": "requestRole",
      "in": "query",
      "required": false,
      "type": "string",
      "items": {
        "type": "string",
        "enum": [
          "sent",
          "received",
          "history"
        ],
        "x-ms-enum": {
          "name": "status",
          "modelAsString": true
        }
      },
      "description": "To filter user's sent, received or history workflow tasks."
    }
  }
}
