{
  "openapi": "3.0.0",
  "info": {
    "title": "Confidential Ledger Service",
    "version": "2022-05-13"
  },
  "tags": [],
  "paths": {
    "/app/governance/constitution": {
      "get": {
        "operationId": "GetConstitution",
        "summary": "Gets the constitution used for governance.",
        "description": "The constitution is a script that assesses and applies proposals from consortium members.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Constitution"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/app/governance/members": {
      "get": {
        "operationId": "ListConsortiumMembers",
        "summary": "Gets the consortium members.",
        "description": "Consortium members can manage the Confidential Ledger.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Consortium"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/app/enclaveQuotes": {
      "get": {
        "operationId": "GetEnclaveQuotes",
        "summary": "Gets quotes for all nodes of the Confidential Ledger.",
        "description": "A quote is an SGX enclave measurement that can be used to verify the validity of a node and its enclave.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfidentialLedgerEnclaves"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/app/collections": {
      "get": {
        "operationId": "ListCollections",
        "summary": "Retrieves a list of collection ids present in the Confidential Ledger",
        "description": "Collection ids are user-created collections of ledger entries",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedCollections"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/app/transactions": {
      "get": {
        "operationId": "ListLedgerEntries",
        "summary": "Gets ledger entries from a collection corresponding to a range.",
        "description": "A collection id may optionally be specified. Only entries in the specified (or default) collection will be returned.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/CollectionIdParameter"
          },
          {
            "$ref": "#/components/parameters/TransactionIdFromParameter"
          },
          {
            "$ref": "#/components/parameters/TransactionIdToParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedLedgerEntries"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "CreateLedgerEntry",
        "summary": "Writes a ledger entry.",
        "description": "A collection id may optionally be specified.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/CollectionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "headers": {
              "x-ms-ccf-transaction-id": {
                "description": "The transaction id at which this write will become durable.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LedgerWriteResult"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LedgerEntry"
              }
            }
          }
        }
      }
    },
    "/app/transactions/{transactionId}": {
      "get": {
        "operationId": "GetLedgerEntry",
        "summary": "Gets the ledger entry at the specified transaction id. A collection id may optionally be specified to indicate the collection from which to fetch the value.",
        "description": "To return older ledger entries, the relevant sections of the ledger must be read from disk and validated. To prevent blocking within the enclave, the response will indicate whether the entry is ready and part of the response, or if the loading is still ongoing.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/CollectionIdParameter"
          },
          {
            "$ref": "#/components/parameters/TransactionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LedgerQueryResult"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/app/transactions/{transactionId}/receipt": {
      "get": {
        "operationId": "GetReceipt",
        "summary": "Gets a receipt certifying ledger contents at a particular transaction id.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/TransactionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionReceipt"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/app/transactions/{transactionId}/status": {
      "get": {
        "operationId": "GetTransactionStatus",
        "summary": "Gets the status of an entry identified by a transaction id.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/TransactionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionStatus"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/app/transactions/current": {
      "get": {
        "operationId": "GetCurrentLedgerEntry",
        "summary": "Gets the current value available in the ledger.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/CollectionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LedgerEntry"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/app/users/{userId}": {
      "delete": {
        "operationId": "DeleteUser",
        "summary": "Deletes a user from the Confidential Ledger.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/UserIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "operationId": "GetUser",
        "summary": "Gets a user.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/UserIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LedgerUser"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "CreateOrUpdateUser",
        "summary": "Adds a user or updates a user's fields.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/UserIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LedgerUser"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "Details about a Confidential Ledger user.",
          "content": {
            "application/merge-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/LedgerUser"
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "Azure.Core.Foundations.ApiVersionParameter": {
        "name": "api-version",
        "in": "query",
        "required": true,
        "description": "The API version to use for this operation.",
        "schema": {
          "type": "string",
          "minLength": 1
        }
      },
      "CollectionIdParameter": {
        "name": "collectionId",
        "in": "query",
        "required": false,
        "description": "The collection id.",
        "x-ms-parameter-location": "method",
        "schema": {
          "type": "string"
        }
      },
      "TransactionIdFromParameter": {
        "name": "fromTransactionId",
        "in": "query",
        "required": false,
        "description": "Specify the first transaction ID in a range.",
        "x-ms-parameter-location": "method",
        "schema": {
          "type": "string"
        }
      },
      "TransactionIdToParameter": {
        "name": "toTransactionId",
        "in": "query",
        "required": false,
        "description": "Specify the last transaction ID in a range.",
        "x-ms-parameter-location": "method",
        "schema": {
          "type": "string"
        }
      },
      "TransactionIdParameter": {
        "name": "transactionId",
        "in": "path",
        "required": true,
        "description": "Identifies a write transaction.",
        "x-ms-parameter-location": "method",
        "schema": {
          "type": "string"
        }
      },
      "UserIdParameter": {
        "name": "userId",
        "in": "path",
        "required": true,
        "description": "The user id, either an AAD object ID or certificate fingerprint.",
        "x-ms-parameter-location": "method",
        "x-ms-skip-url-encoding": true,
        "schema": {
          "type": "string"
        }
      }
    },
    "schemas": {
      "Constitution": {
        "type": "object",
        "properties": {
          "digest": {
            "type": "string",
            "description": "SHA256 digest of the constitution script."
          },
          "script": {
            "type": "string",
            "description": "Contents of the constitution."
          }
        },
        "description": "The governance script for the application.",
        "required": [
          "digest",
          "script"
        ]
      },
      "Azure.Core.Foundations.ErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Azure.Core.Foundations.Error"
              }
            ],
            "description": "The error object."
          }
        },
        "description": "A response containing error details.",
        "required": [
          "error"
        ]
      },
      "Consortium": {
        "type": "object",
        "properties": {
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConsortiumMember"
            },
            "x-cadl-name": "ConsortiumMember[]",
            "description": "List of members in the consortium"
          },
          "nextLink": {
            "type": "string",
            "description": "URI from which to retrieve the next page of results."
          }
        },
        "description": "List of members in the consortium.",
        "required": [
          "members"
        ]
      },
      "ConfidentialLedgerEnclaves": {
        "type": "object",
        "properties": {
          "currentNodeId": {
            "type": "string",
            "description": "Id of the Confidential Ledger node responding to the request."
          },
          "enclaveQuotes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/EnclaveQuote"
            },
            "x-cadl-name": "Record<EnclaveQuote>"
          }
        },
        "description": "Information about the enclaves running the Confidential Ledger.",
        "required": [
          "currentNodeId",
          "enclaveQuotes"
        ]
      },
      "PagedCollections": {
        "type": "object",
        "properties": {
          "collections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Collection"
            },
            "x-cadl-name": "Collection[]"
          },
          "nextLink": {
            "type": "string",
            "description": "URI from which to retrieve the next page of results."
          }
        },
        "description": "Paginated collections returned in response to a query.",
        "required": [
          "collections"
        ]
      },
      "PagedLedgerEntries": {
        "type": "object",
        "properties": {
          "state": {
            "$ref": "#/components/schemas/LedgerQueryState"
          },
          "nextLink": {
            "type": "string",
            "description": "URI from which to retrieve the next page of results."
          },
          "entries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LedgerEntry"
            },
            "x-cadl-name": "LedgerEntry[]"
          }
        },
        "description": "Paginated ledger entries returned in response to a query.",
        "required": [
          "state",
          "entries"
        ]
      },
      "LedgerEntry": {
        "type": "object",
        "properties": {
          "contents": {
            "type": "string",
            "description": "Contents of the ledger entry."
          },
          "collectionId": {
            "type": "string",
            "description": "Id of the collection containing the entry",
            "readOnly": true
          },
          "transactionId": {
            "type": "string",
            "description": "A unique identifier for the state of the ledger. If returned as part of a LedgerEntry, it indicates the state from which the entry was read.",
            "readOnly": true
          }
        },
        "description": "An entry in the ledger.",
        "required": [
          "contents"
        ]
      },
      "LedgerWriteResult": {
        "type": "object",
        "properties": {
          "collectionId": {
            "type": "string",
            "description": "Id of the collection written to."
          }
        },
        "description": "Returned as a result of a write to the Confidential Ledger, the transaction id in the response indicates when the write will become durable.",
        "required": [
          "collectionId"
        ]
      },
      "LedgerQueryResult": {
        "type": "object",
        "properties": {
          "state": {
            "$ref": "#/components/schemas/LedgerQueryState"
          },
          "entry": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LedgerEntry"
              }
            ],
            "description": "The ledger entry found as a result of the query. This is only available if the query is in Ready state."
          }
        },
        "description": "The result of querying for a ledger entry from an older transaction id. The ledger entry is available in the response only if the returned state is Ready.",
        "required": [
          "state"
        ]
      },
      "TransactionReceipt": {
        "type": "object",
        "properties": {
          "receipt": {
            "$ref": "#/components/schemas/ReceiptContents"
          },
          "state": {
            "$ref": "#/components/schemas/LedgerQueryState"
          },
          "transactionId": {
            "type": "string",
            "description": "A unique identifier for the state of the ledger. If returned as part of a LedgerEntry, it indicates the state from which the entry was read."
          }
        },
        "description": "A receipt certifying the transaction at the specified id.",
        "required": [
          "state",
          "transactionId"
        ]
      },
      "TransactionStatus": {
        "type": "object",
        "properties": {
          "state": {
            "$ref": "#/components/schemas/TransactionState"
          },
          "transactionId": {
            "type": "string",
            "description": "A unique identifier for the state of the ledger. If returned as part of a LedgerEntry, it indicates the state from which the entry was read."
          }
        },
        "description": "Response returned to a query for the transaction status.",
        "required": [
          "state",
          "transactionId"
        ]
      },
      "LedgerUser": {
        "type": "object",
        "properties": {
          "assignedRole": {
            "$ref": "#/components/schemas/LedgerUserRole"
          },
          "userId": {
            "type": "string",
            "description": "Identifier for the user. This must either be an AAD object id or a certificate fingerprint.",
            "readOnly": true
          }
        },
        "description": "Details about a Confidential Ledger user.",
        "required": [
          "assignedRole",
          "userId"
        ]
      },
      "Azure.Core.Foundations.Error": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "One of a server-defined set of error codes."
          },
          "message": {
            "type": "string",
            "description": "A human-readable representation of the error."
          },
          "target": {
            "type": "string",
            "description": "The target of the error."
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Azure.Core.Foundations.Error"
            },
            "x-cadl-name": "Azure.Core.Foundations.Error[]",
            "description": "An array of details about specific errors that led to this reported error."
          },
          "innererror": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Azure.Core.Foundations.InnerError"
              }
            ],
            "description": "An object containing more specific information than the current object about the error."
          }
        },
        "description": "The error object.",
        "required": [
          "code",
          "message",
          "details"
        ]
      },
      "ConsortiumMember": {
        "type": "object",
        "properties": {
          "certificate": {
            "type": "string",
            "description": "PEM-encoded certificate associated with the member."
          },
          "id": {
            "type": "string",
            "description": "Identifier assigned to the member."
          }
        },
        "description": "Describes a member of the consortium.",
        "required": [
          "certificate",
          "id"
        ]
      },
      "EnclaveQuote": {
        "type": "object",
        "properties": {
          "nodeId": {
            "type": "string",
            "description": "Id assigned to this node."
          },
          "mrenclave": {
            "type": "string",
            "description": "MRENCLAVE value of the code running in the enclave."
          },
          "quoteVersion": {
            "type": "string",
            "description": "Version of the quote presented."
          },
          "raw": {
            "type": "string",
            "description": "Raw SGX quote, parsable by tools like Open Enclave's oeverify."
          }
        },
        "description": "Contains the enclave quote.",
        "required": [
          "nodeId",
          "quoteVersion",
          "raw"
        ]
      },
      "Collection": {
        "type": "object",
        "properties": {
          "collectionId": {
            "type": "string",
            "description": "Id of the collection"
          }
        },
        "description": "Identifier for collections.",
        "required": [
          "collectionId"
        ]
      },
      "LedgerQueryState": {
        "type": "string",
        "description": "State of a ledger query.",
        "enum": [
          "Loading",
          "Ready"
        ]
      },
      "ReceiptContents": {
        "type": "object",
        "properties": {
          "cert": {
            "type": "string"
          },
          "leaf": {
            "type": "string"
          },
          "leafComponents": {
            "$ref": "#/components/schemas/ReceiptLeafComponents"
          },
          "nodeId": {
            "type": "string"
          },
          "proof": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReceiptElement"
            },
            "x-cadl-name": "ReceiptElement[]"
          },
          "root": {
            "type": "string"
          },
          "serviceEndorsements": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-cadl-name": "string[]"
          },
          "signature": {
            "type": "string"
          }
        },
        "description": "Contents of a Confidential Ledger receipt",
        "required": [
          "nodeId",
          "proof",
          "signature"
        ]
      },
      "TransactionState": {
        "type": "string",
        "description": "Represents the state of the transaction.",
        "enum": [
          "Committed",
          "Pending"
        ]
      },
      "LedgerUserRole": {
        "type": "string",
        "description": "Represents an assignable role",
        "enum": [
          "Administrator",
          "Contributor",
          "Reader"
        ]
      },
      "Azure.Core.Foundations.InnerError": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "One of a server-defined set of error codes."
          },
          "innererror": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Azure.Core.Foundations.InnerError"
              }
            ],
            "description": "Inner error."
          }
        },
        "description": "An object containing more specific information about the error. As per Microsoft One API guidelines - https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.",
        "required": [
          "code"
        ]
      },
      "ReceiptLeafComponents": {
        "type": "object",
        "properties": {
          "claimsDigest": {
            "type": "string"
          },
          "commitEvidence": {
            "type": "string"
          },
          "writeSetDigest": {
            "type": "string"
          }
        }
      },
      "ReceiptElement": {
        "type": "object",
        "properties": {
          "left": {
            "type": "string"
          },
          "right": {
            "type": "string"
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "{ledgerUri}",
      "description": "Confidential Ledger Service",
      "variables": {
        "ledgerUri": {
          "default": ""
        }
      }
    }
  ]
}
