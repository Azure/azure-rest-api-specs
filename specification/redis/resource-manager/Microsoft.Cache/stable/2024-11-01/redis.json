{
  "swagger": "2.0",
  "info": {
    "title": "RedisManagementClient",
    "version": "2024-11-01",
    "description": "REST API for Azure Redis Cache Service.",
    "x-typespec-generated": [
      {
        "emitter": "@azure-tools/typespec-autorest"
      }
    ]
  },
  "schemes": [
    "https"
  ],
  "host": "management.azure.com",
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ],
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "description": "Azure Active Directory OAuth2 Flow.",
      "flow": "implicit",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      }
    }
  },
  "tags": [
    {
      "name": "Operations"
    },
    {
      "name": "RedisResources"
    },
    {
      "name": "RedisFirewallRules"
    },
    {
      "name": "RedisPatchSchedules"
    },
    {
      "name": "LinkedServer"
    },
    {
      "name": "PrivateEndpointConnections"
    },
    {
      "name": "RedisCacheAccessPolicies"
    },
    {
      "name": "RedisCacheAccessPolicyAssignments"
    }
  ],
  "paths": {
    "/providers/Microsoft.Cache/operations": {
      "get": {
        "operationId": "Operations_List",
        "tags": [
          "Operations"
        ],
        "description": "List the operations for the provider",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/OperationListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v4/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "RedisCacheOperations": {
            "$ref": "./examples/RedisCacheOperations.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.Cache/checkNameAvailability": {
      "post": {
        "operationId": "Redis_CheckNameAvailability",
        "description": "Checks that the redis cache name is valid and is not already in use.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "The request body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CheckNameAvailabilityParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v4/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "RedisCacheCheckNameAvailability": {
            "$ref": "./examples/RedisCacheCheckNameAvailability.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.Cache/locations/{location}/asyncOperations/{operationId}": {
      "get": {
        "operationId": "AsyncOperationStatus_Get",
        "description": "For checking the ongoing status of an operation",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ApiVersionParameter"
          },
          {
            "name": "location",
            "in": "path",
            "description": "The location at which operation was triggered",
            "required": true,
            "type": "string"
          },
          {
            "name": "operationId",
            "in": "path",
            "description": "The ID of asynchronous operation",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/OperationStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v4/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "RedisCacheAsyncOperationStatus": {
            "$ref": "./examples/RedisCacheAsyncOperationStatus.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.Cache/redis": {
      "get": {
        "operationId": "Redis_ListBySubscription",
        "tags": [
          "RedisResources"
        ],
        "description": "Gets all Redis caches in the specified subscription.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/RedisListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v4/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "RedisCacheList": {
            "$ref": "./examples/RedisCacheList.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redis": {
      "get": {
        "operationId": "Redis_ListByResourceGroup",
        "tags": [
          "RedisResources"
        ],
        "description": "Lists all Redis caches in a resource group.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ResourceGroupNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/RedisListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v4/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "RedisCacheListByResourceGroup": {
            "$ref": "./examples/RedisCacheListByResourceGroup.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redis/{name}": {
      "get": {
        "operationId": "Redis_Get",
        "tags": [
          "RedisResources"
        ],
        "description": "Gets a Redis cache (resource description).",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the RedisResource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/RedisResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v4/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "RedisCacheGet": {
            "$ref": "./examples/RedisCacheGet.json"
          }
        }
      },
      "put": {
        "operationId": "Redis_Create",
        "tags": [
          "RedisResources"
        ],
        "description": "Create or replace (overwrite/recreate, with potential downtime) an existing Redis cache.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the RedisResource",
            "required": true,
            "type": "string"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "Parameters supplied to the Create Redis operation.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RedisCreateParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/RedisResource"
            }
          },
          "201": {
            "description": "Resource 'RedisResource' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/RedisResource"
            },
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v4/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "RedisCacheCreate": {
            "$ref": "./examples/RedisCacheCreate.json"
          },
          "RedisCacheCreateAutomaticZonalAllocationPolicy": {
            "$ref": "./examples/RedisCacheCreateAutomaticZonalAllocationPolicy.json"
          },
          "RedisCacheCreateDefaultVersion": {
            "$ref": "./examples/RedisCacheCreateDefaultVersion.json"
          },
          "RedisCacheCreateLatestVersion": {
            "$ref": "./examples/RedisCacheCreateLatestVersion.json"
          },
          "RedisCacheCreateNoZonesZonalAllocationPolicy": {
            "$ref": "./examples/RedisCacheCreateNoZonesZonalAllocationPolicy.json"
          },
          "RedisCacheCreateUserDefinedZonalAllocationPolicy": {
            "$ref": "./examples/RedisCacheCreateUserDefinedZonalAllocationPolicy.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location",
          "final-state-schema": "#/definitions/RedisResource"
        },
        "x-ms-long-running-operation": true
      },
      "patch": {
        "operationId": "Redis_Update",
        "tags": [
          "RedisResources"
        ],
        "description": "Update an existing Redis cache.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the RedisResource",
            "required": true,
            "type": "string"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "Parameters supplied to the Update Redis operation.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RedisUpdateParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/RedisResource"
            }
          },
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "schema": {
              "$ref": "#/definitions/RedisResource"
            },
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v4/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "RedisCacheUpdate": {
            "$ref": "./examples/RedisCacheUpdate.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location",
          "final-state-schema": "#/definitions/RedisResource"
        },
        "x-ms-long-running-operation": true
      },
      "delete": {
        "operationId": "Redis_Delete",
        "tags": [
          "RedisResources"
        ],
        "description": "Deletes a Redis cache.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the RedisResource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "204": {
            "description": "Resource does not exist."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v4/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "RedisCacheDelete": {
            "$ref": "./examples/RedisCacheDelete.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redis/{cacheName}/accessPolicies": {
      "get": {
        "operationId": "AccessPolicy_List",
        "tags": [
          "RedisCacheAccessPolicies"
        ],
        "description": "Gets the list of access policies associated with this redis cache",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "cacheName",
            "in": "path",
            "description": "The name of the Redis cache.",
            "required": true,
            "type": "string",
            "pattern": "^([a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]|[a-zA-Z0-9])$"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/RedisCacheAccessPolicyList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v4/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "RedisCacheAccessPolicyList": {
            "$ref": "./examples/RedisCacheAccessPolicyList.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redis/{cacheName}/accessPolicies/{accessPolicyName}": {
      "get": {
        "operationId": "AccessPolicy_Get",
        "tags": [
          "RedisCacheAccessPolicies"
        ],
        "description": "Gets the detailed information about an access policy of a redis cache",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "cacheName",
            "in": "path",
            "description": "The name of the Redis cache.",
            "required": true,
            "type": "string",
            "pattern": "^([a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]|[a-zA-Z0-9])$"
          },
          {
            "name": "accessPolicyName",
            "in": "path",
            "description": "The name of the access policy that is being added to the Redis cache.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 63,
            "pattern": "^([a-zA-Z0-9][a-zA-Z0-9- ]*[a-zA-Z0-9]|[a-zA-Z0-9])$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/RedisCacheAccessPolicy"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v4/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "RedisCacheAccessPolicyGet": {
            "$ref": "./examples/RedisCacheAccessPolicyGet.json"
          }
        }
      },
      "put": {
        "operationId": "AccessPolicy_CreateUpdate",
        "tags": [
          "RedisCacheAccessPolicies"
        ],
        "description": "Adds an access policy to the redis cache",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "cacheName",
            "in": "path",
            "description": "The name of the Redis cache.",
            "required": true,
            "type": "string",
            "pattern": "^([a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]|[a-zA-Z0-9])$"
          },
          {
            "name": "accessPolicyName",
            "in": "path",
            "description": "The name of the access policy that is being added to the Redis cache.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 63,
            "pattern": "^([a-zA-Z0-9][a-zA-Z0-9- ]*[a-zA-Z0-9]|[a-zA-Z0-9])$"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "Parameters supplied to the Create Update Access Policy operation.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RedisCacheAccessPolicy"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'RedisCacheAccessPolicy' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/RedisCacheAccessPolicy"
            }
          },
          "201": {
            "description": "Resource 'RedisCacheAccessPolicy' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/RedisCacheAccessPolicy"
            },
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v4/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "RedisCacheAccessPolicyCreateUpdate": {
            "$ref": "./examples/RedisCacheAccessPolicyCreateUpdate.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location",
          "final-state-schema": "#/definitions/RedisCacheAccessPolicy"
        },
        "x-ms-long-running-operation": true
      },
      "delete": {
        "operationId": "AccessPolicy_Delete",
        "tags": [
          "RedisCacheAccessPolicies"
        ],
        "description": "Deletes the access policy from a redis cache",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "cacheName",
            "in": "path",
            "description": "The name of the Redis cache.",
            "required": true,
            "type": "string",
            "pattern": "^([a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]|[a-zA-Z0-9])$"
          },
          {
            "name": "accessPolicyName",
            "in": "path",
            "description": "The name of the access policy that is being added to the Redis cache.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 63,
            "pattern": "^([a-zA-Z0-9][a-zA-Z0-9- ]*[a-zA-Z0-9]|[a-zA-Z0-9])$"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "204": {
            "description": "Resource does not exist."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v4/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "RedisCacheAccessPolicyDelete": {
            "$ref": "./examples/RedisCacheAccessPolicyDelete.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redis/{cacheName}/accessPolicyAssignments": {
      "get": {
        "operationId": "AccessPolicyAssignment_List",
        "tags": [
          "RedisCacheAccessPolicyAssignments"
        ],
        "description": "Gets the list of access policy assignments associated with this redis cache",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "cacheName",
            "in": "path",
            "description": "The name of the Redis cache.",
            "required": true,
            "type": "string",
            "pattern": "^([a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]|[a-zA-Z0-9])$"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/RedisCacheAccessPolicyAssignmentList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v4/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "RedisCacheAccessPolicyAssignmentList": {
            "$ref": "./examples/RedisCacheAccessPolicyAssignmentList.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redis/{cacheName}/accessPolicyAssignments/{accessPolicyAssignmentName}": {
      "get": {
        "operationId": "AccessPolicyAssignment_Get",
        "tags": [
          "RedisCacheAccessPolicyAssignments"
        ],
        "description": "Gets the list of assignments for an access policy of a redis cache",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "cacheName",
            "in": "path",
            "description": "The name of the Redis cache.",
            "required": true,
            "type": "string",
            "pattern": "^([a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]|[a-zA-Z0-9])$"
          },
          {
            "name": "accessPolicyAssignmentName",
            "in": "path",
            "description": "The name of the access policy assignment.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 63,
            "pattern": "^([a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]|[a-zA-Z0-9])$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/RedisCacheAccessPolicyAssignment"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v4/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "RedisCacheAccessPolicyAssignmentGet": {
            "$ref": "./examples/RedisCacheAccessPolicyAssignmentGet.json"
          }
        }
      },
      "put": {
        "operationId": "AccessPolicyAssignment_CreateUpdate",
        "tags": [
          "RedisCacheAccessPolicyAssignments"
        ],
        "description": "Adds the access policy assignment to the specified users",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "cacheName",
            "in": "path",
            "description": "The name of the Redis cache.",
            "required": true,
            "type": "string",
            "pattern": "^([a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]|[a-zA-Z0-9])$"
          },
          {
            "name": "accessPolicyAssignmentName",
            "in": "path",
            "description": "The name of the access policy assignment.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 63,
            "pattern": "^([a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]|[a-zA-Z0-9])$"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "Parameters supplied to the Create Update Access Policy Assignment operation.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RedisCacheAccessPolicyAssignment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'RedisCacheAccessPolicyAssignment' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/RedisCacheAccessPolicyAssignment"
            }
          },
          "201": {
            "description": "Resource 'RedisCacheAccessPolicyAssignment' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/RedisCacheAccessPolicyAssignment"
            },
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v4/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "RedisCacheAccessPolicyAssignmentCreateUpdate": {
            "$ref": "./examples/RedisCacheAccessPolicyAssignmentCreateUpdate.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location",
          "final-state-schema": "#/definitions/RedisCacheAccessPolicyAssignment"
        },
        "x-ms-long-running-operation": true
      },
      "delete": {
        "operationId": "AccessPolicyAssignment_Delete",
        "tags": [
          "RedisCacheAccessPolicyAssignments"
        ],
        "description": "Deletes the access policy assignment from a redis cache",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "cacheName",
            "in": "path",
            "description": "The name of the Redis cache.",
            "required": true,
            "type": "string",
            "pattern": "^([a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]|[a-zA-Z0-9])$"
          },
          {
            "name": "accessPolicyAssignmentName",
            "in": "path",
            "description": "The name of the access policy assignment.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 63,
            "pattern": "^([a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]|[a-zA-Z0-9])$"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "204": {
            "description": "Resource does not exist."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v4/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "RedisCacheAccessPolicyAssignmentDelete": {
            "$ref": "./examples/RedisCacheAccessPolicyAssignmentDelete.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redis/{name}/export": {
      "post": {
        "operationId": "Redis_ExportData",
        "tags": [
          "RedisResources"
        ],
        "description": "Export data from the redis cache to blobs in a container.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the RedisResource",
            "required": true,
            "type": "string"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "Parameters for Redis export operation.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExportRDBParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "202": {
            "description": "Resource operation accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "204": {
            "description": "Operation completed successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v4/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "RedisCacheExport": {
            "$ref": "./examples/RedisCacheExport.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redis/{cacheName}/firewallRules": {
      "get": {
        "operationId": "FirewallRules_List",
        "tags": [
          "RedisFirewallRules"
        ],
        "description": "Gets all firewall rules in the specified redis cache.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "cacheName",
            "in": "path",
            "description": "The name of the Redis cache.",
            "required": true,
            "type": "string",
            "pattern": "^([a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]|[a-zA-Z0-9])$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/RedisFirewallRuleListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v4/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "RedisCacheFirewallRulesList": {
            "$ref": "./examples/RedisCacheFirewallRulesList.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redis/{cacheName}/firewallRules/{ruleName}": {
      "get": {
        "operationId": "FirewallRules_Get",
        "tags": [
          "RedisFirewallRules"
        ],
        "description": "Gets a single firewall rule in a specified redis cache.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "cacheName",
            "in": "path",
            "description": "The name of the Redis cache.",
            "required": true,
            "type": "string",
            "pattern": "^([a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]|[a-zA-Z0-9])$"
          },
          {
            "name": "ruleName",
            "in": "path",
            "description": "The name of the firewall rule.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/RedisFirewallRule"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v4/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "RedisCacheFirewallRuleGet": {
            "$ref": "./examples/RedisCacheFirewallRuleGet.json"
          }
        }
      },
      "put": {
        "operationId": "FirewallRules_CreateOrUpdate",
        "tags": [
          "RedisFirewallRules"
        ],
        "description": "Create or update a redis cache firewall rule",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "cacheName",
            "in": "path",
            "description": "The name of the Redis cache.",
            "required": true,
            "type": "string",
            "pattern": "^([a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]|[a-zA-Z0-9])$"
          },
          {
            "name": "ruleName",
            "in": "path",
            "description": "The name of the firewall rule.",
            "required": true,
            "type": "string"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "Parameters supplied to the create or update redis firewall rule operation.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RedisFirewallRule"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'RedisFirewallRule' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/RedisFirewallRule"
            }
          },
          "201": {
            "description": "Resource 'RedisFirewallRule' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/RedisFirewallRule"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v4/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "RedisCacheFirewallRuleCreate": {
            "$ref": "./examples/RedisCacheFirewallRuleCreate.json"
          }
        }
      },
      "delete": {
        "operationId": "FirewallRules_Delete",
        "tags": [
          "RedisFirewallRules"
        ],
        "description": "Deletes a single firewall rule in a specified redis cache.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "cacheName",
            "in": "path",
            "description": "The name of the Redis cache.",
            "required": true,
            "type": "string",
            "pattern": "^([a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]|[a-zA-Z0-9])$"
          },
          {
            "name": "ruleName",
            "in": "path",
            "description": "The name of the firewall rule.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "204": {
            "description": "Resource does not exist."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v4/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "RedisCacheFirewallRuleDelete": {
            "$ref": "./examples/RedisCacheFirewallRuleDelete.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redis/{cacheName}/flush": {
      "post": {
        "operationId": "Redis_FlushCache",
        "tags": [
          "RedisResources"
        ],
        "description": "Deletes all of the keys in a cache.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "cacheName",
            "in": "path",
            "description": "The name of the Redis cache.",
            "required": true,
            "type": "string",
            "pattern": "^([a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]|[a-zA-Z0-9])$"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v4/types.json#/definitions/OperationStatusResult"
            },
            "headers": {
              "Azure-AsyncOperation": {
                "type": "string",
                "format": "uri",
                "description": "A link to the status monitor"
              },
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              }
            }
          },
          "202": {
            "description": "Resource operation accepted.",
            "headers": {
              "Azure-AsyncOperation": {
                "type": "string",
                "format": "uri",
                "description": "A link to the status monitor"
              },
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v4/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "RedisCacheFlush": {
            "$ref": "./examples/RedisCacheFlush.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location",
          "final-state-schema": "../../../../../common-types/resource-management/v4/types.json#/definitions/OperationStatusResult"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redis/{name}/forceReboot": {
      "post": {
        "operationId": "Redis_ForceReboot",
        "tags": [
          "RedisResources"
        ],
        "description": "Reboot specified Redis node(s). This operation requires write permission to the cache resource. There can be potential data loss.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the RedisResource",
            "required": true,
            "type": "string"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "Specifies which Redis node(s) to reboot.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RedisRebootParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/RedisForceRebootResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v4/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "RedisCacheForceReboot": {
            "$ref": "./examples/RedisCacheForceReboot.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redis/{name}/import": {
      "post": {
        "operationId": "Redis_ImportData",
        "tags": [
          "RedisResources"
        ],
        "description": "Import data into Redis cache.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the RedisResource",
            "required": true,
            "type": "string"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "Parameters for Redis import operation.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ImportRDBParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "202": {
            "description": "Resource operation accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "204": {
            "description": "Operation completed successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v4/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "RedisCacheImport": {
            "$ref": "./examples/RedisCacheImport.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redis/{name}/linkedServers": {
      "get": {
        "operationId": "LinkedServer_List",
        "tags": [
          "LinkedServer"
        ],
        "description": "Gets the list of linked servers associated with this redis cache (requires Premium SKU).",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the redis cache.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/RedisLinkedServerWithPropertiesList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v4/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "LinkedServer_List": {
            "$ref": "./examples/RedisCacheLinkedServer_List.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redis/{name}/linkedServers/{linkedServerName}": {
      "get": {
        "operationId": "LinkedServer_Get",
        "tags": [
          "LinkedServer"
        ],
        "description": "Gets the detailed information about a linked server of a redis cache (requires Premium SKU).",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the redis cache.",
            "required": true,
            "type": "string"
          },
          {
            "name": "linkedServerName",
            "in": "path",
            "description": "The name of the RedisLinkedServerWithProperties",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/RedisLinkedServerWithProperties"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v4/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "LinkedServer_Get": {
            "$ref": "./examples/RedisCacheLinkedServer_Get.json"
          }
        }
      },
      "put": {
        "operationId": "LinkedServer_Create",
        "tags": [
          "LinkedServer"
        ],
        "description": "Adds a linked server to the Redis cache (requires Premium SKU).",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the redis cache.",
            "required": true,
            "type": "string"
          },
          {
            "name": "linkedServerName",
            "in": "path",
            "description": "The name of the RedisLinkedServerWithProperties",
            "required": true,
            "type": "string"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "Parameters supplied to the Create Linked server operation.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RedisLinkedServerCreateParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/RedisLinkedServerWithProperties"
            }
          },
          "201": {
            "description": "Resource 'RedisLinkedServerWithProperties' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/RedisLinkedServerWithProperties"
            },
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v4/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "LinkedServer_Create": {
            "$ref": "./examples/RedisCacheLinkedServer_Create.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location",
          "final-state-schema": "#/definitions/RedisLinkedServerWithProperties"
        },
        "x-ms-long-running-operation": true
      },
      "delete": {
        "operationId": "LinkedServer_Delete",
        "tags": [
          "LinkedServer"
        ],
        "description": "Deletes the linked server from a redis cache (requires Premium SKU).",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the redis cache.",
            "required": true,
            "type": "string"
          },
          {
            "name": "linkedServerName",
            "in": "path",
            "description": "The name of the RedisLinkedServerWithProperties",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v4/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "LinkedServerDelete": {
            "$ref": "./examples/RedisCacheLinkedServer_Delete.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redis/{name}/listKeys": {
      "post": {
        "operationId": "Redis_ListKeys",
        "tags": [
          "RedisResources"
        ],
        "description": "Retrieve a Redis cache's access keys. This operation requires write permission to the cache resource.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the RedisResource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/RedisAccessKeys"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v4/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "RedisCacheListKeys": {
            "$ref": "./examples/RedisCacheListKeys.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redis/{name}/listUpgradeNotifications": {
      "get": {
        "operationId": "Redis_ListUpgradeNotifications",
        "tags": [
          "RedisResources"
        ],
        "description": "[Deprecated] Gets any upgrade notifications for a Redis cache.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the RedisResource",
            "required": true,
            "type": "string"
          },
          {
            "name": "history",
            "in": "query",
            "description": "how many minutes in past to look for upgrade notifications",
            "required": true,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/NotificationListResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v4/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "RedisCacheListUpgradeNotifications": {
            "$ref": "./examples/RedisCacheListUpgradeNotifications.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redis/{cacheName}/patchSchedules": {
      "get": {
        "operationId": "PatchSchedules_ListByRedisResource",
        "tags": [
          "RedisPatchSchedules"
        ],
        "description": "Gets all patch schedules in the specified redis cache (there is only one).",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "cacheName",
            "in": "path",
            "description": "The name of the Redis cache.",
            "required": true,
            "type": "string",
            "pattern": "^([a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]|[a-zA-Z0-9])$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/RedisPatchScheduleListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v4/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "RedisCachePatchSchedulesList": {
            "$ref": "./examples/RedisCachePatchSchedulesList.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redis/{name}/patchSchedules/{default}": {
      "get": {
        "operationId": "PatchSchedules_Get",
        "tags": [
          "RedisPatchSchedules"
        ],
        "description": "Gets the patching schedule of a redis cache.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the redis cache.",
            "required": true,
            "type": "string"
          },
          {
            "name": "default",
            "in": "path",
            "description": "The name of the RedisPatchSchedule",
            "required": true,
            "type": "string",
            "enum": [
              "default"
            ],
            "x-ms-enum": {
              "name": "DefaultName",
              "modelAsString": true,
              "values": [
                {
                  "name": "default",
                  "value": "default",
                  "description": "The name of e.g. the patch schedules resource, which is a singleton, must always be 'Default'"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/RedisPatchSchedule"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v4/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "RedisCachePatchSchedulesGet": {
            "$ref": "./examples/RedisCachePatchSchedulesGet.json"
          }
        }
      },
      "put": {
        "operationId": "PatchSchedules_CreateOrUpdate",
        "tags": [
          "RedisPatchSchedules"
        ],
        "description": "Create or replace the patching schedule for Redis cache.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the redis cache.",
            "required": true,
            "type": "string"
          },
          {
            "name": "default",
            "in": "path",
            "description": "The name of the RedisPatchSchedule",
            "required": true,
            "type": "string",
            "enum": [
              "default"
            ],
            "x-ms-enum": {
              "name": "DefaultName",
              "modelAsString": true,
              "values": [
                {
                  "name": "default",
                  "value": "default",
                  "description": "The name of e.g. the patch schedules resource, which is a singleton, must always be 'Default'"
                }
              ]
            }
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "Parameters to set the patching schedule for Redis cache.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RedisPatchSchedule"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'RedisPatchSchedule' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/RedisPatchSchedule"
            }
          },
          "201": {
            "description": "Resource 'RedisPatchSchedule' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/RedisPatchSchedule"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v4/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "RedisCachePatchSchedulesCreateOrUpdate": {
            "$ref": "./examples/RedisCachePatchSchedulesCreateOrUpdate.json"
          }
        }
      },
      "delete": {
        "operationId": "PatchSchedules_Delete",
        "tags": [
          "RedisPatchSchedules"
        ],
        "description": "Deletes the patching schedule of a redis cache.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the redis cache.",
            "required": true,
            "type": "string"
          },
          {
            "name": "default",
            "in": "path",
            "description": "The name of the RedisPatchSchedule",
            "required": true,
            "type": "string",
            "enum": [
              "default"
            ],
            "x-ms-enum": {
              "name": "DefaultName",
              "modelAsString": true,
              "values": [
                {
                  "name": "default",
                  "value": "default",
                  "description": "The name of e.g. the patch schedules resource, which is a singleton, must always be 'Default'"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "204": {
            "description": "Resource does not exist."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v4/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "RedisCachePatchSchedulesDelete": {
            "$ref": "./examples/RedisCachePatchSchedulesDelete.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redis/{cacheName}/privateEndpointConnections": {
      "get": {
        "operationId": "PrivateEndpointConnections_List",
        "tags": [
          "PrivateEndpointConnections"
        ],
        "description": "List all the private endpoint connections associated with the redis cache.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "cacheName",
            "in": "path",
            "description": "The name of the Redis cache.",
            "required": true,
            "type": "string",
            "pattern": "^([a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]|[a-zA-Z0-9])$"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PrivateEndpointConnectionListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v4/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "RedisCacheListPrivateEndpointConnection": {
            "$ref": "./examples/RedisCacheListPrivateEndpointConnections.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redis/{cacheName}/privateEndpointConnections/{privateEndpointConnectionName}": {
      "get": {
        "operationId": "PrivateEndpointConnections_Get",
        "tags": [
          "PrivateEndpointConnections"
        ],
        "description": "Gets the specified private endpoint connection associated with the redis cache.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "cacheName",
            "in": "path",
            "description": "The name of the Redis cache.",
            "required": true,
            "type": "string",
            "pattern": "^([a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]|[a-zA-Z0-9])$"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/privatelinks.json#/parameters/PrivateEndpointConnectionName"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v4/privatelinks.json#/definitions/PrivateEndpointConnection"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v4/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "RedisCacheGetPrivateEndpointConnection": {
            "$ref": "./examples/RedisCacheGetPrivateEndpointConnection.json"
          }
        }
      },
      "put": {
        "operationId": "PrivateEndpointConnections_Put",
        "tags": [
          "PrivateEndpointConnections"
        ],
        "description": "Update the state of specified private endpoint connection associated with the redis cache.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "cacheName",
            "in": "path",
            "description": "The name of the Redis cache.",
            "required": true,
            "type": "string",
            "pattern": "^([a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]|[a-zA-Z0-9])$"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/privatelinks.json#/parameters/PrivateEndpointConnectionName"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The private endpoint connection properties.",
            "required": true,
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v4/privatelinks.json#/definitions/PrivateEndpointConnection"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'PrivateEndpointConnection' update operation succeeded",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v4/privatelinks.json#/definitions/PrivateEndpointConnection"
            }
          },
          "201": {
            "description": "Resource 'PrivateEndpointConnection' create operation succeeded",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v4/privatelinks.json#/definitions/PrivateEndpointConnection"
            },
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v4/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "RedisCachePutPrivateEndpointConnection": {
            "$ref": "./examples/RedisCachePutPrivateEndpointConnection.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location",
          "final-state-schema": "../../../../../common-types/resource-management/v4/privatelinks.json#/definitions/PrivateEndpointConnection"
        },
        "x-ms-long-running-operation": true
      },
      "delete": {
        "operationId": "PrivateEndpointConnections_Delete",
        "tags": [
          "PrivateEndpointConnections"
        ],
        "description": "Deletes the specified private endpoint connection associated with the redis cache.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "cacheName",
            "in": "path",
            "description": "The name of the Redis cache.",
            "required": true,
            "type": "string",
            "pattern": "^([a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]|[a-zA-Z0-9])$"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/privatelinks.json#/parameters/PrivateEndpointConnectionName"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "204": {
            "description": "Resource does not exist."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v4/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "RedisCacheDeletePrivateEndpointConnection": {
            "$ref": "./examples/RedisCacheDeletePrivateEndpointConnection.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redis/{cacheName}/privateLinkResources": {
      "get": {
        "operationId": "PrivateLinkResources_ListByRedisCache",
        "tags": [
          "RedisResources"
        ],
        "description": "Gets the private link resources that need to be created for a redis cache.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "cacheName",
            "in": "path",
            "description": "The name of the Redis cache.",
            "required": true,
            "type": "string",
            "pattern": "^([a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]|[a-zA-Z0-9])$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/PrivateLinkResourceListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v4/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "StorageAccountListPrivateLinkResources": {
            "$ref": "./examples/RedisCacheListPrivateLinkResources.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redis/{name}/regenerateKey": {
      "post": {
        "operationId": "Redis_RegenerateKey",
        "tags": [
          "RedisResources"
        ],
        "description": "Regenerate Redis cache's access keys. This operation requires write permission to the cache resource.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v4/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the RedisResource",
            "required": true,
            "type": "string"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "Specifies which key to regenerate.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RedisRegenerateKeyParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/RedisAccessKeys"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v4/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "RedisCacheRegenerateKey": {
            "$ref": "./examples/RedisCacheRegenerateKey.json"
          }
        }
      }
    }
  },
  "definitions": {
    "AccessPolicyAssignmentProvisioningState": {
      "type": "string",
      "description": "Provisioning state of an access policy assignment set",
      "enum": [
        "Updating",
        "Succeeded",
        "Deleting",
        "Deleted",
        "Canceled",
        "Failed"
      ],
      "x-ms-enum": {
        "name": "AccessPolicyAssignmentProvisioningState",
        "modelAsString": true,
        "values": [
          {
            "name": "Updating",
            "value": "Updating",
            "description": "The access policy assignments are being updated"
          },
          {
            "name": "Succeeded",
            "value": "Succeeded",
            "description": "The access policy assignments were successfully updated"
          },
          {
            "name": "Deleting",
            "value": "Deleting",
            "description": "The access policy assignments are being deleted"
          },
          {
            "name": "Deleted",
            "value": "Deleted",
            "description": "The access policy assignments are considered deleted, meaning no custom access policies are applied."
          },
          {
            "name": "Canceled",
            "value": "Canceled",
            "description": "The operation was canceled. Access policy assignments may be in a partially updated state. Update them again to have a well-defined state."
          },
          {
            "name": "Failed",
            "value": "Failed",
            "description": "The operation failed. Access policy assignments may be in a partially updated state. Update them again to have a well-defined state."
          }
        ]
      }
    },
    "AccessPolicyProvisioningState": {
      "type": "string",
      "description": "Provisioning state of access policy",
      "enum": [
        "Updating",
        "Succeeded",
        "Deleting",
        "Deleted",
        "Canceled",
        "Failed"
      ],
      "x-ms-enum": {
        "name": "AccessPolicyProvisioningState",
        "modelAsString": true,
        "values": [
          {
            "name": "Updating",
            "value": "Updating",
            "description": "An operation is in progress."
          },
          {
            "name": "Succeeded",
            "value": "Succeeded",
            "description": "The operation succeeded."
          },
          {
            "name": "Deleting",
            "value": "Deleting",
            "description": "A delete operation is in progress."
          },
          {
            "name": "Deleted",
            "value": "Deleted",
            "description": "The access policy is considered deleted, if it still exists."
          },
          {
            "name": "Canceled",
            "value": "Canceled",
            "description": "The operation was canceled. Access policies may be in a partially updated state. Update them again to have a well-defined state."
          },
          {
            "name": "Failed",
            "value": "Failed",
            "description": "The operation failed. Access policies may be in a partially updated state. Update them again to have a well-defined state."
          }
        ]
      }
    },
    "AccessPolicyType": {
      "type": "string",
      "description": "Built-In or Custom access policy",
      "enum": [
        "Custom",
        "BuiltIn"
      ],
      "x-ms-enum": {
        "name": "AccessPolicyType",
        "modelAsString": true,
        "values": [
          {
            "name": "Custom",
            "value": "Custom",
            "description": "User-configurable access policy, using the redis access policy authoring language"
          },
          {
            "name": "BuiltIn",
            "value": "BuiltIn",
            "description": "Built-in or well-known access policies, whose policy is not configurable."
          }
        ]
      }
    },
    "CheckNameAvailabilityParameters": {
      "type": "object",
      "description": "Parameters body to pass for resource name availability check.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Resource name."
        },
        "type": {
          "type": "string",
          "description": "Resource type. The only legal value of this property for checking redis cache name availability is 'Microsoft.Cache/redis'."
        }
      },
      "required": [
        "name",
        "type"
      ]
    },
    "DayOfWeek": {
      "type": "string",
      "description": "Day of the week when a cache can be patched.",
      "enum": [
        "Monday",
        "Tuesday",
        "Wednesday",
        "Thursday",
        "Friday",
        "Saturday",
        "Sunday",
        "Everyday",
        "Weekend"
      ],
      "x-ms-enum": {
        "name": "DayOfWeek",
        "modelAsString": false,
        "values": [
          {
            "name": "Monday",
            "value": "Monday"
          },
          {
            "name": "Tuesday",
            "value": "Tuesday"
          },
          {
            "name": "Wednesday",
            "value": "Wednesday"
          },
          {
            "name": "Thursday",
            "value": "Thursday"
          },
          {
            "name": "Friday",
            "value": "Friday"
          },
          {
            "name": "Saturday",
            "value": "Saturday"
          },
          {
            "name": "Sunday",
            "value": "Sunday"
          },
          {
            "name": "Everyday",
            "value": "Everyday",
            "description": "As a convenience, 'Everyday' is also accepted and means the same as specifying all days of the week."
          },
          {
            "name": "Weekend",
            "value": "Weekend",
            "description": "As a convenience, 'Weekend' is also accepted and means the same as specifying Saturday and Sunday."
          }
        ]
      }
    },
    "ExportRDBParameters": {
      "type": "object",
      "description": "Parameters for Redis export operation.",
      "properties": {
        "format": {
          "type": "string",
          "description": "File format."
        },
        "prefix": {
          "type": "string",
          "description": "Prefix to use for exported files."
        },
        "container": {
          "type": "string",
          "description": "Container name to export to."
        },
        "preferred-data-archive-auth-method": {
          "type": "string",
          "description": "Preferred auth method to communicate to storage account used for data archive, specify SAS or ManagedIdentity, default value is SAS"
        },
        "storage-subscription-id": {
          "type": "string",
          "description": "Subscription id of the storage container for data to be exported using ManagedIdentity."
        }
      },
      "required": [
        "prefix",
        "container"
      ]
    },
    "ImportRDBParameters": {
      "type": "object",
      "description": "Parameters for Redis import operation.",
      "properties": {
        "format": {
          "type": "string",
          "description": "File format."
        },
        "files": {
          "type": "array",
          "description": "files to import.",
          "items": {
            "type": "string"
          }
        },
        "preferred-data-archive-auth-method": {
          "type": "string",
          "description": "Preferred auth method to communicate to storage account used for data archive, specify SAS or ManagedIdentity, default value is SAS"
        },
        "storage-subscription-id": {
          "type": "string",
          "description": "Subscription id of the storage container containing files to import using Managed Identity."
        }
      },
      "required": [
        "files"
      ]
    },
    "NotificationListResponse": {
      "type": "object",
      "description": "The response of listUpgradeNotifications.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The UpgradeNotification items on this page",
          "items": {
            "$ref": "#/definitions/UpgradeNotification"
          },
          "x-ms-identifiers": [
            "name",
            "timestamp"
          ]
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "Operation": {
      "type": "object",
      "description": "REST API operation",
      "properties": {
        "name": {
          "type": "string",
          "description": "Operation name: {provider}/{resource}/{operation}"
        },
        "display": {
          "$ref": "#/definitions/OperationDisplay",
          "description": "The object that describes the operation."
        }
      }
    },
    "OperationDisplay": {
      "type": "object",
      "description": "The object that describes the operation.",
      "properties": {
        "provider": {
          "type": "string",
          "description": "Friendly name of the resource provider"
        },
        "operation": {
          "type": "string",
          "description": "Operation type: read, write, delete, listKeys/action, etc."
        },
        "resource": {
          "type": "string",
          "description": "Resource type on which the operation is performed."
        },
        "description": {
          "type": "string",
          "description": "Friendly name of the operation"
        }
      }
    },
    "OperationListResult": {
      "type": "object",
      "description": "Result of the request to list REST API operations. It contains a list of operations and a URL nextLink to get the next set of results.",
      "properties": {
        "value": {
          "type": "array",
          "description": "List of operations supported by the resource provider.",
          "items": {
            "$ref": "#/definitions/Operation"
          },
          "x-ms-identifiers": [
            "name"
          ]
        },
        "nextLink": {
          "type": "string",
          "description": "URL to get the next set of operation list results if there are any."
        }
      },
      "required": [
        "value"
      ]
    },
    "OperationStatus": {
      "type": "object",
      "description": "Asynchronous operation status",
      "properties": {
        "properties": {
          "type": "object",
          "description": "Additional properties from RP, only when operation is successful",
          "additionalProperties": {}
        }
      },
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v4/types.json#/definitions/OperationStatusResult"
        }
      ]
    },
    "PrivateEndpointConnectionListResult": {
      "type": "object",
      "description": "The response of a PrivateEndpointConnection list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The PrivateEndpointConnection items on this page",
          "items": {
            "$ref": "../../../../../common-types/resource-management/v4/privatelinks.json#/definitions/PrivateEndpointConnection"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "PrivateLinkResourceListResult": {
      "type": "object",
      "description": "The response of a PrivateLinkResource list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The PrivateLinkResource items on this page",
          "items": {
            "$ref": "../../../../../common-types/resource-management/v4/privatelinks.json#/definitions/PrivateLinkResource"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "ProvisioningState": {
      "type": "string",
      "description": "Redis instance provisioning status.",
      "enum": [
        "Creating",
        "Deleting",
        "Disabled",
        "Failed",
        "Linking",
        "Provisioning",
        "RecoveringScaleFailure",
        "Scaling",
        "Succeeded",
        "Unlinking",
        "Unprovisioning",
        "Updating",
        "ConfiguringAAD"
      ],
      "x-ms-enum": {
        "name": "ProvisioningState",
        "modelAsString": true,
        "values": [
          {
            "name": "Creating",
            "value": "Creating",
            "description": "A create operation is in progress."
          },
          {
            "name": "Deleting",
            "value": "Deleting",
            "description": "A delete operation is in progress."
          },
          {
            "name": "Disabled",
            "value": "Disabled",
            "description": "The cache is disabled and cannot be used."
          },
          {
            "name": "Failed",
            "value": "Failed",
            "description": "An operation such as create or update failed. If you failed to create the cache it will not be in a usable state, so you should delete and recreate it."
          },
          {
            "name": "Linking",
            "value": "Linking",
            "description": "Georeplication link is in progress"
          },
          {
            "name": "Provisioning",
            "value": "Provisioning",
            "description": "An operation is in progress"
          },
          {
            "name": "RecoveringScaleFailure",
            "value": "RecoveringScaleFailure",
            "description": "A scaling operation encountered an error and recovery is in progress."
          },
          {
            "name": "Scaling",
            "value": "Scaling",
            "description": "A scaling operation is in progress"
          },
          {
            "name": "Succeeded",
            "value": "Succeeded",
            "description": "The most recent operation successfully completed"
          },
          {
            "name": "Unlinking",
            "value": "Unlinking",
            "description": "Georeplication unlink is in progress"
          },
          {
            "name": "Unprovisioning",
            "value": "Unprovisioning",
            "description": "The cache may be being disabled"
          },
          {
            "name": "Updating",
            "value": "Updating",
            "description": "An update operation is in progress."
          },
          {
            "name": "ConfiguringAAD",
            "value": "ConfiguringAAD",
            "description": "An AAD configuration update operation is in progress."
          }
        ]
      }
    },
    "PublicNetworkAccess": {
      "type": "string",
      "description": "Whether or not public endpoint access is allowed for this cache.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'. If 'Disabled', private endpoints are the exclusive access method. Default value is 'Enabled'",
      "enum": [
        "Enabled",
        "Disabled"
      ],
      "x-ms-enum": {
        "name": "PublicNetworkAccess",
        "modelAsString": true,
        "values": [
          {
            "name": "Enabled",
            "value": "Enabled",
            "description": "Public internet access to the cache, via its public IP address, is enabled. Connections may use any network path."
          },
          {
            "name": "Disabled",
            "value": "Disabled",
            "description": "Public internet access to the cache, via its public IP address, is disabled. Connections must use be made via private endpoints."
          }
        ]
      }
    },
    "RebootType": {
      "type": "string",
      "description": "Which Redis node(s) to reboot. Depending on this value data loss is possible.",
      "enum": [
        "PrimaryNode",
        "SecondaryNode",
        "AllNodes"
      ],
      "x-ms-enum": {
        "name": "RebootType",
        "modelAsString": true,
        "values": [
          {
            "name": "PrimaryNode",
            "value": "PrimaryNode",
            "description": "Reboot the primary nodes used for redis write operations. (This may trigger role changes.)"
          },
          {
            "name": "SecondaryNode",
            "value": "SecondaryNode",
            "description": "Reboot only the secondary or replica nodes"
          },
          {
            "name": "AllNodes",
            "value": "AllNodes",
            "description": "Reboot all nodes, not guaranteed to happen simultaneously."
          }
        ]
      }
    },
    "RedisAccessKeys": {
      "type": "object",
      "description": "Redis cache access keys.",
      "properties": {
        "primaryKey": {
          "type": "string",
          "description": "The current primary key that clients can use to authenticate with Redis cache.",
          "readOnly": true
        },
        "secondaryKey": {
          "type": "string",
          "description": "The current secondary key that clients can use to authenticate with Redis cache.",
          "readOnly": true
        }
      }
    },
    "RedisCacheAccessPolicy": {
      "type": "object",
      "description": "Response to get/put access policy.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/RedisCacheAccessPolicyProperties",
          "description": "Properties of an access policy.",
          "x-ms-client-flatten": true
        }
      },
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v4/types.json#/definitions/ProxyResource"
        }
      ]
    },
    "RedisCacheAccessPolicyAssignment": {
      "type": "object",
      "description": "Response to an operation on access policy assignment",
      "properties": {
        "properties": {
          "$ref": "#/definitions/RedisCacheAccessPolicyAssignmentProperties",
          "description": "Properties of an access policy assignment",
          "x-ms-client-flatten": true
        }
      },
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v4/types.json#/definitions/ProxyResource"
        }
      ]
    },
    "RedisCacheAccessPolicyAssignmentList": {
      "type": "object",
      "description": "List of access policies assignments (with properties) of a Redis cache.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The RedisCacheAccessPolicyAssignment items on this page",
          "items": {
            "$ref": "#/definitions/RedisCacheAccessPolicyAssignment"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "RedisCacheAccessPolicyAssignmentProperties": {
      "type": "object",
      "description": "Properties for an access policy assignment",
      "properties": {
        "provisioningState": {
          "$ref": "#/definitions/AccessPolicyAssignmentProvisioningState",
          "description": "Provisioning state of an access policy assignment set",
          "readOnly": true
        },
        "objectId": {
          "type": "string",
          "description": "Object Id to assign access policy to"
        },
        "objectIdAlias": {
          "type": "string",
          "description": "User friendly name for object id. Also represents username for token based authentication"
        },
        "accessPolicyName": {
          "type": "string",
          "description": "The name of the access policy that is being assigned",
          "pattern": "^([a-zA-Z0-9][a-zA-Z0-9- ]*[a-zA-Z0-9]|[a-zA-Z0-9])$"
        }
      },
      "required": [
        "objectId",
        "objectIdAlias",
        "accessPolicyName"
      ]
    },
    "RedisCacheAccessPolicyList": {
      "type": "object",
      "description": "List of access policies (with properties) of a Redis cache.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The RedisCacheAccessPolicy items on this page",
          "items": {
            "$ref": "#/definitions/RedisCacheAccessPolicy"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "RedisCacheAccessPolicyProperties": {
      "type": "object",
      "description": "All properties of an access policy.",
      "properties": {
        "provisioningState": {
          "$ref": "#/definitions/AccessPolicyProvisioningState",
          "description": "Provisioning state of access policy",
          "readOnly": true
        },
        "type": {
          "$ref": "#/definitions/AccessPolicyType",
          "description": "Built-In or Custom access policy",
          "readOnly": true
        },
        "permissions": {
          "type": "string",
          "description": "Permissions for the access policy. Learn how to configure permissions at https://aka.ms/redis/AADPreRequisites"
        }
      },
      "required": [
        "permissions"
      ]
    },
    "RedisCommonProperties": {
      "type": "object",
      "description": "Create/Update/Get common properties of the redis cache.",
      "properties": {
        "redisConfiguration": {
          "$ref": "#/definitions/RedisCommonPropertiesRedisConfiguration",
          "description": "All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta, maxmemory-policy,notify-keyspace-events, aof-backup-enabled, aof-storage-connection-string-0, aof-storage-connection-string-1 etc."
        },
        "redisVersion": {
          "type": "string",
          "description": "Redis version. This should be in the form 'major[.minor]' (only 'major' is required) or the value 'latest' which refers to the latest stable Redis version that is available. Supported versions: 4.0, 6.0 (latest). Default value is 'latest'."
        },
        "enableNonSslPort": {
          "type": "boolean",
          "description": "Specifies whether the non-ssl Redis server port (6379) is enabled.",
          "default": false
        },
        "replicasPerMaster": {
          "type": "integer",
          "format": "int32",
          "description": "The number of replicas to be created per primary."
        },
        "replicasPerPrimary": {
          "type": "integer",
          "format": "int32",
          "description": "The number of replicas to be created per primary."
        },
        "tenantSettings": {
          "type": "object",
          "description": "A dictionary of tenant settings",
          "additionalProperties": {
            "type": "string"
          }
        },
        "shardCount": {
          "type": "integer",
          "format": "int32",
          "description": "The number of shards to be created on a Premium Cluster Cache."
        },
        "minimumTlsVersion": {
          "$ref": "#/definitions/TlsVersion",
          "description": "Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2')"
        },
        "publicNetworkAccess": {
          "$ref": "#/definitions/PublicNetworkAccess",
          "description": "Whether or not public endpoint access is allowed for this cache.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'. If 'Disabled', private endpoints are the exclusive access method."
        },
        "updateChannel": {
          "$ref": "#/definitions/UpdateChannel",
          "description": "Optional: Specifies the update channel for the monthly Redis updates your Redis Cache will receive. Caches using 'Preview' update channel get latest Redis updates at least 4 weeks ahead of 'Stable' channel caches. Default value is 'Stable'."
        },
        "disableAccessKeyAuthentication": {
          "type": "boolean",
          "description": "Authentication to Redis through access keys is disabled when set as true. Default value is false.",
          "default": false
        },
        "zonalAllocationPolicy": {
          "$ref": "#/definitions/ZonalAllocationPolicy",
          "description": "Optional: Specifies how availability zones are allocated to the Redis cache. 'Automatic' enables zone redundancy and Azure will automatically select zones based on regional availability and capacity. 'UserDefined' will select availability zones passed in by you using the 'zones' parameter. 'NoZones' will produce a non-zonal cache. If 'zonalAllocationPolicy' is not passed, it will be set to 'UserDefined' when zones are passed in, otherwise, it will be set to 'Automatic' in regions where zones are supported and 'NoZones' in regions where zones are not supported."
        }
      },
      "x-ms-external": true
    },
    "RedisCommonPropertiesRedisConfiguration": {
      "type": "object",
      "description": "All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta, maxmemory-policy,notify-keyspace-events, aof-backup-enabled, aof-storage-connection-string-0, aof-storage-connection-string-1 etc.",
      "properties": {
        "rdb-backup-enabled": {
          "type": "string",
          "description": "Specifies whether the RDB backup is enabled",
          "x-ms-client-name": "rdbBackupEnabled"
        },
        "rdb-backup-frequency": {
          "type": "string",
          "description": "Specifies the frequency for creating rdb backup in minutes. Valid values: (15, 30, 60, 360, 720, 1440)",
          "x-ms-client-name": "rdbBackupFrequency"
        },
        "rdb-backup-max-snapshot-count": {
          "type": "string",
          "description": "Specifies the maximum number of snapshots for rdb backup",
          "x-ms-client-name": "rdbBackupMaxSnapshotCount"
        },
        "rdb-storage-connection-string": {
          "type": "string",
          "description": "The storage account connection string for storing rdb file",
          "x-ms-client-name": "rdbStorageConnectionString"
        },
        "aof-backup-enabled": {
          "type": "string",
          "description": "Specifies whether the aof backup is enabled",
          "x-ms-client-name": "aofBackupEnabled"
        },
        "aof-storage-connection-string-0": {
          "type": "string",
          "description": "First storage account connection string",
          "x-ms-client-name": "aofStorageConnectionString0"
        },
        "aof-storage-connection-string-1": {
          "type": "string",
          "description": "Second storage account connection string",
          "x-ms-client-name": "aofStorageConnectionString1"
        },
        "maxfragmentationmemory-reserved": {
          "type": "string",
          "description": "Value in megabytes reserved for fragmentation per shard",
          "x-ms-client-name": "maxfragmentationmemoryReserved"
        },
        "maxmemory-policy": {
          "type": "string",
          "description": "The eviction strategy used when your data won't fit within its memory limit.",
          "x-ms-client-name": "maxmemoryPolicy"
        },
        "maxmemory-reserved": {
          "type": "string",
          "description": "Value in megabytes reserved for non-cache usage per shard e.g. failover.",
          "x-ms-client-name": "maxmemoryReserved"
        },
        "maxmemory-delta": {
          "type": "string",
          "description": "Value in megabytes reserved for non-cache usage per shard e.g. failover.",
          "x-ms-client-name": "maxmemoryDelta"
        },
        "maxclients": {
          "type": "string",
          "description": "The max clients config",
          "readOnly": true
        },
        "notify-keyspace-events": {
          "type": "string",
          "description": "The keyspace events which should be monitored.",
          "x-ms-client-name": "notifyKeyspaceEvents"
        },
        "preferred-data-archive-auth-method": {
          "type": "string",
          "description": "Preferred auth method to communicate to storage account used for data archive, specify SAS or ManagedIdentity, default value is SAS",
          "readOnly": true,
          "x-ms-client-name": "preferredDataArchiveAuthMethod"
        },
        "preferred-data-persistence-auth-method": {
          "type": "string",
          "description": "Preferred auth method to communicate to storage account used for data persistence, specify SAS or ManagedIdentity, default value is SAS",
          "x-ms-client-name": "preferredDataPersistenceAuthMethod"
        },
        "zonal-configuration": {
          "type": "string",
          "description": "Zonal Configuration",
          "readOnly": true,
          "x-ms-client-name": "zonalConfiguration"
        },
        "authnotrequired": {
          "type": "string",
          "description": "Specifies whether the authentication is disabled. Setting this property is highly discouraged from security point of view; you should never disable authentication using this property!"
        },
        "storage-subscription-id": {
          "type": "string",
          "description": "SubscriptionId of the storage account for persistence (aof/rdb) using ManagedIdentity.",
          "x-ms-client-name": "storageSubscriptionId"
        },
        "aad-enabled": {
          "type": "string",
          "description": "Specifies whether AAD based authentication has been enabled or disabled for the cache",
          "x-ms-client-name": "aadEnabled"
        }
      },
      "additionalProperties": {}
    },
    "RedisCreateParameters": {
      "type": "object",
      "description": "Parameters supplied to the Create Redis operation.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/RedisCreateProperties",
          "description": "Redis cache properties.",
          "x-ms-client-flatten": true
        },
        "zones": {
          "type": "array",
          "description": "A list of availability zones denoting where the resource needs to come from.",
          "items": {
            "type": "string"
          }
        },
        "location": {
          "type": "string",
          "description": "The geo-location where the resource lives",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "identity": {
          "$ref": "../../../../../common-types/resource-management/v4/managedidentity.json#/definitions/ManagedServiceIdentity",
          "description": "The identity of the resource."
        }
      },
      "required": [
        "properties",
        "location"
      ]
    },
    "RedisCreateProperties": {
      "type": "object",
      "description": "Properties supplied to Create Redis operation.",
      "properties": {
        "sku": {
          "$ref": "#/definitions/Sku",
          "description": "The SKU of the Redis cache to deploy."
        },
        "subnetId": {
          "type": "string",
          "description": "The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1",
          "pattern": "^/subscriptions/[^/]*/resourceGroups/[^/]*/providers/Microsoft.(ClassicNetwork|Network)/virtualNetworks/[^/]*/subnets/[^/]*$"
        },
        "staticIP": {
          "type": "string",
          "description": "Static IP address. Optionally, may be specified when deploying a Redis cache inside an existing Azure Virtual Network; auto assigned by default.",
          "pattern": "^\\d+\\.\\d+\\.\\d+\\.\\d+$",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "required": [
        "sku"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/RedisCommonProperties"
        }
      ],
      "x-ms-external": true
    },
    "RedisFirewallRule": {
      "type": "object",
      "description": "A firewall rule on a redis cache has a name, and describes a contiguous range of IP addresses permitted to connect",
      "properties": {
        "properties": {
          "$ref": "#/definitions/RedisFirewallRuleProperties",
          "description": "redis cache firewall rule properties",
          "x-ms-client-flatten": true
        }
      },
      "required": [
        "properties"
      ],
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v4/types.json#/definitions/ProxyResource"
        }
      ]
    },
    "RedisFirewallRuleCreateParameters": {
      "type": "object",
      "description": "Parameters required for creating a firewall rule on redis cache. (Note, you can just use the FirewallRule type instead now.)",
      "allOf": [
        {
          "$ref": "#/definitions/RedisFirewallRule"
        }
      ]
    },
    "RedisFirewallRuleListResult": {
      "type": "object",
      "description": "The response of a RedisFirewallRule list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The RedisFirewallRule items on this page",
          "items": {
            "$ref": "#/definitions/RedisFirewallRule"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "RedisFirewallRuleProperties": {
      "type": "object",
      "description": "Specifies a range of IP addresses permitted to connect to the cache",
      "properties": {
        "startIP": {
          "type": "string",
          "description": "lowest IP address included in the range"
        },
        "endIP": {
          "type": "string",
          "description": "highest IP address included in the range"
        }
      },
      "required": [
        "startIP",
        "endIP"
      ]
    },
    "RedisForceRebootResponse": {
      "type": "object",
      "description": "Response to force reboot for Redis cache.",
      "properties": {
        "message": {
          "type": "string",
          "description": "Status message",
          "readOnly": true
        }
      }
    },
    "RedisInstanceDetails": {
      "type": "object",
      "description": "Details of single instance of redis.",
      "properties": {
        "sslPort": {
          "type": "integer",
          "format": "int32",
          "description": "Redis instance SSL port.",
          "readOnly": true
        },
        "nonSslPort": {
          "type": "integer",
          "format": "int32",
          "description": "If enableNonSslPort is true, provides Redis instance Non-SSL port.",
          "readOnly": true
        },
        "zone": {
          "type": "string",
          "description": "If the Cache uses availability zones, specifies availability zone where this instance is located.",
          "readOnly": true
        },
        "shardId": {
          "type": "integer",
          "format": "int32",
          "description": "If clustering is enabled, the Shard ID of Redis Instance",
          "readOnly": true
        },
        "isMaster": {
          "type": "boolean",
          "description": "Specifies whether the instance is a primary node.",
          "readOnly": true
        },
        "isPrimary": {
          "type": "boolean",
          "description": "Specifies whether the instance is a primary node.",
          "readOnly": true
        }
      }
    },
    "RedisKeyType": {
      "type": "string",
      "description": "The Redis access key to regenerate.",
      "enum": [
        "Primary",
        "Secondary"
      ],
      "x-ms-enum": {
        "name": "RedisKeyType",
        "modelAsString": false,
        "values": [
          {
            "name": "Primary",
            "value": "Primary",
            "description": "The primary access key"
          },
          {
            "name": "Secondary",
            "value": "Secondary",
            "description": "The secondary access key"
          }
        ]
      }
    },
    "RedisLinkedServer": {
      "type": "object",
      "description": "Linked server Id",
      "properties": {
        "id": {
          "type": "string",
          "description": "Linked server Id.",
          "readOnly": true
        }
      }
    },
    "RedisLinkedServerCreateParameters": {
      "type": "object",
      "description": "Parameter required for creating a linked server to redis cache.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/RedisLinkedServerCreateProperties",
          "description": "Properties required to create a linked server.",
          "x-ms-client-flatten": true
        }
      },
      "required": [
        "properties"
      ]
    },
    "RedisLinkedServerCreateProperties": {
      "type": "object",
      "description": "Create properties for a linked server",
      "properties": {
        "linkedRedisCacheId": {
          "type": "string",
          "description": "Fully qualified resourceId of the linked redis cache."
        },
        "linkedRedisCacheLocation": {
          "type": "string",
          "description": "Location of the linked redis cache.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "serverRole": {
          "$ref": "#/definitions/ReplicationRole",
          "description": "Role of the linked server."
        },
        "geoReplicatedPrimaryHostName": {
          "type": "string",
          "description": "The unchanging DNS name which will always point to current geo-primary cache among the linked redis caches for seamless Geo Failover experience.",
          "readOnly": true
        },
        "primaryHostName": {
          "type": "string",
          "description": "The changing DNS name that resolves to the current geo-primary cache among the linked redis caches before or after the Geo Failover.",
          "readOnly": true
        }
      },
      "required": [
        "linkedRedisCacheId",
        "linkedRedisCacheLocation",
        "serverRole"
      ]
    },
    "RedisLinkedServerProperties": {
      "type": "object",
      "description": "Properties of a linked server to be returned in get/put response",
      "properties": {
        "provisioningState": {
          "type": "string",
          "description": "Terminal state of the link between primary and secondary redis cache.",
          "readOnly": true
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/RedisLinkedServerCreateProperties"
        }
      ]
    },
    "RedisLinkedServerWithProperties": {
      "type": "object",
      "description": "Response to put/get linked server (with properties) for Redis cache.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/RedisLinkedServerProperties",
          "description": "Properties of the linked server.",
          "x-ms-client-flatten": true
        }
      },
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v4/types.json#/definitions/ProxyResource"
        }
      ]
    },
    "RedisLinkedServerWithPropertiesList": {
      "type": "object",
      "description": "List of linked servers (with properties) of a Redis cache.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The RedisLinkedServerWithProperties items on this page",
          "items": {
            "$ref": "#/definitions/RedisLinkedServerWithProperties"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "RedisListResult": {
      "type": "object",
      "description": "The response of list Redis operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The RedisResource items on this page",
          "items": {
            "$ref": "#/definitions/RedisResource"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "RedisPatchSchedule": {
      "type": "object",
      "description": "Response to put/get patch schedules for Redis cache.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/ScheduleEntries",
          "description": "List of patch schedules for a Redis cache.",
          "x-ms-client-flatten": true
        },
        "location": {
          "type": "string",
          "description": "The geo-location where the resource lives",
          "readOnly": true
        }
      },
      "required": [
        "properties"
      ],
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v4/types.json#/definitions/ProxyResource"
        }
      ]
    },
    "RedisPatchScheduleListResult": {
      "type": "object",
      "description": "The response of a RedisPatchSchedule list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The RedisPatchSchedule items on this page",
          "items": {
            "$ref": "#/definitions/RedisPatchSchedule"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "RedisProperties": {
      "type": "object",
      "description": "Properties of the redis cache.",
      "properties": {
        "provisioningState": {
          "$ref": "#/definitions/ProvisioningState",
          "description": "Redis instance provisioning status.",
          "readOnly": true
        },
        "hostName": {
          "type": "string",
          "description": "Redis host name.",
          "readOnly": true
        },
        "port": {
          "type": "integer",
          "format": "int32",
          "description": "Redis non-SSL port.",
          "readOnly": true
        },
        "sslPort": {
          "type": "integer",
          "format": "int32",
          "description": "Redis SSL port.",
          "readOnly": true
        },
        "accessKeys": {
          "$ref": "#/definitions/RedisAccessKeys",
          "description": "The keys of the Redis cache - not set if this object is not the response to Create or Update redis cache",
          "readOnly": true
        },
        "linkedServers": {
          "type": "array",
          "description": "List of the linked servers associated with the cache",
          "items": {
            "$ref": "#/definitions/RedisLinkedServer"
          },
          "readOnly": true
        },
        "instances": {
          "type": "array",
          "description": "List of the Redis instances associated with the cache",
          "items": {
            "$ref": "#/definitions/RedisInstanceDetails"
          },
          "readOnly": true,
          "x-ms-identifiers": [
            "shardId"
          ]
        },
        "privateEndpointConnections": {
          "type": "array",
          "description": "List of private endpoint connection associated with the specified redis cache",
          "items": {
            "$ref": "../../../../../common-types/resource-management/v4/privatelinks.json#/definitions/PrivateEndpointConnection"
          },
          "readOnly": true
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/RedisCreateProperties"
        }
      ],
      "x-ms-external": true
    },
    "RedisRebootParameters": {
      "type": "object",
      "description": "Specifies which Redis node(s) to reboot.",
      "properties": {
        "rebootType": {
          "$ref": "#/definitions/RebootType",
          "description": "Which Redis node(s) to reboot. Depending on this value data loss is possible."
        },
        "shardId": {
          "type": "integer",
          "format": "int32",
          "description": "If clustering is enabled, the ID of the shard to be rebooted."
        },
        "ports": {
          "type": "array",
          "description": "A list of redis instances to reboot, specified by per-instance SSL ports or non-SSL ports.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        }
      }
    },
    "RedisRegenerateKeyParameters": {
      "type": "object",
      "description": "Specifies which Redis access keys to reset.",
      "properties": {
        "keyType": {
          "$ref": "#/definitions/RedisKeyType",
          "description": "The Redis access key to regenerate."
        }
      },
      "required": [
        "keyType"
      ]
    },
    "RedisResource": {
      "type": "object",
      "description": "A single Redis item in List or Get Operation.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/RedisProperties",
          "description": "Redis cache properties.",
          "x-ms-client-flatten": true
        },
        "zones": {
          "type": "array",
          "description": "The availability zones.",
          "items": {
            "type": "string"
          }
        },
        "identity": {
          "$ref": "../../../../../common-types/resource-management/v4/managedidentity.json#/definitions/ManagedServiceIdentity",
          "description": "The managed service identities assigned to this resource."
        }
      },
      "required": [
        "properties"
      ],
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v4/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "RedisUpdateParameters": {
      "type": "object",
      "description": "Parameters supplied to the Update Redis operation.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/RedisUpdateProperties",
          "description": "Redis cache properties.",
          "x-ms-client-flatten": true
        },
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "identity": {
          "$ref": "../../../../../common-types/resource-management/v4/managedidentity.json#/definitions/ManagedServiceIdentity",
          "description": "The identity of the resource."
        }
      }
    },
    "RedisUpdateProperties": {
      "type": "object",
      "description": "Patchable properties of the redis cache.",
      "properties": {
        "sku": {
          "$ref": "#/definitions/Sku",
          "description": "The SKU of the Redis cache to deploy."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/RedisCommonProperties"
        }
      ],
      "x-ms-external": true
    },
    "ReplicationRole": {
      "type": "string",
      "description": "Role of the linked server.",
      "enum": [
        "Primary",
        "Secondary"
      ],
      "x-ms-enum": {
        "name": "ReplicationRole",
        "modelAsString": false,
        "values": [
          {
            "name": "Primary",
            "value": "Primary",
            "description": "The linked server is in the writable primary role"
          },
          {
            "name": "Secondary",
            "value": "Secondary",
            "description": "The linked server is in the read-only replica role"
          }
        ]
      }
    },
    "ScheduleEntries": {
      "type": "object",
      "description": "List of patch schedules for a Redis cache.",
      "properties": {
        "scheduleEntries": {
          "type": "array",
          "description": "List of patch schedules for a Redis cache.",
          "items": {
            "$ref": "#/definitions/ScheduleEntry"
          },
          "x-ms-client-name": "ScheduleEntries",
          "x-ms-identifiers": []
        }
      },
      "required": [
        "scheduleEntries"
      ]
    },
    "ScheduleEntry": {
      "type": "object",
      "description": "Patch schedule entry for a Premium Redis Cache.",
      "properties": {
        "dayOfWeek": {
          "$ref": "#/definitions/DayOfWeek",
          "description": "Day of the week when a cache can be patched."
        },
        "startHourUtc": {
          "type": "integer",
          "format": "int32",
          "description": "Start hour after which cache patching can start."
        },
        "maintenanceWindow": {
          "type": "string",
          "format": "duration",
          "description": "ISO8601 timespan specifying how much time cache patching can take."
        }
      },
      "required": [
        "dayOfWeek",
        "startHourUtc"
      ]
    },
    "Sku": {
      "type": "object",
      "description": "SKU parameters supplied to the create Redis operation.",
      "properties": {
        "name": {
          "$ref": "#/definitions/SkuName",
          "description": "The type of Redis cache to deploy. Valid values: (Basic, Standard, Premium)"
        },
        "family": {
          "$ref": "#/definitions/SkuFamily",
          "description": "The SKU family to use. Valid values: (C, P). (C = Basic/Standard, P = Premium)."
        },
        "capacity": {
          "type": "integer",
          "format": "int32",
          "description": "The size of the Redis cache to deploy. Valid values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium) family (1, 2, 3, 4)."
        }
      },
      "required": [
        "name",
        "family",
        "capacity"
      ]
    },
    "SkuFamily": {
      "type": "string",
      "description": "The SKU family to use. Valid values: (C, P). (C = Basic/Standard, P = Premium).",
      "enum": [
        "C",
        "P"
      ],
      "x-ms-enum": {
        "name": "SkuFamily",
        "modelAsString": true,
        "values": [
          {
            "name": "C",
            "value": "C",
            "description": "The SKU family to use - must be 'C' for Basic/Standard SKU redis caches."
          },
          {
            "name": "P",
            "value": "P",
            "description": "The SKU family to use - must be 'P' for Premium SKU redis caches."
          }
        ]
      }
    },
    "SkuName": {
      "type": "string",
      "description": "The type of Redis cache to deploy. Valid values: (Basic, Standard, Premium)",
      "enum": [
        "Basic",
        "Standard",
        "Premium"
      ],
      "x-ms-enum": {
        "name": "SkuName",
        "modelAsString": true,
        "values": [
          {
            "name": "Basic",
            "value": "Basic",
            "description": "The well known 'Basic' SKU for Azure Cache for Redis. Basic SKU does not have an availability SLA."
          },
          {
            "name": "Standard",
            "value": "Standard",
            "description": "The well known 'Standard' SKU for Azure Cache for Redis. Standard SKU has an availability SLA."
          },
          {
            "name": "Premium",
            "value": "Premium",
            "description": "The well known 'Premium' SKU for Azure Cache for Redis. Premium SKU has an availability SLA, and higher performance tiers and more features compared with Standard SKU."
          }
        ]
      }
    },
    "TlsVersion": {
      "type": "string",
      "description": "Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2')",
      "enum": [
        "1.0",
        "1.1",
        "1.2"
      ],
      "x-ms-enum": {
        "name": "TlsVersion",
        "modelAsString": true,
        "values": [
          {
            "name": "1.0",
            "value": "1.0",
            "description": "TLS protocol version 1.0 -- deprecated for security reasons. Do not use this value for new caches."
          },
          {
            "name": "1.1",
            "value": "1.1",
            "description": "TLS protocol version 1.1 -- deprecated for security reasons. Do not use this value for new caches."
          },
          {
            "name": "1.2",
            "value": "1.2",
            "description": "TLS protocol version 1.2 -- use this value, or higher, for new caches. Or do not specify, so that your cache uses the recommended default value"
          }
        ]
      }
    },
    "UpdateChannel": {
      "type": "string",
      "description": "Optional: Specifies the update channel for the monthly Redis updates your Redis Cache will receive. Caches using 'Preview' update channel get latest Redis updates at least 4 weeks ahead of 'Stable' channel caches. Default value is 'Stable'.",
      "enum": [
        "Stable",
        "Preview"
      ],
      "x-ms-enum": {
        "name": "UpdateChannel",
        "modelAsString": true,
        "values": [
          {
            "name": "Stable",
            "value": "Stable",
            "description": "Stable channel receives updates, which may include important security and stability updates, later than Preview channel."
          },
          {
            "name": "Preview",
            "value": "Preview",
            "description": "Preview channel normally receives updates before Stable channel, and is the recommended channel for non-production workloads."
          }
        ]
      }
    },
    "UpgradeNotification": {
      "type": "object",
      "description": "Properties of upgrade notification.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of upgrade notification.",
          "readOnly": true
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when upgrade notification occurred.",
          "readOnly": true
        },
        "upsellNotification": {
          "type": "object",
          "description": "Details about this upgrade notification",
          "additionalProperties": {
            "type": "string"
          },
          "readOnly": true
        }
      }
    },
    "ZonalAllocationPolicy": {
      "type": "string",
      "description": "Optional: Specifies how availability zones are allocated to the Redis cache. 'Automatic' enables zone redundancy and Azure will automatically select zones based on regional availability and capacity. 'UserDefined' will select availability zones passed in by you using the 'zones' parameter. 'NoZones' will produce a non-zonal cache. If 'zonalAllocationPolicy' is not passed, it will be set to 'UserDefined' when zones are passed in, otherwise, it will be set to 'Automatic' in regions where zones are supported and 'NoZones' in regions where zones are not supported.",
      "enum": [
        "Automatic",
        "UserDefined",
        "NoZones"
      ],
      "x-ms-enum": {
        "name": "ZonalAllocationPolicy",
        "modelAsString": true,
        "values": [
          {
            "name": "Automatic",
            "value": "Automatic",
            "description": "The zones for the cache will be selected automatically based on availability and capacity."
          },
          {
            "name": "UserDefined",
            "value": "UserDefined",
            "description": "UserDefined means the zones for the cache are manually configured using the 'zones' property, and can not be automatically selected."
          },
          {
            "name": "NoZones",
            "value": "NoZones",
            "description": "The cache will not use multiple availability zones."
          }
        ]
      }
    }
  },
  "parameters": {}
}
