import "@typespec/rest";
import "@typespec/http";
import "@azure-tools/typespec-azure-resource-manager";

using TypeSpec.Rest;
using TypeSpec.Http;
using Azure.ResourceManager;
using Azure.ResourceManager.Foundations;

namespace Microsoft.ScVmm;

interface Operations extends Azure.ResourceManager.Operations {}

/**
 * Defines the different types of VM guest operating systems.
 */
enum OsType {
  Windows,
  Linux,
  Other,
}

/**
 * Gets or sets a value indicating whether to enable processor compatibility mode for live migration of VMs.
 */
enum LimitCpuForMigration {
  `false`,
  `true`,
}

/**
 * Gets or sets a value indicating whether to enable dynamic memory or not.
 */
enum DynamicMemoryEnabled {
  `false`,
  `true`,
}

/**
 * Allocation method.
 */
enum AllocationMethod {
  Dynamic,
  Static,
}

/**
 * Gets or sets a value indicating diff disk.
 */
enum CreateDiffDisk {
  `false`,
  `true`,
}

/**
 * Gets or sets a value indicating whether the vm template is customizable or not.
 */
enum IsCustomizable {
  `false`,
  `true`,
}

/**
 * The inventory type.
 */
enum InventoryType {
  Cloud,
  VirtualNetwork,
  VirtualMachineTemplate,
  VirtualMachine,
}

/**
 * Defines the resource properties.
 */
model VMMServerProperties {
  /**
   * Credentials to connect to VMMServer.
   */
  credentials?: VMMServerPropertiesCredentials;

  /**
   * Fqdn is the hostname/ip of the vmmServer.
   */
  @minLength(1)
  fqdn: string;

  /**
   * Port is the port on which the vmmServer is listening.
   */
  @maxValue(65535)
  @minValue(1)
  port?: int32;

  /**
   * Gets or sets the connection status to the vmmServer.
   */
  @visibility("read")
  connectionStatus?: string;

  /**
   * Gets or sets any error message if connection to vmmServer is having any issue.
   */
  @visibility("read")
  errorMessage?: string;

  /**
   * Unique ID of vmmServer.
   */
  @visibility("read")
  uuid?: string;

  /**
   * Version is the version of the vmmSever.
   */
  @visibility("read")
  version?: string;

  /**
   * Gets or sets the provisioning state.
   */
  @visibility("read")
  provisioningState?: string;
}

/**
 * Credentials to connect to VMMServer.
 */
model VMMServerPropertiesCredentials {
  /**
   * Username to use to connect to VMMServer.
   */
  username?: string;

  /**
   * Credentials to use to connect to VMMServer.
   */
  @visibility("create", "update")
  password?: string;
}

/**
 * The extended location.
 */
model ExtendedLocation {
  /**
   * The extended location type.
   */
  type?: string;

  /**
   * The extended location name.
   */
  name?: string;
}

/**
 * Error definition.
 */
model ErrorDefinition {
  /**
   * Service specific error code which serves as the substatus for the HTTP error code.
   */
  @visibility("read")
  code?: string;

  /**
   * Description of the error.
   */
  @visibility("read")
  message?: string;

  /**
   * Internal error details.
   */
  @visibility("read")
  details?: ErrorDefinition[];
}

/**
 * Object containing tags updates for patch operations.
 */
model ResourcePatch {
  /**
   * Resource tags.
   */
  tags?: Record<string>;
}

/**
 * Results of the request to list operations.
 */
model ResourceProviderOperation {
  /**
   * Indicates whether the operation applies to data-plane.
   */
  isDataAction?: string;

  /**
   * Operation name, in format of {provider}/{resource}/{operation}.
   */
  name?: string;

  /**
   * Display metadata associated with the operation.
   */
  display?: ResourceProviderOperationDisplay;
}

/**
 * Display metadata associated with the operation.
 */
model ResourceProviderOperationDisplay {
  /**
   * The resource provider.
   */
  provider?: string;

  /**
   * Resource on which the operation is performed.
   */
  resource?: string;

  /**
   * Type of operation: read, write, delete, etc.
   */
  operation?: string;

  /**
   * Description of this operation.
   */
  description?: string;
}

/**
 * Defines the resource properties.
 */
model CloudProperties {
  /**
   * Gets or sets the inventory Item ID for the resource.
   */
  inventoryItemId?: string;

  /**
   * Unique ID of the cloud.
   */
  @minLength(1)
  uuid?: string;

  /**
   * ARM Id of the vmmServer resource in which this resource resides.
   */
  vmmServerId?: string;

  /**
   * Name of the cloud in VMMServer.
   */
  @visibility("read")
  cloudName?: string;

  /**
   * Capacity of the cloud.
   */
  @visibility("read")
  cloudCapacity?: CloudCapacity;

  /**
   * List of QoS policies available for the cloud.
   */
  @visibility("read")
  storageQoSPolicies?: StorageQoSPolicy[];

  /**
   * Gets or sets the provisioning state.
   */
  @visibility("read")
  provisioningState?: string;
}

/**
 * Cloud Capacity model
 */
model CloudCapacity {
  /**
   * CPUCount specifies the maximum number of CPUs that can be allocated in the cloud.
   */
  cpuCount?: int64;

  /**
   * MemoryMB specifies a memory usage limit in megabytes.
   */
  memoryMB?: int64;

  /**
   * VMCount gives the max number of VMs that can be deployed in the cloud.
   */
  vmCount?: int64;
}

/**
 * The StorageQoSPolicy definition.
 */
model StorageQoSPolicy {
  /**
   * The name of the policy.
   */
  name?: string;

  /**
   * The ID of the QoS policy.
   */
  id?: string;

  /**
   * The maximum IO operations per second.
   */
  iopsMaximum?: int64;

  /**
   * The minimum IO operations per second.
   */
  iopsMinimum?: int64;

  /**
   * The Bandwidth Limit for internet traffic.
   */
  bandwidthLimit?: int64;

  /**
   * The underlying policy.
   */
  policyId?: string;
}

/**
 * Defines the resource properties.
 */
model VirtualNetworkProperties {
  /**
   * Gets or sets the inventory Item ID for the resource.
   */
  inventoryItemId?: string;

  /**
   * Unique ID of the virtual network.
   */
  @minLength(1)
  uuid?: string;

  /**
   * ARM Id of the vmmServer resource in which this resource resides.
   */
  vmmServerId?: string;

  /**
   * Name of the virtual network in vmmServer.
   */
  @visibility("read")
  networkName?: string;

  /**
   * Gets or sets the provisioning state.
   */
  @visibility("read")
  provisioningState?: string;
}

/**
 * Defines the resource properties.
 */
model VirtualMachineProperties {
  /**
   * Gets or sets the inventory Item ID for the resource.
   */
  inventoryItemId?: string;

  /**
   * ARM Id of the vmmServer resource in which this resource resides.
   */
  vmmServerId?: string;

  /**
   * ARM Id of the cloud resource to use for deploying the vm.
   */
  cloudId?: string;

  /**
   * ARM Id of the template resource to use for deploying the vm.
   */
  templateId?: string;

  /**
   * Type of checkpoint supported for the vm.
   */
  checkpointType?: string;

  /**
   * Checkpoints in the vm.
   */
  checkpoints?: Checkpoint[];

  /**
   * Availability Sets in vm.
   */
  availabilitySets?: AvailabilitySetListItem[];

  /**
   * OS properties.
   */
  osProfile?: OsProfile;

  /**
   * Hardware properties.
   */
  hardwareProfile?: HardwareProfile;

  /**
   * Network properties.
   */
  networkProfile?: NetworkProfile;

  /**
   * Storage properties.
   */
  storageProfile?: StorageProfile;

  /**
   * VMName is the name of VM on the SCVMM server.
   */
  @minLength(1)
  vmName?: string;

  /**
   * Unique ID of the virtual machine.
   */
  uuid?: string;

  /**
   * Gets or sets the generation for the vm.
   */
  generation?: int32;

  /**
   * Gets the power state of the virtual machine.
   */
  @visibility("read")
  powerState?: string;

  /**
   * Gets or sets the provisioning state.
   */
  @visibility("read")
  provisioningState?: string;
}

/**
 * Defines the resource properties.
 */
model Checkpoint {
  /**
   * Gets ID of parent of the checkpoint.
   */
  parentCheckpointID?: string;

  /**
   * Gets ID of the checkpoint.
   */
  checkpointID?: string;

  /**
   * Gets name of the checkpoint.
   */
  name?: string;

  /**
   * Gets description of the checkpoint.
   */
  description?: string;
}

/**
 * Availability Set model
 */
model AvailabilitySetListItem {
  /**
   * Gets the ARM Id of the microsoft.scvmm/availabilitySets resource.
   */
  id?: string;

  /**
   * Gets or sets the name of the availability set.
   */
  name?: string;
}

/**
 * Defines the resource properties.
 */
model OsProfile {
  /**
   * Admin password of the virtual machine.
   */
  @visibility("create", "update")
  adminPassword?: string;

  /**
   * Gets or sets computer name.
   */
  computerName?: string;

  /**
   * Gets or sets the type of the os.
   */
  @visibility("read")
  osType?: OsType;

  /**
   * Gets or sets os name.
   */
  @visibility("read")
  osName?: string;
}

/**
 * Defines the resource properties.
 */
model HardwareProfile {
  /**
   * MemoryMB is the size of a virtual machine's memory, in MB.
   */
  memoryMB?: int32;

  /**
   * Gets or sets the number of vCPUs for the vm.
   */
  cpuCount?: int32;

  /**
   * Gets or sets a value indicating whether to enable processor compatibility mode for live migration of VMs.
   */
  limitCpuForMigration?: LimitCpuForMigration;

  /**
   * Gets or sets a value indicating whether to enable dynamic memory or not.
   */
  dynamicMemoryEnabled?: DynamicMemoryEnabled;

  /**
   * Gets or sets the max dynamic memory for the vm.
   */
  dynamicMemoryMaxMB?: int32;

  /**
   * Gets or sets the min dynamic memory for the vm.
   */
  dynamicMemoryMinMB?: int32;

  /**
   * Gets highly available property.
   */
  isHighlyAvailable?: string;
}

/**
 * Defines the resource properties.
 */
model NetworkProfile {
  /**
   * Gets or sets the list of network interfaces associated with the virtual machine.
   */
  networkInterfaces?: NetworkInterfaces[];
}

/**
 * Network Interface model
 */
model NetworkInterfaces {
  /**
   * Gets or sets the name of the network interface.
   */
  name?: string;

  /**
   * Gets the display name of the network interface as shown in the vmmServer. This is the fallback label for a NIC when the name is not set.
   */
  @visibility("read")
  displayName?: string;

  /**
   * Gets or sets the nic ipv4 addresses.
   */
  @visibility("read")
  ipv4Addresses?: string[];

  /**
   * Gets or sets the nic ipv6 addresses.
   */
  @visibility("read")
  ipv6Addresses?: string[];

  /**
   * Gets or sets the nic MAC address.
   */
  macAddress?: string;

  /**
   * Gets or sets the ARM Id of the Microsoft.ScVmm/virtualNetwork resource to connect the nic.
   */
  virtualNetworkId?: string;

  /**
   * Gets or sets the name of the virtual network in vmmServer that the nic is connected to.
   */
  @visibility("read")
  networkName?: string;

  /**
   * Gets or sets the ipv4 address type.
   */
  ipv4AddressType?: AllocationMethod;

  /**
   * Gets or sets the ipv6 address type.
   */
  ipv6AddressType?: AllocationMethod;

  /**
   * Gets or sets the mac address type.
   */
  macAddressType?: AllocationMethod;

  /**
   * Gets or sets the nic id.
   */
  nicId?: string;
}

/**
 * Defines the resource properties.
 */
model StorageProfile {
  /**
   * Gets or sets the list of virtual disks associated with the virtual machine.
   */
  disks?: VirtualDisk[];
}

/**
 * Virtual disk model
 */
model VirtualDisk {
  /**
   * Gets or sets the name of the disk.
   */
  name?: string;

  /**
   * Gets the display name of the virtual disk as shown in the vmmServer. This is the fallback label for a disk when the name is not set.
   */
  @visibility("read")
  displayName?: string;

  /**
   * Gets or sets the disk id.
   */
  diskId?: string;

  /**
   * Gets or sets the disk total size.
   */
  diskSizeGB?: int32;

  /**
   * Gets or sets the max disk size.
   */
  @visibility("read")
  maxDiskSizeGB?: int32;

  /**
   * Gets or sets the disk bus.
   */
  bus?: int32;

  /**
   * Gets or sets the disk lun.
   */
  lun?: int32;

  /**
   * Gets or sets the disk bus type.
   */
  busType?: string;

  /**
   * Gets or sets the disk vhd type.
   */
  vhdType?: string;

  /**
   * Gets or sets the disk volume type.
   */
  @visibility("read")
  volumeType?: string;

  /**
   * Gets the disk vhd format type.
   */
  @visibility("read")
  vhdFormatType?: string;

  /**
   * Gets or sets the disk id in the template.
   */
  templateDiskId?: string;

  /**
   * The QoS policy for the disk.
   */
  storageQoSPolicy?: StorageQoSPolicyDetails;

  /**
   * Gets or sets a value indicating diff disk.
   */
  createDiffDisk?: CreateDiffDisk;
}

/**
 * The StorageQoSPolicyDetails definition.
 */
model StorageQoSPolicyDetails {
  /**
   * The name of the policy.
   */
  name?: string;

  /**
   * The ID of the QoS policy.
   */
  id?: string;
}

/**
 * Defines the virtualMachineUpdate.
 */
model VirtualMachineUpdate {
  /**
   * Defines the resource properties.
   */
  properties?: VirtualMachineUpdateProperties;

  /**
   * Gets or sets the Resource tags.
   */
  tags?: Record<string>;
}

/**
 * Defines the resource properties.
 */
model VirtualMachineUpdateProperties {
  /**
   * Defines the resource properties.
   */
  hardwareProfile?: HardwareProfileUpdate;

  /**
   * Defines the resource properties.
   */
  storageProfile?: StorageProfileUpdate;

  /**
   * Defines the resource properties.
   */
  networkProfile?: NetworkProfileUpdate;

  /**
   * Availability Sets in vm.
   */
  availabilitySets?: AvailabilitySetListItem[];
}

/**
 * Defines the resource properties.
 */
model HardwareProfileUpdate {
  /**
   * MemoryMB is the size of a virtual machine's memory, in MB.
   */
  memoryMB?: int32;

  /**
   * Gets or sets the number of vCPUs for the vm.
   */
  cpuCount?: int32;

  /**
   * Gets or sets a value indicating whether to enable processor compatibility mode for live migration of VMs.
   */
  limitCpuForMigration?: LimitCpuForMigration;

  /**
   * Gets or sets a value indicating whether to enable dynamic memory or not.
   */
  dynamicMemoryEnabled?: DynamicMemoryEnabled;

  /**
   * Gets or sets the max dynamic memory for the vm.
   */
  dynamicMemoryMaxMB?: int32;

  /**
   * Gets or sets the min dynamic memory for the vm.
   */
  dynamicMemoryMinMB?: int32;
}

/**
 * Defines the resource properties.
 */
model StorageProfileUpdate {
  /**
   * Gets or sets the list of virtual disks associated with the virtual machine.
   */
  disks?: VirtualDiskUpdate[];
}

/**
 * Virtual disk model
 */
model VirtualDiskUpdate {
  /**
   * Gets or sets the name of the disk.
   */
  name?: string;

  /**
   * Gets or sets the disk id.
   */
  diskId?: string;

  /**
   * Gets or sets the disk total size.
   */
  diskSizeGB?: int32;

  /**
   * Gets or sets the disk bus.
   */
  bus?: int32;

  /**
   * Gets or sets the disk lun.
   */
  lun?: int32;

  /**
   * Gets or sets the disk bus type.
   */
  busType?: string;

  /**
   * Gets or sets the disk vhd type.
   */
  vhdType?: string;

  /**
   * The QoS policy for the disk.
   */
  storageQoSPolicy?: StorageQoSPolicyDetails;
}

/**
 * Defines the resource properties.
 */
model NetworkProfileUpdate {
  /**
   * Gets or sets the list of network interfaces associated with the virtual machine.
   */
  networkInterfaces?: NetworkInterfacesUpdate[];
}

/**
 * Network Interface model
 */
model NetworkInterfacesUpdate {
  /**
   * Gets or sets the name of the network interface.
   */
  name?: string;

  /**
   * Gets or sets the nic MAC address.
   */
  macAddress?: string;

  /**
   * Gets or sets the ARM Id of the Microsoft.ScVmm/virtualNetwork resource to connect the nic.
   */
  virtualNetworkId?: string;

  /**
   * Gets or sets the ipv4 address type.
   */
  ipv4AddressType?: AllocationMethod;

  /**
   * Gets or sets the ipv6 address type.
   */
  ipv6AddressType?: AllocationMethod;

  /**
   * Gets or sets the mac address type.
   */
  macAddressType?: AllocationMethod;

  /**
   * Gets or sets the nic id.
   */
  nicId?: string;
}

/**
 * Defines the stop action properties.
 */
model StopVirtualMachineOptions {
  /**
   * Gets or sets a value indicating whether to request non-graceful VM shutdown. True value for this flag indicates non-graceful shutdown whereas false indicates otherwise. Defaults to false.
   */
  skipShutdown?: boolean;
}

/**
 * Defines the create checkpoint action properties.
 */
model VirtualMachineCreateCheckpoint {
  /**
   * Name of the checkpoint.
   */
  name?: string;

  /**
   * Description of the checkpoint.
   */
  description?: string;
}

/**
 * Defines the delete checkpoint action properties.
 */
model VirtualMachineDeleteCheckpoint {
  /**
   * ID of the checkpoint to be deleted.
   */
  id?: string;
}

/**
 * Defines the restore checkpoint action properties.
 */
model VirtualMachineRestoreCheckpoint {
  /**
   * ID of the checkpoint to be restored to.
   */
  id?: string;
}

/**
 * Defines the resource properties.
 */
model VirtualMachineTemplateProperties {
  /**
   * Gets or sets the inventory Item ID for the resource.
   */
  inventoryItemId?: string;

  /**
   * Unique ID of the virtual machine template.
   */
  @minLength(1)
  uuid?: string;

  /**
   * ARM Id of the vmmServer resource in which this resource resides.
   */
  vmmServerId?: string;

  /**
   * Gets or sets the type of the os.
   */
  @visibility("read")
  osType?: OsType;

  /**
   * Gets or sets os name.
   */
  @visibility("read")
  osName?: string;

  /**
   * Gets or sets computer name.
   */
  @visibility("read")
  computerName?: string;

  /**
   * MemoryMB is the desired size of a virtual machine's memory, in MB.
   */
  @visibility("read")
  memoryMB?: int32;

  /**
   * Gets or sets the desired number of vCPUs for the vm.
   */
  @visibility("read")
  cpuCount?: int32;

  /**
   * Gets or sets a value indicating whether to enable processor compatibility mode for live migration of VMs.
   */
  @visibility("read")
  limitCpuForMigration?: LimitCpuForMigration;

  /**
   * Gets or sets a value indicating whether to enable dynamic memory or not.
   */
  @visibility("read")
  dynamicMemoryEnabled?: DynamicMemoryEnabled;

  /**
   * Gets or sets a value indicating whether the vm template is customizable or not.
   */
  @visibility("read")
  isCustomizable?: IsCustomizable;

  /**
   * Gets or sets the max dynamic memory for the vm.
   */
  @visibility("read")
  dynamicMemoryMaxMB?: int32;

  /**
   * Gets or sets the min dynamic memory for the vm.
   */
  @visibility("read")
  dynamicMemoryMinMB?: int32;

  /**
   * Gets highly available property.
   */
  @visibility("read")
  isHighlyAvailable?: string;

  /**
   * Gets or sets the generation for the vm.
   */
  @visibility("read")
  generation?: int32;

  /**
   * Gets or sets the network interfaces of the template.
   */
  @visibility("read")
  networkInterfaces?: NetworkInterfaces[];

  /**
   * Gets or sets the disks of the template.
   */
  @visibility("read")
  disks?: VirtualDisk[];

  /**
   * Gets or sets the provisioning state.
   */
  @visibility("read")
  provisioningState?: string;
}

/**
 * Defines the resource properties.
 */
model AvailabilitySetProperties {
  /**
   * Name of the availability set.
   */
  @minLength(1)
  availabilitySetName?: string;

  /**
   * ARM Id of the vmmServer resource in which this resource resides.
   */
  vmmServerId?: string;

  /**
   * Gets or sets the provisioning state.
   */
  @visibility("read")
  provisioningState?: string;
}

/**
 * Defines the resource properties.
 */
@discriminator("inventoryType")
model InventoryItemProperties {
  /**
   * Gets the tracked resource id corresponding to the inventory resource.
   */
  @visibility("read")
  managedResourceId?: string;

  /**
   * Gets the UUID (which is assigned by VMM) for the inventory item.
   */
  @visibility("read")
  uuid?: string;

  /**
   * Gets the Managed Object name in VMM for the inventory item.
   */
  @visibility("read")
  inventoryItemName?: string;

  /**
   * Gets the provisioning state.
   */
  @visibility("read")
  provisioningState?: string;
}

/**
 * Common fields that are returned in the response for all Azure Resource Manager resources
 */
model Resource {
  /**
   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   */
  @visibility("read")
  id?: string;

  /**
   * The name of the resource
   */
  @visibility("read")
  name?: string;

  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   */
  @visibility("read")
  type?: string;
}

/**
 * Defines the resource properties.
 */
model InventoryItemDetails {
  /**
   * Gets or sets the inventory Item ID for the resource.
   */
  inventoryItemId?: string;

  /**
   * Gets or sets the Managed Object name in VMM for the resource.
   */
  inventoryItemName?: string;
}

/**
 * The Cloud inventory item.
 */
model CloudInventoryItem extends InventoryItemProperties {
  /**
   * They inventory type.
   */
  inventoryType: "Cloud";
}

/**
 * The Virtual network inventory item.
 */
model VirtualNetworkInventoryItem extends InventoryItemProperties {
  /**
   * They inventory type.
   */
  inventoryType: "VirtualNetwork";
}

/**
 * The Virtual machine template inventory item.
 */
model VirtualMachineTemplateInventoryItem extends InventoryItemProperties {
  /**
   * Gets or sets the desired number of vCPUs for the vm.
   */
  @visibility("read")
  cpuCount?: int32;

  /**
   * MemoryMB is the desired size of a virtual machine's memory, in MB.
   */
  @visibility("read")
  memoryMB?: int32;

  /**
   * Gets or sets the type of the os.
   */
  @visibility("read")
  osType?: OsType;

  /**
   * Gets or sets os name.
   */
  @visibility("read")
  osName?: string;

  /**
   * They inventory type.
   */
  inventoryType: "VirtualMachineTemplate";
}

/**
 * The Virtual machine inventory item.
 */
model VirtualMachineInventoryItem extends InventoryItemProperties {
  /**
   * Gets or sets the type of the os.
   */
  @visibility("read")
  osType?: OsType;

  /**
   * Gets or sets os name.
   */
  @visibility("read")
  osName?: string;

  /**
   * Gets the power state of the virtual machine.
   */
  @visibility("read")
  powerState?: string;

  /**
   * Gets or sets the nic ip addresses.
   */
  ipAddresses?: string[];

  /**
   * Cloud inventory resource details where the VM is present.
   */
  cloud?: InventoryItemDetails;

  /**
   * They inventory type.
   */
  inventoryType: "VirtualMachine";
}
