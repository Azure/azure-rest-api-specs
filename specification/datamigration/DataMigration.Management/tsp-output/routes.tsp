import "@azure-tools/typespec-azure-core";
import "@typespec/rest";
import "./models.tsp";

using TypeSpec.Rest;
using TypeSpec.Http;

namespace Azure.ResourceManager.DataMigration;

interface ResourceSkusOperations {
  @summary("Get supported SKUs")
  @doc("The skus action returns the list of SKUs that DMS supports.")
  @route("/subscriptions/{subscriptionId}/providers/Microsoft.DataMigration/skus")
  @get
  ListSkus is Azure.Core.Foundations.Operation<
    {
      @doc("Subscription ID that identifies an Azure subscription.")
      @path
      subscriptionId: string;
    },
    ResourceSkusResult
  >;
}

interface ServiceTasksOperations {
  @summary("Get service level tasks for a service")
  @doc("The services resource is the top-level resource that represents the Database Migration Service. This method returns a list of service level tasks owned by a service resource. Some tasks may have a status of Unknown, which indicates that an error occurred while querying the status of that task.")
  @route("/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/serviceTasks")
  @get
  List is Azure.Core.Foundations.Operation<
    {
      @doc("Subscription ID that identifies an Azure subscription.")
      @path
      subscriptionId: string;

      @doc("Name of the resource group")
      @path
      groupName: string;

      @doc("Name of the service")
      @path
      serviceName: string;

      @doc("Filter tasks by task type")
      @query("taskType")
      taskType?: string;
    },
    TaskList
  >;

  @summary("Create or update service task")
  @doc("The service tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. The PUT method creates a new service task or updates an existing one, although since service tasks have no mutable custom properties, there is little reason to update an existing one.")
  @route("/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/serviceTasks/{taskName}")
  @put
  CreateOrUpdate is Azure.Core.Foundations.Operation<
    {
      @doc("Subscription ID that identifies an Azure subscription.")
      @path
      subscriptionId: string;

      @doc("Name of the resource group")
      @path
      groupName: string;

      @doc("Name of the service")
      @path
      serviceName: string;

      @doc("Name of the Task")
      @path
      taskName: string;

      @doc("Information about the task")
      @body
      parameters: ProjectTask;
    },
    ProjectTask
  >;

  @summary("Get service task information")
  @doc("The service tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. The GET method retrieves information about a service task.")
  @route("/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/serviceTasks/{taskName}")
  @get
  Get is Azure.Core.Foundations.Operation<
    {
      @doc("Subscription ID that identifies an Azure subscription.")
      @path
      subscriptionId: string;

      @doc("Name of the resource group")
      @path
      groupName: string;

      @doc("Name of the service")
      @path
      serviceName: string;

      @doc("Name of the Task")
      @path
      taskName: string;

      @doc("Expand the response")
      @query("$expand")
      $expand?: string;
    },
    ProjectTask
  >;

  @summary("Delete service task")
  @doc("The service tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. The DELETE method deletes a service task, canceling it first if it's running.")
  @route("/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/serviceTasks/{taskName}")
  @delete
  Delete is Azure.Core.Foundations.Operation<
    {
      @doc("Subscription ID that identifies an Azure subscription.")
      @path
      subscriptionId: string;

      @doc("Name of the resource group")
      @path
      groupName: string;

      @doc("Name of the service")
      @path
      serviceName: string;

      @doc("Name of the Task")
      @path
      taskName: string;

      @doc("Delete the resource even if it contains running tasks")
      @query("deleteRunningTasks")
      deleteRunningTasks?: boolean;
    },
    void
  >;

  @summary("Create or update service task")
  @doc("The service tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. The PATCH method updates an existing service task, but since service tasks have no mutable custom properties, there is little reason to do so.")
  @route("/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/serviceTasks/{taskName}")
  @patch
  Update is Azure.Core.Foundations.Operation<
    {
      @doc("Subscription ID that identifies an Azure subscription.")
      @path
      subscriptionId: string;

      @doc("Name of the resource group")
      @path
      groupName: string;

      @doc("Name of the service")
      @path
      serviceName: string;

      @doc("Name of the Task")
      @path
      taskName: string;

      @doc("Information about the task")
      @body
      parameters: ProjectTask;
    },
    ProjectTask
  >;

  @summary("Cancel a service task")
  @doc("The service tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. This method cancels a service task if it's currently queued or running.")
  @route("/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/serviceTasks/{taskName}/cancel")
  @post
  Cancel is Azure.Core.Foundations.Operation<
    {
      @doc("Subscription ID that identifies an Azure subscription.")
      @path
      subscriptionId: string;

      @doc("Name of the resource group")
      @path
      groupName: string;

      @doc("Name of the service")
      @path
      serviceName: string;

      @doc("Name of the Task")
      @path
      taskName: string;
    },
    ProjectTask
  >;
}

interface UsagesOperations {
  @summary("Get resource quotas and usage information")
  @doc("This method returns region-specific quotas and resource usage information for the Database Migration Service.")
  @route("/subscriptions/{subscriptionId}/providers/Microsoft.DataMigration/locations/{location}/usages")
  @get
  List is Azure.Core.Foundations.Operation<
    {
      @doc("Subscription ID that identifies an Azure subscription.")
      @path
      subscriptionId: string;

      @doc("The Azure region of the operation")
      @path
      location: string;
    },
    QuotaList
  >;
}
