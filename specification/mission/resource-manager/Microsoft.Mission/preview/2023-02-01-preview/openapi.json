{
  "swagger": "2.0",
  "info": {
    "title": "Microsoft Mission",
    "version": "2023-02-01-preview",
    "description": "Microsoft Mission Resource Provider management API.",
    "x-typespec-generated": [
      {
        "emitter": "@azure-tools/typespec-autorest"
      }
    ]
  },
  "schemes": [
    "https"
  ],
  "host": "management.azure.com",
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ],
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "description": "Azure Active Directory OAuth2 Flow.",
      "flow": "implicit",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      }
    }
  },
  "tags": [
    {
      "name": "Operations"
    },
    {
      "name": "Workload"
    },
    {
      "name": "Endpoint"
    },
    {
      "name": "VirtualEnclave"
    },
    {
      "name": "Community"
    },
    {
      "name": "Catalog"
    },
    {
      "name": "InternalConnections"
    },
    {
      "name": "ExternalConnections"
    }
  ],
  "paths": {
    "/providers/Microsoft.Mission/operations": {
      "get": {
        "tags": [
          "Operations"
        ],
        "operationId": "Operations_List",
        "description": "List the operations for the provider",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/OperationListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "Operations_List": {
            "$ref": "./examples/Operations_List.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.Mission/catalogs": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "operationId": "Catalog_ListBySubscription",
        "description": "List CatalogResource resources by subscription ID",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/CatalogResourceListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "Catalog_ListBySubscription": {
            "$ref": "./examples/Catalog_ListBySubscription.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.Mission/communities": {
      "get": {
        "tags": [
          "Community"
        ],
        "operationId": "Community_ListBySubscription",
        "description": "List CommunityResource resources by subscription ID",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/CommunityResourceListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "Community_ListBySubscription": {
            "$ref": "./examples/Community_ListBySubscription.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.Mission/externalConnections": {
      "get": {
        "tags": [
          "ExternalConnections"
        ],
        "operationId": "ExternalConnections_ListBySubscription",
        "description": "List ExternalConnection resources by subscription ID",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/ExternalConnectionListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "ExternalConnections_ListBySubscription": {
            "$ref": "./examples/ExternalConnections_ListBySubscription.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.Mission/internalConnections": {
      "get": {
        "tags": [
          "InternalConnections"
        ],
        "operationId": "InternalConnections_ListBySubscription",
        "description": "List InternalConnection resources by subscription ID",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/InternalConnectionListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "InternalConnections_ListBySubscription": {
            "$ref": "./examples/InternalConnections_ListBySubscription.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.Mission/virtualEnclaves": {
      "get": {
        "tags": [
          "VirtualEnclave"
        ],
        "operationId": "VirtualEnclave_ListBySubscription",
        "description": "List EnclaveResource resources by subscription ID",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/EnclaveResourceListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "VirtualEnclave_ListBySubscription": {
            "$ref": "./examples/VirtualEnclave_ListBySubscription.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/endpoints": {
      "get": {
        "tags": [
          "Endpoint"
        ],
        "operationId": "Endpoint_ListBySubscription",
        "description": "List EndpointResource resources by subscription ID",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "name": "virtualEnclaveName",
            "in": "path",
            "required": true,
            "description": "The name of the enclaveResource Resource",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/EndpointResourceListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "Endpoint_ListBySubscription": {
            "$ref": "./examples/Endpoint_ListBySubscription.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/workloads": {
      "get": {
        "tags": [
          "Workload"
        ],
        "operationId": "Workload_ListBySubscription",
        "description": "List WorkloadResource resources by subscription ID",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "name": "virtualEnclaveName",
            "in": "path",
            "required": true,
            "description": "The name of the enclaveResource Resource",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/WorkloadResourceListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "Workload_ListBySubscription": {
            "$ref": "./examples/Workload_ListBySubscription.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/catalogs": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "operationId": "Catalog_ListByResourceGroup",
        "description": "List CatalogResource resources by resource group",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/CatalogResourceListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "Catalog_ListByResourceGroup": {
            "$ref": "./examples/Catalog_ListByResourceGroup.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/catalogs/{catalogName}": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "operationId": "Catalog_Get",
        "description": "Get a CatalogResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "catalogName",
            "in": "path",
            "required": true,
            "description": "The name of the catalogResource Resource",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/CatalogResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Catalog_Get": {
            "$ref": "./examples/Catalog_Get.json"
          }
        }
      },
      "put": {
        "tags": [
          "Catalog"
        ],
        "operationId": "Catalog_CreateOrUpdate",
        "description": "Create a CatalogResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "catalogName",
            "in": "path",
            "required": true,
            "description": "The name of the catalogResource Resource",
            "type": "string"
          },
          {
            "name": "resource",
            "in": "body",
            "required": true,
            "description": "Resource create parameters.",
            "schema": {
              "$ref": "#/definitions/CatalogResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/CatalogResource"
            }
          },
          "201": {
            "description": "ARM create operation completed successfully.",
            "headers": {
              "Retry-After": {
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status.",
                "type": "integer",
                "format": "int32"
              }
            },
            "schema": {
              "$ref": "#/definitions/CatalogResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Catalog_CreateOrUpdate": {
            "$ref": "./examples/Catalog_CreateOrUpdate.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      },
      "patch": {
        "tags": [
          "Catalog"
        ],
        "operationId": "Catalog_Update",
        "description": "Update a CatalogResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "catalogName",
            "in": "path",
            "required": true,
            "description": "The name of the catalogResource Resource",
            "type": "string"
          },
          {
            "name": "properties",
            "in": "body",
            "required": true,
            "description": "The resource properties to be updated.",
            "schema": {
              "$ref": "#/definitions/CatalogResourceUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/CatalogResource"
            }
          },
          "202": {
            "description": "Resource update request accepted.",
            "headers": {
              "Retry-After": {
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status.",
                "type": "integer",
                "format": "int32"
              },
              "Location": {
                "description": "The Location header contains the URL where the status of the long running operation can be checked.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Catalog_Update": {
            "$ref": "./examples/Catalog_Update.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      },
      "delete": {
        "tags": [
          "Catalog"
        ],
        "operationId": "Catalog_Delete",
        "description": "Delete a CatalogResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "catalogName",
            "in": "path",
            "required": true,
            "description": "The name of the catalogResource Resource",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Retry-After": {
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status.",
                "type": "integer",
                "format": "int32"
              },
              "Location": {
                "description": "The Location header contains the URL where the status of the long running operation can be checked.",
                "type": "string"
              }
            }
          },
          "204": {
            "description": "Resource deleted successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Catalog_Delete": {
            "$ref": "./examples/Catalog_Delete.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/communities": {
      "get": {
        "tags": [
          "Community"
        ],
        "operationId": "Community_ListByResourceGroup",
        "description": "List CommunityResource resources by resource group",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/CommunityResourceListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "Community_ListByResourceGroup": {
            "$ref": "./examples/Community_ListByResourceGroup.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/communities/{communityName}": {
      "get": {
        "tags": [
          "Community"
        ],
        "operationId": "Community_Get",
        "description": "Get a CommunityResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "communityName",
            "in": "path",
            "required": true,
            "description": "The name of the communityResource Resource",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/CommunityResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Community_Get": {
            "$ref": "./examples/Community_Get.json"
          }
        }
      },
      "put": {
        "tags": [
          "Community"
        ],
        "operationId": "Community_CreateOrUpdate",
        "description": "Create a CommunityResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "communityName",
            "in": "path",
            "required": true,
            "description": "The name of the communityResource Resource",
            "type": "string"
          },
          {
            "name": "resource",
            "in": "body",
            "required": true,
            "description": "Resource create parameters.",
            "schema": {
              "$ref": "#/definitions/CommunityResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/CommunityResource"
            }
          },
          "201": {
            "description": "ARM create operation completed successfully.",
            "headers": {
              "Retry-After": {
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status.",
                "type": "integer",
                "format": "int32"
              }
            },
            "schema": {
              "$ref": "#/definitions/CommunityResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Community_CreateOrUpdate": {
            "$ref": "./examples/Community_CreateOrUpdate.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      },
      "patch": {
        "tags": [
          "Community"
        ],
        "operationId": "Community_Update",
        "description": "Update a CommunityResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "communityName",
            "in": "path",
            "required": true,
            "description": "The name of the communityResource Resource",
            "type": "string"
          },
          {
            "name": "properties",
            "in": "body",
            "required": true,
            "description": "The resource properties to be updated.",
            "schema": {
              "$ref": "#/definitions/CommunityResourceUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/CommunityResource"
            }
          },
          "202": {
            "description": "Resource update request accepted.",
            "headers": {
              "Retry-After": {
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status.",
                "type": "integer",
                "format": "int32"
              },
              "Location": {
                "description": "The Location header contains the URL where the status of the long running operation can be checked.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Community_Update": {
            "$ref": "./examples/Community_Update.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      },
      "delete": {
        "tags": [
          "Community"
        ],
        "operationId": "Community_Delete",
        "description": "Delete a CommunityResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "communityName",
            "in": "path",
            "required": true,
            "description": "The name of the communityResource Resource",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Retry-After": {
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status.",
                "type": "integer",
                "format": "int32"
              },
              "Location": {
                "description": "The Location header contains the URL where the status of the long running operation can be checked.",
                "type": "string"
              }
            }
          },
          "204": {
            "description": "Resource deleted successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Community_Delete": {
            "$ref": "./examples/Community_Delete.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/externalConnections": {
      "get": {
        "tags": [
          "ExternalConnections"
        ],
        "operationId": "ExternalConnections_ListByResourceGroup",
        "description": "List ExternalConnection resources by resource group",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/ExternalConnectionListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "ExternalConnections_ListByResourceGroup": {
            "$ref": "./examples/ExternalConnections_ListByResourceGroup.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/externalConnections/{externalConnectionName}": {
      "get": {
        "tags": [
          "ExternalConnections"
        ],
        "operationId": "ExternalConnections_Get",
        "description": "Get a ExternalConnection",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "externalConnectionName",
            "in": "path",
            "required": true,
            "description": "The name of the external connection.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/ExternalConnection"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "ExternalConnections_Get": {
            "$ref": "./examples/ExternalConnections_Get.json"
          }
        }
      },
      "put": {
        "tags": [
          "ExternalConnections"
        ],
        "operationId": "ExternalConnections_CreateOrUpdate",
        "description": "Create a ExternalConnection",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "externalConnectionName",
            "in": "path",
            "required": true,
            "description": "The name of the external connection.",
            "type": "string"
          },
          {
            "name": "resource",
            "in": "body",
            "required": true,
            "description": "Resource create parameters.",
            "schema": {
              "$ref": "#/definitions/ExternalConnection"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/ExternalConnection"
            }
          },
          "201": {
            "description": "ARM create operation completed successfully.",
            "headers": {
              "Retry-After": {
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status.",
                "type": "integer",
                "format": "int32"
              }
            },
            "schema": {
              "$ref": "#/definitions/ExternalConnection"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "ExternalConnections_CreateOrUpdate": {
            "$ref": "./examples/ExternalConnections_CreateOrUpdate.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      },
      "patch": {
        "tags": [
          "ExternalConnections"
        ],
        "operationId": "ExternalConnections_Update",
        "description": "Update a ExternalConnection",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "externalConnectionName",
            "in": "path",
            "required": true,
            "description": "The name of the external connection.",
            "type": "string"
          },
          {
            "name": "properties",
            "in": "body",
            "required": true,
            "description": "The resource properties to be updated.",
            "schema": {
              "$ref": "#/definitions/ExternalConnectionUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/ExternalConnection"
            }
          },
          "202": {
            "description": "Resource update request accepted.",
            "headers": {
              "Retry-After": {
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status.",
                "type": "integer",
                "format": "int32"
              },
              "Location": {
                "description": "The Location header contains the URL where the status of the long running operation can be checked.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "ExternalConnections_Update": {
            "$ref": "./examples/ExternalConnections_Update.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      },
      "delete": {
        "tags": [
          "ExternalConnections"
        ],
        "operationId": "ExternalConnections_Delete",
        "description": "Delete a ExternalConnection",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "externalConnectionName",
            "in": "path",
            "required": true,
            "description": "The name of the external connection.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Retry-After": {
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status.",
                "type": "integer",
                "format": "int32"
              },
              "Location": {
                "description": "The Location header contains the URL where the status of the long running operation can be checked.",
                "type": "string"
              }
            }
          },
          "204": {
            "description": "Resource deleted successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "ExternalConnections_Delete": {
            "$ref": "./examples/ExternalConnections_Delete.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/internalConnections": {
      "get": {
        "tags": [
          "InternalConnections"
        ],
        "operationId": "InternalConnections_ListByResourceGroup",
        "description": "List InternalConnection resources by resource group",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/InternalConnectionListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "InternalConnections_ListByResourceGroup": {
            "$ref": "./examples/InternalConnections_ListByResourceGroup.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/internalConnections/{internalConnectionName}": {
      "get": {
        "tags": [
          "InternalConnections"
        ],
        "operationId": "InternalConnections_Get",
        "description": "Get a InternalConnection",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "internalConnectionName",
            "in": "path",
            "required": true,
            "description": "The name of the internal connection.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/InternalConnection"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "InternalConnections_Get": {
            "$ref": "./examples/InternalConnections_Get.json"
          }
        }
      },
      "put": {
        "tags": [
          "InternalConnections"
        ],
        "operationId": "InternalConnections_CreateOrUpdate",
        "description": "Create a InternalConnection",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "internalConnectionName",
            "in": "path",
            "required": true,
            "description": "The name of the internal connection.",
            "type": "string"
          },
          {
            "name": "resource",
            "in": "body",
            "required": true,
            "description": "Resource create parameters.",
            "schema": {
              "$ref": "#/definitions/InternalConnection"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/InternalConnection"
            }
          },
          "201": {
            "description": "ARM create operation completed successfully.",
            "headers": {
              "Retry-After": {
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status.",
                "type": "integer",
                "format": "int32"
              }
            },
            "schema": {
              "$ref": "#/definitions/InternalConnection"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "InternalConnections_CreateOrUpdate": {
            "$ref": "./examples/InternalConnections_CreateOrUpdate.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      },
      "patch": {
        "tags": [
          "InternalConnections"
        ],
        "operationId": "InternalConnections_Update",
        "description": "Update a InternalConnection",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "internalConnectionName",
            "in": "path",
            "required": true,
            "description": "The name of the internal connection.",
            "type": "string"
          },
          {
            "name": "properties",
            "in": "body",
            "required": true,
            "description": "The resource properties to be updated.",
            "schema": {
              "$ref": "#/definitions/InternalConnectionUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/InternalConnection"
            }
          },
          "202": {
            "description": "Resource update request accepted.",
            "headers": {
              "Retry-After": {
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status.",
                "type": "integer",
                "format": "int32"
              },
              "Location": {
                "description": "The Location header contains the URL where the status of the long running operation can be checked.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "InternalConnections_Update": {
            "$ref": "./examples/InternalConnections_Update.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      },
      "delete": {
        "tags": [
          "InternalConnections"
        ],
        "operationId": "InternalConnections_Delete",
        "description": "Delete a InternalConnection",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "internalConnectionName",
            "in": "path",
            "required": true,
            "description": "The name of the internal connection.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Retry-After": {
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status.",
                "type": "integer",
                "format": "int32"
              },
              "Location": {
                "description": "The Location header contains the URL where the status of the long running operation can be checked.",
                "type": "string"
              }
            }
          },
          "204": {
            "description": "Resource deleted successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "InternalConnections_Delete": {
            "$ref": "./examples/InternalConnections_Delete.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves": {
      "get": {
        "tags": [
          "VirtualEnclave"
        ],
        "operationId": "VirtualEnclave_ListByResourceGroup",
        "description": "List EnclaveResource resources by resource group",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/EnclaveResourceListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "VirtualEnclave_ListByResourceGroup": {
            "$ref": "./examples/VirtualEnclave_ListByResourceGroup.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}": {
      "get": {
        "tags": [
          "VirtualEnclave"
        ],
        "operationId": "VirtualEnclave_Get",
        "description": "Get a EnclaveResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "virtualEnclaveName",
            "in": "path",
            "required": true,
            "description": "The name of the enclaveResource Resource",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/EnclaveResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "VirtualEnclave_Get": {
            "$ref": "./examples/VirtualEnclave_Get.json"
          }
        }
      },
      "put": {
        "tags": [
          "VirtualEnclave"
        ],
        "operationId": "VirtualEnclave_CreateOrUpdate",
        "description": "Create a EnclaveResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "virtualEnclaveName",
            "in": "path",
            "required": true,
            "description": "The name of the enclaveResource Resource",
            "type": "string"
          },
          {
            "name": "resource",
            "in": "body",
            "required": true,
            "description": "Resource create parameters.",
            "schema": {
              "$ref": "#/definitions/EnclaveResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/EnclaveResource"
            }
          },
          "201": {
            "description": "ARM create operation completed successfully.",
            "headers": {
              "Retry-After": {
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status.",
                "type": "integer",
                "format": "int32"
              }
            },
            "schema": {
              "$ref": "#/definitions/EnclaveResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "VirtualEnclave_CreateOrUpdate": {
            "$ref": "./examples/VirtualEnclave_CreateOrUpdate.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      },
      "patch": {
        "tags": [
          "VirtualEnclave"
        ],
        "operationId": "VirtualEnclave_Update",
        "description": "Update a EnclaveResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "virtualEnclaveName",
            "in": "path",
            "required": true,
            "description": "The name of the enclaveResource Resource",
            "type": "string"
          },
          {
            "name": "properties",
            "in": "body",
            "required": true,
            "description": "The resource properties to be updated.",
            "schema": {
              "$ref": "#/definitions/EnclaveResourceUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/EnclaveResource"
            }
          },
          "202": {
            "description": "Resource update request accepted.",
            "headers": {
              "Retry-After": {
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status.",
                "type": "integer",
                "format": "int32"
              },
              "Location": {
                "description": "The Location header contains the URL where the status of the long running operation can be checked.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "VirtualEnclave_Update": {
            "$ref": "./examples/VirtualEnclave_Update.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      },
      "delete": {
        "tags": [
          "VirtualEnclave"
        ],
        "operationId": "VirtualEnclave_Delete",
        "description": "Delete a EnclaveResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "virtualEnclaveName",
            "in": "path",
            "required": true,
            "description": "The name of the enclaveResource Resource",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Retry-After": {
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status.",
                "type": "integer",
                "format": "int32"
              },
              "Location": {
                "description": "The Location header contains the URL where the status of the long running operation can be checked.",
                "type": "string"
              }
            }
          },
          "204": {
            "description": "Resource deleted successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "VirtualEnclave_Delete": {
            "$ref": "./examples/VirtualEnclave_Delete.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/endpoints": {
      "get": {
        "tags": [
          "Endpoint"
        ],
        "operationId": "Endpoint_ListByEnclaveResource",
        "description": "List EndpointResource resources by EnclaveResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "virtualEnclaveName",
            "in": "path",
            "required": true,
            "description": "The name of the enclaveResource Resource",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/EndpointResourceListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "Endpoint_ListByEnclaveResource": {
            "$ref": "./examples/Endpoint_ListByEnclaveResource.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/endpoints/{endpointName}": {
      "get": {
        "tags": [
          "Endpoint"
        ],
        "operationId": "Endpoint_Get",
        "description": "Get a EndpointResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "virtualEnclaveName",
            "in": "path",
            "required": true,
            "description": "The name of the enclaveResource Resource",
            "type": "string"
          },
          {
            "name": "endpointName",
            "in": "path",
            "required": true,
            "description": "The name of the endpointResource Resource",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/EndpointResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Endpoint_Get": {
            "$ref": "./examples/Endpoint_Get.json"
          }
        }
      },
      "put": {
        "tags": [
          "Endpoint"
        ],
        "operationId": "Endpoint_CreateOrUpdate",
        "description": "Create a EndpointResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "virtualEnclaveName",
            "in": "path",
            "required": true,
            "description": "The name of the enclaveResource Resource",
            "type": "string"
          },
          {
            "name": "endpointName",
            "in": "path",
            "required": true,
            "description": "The name of the endpointResource Resource",
            "type": "string"
          },
          {
            "name": "resource",
            "in": "body",
            "required": true,
            "description": "Resource create parameters.",
            "schema": {
              "$ref": "#/definitions/EndpointResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/EndpointResource"
            }
          },
          "201": {
            "description": "ARM create operation completed successfully.",
            "headers": {
              "Retry-After": {
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status.",
                "type": "integer",
                "format": "int32"
              }
            },
            "schema": {
              "$ref": "#/definitions/EndpointResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Endpoint_CreateOrUpdate": {
            "$ref": "./examples/Endpoint_CreateOrUpdate.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      },
      "patch": {
        "tags": [
          "Endpoint"
        ],
        "operationId": "Endpoint_Update",
        "description": "Update a EndpointResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "virtualEnclaveName",
            "in": "path",
            "required": true,
            "description": "The name of the enclaveResource Resource",
            "type": "string"
          },
          {
            "name": "endpointName",
            "in": "path",
            "required": true,
            "description": "The name of the endpointResource Resource",
            "type": "string"
          },
          {
            "name": "properties",
            "in": "body",
            "required": true,
            "description": "The resource properties to be updated.",
            "schema": {
              "$ref": "#/definitions/EndpointResourceUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/EndpointResource"
            }
          },
          "202": {
            "description": "Resource update request accepted.",
            "headers": {
              "Retry-After": {
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status.",
                "type": "integer",
                "format": "int32"
              },
              "Location": {
                "description": "The Location header contains the URL where the status of the long running operation can be checked.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Endpoint_Update": {
            "$ref": "./examples/Endpoint_Update.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      },
      "delete": {
        "tags": [
          "Endpoint"
        ],
        "operationId": "Endpoint_Delete",
        "description": "Delete a EndpointResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "virtualEnclaveName",
            "in": "path",
            "required": true,
            "description": "The name of the enclaveResource Resource",
            "type": "string"
          },
          {
            "name": "endpointName",
            "in": "path",
            "required": true,
            "description": "The name of the endpointResource Resource",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Retry-After": {
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status.",
                "type": "integer",
                "format": "int32"
              },
              "Location": {
                "description": "The Location header contains the URL where the status of the long running operation can be checked.",
                "type": "string"
              }
            }
          },
          "204": {
            "description": "Resource deleted successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Endpoint_Delete": {
            "$ref": "./examples/Endpoint_Delete.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/workloads": {
      "get": {
        "tags": [
          "Workload"
        ],
        "operationId": "Workload_ListByEnclaveResource",
        "description": "List WorkloadResource resources by EnclaveResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "virtualEnclaveName",
            "in": "path",
            "required": true,
            "description": "The name of the enclaveResource Resource",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/WorkloadResourceListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "Workload_ListByEnclaveResource": {
            "$ref": "./examples/Workload_ListByEnclaveResource.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/workloads/{workloadName}": {
      "get": {
        "tags": [
          "Workload"
        ],
        "operationId": "Workload_Get",
        "description": "Get a WorkloadResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "virtualEnclaveName",
            "in": "path",
            "required": true,
            "description": "The name of the enclaveResource Resource",
            "type": "string"
          },
          {
            "name": "workloadName",
            "in": "path",
            "required": true,
            "description": "The name of the workloadResource Resource",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/WorkloadResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Workload_Get": {
            "$ref": "./examples/Workload_Get.json"
          }
        }
      },
      "put": {
        "tags": [
          "Workload"
        ],
        "operationId": "Workload_CreateOrUpdate",
        "description": "Create a WorkloadResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "virtualEnclaveName",
            "in": "path",
            "required": true,
            "description": "The name of the enclaveResource Resource",
            "type": "string"
          },
          {
            "name": "workloadName",
            "in": "path",
            "required": true,
            "description": "The name of the workloadResource Resource",
            "type": "string"
          },
          {
            "name": "resource",
            "in": "body",
            "required": true,
            "description": "Resource create parameters.",
            "schema": {
              "$ref": "#/definitions/WorkloadResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/WorkloadResource"
            }
          },
          "201": {
            "description": "ARM create operation completed successfully.",
            "headers": {
              "Retry-After": {
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status.",
                "type": "integer",
                "format": "int32"
              }
            },
            "schema": {
              "$ref": "#/definitions/WorkloadResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Workload_CreateOrUpdate": {
            "$ref": "./examples/Workload_CreateOrUpdate.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      },
      "patch": {
        "tags": [
          "Workload"
        ],
        "operationId": "Workload_Update",
        "description": "Update a WorkloadResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "virtualEnclaveName",
            "in": "path",
            "required": true,
            "description": "The name of the enclaveResource Resource",
            "type": "string"
          },
          {
            "name": "workloadName",
            "in": "path",
            "required": true,
            "description": "The name of the workloadResource Resource",
            "type": "string"
          },
          {
            "name": "properties",
            "in": "body",
            "required": true,
            "description": "The resource properties to be updated.",
            "schema": {
              "$ref": "#/definitions/WorkloadResourceUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/WorkloadResource"
            }
          },
          "202": {
            "description": "Resource update request accepted.",
            "headers": {
              "Retry-After": {
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status.",
                "type": "integer",
                "format": "int32"
              },
              "Location": {
                "description": "The Location header contains the URL where the status of the long running operation can be checked.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Workload_Update": {
            "$ref": "./examples/Workload_Update.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      },
      "delete": {
        "tags": [
          "Workload"
        ],
        "operationId": "Workload_Delete",
        "description": "Delete a WorkloadResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "virtualEnclaveName",
            "in": "path",
            "required": true,
            "description": "The name of the enclaveResource Resource",
            "type": "string"
          },
          {
            "name": "workloadName",
            "in": "path",
            "required": true,
            "description": "The name of the workloadResource Resource",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Retry-After": {
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status.",
                "type": "integer",
                "format": "int32"
              },
              "Location": {
                "description": "The Location header contains the URL where the status of the long running operation can be checked.",
                "type": "string"
              }
            }
          },
          "204": {
            "description": "Resource deleted successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Workload_Delete": {
            "$ref": "./examples/Workload_Delete.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    }
  },
  "definitions": {
    "BlobCatalog": {
      "type": "object",
      "properties": {
        "uri": {
          "type": "string",
          "description": "Catalog Storage's URI."
        }
      },
      "description": "Blob Catalog type.",
      "allOf": [
        {
          "$ref": "#/definitions/CatalogBase"
        }
      ]
    },
    "Catalog": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/BlobCatalog"
        }
      ],
      "x-nullable": false
    },
    "CatalogBase": {
      "type": "object",
      "properties": {
        "catalogStorageType": {
          "$ref": "#/definitions/CatalogStorageType",
          "description": "Catalog's storage type."
        }
      },
      "description": "Base type for catalog."
    },
    "CatalogProperties": {
      "type": "object",
      "properties": {
        "provisioningState": {
          "$ref": "#/definitions/ProvisioningState",
          "description": "Provisioning State.",
          "readOnly": true
        },
        "ownedBy": {
          "type": "string",
          "description": "Owning Resource of the Catalog."
        },
        "communityResourceId": {
          "type": "string",
          "description": "Community Resource Id."
        },
        "enclaveResourceId": {
          "type": "string",
          "description": "Virtual Enclave Resource Id."
        },
        "catalog": {
          "$ref": "#/definitions/Catalog",
          "description": "Catalog Connection properties."
        },
        "packageCollection": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Package"
          },
          "x-typespec-name": "Package[]",
          "description": "List of packages for catalog."
        }
      },
      "description": "Catalog properties"
    },
    "CatalogResource": {
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/CatalogProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "description": "Catalog Model Resource",
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "CatalogResourceListResult": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CatalogResource"
          },
          "x-typespec-name": "CatalogResource[]",
          "description": "The CatalogResource items on this page"
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items",
          "x-typespec-name": "TypeSpec.Rest.ResourceLocation"
        }
      },
      "description": "The response of a CatalogResource list operation.",
      "required": [
        "value"
      ]
    },
    "CatalogResourceUpdate": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-typespec-name": "Record<string>",
          "description": "Resource tags."
        },
        "properties": {
          "$ref": "#/definitions/CatalogResourceUpdateProperties",
          "x-ms-client-flatten": true
        }
      },
      "description": "The type used for update operations of the CatalogResource."
    },
    "CatalogResourceUpdateProperties": {
      "type": "object",
      "properties": {
        "ownedBy": {
          "type": "string",
          "description": "Owning Resource of the Catalog."
        },
        "communityResourceId": {
          "type": "string",
          "description": "Community Resource Id."
        },
        "enclaveResourceId": {
          "type": "string",
          "description": "Virtual Enclave Resource Id."
        },
        "catalog": {
          "$ref": "#/definitions/Catalog",
          "description": "Catalog Connection properties."
        },
        "packageCollection": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Package"
          },
          "x-typespec-name": "Package[]",
          "description": "List of packages for catalog."
        }
      },
      "description": "The updatable properties of the CatalogResource."
    },
    "CatalogStorageType": {
      "type": "string",
      "description": "List of storage types support by catalog",
      "enum": [
        "BlobCatalog"
      ],
      "x-ms-enum": {
        "name": "CatalogStorageType",
        "modelAsString": true,
        "values": [
          {
            "name": "BlobCatalog",
            "value": "BlobCatalog",
            "description": "Blob Storage Catalog Type"
          }
        ]
      }
    },
    "CommunityProperties": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Community Description."
        },
        "addressSpace": {
          "type": "string",
          "description": "Address Space."
        },
        "dnsServers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-typespec-name": "string[]",
          "description": "Dns Servers."
        },
        "provisioningState": {
          "$ref": "#/definitions/ProvisioningState",
          "description": "Provisioning State.",
          "readOnly": true
        },
        "resourceCollection": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-typespec-name": "string[]",
          "description": "List of resource ids created by communities."
        },
        "virtualEnclaveList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EnclaveListItem"
          },
          "x-typespec-name": "EnclaveListItem[]",
          "description": "List of virtual enclaves that a community contains."
        },
        "virtualEnclaveCollection": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/EnclaveListItem"
          },
          "x-typespec-name": "Record<EnclaveListItem>",
          "description": "Dictionary of virtual enclaves that a community contains."
        }
      },
      "description": "Community Resource Properties"
    },
    "CommunityResource": {
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/CommunityProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "description": "Community Model Resource",
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "CommunityResourceId": {
      "type": "string",
      "description": "A type definition that refers the id to an ARM resource.",
      "format": "arm-id",
      "x-ms-arm-id-details": {
        "allowedResources": [
          {
            "type": "Microsoft.Mission/communities"
          }
        ]
      }
    },
    "CommunityResourceListResult": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CommunityResource"
          },
          "x-typespec-name": "CommunityResource[]",
          "description": "The CommunityResource items on this page"
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items",
          "x-typespec-name": "TypeSpec.Rest.ResourceLocation"
        }
      },
      "description": "The response of a CommunityResource list operation.",
      "required": [
        "value"
      ]
    },
    "CommunityResourceUpdate": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-typespec-name": "Record<string>",
          "description": "Resource tags."
        },
        "properties": {
          "$ref": "#/definitions/CommunityResourceUpdateProperties",
          "x-ms-client-flatten": true
        }
      },
      "description": "The type used for update operations of the CommunityResource."
    },
    "CommunityResourceUpdateProperties": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Community Description."
        },
        "addressSpace": {
          "type": "string",
          "description": "Address Space."
        },
        "dnsServers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-typespec-name": "string[]",
          "description": "Dns Servers."
        },
        "resourceCollection": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-typespec-name": "string[]",
          "description": "List of resource ids created by communities."
        },
        "virtualEnclaveList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EnclaveListItem"
          },
          "x-typespec-name": "EnclaveListItem[]",
          "description": "List of virtual enclaves that a community contains."
        },
        "virtualEnclaveCollection": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/EnclaveListItem"
          },
          "x-typespec-name": "Record<EnclaveListItem>",
          "description": "Dictionary of virtual enclaves that a community contains."
        }
      },
      "description": "The updatable properties of the CommunityResource."
    },
    "EnclaveDefaultSettings": {
      "type": "object",
      "properties": {
        "keyVaultResourceId": {
          "$ref": "#/definitions/KeyVaultResourceId",
          "description": "Key Vault Resource Id."
        },
        "logAnalyticsResourceId": {
          "$ref": "#/definitions/LogAnalyticsResourceId",
          "description": "Log Analytics Resource Id."
        },
        "storageAccountResourceId": {
          "$ref": "#/definitions/StorageAccountResourceId",
          "description": "Storage Account Resource Id."
        }
      },
      "description": "Virtual Enclave Default Settings"
    },
    "EnclaveListItem": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "virtual enclave name."
        },
        "id": {
          "$ref": "#/definitions/VirtualEnclaveResourceId",
          "description": "virtual enclaves resource id."
        },
        "creationDatetime": {
          "type": "string",
          "description": "creation datetime."
        },
        "createdBy": {
          "type": "string",
          "description": "created by."
        },
        "provisioningState": {
          "$ref": "#/definitions/ProvisioningState",
          "description": "Provisioning State.",
          "readOnly": true
        }
      },
      "description": "EnclaveListItem Properties"
    },
    "EnclaveResource": {
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/VirtualEnclaveProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "description": "Virtual Enclave Model Resource",
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "EnclaveResourceListResult": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EnclaveResource"
          },
          "x-typespec-name": "EnclaveResource[]",
          "description": "The EnclaveResource items on this page"
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items",
          "x-typespec-name": "TypeSpec.Rest.ResourceLocation"
        }
      },
      "description": "The response of a EnclaveResource list operation.",
      "required": [
        "value"
      ]
    },
    "EnclaveResourceUpdate": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-typespec-name": "Record<string>",
          "description": "Resource tags."
        },
        "properties": {
          "$ref": "#/definitions/EnclaveResourceUpdateProperties",
          "x-ms-client-flatten": true
        }
      },
      "description": "The type used for update operations of the EnclaveResource."
    },
    "EnclaveResourceUpdateProperties": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Virtual Enclave Description."
        },
        "enclaveVirtualNetwork": {
          "$ref": "#/definitions/EnclaveVirtualNetworkUpdate",
          "description": "Virtual Network."
        },
        "communityResourceId": {
          "$ref": "#/definitions/CommunityResourceId",
          "description": "Community Resource Id."
        },
        "enclaveDefaultSettings": {
          "$ref": "#/definitions/EnclaveDefaultSettings",
          "description": "Default Settings"
        },
        "resourceCollection": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-typespec-name": "string[]",
          "description": "List of resource ids created by Virtual Enclave."
        }
      },
      "description": "The updatable properties of the EnclaveResource."
    },
    "EnclaveVirtualNetwork": {
      "type": "object",
      "properties": {
        "networkSize": {
          "type": "string",
          "description": "Network Size."
        },
        "customCidrRange": {
          "type": "string",
          "description": "Custom CIDR Range."
        }
      },
      "description": "Enclave Virtual Network Properties",
      "required": [
        "networkSize"
      ]
    },
    "EnclaveVirtualNetworkUpdate": {
      "type": "object",
      "properties": {
        "networkSize": {
          "type": "string",
          "description": "Network Size."
        },
        "customCidrRange": {
          "type": "string",
          "description": "Custom CIDR Range."
        }
      },
      "description": "Enclave Virtual Network Properties"
    },
    "EndpointProperties": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Endpoint Description."
        },
        "endpointRuleCollection": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EndpointRule"
          },
          "x-typespec-name": "EndpointRule[]",
          "description": "Endpoint Rule Collection."
        },
        "provisioningState": {
          "$ref": "#/definitions/ProvisioningState",
          "description": "Provisioning State.",
          "readOnly": true
        }
      },
      "description": "Endpoint Resource properties"
    },
    "EndpointProtocol": {
      "type": "string",
      "description": "Endpoint Protocol Enum",
      "enum": [
        "ANY",
        "TCP",
        "UDP",
        "ICMP",
        "ESP",
        "AH"
      ],
      "x-ms-enum": {
        "name": "EndpointProtocol",
        "modelAsString": true
      }
    },
    "EndpointResource": {
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/EndpointProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "description": "Endpoint Model Resource",
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "EndpointResourceId": {
      "type": "string",
      "description": "A type definition that refers the id to an ARM resource.",
      "format": "arm-id",
      "x-ms-arm-id-details": {
        "allowedResources": [
          {
            "type": "Microsoft.Mission/virtualEnclaves/endpoints"
          }
        ]
      }
    },
    "EndpointResourceListResult": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EndpointResource"
          },
          "x-typespec-name": "EndpointResource[]",
          "description": "The EndpointResource items on this page"
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items",
          "x-typespec-name": "TypeSpec.Rest.ResourceLocation"
        }
      },
      "description": "The response of a EndpointResource list operation.",
      "required": [
        "value"
      ]
    },
    "EndpointResourceUpdate": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-typespec-name": "Record<string>",
          "description": "Resource tags."
        },
        "properties": {
          "$ref": "#/definitions/EndpointResourceUpdateProperties",
          "x-ms-client-flatten": true
        }
      },
      "description": "The type used for update operations of the EndpointResource."
    },
    "EndpointResourceUpdateProperties": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Endpoint Description."
        },
        "endpointRuleCollection": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EndpointRule"
          },
          "x-typespec-name": "EndpointRule[]",
          "description": "Endpoint Rule Collection."
        }
      },
      "description": "The updatable properties of the EndpointResource."
    },
    "EndpointRule": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Endpoint Rule Id."
        },
        "address": {
          "type": "string",
          "description": "IP Address. Can include multiple CIDR/IP Addresses separated by commas."
        },
        "port": {
          "type": "string",
          "description": "Port. Can include multiple ports separated by commas or a range indicated by a hyphen."
        },
        "protocol": {
          "$ref": "#/definitions/EndpointProtocol",
          "description": "Protocol."
        }
      },
      "description": "EndpointRule Properties"
    },
    "ExternalConnection": {
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/ExternalConnectionProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "description": "Describes an External Connection.",
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "ExternalConnectionListResult": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExternalConnection"
          },
          "x-typespec-name": "ExternalConnection[]",
          "description": "The ExternalConnection items on this page"
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items",
          "x-typespec-name": "TypeSpec.Rest.ResourceLocation"
        }
      },
      "description": "The response of a ExternalConnection list operation.",
      "required": [
        "value"
      ]
    },
    "ExternalConnectionProperties": {
      "type": "object",
      "properties": {
        "provisioningState": {
          "$ref": "#/definitions/ProvisioningState",
          "description": "The status of the last operation.",
          "readOnly": true
        },
        "state": {
          "$ref": "#/definitions/ExternalConnectionState",
          "description": "The state of the externalConnection."
        },
        "communityResourceId": {
          "$ref": "#/definitions/CommunityResourceId",
          "description": "Community Resource Id."
        },
        "enclaveIds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VirtualEnclaveResourceId"
          },
          "x-typespec-name": "VirtualEnclaveResourceId[]",
          "description": "The enclaves' resource IDs."
        },
        "externalCidrs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-typespec-name": "string[]",
          "description": "The external CIDR IP addresses."
        },
        "resourceCollection": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-typespec-name": "string[]",
          "description": "List of resource ids modified by externalConnections."
        }
      },
      "description": "Describes the properties of an External Connection.",
      "required": [
        "communityResourceId",
        "enclaveIds",
        "externalCidrs"
      ]
    },
    "ExternalConnectionState": {
      "type": "string",
      "description": "Specifies the state of the externalConnection.",
      "enum": [
        "Pending",
        "Approved",
        "Active"
      ],
      "x-ms-enum": {
        "name": "ExternalConnectionState",
        "modelAsString": true
      }
    },
    "ExternalConnectionUpdate": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-typespec-name": "Record<string>",
          "description": "Resource tags."
        },
        "properties": {
          "$ref": "#/definitions/ExternalConnectionUpdateProperties",
          "x-ms-client-flatten": true
        }
      },
      "description": "The type used for update operations of the ExternalConnection."
    },
    "ExternalConnectionUpdateProperties": {
      "type": "object",
      "properties": {
        "state": {
          "$ref": "#/definitions/ExternalConnectionState",
          "description": "The state of the externalConnection."
        },
        "communityResourceId": {
          "$ref": "#/definitions/CommunityResourceId",
          "description": "Community Resource Id."
        },
        "enclaveIds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VirtualEnclaveResourceId"
          },
          "x-typespec-name": "VirtualEnclaveResourceId[]",
          "description": "The enclaves' resource IDs."
        },
        "externalCidrs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-typespec-name": "string[]",
          "description": "The external CIDR IP addresses."
        },
        "resourceCollection": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-typespec-name": "string[]",
          "description": "List of resource ids modified by externalConnections."
        }
      },
      "description": "The updatable properties of the ExternalConnection."
    },
    "InternalConnection": {
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/InternalConnectionProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "description": "Describes an Internal Connection.",
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "InternalConnectionListResult": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InternalConnection"
          },
          "x-typespec-name": "InternalConnection[]",
          "description": "The InternalConnection items on this page"
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items",
          "x-typespec-name": "TypeSpec.Rest.ResourceLocation"
        }
      },
      "description": "The response of a InternalConnection list operation.",
      "required": [
        "value"
      ]
    },
    "InternalConnectionProperties": {
      "type": "object",
      "properties": {
        "provisioningState": {
          "$ref": "#/definitions/ProvisioningState",
          "description": "The status of the last operation.",
          "readOnly": true
        },
        "connectionType": {
          "$ref": "#/definitions/InternalConnectionType",
          "description": "Specifies the type of internal connection. \n Possible values are:\n PrivateLink \n NetworkSecurityGroup"
        },
        "state": {
          "$ref": "#/definitions/InternalConnectionState",
          "description": "The state of the internalConnection."
        },
        "communityResourceId": {
          "$ref": "#/definitions/CommunityResourceId",
          "description": "Community Resource Id."
        },
        "destinationEnclaveId": {
          "$ref": "#/definitions/VirtualEnclaveResourceId",
          "description": "The destination enclave's resource ID."
        },
        "destinationEndpointId": {
          "$ref": "#/definitions/EndpointResourceId",
          "description": "The destination endpoint's resource ID."
        },
        "sourceEnclaveId": {
          "$ref": "#/definitions/VirtualEnclaveResourceId",
          "description": "The source enclave's resource ID."
        },
        "sourceCidrs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-typespec-name": "string[]",
          "description": "The source CIDR IP addresses."
        },
        "resourceCollection": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-typespec-name": "string[]",
          "description": "List of resource ids modified by internalConnections."
        }
      },
      "description": "Describes the properties of an Internal Connection.",
      "required": [
        "connectionType",
        "communityResourceId",
        "destinationEnclaveId",
        "destinationEndpointId",
        "sourceEnclaveId",
        "sourceCidrs"
      ]
    },
    "InternalConnectionState": {
      "type": "string",
      "description": "Specifies the state of the internalConnection.",
      "enum": [
        "Pending",
        "Approved",
        "Active"
      ],
      "x-ms-enum": {
        "name": "InternalConnectionState",
        "modelAsString": true
      }
    },
    "InternalConnectionType": {
      "type": "string",
      "description": "Specifies the different types of network connections.",
      "enum": [
        "PrivateLink",
        "NetworkSecurityGroup"
      ],
      "x-ms-enum": {
        "name": "InternalConnectionType",
        "modelAsString": true
      }
    },
    "InternalConnectionUpdate": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-typespec-name": "Record<string>",
          "description": "Resource tags."
        },
        "properties": {
          "$ref": "#/definitions/InternalConnectionUpdateProperties",
          "x-ms-client-flatten": true
        }
      },
      "description": "The type used for update operations of the InternalConnection."
    },
    "InternalConnectionUpdateProperties": {
      "type": "object",
      "properties": {
        "connectionType": {
          "$ref": "#/definitions/InternalConnectionType",
          "description": "Specifies the type of internal connection. \n Possible values are:\n PrivateLink \n NetworkSecurityGroup"
        },
        "state": {
          "$ref": "#/definitions/InternalConnectionState",
          "description": "The state of the internalConnection."
        },
        "communityResourceId": {
          "$ref": "#/definitions/CommunityResourceId",
          "description": "Community Resource Id."
        },
        "destinationEnclaveId": {
          "$ref": "#/definitions/VirtualEnclaveResourceId",
          "description": "The destination enclave's resource ID."
        },
        "destinationEndpointId": {
          "$ref": "#/definitions/EndpointResourceId",
          "description": "The destination endpoint's resource ID."
        },
        "sourceEnclaveId": {
          "$ref": "#/definitions/VirtualEnclaveResourceId",
          "description": "The source enclave's resource ID."
        },
        "sourceCidrs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-typespec-name": "string[]",
          "description": "The source CIDR IP addresses."
        },
        "resourceCollection": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-typespec-name": "string[]",
          "description": "List of resource ids modified by internalConnections."
        }
      },
      "description": "The updatable properties of the InternalConnection."
    },
    "KeyVaultResourceId": {
      "type": "string",
      "description": "A type definition that refers the id to an ARM resource.",
      "format": "arm-id",
      "x-ms-arm-id-details": {
        "allowedResources": [
          {
            "type": "Microsoft.KeyVault/vaults"
          }
        ]
      }
    },
    "LogAnalyticsResourceId": {
      "type": "string",
      "description": "A type definition that refers the id to an ARM resource.",
      "format": "arm-id",
      "x-ms-arm-id-details": {
        "allowedResources": [
          {
            "type": "Microsoft.OperationalInsights/workspaces"
          }
        ]
      }
    },
    "Package": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Package Id."
        },
        "name": {
          "type": "string",
          "description": "Package Name."
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-typespec-name": "Record<string>",
          "description": "Package metadata."
        }
      },
      "description": "Package Properties"
    },
    "ProvisioningState": {
      "type": "string",
      "description": "Provisioning State Enum",
      "enum": [
        "Succeeded",
        "Failed",
        "Canceled",
        "Accepted",
        "Created",
        "Creating",
        "Deleted",
        "Deleting",
        "NotSpecified",
        "Ready",
        "Running",
        "Updating"
      ],
      "x-ms-enum": {
        "name": "ProvisioningState",
        "modelAsString": true
      }
    },
    "StorageAccountResourceId": {
      "type": "string",
      "description": "A type definition that refers the id to an ARM resource.",
      "format": "arm-id",
      "x-ms-arm-id-details": {
        "allowedResources": [
          {
            "type": "Microsoft.Storage/storageAccounts"
          }
        ]
      }
    },
    "VirtualEnclaveProperties": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Virtual Enclave Description."
        },
        "provisioningState": {
          "$ref": "#/definitions/ProvisioningState",
          "description": "Provisioning State.",
          "readOnly": true
        },
        "enclaveVirtualNetwork": {
          "$ref": "#/definitions/EnclaveVirtualNetwork",
          "description": "Virtual Network."
        },
        "communityResourceId": {
          "$ref": "#/definitions/CommunityResourceId",
          "description": "Community Resource Id."
        },
        "enclaveDefaultSettings": {
          "$ref": "#/definitions/EnclaveDefaultSettings",
          "description": "Default Settings"
        },
        "resourceCollection": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-typespec-name": "string[]",
          "description": "List of resource ids created by Virtual Enclave."
        }
      },
      "description": "Virtual Enclave Resource properties",
      "required": [
        "enclaveVirtualNetwork",
        "communityResourceId"
      ]
    },
    "VirtualEnclaveResourceId": {
      "type": "string",
      "description": "A type definition that refers the id to an ARM resource.",
      "format": "arm-id",
      "x-ms-arm-id-details": {
        "allowedResources": [
          {
            "type": "Microsoft.Mission/virtualEnclaves"
          }
        ]
      }
    },
    "WorkloadProperties": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Workload Description."
        },
        "enclaveResourceId": {
          "$ref": "#/definitions/VirtualEnclaveResourceId",
          "description": "Virtual Enclave Resource Id."
        },
        "managedResourceGroups": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-typespec-name": "string[]",
          "description": "Managed Resource Groups."
        },
        "provisioningState": {
          "$ref": "#/definitions/ProvisioningState",
          "description": "Provisioning State.",
          "readOnly": true
        }
      },
      "description": "Workload Resource properties"
    },
    "WorkloadResource": {
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/WorkloadProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "description": "Workload Model Resource",
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "WorkloadResourceListResult": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkloadResource"
          },
          "x-typespec-name": "WorkloadResource[]",
          "description": "The WorkloadResource items on this page"
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items",
          "x-typespec-name": "TypeSpec.Rest.ResourceLocation"
        }
      },
      "description": "The response of a WorkloadResource list operation.",
      "required": [
        "value"
      ]
    },
    "WorkloadResourceUpdate": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-typespec-name": "Record<string>",
          "description": "Resource tags."
        },
        "properties": {
          "$ref": "#/definitions/WorkloadResourceUpdateProperties",
          "x-ms-client-flatten": true
        }
      },
      "description": "The type used for update operations of the WorkloadResource."
    },
    "WorkloadResourceUpdateProperties": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Workload Description."
        },
        "enclaveResourceId": {
          "$ref": "#/definitions/VirtualEnclaveResourceId",
          "description": "Virtual Enclave Resource Id."
        },
        "managedResourceGroups": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-typespec-name": "string[]",
          "description": "Managed Resource Groups."
        }
      },
      "description": "The updatable properties of the WorkloadResource."
    }
  },
  "parameters": {}
}
