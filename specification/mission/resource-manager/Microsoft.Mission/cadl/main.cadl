import "@cadl-lang/rest";
import "@cadl-lang/versioning";
import "@azure-tools/cadl-providerhub";
import "@azure-tools/cadl-azure-core";
import "@azure-tools/cadl-azure-resource-manager";

@armNamespace
@serviceTitle("Microsoft Mission")
@serviceVersion("2022-08-02-preview")
@doc("Microsoft Mission Resource Provider management API.")
namespace Microsoft.Mission;

using Cadl.Http;
using Cadl.Rest;
using Cadl.Versioning;
using Azure.Core;
using Azure.ResourceManager;

@doc("Enclave Virtual Network Resource")
model enclaveVirtualNetwork {
  @doc("Network Size.")
  networkSize?: string;
  
  @doc("Network Address.")
  networkCidr?: string;

  @doc("Subnet Gateway Address.")
  subnetGatewayCidr?: string;

  @doc("Subnet Client Address.")
  subnetClientCidr?: string;
  
  @doc("Subnet Management Address.")
  subnetManagementCidr?: string;

  @doc("Subnet Resources Address.")
  subnetResourcesCidr?: string;

  @doc("Subnet HostPool Address.")
  subnetHostPoolCidr?: string;

  @doc("VPN asn.")
  vpnASN?: int32;
}


@doc("Enclave Key Vault Resource")
model enclaveKeyVault{
  @doc("Domain Name.")
  domainNameValue?: string;

  @doc("Domain Password Secret Value.")
  domainPasswordSecretValue?: string;

  @doc("Domain Account Value.")
  domainAccountValue?: string;

  @doc("Local Account Value.")
  localAccountValue?: string;

  @doc("Local Password Secret Value.")
  localPasswordSecretValue?: string;

  @doc("Ou Path Value.")
  ouPathValue?: string;
}

@doc("Enclave Core properties")
model enclaveCore{

  @doc("Virtual Enclave's centrally shared Key Vault.")
  enclaveKeyVault?: enclaveKeyVault;

  @doc("Ip Address.")
  ipAddress?: string;
}

@doc("Virtual Enclave properties")
model virtualEnclaveProperties{
  @doc("Virtual Enclave Resource Group Id.")
  enclaveResourcesGroupId?: string;

  @doc("Virtual Enclave Virtual Network.")
  enclaveVirtualNetwork?: enclaveVirtualNetwork;

  @doc("Virtual Enclave Core.")
  enclaveCore?: enclaveCore;

  @doc("Virtual Enclave Administrators Object Id.")
  enclaveAdministratorsObjectId?: string;

  @doc("Provisioning State.")
  @visibility("read")
  provisioningState?: provisioningState;
}

@knownValues(provisioningStateEnum)
model provisioningState is string;

@doc("Provisioning State Enum")
enum provisioningStateEnum { 
  Succeeded,
  Failed,
  Canceled,
  Unknown,
  Validating,
  Processing,
  Deleting,
  Accepted,
  Completed,
  Deleted,
}

@doc("Mission Resource")
model missionResource is TrackedResource<virtualEnclaveProperties> {
  @key("virtualEnclave")
  @segment("virtualEnclaves")
  @path
  @doc("The name of the missionResource Resource")
  name: string;
}

@doc("Virtual Enclave Interface")
@armResourceOperations
interface VirtualEnclave extends ResourceOperations<missionResource, virtualEnclaveProperties> {
}