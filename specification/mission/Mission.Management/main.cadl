import "@cadl-lang/rest";
import "@cadl-lang/openapi";
import "@cadl-lang/versioning";
import "@azure-tools/cadl-autorest";
import "@azure-tools/cadl-providerhub";
import "@azure-tools/cadl-azure-core";
import "@azure-tools/cadl-azure-resource-manager";

import "./cadl/community/community.cadl";
import "./cadl/virtualEnclave/virtualenclave.cadl";
import "./cadl/workload/workload.cadl";
import "./cadl/catalog/catalog.cadl";

@armProviderNamespace
@service({title: "Microsoft Mission", version: "2023-02-01-preview"})
@versionedDependency(Azure.ResourceManager.Versions.v1_0_Preview_1)
@doc("Microsoft Mission Resource Provider management API.")
namespace Microsoft.Mission;

using Cadl.Http;
using Cadl.Rest;
using Cadl.Versioning;
using Azure.Core;
using Azure.ResourceManager;

interface Operations extends Azure.ResourceManager.Operations {}

@doc("Community Model Resource")
model CommunityResource is TrackedResource<CommunityProperties> {
  @key("communityName")
  @segment("communities")
  @path
  @doc("The name of the communityResource Resource")
  name: string;
}

@doc("Virtual Enclave Model Resource")
model EnclaveResource is TrackedResource<VirtualEnclaveProperties> {
  @key("virtualEnclaveName")
  @segment("virtualEnclaves")
  @doc("The name of the enclaveResource Resource")
  @path
  name: string;
}

@doc("Workload Model Resource")
@parentResource(EnclaveResource)
model WorkloadResource is TrackedResource<WorkloadProperties> {
  @key("workloadName")
  @segment("workloads")
  @path
  @doc("The name of the workloadResource Resource")
  name: string;
}

@doc("Catalog Model Resource")
model CatalogResource is TrackedResource<CatalogProperties> {
  @key("catalogName")
  @segment("catalogs")
  @doc("The name of the catalogResource Resource")
  @path
  name: string;
}

@doc("Workload Interface")
@armResourceOperations
interface Workload extends ResourceOperations<WorkloadResource, WorkloadProperties> {
  get is ArmResourceRead<WorkloadResource>;
  createOrUpdate is ArmResourceCreateOrUpdateAsync<WorkloadResource>;
  update is ArmResourcePatchAsync<WorkloadResource, WorkloadProperties>;
  delete is ArmResourceDeleteSync<WorkloadResource>;
  listByResourceGroup is ArmResourceListByParent<WorkloadResource>;
  listBySubscription is ArmListBySubscription<WorkloadResource>;
}

@doc("Virtual Enclave Interface")
@armResourceOperations
interface VirtualEnclave extends ResourceOperations<EnclaveResource, VirtualEnclaveProperties> {
  get is ArmResourceRead<EnclaveResource>;
  createOrUpdate is ArmResourceCreateOrUpdateAsync<EnclaveResource>;
  update is ArmResourcePatchAsync<EnclaveResource, VirtualEnclaveProperties>;
  delete is ArmResourceDeleteSync<EnclaveResource>;
  listByResourceGroup is ArmResourceListByParent<EnclaveResource>;
  listBySubscription is ArmListBySubscription<EnclaveResource>;
}

@doc("Community Interface")
@armResourceOperations
interface Community extends ResourceOperations<CommunityResource, CommunityProperties> {
  get is ArmResourceRead<CommunityResource>;
  createOrUpdate is ArmResourceCreateOrUpdateAsync<CommunityResource>;
  update is ArmResourcePatchAsync<CommunityResource, CommunityProperties>;
  delete is ArmResourceDeleteSync<CommunityResource>;
  listByResourceGroup is ArmResourceListByParent<CommunityResource>;
  listBySubscription is ArmListBySubscription<CommunityResource>;
}

@doc("Catalog Interface")
@armResourceOperations
interface Catalog extends ResourceOperations<CatalogResource, CatalogProperties> {
  get is ArmResourceRead<CatalogResource>;
  createOrUpdate is ArmResourceCreateOrUpdateAsync<CatalogResource>;
  update is ArmResourcePatchAsync<CatalogResource, CatalogProperties>;
  delete is ArmResourceDeleteSync<CatalogResource>;
  listByResourceGroup is ArmResourceListByParent<CatalogResource>;
  listBySubscription is ArmListBySubscription<CatalogResource>
}