{
  "swagger": "2.0",
  "info": {
    "title": "ServiceLinkerManagementClient",
    "version": "2022-05-01",
    "description": "Microsoft.ServiceLinker provider",
    "x-typespec-generated": [
      {
        "emitter": "@azure-tools/typespec-autorest"
      }
    ]
  },
  "schemes": [
    "https"
  ],
  "host": "management.azure.com",
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "security": [
    {
      "AadOauth2Auth": [
        "user_impersonation"
      ]
    }
  ],
  "securityDefinitions": {
    "AadOauth2Auth": {
      "type": "oauth2",
      "description": "The Azure Active Directory OAuth2 Flow",
      "flow": "accessCode",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "scopes": {
        "user_impersonation": ""
      },
      "tokenUrl": "https://login.microsoftonline.com/common/oauth2/token"
    }
  },
  "tags": [
    {
      "name": "Operations"
    },
    {
      "name": "LinkerResources"
    }
  ],
  "paths": {
    "/providers/Microsoft.ServiceLinker/operations": {
      "get": {
        "operationId": "Operations_List",
        "tags": [
          "Operations"
        ],
        "description": "List the operations for the provider",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/OperationListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceLinker/linkers": {
      "get": {
        "operationId": "Linker_List",
        "tags": [
          "LinkerResources"
        ],
        "description": "Returns list of Linkers which connects to the resource.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/LinkerResourceListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "LinkList": {
            "$ref": "./examples/Linker_List.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceLinker/linkers/{linkerName}": {
      "get": {
        "operationId": "Linker_Get",
        "tags": [
          "LinkerResources"
        ],
        "description": "Returns Linker resource for a given name.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "linkerName",
            "in": "path",
            "description": "The name Linker resource.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/LinkerResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Link": {
            "$ref": "./examples/Linker_Get.json"
          }
        }
      },
      "put": {
        "operationId": "Linker_CreateOrUpdate",
        "tags": [
          "LinkerResources"
        ],
        "description": "Create or update linker resource.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "linkerName",
            "in": "path",
            "description": "The name Linker resource.",
            "required": true,
            "type": "string"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "Linker details.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LinkerResource"
            },
            "x-ms-client-name": "parameters"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'LinkerResource' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/LinkerResource"
            }
          },
          "201": {
            "description": "Resource 'LinkerResource' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/LinkerResource"
            },
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              },
              "Azure-AsyncOperation": {
                "type": "string",
                "description": "A link to the status monitor"
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "PutLink": {
            "$ref": "./examples/Linker_CreateOrUpdate_Put_Link.json"
          },
          "PutLinkWithSecretStore": {
            "$ref": "./examples/Linker_CreateOrUpdate_Put_Link_With_Secret_Store.json"
          },
          "PutLinkWithServiceEndpoint": {
            "$ref": "./examples/Linker_CreateOrUpdate_Put_Link_With_Service_Endpoint.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      },
      "patch": {
        "operationId": "Linker_Update",
        "tags": [
          "LinkerResources"
        ],
        "description": "Operation to update an existing link.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "linkerName",
            "in": "path",
            "description": "The name Linker resource.",
            "required": true,
            "type": "string"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "Linker details.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LinkerPatch"
            },
            "x-ms-client-name": "parameters"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/LinkerResource"
            }
          },
          "202": {
            "description": "Resource update request accepted.",
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              },
              "Azure-AsyncOperation": {
                "type": "string",
                "description": "A link to the status monitor"
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "PatchLink": {
            "$ref": "./examples/Linker_Update.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      },
      "delete": {
        "operationId": "Linker_Delete",
        "tags": [
          "LinkerResources"
        ],
        "description": "Delete a link.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "linkerName",
            "in": "path",
            "description": "The name Linker resource.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              },
              "Azure-AsyncOperation": {
                "type": "string",
                "description": "A link to the status monitor"
              }
            }
          },
          "204": {
            "description": "Resource deleted successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "DeleteLink": {
            "$ref": "./examples/Linker_Delete.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceLinker/linkers/{linkerName}/listConfigurations": {
      "post": {
        "operationId": "Linker_ListConfigurations",
        "tags": [
          "LinkerResources"
        ],
        "description": "list source configurations for a linker.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "linkerName",
            "in": "path",
            "description": "The name Linker resource.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/SourceConfigurationResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "GetConfiguration": {
            "$ref": "./examples/Linker_ListConfigurations.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceLinker/linkers/{linkerName}/validate": {
      "post": {
        "operationId": "Linker_Validate",
        "tags": [
          "LinkerResources"
        ],
        "description": "Validate a link.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "linkerName",
            "in": "path",
            "description": "The name Linker resource.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/ValidateOperationResult"
            }
          },
          "202": {
            "description": "Resource operation accepted.",
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              },
              "Azure-AsyncOperation": {
                "type": "string",
                "description": "A link to the status monitor"
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "ValidateLinkSuccess": {
            "$ref": "./examples/Linker_Validate.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    }
  },
  "definitions": {
    "AuthInfoBase": {
      "type": "object",
      "description": "The authentication info",
      "properties": {
        "authType": {
          "type": "string",
          "description": "Discriminator property for AuthInfoBase."
        }
      },
      "discriminator": "authType",
      "required": [
        "authType"
      ]
    },
    "AuthType": {
      "type": "string",
      "description": "The authentication type.",
      "enum": [
        "systemAssignedIdentity",
        "userAssignedIdentity",
        "servicePrincipalSecret",
        "servicePrincipalCertificate",
        "secret"
      ],
      "x-ms-enum": {
        "name": "AuthType",
        "modelAsString": true
      }
    },
    "AzureKeyVaultProperties": {
      "type": "object",
      "description": "The resource properties when type is Azure Key Vault",
      "properties": {
        "connectAsKubernetesCsiDriver": {
          "type": "boolean",
          "description": "True if connect via Kubernetes CSI Driver."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AzureResourcePropertiesBase"
        }
      ],
      "x-ms-discriminator-value": "KeyVault"
    },
    "AzureResource": {
      "type": "object",
      "description": "The azure resource info when target service type is AzureResource",
      "properties": {
        "id": {
          "type": "string",
          "description": "The Id of azure resource."
        },
        "resourceProperties": {
          "$ref": "#/definitions/AzureResourcePropertiesBase",
          "description": "The azure resource connection related properties."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/TargetServiceBase"
        }
      ],
      "x-ms-discriminator-value": "AzureResource"
    },
    "AzureResourcePropertiesBase": {
      "type": "object",
      "description": "The azure resource properties",
      "properties": {
        "type": {
          "type": "string",
          "description": "Discriminator property for AzureResourcePropertiesBase."
        }
      },
      "discriminator": "type",
      "required": [
        "type"
      ]
    },
    "AzureResourceType": {
      "type": "string",
      "description": "The azure resource type.",
      "enum": [
        "KeyVault"
      ],
      "x-ms-enum": {
        "name": "AzureResourceType",
        "modelAsString": true
      }
    },
    "ClientType": {
      "type": "string",
      "description": "The application client type",
      "enum": [
        "none",
        "dotnet",
        "java",
        "python",
        "go",
        "php",
        "ruby",
        "django",
        "nodejs",
        "springBoot"
      ],
      "x-ms-enum": {
        "name": "ClientType",
        "modelAsString": true
      }
    },
    "ConfluentBootstrapServer": {
      "type": "object",
      "description": "The service properties when target service type is ConfluentBootstrapServer",
      "properties": {
        "endpoint": {
          "type": "string",
          "description": "The endpoint of service."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/TargetServiceBase"
        }
      ],
      "x-ms-discriminator-value": "ConfluentBootstrapServer"
    },
    "ConfluentSchemaRegistry": {
      "type": "object",
      "description": "The service properties when target service type is ConfluentSchemaRegistry",
      "properties": {
        "endpoint": {
          "type": "string",
          "description": "The endpoint of service."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/TargetServiceBase"
        }
      ],
      "x-ms-discriminator-value": "ConfluentSchemaRegistry"
    },
    "KeyVaultSecretReferenceSecretInfo": {
      "type": "object",
      "description": "The secret info when type is keyVaultSecretReference. It's for scenario that user provides a secret stored in user's keyvault and source is Azure Kubernetes. The key Vault's resource id is linked to secretStore.keyVaultId.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the Key Vault secret."
        },
        "version": {
          "type": "string",
          "description": "Version of the Key Vault secret."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/SecretInfoBase"
        }
      ],
      "x-ms-discriminator-value": "keyVaultSecretReference"
    },
    "KeyVaultSecretUriSecretInfo": {
      "type": "object",
      "description": "The secret info when type is keyVaultSecretUri. It's for scenario that user provides a secret stored in user's keyvault and source is Web App, Spring Cloud or Container App.",
      "properties": {
        "value": {
          "type": "string",
          "description": "URI to the keyvault secret"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/SecretInfoBase"
        }
      ],
      "x-ms-discriminator-value": "keyVaultSecretUri"
    },
    "LinkerPatch": {
      "type": "object",
      "description": "A linker to be updated.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/LinkerProperties",
          "description": "Linker properties",
          "x-ms-client-flatten": true
        }
      }
    },
    "LinkerProperties": {
      "type": "object",
      "description": "The properties of the linker.",
      "properties": {
        "targetService": {
          "$ref": "#/definitions/TargetServiceBase",
          "description": "The target service properties"
        },
        "authInfo": {
          "$ref": "#/definitions/AuthInfoBase",
          "description": "The authentication type."
        },
        "clientType": {
          "$ref": "#/definitions/ClientType",
          "description": "The application client type"
        },
        "provisioningState": {
          "type": "string",
          "description": "The provisioning state.",
          "readOnly": true
        },
        "vNetSolution": {
          "$ref": "#/definitions/VNetSolution",
          "description": "The VNet solution."
        },
        "secretStore": {
          "$ref": "#/definitions/SecretStore",
          "description": "An option to store secret value in secure place"
        },
        "scope": {
          "type": "string",
          "description": "connection scope in source service."
        }
      }
    },
    "LinkerResource": {
      "type": "object",
      "description": "Linker of source and target resource",
      "properties": {
        "properties": {
          "$ref": "#/definitions/LinkerProperties",
          "description": "The properties of the linker.",
          "x-ms-client-flatten": true
        }
      },
      "required": [
        "properties"
      ],
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ProxyResource"
        }
      ]
    },
    "LinkerResourceListResult": {
      "type": "object",
      "description": "The response of a LinkerResource list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The LinkerResource items on this page",
          "items": {
            "$ref": "#/definitions/LinkerResource"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "Resource": {
      "type": "object",
      "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
      "properties": {
        "id": {
          "type": "string",
          "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the resource",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
          "readOnly": true
        }
      }
    },
    "SecretAuthInfo": {
      "type": "object",
      "description": "The authentication info when authType is secret",
      "properties": {
        "name": {
          "type": "string",
          "description": "Username or account name for secret auth."
        },
        "secretInfo": {
          "$ref": "#/definitions/SecretInfoBase",
          "description": "Password or key vault secret for secret auth."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AuthInfoBase"
        }
      ],
      "x-ms-discriminator-value": "secret"
    },
    "SecretInfoBase": {
      "type": "object",
      "description": "The secret info",
      "properties": {
        "secretType": {
          "type": "string",
          "description": "Discriminator property for SecretInfoBase."
        }
      },
      "discriminator": "secretType",
      "required": [
        "secretType"
      ]
    },
    "SecretStore": {
      "type": "object",
      "description": "An option to store secret value in secure place",
      "properties": {
        "keyVaultId": {
          "type": "string",
          "description": "The key vault id to store secret"
        }
      }
    },
    "SecretType": {
      "type": "string",
      "description": "The secret type.",
      "enum": [
        "rawValue",
        "keyVaultSecretUri",
        "keyVaultSecretReference"
      ],
      "x-ms-enum": {
        "name": "SecretType",
        "modelAsString": true
      }
    },
    "ServicePrincipalCertificateAuthInfo": {
      "type": "object",
      "description": "The authentication info when authType is servicePrincipal certificate",
      "properties": {
        "clientId": {
          "type": "string",
          "description": "Application clientId for servicePrincipal auth."
        },
        "principalId": {
          "type": "string",
          "description": "Principal Id for servicePrincipal auth."
        },
        "certificate": {
          "type": "string",
          "description": "ServicePrincipal certificate for servicePrincipal auth."
        }
      },
      "required": [
        "clientId",
        "principalId",
        "certificate"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AuthInfoBase"
        }
      ],
      "x-ms-discriminator-value": "servicePrincipalCertificate"
    },
    "ServicePrincipalSecretAuthInfo": {
      "type": "object",
      "description": "The authentication info when authType is servicePrincipal secret",
      "properties": {
        "clientId": {
          "type": "string",
          "description": "ServicePrincipal application clientId for servicePrincipal auth."
        },
        "principalId": {
          "type": "string",
          "description": "Principal Id for servicePrincipal auth."
        },
        "secret": {
          "type": "string",
          "description": "Secret for servicePrincipal auth."
        }
      },
      "required": [
        "clientId",
        "principalId",
        "secret"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AuthInfoBase"
        }
      ],
      "x-ms-discriminator-value": "servicePrincipalSecret"
    },
    "SourceConfiguration": {
      "type": "object",
      "description": "A configuration item for source resource",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of setting."
        },
        "value": {
          "type": "string",
          "description": "The value of setting"
        }
      }
    },
    "SourceConfigurationResult": {
      "type": "object",
      "description": "Configurations for source resource, include appSettings, connectionString and serviceBindings",
      "properties": {
        "configurations": {
          "type": "array",
          "description": "The configuration properties for source resource.",
          "items": {
            "$ref": "#/definitions/SourceConfiguration"
          },
          "x-ms-identifiers": []
        }
      }
    },
    "SystemAssignedIdentityAuthInfo": {
      "type": "object",
      "description": "The authentication info when authType is systemAssignedIdentity",
      "allOf": [
        {
          "$ref": "#/definitions/AuthInfoBase"
        }
      ],
      "x-ms-discriminator-value": "systemAssignedIdentity"
    },
    "TargetServiceBase": {
      "type": "object",
      "description": "The target service properties",
      "properties": {
        "type": {
          "type": "string",
          "description": "Discriminator property for TargetServiceBase."
        }
      },
      "discriminator": "type",
      "required": [
        "type"
      ]
    },
    "TargetServiceType": {
      "type": "string",
      "description": "The target service type.",
      "enum": [
        "AzureResource",
        "ConfluentBootstrapServer",
        "ConfluentSchemaRegistry"
      ],
      "x-ms-enum": {
        "name": "TargetServiceType",
        "modelAsString": true
      }
    },
    "UserAssignedIdentityAuthInfo": {
      "type": "object",
      "description": "The authentication info when authType is userAssignedIdentity",
      "properties": {
        "clientId": {
          "type": "string",
          "description": "Client Id for userAssignedIdentity."
        },
        "subscriptionId": {
          "type": "string",
          "description": "Subscription id for userAssignedIdentity."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AuthInfoBase"
        }
      ],
      "x-ms-discriminator-value": "userAssignedIdentity"
    },
    "VNetSolution": {
      "type": "object",
      "description": "The VNet solution for linker",
      "properties": {
        "type": {
          "$ref": "#/definitions/VNetSolutionType",
          "description": "Type of VNet solution."
        }
      }
    },
    "VNetSolutionType": {
      "type": "string",
      "description": "Type of VNet solution.",
      "enum": [
        "serviceEndpoint",
        "privateLink"
      ],
      "x-ms-enum": {
        "name": "VNetSolutionType",
        "modelAsString": true
      }
    },
    "ValidateOperationResult": {
      "type": "object",
      "description": "The validation operation result for a linker.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/ValidateResult",
          "description": "The validation result detail.",
          "x-ms-client-flatten": true
        },
        "resourceId": {
          "type": "string",
          "description": "Validated linker id."
        },
        "status": {
          "type": "string",
          "description": "Validation operation status."
        }
      }
    },
    "ValidateResult": {
      "type": "object",
      "description": "The validation result for a linker.",
      "properties": {
        "linkerName": {
          "type": "string",
          "description": "The linker name."
        },
        "isConnectionAvailable": {
          "type": "boolean",
          "description": "A boolean value indicating whether the connection is available or not"
        },
        "reportStartTimeUtc": {
          "type": "string",
          "format": "date-time",
          "description": "The start time of the validation report."
        },
        "reportEndTimeUtc": {
          "type": "string",
          "format": "date-time",
          "description": "The end time of the validation report."
        },
        "sourceId": {
          "type": "string",
          "description": "The resource id of the linker source application."
        },
        "targetId": {
          "type": "string",
          "description": "The resource Id of target service."
        },
        "authType": {
          "$ref": "#/definitions/AuthType",
          "description": "The authentication type."
        },
        "validationDetail": {
          "type": "array",
          "description": "The detail of validation result",
          "items": {
            "$ref": "#/definitions/ValidationResultItem"
          },
          "x-ms-identifiers": []
        }
      }
    },
    "ValidationResultItem": {
      "type": "object",
      "description": "The validation item for a linker.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The validation item name."
        },
        "description": {
          "type": "string",
          "description": "The display name of validation item"
        },
        "result": {
          "$ref": "#/definitions/ValidationResultStatus",
          "description": "The result of validation"
        },
        "errorMessage": {
          "type": "string",
          "description": "The error message of validation result"
        },
        "errorCode": {
          "type": "string",
          "description": "The error code of validation result"
        }
      }
    },
    "ValidationResultStatus": {
      "type": "string",
      "description": "The result of validation",
      "enum": [
        "success",
        "failure",
        "warning"
      ],
      "x-ms-enum": {
        "name": "ValidationResultStatus",
        "modelAsString": true
      }
    },
    "ValueSecretInfo": {
      "type": "object",
      "description": "The secret info when type is rawValue. It's for scenarios that user input the secret.",
      "properties": {
        "value": {
          "type": "string",
          "description": "The actual value of the secret."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/SecretInfoBase"
        }
      ],
      "x-ms-discriminator-value": "rawValue"
    },
    "Versions": {
      "type": "string",
      "description": "The available API versions.",
      "enum": [
        "2022-05-01"
      ],
      "x-ms-enum": {
        "name": "Versions",
        "modelAsString": true,
        "values": [
          {
            "name": "v2022_05_01",
            "value": "2022-05-01",
            "description": "The 2022-05-01 API version."
          }
        ]
      }
    }
  },
  "parameters": {}
}
