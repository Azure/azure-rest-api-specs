{
  "swagger": "2.0",
  "info": {
    "title": "ServiceLinkerManagementClient",
    "version": "2024-07-01-preview",
    "description": "Microsoft.ServiceLinker provider",
    "x-typespec-generated": [
      {
        "emitter": "@azure-tools/typespec-autorest"
      }
    ]
  },
  "schemes": [
    "https"
  ],
  "host": "management.azure.com",
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ],
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "description": "Azure Active Directory OAuth2 Flow.",
      "flow": "implicit",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      }
    }
  },
  "tags": [
    {
      "name": "Operations"
    },
    {
      "name": "DryrunResources"
    },
    {
      "name": "Linkers"
    },
    {
      "name": "LinkerResources"
    },
    {
      "name": "Linker"
    }
  ],
  "paths": {
    "/{resourceUri}/providers/Microsoft.ServiceLinker/connectors": {
      "get": {
        "operationId": "Linker_List",
        "tags": [
          "Linker"
        ],
        "description": "Returns list of Linkers which connects to the resource. which supports to config both application and target service during the resource provision.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "name": "resourceUri",
            "in": "path",
            "description": "{resourceUri}",
            "required": true,
            "type": "string",
            "x-ms-skip-url-encoding": true
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/ResourceList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "LinkerList": {
            "$ref": "./examples/LinkerList.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/{resourceUri}/providers/Microsoft.ServiceLinker/daprConfigurations": {
      "get": {
        "operationId": "Linkers_ListDaprConfigurations",
        "description": "List the dapr configuration supported by Service Connector.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "name": "resourceUri",
            "in": "path",
            "description": "The fully qualified Azure Resource manager identifier of the resource to be connected.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/DaprConfigurationList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "GetDaprConfigurations": {
            "$ref": "./examples/GetDaprConfigurations.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/{resourceUri}/providers/Microsoft.ServiceLinker/dryruns": {
      "get": {
        "operationId": "Linkers_ListDryrun",
        "tags": [
          "Linkers"
        ],
        "description": "list dryrun jobs",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "name": "resourceUri",
            "in": "path",
            "description": "The fully qualified Azure Resource manager identifier of the resource to be connected.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/DryrunList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "ListDryrun": {
            "$ref": "./examples/ListDryrun.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/{resourceUri}/providers/Microsoft.ServiceLinker/dryruns/{dryrunName}": {
      "get": {
        "operationId": "Linkers_GetDryrun",
        "tags": [
          "Linkers"
        ],
        "description": "get a dryrun job",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "name": "resourceUri",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-skip-url-encoding": true
          },
          {
            "name": "dryrunName",
            "in": "path",
            "description": "The name of the DryrunResource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/DryrunResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "GetDryrun": {
            "$ref": "./examples/GetDryrun.json"
          }
        }
      },
      "put": {
        "operationId": "Linkers_CreateDryrun",
        "tags": [
          "Linkers"
        ],
        "description": "create a dryrun job to do necessary check before actual creation",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "name": "resourceUri",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-skip-url-encoding": true
          },
          {
            "name": "dryrunName",
            "in": "path",
            "description": "The name of the DryrunResource",
            "required": true,
            "type": "string"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "dryrun resource.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DryrunResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'DryrunResource' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/DryrunResource"
            }
          },
          "201": {
            "description": "Resource 'DryrunResource' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/DryrunResource"
            },
            "headers": {
              "Azure-AsyncOperation": {
                "type": "string",
                "description": "A link to the status monitor"
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "PutDryrun": {
            "$ref": "./examples/PutDryrun.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      },
      "patch": {
        "operationId": "Linkers_UpdateDryrun",
        "tags": [
          "Linkers"
        ],
        "description": "add a dryrun job to do necessary check before actual creation",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "name": "resourceUri",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-skip-url-encoding": true
          },
          {
            "name": "dryrunName",
            "in": "path",
            "description": "The name of the DryrunResource",
            "required": true,
            "type": "string"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "dryrun resource.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DryrunPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/DryrunResource"
            }
          },
          "202": {
            "description": "Resource update request accepted.",
            "headers": {
              "Azure-AsyncOperation": {
                "type": "string",
                "description": "A link to the status monitor"
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "PatchDryrun": {
            "$ref": "./examples/PatchDryrun.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "original-uri"
        },
        "x-ms-long-running-operation": true
      },
      "delete": {
        "operationId": "Linkers_DeleteDryrun",
        "tags": [
          "Linkers"
        ],
        "description": "delete a dryrun job",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "name": "resourceUri",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-skip-url-encoding": true
          },
          {
            "name": "dryrunName",
            "in": "path",
            "description": "The name of the DryrunResource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "204": {
            "description": "Resource does not exist."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "DeleteDryrun": {
            "$ref": "./examples/DeleteDryrun.json"
          }
        }
      }
    },
    "/{resourceUri}/providers/Microsoft.ServiceLinker/linkerName/{linkers}": {
      "get": {
        "operationId": "Linker_Get",
        "tags": [
          "Linker"
        ],
        "description": "Returns Linker resource for a given name.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "name": "resourceUri",
            "in": "path",
            "description": "{resourceUri}",
            "required": true,
            "type": "string",
            "x-ms-skip-url-encoding": true
          },
          {
            "name": "linkers",
            "in": "path",
            "description": "The name of the LinkerResource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/LinkerResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Linker": {
            "$ref": "./examples/Linker.json"
          }
        }
      },
      "put": {
        "operationId": "Linker_CreateOrUpdate",
        "tags": [
          "Linker"
        ],
        "description": "Create or update Linker resource.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "name": "resourceUri",
            "in": "path",
            "description": "{resourceUri}",
            "required": true,
            "type": "string",
            "x-ms-skip-url-encoding": true
          },
          {
            "name": "linkers",
            "in": "path",
            "description": "The name of the LinkerResource",
            "required": true,
            "type": "string"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "Linker details.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LinkerResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'LinkerResource' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/LinkerResource"
            }
          },
          "201": {
            "description": "Resource 'LinkerResource' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/LinkerResource"
            },
            "headers": {
              "Azure-AsyncOperation": {
                "type": "string",
                "description": "A link to the status monitor"
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "PutLinker": {
            "$ref": "./examples/PutLinker.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      },
      "patch": {
        "operationId": "Linker_Update",
        "tags": [
          "Linker"
        ],
        "description": "Operation to update an existing Linker.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "name": "resourceUri",
            "in": "path",
            "description": "{resourceUri}",
            "required": true,
            "type": "string",
            "x-ms-skip-url-encoding": true
          },
          {
            "name": "linkers",
            "in": "path",
            "description": "The name of the LinkerResource",
            "required": true,
            "type": "string"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "Linker details.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LinkerPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/LinkerResource"
            }
          },
          "201": {
            "description": "Resource 'LinkerResource' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/LinkerResource"
            },
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "PatchLinker": {
            "$ref": "./examples/PatchLinker.json"
          }
        }
      },
      "delete": {
        "operationId": "Linker_Delete",
        "tags": [
          "Linker"
        ],
        "description": "Delete a Linker.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "name": "resourceUri",
            "in": "path",
            "description": "{resourceUri}",
            "required": true,
            "type": "string",
            "x-ms-skip-url-encoding": true
          },
          {
            "name": "linkers",
            "in": "path",
            "description": "The name of the LinkerResource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Azure-AsyncOperation": {
                "type": "string",
                "description": "A link to the status monitor"
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "204": {
            "description": "Resource does not exist."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "DeleteLinker": {
            "$ref": "./examples/DeleteLinker.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/{resourceUri}/providers/Microsoft.ServiceLinker/linkerName/{linkers}/generateConfigurations": {
      "post": {
        "operationId": "Linkers_GenerateConfigurations",
        "tags": [
          "Linker"
        ],
        "description": "Generate configurations for a Linker.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "name": "resourceUri",
            "in": "path",
            "description": "{resourceUri}",
            "required": true,
            "type": "string",
            "x-ms-skip-url-encoding": true
          },
          {
            "name": "linkers",
            "in": "path",
            "description": "The name of the LinkerResource",
            "required": true,
            "type": "string"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "Connection Info, including format, secret store, etc",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ConfigurationInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/ConfigurationResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "GenerateConfiguration": {
            "$ref": "./examples/LinkerGenerateConfigurations.json"
          }
        }
      }
    },
    "/{resourceUri}/providers/Microsoft.ServiceLinker/linkerName/{linkers}/listConfigurations": {
      "post": {
        "operationId": "Linker_ListConfigurations",
        "tags": [
          "Linker"
        ],
        "description": "list source configurations for a Linker.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "name": "resourceUri",
            "in": "path",
            "description": "{resourceUri}",
            "required": true,
            "type": "string",
            "x-ms-skip-url-encoding": true
          },
          {
            "name": "linkers",
            "in": "path",
            "description": "The name of the LinkerResource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/ConfigurationResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "GetConfiguration": {
            "$ref": "./examples/GetConfigurations.json"
          }
        }
      }
    },
    "/{resourceUri}/providers/Microsoft.ServiceLinker/linkerName/{linkers}/validateLinker": {
      "post": {
        "operationId": "Linker_Validate",
        "tags": [
          "Linker"
        ],
        "description": "Validate a Linker.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "name": "resourceUri",
            "in": "path",
            "description": "{resourceUri}",
            "required": true,
            "type": "string",
            "x-ms-skip-url-encoding": true
          },
          {
            "name": "linkers",
            "in": "path",
            "description": "The name of the LinkerResource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/ValidateOperationResult"
            }
          },
          "202": {
            "description": "Resource operation accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "ValidateLinkerSuccess": {
            "$ref": "./examples/ValidateLinkerSuccess.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/providers/Microsoft.ServiceLinker/configurationNames": {
      "get": {
        "operationId": "ConfigurationNames_List",
        "description": "Lists the configuration names generated by Service Connector for all target, client types, auth types.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "OData filter options.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skipToken",
            "in": "query",
            "description": "OData skipToken option for pagination.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/ConfigurationNameResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "GetConfigurationNames": {
            "$ref": "./examples/ConfigurationNamesList.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/providers/Microsoft.ServiceLinker/operations": {
      "get": {
        "operationId": "Operations_List",
        "tags": [
          "Operations"
        ],
        "description": "List the operations for the provider",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/OperationListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "GetConfiguration": {
            "$ref": "./examples/OperationsList.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceLinker/locations/{location}/connectors": {
      "get": {
        "operationId": "Connector_List",
        "tags": [
          "LinkerResources"
        ],
        "description": "Returns list of connector which connects to the resource, which supports to config the target service during the resource provision.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/LocationParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/ResourceList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "ConnectorList": {
            "$ref": "./examples/ConnectorList.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceLinker/locations/{location}/connectors/{connectorName}": {
      "get": {
        "operationId": "Connector_Get",
        "tags": [
          "LinkerResources"
        ],
        "description": "Returns Connector resource for a given name.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/LocationParameter"
          },
          {
            "name": "connectorName",
            "in": "path",
            "description": "The name of the LinkerResource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/LinkerResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Connector": {
            "$ref": "./examples/Connectors.json"
          }
        }
      },
      "put": {
        "operationId": "Connector_CreateOrUpdate",
        "tags": [
          "LinkerResources"
        ],
        "description": "Create or update Connector resource.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/LocationParameter"
          },
          {
            "name": "connectorName",
            "in": "path",
            "description": "The name of the LinkerResource",
            "required": true,
            "type": "string"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "Connector details.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LinkerResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'LinkerResource' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/LinkerResource"
            }
          },
          "201": {
            "description": "Resource 'LinkerResource' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/LinkerResource"
            },
            "headers": {
              "Azure-AsyncOperation": {
                "type": "string",
                "description": "A link to the status monitor"
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "PutConnector": {
            "$ref": "./examples/PutConnector.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      },
      "patch": {
        "operationId": "Connector_Update",
        "tags": [
          "LinkerResources"
        ],
        "description": "Operation to update an existing Connector.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/LocationParameter"
          },
          {
            "name": "connectorName",
            "in": "path",
            "description": "The name of the LinkerResource",
            "required": true,
            "type": "string"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "Connector details.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LinkerPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/LinkerResource"
            }
          },
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "schema": {
              "$ref": "#/definitions/LinkerResource"
            },
            "headers": {
              "Azure-AsyncOperation": {
                "type": "string",
                "description": "A link to the status monitor"
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "PatchConnector": {
            "$ref": "./examples/PatchConnector.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      },
      "delete": {
        "operationId": "Connector_Delete",
        "tags": [
          "LinkerResources"
        ],
        "description": "Delete a Connector.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/LocationParameter"
          },
          {
            "name": "connectorName",
            "in": "path",
            "description": "The name of the LinkerResource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Azure-AsyncOperation": {
                "type": "string",
                "description": "A link to the status monitor"
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "204": {
            "description": "Resource does not exist."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "DeleteConnector": {
            "$ref": "./examples/DeleteConnector.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceLinker/locations/{location}/connectors/{connectorName}/generateConfigurations": {
      "post": {
        "operationId": "Connector_GenerateConfigurations",
        "tags": [
          "LinkerResources"
        ],
        "description": "Generate configurations for a Connector.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/LocationParameter"
          },
          {
            "name": "connectorName",
            "in": "path",
            "description": "The name of the LinkerResource",
            "required": true,
            "type": "string"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "Connection Info, including format, secret store, etc",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ConfigurationInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/ConfigurationResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "GenerateConfiguration": {
            "$ref": "./examples/GenerateConfigurations.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceLinker/locations/{location}/connectors/{connectorName}/validate": {
      "post": {
        "operationId": "Connector_Validate",
        "tags": [
          "LinkerResources"
        ],
        "description": "Validate a Connector.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/LocationParameter"
          },
          {
            "name": "connectorName",
            "in": "path",
            "description": "The name of the LinkerResource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/ValidateOperationResult"
            }
          },
          "202": {
            "description": "Resource operation accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "ValidateConnectorSuccess": {
            "$ref": "./examples/ValidateConnectorSuccess.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceLinker/locations/{location}/dryruns": {
      "get": {
        "operationId": "Connector_ListDryrun",
        "tags": [
          "DryrunResources"
        ],
        "description": "list dryrun jobs",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/LocationParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/DryrunList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "ConnectorDryrunList": {
            "$ref": "./examples/ConnectorDryrunList.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceLinker/locations/{location}/dryruns/{dryrunName}": {
      "get": {
        "operationId": "Connector_GetDryrun",
        "tags": [
          "DryrunResources"
        ],
        "description": "get a dryrun job",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/LocationParameter"
          },
          {
            "name": "dryrunName",
            "in": "path",
            "description": "The name of the DryrunResource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/DryrunResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "ConnectorDryrunGet": {
            "$ref": "./examples/ConnectorDryrunGet.json"
          }
        }
      },
      "put": {
        "operationId": "Connector_CreateDryrun",
        "tags": [
          "DryrunResources"
        ],
        "description": "create a dryrun job to do necessary check before actual creation",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/LocationParameter"
          },
          {
            "name": "dryrunName",
            "in": "path",
            "description": "The name of the DryrunResource",
            "required": true,
            "type": "string"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "dryrun resource.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DryrunResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'DryrunResource' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/DryrunResource"
            }
          },
          "201": {
            "description": "Resource 'DryrunResource' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/DryrunResource"
            },
            "headers": {
              "Azure-AsyncOperation": {
                "type": "string",
                "description": "A link to the status monitor"
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "ConnectorDryrunCreate": {
            "$ref": "./examples/ConnectorDryrunCreate.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      },
      "patch": {
        "operationId": "Connector_UpdateDryrun",
        "tags": [
          "DryrunResources"
        ],
        "description": "update a dryrun job to do necessary check before actual creation",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/LocationParameter"
          },
          {
            "name": "dryrunName",
            "in": "path",
            "description": "The name of the DryrunResource",
            "required": true,
            "type": "string"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "dryrun resource.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DryrunPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/DryrunResource"
            }
          },
          "202": {
            "description": "Resource update request accepted.",
            "headers": {
              "Azure-AsyncOperation": {
                "type": "string",
                "description": "A link to the status monitor"
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "ConnectorDryrunUpdate": {
            "$ref": "./examples/ConnectorDryrunUpdate.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "original-uri"
        },
        "x-ms-long-running-operation": true
      },
      "delete": {
        "operationId": "Connector_DeleteDryrun",
        "tags": [
          "DryrunResources"
        ],
        "description": "delete a dryrun job",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/LocationParameter"
          },
          {
            "name": "dryrunName",
            "in": "path",
            "description": "The name of the DryrunResource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "204": {
            "description": "Resource does not exist."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "ConnectorDryrunDelete": {
            "$ref": "./examples/ConnectorDryrunDelete.json"
          }
        }
      }
    }
  },
  "definitions": {
    "AccessKeyInfoBase": {
      "type": "object",
      "description": "The access key directly from target resource properties, which target service is Azure Resource, such as Microsoft.Storage",
      "properties": {
        "permissions": {
          "type": "array",
          "description": "Permissions of the accessKey. `Read` and `Write` are for Azure Cosmos DB and Azure App Configuration, `Listen`, `Send` and `Manage` are for Azure Event Hub and Azure Service Bus.",
          "items": {
            "$ref": "#/definitions/AccessKeyPermissions"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AuthInfoBase"
        }
      ],
      "x-ms-discriminator-value": "accessKey"
    },
    "AccessKeyPermissions": {
      "type": "string",
      "enum": [
        "Read",
        "Write",
        "Listen",
        "Send",
        "Manage"
      ],
      "x-ms-enum": {
        "name": "AccessKeyPermissions",
        "modelAsString": true,
        "values": [
          {
            "name": "Read",
            "value": "Read"
          },
          {
            "name": "Write",
            "value": "Write"
          },
          {
            "name": "Listen",
            "value": "Listen"
          },
          {
            "name": "Send",
            "value": "Send"
          },
          {
            "name": "Manage",
            "value": "Manage"
          }
        ]
      }
    },
    "AllowType": {
      "type": "string",
      "description": "Whether to allow firewall rules.",
      "enum": [
        "true",
        "false"
      ],
      "x-ms-enum": {
        "name": "AllowType",
        "modelAsString": true,
        "values": [
          {
            "name": "true",
            "value": "true"
          },
          {
            "name": "false",
            "value": "false"
          }
        ]
      }
    },
    "AuthInfoBase": {
      "type": "object",
      "description": "The authentication info",
      "properties": {
        "authType": {
          "$ref": "#/definitions/AuthType",
          "description": "The authentication type."
        },
        "authMode": {
          "$ref": "#/definitions/AuthMode",
          "description": "Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth."
        }
      },
      "discriminator": "authType",
      "required": [
        "authType"
      ]
    },
    "AuthMode": {
      "type": "string",
      "description": "Indicates how to apply the authentication configuration operations.",
      "enum": [
        "optInAllAuth",
        "optOutAllAuth"
      ],
      "x-ms-enum": {
        "name": "AuthMode",
        "modelAsString": true,
        "values": [
          {
            "name": "optInAllAuth",
            "value": "optInAllAuth",
            "description": "Default authentication configuration according to the authentication type."
          },
          {
            "name": "optOutAllAuth",
            "value": "optOutAllAuth",
            "description": "Skip all authentication configuration such as enabling managed identity and granting RBAC roles"
          }
        ]
      }
    },
    "AuthType": {
      "type": "string",
      "description": "The authentication type.",
      "enum": [
        "systemAssignedIdentity",
        "userAssignedIdentity",
        "servicePrincipalSecret",
        "servicePrincipalCertificate",
        "secret",
        "accessKey",
        "userAccount",
        "easyAuthMicrosoftEntraID"
      ],
      "x-ms-enum": {
        "name": "AuthType",
        "modelAsString": true,
        "values": [
          {
            "name": "systemAssignedIdentity",
            "value": "systemAssignedIdentity"
          },
          {
            "name": "userAssignedIdentity",
            "value": "userAssignedIdentity"
          },
          {
            "name": "servicePrincipalSecret",
            "value": "servicePrincipalSecret"
          },
          {
            "name": "servicePrincipalCertificate",
            "value": "servicePrincipalCertificate"
          },
          {
            "name": "secret",
            "value": "secret"
          },
          {
            "name": "accessKey",
            "value": "accessKey"
          },
          {
            "name": "userAccount",
            "value": "userAccount"
          },
          {
            "name": "easyAuthMicrosoftEntraID",
            "value": "easyAuthMicrosoftEntraID"
          }
        ]
      }
    },
    "Azure.ResourceManager.ArmResponse<DryrunResource>": {
      "type": "object",
      "description": "Azure operation completed successfully.",
      "properties": {
        "body": {
          "$ref": "#/definitions/DryrunResource",
          "description": "The body type of the operation request or response."
        }
      },
      "required": [
        "body"
      ]
    },
    "Azure.ResourceManager.ArmResponse<ValidateOperationResult>": {
      "type": "object",
      "description": "Azure operation completed successfully.",
      "properties": {
        "body": {
          "$ref": "#/definitions/ValidateOperationResult",
          "description": "The body type of the operation request or response."
        }
      },
      "required": [
        "body"
      ]
    },
    "Azure.ResourceManager.CommonTypes.ActionType": {
      "type": "string",
      "description": "Extensible enum. Indicates the action type. \"Internal\" refers to actions that are for internal only APIs.",
      "enum": [
        "Internal"
      ],
      "x-ms-enum": {
        "name": "ActionType",
        "modelAsString": true,
        "values": [
          {
            "name": "Internal",
            "value": "Internal",
            "description": "Actions are for internal-only APIs."
          }
        ]
      }
    },
    "AzureAppConfigProperties": {
      "type": "object",
      "description": "The resource properties when type is Azure App Configuration",
      "properties": {
        "connectWithKubernetesExtension": {
          "type": "boolean",
          "description": "True if connection enables app configuration kubernetes extension.",
          "x-nullable": true
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AzureResourcePropertiesBase"
        }
      ],
      "x-ms-discriminator-value": "AppConfig"
    },
    "AzureKeyVaultProperties": {
      "type": "object",
      "description": "The resource properties when type is Azure Key Vault",
      "properties": {
        "connectAsKubernetesCsiDriver": {
          "type": "boolean",
          "description": "True if connect via Kubernetes CSI Driver.",
          "x-nullable": true
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AzureResourcePropertiesBase"
        }
      ],
      "x-ms-discriminator-value": "KeyVault"
    },
    "AzureResource": {
      "type": "object",
      "description": "The azure resource info when target service type is AzureResource",
      "properties": {
        "id": {
          "type": "string",
          "description": "The Id of azure resource."
        },
        "resourceProperties": {
          "$ref": "#/definitions/AzureResourcePropertiesBase",
          "description": "The azure resource connection related properties.",
          "x-nullable": true
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/TargetServiceBase"
        }
      ],
      "x-ms-discriminator-value": "AzureResource"
    },
    "AzureResourcePropertiesBase": {
      "type": "object",
      "description": "The azure resource properties",
      "properties": {
        "type": {
          "$ref": "#/definitions/AzureResourceType",
          "description": "The azure resource type."
        }
      },
      "discriminator": "type",
      "required": [
        "type"
      ]
    },
    "AzureResourceType": {
      "type": "string",
      "description": "The azure resource type.",
      "enum": [
        "KeyVault",
        "AppConfig"
      ],
      "x-ms-enum": {
        "name": "AzureResourceType",
        "modelAsString": true,
        "values": [
          {
            "name": "KeyVault",
            "value": "KeyVault"
          },
          {
            "name": "AppConfig",
            "value": "AppConfig"
          }
        ]
      }
    },
    "BasicErrorDryrunPrerequisiteResult": {
      "type": "object",
      "description": "The represent of basic error",
      "properties": {
        "code": {
          "type": "string",
          "description": "The error code."
        },
        "message": {
          "type": "string",
          "description": "The error message."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/DryrunPrerequisiteResult"
        }
      ],
      "x-ms-discriminator-value": "basicError"
    },
    "ClientType": {
      "type": "string",
      "description": "The application client type",
      "enum": [
        "none",
        "dotnet",
        "java",
        "python",
        "go",
        "php",
        "ruby",
        "django",
        "nodejs",
        "springBoot",
        "kafka-springBoot",
        "jms-springBoot",
        "dapr"
      ],
      "x-ms-enum": {
        "name": "ClientType",
        "modelAsString": true,
        "values": [
          {
            "name": "none",
            "value": "none"
          },
          {
            "name": "dotnet",
            "value": "dotnet"
          },
          {
            "name": "java",
            "value": "java"
          },
          {
            "name": "python",
            "value": "python"
          },
          {
            "name": "go",
            "value": "go"
          },
          {
            "name": "php",
            "value": "php"
          },
          {
            "name": "ruby",
            "value": "ruby"
          },
          {
            "name": "django",
            "value": "django"
          },
          {
            "name": "nodejs",
            "value": "nodejs"
          },
          {
            "name": "springBoot",
            "value": "springBoot"
          },
          {
            "name": "kafka-springBoot",
            "value": "kafka-springBoot"
          },
          {
            "name": "jms-springBoot",
            "value": "jms-springBoot"
          },
          {
            "name": "dapr",
            "value": "dapr"
          }
        ]
      }
    },
    "ConfigurationInfo": {
      "type": "object",
      "description": "The configuration information, used to generate configurations or save to applications",
      "properties": {
        "deleteOrUpdateBehavior": {
          "$ref": "#/definitions/DeleteOrUpdateBehavior",
          "description": "Indicates whether to clean up previous operation when Linker is updating or deleting"
        },
        "action": {
          "$ref": "#/definitions/Azure.ResourceManager.CommonTypes.ActionType",
          "description": "Optional, indicate whether to apply configurations on source application. If enable, generate configurations and applied to the source application. Default is enable. If optOut, no configuration change will be made on source."
        },
        "customizedKeys": {
          "type": "object",
          "description": "Optional. A dictionary of default key name and customized key name mapping. If not specified, default key name will be used for generate configurations",
          "additionalProperties": {
            "type": "string"
          }
        },
        "daprProperties": {
          "$ref": "#/definitions/DaprProperties",
          "description": "Indicates some additional properties for dapr client type"
        },
        "additionalConfigurations": {
          "type": "object",
          "description": "A dictionary of additional configurations to be added. Service will auto generate a set of basic configurations and this property is to full fill more customized configurations",
          "additionalProperties": {
            "type": "string"
          }
        },
        "additionalConnectionStringProperties": {
          "type": "object",
          "description": "A dictionary of additional properties to be added in the end of connection string.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "configurationStore": {
          "$ref": "#/definitions/ConfigurationStore",
          "description": "An option to store configuration into different place",
          "x-nullable": true
        }
      }
    },
    "ConfigurationName": {
      "type": "object",
      "description": "The configuration names.",
      "properties": {
        "value": {
          "type": "string"
        },
        "description": {
          "type": "string",
          "description": "Description for the configuration name."
        },
        "required": {
          "type": "boolean",
          "description": "Represent the configuration is required or not"
        }
      }
    },
    "ConfigurationNameItem": {
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/ConfigurationNames",
          "description": "The result detail.",
          "x-nullable": true,
          "x-ms-client-flatten": true
        }
      }
    },
    "ConfigurationNameResult": {
      "type": "object",
      "description": "Configuration Name list which will be set based on different target resource, client type, auth type.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The ConfigurationNameItem items on this page",
          "items": {
            "$ref": "#/definitions/ConfigurationNameItem"
          },
          "x-ms-identifiers": []
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "ConfigurationNames": {
      "type": "object",
      "description": "The configuration names which will be set based on specific target resource, client type, auth type.",
      "properties": {
        "targetService": {
          "type": "string",
          "description": "The target service provider name and resource name."
        },
        "clientType": {
          "$ref": "#/definitions/ClientType",
          "description": "The client type for configuration names."
        },
        "authType": {
          "$ref": "#/definitions/AuthType",
          "description": "The auth type."
        },
        "secretType": {
          "$ref": "#/definitions/SecretSourceType",
          "description": "Indicates where the secrets in configuration from. Used when secrets are from Keyvault."
        },
        "daprProperties": {
          "$ref": "#/definitions/DaprProperties",
          "description": "Deprecated, please use #/definitions/DaprConfigurationList instead"
        },
        "names": {
          "type": "array",
          "description": "The configuration names to be set in compute service environment.",
          "items": {
            "$ref": "#/definitions/ConfigurationName"
          },
          "x-ms-identifiers": []
        }
      }
    },
    "ConfigurationResult": {
      "type": "object",
      "description": "Configurations for source resource, include appSettings, connectionString and serviceBindings",
      "properties": {
        "configurations": {
          "type": "array",
          "description": "The configuration properties for source resource.",
          "items": {
            "$ref": "#/definitions/SourceConfiguration"
          },
          "x-ms-identifiers": [
            "name"
          ]
        }
      }
    },
    "ConfigurationStore": {
      "type": "object",
      "description": "An option to store configuration into different place",
      "properties": {
        "appConfigurationId": {
          "type": "string",
          "description": "The app configuration id to store configuration",
          "x-nullable": true
        }
      }
    },
    "ConfluentBootstrapServer": {
      "type": "object",
      "description": "The service properties when target service type is ConfluentBootstrapServer",
      "properties": {
        "endpoint": {
          "type": "string",
          "description": "The endpoint of service."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/TargetServiceBase"
        }
      ],
      "x-ms-discriminator-value": "ConfluentBootstrapServer"
    },
    "ConfluentSchemaRegistry": {
      "type": "object",
      "description": "The service properties when target service type is ConfluentSchemaRegistry",
      "properties": {
        "endpoint": {
          "type": "string",
          "description": "The endpoint of service."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/TargetServiceBase"
        }
      ],
      "x-ms-discriminator-value": "ConfluentSchemaRegistry"
    },
    "CreateOrUpdateDryrunParameters": {
      "type": "object",
      "description": "The dryrun parameters for creation or update a linker",
      "properties": {
        "targetService": {
          "$ref": "#/definitions/TargetServiceBase",
          "description": "The target service properties"
        },
        "authInfo": {
          "$ref": "#/definitions/AuthInfoBase",
          "description": "The authentication type."
        },
        "clientType": {
          "$ref": "#/definitions/ClientType",
          "description": "The application client type"
        },
        "provisioningState": {
          "type": "string",
          "description": "The provisioning state.",
          "readOnly": true
        },
        "vNetSolution": {
          "$ref": "#/definitions/VNetSolution",
          "description": "The VNet solution.",
          "x-nullable": true
        },
        "secretStore": {
          "$ref": "#/definitions/SecretStore",
          "description": "An option to store secret value in secure place",
          "x-nullable": true
        },
        "scope": {
          "type": "string",
          "description": "connection scope in source service.",
          "x-nullable": true
        },
        "publicNetworkSolution": {
          "$ref": "#/definitions/PublicNetworkSolution",
          "description": "The network solution.",
          "x-nullable": true
        },
        "configurationInfo": {
          "$ref": "#/definitions/ConfigurationInfo",
          "description": "The connection information consumed by applications, including secrets, connection strings.",
          "x-nullable": true
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/DryrunParameters"
        }
      ],
      "x-ms-discriminator-value": "createOrUpdate"
    },
    "DaprBindingComponentDirection": {
      "type": "string",
      "description": "The direction supported by the dapr binding component",
      "enum": [
        "input",
        "output"
      ],
      "x-ms-enum": {
        "name": "DaprBindingComponentDirection",
        "modelAsString": true,
        "values": [
          {
            "name": "input",
            "value": "input"
          },
          {
            "name": "output",
            "value": "output"
          }
        ]
      }
    },
    "DaprConfigurationList": {
      "type": "object",
      "description": "Dapr configuration list supported by Service Connector",
      "properties": {
        "value": {
          "type": "array",
          "description": "The DaprConfigurationResource items on this page",
          "items": {
            "$ref": "#/definitions/DaprConfigurationResource"
          },
          "x-ms-identifiers": []
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "DaprConfigurationProperties": {
      "type": "object",
      "properties": {
        "targetType": {
          "type": "string",
          "description": "Supported target resource type, extract from resource id, uppercase"
        },
        "authType": {
          "$ref": "#/definitions/AuthType",
          "description": "The authentication type."
        },
        "daprProperties": {
          "$ref": "#/definitions/DaprProperties",
          "description": "Indicates some additional properties for dapr client type"
        }
      }
    },
    "DaprConfigurationResource": {
      "type": "object",
      "description": "Represent one resource of the dapr configuration list",
      "properties": {
        "properties": {
          "$ref": "#/definitions/DaprConfigurationProperties",
          "description": "The properties of the dapr configuration.",
          "x-ms-client-flatten": true
        }
      }
    },
    "DaprMetadata": {
      "type": "object",
      "description": "The dapr component metadata.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Metadata property name."
        },
        "value": {
          "type": "string",
          "description": "Metadata property value."
        },
        "secretRef": {
          "type": "string",
          "description": "The secret name where dapr could get value"
        },
        "description": {
          "type": "string",
          "description": "The description of the metadata, returned from configuration api"
        },
        "required": {
          "$ref": "#/definitions/DaprMetadataRequired",
          "description": "The value indicating whether the metadata is required or not"
        }
      }
    },
    "DaprMetadataRequired": {
      "type": "string",
      "description": "The value indicating whether the metadata is required or not",
      "enum": [
        "true",
        "false"
      ],
      "x-ms-enum": {
        "name": "DaprMetadataRequired",
        "modelAsString": true,
        "values": [
          {
            "name": "true",
            "value": "true"
          },
          {
            "name": "false",
            "value": "false"
          }
        ]
      }
    },
    "DaprProperties": {
      "type": "object",
      "description": "Indicates some additional properties for dapr client type",
      "properties": {
        "version": {
          "type": "string",
          "description": "The dapr component version",
          "x-nullable": true
        },
        "componentType": {
          "type": "string",
          "description": "The dapr component type",
          "x-nullable": true
        },
        "secretStoreComponent": {
          "type": "string",
          "description": "The name of a secret store dapr to retrieve secret",
          "x-nullable": true
        },
        "metadata": {
          "type": "array",
          "description": "Additional dapr metadata",
          "items": {
            "$ref": "#/definitions/DaprMetadata"
          },
          "x-ms-identifiers": [
            "name"
          ]
        },
        "scopes": {
          "type": "array",
          "description": "The dapr component scopes",
          "items": {
            "type": "string"
          }
        },
        "runtimeVersion": {
          "type": "string",
          "description": "The runtime version supported by the properties",
          "x-nullable": true,
          "readOnly": true
        },
        "bindingComponentDirection": {
          "$ref": "#/definitions/DaprBindingComponentDirection",
          "description": "The direction supported by the dapr binding component",
          "x-nullable": true,
          "readOnly": true
        }
      }
    },
    "DeleteOrUpdateBehavior": {
      "type": "string",
      "description": "The cleanup behavior to indicate whether clean up operation when resource is deleted or updated",
      "enum": [
        "Default",
        "ForcedCleanup"
      ],
      "x-ms-enum": {
        "name": "DeleteOrUpdateBehavior",
        "modelAsString": true,
        "values": [
          {
            "name": "Default",
            "value": "Default"
          },
          {
            "name": "ForcedCleanup",
            "value": "ForcedCleanup"
          }
        ]
      }
    },
    "DryrunActionName": {
      "type": "string",
      "description": "The name of action for you dryrun job.",
      "enum": [
        "createOrUpdate"
      ],
      "x-ms-enum": {
        "name": "DryrunActionName",
        "modelAsString": true,
        "values": [
          {
            "name": "createOrUpdate",
            "value": "createOrUpdate"
          }
        ]
      }
    },
    "DryrunList": {
      "type": "object",
      "description": "The list of dryrun.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The DryrunResource items on this page",
          "items": {
            "$ref": "#/definitions/DryrunResource"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "DryrunOperationPreview": {
      "type": "object",
      "description": "The preview of the operations for creation",
      "properties": {
        "name": {
          "type": "string",
          "description": "The operation name"
        },
        "operationType": {
          "$ref": "#/definitions/DryrunPreviewOperationType",
          "description": "The operation type"
        },
        "description": {
          "type": "string",
          "description": "The description of the operation"
        },
        "action": {
          "type": "string",
          "description": "The action defined by RBAC, refer https://docs.microsoft.com/azure/role-based-access-control/role-definitions#actions-format"
        },
        "scope": {
          "type": "string",
          "description": "The scope of the operation, refer https://docs.microsoft.com/azure/role-based-access-control/scope-overview"
        }
      }
    },
    "DryrunParameters": {
      "type": "object",
      "description": "The parameters of the dryrun",
      "properties": {
        "actionName": {
          "$ref": "#/definitions/DryrunActionName",
          "description": "The name of action for you dryrun job."
        }
      },
      "discriminator": "actionName",
      "required": [
        "actionName"
      ]
    },
    "DryrunPatch": {
      "type": "object",
      "description": "a dryrun job to be updated.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/DryrunProperties",
          "description": "The properties of the dryrun job.",
          "x-ms-client-flatten": true
        }
      }
    },
    "DryrunPrerequisiteResult": {
      "type": "object",
      "description": "A result of dryrun",
      "properties": {
        "type": {
          "$ref": "#/definitions/DryrunPrerequisiteResultType",
          "description": "The type of dryrun result."
        }
      },
      "discriminator": "type",
      "required": [
        "type"
      ]
    },
    "DryrunPrerequisiteResultType": {
      "type": "string",
      "description": "The type of dryrun result.",
      "enum": [
        "basicError",
        "permissionsMissing"
      ],
      "x-ms-enum": {
        "name": "DryrunPrerequisiteResultType",
        "modelAsString": true,
        "values": [
          {
            "name": "basicError",
            "value": "basicError"
          },
          {
            "name": "permissionsMissing",
            "value": "permissionsMissing"
          }
        ]
      }
    },
    "DryrunPreviewOperationType": {
      "type": "string",
      "description": "The operation type",
      "enum": [
        "configConnection",
        "configNetwork",
        "configAuth"
      ],
      "x-ms-enum": {
        "name": "DryrunPreviewOperationType",
        "modelAsString": true,
        "values": [
          {
            "name": "configConnection",
            "value": "configConnection"
          },
          {
            "name": "configNetwork",
            "value": "configNetwork"
          },
          {
            "name": "configAuth",
            "value": "configAuth"
          }
        ]
      }
    },
    "DryrunProperties": {
      "type": "object",
      "description": "The properties of the dryrun job",
      "properties": {
        "parameters": {
          "$ref": "#/definitions/DryrunParameters",
          "description": "The parameters of the dryrun"
        },
        "prerequisiteResults": {
          "type": "array",
          "description": "the result of the dryrun",
          "items": {
            "$ref": "#/definitions/DryrunPrerequisiteResult"
          },
          "readOnly": true,
          "x-ms-identifiers": []
        },
        "operationPreviews": {
          "type": "array",
          "description": "the preview of the operations for creation",
          "items": {
            "$ref": "#/definitions/DryrunOperationPreview"
          },
          "readOnly": true,
          "x-ms-identifiers": []
        },
        "provisioningState": {
          "type": "string",
          "description": "The provisioning state.",
          "readOnly": true
        }
      }
    },
    "DryrunResource": {
      "type": "object",
      "description": "a dryrun job resource",
      "properties": {
        "properties": {
          "$ref": "#/definitions/DryrunProperties",
          "description": "The properties of the dryrun job.",
          "x-ms-client-flatten": true
        }
      },
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ProxyResource"
        }
      ]
    },
    "EasyAuthMicrosoftEntraIDAuthInfo": {
      "type": "object",
      "description": "The authentication info when authType is EasyAuth Microsoft Entra ID",
      "properties": {
        "clientId": {
          "type": "string",
          "description": "Application clientId for EasyAuth Microsoft Entra ID."
        },
        "secret": {
          "type": "string",
          "format": "password",
          "description": "Application Secret for EasyAuth Microsoft Entra ID.",
          "x-ms-secret": true
        },
        "deleteOrUpdateBehavior": {
          "$ref": "#/definitions/DeleteOrUpdateBehavior",
          "description": "Indicates whether to clean up previous operation when Linker is updating or deleting"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AuthInfoBase"
        }
      ],
      "x-ms-discriminator-value": "easyAuthMicrosoftEntraID"
    },
    "FabricPlatform": {
      "type": "object",
      "description": "The service properties when target service type is FabricPlatform",
      "properties": {
        "endpoint": {
          "type": "string",
          "description": "The endpoint of service."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/TargetServiceBase"
        }
      ],
      "x-ms-discriminator-value": "FabricPlatform"
    },
    "FirewallRules": {
      "type": "object",
      "description": "Target service's firewall rules. to allow connections from source service.",
      "properties": {
        "ipRanges": {
          "type": "array",
          "description": "This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account.",
          "items": {
            "type": "string"
          }
        },
        "azureServices": {
          "$ref": "#/definitions/AllowType",
          "description": "Allow Azure services to access the target service if true."
        },
        "callerClientIP": {
          "$ref": "#/definitions/AllowType",
          "description": "Allow caller client IP to access the target service if true. the property is used when connecting local application to target service."
        }
      }
    },
    "KeyVaultSecretReferenceSecretInfo": {
      "type": "object",
      "description": "The secret info when type is keyVaultSecretReference. It's for scenario that user provides a secret stored in user's keyvault and source is Azure Kubernetes. The key Vault's resource id is linked to secretStore.keyVaultId.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the Key Vault secret."
        },
        "version": {
          "type": "string",
          "description": "Version of the Key Vault secret.",
          "x-nullable": true
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/SecretInfoBase"
        }
      ],
      "x-ms-discriminator-value": "keyVaultSecretReference"
    },
    "KeyVaultSecretUriSecretInfo": {
      "type": "object",
      "description": "The secret info when type is keyVaultSecretUri. It's for scenario that user provides a secret stored in user's keyvault and source is Web App, Spring Cloud or Container App.",
      "properties": {
        "value": {
          "type": "string",
          "description": "URI to the keyvault secret"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/SecretInfoBase"
        }
      ],
      "x-ms-discriminator-value": "keyVaultSecretUri"
    },
    "LinkerConfigurationType": {
      "type": "string",
      "description": "Type of configuration to determine whether the configuration can be modified after creation. KeyvaultSecret means the configuration references a key vault secret, such as App Service/ACA key vault reference. Default means the configuration is real value, such as user name, raw secret, etc.",
      "enum": [
        "Default",
        "KeyVaultSecret"
      ],
      "x-ms-enum": {
        "name": "LinkerConfigurationType",
        "modelAsString": true,
        "values": [
          {
            "name": "Default",
            "value": "Default"
          },
          {
            "name": "KeyVaultSecret",
            "value": "KeyVaultSecret"
          }
        ]
      }
    },
    "LinkerPatch": {
      "type": "object",
      "description": "A Linker to be updated.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/LinkerProperties",
          "description": "Linker properties",
          "x-ms-client-flatten": true
        }
      }
    },
    "LinkerProperties": {
      "type": "object",
      "description": "The properties of the Linker.",
      "properties": {
        "targetService": {
          "$ref": "#/definitions/TargetServiceBase",
          "description": "The target service properties"
        },
        "authInfo": {
          "$ref": "#/definitions/AuthInfoBase",
          "description": "The authentication type."
        },
        "clientType": {
          "$ref": "#/definitions/ClientType",
          "description": "The application client type"
        },
        "provisioningState": {
          "type": "string",
          "description": "The provisioning state.",
          "readOnly": true
        },
        "vNetSolution": {
          "$ref": "#/definitions/VNetSolution",
          "description": "The VNet solution.",
          "x-nullable": true
        },
        "secretStore": {
          "$ref": "#/definitions/SecretStore",
          "description": "An option to store secret value in secure place",
          "x-nullable": true
        },
        "scope": {
          "type": "string",
          "description": "connection scope in source service.",
          "x-nullable": true
        },
        "publicNetworkSolution": {
          "$ref": "#/definitions/PublicNetworkSolution",
          "description": "The network solution.",
          "x-nullable": true
        },
        "configurationInfo": {
          "$ref": "#/definitions/ConfigurationInfo",
          "description": "The connection information consumed by applications, including secrets, connection strings.",
          "x-nullable": true
        }
      }
    },
    "LinkerResource": {
      "type": "object",
      "description": "Linker of source and target resource",
      "properties": {
        "properties": {
          "$ref": "#/definitions/LinkerProperties",
          "description": "The properties of the Linker.",
          "x-ms-client-flatten": true
        }
      },
      "required": [
        "properties"
      ],
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ProxyResource"
        }
      ]
    },
    "PermissionsMissingDryrunPrerequisiteResult": {
      "type": "object",
      "description": "The represent of missing permissions",
      "properties": {
        "scope": {
          "type": "string",
          "description": "The permission scope"
        },
        "permissions": {
          "type": "array",
          "description": "The permission list",
          "items": {
            "type": "string"
          }
        },
        "recommendedRole": {
          "type": "string",
          "description": "The recommended role to resolve permissions missing"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/DryrunPrerequisiteResult"
        }
      ],
      "x-ms-discriminator-value": "permissionsMissing"
    },
    "PublicNetworkSolution": {
      "type": "object",
      "description": "Indicates public network solution, include firewall rules",
      "properties": {
        "deleteOrUpdateBehavior": {
          "$ref": "#/definitions/DeleteOrUpdateBehavior",
          "description": "Indicates whether to clean up previous operation(such as firewall rules) when Linker is updating or deleting"
        },
        "action": {
          "$ref": "#/definitions/Azure.ResourceManager.CommonTypes.ActionType",
          "description": "Optional. Indicates public network solution. If enable, enable public network access of target service with best try. Default is enable. If optOut, opt out public network access configuration."
        },
        "firewallRules": {
          "$ref": "#/definitions/FirewallRules",
          "description": "Describe firewall rules of target service to make sure source application could connect to the target."
        }
      }
    },
    "ResourceList": {
      "type": "object",
      "description": "The list of Linker.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The LinkerResource items on this page",
          "items": {
            "$ref": "#/definitions/LinkerResource"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "SecretAuthInfo": {
      "type": "object",
      "description": "The authentication info when authType is secret",
      "properties": {
        "name": {
          "type": "string",
          "description": "Username or account name for secret auth.",
          "x-nullable": true
        },
        "secretInfo": {
          "$ref": "#/definitions/SecretInfoBase",
          "description": "Password or key vault secret for secret auth.",
          "x-nullable": true
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AuthInfoBase"
        }
      ],
      "x-ms-discriminator-value": "secret"
    },
    "SecretInfoBase": {
      "type": "object",
      "description": "The secret info",
      "properties": {
        "secretType": {
          "$ref": "#/definitions/SecretType",
          "description": "The secret type."
        }
      },
      "discriminator": "secretType",
      "required": [
        "secretType"
      ]
    },
    "SecretSourceType": {
      "type": "string",
      "description": "The type of secret source.",
      "enum": [
        "rawValue",
        "keyVaultSecret"
      ],
      "x-ms-enum": {
        "name": "SecretSourceType",
        "modelAsString": true,
        "values": [
          {
            "name": "rawValue",
            "value": "rawValue"
          },
          {
            "name": "keyVaultSecret",
            "value": "keyVaultSecret"
          }
        ]
      }
    },
    "SecretStore": {
      "type": "object",
      "description": "An option to store secret value in secure place",
      "properties": {
        "keyVaultId": {
          "type": "string",
          "description": "The key vault id to store secret",
          "x-nullable": true
        },
        "keyVaultSecretName": {
          "type": "string",
          "description": "The key vault secret name to store secret, only valid when storing one secret",
          "x-nullable": true
        }
      }
    },
    "SecretType": {
      "type": "string",
      "description": "The secret type.",
      "enum": [
        "rawValue",
        "keyVaultSecretUri",
        "keyVaultSecretReference"
      ],
      "x-ms-enum": {
        "name": "SecretType",
        "modelAsString": true,
        "values": [
          {
            "name": "rawValue",
            "value": "rawValue"
          },
          {
            "name": "keyVaultSecretUri",
            "value": "keyVaultSecretUri"
          },
          {
            "name": "keyVaultSecretReference",
            "value": "keyVaultSecretReference"
          }
        ]
      }
    },
    "SelfHostedServer": {
      "type": "object",
      "description": "The service properties when target service type is SelfHostedServer",
      "properties": {
        "endpoint": {
          "type": "string",
          "description": "The endpoint of service."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/TargetServiceBase"
        }
      ],
      "x-ms-discriminator-value": "SelfHostedServer"
    },
    "ServicePrincipalCertificateAuthInfo": {
      "type": "object",
      "description": "The authentication info when authType is servicePrincipal certificate",
      "properties": {
        "clientId": {
          "type": "string",
          "description": "Application clientId for servicePrincipal auth."
        },
        "principalId": {
          "type": "string",
          "description": "Principal Id for servicePrincipal auth."
        },
        "certificate": {
          "type": "string",
          "format": "password",
          "description": "ServicePrincipal certificate for servicePrincipal auth.",
          "x-ms-secret": true
        },
        "deleteOrUpdateBehavior": {
          "$ref": "#/definitions/DeleteOrUpdateBehavior",
          "description": "Indicates whether to clean up previous operation when Linker is updating or deleting"
        },
        "roles": {
          "type": "array",
          "description": "Optional, this value specifies the Azure roles to be assigned. Automatically",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "clientId",
        "principalId",
        "certificate"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AuthInfoBase"
        }
      ],
      "x-ms-discriminator-value": "servicePrincipalCertificate"
    },
    "ServicePrincipalSecretAuthInfo": {
      "type": "object",
      "description": "The authentication info when authType is servicePrincipal secret",
      "properties": {
        "userName": {
          "type": "string",
          "description": "Username created in the database which is mapped to a user in AAD."
        },
        "clientId": {
          "type": "string",
          "description": "ServicePrincipal application clientId for servicePrincipal auth."
        },
        "principalId": {
          "type": "string",
          "description": "Principal Id for servicePrincipal auth."
        },
        "secret": {
          "type": "string",
          "format": "password",
          "description": "Secret for servicePrincipal auth.",
          "x-ms-secret": true
        },
        "deleteOrUpdateBehavior": {
          "$ref": "#/definitions/DeleteOrUpdateBehavior",
          "description": "Indicates whether to clean up previous operation when Linker is updating or deleting"
        },
        "roles": {
          "type": "array",
          "description": "Optional, this value specifies the Azure roles to be assigned. Automatically",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "clientId",
        "principalId",
        "secret"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AuthInfoBase"
        }
      ],
      "x-ms-discriminator-value": "servicePrincipalSecret"
    },
    "SourceConfiguration": {
      "type": "object",
      "description": "A configuration item for source resource",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of setting."
        },
        "value": {
          "type": "string",
          "description": "The value of setting",
          "x-nullable": true
        },
        "configType": {
          "$ref": "#/definitions/LinkerConfigurationType",
          "description": "The type of setting",
          "readOnly": true
        },
        "keyVaultReferenceIdentity": {
          "type": "string",
          "description": "The identity for key vault reference, system or user-assigned managed identity ID",
          "x-nullable": true
        },
        "description": {
          "type": "string",
          "description": "Descriptive information for the configuration",
          "x-nullable": true
        }
      }
    },
    "SystemAssignedIdentityAuthInfo": {
      "type": "object",
      "description": "The authentication info when authType is systemAssignedIdentity",
      "properties": {
        "userName": {
          "type": "string",
          "description": "Username created in the database which is mapped to a user in AAD."
        },
        "deleteOrUpdateBehavior": {
          "$ref": "#/definitions/DeleteOrUpdateBehavior",
          "description": "Indicates whether to clean up previous operation when Linker is updating or deleting"
        },
        "roles": {
          "type": "array",
          "description": "Optional, this value specifies the Azure role to be assigned",
          "items": {
            "type": "string"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AuthInfoBase"
        }
      ],
      "x-ms-discriminator-value": "systemAssignedIdentity"
    },
    "TargetServiceBase": {
      "type": "object",
      "description": "The target service properties",
      "properties": {
        "type": {
          "$ref": "#/definitions/TargetServiceType",
          "description": "The target service type."
        }
      },
      "discriminator": "type",
      "required": [
        "type"
      ]
    },
    "TargetServiceType": {
      "type": "string",
      "description": "The target service type.",
      "enum": [
        "AzureResource",
        "ConfluentBootstrapServer",
        "ConfluentSchemaRegistry",
        "SelfHostedServer",
        "FabricPlatform"
      ],
      "x-ms-enum": {
        "name": "TargetServiceType",
        "modelAsString": true,
        "values": [
          {
            "name": "AzureResource",
            "value": "AzureResource"
          },
          {
            "name": "ConfluentBootstrapServer",
            "value": "ConfluentBootstrapServer"
          },
          {
            "name": "ConfluentSchemaRegistry",
            "value": "ConfluentSchemaRegistry"
          },
          {
            "name": "SelfHostedServer",
            "value": "SelfHostedServer"
          },
          {
            "name": "FabricPlatform",
            "value": "FabricPlatform"
          }
        ]
      }
    },
    "UserAccountAuthInfo": {
      "type": "object",
      "description": "The authentication info when authType is user account",
      "properties": {
        "userName": {
          "type": "string",
          "description": "Username created in the database which is mapped to a user in AAD."
        },
        "principalId": {
          "type": "string",
          "description": "Principal Id for user account."
        },
        "deleteOrUpdateBehavior": {
          "$ref": "#/definitions/DeleteOrUpdateBehavior",
          "description": "Indicates whether to clean up previous operation when Linker is updating or deleting"
        },
        "roles": {
          "type": "array",
          "description": "Optional, this value specifies the Azure roles to be assigned. Automatically",
          "items": {
            "type": "string"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AuthInfoBase"
        }
      ],
      "x-ms-discriminator-value": "userAccount"
    },
    "UserAssignedIdentityAuthInfo": {
      "type": "object",
      "description": "The authentication info when authType is userAssignedIdentity",
      "properties": {
        "userName": {
          "type": "string",
          "description": "Username created in the database which is mapped to a user in AAD."
        },
        "clientId": {
          "type": "string",
          "description": "Client Id for userAssignedIdentity."
        },
        "subscriptionId": {
          "type": "string",
          "description": "Subscription id for userAssignedIdentity."
        },
        "deleteOrUpdateBehavior": {
          "$ref": "#/definitions/DeleteOrUpdateBehavior",
          "description": "Indicates whether to clean up previous operation when Linker is updating or deleting"
        },
        "roles": {
          "type": "array",
          "description": "Optional, this value specifies the Azure role to be assigned",
          "items": {
            "type": "string"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AuthInfoBase"
        }
      ],
      "x-ms-discriminator-value": "userAssignedIdentity"
    },
    "VNetSolution": {
      "type": "object",
      "description": "The VNet solution for linker",
      "properties": {
        "type": {
          "$ref": "#/definitions/VNetSolutionType",
          "description": "Type of VNet solution.",
          "x-nullable": true
        },
        "deleteOrUpdateBehavior": {
          "$ref": "#/definitions/DeleteOrUpdateBehavior",
          "description": "Indicates whether to clean up previous operation when Linker is updating or deleting"
        }
      }
    },
    "VNetSolutionType": {
      "type": "string",
      "description": "Type of VNet solution.",
      "enum": [
        "serviceEndpoint",
        "privateLink"
      ],
      "x-ms-enum": {
        "name": "VNetSolutionType",
        "modelAsString": true,
        "values": [
          {
            "name": "serviceEndpoint",
            "value": "serviceEndpoint"
          },
          {
            "name": "privateLink",
            "value": "privateLink"
          }
        ]
      }
    },
    "ValidateOperationResult": {
      "type": "object",
      "description": "The validation operation result for a Linker.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/ValidateResult",
          "description": "The validation result detail.",
          "x-nullable": true,
          "x-ms-client-flatten": true
        },
        "resourceId": {
          "type": "string",
          "description": "Validated Linker id.",
          "x-nullable": true
        },
        "status": {
          "type": "string",
          "description": "Validation operation status.",
          "x-nullable": true
        }
      }
    },
    "ValidateResult": {
      "type": "object",
      "description": "The validation result for a Linker.",
      "properties": {
        "linkerName": {
          "type": "string",
          "description": "The linker name.",
          "x-nullable": true
        },
        "isConnectionAvailable": {
          "type": "boolean",
          "description": "A boolean value indicating whether the connection is available or not",
          "x-nullable": true
        },
        "reportStartTimeUtc": {
          "type": "string",
          "format": "date-time",
          "description": "The start time of the validation report.",
          "x-nullable": true
        },
        "reportEndTimeUtc": {
          "type": "string",
          "format": "date-time",
          "description": "The end time of the validation report.",
          "x-nullable": true
        },
        "sourceId": {
          "type": "string",
          "description": "The resource id of the Linker source application.",
          "x-nullable": true
        },
        "targetId": {
          "type": "string",
          "description": "The resource Id of target service.",
          "x-nullable": true
        },
        "authType": {
          "$ref": "#/definitions/AuthType",
          "description": "The authentication type.",
          "x-nullable": true
        },
        "validationDetail": {
          "type": "array",
          "description": "The detail of validation result",
          "items": {
            "$ref": "#/definitions/ValidationResultItem"
          },
          "x-ms-identifiers": [
            "name"
          ]
        }
      }
    },
    "ValidationResultItem": {
      "type": "object",
      "description": "The validation item for a Linker.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The validation item name."
        },
        "description": {
          "type": "string",
          "description": "The display name of validation item",
          "x-nullable": true
        },
        "result": {
          "$ref": "#/definitions/ValidationResultStatus",
          "description": "The result of validation",
          "x-nullable": true
        },
        "errorMessage": {
          "type": "string",
          "description": "The error message of validation result",
          "x-nullable": true
        },
        "errorCode": {
          "type": "string",
          "description": "The error code of validation result",
          "x-nullable": true
        }
      }
    },
    "ValidationResultStatus": {
      "type": "string",
      "description": "The result of validation",
      "enum": [
        "success",
        "failure",
        "warning"
      ],
      "x-ms-enum": {
        "name": "ValidationResultStatus",
        "modelAsString": true,
        "values": [
          {
            "name": "success",
            "value": "success"
          },
          {
            "name": "failure",
            "value": "failure"
          },
          {
            "name": "warning",
            "value": "warning"
          }
        ]
      }
    },
    "ValueSecretInfo": {
      "type": "object",
      "description": "The secret info when type is rawValue. It's for scenarios that user input the secret.",
      "properties": {
        "value": {
          "type": "string",
          "format": "password",
          "description": "The actual value of the secret.",
          "x-nullable": true,
          "x-ms-secret": true
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/SecretInfoBase"
        }
      ],
      "x-ms-discriminator-value": "rawValue"
    }
  },
  "parameters": {}
}
