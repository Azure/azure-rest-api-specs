{
  "swagger": "2.0",
  "info": {
    "title": "Astronomer.Astro",
    "version": "2023-07-01-preview",
    "x-typespec-generated": [
      {
        "emitter": "@azure-tools/typespec-autorest"
      }
    ]
  },
  "schemes": [
    "https"
  ],
  "host": "management.azure.com",
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ],
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "description": "Azure Active Directory OAuth2 Flow.",
      "flow": "implicit",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      }
    }
  },
  "tags": [
    {
      "name": "Operations"
    },
    {
      "name": "Organizations"
    }
  ],
  "paths": {
    "/providers/Astronomer.Astro/operations": {
      "get": {
        "tags": [
          "Operations"
        ],
        "operationId": "Operations_List",
        "description": "List the operations for the provider",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/OperationListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "Operations_List - generated by [MaximumSet] rule": {
            "$ref": "./examples/Operations_List_MaximumSet_Gen.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Astronomer.Astro/organizations": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "operationId": "Organizations_ListBySubscription",
        "description": "List OrganizationResource resources by subscription ID",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/OrganizationResourceListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "Organizations_ListBySubscription - generated by [MaximumSet] rule": {
            "$ref": "./examples/Organizations_ListBySubscription_MaximumSet_Gen.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Astronomer.Astro/organizations": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "operationId": "Organizations_ListByResourceGroup",
        "description": "List OrganizationResource resources by resource group",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/OrganizationResourceListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "Organizations_ListByResourceGroup - generated by [MaximumSet] rule": {
            "$ref": "./examples/Organizations_ListByResourceGroup_MaximumSet_Gen.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Astronomer.Astro/organizations/{organizationName}": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "operationId": "Organizations_Get",
        "description": "Get a OrganizationResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "organizationName",
            "in": "path",
            "required": true,
            "description": "Name of the Organizations resource",
            "type": "string",
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\-.: ]*$",
            "minLength": 1,
            "maxLength": 50
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/OrganizationResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Organizations_Get - generated by [MaximumSet] rule": {
            "$ref": "./examples/Organizations_Get_MaximumSet_Gen.json"
          }
        }
      },
      "put": {
        "tags": [
          "Organizations"
        ],
        "operationId": "Organizations_CreateOrUpdate",
        "description": "Create a OrganizationResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "organizationName",
            "in": "path",
            "required": true,
            "description": "Name of the Organizations resource",
            "type": "string",
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\-.: ]*$",
            "minLength": 1,
            "maxLength": 50
          },
          {
            "name": "resource",
            "in": "body",
            "required": true,
            "description": "Resource create parameters.",
            "schema": {
              "$ref": "#/definitions/OrganizationResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/OrganizationResource"
            }
          },
          "201": {
            "description": "ARM create operation completed successfully.",
            "headers": {
              "Retry-After": {
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status.",
                "type": "integer",
                "format": "int32"
              }
            },
            "schema": {
              "$ref": "#/definitions/OrganizationResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Organizations_CreateOrUpdate - generated by [MaximumSet] rule": {
            "$ref": "./examples/Organizations_CreateOrUpdate_MaximumSet_Gen.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      },
      "delete": {
        "tags": [
          "Organizations"
        ],
        "operationId": "Organizations_Delete",
        "description": "Delete a OrganizationResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "organizationName",
            "in": "path",
            "required": true,
            "description": "Name of the Organizations resource",
            "type": "string",
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\-.: ]*$",
            "minLength": 1,
            "maxLength": 50
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Retry-After": {
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status.",
                "type": "integer",
                "format": "int32"
              },
              "Location": {
                "description": "The Location header contains the URL where the status of the long running operation can be checked.",
                "type": "string"
              }
            }
          },
          "204": {
            "description": "Resource deleted successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Organizations_Delete - generated by [MaximumSet] rule": {
            "$ref": "./examples/Organizations_Delete_MaximumSet_Gen.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    }
  },
  "definitions": {
    "Azure.ResourceManager.ResourceProvisioningState": {
      "type": "string",
      "description": "The provisioning state of a resource type.",
      "enum": [
        "Succeeded",
        "Failed",
        "Canceled"
      ],
      "x-ms-enum": {
        "name": "ResourceProvisioningState",
        "modelAsString": true,
        "values": [
          {
            "name": "Succeeded",
            "value": "Succeeded",
            "description": "Resource has been created."
          },
          {
            "name": "Failed",
            "value": "Failed",
            "description": "Resource creation failed."
          },
          {
            "name": "Canceled",
            "value": "Canceled",
            "description": "Resource creation was canceled."
          }
        ]
      }
    },
    "LiftrBase.Data.OrganizationProperties": {
      "type": "object",
      "properties": {
        "marketplace": {
          "$ref": "#/definitions/LiftrBase.MarketplaceDetails",
          "description": "Marketplace details of the resource.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "user": {
          "$ref": "#/definitions/LiftrBase.UserDetails",
          "description": "Details of the user."
        },
        "provisioningState": {
          "$ref": "#/definitions/Azure.ResourceManager.ResourceProvisioningState",
          "description": "Provisioning state of the resource.",
          "readOnly": true
        },
        "partnerOrganizationProperties": {
          "$ref": "#/definitions/LiftrBase.Data.PartnerOrganizationProperties",
          "description": "Organization properties"
        }
      },
      "description": "Properties specific to Data Organization resource",
      "required": [
        "marketplace",
        "user"
      ]
    },
    "LiftrBase.Data.PartnerOrganizationProperties": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string",
          "description": "Organization Id in partner's system"
        },
        "workspaceId": {
          "type": "string",
          "description": "Workspace Id in partner's system"
        },
        "organizationName": {
          "type": "string",
          "description": "Organization name in partner's system",
          "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\-.: ]*$",
          "minLength": 1,
          "maxLength": 50
        },
        "workspaceName": {
          "type": "string",
          "description": "Workspace name in partner's system",
          "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_\\-.: ]*$",
          "minLength": 1,
          "maxLength": 50
        },
        "singleSignOnProperties": {
          "$ref": "#/definitions/LiftrBase.SingleSignOnProperties",
          "description": "Single Sign On properties for the organization"
        }
      },
      "description": "Properties specific to Partner's organization",
      "required": [
        "organizationName"
      ]
    },
    "LiftrBase.MarketplaceDetails": {
      "type": "object",
      "properties": {
        "subscriptionId": {
          "type": "string",
          "description": "Azure subscription id for the the marketplace offer is purchased from"
        },
        "subscriptionStatus": {
          "$ref": "#/definitions/LiftrBase.MarketplaceSubscriptionStatus",
          "description": "Marketplace subscription status"
        },
        "offerDetails": {
          "$ref": "#/definitions/LiftrBase.OfferDetails",
          "description": "Offer details for the marketplace that is selected by the user"
        }
      },
      "description": "Marketplace details for an organization",
      "required": [
        "subscriptionId",
        "offerDetails"
      ]
    },
    "LiftrBase.MarketplaceSubscriptionStatus": {
      "type": "string",
      "description": "Marketplace subscription status of a resource.",
      "enum": [
        "PendingFulfillmentStart",
        "Subscribed",
        "Suspended",
        "Unsubscribed"
      ],
      "x-ms-enum": {
        "name": "MarketplaceSubscriptionStatus",
        "modelAsString": true,
        "values": [
          {
            "name": "PendingFulfillmentStart",
            "value": "PendingFulfillmentStart",
            "description": "Purchased but not yet activated"
          },
          {
            "name": "Subscribed",
            "value": "Subscribed",
            "description": "Marketplace subscription is activated"
          },
          {
            "name": "Suspended",
            "value": "Suspended",
            "description": "This state indicates that a customer's payment for the Marketplace service was not received"
          },
          {
            "name": "Unsubscribed",
            "value": "Unsubscribed",
            "description": "Customer has cancelled the subscription"
          }
        ]
      }
    },
    "LiftrBase.OfferDetails": {
      "type": "object",
      "properties": {
        "publisherId": {
          "type": "string",
          "description": "Publisher Id for the marketplace offer"
        },
        "offerId": {
          "type": "string",
          "description": "Offer Id for the marketplace offer"
        },
        "planId": {
          "type": "string",
          "description": "Plan Id for the marketplace offer"
        },
        "planName": {
          "type": "string",
          "description": "Plan Name for the marketplace offer"
        },
        "termUnit": {
          "type": "string",
          "description": "Plan Display Name for the marketplace offer"
        },
        "termId": {
          "type": "string",
          "description": "Plan Display Name for the marketplace offer"
        }
      },
      "description": "Offer details for the marketplace that is selected by the user",
      "required": [
        "publisherId",
        "offerId",
        "planId"
      ]
    },
    "LiftrBase.SingleSignOnProperties": {
      "type": "object",
      "properties": {
        "singleSignOnState": {
          "$ref": "#/definitions/LiftrBase.SingleSignOnStates",
          "description": "State of the Single Sign On for the organization"
        },
        "enterpriseAppId": {
          "type": "string",
          "description": "AAD enterprise application Id used to setup SSO"
        },
        "singleSignOnUrl": {
          "$ref": "#/definitions/LiftrBase.Uri",
          "description": "URL for SSO to be used by the partner to redirect the user to their system"
        },
        "aadDomains": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of AAD domains fetched from Microsoft Graph for user.",
          "x-typespec-name": "string[]"
        },
        "provisioningState": {
          "$ref": "#/definitions/Azure.ResourceManager.ResourceProvisioningState",
          "description": "Provisioning State of the resource",
          "readOnly": true
        }
      },
      "description": "Properties specific to Single Sign On Resource"
    },
    "LiftrBase.SingleSignOnStates": {
      "type": "string",
      "description": "Various states of the SSO resource",
      "enum": [
        "Initial",
        "Enable",
        "Disable"
      ],
      "x-ms-enum": {
        "name": "SingleSignOnStates",
        "modelAsString": true,
        "values": [
          {
            "name": "Initial",
            "value": "Initial",
            "description": "Initial state of the SSO resource"
          },
          {
            "name": "Enable",
            "value": "Enable",
            "description": "State of the SSO resource when it is enabled"
          },
          {
            "name": "Disable",
            "value": "Disable",
            "description": "State of the SSO resource when it is disabled"
          }
        ]
      }
    },
    "LiftrBase.Uri": {
      "type": "string",
      "description": "A string that represents a URI."
    },
    "LiftrBase.UserDetails": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string",
          "description": "First name of the user"
        },
        "lastName": {
          "type": "string",
          "description": "Last name of the user"
        },
        "emailAddress": {
          "$ref": "#/definitions/LiftrBase.email",
          "description": "Email address of the user"
        },
        "upn": {
          "type": "string",
          "description": "User's principal name"
        },
        "phoneNumber": {
          "type": "string",
          "description": "User's phone number"
        }
      },
      "description": "User details for an organization",
      "required": [
        "firstName",
        "lastName",
        "emailAddress"
      ]
    },
    "LiftrBase.email": {
      "type": "string",
      "description": "Reusable representation of an email address.",
      "pattern": "^[A-Za-z0-9._%+-]+@(?:[A-Za-z0-9-]+\\.)+[A-Za-z]{2,}$"
    },
    "OrganizationResource": {
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/LiftrBase.Data.OrganizationProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "identity": {
          "$ref": "../../../../../common-types/resource-management/v4/managedidentity.json#/definitions/ManagedServiceIdentity",
          "description": "The managed service identities assigned to this resource."
        }
      },
      "description": "Organization Resource by Astronomer",
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "OrganizationResourceListResult": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrganizationResource"
          },
          "description": "The OrganizationResource items on this page",
          "x-typespec-name": "OrganizationResource[]"
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items",
          "x-typespec-name": "TypeSpec.Rest.ResourceLocation"
        }
      },
      "description": "The response of a OrganizationResource list operation.",
      "required": [
        "value"
      ]
    },
    "Versions": {
      "type": "string",
      "description": "Supported API versions for the Astronomer.Astro resource provider.",
      "enum": [
        "2023-07-01-preview"
      ],
      "x-ms-enum": {
        "name": "Versions",
        "modelAsString": true,
        "values": [
          {
            "name": "v1_preview",
            "value": "2023-07-01-preview",
            "description": "Dependent on Azure.ResourceManager.Versions.v1_0_Preview_1, LiftrBase.Versions.v1_preview, LiftrBase.Data.Versions.v1_preview"
          }
        ]
      }
    }
  },
  "parameters": {}
}
