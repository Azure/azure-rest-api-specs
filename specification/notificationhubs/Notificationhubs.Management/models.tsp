import "@typespec/rest";
import "@typespec/http";
import "@azure-tools/typespec-azure-resource-manager";

using TypeSpec.Rest;
using TypeSpec.Http;
using Azure.ResourceManager;
using Azure.ResourceManager.Foundations;

namespace Microsoft.NotificationHubs;

/**
 * Namespace SKU name.
 */
union SkuName {
  string,
  #suppress "@azure-tools/typespec-azure-core/documentation-required" "For backward compatibility"
  Free: "Free",
  #suppress "@azure-tools/typespec-azure-core/documentation-required" "For backward compatibility"
  Basic: "Basic",
  #suppress "@azure-tools/typespec-azure-core/documentation-required" "For backward compatibility"
  Standard: "Standard",
}

/**
 * Defines values for AccessRights.
 */
union AccessRights {
  string,
  #suppress "@azure-tools/typespec-azure-core/documentation-required" "For backward compatibility"
  Manage: "Manage",
  #suppress "@azure-tools/typespec-azure-core/documentation-required" "For backward compatibility"
  Send: "Send",
  #suppress "@azure-tools/typespec-azure-core/documentation-required" "For backward compatibility"
  Listen: "Listen",
}

/**
 * Type of Shared Access Policy Key (primary or secondary).
 */
union PolicyKeyType {
  string,
  #suppress "@azure-tools/typespec-azure-core/documentation-required" "For backward compatibility"
  PrimaryKey: "PrimaryKey",
  #suppress "@azure-tools/typespec-azure-core/documentation-required" "For backward compatibility"
  SecondaryKey: "SecondaryKey",
}

/**
 * Defines values for OperationProvisioningState.
 */
union OperationProvisioningState {
  string,
  #suppress "@azure-tools/typespec-azure-core/documentation-required" "For backward compatibility"
  Unknown: "Unknown",
  #suppress "@azure-tools/typespec-azure-core/documentation-required" "For backward compatibility"
  InProgress: "InProgress",
  #suppress "@azure-tools/typespec-azure-core/documentation-required" "For backward compatibility"
  Succeeded: "Succeeded",
  #suppress "@azure-tools/typespec-azure-core/documentation-required" "For backward compatibility"
  Failed: "Failed",
  #suppress "@azure-tools/typespec-azure-core/documentation-required" "For backward compatibility"
  Canceled: "Canceled",
  #suppress "@azure-tools/typespec-azure-core/documentation-required" "For backward compatibility"
  Pending: "Pending",
  #suppress "@azure-tools/typespec-azure-core/documentation-required" "For backward compatibility"
  Disabled: "Disabled",
}

/**
 * Namespace status.
 */
union NamespaceStatus {
  string,
  #suppress "@azure-tools/typespec-azure-core/documentation-required" "For backward compatibility"
  Created: "Created",
  #suppress "@azure-tools/typespec-azure-core/documentation-required" "For backward compatibility"
  Creating: "Creating",
  #suppress "@azure-tools/typespec-azure-core/documentation-required" "For backward compatibility"
  Suspended: "Suspended",
  #suppress "@azure-tools/typespec-azure-core/documentation-required" "For backward compatibility"
  Deleting: "Deleting",
}

/**
 * Defines values for NamespaceType.
 */
union NamespaceType {
  string,
  #suppress "@azure-tools/typespec-azure-core/documentation-required" "For backward compatibility"
  Messaging: "Messaging",
  #suppress "@azure-tools/typespec-azure-core/documentation-required" "For backward compatibility"
  NotificationHub: "NotificationHub",
}

/**
 * Allowed replication region
 */
union ReplicationRegion {
  string,
  #suppress "@azure-tools/typespec-azure-core/documentation-required" "For backward compatibility"
  Default: "Default",
  #suppress "@azure-tools/typespec-azure-core/documentation-required" "For backward compatibility"
  WestUs2: "WestUs2",
  #suppress "@azure-tools/typespec-azure-core/documentation-required" "For backward compatibility"
  NorthEurope: "NorthEurope",
  #suppress "@azure-tools/typespec-azure-core/documentation-required" "For backward compatibility"
  AustraliaEast: "AustraliaEast",
  #suppress "@azure-tools/typespec-azure-core/documentation-required" "For backward compatibility"
  BrazilSouth: "BrazilSouth",
  #suppress "@azure-tools/typespec-azure-core/documentation-required" "For backward compatibility"
  SouthEastAsia: "SouthEastAsia",
  #suppress "@azure-tools/typespec-azure-core/documentation-required" "For backward compatibility"
  SouthAfricaNorth: "SouthAfricaNorth",
  #suppress "@azure-tools/typespec-azure-core/documentation-required" "For backward compatibility"
  None: "None",
}

/**
 * Namespace SKU name.
 */
union ZoneRedundancyPreference {
  string,
  #suppress "@azure-tools/typespec-azure-core/documentation-required" "For backward compatibility"
  Disabled: "Disabled",
  #suppress "@azure-tools/typespec-azure-core/documentation-required" "For backward compatibility"
  Enabled: "Enabled",
}

/**
 * State of Private Endpoint Connection.
 */
#suppress "@azure-tools/typespec-azure-resource-manager/arm-resource-provisioning-state" "For backward compatibility"
union PrivateEndpointConnectionProvisioningState {
  string,
  #suppress "@azure-tools/typespec-azure-core/documentation-required" "For backward compatibility"
  Unknown: "Unknown",
  #suppress "@azure-tools/typespec-azure-core/documentation-required" "For backward compatibility"
  Succeeded: "Succeeded",
  #suppress "@azure-tools/typespec-azure-core/documentation-required" "For backward compatibility"
  Creating: "Creating",
  #suppress "@azure-tools/typespec-azure-core/documentation-required" "For backward compatibility"
  Updating: "Updating",
  #suppress "@azure-tools/typespec-azure-core/documentation-required" "For backward compatibility"
  UpdatingByProxy: "UpdatingByProxy",
  #suppress "@azure-tools/typespec-azure-core/documentation-required" "For backward compatibility"
  Deleting: "Deleting",
  #suppress "@azure-tools/typespec-azure-core/documentation-required" "For backward compatibility"
  DeletingByProxy: "DeletingByProxy",
  #suppress "@azure-tools/typespec-azure-core/documentation-required" "For backward compatibility"
  Deleted: "Deleted",
}

/**
 * State of Private Link Connection.
 */
union PrivateLinkConnectionStatus {
  string,
  #suppress "@azure-tools/typespec-azure-core/documentation-required" "For backward compatibility"
  Disconnected: "Disconnected",
  #suppress "@azure-tools/typespec-azure-core/documentation-required" "For backward compatibility"
  Pending: "Pending",
  #suppress "@azure-tools/typespec-azure-core/documentation-required" "For backward compatibility"
  Approved: "Approved",
  #suppress "@azure-tools/typespec-azure-core/documentation-required" "For backward compatibility"
  Rejected: "Rejected",
}

/**
 * Type of public network access.
 */
union PublicNetworkAccess {
  string,
  #suppress "@azure-tools/typespec-azure-core/documentation-required" "For backward compatibility"
  Enabled: "Enabled",
  #suppress "@azure-tools/typespec-azure-core/documentation-required" "For backward compatibility"
  Disabled: "Disabled",
}

/**
 * Parameters supplied to the Check Name Availability for Namespace and
 * NotificationHubs.
 */
model CheckAvailabilityParameters {
  /**
   * Gets resource Id
   */
  @visibility(Lifecycle.Read)
  id?: string;

  /**
   * Gets or sets resource name
   */
  @minLength(1)
  name: string;

  /**
   * Gets resource type
   */
  @visibility(Lifecycle.Read)
  type?: string;

  /**
   * Gets or sets resource location
   */
  location?: string;

  /**
   * Gets or sets resource tags
   */
  #suppress "@azure-tools/typespec-azure-resource-manager/arm-no-record" "For backward compatibility"
  tags?: Record<string>;

  /**
   * Not used and deprecated since API version 2023-01-01-preview
   */
  isAvailiable?: boolean;

  /**
   * The Sku description for a namespace
   */
  sku?: Sku;
}

/**
 * The Sku description for a namespace
 */
model Sku {
  /**
   * Namespace SKU name.
   */
  name: SkuName;

  /**
   * Gets or sets the tier of particular sku
   */
  tier?: string;

  /**
   * Gets or sets the Sku size
   */
  size?: string;

  /**
   * Gets or sets the Sku Family
   */
  family?: string;

  /**
   * Gets or sets the capacity of the resource
   */
  capacity?: int32;
}

/**
 * Description of a CheckAvailability resource.
 */
#suppress "@azure-tools/typespec-azure-core/composition-over-inheritance" "For backward compatibility"
model CheckAvailabilityResult extends ProxyResource {
  /**
   * Gets or sets true if the name is available and can be used to
   * create new Namespace/NotificationHub. Otherwise false.
   */
  isAvailiable?: boolean;

  /**
   * Deprecated - only for compatibility.
   */
  @visibility(Lifecycle.Read, Lifecycle.Create)
  location?: string;

  /**
   * Deprecated - only for compatibility.
   */
  #suppress "@azure-tools/typespec-azure-resource-manager/arm-no-record" "For backward compatibility"
  tags?: Record<string>;

  /**
   * The Sku description for a namespace
   */
  sku?: Sku;
}

/**
 * Common fields that are returned in the response for all Azure Resource Manager resources
 */
model Resource {
  /**
   * Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
   */
  @visibility(Lifecycle.Read)
  id?: Azure.Core.armResourceIdentifier;

  /**
   * The name of the resource
   */
  @visibility(Lifecycle.Read)
  name?: string;

  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   */
  @visibility(Lifecycle.Read)
  type?: string;

  /**
   * Azure Resource Manager metadata containing createdBy and modifiedBy information.
   */
  @visibility(Lifecycle.Read)
  systemData?: SystemData;
}

/**
 * NotificationHub properties.
 */
#suppress "@azure-tools/typespec-azure-resource-manager/arm-resource-provisioning-state" "For backward compatibility"
model NotificationHubProperties {
  /**
   * Gets or sets the NotificationHub name.
   */
  @visibility(Lifecycle.Read, Lifecycle.Create)
  name?: string;

  /**
   * Gets or sets the RegistrationTtl of the created NotificationHub
   */
  registrationTtl?: string;

  /**
   * Gets or sets the AuthorizationRules of the created NotificationHub
   */
  @visibility(Lifecycle.Read)
  @OpenAPI.extension("x-ms-identifiers", #["keyName"])
  authorizationRules?: SharedAccessAuthorizationRuleProperties[];

  /**
   * Description of a NotificationHub ApnsCredential.
   */
  apnsCredential?: ApnsCredential;

  /**
   * Description of a NotificationHub WnsCredential.
   */
  wnsCredential?: WnsCredential;

  /**
   * Description of a NotificationHub GcmCredential.
   */
  gcmCredential?: GcmCredential;

  /**
   * Description of a NotificationHub MpnsCredential.
   */
  mpnsCredential?: MpnsCredential;

  /**
   * Description of a NotificationHub AdmCredential.
   */
  admCredential?: AdmCredential;

  /**
   * Description of a NotificationHub BaiduCredential.
   */
  baiduCredential?: BaiduCredential;

  /**
   * Description of a NotificationHub BrowserCredential.
   */
  browserCredential?: BrowserCredential;

  /**
   * Description of a NotificationHub XiaomiCredential.
   */
  xiaomiCredential?: XiaomiCredential;

  /**
   * Description of a NotificationHub FcmV1Credential.
   */
  fcmV1Credential?: FcmV1Credential;

  #suppress "@azure-tools/typespec-azure-core/documentation-required" "For backward compatibility"
  @visibility(Lifecycle.Read)
  dailyMaxActiveDevices?: int64;
}

/**
 * SharedAccessAuthorizationRule properties.
 */
#suppress "@azure-tools/typespec-azure-resource-manager/arm-resource-provisioning-state" "For backward compatibility"
model SharedAccessAuthorizationRuleProperties {
  /**
   * Gets or sets the rights associated with the rule.
   */
  rights: AccessRights[];

  /**
   * Gets a base64-encoded 256-bit primary key for signing and
   * validating the SAS token.
   */
  primaryKey?: string;

  /**
   * Gets a base64-encoded 256-bit primary key for signing and
   * validating the SAS token.
   */
  secondaryKey?: string;

  /**
   * Gets a string that describes the authorization rule.
   */
  @visibility(Lifecycle.Read)
  keyName?: string;

  /**
   * Gets the last modified time for this rule
   */
  @visibility(Lifecycle.Read)
  // FIXME: (utcDateTime) Please double check that this is the correct type for your scenario.
  modifiedTime?: utcDateTime;

  /**
   * Gets the created time for this rule
   */
  @visibility(Lifecycle.Read)
  // FIXME: (utcDateTime) Please double check that this is the correct type for your scenario.
  createdTime?: utcDateTime;

  /**
   * Gets a string that describes the claim type
   */
  @visibility(Lifecycle.Read)
  claimType?: string;

  /**
   * Gets a string that describes the claim value
   */
  @visibility(Lifecycle.Read)
  claimValue?: string;

  /**
   * Gets the revision number for the rule
   */
  @visibility(Lifecycle.Read)
  revision?: int32;
}

/**
 * Description of a NotificationHub ApnsCredential.
 */
model ApnsCredential {
  /**
   * Description of a NotificationHub ApnsCredential.
   */
  #suppress "@azure-tools/typespec-azure-core/no-private-usage" "For backward compatibility"
  @Azure.ResourceManager.Private.conditionalClientFlatten
  properties: ApnsCredentialProperties;
}

/**
 * Description of a NotificationHub ApnsCredential.
 */
model ApnsCredentialProperties {
  /**
   * Gets or sets the APNS certificate.
   */
  apnsCertificate?: string;

  /**
   * Gets or sets the certificate key.
   */
  certificateKey?: string;

  /**
   * Gets or sets the endpoint of this credential.
   */
  @minLength(1)
  endpoint: string;

  /**
   * Gets or sets the APNS certificate Thumbprint
   */
  thumbprint?: string;

  /**
   * Gets or sets a 10-character key identifier (kid) key, obtained from
   * your developer account
   */
  keyId?: string;

  /**
   * Gets or sets the name of the application
   */
  appName?: string;

  /**
   * Gets or sets the issuer (iss) registered claim key, whose value is
   * your 10-character Team ID, obtained from your developer account
   */
  appId?: string;

  /**
   * Gets or sets provider Authentication Token, obtained through your
   * developer account
   */
  token?: string;
}

/**
 * Description of a NotificationHub WnsCredential.
 */
model WnsCredential {
  /**
   * Description of a NotificationHub WnsCredential.
   */
  #suppress "@azure-tools/typespec-azure-core/no-private-usage" "For backward compatibility"
  @Azure.ResourceManager.Private.conditionalClientFlatten
  properties: WnsCredentialProperties;
}

/**
 * Description of a NotificationHub WnsCredential.
 */
model WnsCredentialProperties {
  /**
   * Gets or sets the package ID for this credential.
   */
  packageSid?: string;

  /**
   * Gets or sets the secret key.
   */
  secretKey?: string;

  /**
   * Gets or sets the Windows Live endpoint.
   */
  windowsLiveEndpoint?: string;

  /**
   * Ges or sets the WNS Certificate Key.
   */
  certificateKey?: string;

  /**
   * Gets or sets the WNS Certificate.
   */
  wnsCertificate?: string;
}

/**
 * Description of a NotificationHub GcmCredential.
 */
model GcmCredential {
  /**
   * Description of a NotificationHub GcmCredential.
   */
  #suppress "@azure-tools/typespec-azure-core/no-private-usage" "For backward compatibility"
  @Azure.ResourceManager.Private.conditionalClientFlatten
  properties: GcmCredentialProperties;
}

/**
 * Description of a NotificationHub GcmCredential.
 */
model GcmCredentialProperties {
  /**
   * Gets or sets the GCM endpoint.
   */
  gcmEndpoint?: string;

  /**
   * Gets or sets the Google API key.
   */
  @minLength(1)
  googleApiKey: string;
}

/**
 * Description of a NotificationHub MpnsCredential.
 */
model MpnsCredential {
  /**
   * Description of a NotificationHub MpnsCredential.
   */
  #suppress "@azure-tools/typespec-azure-core/no-private-usage" "For backward compatibility"
  @Azure.ResourceManager.Private.conditionalClientFlatten
  properties: MpnsCredentialProperties;
}

/**
 * Description of a NotificationHub MpnsCredential.
 */
model MpnsCredentialProperties {
  /**
   * Gets or sets the MPNS certificate.
   */
  @minLength(1)
  mpnsCertificate: string;

  /**
   * Gets or sets the certificate key for this credential.
   */
  @minLength(1)
  certificateKey: string;

  /**
   * Gets or sets the MPNS certificate Thumbprint
   */
  @minLength(1)
  thumbprint: string;
}

/**
 * Description of a NotificationHub AdmCredential.
 */
model AdmCredential {
  /**
   * Description of a NotificationHub AdmCredential.
   */
  #suppress "@azure-tools/typespec-azure-core/no-private-usage" "For backward compatibility"
  @Azure.ResourceManager.Private.conditionalClientFlatten
  properties: AdmCredentialProperties;
}

/**
 * Description of a NotificationHub AdmCredential.
 */
model AdmCredentialProperties {
  /**
   * Gets or sets the client identifier.
   */
  @minLength(1)
  clientId: string;

  /**
   * Gets or sets the credential secret access key.
   */
  @minLength(1)
  clientSecret: string;

  /**
   * Gets or sets the URL of the authorization token.
   */
  @minLength(1)
  authTokenUrl: string;
}

/**
 * Description of a NotificationHub BaiduCredential.
 */
model BaiduCredential {
  /**
   * Description of a NotificationHub BaiduCredential.
   */
  #suppress "@azure-tools/typespec-azure-core/no-private-usage" "For backward compatibility"
  @Azure.ResourceManager.Private.conditionalClientFlatten
  properties: BaiduCredentialProperties;
}

/**
 * Description of a NotificationHub BaiduCredential.
 */
model BaiduCredentialProperties {
  /**
   * Gets or sets baidu Api Key.
   */
  @minLength(1)
  baiduApiKey: string;

  /**
   * Gets or sets baidu Endpoint.
   */
  @minLength(1)
  baiduEndPoint: string;

  /**
   * Gets or sets baidu Secret Key
   */
  @minLength(1)
  baiduSecretKey: string;
}

/**
 * Description of a NotificationHub BrowserCredential.
 */
model BrowserCredential {
  /**
   * Description of a NotificationHub BrowserCredential.
   */
  #suppress "@azure-tools/typespec-azure-core/no-private-usage" "For backward compatibility"
  @Azure.ResourceManager.Private.conditionalClientFlatten
  properties: BrowserCredentialProperties;
}

/**
 * Description of a NotificationHub BrowserCredential.
 */
model BrowserCredentialProperties {
  /**
   * Gets or sets web push subject.
   */
  @minLength(1)
  subject: string;

  /**
   * Gets or sets VAPID private key.
   */
  @minLength(1)
  vapidPrivateKey: string;

  /**
   * Gets or sets VAPID public key.
   */
  @minLength(1)
  vapidPublicKey: string;
}

/**
 * Description of a NotificationHub XiaomiCredential.
 */
model XiaomiCredential {
  /**
   * Description of a NotificationHub XiaomiCredentialProperties.
   */
  #suppress "@azure-tools/typespec-azure-core/no-private-usage" "For backward compatibility"
  @Azure.ResourceManager.Private.conditionalClientFlatten
  properties: XiaomiCredentialProperties;
}

/**
 * Description of a NotificationHub XiaomiCredentialProperties.
 */
model XiaomiCredentialProperties {
  /**
   * Gets or sets app secret.
   */
  appSecret?: string;

  /**
   * Gets or sets xiaomi service endpoint.
   */
  endpoint?: string;
}

/**
 * Description of a NotificationHub FcmV1Credential.
 */
model FcmV1Credential {
  /**
   * Description of a NotificationHub FcmV1Credential.
   */
  #suppress "@azure-tools/typespec-azure-core/no-private-usage" "For backward compatibility"
  @Azure.ResourceManager.Private.conditionalClientFlatten
  properties: FcmV1CredentialProperties;
}

/**
 * Description of a NotificationHub FcmV1Credential.
 */
model FcmV1CredentialProperties {
  /**
   * Gets or sets client email.
   */
  @minLength(1)
  clientEmail: string;

  /**
   * Gets or sets private key.
   */
  @minLength(1)
  privateKey: string;

  /**
   * Gets or sets project id.
   */
  @minLength(1)
  projectId: string;
}

/**
 * Patch parameter for NamespaceResource.
 */
model NotificationHubPatchParameters {
  /**
   * NotificationHub properties.
   */
  #suppress "@azure-tools/typespec-azure-core/no-private-usage" "For backward compatibility"
  @Azure.ResourceManager.Private.conditionalClientFlatten
  properties?: NotificationHubProperties;

  /**
   * The Sku description for a namespace
   */
  sku?: Sku;

  /**
   * Dictionary of <string>
   */
  #suppress "@azure-tools/typespec-azure-resource-manager/arm-no-record" "For backward compatibility"
  tags?: Record<string>;
}

/**
 * Description of a NotificationHub Resource.
 */
#suppress "@azure-tools/typespec-azure-core/composition-over-inheritance" "For backward compatibility"
model DebugSendResponse extends ProxyResource {
  /**
   * Result of DebugSend operations.
   */
  #suppress "@azure-tools/typespec-azure-core/no-private-usage" "For backward compatibility"
  @Azure.ResourceManager.Private.conditionalClientFlatten
  properties?: DebugSendResult;

  /**
   * Deprecated - only for compatibility.
   */
  @visibility(Lifecycle.Read, Lifecycle.Create)
  location?: string;

  /**
   * Deprecated - only for compatibility.
   */
  #suppress "@azure-tools/typespec-azure-resource-manager/arm-no-record" "For backward compatibility"
  tags?: Record<string>;
}

/**
 * Result of DebugSend operations.
 */
model DebugSendResult {
  /**
   * Gets or sets successful send
   */
  @visibility(Lifecycle.Read)
  success?: int64;

  /**
   * Gets or sets send failure
   */
  @visibility(Lifecycle.Read)
  failure?: int64;

  /**
   * Gets or sets actual failure description
   */
  @visibility(Lifecycle.Read)
  @OpenAPI.extension("x-ms-identifiers", #[])
  results?: RegistrationResult[];
}

/**
 * Notification result for a single registration.
 */
model RegistrationResult {
  /**
   * PNS type.
   */
  @visibility(Lifecycle.Read)
  applicationPlatform?: string;

  /**
   * PNS handle.
   */
  @visibility(Lifecycle.Read)
  pnsHandle?: string;

  /**
   * Registration id.
   */
  @visibility(Lifecycle.Read)
  registrationId?: string;

  /**
   * Notification outcome.
   */
  @visibility(Lifecycle.Read)
  outcome?: string;
}

/**
 * Response for the POST request that returns Namespace or NotificationHub access keys (connection strings).
 */
model ResourceListKeys {
  /**
   * Gets or sets primaryConnectionString of the AuthorizationRule.
   */
  @visibility(Lifecycle.Read)
  primaryConnectionString?: string;

  /**
   * Gets or sets secondaryConnectionString of the created
   * AuthorizationRule
   */
  @visibility(Lifecycle.Read)
  secondaryConnectionString?: string;

  /**
   * Gets or sets primaryKey of the created AuthorizationRule.
   */
  @visibility(Lifecycle.Read)
  primaryKey?: string;

  /**
   * Gets or sets secondaryKey of the created AuthorizationRule
   */
  @visibility(Lifecycle.Read)
  secondaryKey?: string;

  /**
   * Gets or sets keyName of the created AuthorizationRule
   */
  @visibility(Lifecycle.Read)
  keyName?: string;
}

/**
 * Namespace / NotificationHub Regenerate Keys request.
 */
model PolicyKeyResource {
  /**
   * Type of Shared Access Policy Key (primary or secondary).
   */
  policyKey: PolicyKeyType;
}

/**
 * Description of a NotificationHub PNS Credentials. This is a response of the POST requests that return namespace or hubs
 * PNS credentials.
 */
#suppress "@azure-tools/typespec-azure-core/composition-over-inheritance" "For backward compatibility"
model PnsCredentialsResource extends ProxyResource {
  /**
   * Collection of Notification Hub or Notification Hub Namespace PNS credentials.
   */
  #suppress "@azure-tools/typespec-azure-core/no-private-usage" "For backward compatibility"
  @Azure.ResourceManager.Private.conditionalClientFlatten
  properties?: PnsCredentials;

  /**
   * Deprecated - only for compatibility.
   */
  @visibility(Lifecycle.Read, Lifecycle.Create)
  location?: string;

  /**
   * Deprecated - only for compatibility.
   */
  #suppress "@azure-tools/typespec-azure-resource-manager/arm-no-record" "For backward compatibility"
  tags?: Record<string>;
}

/**
 * Collection of Notification Hub or Notification Hub Namespace PNS credentials.
 */
model PnsCredentials {
  /**
   * Description of a NotificationHub AdmCredential.
   */
  admCredential?: AdmCredential;

  /**
   * Description of a NotificationHub ApnsCredential.
   */
  apnsCredential?: ApnsCredential;

  /**
   * Description of a NotificationHub BaiduCredential.
   */
  baiduCredential?: BaiduCredential;

  /**
   * Description of a NotificationHub BrowserCredential.
   */
  browserCredential?: BrowserCredential;

  /**
   * Description of a NotificationHub GcmCredential.
   */
  gcmCredential?: GcmCredential;

  /**
   * Description of a NotificationHub MpnsCredential.
   */
  mpnsCredential?: MpnsCredential;

  /**
   * Description of a NotificationHub WnsCredential.
   */
  wnsCredential?: WnsCredential;

  /**
   * Description of a NotificationHub XiaomiCredential.
   */
  xiaomiCredential?: XiaomiCredential;

  /**
   * Description of a NotificationHub FcmV1Credential.
   */
  fcmV1Credential?: FcmV1Credential;
}

/**
 * Represents namespace properties.
 */
model NamespaceProperties {
  /**
   * Name of the Notification Hubs namespace. This is immutable property, set automatically
   * by the service when the namespace is created.
   */
  @visibility(Lifecycle.Read)
  name?: string;

  /**
   * Defines values for OperationProvisioningState.
   */
  provisioningState?: OperationProvisioningState;

  /**
   * Namespace status.
   */
  status?: NamespaceStatus;

  /**
   * Gets or sets whether or not the namespace is currently enabled.
   */
  @visibility(Lifecycle.Read)
  enabled?: boolean;

  /**
   * Gets or sets whether or not the namespace is set as Critical.
   */
  @visibility(Lifecycle.Read)
  critical?: boolean;

  /**
   * Namespace subscription id.
   */
  @visibility(Lifecycle.Read)
  subscriptionId?: string;

  /**
   * Region. The value is always set to the same value as Namespace.Location, so we are deprecating
   * this property.
   */
  @visibility(Lifecycle.Read)
  region?: string;

  /**
   * Azure Insights Metrics id.
   */
  @visibility(Lifecycle.Read)
  metricId?: string;

  /**
   * Time when the namespace was created.
   */
  @visibility(Lifecycle.Read)
  // FIXME: (utcDateTime) Please double check that this is the correct type for your scenario.
  createdAt?: utcDateTime;

  /**
   * Time when the namespace was updated.
   */
  @visibility(Lifecycle.Read)
  // FIXME: (utcDateTime) Please double check that this is the correct type for your scenario.
  updatedAt?: utcDateTime;

  /**
   * Defines values for NamespaceType.
   */
  namespaceType?: NamespaceType;

  /**
   * Allowed replication region
   */
  replicationRegion?: ReplicationRegion;

  /**
   * Namespace SKU name.
   */
  zoneRedundancy?: ZoneRedundancyPreference = ZoneRedundancyPreference.Disabled;

  /**
   * A collection of network authorization rules.
   */
  networkAcls?: NetworkAcls;

  /**
   * Collection of Notification Hub or Notification Hub Namespace PNS credentials.
   */
  pnsCredentials?: PnsCredentials;

  /**
   * Gets or sets endpoint you can use to perform NotificationHub
   * operations.
   */
  @visibility(Lifecycle.Read)
  serviceBusEndpoint?: string;

  /**
   * Private Endpoint Connections for namespace
   */
  @visibility(Lifecycle.Read)
  privateEndpointConnections?: PrivateEndpointConnectionResource[];

  /**
   * Gets or sets scaleUnit where the namespace gets created
   */
  @visibility(Lifecycle.Read, Lifecycle.Create)
  scaleUnit?: string;

  /**
   * Deprecated.
   */
  dataCenter?: string;

  /**
   * Type of public network access.
   */
  publicNetworkAccess?: PublicNetworkAccess = PublicNetworkAccess.Enabled;
}

/**
 * A collection of network authorization rules.
 */
model NetworkAcls {
  /**
   * List of IP rules.
   */
  @OpenAPI.extension("x-ms-identifiers", #[])
  ipRules?: IpRule[];

  /**
   * A default (public Internet) network authorization rule, which contains rights if no other network rule matches.
   */
  publicNetworkRule?: PublicInternetAuthorizationRule;
}

/**
 * A network authorization rule that filters traffic based on IP address.
 */
model IpRule {
  /**
   * IP mask.
   */
  @minLength(1)
  ipMask: string;

  /**
   * List of access rights.
   */
  rights: AccessRights[];
}

/**
 * A default (public Internet) network authorization rule, which contains rights if no other network rule matches.
 */
model PublicInternetAuthorizationRule {
  /**
   * List of access rights.
   */
  rights: AccessRights[];
}

/**
 * Private Endpoint Connection properties.
 */
model PrivateEndpointConnectionProperties {
  /**
   * State of Private Endpoint Connection.
   */
  provisioningState?: PrivateEndpointConnectionProvisioningState;

  /**
   * Represents a Private Endpoint that is connected to Notification Hubs namespace using Private Endpoint Connection.
   */
  privateEndpoint?: RemotePrivateEndpointConnection;

  /**
   * List of group ids. For Notification Hubs, it always contains a single "namespace" element.
   */
  @visibility(Lifecycle.Read)
  groupIds?: string[];

  /**
   * State of the Private Link Service connection.
   */
  privateLinkServiceConnectionState?: RemotePrivateLinkServiceConnectionState;
}

/**
 * Represents a Private Endpoint that is connected to Notification Hubs namespace using Private Endpoint Connection.
 */
model RemotePrivateEndpointConnection {
  /**
   * ARM resource ID of the Private Endpoint. This may belong to different subscription and resource group than a Notification Hubs namespace.
   */
  @visibility(Lifecycle.Read)
  id?: string;
}

/**
 * State of the Private Link Service connection.
 */
model RemotePrivateLinkServiceConnectionState {
  /**
   * State of Private Link Connection.
   */
  status?: PrivateLinkConnectionStatus;

  /**
   * Human-friendly description.
   */
  @visibility(Lifecycle.Read)
  description?: string;

  /**
   * Human-friendly description of required actions.
   */
  @visibility(Lifecycle.Read)
  actionsRequired?: string;
}

/**
 * Patch parameter for NamespaceResource.
 */
model NamespacePatchParameters {
  /**
   * The Sku description for a namespace
   */
  sku?: Sku;

  /**
   * Represents namespace properties.
   */
  properties?: NamespaceProperties;

  /**
   * Dictionary of <string>
   */
  #suppress "@azure-tools/typespec-azure-resource-manager/arm-no-record" "For backward compatibility"
  tags?: Record<string>;
}

/**
 * Optional operation properties.
 */
model OperationProperties {
  /**
   * Optional service specification used in Operations API.
   */
  serviceSpecification?: ServiceSpecification;
}

/**
 * Optional service specification used in Operations API.
 */
model ServiceSpecification {
  /**
   * Log specifications.
   */
  @visibility(Lifecycle.Read)
  @OpenAPI.extension("x-ms-identifiers", #["name"])
  logSpecifications?: LogSpecification[];

  /**
   * Metric specification.
   */
  @visibility(Lifecycle.Read)
  @OpenAPI.extension("x-ms-identifiers", #["name", "unit"])
  metricSpecifications?: MetricSpecification[];
}

/**
 * A single log category specification.
 */
model LogSpecification {
  /**
   * Name of the log category.
   */
  @visibility(Lifecycle.Read)
  name?: string;

  /**
   * Display name of the log category.
   */
  @visibility(Lifecycle.Read)
  displayName?: string;

  /**
   * Duration of data written to a single blob.
   */
  @visibility(Lifecycle.Read)
  blobDuration?: string;

  /**
   * Category group for the log specification.
   */
  categoryGroups?: string[];
}

/**
 * A metric specification.
 */
model MetricSpecification {
  /**
   * Metric name / id.
   */
  @visibility(Lifecycle.Read)
  name?: string;

  /**
   * User-visible metric name.
   */
  @visibility(Lifecycle.Read)
  displayName?: string;

  /**
   * Description of the metric.
   */
  @visibility(Lifecycle.Read)
  displayDescription?: string;

  /**
   * Metric unit.
   */
  @visibility(Lifecycle.Read)
  unit?: string;

  /**
   * Type of the aggregation (Average, Minimum, Maximum, Total or Count).
   */
  @visibility(Lifecycle.Read)
  aggregationType?: string;

  /**
   * List of availabilities.
   */
  @visibility(Lifecycle.Read)
  @OpenAPI.extension("x-ms-identifiers", #[])
  availabilities?: Availability[];

  /**
   * List of supported time grain types.
   */
  @visibility(Lifecycle.Read)
  @OpenAPI.extension("x-ms-identifiers", #[])
  supportedTimeGrainTypes?: string[];

  /**
   * The matching regex pattern to be applied to the field pointed by the "metricsFilterPathSelector" flag in the ARM manifest.
   */
  @visibility(Lifecycle.Read)
  metricFilterPattern?: string;

  /**
   * Optional property. If set to true, then zero will be returned for time duration where no metric is emitted / published.
   */
  @visibility(Lifecycle.Read)
  fillGapWithZero?: boolean;
}

/**
 * Represents metric availability (part of RP operation descriptions).
 */
model Availability {
  /**
   * Time grain of the availability.
   */
  @visibility(Lifecycle.Read)
  timeGrain?: string;

  /**
   * Duration of the availability blob.
   */
  @visibility(Lifecycle.Read)
  blobDuration?: string;
}

/**
 * Represents properties of Private Link Resource.
 */
#suppress "@azure-tools/typespec-azure-resource-manager/arm-resource-provisioning-state" "For backward compatibility"
model PrivateLinkResourceProperties {
  /**
   * A Group Id for Private Link. For Notification Hubs, it is always set to "namespace".
   */
  @visibility(Lifecycle.Read)
  groupId?: string;

  /**
   * Required members. For Notification Hubs, it's always a collection with a single "namespace" item.
   */
  @visibility(Lifecycle.Read)
  requiredMembers?: string[];

  /**
   * Required DNS zone names. For Notification Hubs, it contains two CNames for Service Bus and Notification Hubs zones.
   */
  @visibility(Lifecycle.Read)
  requiredZoneNames?: string[];
}

/**
 * Part of Private Endpoint description that stores information about a connection between Private Endpoint and Notification Hubs namespace.
 * This is internal class, not visible to customers, and we use it only to discover the link identifier.
 */
model ConnectionDetails {
  /**
   * A unique ID of the connection. This is not the ARM id, but rather an internal identifier set by the Networking RP. Notification Hubs code
   * does not analyze it.
   */
  @visibility(Lifecycle.Read)
  id?: string;

  /**
   * IP address of the Private Endpoint. This is not used by Notification Hubs.
   */
  @visibility(Lifecycle.Read)
  privateIpAddress?: string;

  /**
   * Link identifier. This is a string representation of an integer that is also encoded in every IPv6 frame received by Front Door,
   * and we use it to create implicit authorization rule that allows connection from the associated Private Endpoint.
   */
  @visibility(Lifecycle.Read)
  linkIdentifier?: string;

  /**
   * Group name. Always "namespace" for Notification Hubs.
   */
  @visibility(Lifecycle.Read)
  groupId?: string;

  /**
   * Member name. Always "namespace" for Notification Hubs.
   */
  @visibility(Lifecycle.Read)
  memberName?: string;
}

/**
 * Represents a connectivity information to Notification Hubs namespace. This is part of PrivateLinkService proxy that tell
 * the Networking RP how to connect to the Notification Hubs namespace.
 */
model GroupConnectivityInformation {
  /**
   * Group id. Always set to "namespace".
   */
  @visibility(Lifecycle.Read)
  groupId?: string;

  /**
   * Member name. Always set to "namespace".
   */
  @visibility(Lifecycle.Read)
  memberName?: string;

  /**
   * List of customer-visible domain names that point to a Notification Hubs namespace.
   */
  @visibility(Lifecycle.Read)
  customerVisibleFqdns?: string[];

  /**
   * One of the domain name from the customer-visible names; this is used internally by Private Link service to make connection to Notification Hubs
   * namespace.
   */
  @visibility(Lifecycle.Read)
  internalFqdn?: string;

  /**
   * Not used by Notification Hubs.
   */
  @visibility(Lifecycle.Read)
  redirectMapId?: string;

  /**
   * ARM region for Private Link Service. We use the region that contains the connected Notification Hubs namespace.
   */
  @visibility(Lifecycle.Read)
  privateLinkServiceArmRegion?: string;
}

/**
 * A customer-visible sub-resource of Private Endpoint, which describe the connection between Private Endpoint and Notification Hubs namespace.
 */
model PrivateLinkServiceConnection {
  /**
   * Name of the Private Link Service connection.
   */
  name?: string;

  /**
   * List of group ids. Always contains a single element - "namespace" - for Notification Hub Namespace.
   */
  groupIds?: string[];

  /**
   * Request message provided by the user that created the connection. This is usually used when the connection requires manual approval.
   */
  requestMessage?: string;
}
