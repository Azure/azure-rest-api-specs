import "@typespec/rest";
import "@typespec/http";
import "@azure-tools/typespec-azure-resource-manager";

using TypeSpec.Rest;
using TypeSpec.Http;
using Azure.ResourceManager;

namespace Azure.ResourceManager.Grafana;

interface Operations extends Azure.ResourceManager.Operations {}

enum Origin {
  user,
  system,
  `user,system`,
}

enum ActionType {
  Internal,
}

enum ProvisioningState {
  Accepted,
  Creating,
  Updating,
  Deleting,
  Succeeded,
  Failed,
  Canceled,
  Deleted,
  NotSpecified,
}

enum PublicNetworkAccess {
  Enabled,
  Disabled,
}

enum ZoneRedundancy {
  Disabled,
  Enabled,
}

enum ApiKey {
  Disabled,
  Enabled,
}

enum DeterministicOutboundIP {
  Disabled,
  Enabled,
}

enum PrivateEndpointServiceConnectionStatus {
  Pending,
  Approved,
  Rejected,
}

enum PrivateEndpointConnectionProvisioningState {
  Succeeded,
  Creating,
  Deleting,
  Failed,
}

enum CreatedByType {
  User,
  Application,
  ManagedIdentity,
  Key,
}

enum AutoGeneratedDomainNameLabelScope {
  TenantReuse,
}

enum MarketplaceAutoRenew {
  Disabled,
  Enabled,
}

enum StartTLSPolicy {
  OpportunisticStartTLS,
  MandatoryStartTLS,
  NoStartTLS,
}

enum ManagedServiceIdentityType {
  None,
  SystemAssigned,
  UserAssigned,
  `SystemAssigned,UserAssigned`,
}

enum AvailablePromotion {
  None,
  FreeTrial,
}

enum ManagedPrivateEndpointConnectionStatus {
  Pending,
  Approved,
  Rejected,
  Disconnected,
}

@doc("Properties specific to the grafana resource.")
model ManagedGrafanaProperties {
  @doc("Provisioning state of the resource.")
  @visibility("read")
  provisioningState?: ProvisioningState;

  @doc("The Grafana software version.")
  @visibility("read")
  grafanaVersion?: string;

  @doc("The endpoint of the Grafana instance.")
  @visibility("read")
  endpoint?: string;

  @doc("Indicate the state for enable or disable traffic over the public interface.")
  publicNetworkAccess?: PublicNetworkAccess;

  @doc("The zone redundancy setting of the Grafana instance.")
  zoneRedundancy?: ZoneRedundancy;

  @doc("The api key setting of the Grafana instance.")
  apiKey?: ApiKey;

  @doc("Whether a Grafana instance uses deterministic outbound IPs.")
  deterministicOutboundIP?: DeterministicOutboundIP;

  @doc("List of outbound IPs if deterministicOutboundIP is enabled.")
  @visibility("read")
  outboundIPs?: string[];

  @doc("The private endpoint connections of the Grafana instance.")
  @visibility("read")
  privateEndpointConnections?: PrivateEndpointConnection[];

  @doc("Scope for dns deterministic name hash calculation.")
  autoGeneratedDomainNameLabelScope?: AutoGeneratedDomainNameLabelScope;

  @doc("GrafanaIntegrations is a bundled observability experience (e.g. pre-configured data source, tailored Grafana dashboards, alerting defaults) for common monitoring scenarios.")
  grafanaIntegrations?: GrafanaIntegrations;

  @doc("Enterprise settings of a Grafana instance")
  enterpriseConfigurations?: EnterpriseConfigurations;

  @doc("Server configurations of a Grafana instance")
  grafanaConfigurations?: GrafanaConfigurations;

  @doc("Installed plugin list of the Grafana instance. Key is plugin id, value is plugin definition.")
  grafanaPlugins?: Record<GrafanaPlugin>;

  @doc("The major Grafana software version to target.")
  grafanaMajorVersion?: string;
}

@doc("Properties of the PrivateEndpointConnectProperties.")
model PrivateEndpointConnectionProperties {
  @doc("The resource of private end point.")
  privateEndpoint?: PrivateEndpoint;

  @doc("A collection of information about the state of the connection between service consumer and provider.")
  privateLinkServiceConnectionState: PrivateLinkServiceConnectionState;

  @doc("The private endpoint connection group ids.")
  groupIds?: string[];

  @doc("The provisioning state of the private endpoint connection resource.")
  @visibility("read")
  provisioningState?: PrivateEndpointConnectionProvisioningState;
}

@doc("The Private Endpoint resource.")
model PrivateEndpoint {
  @doc("The ARM identifier for Private Endpoint")
  @visibility("read")
  id?: string;
}

@doc("A collection of information about the state of the connection between service consumer and provider.")
model PrivateLinkServiceConnectionState {
  @doc("Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.")
  status?: PrivateEndpointServiceConnectionStatus;

  @doc("The reason for approval/rejection of the connection.")
  description?: string;

  @doc("A message indicating if changes on the service provider require any updates on the consumer.")
  actionsRequired?: string;
}

@doc("GrafanaIntegrations is a bundled observability experience (e.g. pre-configured data source, tailored Grafana dashboards, alerting defaults) for common monitoring scenarios.")
model GrafanaIntegrations {
  azureMonitorWorkspaceIntegrations?: AzureMonitorWorkspaceIntegration[];
}

@doc("Integrations for Azure Monitor Workspace.")
model AzureMonitorWorkspaceIntegration {
  @doc("The resource Id of the connected Azure Monitor Workspace.")
  azureMonitorWorkspaceResourceId?: string;
}

@doc("Enterprise settings of a Grafana instance")
model EnterpriseConfigurations {
  @doc("The Plan Id of the Azure Marketplace subscription for the Enterprise plugins")
  marketplacePlanId?: string;

  @doc("The AutoRenew setting of the Enterprise subscription")
  marketplaceAutoRenew?: MarketplaceAutoRenew;
}

@doc("Server configurations of a Grafana instance")
model GrafanaConfigurations {
  @doc("""
Email server settings.
https://grafana.com/docs/grafana/v9.0/setup-grafana/configure-grafana/#smtp
""")
  smtp?: Smtp;
}

@doc("""
Email server settings.
https://grafana.com/docs/grafana/v9.0/setup-grafana/configure-grafana/#smtp
""")
model Smtp {
  @doc("Enable this to allow Grafana to send email. Default is false")
  enabled?: boolean;

  @doc("SMTP server hostname with port, e.g. test.email.net:587")
  host?: string;

  @doc("User of SMTP auth")
  user?: string;

  @doc("Password of SMTP auth. If the password contains # or ;, then you have to wrap it with triple quotes")
  password?: string;

  @doc("""
Address used when sending out emails
https://pkg.go.dev/net/mail#Address
""")
  fromAddress?: string;

  @doc("""
Name to be used when sending out emails. Default is \"Azure Managed Grafana Notification\"
https://pkg.go.dev/net/mail#Address
""")
  fromName?: string;

  @doc("""
The StartTLSPolicy setting of the SMTP configuration
https://pkg.go.dev/github.com/go-mail/mail#StartTLSPolicy
""")
  startTLSPolicy?: StartTLSPolicy;

  @doc("""
Verify SSL for SMTP server. Default is false
https://pkg.go.dev/crypto/tls#Config
""")
  skipVerify?: boolean;
}

@doc("Plugin of Grafana")
model GrafanaPlugin {
  @doc("Grafana plugin id")
  @visibility("read")
  pluginId?: string;
}

@doc("User assigned identity properties")
model UserAssignedIdentity {
  @doc("The principal ID of the assigned identity.")
  @visibility("read")
  principalId?: string;

  @doc("The client ID of the assigned identity.")
  @visibility("read")
  clientId?: string;
}

@doc("Properties of a private link resource.")
model PrivateLinkResourceProperties {
  @doc("Provisioning state of the resource.")
  @visibility("read")
  provisioningState?: ProvisioningState;

  @doc("The private link resource group id.")
  @visibility("read")
  groupId?: string;

  @doc("The private link resource required member names.")
  @visibility("read")
  requiredMembers?: string[];

  @doc("The private link resource Private link DNS zone name.")
  requiredZoneNames?: string[];
}

@doc("Enterprise details of a Grafana instance")
model EnterpriseDetails {
  @doc("SaaS subscription details of a Grafana instance")
  saasSubscriptionDetails?: SaasSubscriptionDetails;

  @doc("The allocation details of the per subscription free trial slot of the subscription.")
  marketplaceTrialQuota?: MarketplaceTrialQuota;
}

@doc("SaaS subscription details of a Grafana instance")
model SaasSubscriptionDetails {
  @doc("The plan Id of the SaaS subscription.")
  planId?: string;

  @doc("The offer Id of the SaaS subscription.")
  offerId?: string;

  @doc("The publisher Id of the SaaS subscription.")
  publisherId?: string;

  @doc("The billing term of the SaaS Subscription.")
  term?: SubscriptionTerm;
}

@doc("The current billing term of the SaaS Subscription.")
model SubscriptionTerm {
  @doc("The unit of the billing term.")
  termUnit?: string;

  @doc("The date and time in UTC of when the billing term starts.")
  // FIXME: (utcDateTime) Please double check that this is the correct type for your scenario.
  startDate?: utcDateTime;

  @doc("The date and time in UTC of when the billing term ends.")
  // FIXME: (utcDateTime) Please double check that this is the correct type for your scenario.
  endDate?: utcDateTime;
}

@doc("The allocation details of the per subscription free trial slot of the subscription.")
model MarketplaceTrialQuota {
  @doc("Available enterprise promotion for the subscription")
  availablePromotion?: AvailablePromotion;

  @doc("Resource Id of the Grafana resource which is doing the trial.")
  grafanaResourceId?: ResourceIdentifier<[
    {
      type: "Microsoft.Dashboard/grafana";
    }
  ]>;

  @doc("The date and time in UTC of when the trial starts.")
  // FIXME: (utcDateTime) Please double check that this is the correct type for your scenario.
  trialStartAt?: utcDateTime;

  @doc("The date and time in UTC of when the trial ends.")
  // FIXME: (utcDateTime) Please double check that this is the correct type for your scenario.
  trialEndAt?: utcDateTime;
}

model GrafanaAvailablePluginListResponse {
  value?: GrafanaAvailablePlugin[];
  nextLink?: string;
}

@doc("Available plugins of grafana")
model GrafanaAvailablePlugin {
  @doc("Grafana plugin id")
  @visibility("read")
  pluginId?: string;

  @doc("Grafana plugin display name")
  @visibility("read")
  name?: string;
}

@doc("Properties specific to the managed private endpoint.")
model ManagedPrivateEndpointModelProperties {
  @doc("Provisioning state of the resource.")
  @visibility("read")
  provisioningState?: ProvisioningState;

  @doc("The ARM resource ID of the resource for which the managed private endpoint is pointing to.")
  @visibility("read", "create")
  privateLinkResourceId?: string;

  @doc("The region of the resource to which the managed private endpoint is pointing to.")
  @visibility("read", "create")
  privateLinkResourceRegion?: string;

  @doc("The group Ids of the managed private endpoint.")
  @visibility("read", "create")
  groupIds?: string[];

  @doc("User input request message of the managed private endpoint.")
  @visibility("read", "create")
  requestMessage?: string;

  @doc("The state of managed private endpoint connection.")
  @visibility("read")
  connectionState?: ManagedPrivateEndpointConnectionState;

  @doc("The URL of the data store behind the private link service. It would be the URL in the Grafana data source configuration page without the protocol and port.")
  @visibility("read", "create")
  privateLinkServiceUrl?: string;

  @doc("The private IP of private endpoint after approval. This property is empty before connection is approved.")
  @visibility("read")
  privateLinkServicePrivateIP?: string;
}

@doc("The state of managed private endpoint connection.")
model ManagedPrivateEndpointConnectionState {
  @doc("The approval/rejection status of managed private endpoint connection.")
  @visibility("read")
  status?: ManagedPrivateEndpointConnectionStatus;

  @doc("Gets or sets the reason for approval/rejection of the connection.")
  @visibility("read")
  description?: string;
}
